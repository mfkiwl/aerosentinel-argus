
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ad4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  08017da8  08017da8  00018da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018688  08018688  00019688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018690  08018690  00019690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018694  08018694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000350  24000000  08018698  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017e4  24000350  080189e8  0001a350  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001b34  080189e8  0001ab34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a350  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003154a  00000000  00000000  0001a37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f9d  00000000  00000000  0004b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028c8  00000000  00000000  00050868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000205f  00000000  00000000  00053130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b703  00000000  00000000  0005518f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000336f3  00000000  00000000  00060892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c1fc  00000000  00000000  00093f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00200181  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c59c  00000000  00000000  002001c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  0020c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000350 	.word	0x24000350
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017d8c 	.word	0x08017d8c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000354 	.word	0x24000354
 800030c:	08017d8c 	.word	0x08017d8c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <bme680_platform_read>:
  *
  */


int8_t bme680_platform_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73fb      	strb	r3, [r7, #15]
	BME_GTXBuffer[0] = reg_addr | 0x80;
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <bme680_platform_read+0x70>)
 8000ab2:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aba:	4814      	ldr	r0, [pc, #80]	@ (8000b0c <bme680_platform_read+0x74>)
 8000abc:	f008 fdfa 	bl	80096b4 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, ReadNumbr+1, BUS_TIMEOUT); // timeout 1000msec;
    HAL_SPI_TransmitReceive(&hspi2, BME_GTXBuffer, BME_GRXBuffer, length+1, 1000); // timeout 1000msec;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000acc:	9200      	str	r2, [sp, #0]
 8000ace:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <bme680_platform_read+0x78>)
 8000ad0:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <bme680_platform_read+0x70>)
 8000ad2:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <bme680_platform_read+0x7c>)
 8000ad4:	f00f f8ac 	bl	800fc30 <HAL_SPI_TransmitReceive>
    while(hspi2.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000ad8:	bf00      	nop
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <bme680_platform_read+0x7c>)
 8000adc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d0f9      	beq.n	8000ada <bme680_platform_read+0x42>

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_SET); // NSS High
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aec:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <bme680_platform_read+0x74>)
 8000aee:	f008 fde1 	bl	80096b4 <HAL_GPIO_WritePin>
    memcpy(reg_data, BME_GRXBuffer+1, length);
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <bme680_platform_read+0x80>)
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4619      	mov	r1, r3
 8000af8:	68b8      	ldr	r0, [r7, #8]
 8000afa:	f013 ff42 	bl	8014982 <memcpy>

    return 0;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	240003dc 	.word	0x240003dc
 8000b0c:	58020400 	.word	0x58020400
 8000b10:	240005dc 	.word	0x240005dc
 8000b14:	24001644 	.word	0x24001644
 8000b18:	240005dd 	.word	0x240005dd

08000b1c <bme680_platform_write>:

int8_t bme680_platform_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	4603      	mov	r3, r0
 8000b2a:	73fb      	strb	r3, [r7, #15]
	BME_GTXBuffer[0] = reg_addr & 0x7F;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <bme680_platform_write+0x6c>)
 8000b36:	701a      	strb	r2, [r3, #0]
    memcpy(&BME_GTXBuffer[1], reg_data, length);
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <bme680_platform_write+0x70>)
 8000b3e:	f013 ff20 	bl	8014982 <memcpy>

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b48:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <bme680_platform_write+0x74>)
 8000b4a:	f008 fdb3 	bl	80096b4 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, WriteNumbr+1, BUS_TIMEOUT); // send register address + write data
    HAL_SPI_Transmit(&hspi2, BME_GTXBuffer, length+1, 1000); // send register address + write data
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3301      	adds	r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5a:	490b      	ldr	r1, [pc, #44]	@ (8000b88 <bme680_platform_write+0x6c>)
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <bme680_platform_write+0x78>)
 8000b5e:	f00e fc07 	bl	800f370 <HAL_SPI_Transmit>
    while(hspi2.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000b62:	bf00      	nop
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <bme680_platform_write+0x78>)
 8000b66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d0f9      	beq.n	8000b64 <bme680_platform_write+0x48>

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_SET); // NSS High
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <bme680_platform_write+0x74>)
 8000b78:	f008 fd9c 	bl	80096b4 <HAL_GPIO_WritePin>

    return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	240003dc 	.word	0x240003dc
 8000b8c:	240003dd 	.word	0x240003dd
 8000b90:	58020400 	.word	0x58020400
 8000b94:	24001644 	.word	0x24001644

08000b98 <bme680_delay_func>:
  * @}
  *
  */

void bme680_delay_func(uint32_t period, void *intf_ptr)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8000ba2:	e008      	b.n	8000bb6 <bme680_delay_func+0x1e>
	{
		for(i = 0; i < 84; i++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	e002      	b.n	8000bb0 <bme680_delay_func+0x18>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3301      	adds	r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b53      	cmp	r3, #83	@ 0x53
 8000bb4:	d9f9      	bls.n	8000baa <bme680_delay_func+0x12>
	while(period--)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <bme680_delay_func+0xc>
		{
			;
		}
	}
	//HAL_Delay(period/1000);
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <BME680_Init>:
  *
  * @param  bme680_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
int8_t BME680_Init(){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0



	uint8_t chipid;
	int8_t rslt = BME68X_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	71fb      	strb	r3, [r7, #7]

	dev_bme->intf = BME68X_SPI_INTF;
 8000bda:	4b44      	ldr	r3, [pc, #272]	@ (8000cec <BME680_Init+0x11c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2200      	movs	r2, #0
 8000be0:	731a      	strb	r2, [r3, #12]

	dev_bme->read = bme680_platform_read;
 8000be2:	4b42      	ldr	r3, [pc, #264]	@ (8000cec <BME680_Init+0x11c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a42      	ldr	r2, [pc, #264]	@ (8000cf0 <BME680_Init+0x120>)
 8000be8:	641a      	str	r2, [r3, #64]	@ 0x40
	dev_bme->write = bme680_platform_write;
 8000bea:	4b40      	ldr	r3, [pc, #256]	@ (8000cec <BME680_Init+0x11c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a41      	ldr	r2, [pc, #260]	@ (8000cf4 <BME680_Init+0x124>)
 8000bf0:	645a      	str	r2, [r3, #68]	@ 0x44
	dev_bme->intf_ptr = &bme680_dev_addr;
 8000bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8000cec <BME680_Init+0x11c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a40      	ldr	r2, [pc, #256]	@ (8000cf8 <BME680_Init+0x128>)
 8000bf8:	605a      	str	r2, [r3, #4]
	dev_bme->delay_us = bme680_delay_func;
 8000bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8000cec <BME680_Init+0x11c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8000cfc <BME680_Init+0x12c>)
 8000c00:	649a      	str	r2, [r3, #72]	@ 0x48
	dev_bme->amb_temp = 25;
 8000c02:	4b3a      	ldr	r3, [pc, #232]	@ (8000cec <BME680_Init+0x11c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2219      	movs	r2, #25
 8000c08:	739a      	strb	r2, [r3, #14]
    bme680_delay_func(100000, dev_bme->intf_ptr);
 8000c0a:	4b38      	ldr	r3, [pc, #224]	@ (8000cec <BME680_Init+0x11c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4619      	mov	r1, r3
 8000c12:	483b      	ldr	r0, [pc, #236]	@ (8000d00 <BME680_Init+0x130>)
 8000c14:	f7ff ffc0 	bl	8000b98 <bme680_delay_func>

    bme680_platform_read(BME68X_REG_CHIP_ID, &chipid, 1, dev_bme->intf_ptr);
 8000c18:	4b34      	ldr	r3, [pc, #208]	@ (8000cec <BME680_Init+0x11c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	1db9      	adds	r1, r7, #6
 8000c20:	2201      	movs	r2, #1
 8000c22:	20d0      	movs	r0, #208	@ 0xd0
 8000c24:	f7ff ff38 	bl	8000a98 <bme680_platform_read>

    bme680_delay_func(100000, dev_bme->intf_ptr);
 8000c28:	4b30      	ldr	r3, [pc, #192]	@ (8000cec <BME680_Init+0x11c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4833      	ldr	r0, [pc, #204]	@ (8000d00 <BME680_Init+0x130>)
 8000c32:	f7ff ffb1 	bl	8000b98 <bme680_delay_func>
	/* Initialize bmi323. */
	rslt += bme68x_init(dev_bme);
 8000c36:	4b2d      	ldr	r3, [pc, #180]	@ (8000cec <BME680_Init+0x11c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f866 	bl	8000d0c <bme68x_init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4413      	add	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	71fb      	strb	r3, [r7, #7]

	if (rslt != BME68X_OK)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <BME680_Init+0x8a>
	{
		//printf("bme680_init() failed, error code: %d\r\n", rslt);
		return rslt;
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	e044      	b.n	8000ce4 <BME680_Init+0x114>
	else
	{
		//printf("BME680 initialized successfully\r\n");
	}

	rslt += bme68x_get_regs(BME68X_REG_CHIP_ID, &chipid, 1, dev_bme);
 8000c5a:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <BME680_Init+0x11c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1db9      	adds	r1, r7, #6
 8000c60:	2201      	movs	r2, #1
 8000c62:	20d0      	movs	r0, #208	@ 0xd0
 8000c64:	f000 f910 	bl	8000e88 <bme68x_get_regs>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	71fb      	strb	r3, [r7, #7]
	if (rslt != BME68X_OK)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <BME680_Init+0xb2>
	{
		//printf("read chip ID failed, error code: %d\r\n", rslt);
		return rslt;
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	e030      	b.n	8000ce4 <BME680_Init+0x114>
	}

	bme680_config.os_hum = BME68X_OS_2X;
 8000c82:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <BME680_Init+0x134>)
 8000c84:	2202      	movs	r2, #2
 8000c86:	701a      	strb	r2, [r3, #0]
	bme680_config.os_pres = BME68X_OS_4X;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <BME680_Init+0x134>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	709a      	strb	r2, [r3, #2]
	bme680_config.os_temp = BME68X_OS_8X;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <BME680_Init+0x134>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	705a      	strb	r2, [r3, #1]
	bme680_config.filter = BME68X_FILTER_SIZE_3;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <BME680_Init+0x134>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	70da      	strb	r2, [r3, #3]

	rslt += bme68x_set_conf(&bme680_config, dev_bme);
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <BME680_Init+0x11c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4818      	ldr	r0, [pc, #96]	@ (8000d04 <BME680_Init+0x134>)
 8000ca2:	f000 f979 	bl	8000f98 <bme68x_set_conf>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4413      	add	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	71fb      	strb	r3, [r7, #7]

	heater_config.enable = 1;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <BME680_Init+0x138>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
	heater_config.heatr_temp = 320; //Target temperature in degrees Celsius
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <BME680_Init+0x138>)
 8000cba:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000cbe:	805a      	strh	r2, [r3, #2]
	heater_config.heatr_dur = 150; // Heating duration in milliseconds
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <BME680_Init+0x138>)
 8000cc2:	2296      	movs	r2, #150	@ 0x96
 8000cc4:	809a      	strh	r2, [r3, #4]

	rslt += bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heater_config, dev_bme);
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <BME680_Init+0x11c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	490e      	ldr	r1, [pc, #56]	@ (8000d08 <BME680_Init+0x138>)
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 fae7 	bl	80012a2 <bme68x_set_heatr_conf>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	71fb      	strb	r3, [r7, #7]




    return rslt;
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000000 	.word	0x24000000
 8000cf0:	08000a99 	.word	0x08000a99
 8000cf4:	08000b1d 	.word	0x08000b1d
 8000cf8:	240003d8 	.word	0x240003d8
 8000cfc:	08000b99 	.word	0x08000b99
 8000d00:	000186a0 	.word	0x000186a0
 8000d04:	240003bc 	.word	0x240003bc
 8000d08:	240003c4 	.word	0x240003c4

08000d0c <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f8fb 	bl	8000f10 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	20d0      	movs	r0, #208	@ 0xd0
 8000d22:	f000 f8b1 	bl	8000e88 <bme68x_get_regs>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d114      	bne.n	8000d5c <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b61      	cmp	r3, #97	@ 0x61
 8000d38:	d10e      	bne.n	8000d58 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 ff80 	bl	8001c40 <read_variant_id>
 8000d40:	4603      	mov	r3, r0
 8000d42:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d107      	bne.n	8000d5c <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 fe73 	bl	8001a38 <get_calib_data>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	e001      	b.n	8000d5c <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000d58:	23fd      	movs	r3, #253	@ 0xfd
 8000d5a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000d88:	6838      	ldr	r0, [r7, #0]
 8000d8a:	f000 fca9 	bl	80016e0 <null_ptr_check>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000d94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d16c      	bne.n	8000e76 <bme68x_set_regs+0x10e>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d069      	beq.n	8000e76 <bme68x_set_regs+0x10e>
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d066      	beq.n	8000e76 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d05d      	beq.n	8000e6a <bme68x_set_regs+0x102>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0a      	cmp	r3, #10
 8000db2:	d85a      	bhi.n	8000e6a <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000db8:	e034      	b.n	8000e24 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	7b1b      	ldrb	r3, [r3, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d118      	bne.n	8000df4 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8000dc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fbc6 	bl	800155e <set_mem_page>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8000dd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	3328      	adds	r3, #40	@ 0x28
 8000dec:	443b      	add	r3, r7
 8000dee:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000df2:	e009      	b.n	8000e08 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8000df4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	441a      	add	r2, r3
 8000dfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	3328      	adds	r3, #40	@ 0x28
 8000e02:	443b      	add	r3, r7
 8000e04:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8000e08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	3301      	adds	r3, #1
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	3328      	adds	r3, #40	@ 0x28
 8000e18:	443b      	add	r3, r7
 8000e1a:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8000e1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e20:	3301      	adds	r3, #1
 8000e22:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8c6      	bhi.n	8000dba <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8000e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d11e      	bne.n	8000e72 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8000e38:	7c38      	ldrb	r0, [r7, #16]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685d      	ldr	r5, [r3, #4]
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	1c59      	adds	r1, r3, #1
 8000e4a:	462b      	mov	r3, r5
 8000e4c:	47a0      	blx	r4
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8000e62:	23fe      	movs	r3, #254	@ 0xfe
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8000e68:	e003      	b.n	8000e72 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8000e6a:	23fc      	movs	r3, #252	@ 0xfc
 8000e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000e70:	e004      	b.n	8000e7c <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8000e72:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000e74:	e002      	b.n	8000e7c <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8000e76:	23ff      	movs	r3, #255	@ 0xff
 8000e78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8000e7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3728      	adds	r7, #40	@ 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}

08000e88 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4603      	mov	r3, r0
 8000e96:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f000 fc21 	bl	80016e0 <null_ptr_check>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8000ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d12a      	bne.n	8000f00 <bme68x_get_regs+0x78>
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d027      	beq.n	8000f00 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	7b1b      	ldrb	r3, [r3, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10e      	bne.n	8000ed6 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	6839      	ldr	r1, [r7, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fb4e 	bl	800155e <set_mem_page>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8000ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ed4:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	7bf8      	ldrb	r0, [r7, #15]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	47a0      	blx	r4
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d004      	beq.n	8000f04 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8000efa:	23fe      	movs	r3, #254	@ 0xfe
 8000efc:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8000efe:	e001      	b.n	8000f04 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8000f00:	23ff      	movs	r3, #255	@ 0xff
 8000f02:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd90      	pop	{r4, r7, pc}

08000f10 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8000f18:	23e0      	movs	r3, #224	@ 0xe0
 8000f1a:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8000f1c:	23b6      	movs	r3, #182	@ 0xb6
 8000f1e:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 fbdd 	bl	80016e0 <null_ptr_check>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d12b      	bne.n	8000f8a <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7b1b      	ldrb	r3, [r3, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d104      	bne.n	8000f44 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fb74 	bl	8001628 <get_mem_page>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8000f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d11e      	bne.n	8000f8a <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000f4c:	f107 010d 	add.w	r1, r7, #13
 8000f50:	f107 000e 	add.w	r0, r7, #14
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f7ff ff06 	bl	8000d68 <bme68x_set_regs>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d110      	bne.n	8000f8a <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6852      	ldr	r2, [r2, #4]
 8000f70:	4611      	mov	r1, r2
 8000f72:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000f76:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7b1b      	ldrb	r3, [r3, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d104      	bne.n	8000f8a <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fb51 	bl	8001628 <get_mem_page>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	77bb      	strb	r3, [r7, #30]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8000faa:	4a7c      	ldr	r2, [pc, #496]	@ (800119c <bme68x_set_conf+0x204>)
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb4:	6018      	str	r0, [r3, #0]
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f94a 	bl	8001262 <bme68x_get_op_mode>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8000fd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d105      	bne.n	8000fe6 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8000fda:	6839      	ldr	r1, [r7, #0]
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 f8df 	bl	80011a0 <bme68x_set_op_mode>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8000fec:	23ff      	movs	r3, #255	@ 0xff
 8000fee:	77fb      	strb	r3, [r7, #31]
 8000ff0:	e0b2      	b.n	8001158 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 8000ff2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 80ae 	bne.w	8001158 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8000ffc:	7d38      	ldrb	r0, [r7, #20]
 8000ffe:	f107 010c 	add.w	r1, r7, #12
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2205      	movs	r2, #5
 8001006:	f7ff ff3f 	bl	8000e88 <bme68x_get_regs>
 800100a:	4603      	mov	r3, r0
 800100c:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 8001016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d108      	bne.n	8001030 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3303      	adds	r3, #3
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	2107      	movs	r1, #7
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fb2d 	bl	8001686 <boundary_check>
 800102c:	4603      	mov	r3, r0
 800102e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001030:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d108      	bne.n	800104a <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	2105      	movs	r1, #5
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fb20 	bl	8001686 <boundary_check>
 8001046:	4603      	mov	r3, r0
 8001048:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800104a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d108      	bne.n	8001064 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3302      	adds	r3, #2
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	2105      	movs	r1, #5
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fb13 	bl	8001686 <boundary_check>
 8001060:	4603      	mov	r3, r0
 8001062:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001064:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d107      	bne.n	800107c <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	2105      	movs	r1, #5
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fb07 	bl	8001686 <boundary_check>
 8001078:	4603      	mov	r3, r0
 800107a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800107c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d108      	bne.n	8001096 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3304      	adds	r3, #4
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	2108      	movs	r1, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fafa 	bl	8001686 <boundary_check>
 8001092:	4603      	mov	r3, r0
 8001094:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001096:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d15c      	bne.n	8001158 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 800109e:	7c3b      	ldrb	r3, [r7, #16]
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	f023 031c 	bic.w	r3, r3, #28
 80010a6:	b25a      	sxtb	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	78db      	ldrb	r3, [r3, #3]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	f003 031c 	and.w	r3, r3, #28
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	015b      	lsls	r3, r3, #5
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	f023 031c 	bic.w	r3, r3, #28
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	f003 031c 	and.w	r3, r3, #28
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	f023 0307 	bic.w	r3, r3, #7
 8001100:	b25a      	sxtb	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b25b      	sxtb	r3, r3
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	2b08      	cmp	r3, #8
 800111c:	d004      	beq.n	8001128 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	791b      	ldrb	r3, [r3, #4]
 8001122:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001128:	7c3b      	ldrb	r3, [r7, #16]
 800112a:	b25b      	sxtb	r3, r3
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	b25a      	sxtb	r2, r3
 8001132:	7fbb      	ldrb	r3, [r7, #30]
 8001134:	015b      	lsls	r3, r3, #5
 8001136:	b25b      	sxtb	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b25b      	sxtb	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	b25b      	sxtb	r3, r3
 8001144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001148:	b25a      	sxtb	r2, r3
 800114a:	7f7b      	ldrb	r3, [r7, #29]
 800114c:	01db      	lsls	r3, r3, #7
 800114e:	b25b      	sxtb	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b25b      	sxtb	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8001158:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001160:	f107 010c 	add.w	r1, r7, #12
 8001164:	f107 0014 	add.w	r0, r7, #20
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2205      	movs	r2, #5
 800116c:	f7ff fdfc 	bl	8000d68 <bme68x_set_regs>
 8001170:	4603      	mov	r3, r0
 8001172:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001174:	7f3b      	ldrb	r3, [r7, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00a      	beq.n	8001190 <bme68x_set_conf+0x1f8>
 800117a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001182:	7f3b      	ldrb	r3, [r7, #28]
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f80a 	bl	80011a0 <bme68x_set_op_mode>
 800118c:	4603      	mov	r3, r0
 800118e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001190:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	08017da8 	.word	0x08017da8

080011a0 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80011b0:	2374      	movs	r3, #116	@ 0x74
 80011b2:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80011b4:	f107 010d 	add.w	r1, r7, #13
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	2074      	movs	r0, #116	@ 0x74
 80011be:	f7ff fe63 	bl	8000e88 <bme68x_get_regs>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d11d      	bne.n	800120a <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80011ce:	7b7b      	ldrb	r3, [r7, #13]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d016      	beq.n	800120a <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80011dc:	7b7b      	ldrb	r3, [r7, #13]
 80011de:	f023 0303 	bic.w	r3, r3, #3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80011e6:	f107 010d 	add.w	r1, r7, #13
 80011ea:	f107 000c 	add.w	r0, r7, #12
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f7ff fdb9 	bl	8000d68 <bme68x_set_regs>
 80011f6:	4603      	mov	r3, r0
 80011f8:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	6852      	ldr	r2, [r2, #4]
 8001202:	4611      	mov	r1, r2
 8001204:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001208:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <bme68x_set_op_mode+0x78>
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0cd      	beq.n	80011b4 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d01b      	beq.n	8001256 <bme68x_set_op_mode+0xb6>
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d117      	bne.n	8001256 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8001226:	7b7b      	ldrb	r3, [r7, #13]
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f023 0303 	bic.w	r3, r3, #3
 800122e:	b25a      	sxtb	r2, r3
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	b25b      	sxtb	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b25b      	sxtb	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001242:	f107 010d 	add.w	r1, r7, #13
 8001246:	f107 000c 	add.w	r0, r7, #12
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2201      	movs	r2, #1
 800124e:	f7ff fd8b 	bl	8000d68 <bme68x_set_regs>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00f      	beq.n	8001292 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001272:	f107 010e 	add.w	r1, r7, #14
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2201      	movs	r2, #1
 800127a:	2074      	movs	r0, #116	@ 0x74
 800127c:	f7ff fe04 	bl	8000e88 <bme68x_get_regs>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e001      	b.n	8001296 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001292:	23ff      	movs	r3, #255	@ 0xff
 8001294:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b088      	sub	sp, #32
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80012b8:	f247 1370 	movw	r3, #29040	@ 0x7170
 80012bc:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d06e      	beq.n	80013a2 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ff6a 	bl	80011a0 <bme68x_set_op_mode>
 80012cc:	4603      	mov	r3, r0
 80012ce:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 80012d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80012d8:	f107 021c 	add.w	r2, r7, #28
 80012dc:	7bf9      	ldrb	r1, [r7, #15]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f000 fa1d 	bl	8001720 <set_conf>
 80012e6:	4603      	mov	r3, r0
 80012e8:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d159      	bne.n	80013a6 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80012f2:	f107 0118 	add.w	r1, r7, #24
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2202      	movs	r2, #2
 80012fa:	2070      	movs	r0, #112	@ 0x70
 80012fc:	f7ff fdc4 	bl	8000e88 <bme68x_get_regs>
 8001300:	4603      	mov	r3, r0
 8001302:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 8001304:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d14c      	bne.n	80013a6 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10b      	bne.n	800132c <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8001314:	2300      	movs	r3, #0
 8001316:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d102      	bne.n	8001326 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8001320:	2302      	movs	r3, #2
 8001322:	777b      	strb	r3, [r7, #29]
 8001324:	e006      	b.n	8001334 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8001326:	2301      	movs	r3, #1
 8001328:	777b      	strb	r3, [r7, #29]
 800132a:	e003      	b.n	8001334 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 800132c:	2301      	movs	r3, #1
 800132e:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8001330:	2300      	movs	r3, #0
 8001332:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8001334:	7e3b      	ldrb	r3, [r7, #24]
 8001336:	b25b      	sxtb	r3, r3
 8001338:	f023 0308 	bic.w	r3, r3, #8
 800133c:	b25a      	sxtb	r2, r3
 800133e:	7fbb      	ldrb	r3, [r7, #30]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	b25b      	sxtb	r3, r3
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	b25b      	sxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b25b      	sxtb	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8001352:	7e7b      	ldrb	r3, [r7, #25]
 8001354:	b25b      	sxtb	r3, r3
 8001356:	f023 030f 	bic.w	r3, r3, #15
 800135a:	b25a      	sxtb	r2, r3
 800135c:	7f3b      	ldrb	r3, [r7, #28]
 800135e:	b25b      	sxtb	r3, r3
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	b25b      	sxtb	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b25b      	sxtb	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800136e:	7e7b      	ldrb	r3, [r7, #25]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001376:	b25a      	sxtb	r2, r3
 8001378:	7f7b      	ldrb	r3, [r7, #29]
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	b25b      	sxtb	r3, r3
 800137e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001382:	b25b      	sxtb	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b25b      	sxtb	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 800138c:	f107 0118 	add.w	r1, r7, #24
 8001390:	f107 0014 	add.w	r0, r7, #20
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f7ff fce6 	bl	8000d68 <bme68x_set_regs>
 800139c:	4603      	mov	r3, r0
 800139e:	77fb      	strb	r3, [r7, #31]
 80013a0:	e001      	b.n	80013a6 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80013a2:	23ff      	movs	r3, #255	@ 0xff
 80013a4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80013a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b08b      	sub	sp, #44	@ 0x2c
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80013c6:	d902      	bls.n	80013ce <calc_res_heat+0x1a>
    {
        temp = 400;
 80013c8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80013cc:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013dc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80013e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80014f8 <calc_res_heat+0x144>
 80013e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013fe:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80014fc <calc_res_heat+0x148>
 8001402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001406:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001500 <calc_res_heat+0x14c>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001504 <calc_res_heat+0x150>
 8001412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001416:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001428:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001508 <calc_res_heat+0x154>
 800142c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001430:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8001434:	89fb      	ldrh	r3, [r7, #14]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800143e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800144a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800144e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001456:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001468:	edd7 7a07 	vldr	s15, [r7, #28]
 800146c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001470:	ed97 7a06 	vldr	s14, [r7, #24]
 8001474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001478:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800148e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001492:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800149a:	edd7 7a05 	vldr	s15, [r7, #20]
 800149e:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b0:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800150c <calc_res_heat+0x158>
 80014b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014bc:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80014c0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80014c4:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80014c8:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80014cc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80014d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 80014d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001510 <calc_res_heat+0x15c>
 80014d8:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 80014dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80014e4:	793b      	ldrb	r3, [r7, #4]
 80014e6:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 80014e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	372c      	adds	r7, #44	@ 0x2c
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	42440000 	.word	0x42440000
 80014fc:	47000000 	.word	0x47000000
 8001500:	3a03126f 	.word	0x3a03126f
 8001504:	3b1a0275 	.word	0x3b1a0275
 8001508:	44800000 	.word	0x44800000
 800150c:	3b03126f 	.word	0x3b03126f
 8001510:	4059999a 	.word	0x4059999a

08001514 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8001528:	d308      	bcc.n	800153c <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 800152a:	23ff      	movs	r3, #255	@ 0xff
 800152c:	73bb      	strb	r3, [r7, #14]
 800152e:	e00f      	b.n	8001550 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3301      	adds	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001540:	d8f6      	bhi.n	8001530 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	019b      	lsls	r3, r3, #6
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8001550:	7bbb      	ldrb	r3, [r7, #14]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <set_mem_page>:
    return rslt;
}

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 800155e:	b590      	push	{r4, r7, lr}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	6039      	str	r1, [r7, #0]
 8001568:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f000 f8b8 	bl	80016e0 <null_ptr_check>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d14f      	bne.n	800161c <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8001584:	2300      	movs	r3, #0
 8001586:	73bb      	strb	r3, [r7, #14]
 8001588:	e001      	b.n	800158e <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 800158a:	2310      	movs	r3, #16
 800158c:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	7b5b      	ldrb	r3, [r3, #13]
 8001592:	7bba      	ldrb	r2, [r7, #14]
 8001594:	429a      	cmp	r2, r3
 8001596:	d041      	beq.n	800161c <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	7bba      	ldrb	r2, [r7, #14]
 800159c:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f107 010d 	add.w	r1, r7, #13
 80015aa:	2201      	movs	r2, #1
 80015ac:	20f3      	movs	r0, #243	@ 0xf3
 80015ae:	47a0      	blx	r4
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 80015c4:	23fe      	movs	r3, #254	@ 0xfe
 80015c6:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 80015c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d125      	bne.n	800161c <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	f023 0310 	bic.w	r3, r3, #16
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	b25a      	sxtb	r2, r3
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f107 010d 	add.w	r1, r7, #13
 80015fe:	2201      	movs	r2, #1
 8001600:	2073      	movs	r0, #115	@ 0x73
 8001602:	47a0      	blx	r4
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001618:	23fe      	movs	r3, #254	@ 0xfe
 800161a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800161c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}

08001628 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f855 	bl	80016e0 <null_ptr_check>
 8001636:	4603      	mov	r3, r0
 8001638:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11b      	bne.n	800167a <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f107 010e 	add.w	r1, r7, #14
 800164e:	2201      	movs	r2, #1
 8001650:	20f3      	movs	r0, #243	@ 0xf3
 8001652:	47a0      	blx	r4
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8001668:	23fe      	movs	r3, #254	@ 0xfe
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e005      	b.n	800167a <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 800166e:	7bbb      	ldrb	r3, [r7, #14]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	b2da      	uxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}

08001686 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	460b      	mov	r3, r1
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f823 	bl	80016e0 <null_ptr_check>
 800169a:	4603      	mov	r3, r0
 800169c:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d015      	beq.n	80016d0 <boundary_check+0x4a>
 80016a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d111      	bne.n	80016d0 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	7afa      	ldrb	r2, [r7, #11]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d20e      	bcs.n	80016d4 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	7afa      	ldrb	r2, [r7, #11]
 80016ba:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 80016ce:	e001      	b.n	80016d4 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80016d0:	23ff      	movs	r3, #255	@ 0xff
 80016d2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <null_ptr_check+0x2a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <null_ptr_check+0x2a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <null_ptr_check+0x2a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 800170a:	23ff      	movs	r3, #255	@ 0xff
 800170c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b093      	sub	sp, #76	@ 0x4c
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	460b      	mov	r3, r1
 800172e:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 800173c:	236e      	movs	r3, #110	@ 0x6e
 800173e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001742:	4aa1      	ldr	r2, [pc, #644]	@ (80019c8 <set_conf+0x2a8>)
 8001744:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001748:	ca07      	ldmia	r2, {r0, r1, r2}
 800174a:	c303      	stmia	r3!, {r0, r1}
 800174c:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800174e:	4a9e      	ldr	r2, [pc, #632]	@ (80019c8 <set_conf+0x2a8>)
 8001750:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001754:	ca07      	ldmia	r2, {r0, r1, r2}
 8001756:	c303      	stmia	r3!, {r0, r1}
 8001758:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800175a:	4a9b      	ldr	r2, [pc, #620]	@ (80019c8 <set_conf+0x2a8>)
 800175c:	f107 0320 	add.w	r3, r7, #32
 8001760:	ca07      	ldmia	r2, {r0, r1, r2}
 8001762:	c303      	stmia	r3!, {r0, r1}
 8001764:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001766:	4a98      	ldr	r2, [pc, #608]	@ (80019c8 <set_conf+0x2a8>)
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	ca07      	ldmia	r2, {r0, r1, r2}
 800176e:	c303      	stmia	r3!, {r0, r1}
 8001770:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d024      	beq.n	80017c2 <set_conf+0xa2>
 8001778:	2b03      	cmp	r3, #3
 800177a:	f300 80f9 	bgt.w	8001970 <set_conf+0x250>
 800177e:	2b01      	cmp	r3, #1
 8001780:	d002      	beq.n	8001788 <set_conf+0x68>
 8001782:	2b02      	cmp	r3, #2
 8001784:	d07c      	beq.n	8001880 <set_conf+0x160>
 8001786:	e0f3      	b.n	8001970 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8001788:	235a      	movs	r3, #90	@ 0x5a
 800178a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	885b      	ldrh	r3, [r3, #2]
 8001792:	6839      	ldr	r1, [r7, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fe0d 	bl	80013b4 <calc_res_heat>
 800179a:	4603      	mov	r3, r0
 800179c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 80017a0:	2364      	movs	r3, #100	@ 0x64
 80017a2:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	889b      	ldrh	r3, [r3, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff feb2 	bl	8001514 <calc_gas_wait>
 80017b0:	4603      	mov	r3, r0
 80017b2:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 80017c0:	e0db      	b.n	800197a <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <set_conf+0xb2>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d103      	bne.n	80017da <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 80017d2:	23ff      	movs	r3, #255	@ 0xff
 80017d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 80017d8:	e0cf      	b.n	800197a <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80017e0:	e03f      	b.n	8001862 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80017e2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80017e6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80017ea:	325a      	adds	r2, #90	@ 0x5a
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	3348      	adds	r3, #72	@ 0x48
 80017f0:	443b      	add	r3, r7
 80017f2:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fdd2 	bl	80013b4 <calc_res_heat>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8001818:	443b      	add	r3, r7
 800181a:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 800181e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001822:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8001826:	3264      	adds	r2, #100	@ 0x64
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	3348      	adds	r3, #72	@ 0x48
 800182c:	443b      	add	r3, r7
 800182e:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fe65 	bl	8001514 <calc_gas_wait>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8001852:	443b      	add	r3, r7
 8001854:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8001858:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800185c:	3301      	adds	r3, #1
 800185e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	7c1b      	ldrb	r3, [r3, #16]
 8001866:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800186a:	429a      	cmp	r2, r3
 800186c:	d3b9      	bcc.n	80017e2 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	7c1a      	ldrb	r2, [r3, #16]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	7c1b      	ldrb	r3, [r3, #16]
 800187a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 800187e:	e07c      	b.n	800197a <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <set_conf+0x170>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d103      	bne.n	8001898 <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8001890:	23ff      	movs	r3, #255	@ 0xff
 8001892:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8001896:	e070      	b.n	800197a <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8a5b      	ldrh	r3, [r3, #18]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80018ac:	e03a      	b.n	8001924 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80018ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018b2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80018b6:	325a      	adds	r2, #90	@ 0x5a
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	3348      	adds	r3, #72	@ 0x48
 80018bc:	443b      	add	r3, r7
 80018be:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fd6c 	bl	80013b4 <calc_res_heat>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80018e4:	443b      	add	r3, r7
 80018e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80018ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018ee:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80018f2:	3264      	adds	r2, #100	@ 0x64
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	3348      	adds	r3, #72	@ 0x48
 80018f8:	443b      	add	r3, r7
 80018fa:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	881a      	ldrh	r2, [r3, #0]
 800190c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	3348      	adds	r3, #72	@ 0x48
 8001914:	443b      	add	r3, r7
 8001916:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 800191a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800191e:	3301      	adds	r3, #1
 8001920:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	7c1b      	ldrb	r3, [r3, #16]
 8001928:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800192c:	429a      	cmp	r2, r3
 800192e:	d3be      	bcc.n	80018ae <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	7c1a      	ldrb	r2, [r3, #16]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8a5b      	ldrh	r3, [r3, #18]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 f841 	bl	80019cc <calc_heatr_dur_shared>
 800194a:	4603      	mov	r3, r0
 800194c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME68X_OK)
 8001950:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10f      	bne.n	8001978 <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8001958:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800195c:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	f7ff fa00 	bl	8000d68 <bme68x_set_regs>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 800196e:	e003      	b.n	8001978 <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8001970:	2301      	movs	r3, #1
 8001972:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001976:	e000      	b.n	800197a <set_conf+0x25a>
            break;
 8001978:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 800197a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10b      	bne.n	800199a <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8001982:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001986:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800198a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f7ff f9ea 	bl	8000d68 <bme68x_set_regs>
 8001994:	4603      	mov	r3, r0
 8001996:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME68X_OK)
 800199a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10b      	bne.n	80019ba <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 80019a2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80019a6:	f107 0114 	add.w	r1, r7, #20
 80019aa:	f107 0020 	add.w	r0, r7, #32
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f7ff f9da 	bl	8000d68 <bme68x_set_regs>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80019ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80019be:	4618      	mov	r0, r3
 80019c0:	374c      	adds	r7, #76	@ 0x4c
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08017e38 	.word	0x08017e38

080019cc <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f240 7282 	movw	r2, #1922	@ 0x782
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d902      	bls.n	80019ea <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 80019e4:	23ff      	movs	r3, #255	@ 0xff
 80019e6:	73bb      	strb	r3, [r7, #14]
 80019e8:	e01d      	b.n	8001a26 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019f0:	fb03 f202 	mul.w	r2, r3, r2
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <calc_heatr_dur_shared+0x68>)
 80019f6:	fba3 1302 	umull	r1, r3, r3, r2
 80019fa:	1ad2      	subs	r2, r2, r3
 80019fc:	0852      	lsrs	r2, r2, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8001a04:	e005      	b.n	8001a12 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a16:	d8f6      	bhi.n	8001a06 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	019b      	lsls	r3, r3, #6
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	12c8b89f 	.word	0x12c8b89f

08001a38 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08e      	sub	sp, #56	@ 0x38
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8001a40:	f107 010c 	add.w	r1, r7, #12
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2217      	movs	r2, #23
 8001a48:	208a      	movs	r0, #138	@ 0x8a
 8001a4a:	f7ff fa1d 	bl	8000e88 <bme68x_get_regs>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 8001a54:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10b      	bne.n	8001a74 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	f103 0117 	add.w	r1, r3, #23
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	220e      	movs	r2, #14
 8001a68:	20e1      	movs	r0, #225	@ 0xe1
 8001a6a:	f7ff fa0d 	bl	8000e88 <bme68x_get_regs>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 8001a74:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10b      	bne.n	8001a94 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2205      	movs	r2, #5
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff f9fd 	bl	8000e88 <bme68x_get_regs>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8001a94:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f040 80cb 	bne.w	8001c34 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8001a9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8001ab6:	7b7b      	ldrb	r3, [r7, #13]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	7b3b      	ldrb	r3, [r7, #12]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	b25a      	sxtb	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8001ad2:	7c7b      	ldrb	r3, [r7, #17]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	7c3b      	ldrb	r3, [r7, #16]
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8001ae6:	7cfb      	ldrb	r3, [r7, #19]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	7cbb      	ldrb	r3, [r7, #18]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8001af8:	7d3b      	ldrb	r3, [r7, #20]
 8001afa:	b25a      	sxtb	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	7dbb      	ldrb	r3, [r7, #22]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8001b14:	7e7b      	ldrb	r3, [r7, #25]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	7e3b      	ldrb	r3, [r7, #24]
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8001b26:	7efb      	ldrb	r3, [r7, #27]
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8001b30:	7ebb      	ldrb	r3, [r7, #26]
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	7fbb      	ldrb	r3, [r7, #30]
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8001b4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8001b62:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8001b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8001b74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8001b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8001ba6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001baa:	b25a      	sxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8001bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bb4:	b25a      	sxtb	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8001bba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8001bc4:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8001bcc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001bd0:	b25a      	sxtb	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8001bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bda:	b25a      	sxtb	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8001be0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8001bf6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001bfa:	b25a      	sxtb	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8001c00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da00      	bge.n	8001c0e <get_calib_data+0x1d6>
 8001c0c:	330f      	adds	r3, #15
 8001c0e:	111b      	asrs	r3, r3, #4
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8001c18:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001c1c:	b25a      	sxtb	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8001c24:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	111b      	asrs	r3, r3, #4
 8001c2c:	b25a      	sxtb	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 8001c34:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3738      	adds	r7, #56	@ 0x38
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8001c4c:	f107 010e 	add.w	r1, r7, #14
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	20f0      	movs	r0, #240	@ 0xf0
 8001c56:	f7ff f917 	bl	8000e88 <bme68x_get_regs>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <bmi3_init>:
/*!
 * @brief This API is the entry point for bmi3 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi3_init(struct bmi3_dev *dev)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id[2] = { 0 };
 8001c82:	2300      	movs	r3, #0
 8001c84:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 feac 	bl	80029e4 <null_ptr_check>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 8001c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10d      	bne.n	8001cb4 <bmi3_init+0x3a>
    {
        dev->chip_id = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI3_SPI_INTF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7a5b      	ldrb	r3, [r3, #9]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <bmi3_init+0x34>
        {
            dev->dummy_byte = 1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	72da      	strb	r2, [r3, #11]
 8001cac:	e002      	b.n	8001cb4 <bmi3_init+0x3a>
        }
        else
        {
            dev->dummy_byte = 2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	72da      	strb	r2, [r3, #11]
        }
    }

    if (rslt == BMI3_OK)
 8001cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d118      	bne.n	8001cee <bmi3_init+0x74>
    {
        /* Perform soft-reset to bring all register values to their default values */
        rslt = bmi3_soft_reset(dev);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8d3 	bl	8001e68 <bmi3_soft_reset>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10f      	bne.n	8001cee <bmi3_init+0x74>
        {
            /* Read chip-id of the BMI3 sensor */
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, chip_id, 2, dev);
 8001cce:	f107 010c 	add.w	r1, r7, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f000 f821 	bl	8001d1e <bmi3_get_regs>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8001ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <bmi3_init+0x74>
            {
                dev->chip_id = chip_id[0];
 8001ce8:	7b3a      	ldrb	r2, [r7, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (rslt == BMI3_OK)
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10d      	bne.n	8001d12 <bmi3_init+0x98>
    {
        if (((chip_id[1] & BMI3_REV_ID_MASK) >> BMI3_REV_ID_POS) == BMI3_ENABLE)
 8001cf6:	7b7b      	ldrb	r3, [r7, #13]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d104      	bne.n	8001d0a <bmi3_init+0x90>
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_14_BIT_MASK;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8001d06:	839a      	strh	r2, [r3, #28]
 8001d08:	e003      	b.n	8001d12 <bmi3_init+0x98>
        }
        else
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_13_BIT_MASK;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001d10:	839a      	strh	r2, [r3, #28]
        }
    }

    return rslt;
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <bmi3_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x03.
 */
int8_t bmi3_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8001d1e:	b590      	push	{r4, r7, lr}
 8001d20:	b0a7      	sub	sp, #156	@ 0x9c
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	81bb      	strh	r3, [r7, #12]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI3_MAX_LEN];

    /* Variable to define loop */
    uint16_t index = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fe54 	bl	80029e4 <null_ptr_check>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    if ((rslt == BMI3_OK) && (data != NULL))
 8001d42:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d145      	bne.n	8001dd6 <bmi3_get_regs+0xb8>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d042      	beq.n	8001dd6 <bmi3_get_regs+0xb8>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7a5b      	ldrb	r3, [r3, #9]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <bmi3_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI3_SPI_RD_MASK);
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d5e:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, len + dev->dummy_byte, dev->intf_ptr);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691c      	ldr	r4, [r3, #16]
 8001d64:	89bb      	ldrh	r3, [r7, #12]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	7ad2      	ldrb	r2, [r2, #11]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f107 0114 	add.w	r1, r7, #20
 8001d76:	7bf8      	ldrb	r0, [r7, #15]
 8001d78:	47a0      	blx	r4
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6852      	ldr	r2, [r2, #4]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	4798      	blx	r3

        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d119      	bne.n	8001dce <bmi3_get_regs+0xb0>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8001d9a:	e012      	b.n	8001dc2 <bmi3_get_regs+0xa4>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8001d9c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	7ad2      	ldrb	r2, [r2, #11]
 8001da4:	441a      	add	r2, r3
 8001da6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	440b      	add	r3, r1
 8001dae:	3298      	adds	r2, #152	@ 0x98
 8001db0:	443a      	add	r2, r7
 8001db2:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8001db6:	701a      	strb	r2, [r3, #0]
                index++;
 8001db8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8001dc2:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8001dc6:	89bb      	ldrh	r3, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d3e7      	bcc.n	8001d9c <bmi3_get_regs+0x7e>
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001dcc:	e006      	b.n	8001ddc <bmi3_get_regs+0xbe>
            }
        }
        else
        {
            rslt = BMI3_E_COM_FAIL;
 8001dce:	23fe      	movs	r3, #254	@ 0xfe
 8001dd0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001dd4:	e002      	b.n	8001ddc <bmi3_get_regs+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001dd6:	23ff      	movs	r3, #255	@ 0xff
 8001dd8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8001ddc:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	379c      	adds	r7, #156	@ 0x9c
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}

08001de8 <bmi3_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi3 sensor.
 */
int8_t bmi3_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4603      	mov	r3, r0
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	4613      	mov	r3, r2
 8001df8:	81bb      	strh	r3, [r7, #12]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fdf2 	bl	80029e4 <null_ptr_check>
 8001e00:	4603      	mov	r3, r0
 8001e02:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (data != NULL))
 8001e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d125      	bne.n	8001e58 <bmi3_set_regs+0x70>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d022      	beq.n	8001e58 <bmi3_set_regs+0x70>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7a5b      	ldrb	r3, [r3, #9]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <bmi3_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI3_SPI_WR_MASK);
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e20:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695c      	ldr	r4, [r3, #20]
 8001e26:	89ba      	ldrh	r2, [r7, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	7bf8      	ldrb	r0, [r7, #15]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	47a0      	blx	r4
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6852      	ldr	r2, [r2, #4]
 8001e42:	4611      	mov	r1, r2
 8001e44:	2002      	movs	r0, #2
 8001e46:	4798      	blx	r3

        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <bmi3_set_regs+0x74>
        {
            rslt = BMI3_E_COM_FAIL;
 8001e52:	23fe      	movs	r3, #254	@ 0xfe
 8001e54:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8001e56:	e001      	b.n	8001e5c <bmi3_set_regs+0x74>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e58:	23ff      	movs	r3, #255	@ 0xff
 8001e5a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}

08001e68 <bmi3_soft_reset>:
/*!
 * @brief This API resets bmi3 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi3_soft_reset(struct bmi3_dev *dev)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to read the dummy byte */
    uint8_t dummy_byte[2] = { 0 };
 8001e70:	2300      	movs	r3, #0
 8001e72:	83bb      	strh	r3, [r7, #28]

    /* Variable to store feature data array */
    uint8_t feature_data[2] = { 0x2c, 0x01 };
 8001e74:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001e78:	833b      	strh	r3, [r7, #24]

    /* Variable to enable feature engine bit */
    uint8_t feature_engine_en[2] = { BMI3_ENABLE, 0 };
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	82bb      	strh	r3, [r7, #20]

    /* Variable to store status value for feature engine enable */
    uint8_t reg_data[2] = { 0 };
 8001e7e:	2300      	movs	r3, #0
 8001e80:	823b      	strh	r3, [r7, #16]

    /* Array variable to store feature IO status */
    uint8_t feature_io_status[2] = { BMI3_ENABLE, 0 };
 8001e82:	2301      	movs	r3, #1
 8001e84:	81bb      	strh	r3, [r7, #12]

    uint8_t loop = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	77bb      	strb	r3, [r7, #30]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fdaa 	bl	80029e4 <null_ptr_check>
 8001e90:	4603      	mov	r3, r0
 8001e92:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI3_OK)
 8001e94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d16f      	bne.n	8001f7c <bmi3_soft_reset+0x114>
    {
        /* Reset bmi3 device */
        rslt = bmi3_set_command_register(BMI3_CMD_SOFT_RESET, dev);
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	f64d 60af 	movw	r0, #57007	@ 0xdeaf
 8001ea2:	f000 f873 	bl	8001f8c <bmi3_set_command_register>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	77fb      	strb	r3, [r7, #31]
        dev->delay_us(BMI3_SOFT_RESET_DELAY, dev->intf_ptr);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6852      	ldr	r2, [r2, #4]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001eb8:	4798      	blx	r3

        /* Performing a dummy read after a soft-reset */
        if ((rslt == BMI3_OK) && (dev->intf == BMI3_SPI_INTF))
 8001eba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <bmi3_soft_reset+0x74>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7a5b      	ldrb	r3, [r3, #9]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d108      	bne.n	8001edc <bmi3_soft_reset+0x74>
        {
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, dummy_byte, 2, dev);
 8001eca:	f107 011c 	add.w	r1, r7, #28
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff ff23 	bl	8001d1e <bmi3_get_regs>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	77fb      	strb	r3, [r7, #31]
        }

        /* Enabling Feature engine */
        if (rslt == BMI3_OK)
 8001edc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d108      	bne.n	8001ef6 <bmi3_soft_reset+0x8e>
        {
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO2, feature_data, 2, dev);
 8001ee4:	f107 0118 	add.w	r1, r7, #24
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	2012      	movs	r0, #18
 8001eee:	f7ff ff7b 	bl	8001de8 <bmi3_set_regs>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001ef6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <bmi3_soft_reset+0xa8>
        {
            /* Enabling feature status bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO_STATUS, feature_io_status, 2, dev);
 8001efe:	f107 010c 	add.w	r1, r7, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	2014      	movs	r0, #20
 8001f08:	f7ff ff6e 	bl	8001de8 <bmi3_set_regs>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001f10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d108      	bne.n	8001f2a <bmi3_soft_reset+0xc2>
        {
            /* Enable feature engine bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_CTRL, feature_engine_en, 2, dev);
 8001f18:	f107 0114 	add.w	r1, r7, #20
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	2040      	movs	r0, #64	@ 0x40
 8001f22:	f7ff ff61 	bl	8001de8 <bmi3_set_regs>
 8001f26:	4603      	mov	r3, r0
 8001f28:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001f2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d124      	bne.n	8001f7c <bmi3_soft_reset+0x114>
        {
            /* Checking the status bit for feature engine enable */
            while (loop <= 10)
 8001f32:	e020      	b.n	8001f76 <bmi3_soft_reset+0x10e>
            {
                dev->delay_us(100000, dev->intf_ptr);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6852      	ldr	r2, [r2, #4]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4812      	ldr	r0, [pc, #72]	@ (8001f88 <bmi3_soft_reset+0x120>)
 8001f40:	4798      	blx	r3

                rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO1, reg_data, 2, dev);
 8001f42:	f107 0110 	add.w	r1, r7, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	2011      	movs	r0, #17
 8001f4c:	f7ff fee7 	bl	8001d1e <bmi3_get_regs>
 8001f50:	4603      	mov	r3, r0
 8001f52:	77fb      	strb	r3, [r7, #31]

                if (rslt == BMI3_OK)
 8001f54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <bmi3_soft_reset+0x108>
                {
                    if (reg_data[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK)
 8001f5c:	7c3b      	ldrb	r3, [r7, #16]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <bmi3_soft_reset+0x104>
                    {
                        rslt = BMI3_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	77fb      	strb	r3, [r7, #31]

                        break;
 8001f6a:	e007      	b.n	8001f7c <bmi3_soft_reset+0x114>
                    }
                    else
                    {
                        rslt = BMI3_E_FEATURE_ENGINE_STATUS;
 8001f6c:	23f2      	movs	r3, #242	@ 0xf2
 8001f6e:	77fb      	strb	r3, [r7, #31]
                    }
                }

                loop++;
 8001f70:	7fbb      	ldrb	r3, [r7, #30]
 8001f72:	3301      	adds	r3, #1
 8001f74:	77bb      	strb	r3, [r7, #30]
            while (loop <= 10)
 8001f76:	7fbb      	ldrb	r3, [r7, #30]
 8001f78:	2b0a      	cmp	r3, #10
 8001f7a:	d9db      	bls.n	8001f34 <bmi3_soft_reset+0xcc>
            }
        }
    }

    return rslt;
 8001f7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	000186a0 	.word	0x000186a0

08001f8c <bmi3_set_command_register>:

/*!
 * @brief This API writes the available sensor specific commands to the sensor.
 */
int8_t bmi3_set_command_register(uint16_t command, struct bmi3_dev *dev)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store command value */
    uint8_t reg_data[2] = { 0 };
 8001f98:	2300      	movs	r3, #0
 8001f9a:	81bb      	strh	r3, [r7, #12]

    reg_data[0] = (uint8_t)(command & BMI3_SET_LOW_BYTE);
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	733b      	strb	r3, [r7, #12]
    reg_data[1] = (uint8_t)((command & BMI3_SET_HIGH_BYTE) >> 8);
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	737b      	strb	r3, [r7, #13]

    /* Set the command in the command register */
    rslt = bmi3_set_regs(BMI3_REG_CMD, reg_data, 2, dev);
 8001fac:	f107 010c 	add.w	r1, r7, #12
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	207e      	movs	r0, #126	@ 0x7e
 8001fb6:	f7ff ff17 	bl	8001de8 <bmi3_set_regs>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <bmi3_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi3_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fd02 	bl	80029e4 <null_ptr_check>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f040 80f1 	bne.w	80021d0 <bmi3_set_sensor_config+0x204>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80ed 	beq.w	80021d0 <bmi3_set_sensor_config+0x204>
    {
        for (loop = 0; loop < n_sens; loop++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75bb      	strb	r3, [r7, #22]
 8001ffa:	e0e3      	b.n	80021c4 <bmi3_set_sensor_config+0x1f8>
        {
            switch (sens_cfg[loop].type)
 8001ffc:	7dbb      	ldrb	r3, [r7, #22]
 8001ffe:	222e      	movs	r2, #46	@ 0x2e
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	f200 80d4 	bhi.w	80021b8 <bmi3_set_sensor_config+0x1ec>
 8002010:	a201      	add	r2, pc, #4	@ (adr r2, 8002018 <bmi3_set_sensor_config+0x4c>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	0800204d 	.word	0x0800204d
 800201c:	08002069 	.word	0x08002069
 8002020:	080020bd 	.word	0x080020bd
 8002024:	08002085 	.word	0x08002085
 8002028:	080020a1 	.word	0x080020a1
 800202c:	0800212d 	.word	0x0800212d
 8002030:	080020f5 	.word	0x080020f5
 8002034:	08002111 	.word	0x08002111
 8002038:	080020d9 	.word	0x080020d9
 800203c:	08002149 	.word	0x08002149
 8002040:	08002165 	.word	0x08002165
 8002044:	08002181 	.word	0x08002181
 8002048:	0800219d 	.word	0x0800219d
            {
                case BMI3_ACCEL:
                    rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 800204c:	7dbb      	ldrb	r3, [r7, #22]
 800204e:	222e      	movs	r2, #46	@ 0x2e
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	3302      	adds	r3, #2
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 f9cb 	bl	80023f8 <set_accel_config>
 8002062:	4603      	mov	r3, r0
 8002064:	75fb      	strb	r3, [r7, #23]
                    break;
 8002066:	e0aa      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_GYRO:
                    rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8002068:	7dbb      	ldrb	r3, [r7, #22]
 800206a:	222e      	movs	r2, #46	@ 0x2e
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	3302      	adds	r3, #2
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fb5f 	bl	800273c <set_gyro_config>
 800207e:	4603      	mov	r3, r0
 8002080:	75fb      	strb	r3, [r7, #23]
                    break;
 8002082:	e09c      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_ANY_MOTION:
                    rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8002084:	7dbb      	ldrb	r3, [r7, #22]
 8002086:	222e      	movs	r2, #46	@ 0x2e
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	3302      	adds	r3, #2
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fd57 	bl	8002b48 <set_any_motion_config>
 800209a:	4603      	mov	r3, r0
 800209c:	75fb      	strb	r3, [r7, #23]
                    break;
 800209e:	e08e      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_NO_MOTION:
                    rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 80020a0:	7dbb      	ldrb	r3, [r7, #22]
 80020a2:	222e      	movs	r2, #46	@ 0x2e
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	3302      	adds	r3, #2
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 feb3 	bl	8002e1c <set_no_motion_config>
 80020b6:	4603      	mov	r3, r0
 80020b8:	75fb      	strb	r3, [r7, #23]
                    break;
 80020ba:	e080      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_SIG_MOTION:
                    rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 80020bc:	7dbb      	ldrb	r3, [r7, #22]
 80020be:	222e      	movs	r2, #46	@ 0x2e
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	3302      	adds	r3, #2
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f001 f901 	bl	80032d4 <set_sig_motion_config>
 80020d2:	4603      	mov	r3, r0
 80020d4:	75fb      	strb	r3, [r7, #23]
                    break;
 80020d6:	e072      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_FLAT:
                    rslt = set_flat_config(&sens_cfg[loop].cfg.flat, dev);
 80020d8:	7dbb      	ldrb	r3, [r7, #22]
 80020da:	222e      	movs	r2, #46	@ 0x2e
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	3302      	adds	r3, #2
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 ffe5 	bl	80030b8 <set_flat_config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	75fb      	strb	r3, [r7, #23]
                    break;
 80020f2:	e064      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_TILT:
                    rslt = set_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 80020f4:	7dbb      	ldrb	r3, [r7, #22]
 80020f6:	222e      	movs	r2, #46	@ 0x2e
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	3302      	adds	r3, #2
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4618      	mov	r0, r3
 8002106:	f001 fa0f 	bl	8003528 <set_tilt_config>
 800210a:	4603      	mov	r3, r0
 800210c:	75fb      	strb	r3, [r7, #23]
                    break;
 800210e:	e056      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_ORIENTATION:
                    rslt = set_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8002110:	7dbb      	ldrb	r3, [r7, #22]
 8002112:	222e      	movs	r2, #46	@ 0x2e
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	3302      	adds	r3, #2
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4618      	mov	r0, r3
 8002122:	f001 faec 	bl	80036fe <set_orientation_config>
 8002126:	4603      	mov	r3, r0
 8002128:	75fb      	strb	r3, [r7, #23]
                    break;
 800212a:	e048      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_STEP_COUNTER:
                    rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 800212c:	7dbb      	ldrb	r3, [r7, #22]
 800212e:	222e      	movs	r2, #46	@ 0x2e
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	3302      	adds	r3, #2
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4618      	mov	r0, r3
 800213e:	f001 fd9f 	bl	8003c80 <set_step_config>
 8002142:	4603      	mov	r3, r0
 8002144:	75fb      	strb	r3, [r7, #23]
                    break;
 8002146:	e03a      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_TAP:
                    rslt = set_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8002148:	7dbb      	ldrb	r3, [r7, #22]
 800214a:	222e      	movs	r2, #46	@ 0x2e
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	3302      	adds	r3, #2
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 f8d1 	bl	8004300 <set_tap_config>
 800215e:	4603      	mov	r3, r0
 8002160:	75fb      	strb	r3, [r7, #23]
                    break;
 8002162:	e02c      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_ACCEL:
                    rslt = set_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 8002164:	7dbb      	ldrb	r3, [r7, #22]
 8002166:	222e      	movs	r2, #46	@ 0x2e
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	3302      	adds	r3, #2
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	f002 f9c5 	bl	8004504 <set_alternate_accel_config>
 800217a:	4603      	mov	r3, r0
 800217c:	75fb      	strb	r3, [r7, #23]
                    break;
 800217e:	e01e      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_GYRO:
                    rslt = set_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8002180:	7dbb      	ldrb	r3, [r7, #22]
 8002182:	222e      	movs	r2, #46	@ 0x2e
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	3302      	adds	r3, #2
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 fa40 	bl	8004616 <set_alternate_gyro_config>
 8002196:	4603      	mov	r3, r0
 8002198:	75fb      	strb	r3, [r7, #23]
                    break;
 800219a:	e010      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = set_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 800219c:	7dbb      	ldrb	r3, [r7, #22]
 800219e:	222e      	movs	r2, #46	@ 0x2e
 80021a0:	fb02 f303 	mul.w	r3, r2, r3
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	3302      	adds	r3, #2
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f002 fabb 	bl	8004728 <set_alternate_auto_config>
 80021b2:	4603      	mov	r3, r0
 80021b4:	75fb      	strb	r3, [r7, #23]
                    break;
 80021b6:	e002      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 80021b8:	23fa      	movs	r3, #250	@ 0xfa
 80021ba:	75fb      	strb	r3, [r7, #23]
                    break;
 80021bc:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 80021be:	7dbb      	ldrb	r3, [r7, #22]
 80021c0:	3301      	adds	r3, #1
 80021c2:	75bb      	strb	r3, [r7, #22]
 80021c4:	7dba      	ldrb	r2, [r7, #22]
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f4ff af17 	bcc.w	8001ffc <bmi3_set_sensor_config+0x30>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 80021ce:	e001      	b.n	80021d4 <bmi3_set_sensor_config+0x208>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80021d0:	23ff      	movs	r3, #255	@ 0xff
 80021d2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80021d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <bmi3_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi3_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	460b      	mov	r3, r1
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define loop */
    uint8_t loop = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fbf6 	bl	80029e4 <null_ptr_check>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 80021fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 80f1 	bne.w	80023e8 <bmi3_get_sensor_config+0x208>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80ed 	beq.w	80023e8 <bmi3_get_sensor_config+0x208>
    {
        for (loop = 0; loop < n_sens; loop++)
 800220e:	2300      	movs	r3, #0
 8002210:	75bb      	strb	r3, [r7, #22]
 8002212:	e0e3      	b.n	80023dc <bmi3_get_sensor_config+0x1fc>
        {
            switch (sens_cfg[loop].type)
 8002214:	7dbb      	ldrb	r3, [r7, #22]
 8002216:	222e      	movs	r2, #46	@ 0x2e
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	f200 80d4 	bhi.w	80023d0 <bmi3_get_sensor_config+0x1f0>
 8002228:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <bmi3_get_sensor_config+0x50>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002265 	.word	0x08002265
 8002234:	08002281 	.word	0x08002281
 8002238:	080022d5 	.word	0x080022d5
 800223c:	0800229d 	.word	0x0800229d
 8002240:	080022b9 	.word	0x080022b9
 8002244:	08002345 	.word	0x08002345
 8002248:	0800230d 	.word	0x0800230d
 800224c:	08002329 	.word	0x08002329
 8002250:	080022f1 	.word	0x080022f1
 8002254:	08002361 	.word	0x08002361
 8002258:	0800237d 	.word	0x0800237d
 800225c:	08002399 	.word	0x08002399
 8002260:	080023b5 	.word	0x080023b5
            {
                case BMI3_ACCEL:
                    rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8002264:	7dbb      	ldrb	r3, [r7, #22]
 8002266:	222e      	movs	r2, #46	@ 0x2e
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	3302      	adds	r3, #2
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f975 	bl	8002564 <get_accel_config>
 800227a:	4603      	mov	r3, r0
 800227c:	75fb      	strb	r3, [r7, #23]
                    break;
 800227e:	e0aa      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_GYRO:
                    rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8002280:	7dbb      	ldrb	r3, [r7, #22]
 8002282:	222e      	movs	r2, #46	@ 0x2e
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	3302      	adds	r3, #2
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fb5b 	bl	800294c <get_gyro_config>
 8002296:	4603      	mov	r3, r0
 8002298:	75fb      	strb	r3, [r7, #23]
                    break;
 800229a:	e09c      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ANY_MOTION:
                    rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 800229c:	7dbb      	ldrb	r3, [r7, #22]
 800229e:	222e      	movs	r2, #46	@ 0x2e
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	3302      	adds	r3, #2
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fbb9 	bl	8002a24 <get_any_motion_config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	75fb      	strb	r3, [r7, #23]
                    break;
 80022b6:	e08e      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_NO_MOTION:
                    rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 80022b8:	7dbb      	ldrb	r3, [r7, #22]
 80022ba:	222e      	movs	r2, #46	@ 0x2e
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	3302      	adds	r3, #2
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fd15 	bl	8002cf8 <get_no_motion_config>
 80022ce:	4603      	mov	r3, r0
 80022d0:	75fb      	strb	r3, [r7, #23]
                    break;
 80022d2:	e080      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_SIG_MOTION:
                    rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 80022d4:	7dbb      	ldrb	r3, [r7, #22]
 80022d6:	222e      	movs	r2, #46	@ 0x2e
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	3302      	adds	r3, #2
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 ff6b 	bl	80031c0 <get_sig_motion_config>
 80022ea:	4603      	mov	r3, r0
 80022ec:	75fb      	strb	r3, [r7, #23]
                    break;
 80022ee:	e072      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_FLAT:
                    rslt = get_flat_config(&sens_cfg[loop].cfg.flat, dev);
 80022f0:	7dbb      	ldrb	r3, [r7, #22]
 80022f2:	222e      	movs	r2, #46	@ 0x2e
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	3302      	adds	r3, #2
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fe61 	bl	8002fc8 <get_flat_config>
 8002306:	4603      	mov	r3, r0
 8002308:	75fb      	strb	r3, [r7, #23]
                    break;
 800230a:	e064      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TILT:
                    rslt = get_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 800230c:	7dbb      	ldrb	r3, [r7, #22]
 800230e:	222e      	movs	r2, #46	@ 0x2e
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	3302      	adds	r3, #2
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4618      	mov	r0, r3
 800231e:	f001 f895 	bl	800344c <get_tilt_config>
 8002322:	4603      	mov	r3, r0
 8002324:	75fb      	strb	r3, [r7, #23]
                    break;
 8002326:	e056      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ORIENTATION:
                    rslt = get_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8002328:	7dbb      	ldrb	r3, [r7, #22]
 800232a:	222e      	movs	r2, #46	@ 0x2e
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	3302      	adds	r3, #2
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f001 f956 	bl	80035ea <get_orientation_config>
 800233e:	4603      	mov	r3, r0
 8002340:	75fb      	strb	r3, [r7, #23]
                    break;
 8002342:	e048      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8002344:	7dbb      	ldrb	r3, [r7, #22]
 8002346:	222e      	movs	r2, #46	@ 0x2e
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	3302      	adds	r3, #2
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4618      	mov	r0, r3
 8002356:	f001 fa8b 	bl	8003870 <get_step_config>
 800235a:	4603      	mov	r3, r0
 800235c:	75fb      	strb	r3, [r7, #23]
                    break;
 800235e:	e03a      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TAP:
                    rslt = get_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8002360:	7dbb      	ldrb	r3, [r7, #22]
 8002362:	222e      	movs	r2, #46	@ 0x2e
 8002364:	fb02 f303 	mul.w	r3, r2, r3
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	3302      	adds	r3, #2
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	f001 ff07 	bl	8004184 <get_tap_config>
 8002376:	4603      	mov	r3, r0
 8002378:	75fb      	strb	r3, [r7, #23]
                    break;
 800237a:	e02c      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_ACCEL:
                    rslt = get_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 800237c:	7dbb      	ldrb	r3, [r7, #22]
 800237e:	222e      	movs	r2, #46	@ 0x2e
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	3302      	adds	r3, #2
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4618      	mov	r0, r3
 800238e:	f002 f906 	bl	800459e <get_alternate_accel_config>
 8002392:	4603      	mov	r3, r0
 8002394:	75fb      	strb	r3, [r7, #23]
                    break;
 8002396:	e01e      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_GYRO:
                    rslt = get_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8002398:	7dbb      	ldrb	r3, [r7, #22]
 800239a:	222e      	movs	r2, #46	@ 0x2e
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	3302      	adds	r3, #2
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 f981 	bl	80046b0 <get_alternate_gyro_config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	75fb      	strb	r3, [r7, #23]
                    break;
 80023b2:	e010      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = get_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 80023b4:	7dbb      	ldrb	r3, [r7, #22]
 80023b6:	222e      	movs	r2, #46	@ 0x2e
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	3302      	adds	r3, #2
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 f9f9 	bl	80047bc <get_alternate_auto_config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	75fb      	strb	r3, [r7, #23]
                    break;
 80023ce:	e002      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 80023d0:	23fa      	movs	r3, #250	@ 0xfa
 80023d2:	75fb      	strb	r3, [r7, #23]
                    break;
 80023d4:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 80023d6:	7dbb      	ldrb	r3, [r7, #22]
 80023d8:	3301      	adds	r3, #1
 80023da:	75bb      	strb	r3, [r7, #22]
 80023dc:	7dba      	ldrb	r2, [r7, #22]
 80023de:	7afb      	ldrb	r3, [r7, #11]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f4ff af17 	bcc.w	8002214 <bmi3_get_sensor_config+0x34>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 80023e6:	e001      	b.n	80023ec <bmi3_get_sensor_config+0x20c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80023e8:	23ff      	movs	r3, #255	@ 0xff
 80023ea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80023ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR, accel mode,
 * bandwidth, average samples and range.
 */
static int8_t set_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8002402:	2300      	movs	r3, #0
 8002404:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, acc_mode;

    if (config != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a3 	beq.w	8002554 <set_accel_config+0x15c>
    {
        /* Validate bandwidth and averaging samples */
        rslt = validate_bw_avg_acc_mode(&config->bwp, &config->acc_mode, &config->avg_num, dev);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	1c58      	adds	r0, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	1c99      	adds	r1, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	1d1a      	adds	r2, r3, #4
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f000 f8ee 	bl	80025fc <validate_bw_avg_acc_mode>
 8002420:	4603      	mov	r3, r0
 8002422:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002424:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d108      	bne.n	800243e <set_accel_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_acc_odr_range(&config->odr, &config->range, dev);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3303      	adds	r3, #3
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	f000 f91c 	bl	8002672 <validate_acc_odr_range>
 800243a:	4603      	mov	r3, r0
 800243c:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 800243e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d11f      	bne.n	8002486 <set_accel_config+0x8e>
        {
            if (config->acc_mode == BMI3_ACC_MODE_LOW_PWR)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	789b      	ldrb	r3, [r3, #2]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d109      	bne.n	8002462 <set_accel_config+0x6a>
            {
                rslt = validate_acc_odr_avg(config->odr, config->avg_num);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	791b      	ldrb	r3, [r3, #4]
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f002 f9e9 	bl	8004830 <validate_acc_odr_avg>
 800245e:	4603      	mov	r3, r0
 8002460:	75fb      	strb	r3, [r7, #23]
            }

            if ((config->acc_mode == BMI3_ACC_MODE_NORMAL) || (config->acc_mode == BMI3_ACC_MODE_HIGH_PERF))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	789b      	ldrb	r3, [r3, #2]
 8002466:	2b04      	cmp	r3, #4
 8002468:	d003      	beq.n	8002472 <set_accel_config+0x7a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	789b      	ldrb	r3, [r3, #2]
 800246e:	2b07      	cmp	r3, #7
 8002470:	d109      	bne.n	8002486 <set_accel_config+0x8e>
            {
                if ((config->odr >= BMI3_ACC_ODR_0_78HZ) && (config->odr <= BMI3_ACC_ODR_6_25HZ))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <set_accel_config+0x8e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b04      	cmp	r3, #4
 8002480:	d801      	bhi.n	8002486 <set_accel_config+0x8e>
                {
                    rslt = BMI3_E_ACC_INVALID_CFG;
 8002482:	23fc      	movs	r3, #252	@ 0xfc
 8002484:	75fb      	strb	r3, [r7, #23]
                }
            }
        }

        if (rslt == BMI3_OK)
 8002486:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d15f      	bne.n	800254e <set_accel_config+0x156>
        {
            /* Set accelerometer ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ACC_ODR, config->odr);
 800248e:	7a3b      	ldrb	r3, [r7, #8]
 8002490:	b21b      	sxth	r3, r3
 8002492:	f023 030f 	bic.w	r3, r3, #15
 8002496:	b21a      	sxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b21b      	sxth	r3, r3
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	82bb      	strh	r3, [r7, #20]

            /* Set accelerometer range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_ACC_RANGE, config->range);
 80024aa:	7a3b      	ldrb	r3, [r7, #8]
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	78db      	ldrb	r3, [r3, #3]
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	827b      	strh	r3, [r7, #18]

            /* Set accelerometer bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_ACC_BW, config->bwp);
 80024c8:	7a3b      	ldrb	r3, [r7, #8]
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	785b      	ldrb	r3, [r3, #1]
 80024d6:	01db      	lsls	r3, r3, #7
 80024d8:	b21b      	sxth	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	b21b      	sxth	r3, r3
 80024de:	4313      	orrs	r3, r2
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	823b      	strh	r3, [r7, #16]

            /* Set accelerometer average number of samples */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ACC_AVG_NUM, config->avg_num);
 80024e4:	7a7b      	ldrb	r3, [r7, #9]
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	791b      	ldrb	r3, [r3, #4]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024f4:	b21b      	sxth	r3, r3
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b21b      	sxth	r3, r3
 80024fa:	81fb      	strh	r3, [r7, #14]

            /* Set accelerometer accel mode */
            acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ACC_MODE, config->acc_mode);
 80024fc:	7a7b      	ldrb	r3, [r7, #9]
 80024fe:	b21a      	sxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	789b      	ldrb	r3, [r3, #2]
 8002504:	031b      	lsls	r3, r3, #12
 8002506:	b21b      	sxth	r3, r3
 8002508:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800250c:	b21b      	sxth	r3, r3
 800250e:	4313      	orrs	r3, r2
 8002510:	b21b      	sxth	r3, r3
 8002512:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8002514:	8abb      	ldrh	r3, [r7, #20]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	8a7b      	ldrh	r3, [r7, #18]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b2da      	uxtb	r2, r3
 8002520:	8a3b      	ldrh	r3, [r7, #16]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	b2db      	uxtb	r3, r3
 8002528:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | acc_mode) >> 8);
 800252a:	89fa      	ldrh	r2, [r7, #14]
 800252c:	89bb      	ldrh	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	b29b      	uxth	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	727b      	strb	r3, [r7, #9]

            /* Set configurations for accel */
            rslt = bmi3_set_regs(BMI3_REG_ACC_CONF, reg_data, 2, dev);
 800253a:	f107 0108 	add.w	r1, r7, #8
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2202      	movs	r2, #2
 8002542:	2020      	movs	r0, #32
 8002544:	f7ff fc50 	bl	8001de8 <bmi3_set_regs>
 8002548:	4603      	mov	r3, r0
 800254a:	75fb      	strb	r3, [r7, #23]
 800254c:	e004      	b.n	8002558 <set_accel_config+0x160>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 800254e:	23fc      	movs	r3, #252	@ 0xfc
 8002550:	75fb      	strb	r3, [r7, #23]
 8002552:	e001      	b.n	8002558 <set_accel_config+0x160>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002554:	23ff      	movs	r3, #255	@ 0xff
 8002556:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002558:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, accel mode, average samples and gravity range.
 */
static int8_t get_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 800256e:	2300      	movs	r3, #0
 8002570:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d039      	beq.n	80025ec <get_accel_config+0x88>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ACC_CONF, data_array, 2, dev);
 8002578:	f107 0108 	add.w	r1, r7, #8
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2202      	movs	r2, #2
 8002580:	2020      	movs	r0, #32
 8002582:	f7ff fbcc 	bl	8001d1e <bmi3_get_regs>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d12e      	bne.n	80025f0 <get_accel_config+0x8c>
        {
            reg_data = data_array[0];
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ACC_ODR);
 8002596:	89bb      	ldrh	r3, [r7, #12]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_ACC_RANGE);
 80025a4:	89bb      	ldrh	r3, [r7, #12]
 80025a6:	111b      	asrs	r3, r3, #4
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	70da      	strb	r2, [r3, #3]

            /* Get accelerometer bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_ACC_BW);
 80025b4:	89bb      	ldrh	r3, [r7, #12]
 80025b6:	11db      	asrs	r3, r3, #7
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 80025c4:	7a7b      	ldrb	r3, [r7, #9]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer average samples */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_ACC_AVG_NUM);
 80025ca:	89bb      	ldrh	r3, [r7, #12]
 80025cc:	121b      	asrs	r3, r3, #8
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	711a      	strb	r2, [r3, #4]

            /* Get accel mode */
            config->acc_mode = BMI3_GET_BITS(reg_data, BMI3_ACC_MODE);
 80025da:	89bb      	ldrh	r3, [r7, #12]
 80025dc:	131b      	asrs	r3, r3, #12
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	709a      	strb	r2, [r3, #2]
 80025ea:	e001      	b.n	80025f0 <get_accel_config+0x8c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80025ec:	23ff      	movs	r3, #255	@ 0xff
 80025ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80025f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <validate_bw_avg_acc_mode>:
/*!
 * @brief This internal API validates bandwidth and accel mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_avg_acc_mode(uint8_t *bandwidth, uint8_t *acc_mode, uint8_t *avg_num, struct bmi3_dev *dev)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (acc_mode != NULL) && (avg_num != NULL))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d026      	beq.n	800265e <validate_bw_avg_acc_mode+0x62>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d023      	beq.n	800265e <validate_bw_avg_acc_mode+0x62>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <validate_bw_avg_acc_mode+0x62>
    {
        /* Validate and auto-correct accel mode */
        rslt = check_boundary_val(acc_mode, BMI3_ACC_MODE_DISABLE, BMI3_ACC_MODE_HIGH_PERF, dev);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2207      	movs	r2, #7
 8002620:	2100      	movs	r1, #0
 8002622:	68b8      	ldr	r0, [r7, #8]
 8002624:	f000 f84e 	bl	80026c4 <check_boundary_val>
 8002628:	4603      	mov	r3, r0
 800262a:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800262c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d117      	bne.n	8002664 <validate_bw_avg_acc_mode+0x68>
        {
            /* Validate for averaging number of samples */
            rslt = check_boundary_val(avg_num, BMI3_ACC_AVG1, BMI3_ACC_AVG64, dev);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2206      	movs	r2, #6
 8002638:	2100      	movs	r1, #0
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f842 	bl	80026c4 <check_boundary_val>
 8002640:	4603      	mov	r3, r0
 8002642:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <validate_bw_avg_acc_mode+0x68>
            {
                /* Validate bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_ACC_BW_ODR_HALF, BMI3_ACC_BW_ODR_QUARTER, dev);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2201      	movs	r2, #1
 8002650:	2100      	movs	r1, #0
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f836 	bl	80026c4 <check_boundary_val>
 8002658:	4603      	mov	r3, r0
 800265a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 800265c:	e002      	b.n	8002664 <validate_bw_avg_acc_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800265e:	23ff      	movs	r3, #255	@ 0xff
 8002660:	75fb      	strb	r3, [r7, #23]
 8002662:	e000      	b.n	8002666 <validate_bw_avg_acc_mode+0x6a>
        if (rslt == BMI3_OK)
 8002664:	bf00      	nop
    }

    return rslt;
 8002666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <validate_acc_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_acc_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d017      	beq.n	80026b4 <validate_acc_odr_range+0x42>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d014      	beq.n	80026b4 <validate_acc_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_ACC_ODR_0_78HZ, BMI3_ACC_ODR_6400HZ, dev);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	220e      	movs	r2, #14
 800268e:	2101      	movs	r1, #1
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f817 	bl	80026c4 <check_boundary_val>
 8002696:	4603      	mov	r3, r0
 8002698:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800269a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <validate_acc_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_ACC_RANGE_2G, BMI3_ACC_RANGE_16G, dev);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2203      	movs	r2, #3
 80026a6:	2100      	movs	r1, #0
 80026a8:	68b8      	ldr	r0, [r7, #8]
 80026aa:	f000 f80b 	bl	80026c4 <check_boundary_val>
 80026ae:	4603      	mov	r3, r0
 80026b0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 80026b2:	e001      	b.n	80026b8 <validate_acc_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80026b4:	23ff      	movs	r3, #255	@ 0xff
 80026b6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80026b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi3_dev *dev)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	72fb      	strb	r3, [r7, #11]
 80026d2:	4613      	mov	r3, r2
 80026d4:	72bb      	strb	r3, [r7, #10]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f984 	bl	80029e4 <null_ptr_check>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (val != NULL))
 80026e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d121      	bne.n	800272c <check_boundary_val+0x68>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01e      	beq.n	800272c <check_boundary_val+0x68>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	7afa      	ldrb	r2, [r7, #11]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d909      	bls.n	800270c <check_boundary_val+0x48>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	7afa      	ldrb	r2, [r7, #11]
 80026fc:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MIN_VALUE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	7a1b      	ldrb	r3, [r3, #8]
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	b2da      	uxtb	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	7aba      	ldrb	r2, [r7, #10]
 8002712:	429a      	cmp	r2, r3
 8002714:	d20c      	bcs.n	8002730 <check_boundary_val+0x6c>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	7aba      	ldrb	r2, [r7, #10]
 800271a:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MAX_VALUE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7a1b      	ldrb	r3, [r3, #8]
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	b2da      	uxtb	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	721a      	strb	r2, [r3, #8]
        if (*val > max)
 800272a:	e001      	b.n	8002730 <check_boundary_val+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800272c:	23ff      	movs	r3, #255	@ 0xff
 800272e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002730:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <set_gyro_config>:
/*!
 * @brief This internal API sets gyroscope configurations like ODR,
 * bandwidth, gyro mode, average samples and dps range.
 */
static int8_t set_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8002746:	2300      	movs	r3, #0
 8002748:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, gyr_mode;

    if (config != NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8091 	beq.w	8002874 <set_gyro_config+0x138>
    {
        /* Validate bandwidth, average samples and mode */
        rslt = validate_bw_avg_gyr_mode(&config->bwp, &config->gyr_mode, &config->avg_num, dev);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	1c58      	adds	r0, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	1c99      	adds	r1, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	1d1a      	adds	r2, r3, #4
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f000 f890 	bl	8002884 <validate_bw_avg_gyr_mode>
 8002764:	4603      	mov	r3, r0
 8002766:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002768:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d108      	bne.n	8002782 <set_gyro_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_gyr_odr_range(&config->odr, &config->range, dev);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3303      	adds	r3, #3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	f000 f8be 	bl	80028fa <validate_gyr_odr_range>
 800277e:	4603      	mov	r3, r0
 8002780:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8002782:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10d      	bne.n	80027a6 <set_gyro_config+0x6a>
        {
            if (config->gyr_mode == BMI3_GYR_MODE_LOW_PWR)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	789b      	ldrb	r3, [r3, #2]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d109      	bne.n	80027a6 <set_gyro_config+0x6a>
            {
                rslt = validate_gyr_odr_avg(config->odr, config->avg_num);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	791b      	ldrb	r3, [r3, #4]
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f002 f925 	bl	80049ec <validate_gyr_odr_avg>
 80027a2:	4603      	mov	r3, r0
 80027a4:	75fb      	strb	r3, [r7, #23]
            }
        }

        if (rslt == BMI3_OK)
 80027a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d15f      	bne.n	800286e <set_gyro_config+0x132>
        {
            /* Set gyroscope ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_GYR_ODR, config->odr);
 80027ae:	7a3b      	ldrb	r3, [r7, #8]
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	f023 030f 	bic.w	r3, r3, #15
 80027b6:	b21a      	sxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	82bb      	strh	r3, [r7, #20]

            /* Set gyroscope range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_GYR_RANGE, config->range);
 80027ca:	7a3b      	ldrb	r3, [r7, #8]
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	78db      	ldrb	r3, [r3, #3]
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	b21b      	sxth	r3, r3
 80027dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027e0:	b21b      	sxth	r3, r3
 80027e2:	4313      	orrs	r3, r2
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	827b      	strh	r3, [r7, #18]

            /* Set gyroscope bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_GYR_BW, config->bwp);
 80027e8:	7a3b      	ldrb	r3, [r7, #8]
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027f0:	b21a      	sxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	785b      	ldrb	r3, [r3, #1]
 80027f6:	01db      	lsls	r3, r3, #7
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	4313      	orrs	r3, r2
 8002800:	b21b      	sxth	r3, r3
 8002802:	823b      	strh	r3, [r7, #16]

            /* Set gyroscope average sample */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_GYR_AVG_NUM, config->avg_num);
 8002804:	7a7b      	ldrb	r3, [r7, #9]
 8002806:	b21a      	sxth	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	791b      	ldrb	r3, [r3, #4]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	b21b      	sxth	r3, r3
 8002810:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002814:	b21b      	sxth	r3, r3
 8002816:	4313      	orrs	r3, r2
 8002818:	b21b      	sxth	r3, r3
 800281a:	81fb      	strh	r3, [r7, #14]

            /* Set gyroscope mode */
            gyr_mode = BMI3_SET_BITS(reg_data[1], BMI3_GYR_MODE, config->gyr_mode);
 800281c:	7a7b      	ldrb	r3, [r7, #9]
 800281e:	b21a      	sxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	789b      	ldrb	r3, [r3, #2]
 8002824:	031b      	lsls	r3, r3, #12
 8002826:	b21b      	sxth	r3, r3
 8002828:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800282c:	b21b      	sxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	b21b      	sxth	r3, r3
 8002832:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8002834:	8abb      	ldrh	r3, [r7, #20]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	8a7b      	ldrh	r3, [r7, #18]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	4313      	orrs	r3, r2
 800283e:	b2da      	uxtb	r2, r3
 8002840:	8a3b      	ldrh	r3, [r7, #16]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	b2db      	uxtb	r3, r3
 8002848:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | gyr_mode) >> 8);
 800284a:	89fa      	ldrh	r2, [r7, #14]
 800284c:	89bb      	ldrh	r3, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	b29b      	uxth	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	727b      	strb	r3, [r7, #9]

            /* Set gyro configurations */
            rslt = bmi3_set_regs(BMI3_REG_GYR_CONF, reg_data, 2, dev);
 800285a:	f107 0108 	add.w	r1, r7, #8
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2202      	movs	r2, #2
 8002862:	2021      	movs	r0, #33	@ 0x21
 8002864:	f7ff fac0 	bl	8001de8 <bmi3_set_regs>
 8002868:	4603      	mov	r3, r0
 800286a:	75fb      	strb	r3, [r7, #23]
 800286c:	e004      	b.n	8002878 <set_gyro_config+0x13c>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 800286e:	23fb      	movs	r3, #251	@ 0xfb
 8002870:	75fb      	strb	r3, [r7, #23]
 8002872:	e001      	b.n	8002878 <set_gyro_config+0x13c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002874:	23ff      	movs	r3, #255	@ 0xff
 8002876:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002878:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <validate_bw_avg_gyr_mode>:
 */
static int8_t validate_bw_avg_gyr_mode(uint8_t *bandwidth,
                                       uint8_t *gyr_mode,
                                       const uint8_t *avg_num,
                                       struct bmi3_dev *dev)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (gyr_mode != NULL) && (avg_num != NULL))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d026      	beq.n	80028e6 <validate_bw_avg_gyr_mode+0x62>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d023      	beq.n	80028e6 <validate_bw_avg_gyr_mode+0x62>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <validate_bw_avg_gyr_mode+0x62>
    {
        /* Validate and auto-correct gyro mode */
        rslt = check_boundary_val(gyr_mode, BMI3_GYR_MODE_DISABLE, BMI3_GYR_MODE_HIGH_PERF, dev);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2207      	movs	r2, #7
 80028a8:	2100      	movs	r1, #0
 80028aa:	68b8      	ldr	r0, [r7, #8]
 80028ac:	f7ff ff0a 	bl	80026c4 <check_boundary_val>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 80028b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d117      	bne.n	80028ec <validate_bw_avg_gyr_mode+0x68>
        {
            /* Validate for averaging mode */
            rslt = check_boundary_val(bandwidth, BMI3_GYR_AVG1, BMI3_GYR_AVG64, dev);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2206      	movs	r2, #6
 80028c0:	2100      	movs	r1, #0
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7ff fefe 	bl	80026c4 <check_boundary_val>
 80028c8:	4603      	mov	r3, r0
 80028ca:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 80028cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <validate_bw_avg_gyr_mode+0x68>
            {
                /* Validate for bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_GYR_BW_ODR_HALF, BMI3_GYR_BW_ODR_QUARTER, dev);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	2100      	movs	r1, #0
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff fef2 	bl	80026c4 <check_boundary_val>
 80028e0:	4603      	mov	r3, r0
 80028e2:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 80028e4:	e002      	b.n	80028ec <validate_bw_avg_gyr_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80028e6:	23ff      	movs	r3, #255	@ 0xff
 80028e8:	75fb      	strb	r3, [r7, #23]
 80028ea:	e000      	b.n	80028ee <validate_bw_avg_gyr_mode+0x6a>
        if (rslt == BMI3_OK)
 80028ec:	bf00      	nop
    }

    return rslt;
 80028ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <validate_gyr_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the gyroscope set by
 * the user.
 */
static int8_t validate_gyr_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d017      	beq.n	800293c <validate_gyr_odr_range+0x42>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d014      	beq.n	800293c <validate_gyr_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_GYR_ODR_0_78HZ, BMI3_GYR_ODR_6400HZ, dev);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	220e      	movs	r2, #14
 8002916:	2101      	movs	r1, #1
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff fed3 	bl	80026c4 <check_boundary_val>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <validate_gyr_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_GYR_RANGE_125DPS, BMI3_GYR_RANGE_2000DPS, dev);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2204      	movs	r2, #4
 800292e:	2100      	movs	r1, #0
 8002930:	68b8      	ldr	r0, [r7, #8]
 8002932:	f7ff fec7 	bl	80026c4 <check_boundary_val>
 8002936:	4603      	mov	r3, r0
 8002938:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 800293a:	e001      	b.n	8002940 <validate_gyr_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800293c:	23ff      	movs	r3, #255	@ 0xff
 800293e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002940:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, gyro mode,
 * bandwidth, averaging samples and range.
 */
static int8_t get_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8002956:	2300      	movs	r3, #0
 8002958:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d039      	beq.n	80029d4 <get_gyro_config+0x88>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_GYR_CONF, data_array, 2, dev);
 8002960:	f107 0108 	add.w	r1, r7, #8
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2202      	movs	r2, #2
 8002968:	2021      	movs	r0, #33	@ 0x21
 800296a:	f7ff f9d8 	bl	8001d1e <bmi3_get_regs>
 800296e:	4603      	mov	r3, r0
 8002970:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d12e      	bne.n	80029d8 <get_gyro_config+0x8c>
        {
            reg_data = data_array[0];
 800297a:	7a3b      	ldrb	r3, [r7, #8]
 800297c:	81bb      	strh	r3, [r7, #12]

            /* Get gyro ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_GYR_ODR);
 800297e:	89bb      	ldrh	r3, [r7, #12]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	b2da      	uxtb	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	701a      	strb	r2, [r3, #0]

            /* Get gyro range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_GYR_RANGE);
 800298c:	89bb      	ldrh	r3, [r7, #12]
 800298e:	111b      	asrs	r3, r3, #4
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	b2da      	uxtb	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	70da      	strb	r2, [r3, #3]

            /* Get gyro bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_GYR_BW);
 800299c:	89bb      	ldrh	r3, [r7, #12]
 800299e:	11db      	asrs	r3, r3, #7
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 80029ac:	7a7b      	ldrb	r3, [r7, #9]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	81bb      	strh	r3, [r7, #12]

            /* Get gyro average sample */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_GYR_AVG_NUM);
 80029b2:	89bb      	ldrh	r3, [r7, #12]
 80029b4:	121b      	asrs	r3, r3, #8
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	711a      	strb	r2, [r3, #4]

            /* Get gyro mode */
            config->gyr_mode = BMI3_GET_BITS(reg_data, BMI3_GYR_MODE);
 80029c2:	89bb      	ldrh	r3, [r7, #12]
 80029c4:	131b      	asrs	r3, r3, #12
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	709a      	strb	r2, [r3, #2]
 80029d2:	e001      	b.n	80029d8 <get_gyro_config+0x8c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80029d4:	23ff      	movs	r3, #255	@ 0xff
 80029d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80029d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <null_ptr_check+0x26>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <null_ptr_check+0x26>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <null_ptr_check+0x26>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d102      	bne.n	8002a10 <null_ptr_check+0x2c>
    {
        rslt = BMI3_E_NULL_PTR;
 8002a0a:	23ff      	movs	r3, #255	@ 0xff
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	e001      	b.n	8002a14 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI3_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_any_motion_config(struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	2300      	movs	r3, #0
 8002a34:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 8002a36:	2305      	movs	r3, #5
 8002a38:	81bb      	strh	r3, [r7, #12]

    uint8_t idx = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d078      	beq.n	8002b36 <get_any_motion_config+0x112>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002a44:	f107 010c 	add.w	r1, r7, #12
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	2041      	movs	r0, #65	@ 0x41
 8002a4e:	f7ff f9cb 	bl	8001de8 <bmi3_set_regs>
 8002a52:	4603      	mov	r3, r0
 8002a54:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002a56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d16d      	bne.n	8002b3a <get_any_motion_config+0x116>
        {
            /* Get the configuration from the feature engine register where any-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 8002a5e:	f107 0110 	add.w	r1, r7, #16
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2206      	movs	r2, #6
 8002a66:	2042      	movs	r0, #66	@ 0x42
 8002a68:	f7ff f959 	bl	8001d1e <bmi3_get_regs>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8002a70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d160      	bne.n	8002b3a <get_any_motion_config+0x116>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) any_mot_config[idx++];
 8002a78:	7fbb      	ldrb	r3, [r7, #30]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	77ba      	strb	r2, [r7, #30]
 8002a7e:	3320      	adds	r3, #32
 8002a80:	443b      	add	r3, r7
 8002a82:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a86:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002a88:	7fbb      	ldrb	r3, [r7, #30]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	77ba      	strb	r2, [r7, #30]
 8002a8e:	3320      	adds	r3, #32
 8002a90:	443b      	add	r3, r7
 8002a92:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002a9a:	8bba      	ldrh	r2, [r7, #28]
 8002a9c:	8b7b      	ldrh	r3, [r7, #26]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 8002aa2:	8b3b      	ldrh	r3, [r7, #24]
 8002aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 8002aae:	8b3b      	ldrh	r3, [r7, #24]
 8002ab0:	131b      	asrs	r3, r3, #12
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis from the word */
                lsb = (uint16_t) any_mot_config[idx++];
 8002abe:	7fbb      	ldrb	r3, [r7, #30]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	77ba      	strb	r2, [r7, #30]
 8002ac4:	3320      	adds	r3, #32
 8002ac6:	443b      	add	r3, r7
 8002ac8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002acc:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002ace:	7fbb      	ldrb	r3, [r7, #30]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	77ba      	strb	r2, [r7, #30]
 8002ad4:	3320      	adds	r3, #32
 8002ad6:	443b      	add	r3, r7
 8002ad8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002ae0:	8bba      	ldrh	r2, [r7, #28]
 8002ae2:	8b7b      	ldrh	r3, [r7, #26]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8002ae8:	8b3b      	ldrh	r3, [r7, #24]
 8002aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from the same word */
                lsb = (uint16_t) any_mot_config[idx++];
 8002af4:	7fbb      	ldrb	r3, [r7, #30]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	77ba      	strb	r2, [r7, #30]
 8002afa:	3320      	adds	r3, #32
 8002afc:	443b      	add	r3, r7
 8002afe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002b02:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002b04:	7fbb      	ldrb	r3, [r7, #30]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	77ba      	strb	r2, [r7, #30]
 8002b0a:	3320      	adds	r3, #32
 8002b0c:	443b      	add	r3, r7
 8002b0e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002b16:	8bba      	ldrh	r2, [r7, #28]
 8002b18:	8b7b      	ldrh	r3, [r7, #26]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 8002b1e:	8b3b      	ldrh	r3, [r7, #24]
 8002b20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8002b2a:	8b3b      	ldrh	r3, [r7, #24]
 8002b2c:	0b5b      	lsrs	r3, r3, #13
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	811a      	strh	r2, [r3, #8]
 8002b34:	e001      	b.n	8002b3a <get_any_motion_config+0x116>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002b36:	23ff      	movs	r3, #255	@ 0xff
 8002b38:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_any_motion_config(const struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08e      	sub	sp, #56	@ 0x38
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 8002b52:	2305      	movs	r3, #5
 8002b54:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	2300      	movs	r3, #0
 8002b64:	823b      	strh	r3, [r7, #16]
    uint16_t acc_ref_up;

    /* Wait time for clearing the event after slope is below threshold */
    uint16_t wait_time;

    if (config != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80b6 	beq.w	8002cda <set_any_motion_config+0x192>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002b6e:	f107 011c 	add.w	r1, r7, #28
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2202      	movs	r2, #2
 8002b76:	2041      	movs	r0, #65	@ 0x41
 8002b78:	f7ff f936 	bl	8001de8 <bmi3_set_regs>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8002b82:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 80aa 	bne.w	8002ce0 <set_any_motion_config+0x198>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8002b8c:	7b3b      	ldrb	r3, [r7, #12]
 8002b8e:	b21a      	sxth	r2, r3
 8002b90:	4b56      	ldr	r3, [pc, #344]	@ (8002cec <set_any_motion_config+0x1a4>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	b21a      	sxth	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	885b      	ldrh	r3, [r3, #2]
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba0:	b21b      	sxth	r3, r3
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 8002ba8:	7b7b      	ldrb	r3, [r7, #13]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8002bae:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8002bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8002cec <set_any_motion_config+0x1a4>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b21a      	sxth	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	885b      	ldrh	r3, [r3, #2]
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = ((uint16_t)data_array[1] << 8);
 8002bca:	7b7b      	ldrb	r3, [r7, #13]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            acc_ref_up = BMI3_SET_BITS(acc_ref_up, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 8002bd0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002bd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bd8:	b21a      	sxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	791b      	ldrb	r3, [r3, #4]
 8002bde:	031b      	lsls	r3, r3, #12
 8002be0:	b21b      	sxth	r3, r3
 8002be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002bee:	7bbb      	ldrb	r3, [r7, #14]
 8002bf0:	b21a      	sxth	r2, r3
 8002bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf0 <set_any_motion_config+0x1a8>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	88db      	ldrh	r3, [r3, #6]
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002c0a:	7bbb      	ldrb	r3, [r7, #14]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002c10:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8002c14:	4b36      	ldr	r3, [pc, #216]	@ (8002cf0 <set_any_motion_config+0x1a8>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	b21a      	sxth	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	88db      	ldrh	r3, [r3, #6]
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c24:	b21b      	sxth	r3, r3
 8002c26:	4313      	orrs	r3, r2
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	4b30      	ldr	r3, [pc, #192]	@ (8002cf4 <set_any_motion_config+0x1ac>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	b21a      	sxth	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 8002c48:	7c3b      	ldrb	r3, [r7, #16]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 8002c4e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8002c52:	4b28      	ldr	r3, [pc, #160]	@ (8002cf4 <set_any_motion_config+0x1ac>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	b21a      	sxth	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 8002c6a:	7c7b      	ldrb	r3, [r7, #17]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 8002c70:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	891b      	ldrh	r3, [r3, #8]
 8002c7e:	035b      	lsls	r3, r3, #13
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	4313      	orrs	r3, r2
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	83fb      	strh	r3, [r7, #30]

            any_mot_config[0] = (uint8_t)threshold1;
 8002c88:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	753b      	strb	r3, [r7, #20]
            any_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 8002c8e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002c90:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002c92:	4313      	orrs	r3, r2
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	757b      	strb	r3, [r7, #21]
            any_mot_config[2] = (uint8_t)(hysteresis1);
 8002c9e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	75bb      	strb	r3, [r7, #22]
            any_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 8002ca4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	75fb      	strb	r3, [r7, #23]
            any_mot_config[4] = (uint8_t)(duration1);
 8002cae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	763b      	strb	r3, [r7, #24]
            any_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 8002cb4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002cb6:	8bfb      	ldrh	r3, [r7, #30]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	767b      	strb	r3, [r7, #25]

            /* Set the configurations back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 8002cc4:	f107 0114 	add.w	r1, r7, #20
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2206      	movs	r2, #6
 8002ccc:	2042      	movs	r0, #66	@ 0x42
 8002cce:	f7ff f88b 	bl	8001de8 <bmi3_set_regs>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002cd8:	e002      	b.n	8002ce0 <set_any_motion_config+0x198>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002cda:	23ff      	movs	r3, #255	@ 0xff
 8002cdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8002ce0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3738      	adds	r7, #56	@ 0x38
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	fffff000 	.word	0xfffff000
 8002cf0:	fffffc00 	.word	0xfffffc00
 8002cf4:	ffffe000 	.word	0xffffe000

08002cf8 <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_no_motion_config(struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	2300      	movs	r3, #0
 8002d08:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d078      	beq.n	8002e0a <get_no_motion_config+0x112>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002d18:	f107 010c 	add.w	r1, r7, #12
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	2041      	movs	r0, #65	@ 0x41
 8002d22:	f7ff f861 	bl	8001de8 <bmi3_set_regs>
 8002d26:	4603      	mov	r3, r0
 8002d28:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002d2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d16d      	bne.n	8002e0e <get_no_motion_config+0x116>
        {
            /* Get the configuration from the feature engine register where no-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 8002d32:	f107 0110 	add.w	r1, r7, #16
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2206      	movs	r2, #6
 8002d3a:	2042      	movs	r0, #66	@ 0x42
 8002d3c:	f7fe ffef 	bl	8001d1e <bmi3_get_regs>
 8002d40:	4603      	mov	r3, r0
 8002d42:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8002d44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d160      	bne.n	8002e0e <get_no_motion_config+0x116>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 8002d4c:	7fbb      	ldrb	r3, [r7, #30]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	77ba      	strb	r2, [r7, #30]
 8002d52:	3320      	adds	r3, #32
 8002d54:	443b      	add	r3, r7
 8002d56:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d5a:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8002d5c:	7fbb      	ldrb	r3, [r7, #30]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	77ba      	strb	r2, [r7, #30]
 8002d62:	3320      	adds	r3, #32
 8002d64:	443b      	add	r3, r7
 8002d66:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8002d6e:	8bba      	ldrh	r2, [r7, #28]
 8002d70:	8b7b      	ldrh	r3, [r7, #26]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 8002d76:	8b3b      	ldrh	r3, [r7, #24]
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 8002d82:	8b3b      	ldrh	r3, [r7, #24]
 8002d84:	131b      	asrs	r3, r3, #12
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis */
                lsb = (uint16_t) no_mot_config[idx++];
 8002d92:	7fbb      	ldrb	r3, [r7, #30]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	77ba      	strb	r2, [r7, #30]
 8002d98:	3320      	adds	r3, #32
 8002d9a:	443b      	add	r3, r7
 8002d9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002da0:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8002da2:	7fbb      	ldrb	r3, [r7, #30]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	77ba      	strb	r2, [r7, #30]
 8002da8:	3320      	adds	r3, #32
 8002daa:	443b      	add	r3, r7
 8002dac:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8002db4:	8bba      	ldrh	r2, [r7, #28]
 8002db6:	8b7b      	ldrh	r3, [r7, #26]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8002dbc:	8b3b      	ldrh	r3, [r7, #24]
 8002dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 8002dc8:	7fbb      	ldrb	r3, [r7, #30]
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	77ba      	strb	r2, [r7, #30]
 8002dce:	3320      	adds	r3, #32
 8002dd0:	443b      	add	r3, r7
 8002dd2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002dd6:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8002dd8:	7fbb      	ldrb	r3, [r7, #30]
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	77ba      	strb	r2, [r7, #30]
 8002dde:	3320      	adds	r3, #32
 8002de0:	443b      	add	r3, r7
 8002de2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8002dea:	8bba      	ldrh	r2, [r7, #28]
 8002dec:	8b7b      	ldrh	r3, [r7, #26]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 8002df2:	8b3b      	ldrh	r3, [r7, #24]
 8002df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8002dfe:	8b3b      	ldrh	r3, [r7, #24]
 8002e00:	0b5b      	lsrs	r3, r3, #13
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	811a      	strh	r2, [r3, #8]
 8002e08:	e001      	b.n	8002e0e <get_no_motion_config+0x116>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002e0a:	23ff      	movs	r3, #255	@ 0xff
 8002e0c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002e0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_no_motion_config(const struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08e      	sub	sp, #56	@ 0x38
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8002e26:	2308      	movs	r3, #8
 8002e28:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	2300      	movs	r3, #0
 8002e38:	823b      	strh	r3, [r7, #16]

    uint16_t acc_ref_up;

    uint16_t wait_time;

    if (config != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80b3 	beq.w	8002fa8 <set_no_motion_config+0x18c>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002e42:	f107 011c 	add.w	r1, r7, #28
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	2041      	movs	r0, #65	@ 0x41
 8002e4c:	f7fe ffcc 	bl	8001de8 <bmi3_set_regs>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8002e56:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 80a7 	bne.w	8002fae <set_no_motion_config+0x192>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8002e60:	7b3b      	ldrb	r3, [r7, #12]
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	4b55      	ldr	r3, [pc, #340]	@ (8002fbc <set_no_motion_config+0x1a0>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	b21a      	sxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	885b      	ldrh	r3, [r3, #2]
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e74:	b21b      	sxth	r3, r3
 8002e76:	4313      	orrs	r3, r2
 8002e78:	b21b      	sxth	r3, r3
 8002e7a:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 8002e7c:	7b7b      	ldrb	r3, [r7, #13]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8002e82:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8002e86:	4b4d      	ldr	r3, [pc, #308]	@ (8002fbc <set_no_motion_config+0x1a0>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	b21a      	sxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	885b      	ldrh	r3, [r3, #2]
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = BMI3_SET_BITS(threshold, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 8002e9e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002ea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ea6:	b21a      	sxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	791b      	ldrb	r3, [r3, #4]
 8002eac:	031b      	lsls	r3, r3, #12
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb4:	b21b      	sxth	r3, r3
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002ebc:	7bbb      	ldrb	r3, [r7, #14]
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc0 <set_no_motion_config+0x1a4>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b21a      	sxth	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	88db      	ldrh	r3, [r3, #6]
 8002eca:	b21b      	sxth	r3, r3
 8002ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed0:	b21b      	sxth	r3, r3
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002ed8:	7bbb      	ldrb	r3, [r7, #14]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002ede:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8002ee2:	4b37      	ldr	r3, [pc, #220]	@ (8002fc0 <set_no_motion_config+0x1a4>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	88db      	ldrh	r3, [r3, #6]
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <set_no_motion_config+0x1a8>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	b21a      	sxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	4313      	orrs	r3, r2
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 8002f16:	7c3b      	ldrb	r3, [r7, #16]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 8002f1c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8002f20:	4b28      	ldr	r3, [pc, #160]	@ (8002fc4 <set_no_motion_config+0x1a8>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	b21a      	sxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b21b      	sxth	r3, r3
 8002f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f30:	b21b      	sxth	r3, r3
 8002f32:	4313      	orrs	r3, r2
 8002f34:	b21b      	sxth	r3, r3
 8002f36:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 8002f38:	7c7b      	ldrb	r3, [r7, #17]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 8002f3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002f42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f46:	b21a      	sxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	891b      	ldrh	r3, [r3, #8]
 8002f4c:	035b      	lsls	r3, r3, #13
 8002f4e:	b21b      	sxth	r3, r3
 8002f50:	4313      	orrs	r3, r2
 8002f52:	b21b      	sxth	r3, r3
 8002f54:	83fb      	strh	r3, [r7, #30]

            no_mot_config[0] = (uint8_t)threshold1;
 8002f56:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	753b      	strb	r3, [r7, #20]
            no_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 8002f5c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002f5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	757b      	strb	r3, [r7, #21]
            no_mot_config[2] = (uint8_t)(hysteresis1);
 8002f6c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	75bb      	strb	r3, [r7, #22]
            no_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 8002f72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	75fb      	strb	r3, [r7, #23]
            no_mot_config[4] = (uint8_t)(duration1);
 8002f7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	763b      	strb	r3, [r7, #24]
            no_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 8002f82:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002f84:	8bfb      	ldrh	r3, [r7, #30]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 8002f92:	f107 0114 	add.w	r1, r7, #20
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2206      	movs	r2, #6
 8002f9a:	2042      	movs	r0, #66	@ 0x42
 8002f9c:	f7fe ff24 	bl	8001de8 <bmi3_set_regs>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002fa6:	e002      	b.n	8002fae <set_no_motion_config+0x192>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002fa8:	23ff      	movs	r3, #255	@ 0xff
 8002faa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8002fae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3738      	adds	r7, #56	@ 0x38
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	fffff000 	.word	0xfffff000
 8002fc0:	fffffc00 	.word	0xfffffc00
 8002fc4:	ffffe000 	.word	0xffffe000

08002fc8 <get_flat_config>:
/*!
 * @brief This internal API gets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t get_flat_config(struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 8002fd6:	230b      	movs	r3, #11
 8002fd8:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d061      	beq.n	80030a8 <get_flat_config+0xe0>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002fe4:	f107 0108 	add.w	r1, r7, #8
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2202      	movs	r2, #2
 8002fec:	2041      	movs	r0, #65	@ 0x41
 8002fee:	f7fe fefb 	bl	8001de8 <bmi3_set_regs>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d156      	bne.n	80030ac <get_flat_config+0xe4>
        {
            /* Get the configuration from the feature engine register where flat feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8002ffe:	f107 010c 	add.w	r1, r7, #12
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2204      	movs	r2, #4
 8003006:	2042      	movs	r0, #66	@ 0x42
 8003008:	f7fe fe89 	bl	8001d1e <bmi3_get_regs>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8003010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d149      	bne.n	80030ac <get_flat_config+0xe4>
            {
                /* Get word to calculate theta, blocking and hold time from the same word */
                lsb = (uint16_t) flat_config[idx++];
 8003018:	7dbb      	ldrb	r3, [r7, #22]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	75ba      	strb	r2, [r7, #22]
 800301e:	3318      	adds	r3, #24
 8003020:	443b      	add	r3, r7
 8003022:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003026:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 8003028:	7dbb      	ldrb	r3, [r7, #22]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	75ba      	strb	r2, [r7, #22]
 800302e:	3318      	adds	r3, #24
 8003030:	443b      	add	r3, r7
 8003032:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	827b      	strh	r3, [r7, #18]
                lsb_msb = (lsb | msb);
 800303a:	8aba      	ldrh	r2, [r7, #20]
 800303c:	8a7b      	ldrh	r3, [r7, #18]
 800303e:	4313      	orrs	r3, r2
 8003040:	823b      	strh	r3, [r7, #16]

                /* Get theta */
                config->theta = lsb_msb & BMI3_FLAT_THETA_MASK;
 8003042:	8a3b      	ldrh	r3, [r7, #16]
 8003044:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	801a      	strh	r2, [r3, #0]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_FLAT_BLOCKING_MASK) >> BMI3_FLAT_BLOCKING_POS;
 800304e:	8a3b      	ldrh	r3, [r7, #16]
 8003050:	119b      	asrs	r3, r3, #6
 8003052:	b29b      	uxth	r3, r3
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	b29a      	uxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	805a      	strh	r2, [r3, #2]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_FLAT_HOLD_TIME_MASK) >> BMI3_FLAT_HOLD_TIME_POS;
 800305e:	8a3b      	ldrh	r3, [r7, #16]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) flat_config[idx++];
 8003068:	7dbb      	ldrb	r3, [r7, #22]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	75ba      	strb	r2, [r7, #22]
 800306e:	3318      	adds	r3, #24
 8003070:	443b      	add	r3, r7
 8003072:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003076:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 8003078:	7dbb      	ldrb	r3, [r7, #22]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	75ba      	strb	r2, [r7, #22]
 800307e:	3318      	adds	r3, #24
 8003080:	443b      	add	r3, r7
 8003082:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 800308a:	8aba      	ldrh	r2, [r7, #20]
 800308c:	8a7b      	ldrh	r3, [r7, #18]
 800308e:	4313      	orrs	r3, r2
 8003090:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_FLAT_SLOPE_THRES_MASK;
 8003092:	8a3b      	ldrh	r3, [r7, #16]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	811a      	strh	r2, [r3, #8]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_FLAT_HYST_MASK) >> BMI3_FLAT_HYST_POS;
 800309c:	8a3b      	ldrh	r3, [r7, #16]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	809a      	strh	r2, [r3, #4]
 80030a6:	e001      	b.n	80030ac <get_flat_config+0xe4>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80030a8:	23ff      	movs	r3, #255	@ 0xff
 80030aa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80030ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <set_flat_config>:
/*!
 * @brief This internal API sets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t set_flat_config(const struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 80030c6:	230b      	movs	r3, #11
 80030c8:	81bb      	strh	r3, [r7, #12]

    uint16_t theta, blocking, holdtime, slope_thres, hyst;

    if (config != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d06f      	beq.n	80031b0 <set_flat_config+0xf8>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80030d0:	f107 010c 	add.w	r1, r7, #12
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2202      	movs	r2, #2
 80030d8:	2041      	movs	r0, #65	@ 0x41
 80030da:	f7fe fe85 	bl	8001de8 <bmi3_set_regs>
 80030de:	4603      	mov	r3, r0
 80030e0:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80030e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d164      	bne.n	80031b4 <set_flat_config+0xfc>
        {
            /* Set theta */
            theta = BMI3_SET_BIT_POS0(flat_config[0], BMI3_FLAT_THETA, config->theta);
 80030ea:	7c3b      	ldrb	r3, [r7, #16]
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030f2:	b21a      	sxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	b21b      	sxth	r3, r3
 80030fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030fe:	b21b      	sxth	r3, r3
 8003100:	4313      	orrs	r3, r2
 8003102:	b21b      	sxth	r3, r3
 8003104:	83bb      	strh	r3, [r7, #28]

            /* Set blocking */
            blocking = BMI3_SET_BITS(flat_config[0], BMI3_FLAT_BLOCKING, config->blocking);
 8003106:	7c3b      	ldrb	r3, [r7, #16]
 8003108:	b21b      	sxth	r3, r3
 800310a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800310e:	b21a      	sxth	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	885b      	ldrh	r3, [r3, #2]
 8003114:	019b      	lsls	r3, r3, #6
 8003116:	b21b      	sxth	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	b21b      	sxth	r3, r3
 800311c:	4313      	orrs	r3, r2
 800311e:	b21b      	sxth	r3, r3
 8003120:	837b      	strh	r3, [r7, #26]

            /* Set hold time */
            holdtime = ((uint16_t)flat_config[1] << 8);
 8003122:	7c7b      	ldrb	r3, [r7, #17]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	833b      	strh	r3, [r7, #24]
            holdtime = BMI3_SET_BITS(holdtime, BMI3_FLAT_HOLD_TIME, config->hold_time);
 8003128:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	b21a      	sxth	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	88db      	ldrh	r3, [r3, #6]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	b21b      	sxth	r3, r3
 8003138:	4313      	orrs	r3, r2
 800313a:	b21b      	sxth	r3, r3
 800313c:	833b      	strh	r3, [r7, #24]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(flat_config[2], BMI3_FLAT_SLOPE_THRES, config->slope_thres);
 800313e:	7cbb      	ldrb	r3, [r7, #18]
 8003140:	b21b      	sxth	r3, r3
 8003142:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003146:	b21a      	sxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	891b      	ldrh	r3, [r3, #8]
 800314c:	b21b      	sxth	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	b21b      	sxth	r3, r3
 8003152:	4313      	orrs	r3, r2
 8003154:	b21b      	sxth	r3, r3
 8003156:	82fb      	strh	r3, [r7, #22]

            /* Set hysteresis */
            hyst = ((uint16_t)flat_config[3] << 8);
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	82bb      	strh	r3, [r7, #20]
            hyst = BMI3_SET_BITS(hyst, BMI3_FLAT_HYST, config->hysteresis);
 800315e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	b21a      	sxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	889b      	ldrh	r3, [r3, #4]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	b21b      	sxth	r3, r3
 800316e:	4313      	orrs	r3, r2
 8003170:	b21b      	sxth	r3, r3
 8003172:	82bb      	strh	r3, [r7, #20]

            flat_config[0] = (uint8_t)(theta | blocking);
 8003174:	8bbb      	ldrh	r3, [r7, #28]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	8b7b      	ldrh	r3, [r7, #26]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	4313      	orrs	r3, r2
 800317e:	b2db      	uxtb	r3, r3
 8003180:	743b      	strb	r3, [r7, #16]
            flat_config[1] = (uint8_t)(holdtime >> 8);
 8003182:	8b3b      	ldrh	r3, [r7, #24]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	b29b      	uxth	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	747b      	strb	r3, [r7, #17]
            flat_config[2] = (uint8_t)(slope_thres);
 800318c:	8afb      	ldrh	r3, [r7, #22]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	74bb      	strb	r3, [r7, #18]
            flat_config[3] = (uint8_t)(hyst >> 8);
 8003192:	8abb      	ldrh	r3, [r7, #20]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	b29b      	uxth	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 800319c:	f107 0110 	add.w	r1, r7, #16
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2204      	movs	r2, #4
 80031a4:	2042      	movs	r0, #66	@ 0x42
 80031a6:	f7fe fe1f 	bl	8001de8 <bmi3_set_regs>
 80031aa:	4603      	mov	r3, r0
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e001      	b.n	80031b4 <set_flat_config+0xfc>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80031b0:	23ff      	movs	r3, #255	@ 0xff
 80031b2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80031b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t get_sig_motion_config(struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]

    /* Variable to define a word */
    uint16_t lsb_msb;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 80031ca:	230d      	movs	r3, #13
 80031cc:	81bb      	strh	r3, [r7, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	77bb      	strb	r3, [r7, #30]

    if (config != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d074      	beq.n	80032c2 <get_sig_motion_config+0x102>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80031d8:	f107 010c 	add.w	r1, r7, #12
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2202      	movs	r2, #2
 80031e0:	2041      	movs	r0, #65	@ 0x41
 80031e2:	f7fe fe01 	bl	8001de8 <bmi3_set_regs>
 80031e6:	4603      	mov	r3, r0
 80031e8:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80031ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d169      	bne.n	80032c6 <get_sig_motion_config+0x106>
        {
            /* Get the configuration from the feature engine register where sig motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 80031f2:	f107 0110 	add.w	r1, r7, #16
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2206      	movs	r2, #6
 80031fa:	2042      	movs	r0, #66	@ 0x42
 80031fc:	f7fe fd8f 	bl	8001d1e <bmi3_get_regs>
 8003200:	4603      	mov	r3, r0
 8003202:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8003204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d15c      	bne.n	80032c6 <get_sig_motion_config+0x106>
            {
                /* Get word to calculate block size */
                lsb = (uint16_t) sig_mot_config[idx++];
 800320c:	7fbb      	ldrb	r3, [r7, #30]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	77ba      	strb	r2, [r7, #30]
 8003212:	3320      	adds	r3, #32
 8003214:	443b      	add	r3, r7
 8003216:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800321a:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 800321c:	7fbb      	ldrb	r3, [r7, #30]
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	77ba      	strb	r2, [r7, #30]
 8003222:	3320      	adds	r3, #32
 8003224:	443b      	add	r3, r7
 8003226:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 800322e:	8bba      	ldrh	r2, [r7, #28]
 8003230:	8b7b      	ldrh	r3, [r7, #26]
 8003232:	4313      	orrs	r3, r2
 8003234:	833b      	strh	r3, [r7, #24]

                /* Get block size */
                config->block_size = lsb_msb & BMI3_SIG_BLOCK_SIZE_MASK;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8b3a      	ldrh	r2, [r7, #24]
 800323a:	801a      	strh	r2, [r3, #0]

                /* Get word to calculate peak 2 peak minimum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 800323c:	7fbb      	ldrb	r3, [r7, #30]
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	77ba      	strb	r2, [r7, #30]
 8003242:	3320      	adds	r3, #32
 8003244:	443b      	add	r3, r7
 8003246:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800324a:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 800324c:	7fbb      	ldrb	r3, [r7, #30]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	77ba      	strb	r2, [r7, #30]
 8003252:	3320      	adds	r3, #32
 8003254:	443b      	add	r3, r7
 8003256:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 800325e:	8bba      	ldrh	r2, [r7, #28]
 8003260:	8b7b      	ldrh	r3, [r7, #26]
 8003262:	4313      	orrs	r3, r2
 8003264:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak minimum */
                config->peak_2_peak_min = (lsb_msb & BMI3_SIG_P2P_MIN_MASK);
 8003266:	8b3b      	ldrh	r3, [r7, #24]
 8003268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	805a      	strh	r2, [r3, #2]

                /* Get mcr minimum */
                config->mcr_min = (lsb_msb & BMI3_SIG_MCR_MIN_MASK) >> BMI3_SIG_MCR_MIN_POS;
 8003272:	8b3b      	ldrh	r3, [r7, #24]
 8003274:	0a9b      	lsrs	r3, r3, #10
 8003276:	b29b      	uxth	r3, r3
 8003278:	b2da      	uxtb	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate peak 2 peak maximum and mcr maximum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 800327e:	7fbb      	ldrb	r3, [r7, #30]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	77ba      	strb	r2, [r7, #30]
 8003284:	3320      	adds	r3, #32
 8003286:	443b      	add	r3, r7
 8003288:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800328c:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 800328e:	7fbb      	ldrb	r3, [r7, #30]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	77ba      	strb	r2, [r7, #30]
 8003294:	3320      	adds	r3, #32
 8003296:	443b      	add	r3, r7
 8003298:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80032a0:	8bba      	ldrh	r2, [r7, #28]
 80032a2:	8b7b      	ldrh	r3, [r7, #26]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak maximum */
                config->peak_2_peak_max = (lsb_msb & BMI3_SIG_P2P_MAX_MASK);
 80032a8:	8b3b      	ldrh	r3, [r7, #24]
 80032aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	80da      	strh	r2, [r3, #6]

                /* Get mcr maximum */
                config->mcr_max = (lsb_msb & BMI3_MCR_MAX_MASK) >> BMI3_MCR_MAX_POS;
 80032b4:	8b3b      	ldrh	r3, [r7, #24]
 80032b6:	0a9b      	lsrs	r3, r3, #10
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	721a      	strb	r2, [r3, #8]
 80032c0:	e001      	b.n	80032c6 <get_sig_motion_config+0x106>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80032c2:	23ff      	movs	r3, #255	@ 0xff
 80032c4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80032c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3720      	adds	r7, #32
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t set_sig_motion_config(const struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08e      	sub	sp, #56	@ 0x38
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 80032de:	230d      	movs	r3, #13
 80032e0:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t sig_mot_config[6] = { 0 };
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	2300      	movs	r3, #0
 80032e8:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	2300      	movs	r3, #0
 80032f0:	823b      	strh	r3, [r7, #16]

    uint16_t mcr_min;

    uint16_t mcr_max;

    if (config != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 809d 	beq.w	8003434 <set_sig_motion_config+0x160>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80032fa:	f107 011c 	add.w	r1, r7, #28
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2202      	movs	r2, #2
 8003302:	2041      	movs	r0, #65	@ 0x41
 8003304:	f7fe fd70 	bl	8001de8 <bmi3_set_regs>
 8003308:	4603      	mov	r3, r0
 800330a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 800330e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 8091 	bne.w	800343a <set_sig_motion_config+0x166>
        {
            /* Set block size for lsb 8 bits */
            block_size1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_SIG_BLOCK_SIZE, config->block_size);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	86bb      	strh	r3, [r7, #52]	@ 0x34

            block_size = ((uint16_t)data_array[1] << 8);
 800331e:	7b7b      	ldrb	r3, [r7, #13]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set block size for msb 8 bits */
            block_size2 = BMI3_SET_BIT_POS0(block_size, BMI3_SIG_BLOCK_SIZE, config->block_size);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set peak to peak minimum for lsb 8 bits */
            p2p_min1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 800332a:	7bbb      	ldrb	r3, [r7, #14]
 800332c:	b21a      	sxth	r2, r3
 800332e:	4b46      	ldr	r3, [pc, #280]	@ (8003448 <set_sig_motion_config+0x174>)
 8003330:	4013      	ands	r3, r2
 8003332:	b21a      	sxth	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	885b      	ldrh	r3, [r3, #2]
 8003338:	b21b      	sxth	r3, r3
 800333a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333e:	b21b      	sxth	r3, r3
 8003340:	4313      	orrs	r3, r2
 8003342:	b21b      	sxth	r3, r3
 8003344:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            p2p_min = ((uint16_t)data_array[3] << 8);
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set peak to peak minimum for msb 8 bits */
            p2p_min2 = BMI3_SET_BIT_POS0(p2p_min, BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 800334c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8003350:	4b3d      	ldr	r3, [pc, #244]	@ (8003448 <set_sig_motion_config+0x174>)
 8003352:	4013      	ands	r3, r2
 8003354:	b21a      	sxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	885b      	ldrh	r3, [r3, #2]
 800335a:	b21b      	sxth	r3, r3
 800335c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003360:	b21b      	sxth	r3, r3
 8003362:	4313      	orrs	r3, r2
 8003364:	b21b      	sxth	r3, r3
 8003366:	857b      	strh	r3, [r7, #42]	@ 0x2a

            mcr_min = ((uint16_t)data_array[3] << 8);
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mcr minimum */
            mcr_min = BMI3_SET_BITS(mcr_min, BMI3_SIG_MCR_MIN, config->mcr_min);
 800336e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003376:	b21a      	sxth	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	791b      	ldrb	r3, [r3, #4]
 800337c:	029b      	lsls	r3, r3, #10
 800337e:	b21b      	sxth	r3, r3
 8003380:	4313      	orrs	r3, r2
 8003382:	b21b      	sxth	r3, r3
 8003384:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set peak to peak maximum for lsb 8 bits */
            p2p_max1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8003386:	7c3b      	ldrb	r3, [r7, #16]
 8003388:	b21a      	sxth	r2, r3
 800338a:	4b2f      	ldr	r3, [pc, #188]	@ (8003448 <set_sig_motion_config+0x174>)
 800338c:	4013      	ands	r3, r2
 800338e:	b21a      	sxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	88db      	ldrh	r3, [r3, #6]
 8003394:	b21b      	sxth	r3, r3
 8003396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339a:	b21b      	sxth	r3, r3
 800339c:	4313      	orrs	r3, r2
 800339e:	b21b      	sxth	r3, r3
 80033a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

            p2p_max = ((uint16_t)data_array[5] << 8);
 80033a2:	7c7b      	ldrb	r3, [r7, #17]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set peak to peak maximum for msb 8 bits */
            p2p_max2 = BMI3_SET_BIT_POS0(p2p_max, BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 80033a8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80033ac:	4b26      	ldr	r3, [pc, #152]	@ (8003448 <set_sig_motion_config+0x174>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	88db      	ldrh	r3, [r3, #6]
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033bc:	b21b      	sxth	r3, r3
 80033be:	4313      	orrs	r3, r2
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	847b      	strh	r3, [r7, #34]	@ 0x22

            mcr_max = ((uint16_t)data_array[5] << 8);
 80033c4:	7c7b      	ldrb	r3, [r7, #17]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	843b      	strh	r3, [r7, #32]

            /* Set mcr maximum */
            mcr_max = BMI3_SET_BITS(mcr_max, BMI3_MCR_MAX, config->mcr_max);
 80033ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80033ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d2:	b21a      	sxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	7a1b      	ldrb	r3, [r3, #8]
 80033d8:	029b      	lsls	r3, r3, #10
 80033da:	b21b      	sxth	r3, r3
 80033dc:	4313      	orrs	r3, r2
 80033de:	b21b      	sxth	r3, r3
 80033e0:	843b      	strh	r3, [r7, #32]

            sig_mot_config[0] = (uint8_t)(block_size1);
 80033e2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	753b      	strb	r3, [r7, #20]
            sig_mot_config[1] = (uint8_t)(block_size2 >> 8);
 80033e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	757b      	strb	r3, [r7, #21]
            sig_mot_config[2] = (uint8_t)(p2p_min1);
 80033f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	75bb      	strb	r3, [r7, #22]
            sig_mot_config[3] = (uint8_t)((p2p_min2 | mcr_min) >> 8);
 80033f8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80033fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80033fc:	4313      	orrs	r3, r2
 80033fe:	b29b      	uxth	r3, r3
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	b29b      	uxth	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	75fb      	strb	r3, [r7, #23]
            sig_mot_config[4] = (uint8_t)(p2p_max1);
 8003408:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800340a:	b2db      	uxtb	r3, r3
 800340c:	763b      	strb	r3, [r7, #24]
            sig_mot_config[5] = (uint8_t)((p2p_max2 | mcr_max) >> 8);
 800340e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003410:	8c3b      	ldrh	r3, [r7, #32]
 8003412:	4313      	orrs	r3, r2
 8003414:	b29b      	uxth	r3, r3
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	b29b      	uxth	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 800341e:	f107 0114 	add.w	r1, r7, #20
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2206      	movs	r2, #6
 8003426:	2042      	movs	r0, #66	@ 0x42
 8003428:	f7fe fcde 	bl	8001de8 <bmi3_set_regs>
 800342c:	4603      	mov	r3, r0
 800342e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003432:	e002      	b.n	800343a <set_sig_motion_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003434:	23ff      	movs	r3, #255	@ 0xff
 8003436:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 800343a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800343e:	4618      	mov	r0, r3
 8003440:	3738      	adds	r7, #56	@ 0x38
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	fffffc00 	.word	0xfffffc00

0800344c <get_tilt_config>:
/*!
 * @brief This internal API gets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t get_tilt_config(struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 800345a:	2321      	movs	r3, #33	@ 0x21
 800345c:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d057      	beq.n	8003518 <get_tilt_config+0xcc>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003468:	f107 0108 	add.w	r1, r7, #8
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2202      	movs	r2, #2
 8003470:	2041      	movs	r0, #65	@ 0x41
 8003472:	f7fe fcb9 	bl	8001de8 <bmi3_set_regs>
 8003476:	4603      	mov	r3, r0
 8003478:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800347a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d14c      	bne.n	800351c <get_tilt_config+0xd0>
        {
            /* Get the configuration from the feature engine register where tilt feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8003482:	f107 010c 	add.w	r1, r7, #12
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2204      	movs	r2, #4
 800348a:	2042      	movs	r0, #66	@ 0x42
 800348c:	f7fe fc47 	bl	8001d1e <bmi3_get_regs>
 8003490:	4603      	mov	r3, r0
 8003492:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8003494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d13f      	bne.n	800351c <get_tilt_config+0xd0>
            {
                /* Get word to calculate segment size and minimum tilt angle from the same word */
                lsb = ((uint16_t)tilt_config[idx++]);
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	75ba      	strb	r2, [r7, #22]
 80034a2:	3318      	adds	r3, #24
 80034a4:	443b      	add	r3, r7
 80034a6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034aa:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 80034ac:	7dbb      	ldrb	r3, [r7, #22]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	75ba      	strb	r2, [r7, #22]
 80034b2:	3318      	adds	r3, #24
 80034b4:	443b      	add	r3, r7
 80034b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034ba:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80034bc:	8a7b      	ldrh	r3, [r7, #18]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	b21a      	sxth	r2, r3
 80034c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	823b      	strh	r3, [r7, #16]

                /* Get segment size */
                config->segment_size = lsb_msb & BMI3_TILT_SEGMENT_SIZE_MASK;
 80034cc:	8a3b      	ldrh	r3, [r7, #16]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	801a      	strh	r2, [r3, #0]

                /* Get minimum tilt angle */
                config->min_tilt_angle = (lsb_msb & BMI3_TILT_MIN_TILT_ANGLE_MASK) >> BMI3_TILT_MIN_TILT_ANGLE_POS;
 80034d6:	8a3b      	ldrh	r3, [r7, #16]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	b29a      	uxth	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate beta accel mean */
                lsb = ((uint16_t)tilt_config[idx++]);
 80034e0:	7dbb      	ldrb	r3, [r7, #22]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	75ba      	strb	r2, [r7, #22]
 80034e6:	3318      	adds	r3, #24
 80034e8:	443b      	add	r3, r7
 80034ea:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034ee:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 80034f0:	7dbb      	ldrb	r3, [r7, #22]
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	75ba      	strb	r2, [r7, #22]
 80034f6:	3318      	adds	r3, #24
 80034f8:	443b      	add	r3, r7
 80034fa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034fe:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003500:	8a7b      	ldrh	r3, [r7, #18]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	b21a      	sxth	r2, r3
 8003506:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	b21b      	sxth	r3, r3
 800350e:	823b      	strh	r3, [r7, #16]

                /* Get beta accel mean */
                config->beta_acc_mean = lsb_msb & BMI3_TILT_BETA_ACC_MEAN_MASK;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8a3a      	ldrh	r2, [r7, #16]
 8003514:	809a      	strh	r2, [r3, #4]
 8003516:	e001      	b.n	800351c <get_tilt_config+0xd0>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003518:	23ff      	movs	r3, #255	@ 0xff
 800351a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800351c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <set_tilt_config>:
/*!
 * @brief This internal API sets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t set_tilt_config(const struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8003532:	2321      	movs	r3, #33	@ 0x21
 8003534:	823b      	strh	r3, [r7, #16]

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]

    uint8_t data_array[4] = { 0 };
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]

    uint16_t min_tilt_angle, beta_acc_mean;

    uint16_t segment_size;

    if (config != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d04a      	beq.n	80035da <set_tilt_config+0xb2>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003544:	f107 0110 	add.w	r1, r7, #16
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2202      	movs	r2, #2
 800354c:	2041      	movs	r0, #65	@ 0x41
 800354e:	f7fe fc4b 	bl	8001de8 <bmi3_set_regs>
 8003552:	4603      	mov	r3, r0
 8003554:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8003556:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d13f      	bne.n	80035de <set_tilt_config+0xb6>
        {
            /* Set segment size */
            segment_size = BMI3_SET_BIT_POS0(data_array[0], BMI3_TILT_SEGMENT_SIZE, config->segment_size);
 800355e:	7a3b      	ldrb	r3, [r7, #8]
 8003560:	b21b      	sxth	r3, r3
 8003562:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003566:	b21a      	sxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b21b      	sxth	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	b21b      	sxth	r3, r3
 8003572:	4313      	orrs	r3, r2
 8003574:	b21b      	sxth	r3, r3
 8003576:	83bb      	strh	r3, [r7, #28]

            min_tilt_angle1 = ((uint16_t)data_array[1] << 8);
 8003578:	7a7b      	ldrb	r3, [r7, #9]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	837b      	strh	r3, [r7, #26]

            /* Set minimum tilt angle */
            min_tilt_angle = BMI3_SET_BITS(min_tilt_angle1, BMI3_TILT_MIN_TILT_ANGLE, config->min_tilt_angle);
 800357e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	b21a      	sxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	885b      	ldrh	r3, [r3, #2]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	b21b      	sxth	r3, r3
 800358e:	4313      	orrs	r3, r2
 8003590:	b21b      	sxth	r3, r3
 8003592:	833b      	strh	r3, [r7, #24]

            /* Set beta accel mean for lsb 8 bits */
            beta_acc_mean1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	889b      	ldrh	r3, [r3, #4]
 8003598:	82fb      	strh	r3, [r7, #22]

            beta_acc_mean = ((uint16_t)data_array[3] << 8);
 800359a:	7afb      	ldrb	r3, [r7, #11]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	82bb      	strh	r3, [r7, #20]

            /* Set beta accel mean for msb 8 bits */
            beta_acc_mean2 = BMI3_SET_BIT_POS0(beta_acc_mean, BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	889b      	ldrh	r3, [r3, #4]
 80035a4:	827b      	strh	r3, [r7, #18]

            tilt_config[0] = (uint8_t)segment_size;
 80035a6:	8bbb      	ldrh	r3, [r7, #28]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	733b      	strb	r3, [r7, #12]
            tilt_config[1] = (uint8_t)(min_tilt_angle >> 8);
 80035ac:	8b3b      	ldrh	r3, [r7, #24]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	737b      	strb	r3, [r7, #13]
            tilt_config[2] = (uint8_t)(beta_acc_mean1);
 80035b6:	8afb      	ldrh	r3, [r7, #22]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	73bb      	strb	r3, [r7, #14]
            tilt_config[3] = (uint8_t)(beta_acc_mean2 >> 8);
 80035bc:	8a7b      	ldrh	r3, [r7, #18]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	73fb      	strb	r3, [r7, #15]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 80035c6:	f107 010c 	add.w	r1, r7, #12
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2204      	movs	r2, #4
 80035ce:	2042      	movs	r0, #66	@ 0x42
 80035d0:	f7fe fc0a 	bl	8001de8 <bmi3_set_regs>
 80035d4:	4603      	mov	r3, r0
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e001      	b.n	80035de <set_tilt_config+0xb6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80035da:	23ff      	movs	r3, #255	@ 0xff
 80035dc:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80035de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <get_orientation_config>:
/*!
 * @brief This internal API gets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t get_orientation_config(struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of orient feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 80035f8:	231c      	movs	r3, #28
 80035fa:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d073      	beq.n	80036ee <get_orientation_config+0x104>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003606:	f107 0108 	add.w	r1, r7, #8
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2202      	movs	r2, #2
 800360e:	2041      	movs	r0, #65	@ 0x41
 8003610:	f7fe fbea 	bl	8001de8 <bmi3_set_regs>
 8003614:	4603      	mov	r3, r0
 8003616:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d168      	bne.n	80036f2 <get_orientation_config+0x108>
        {
            /* Get the configuration from the feature engine register where orientation feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8003620:	f107 010c 	add.w	r1, r7, #12
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2204      	movs	r2, #4
 8003628:	2042      	movs	r0, #66	@ 0x42
 800362a:	f7fe fb78 	bl	8001d1e <bmi3_get_regs>
 800362e:	4603      	mov	r3, r0
 8003630:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8003632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d15b      	bne.n	80036f2 <get_orientation_config+0x108>
            {
                /* Get word to calculate upside down enable, mode, blocking, theta and hold time
                 * from the same word */
                lsb = (uint16_t) orient_config[idx++];
 800363a:	7dbb      	ldrb	r3, [r7, #22]
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	75ba      	strb	r2, [r7, #22]
 8003640:	3318      	adds	r3, #24
 8003642:	443b      	add	r3, r7
 8003644:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003648:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 800364a:	7dbb      	ldrb	r3, [r7, #22]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	75ba      	strb	r2, [r7, #22]
 8003650:	3318      	adds	r3, #24
 8003652:	443b      	add	r3, r7
 8003654:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 800365c:	8aba      	ldrh	r2, [r7, #20]
 800365e:	8a7b      	ldrh	r3, [r7, #18]
 8003660:	4313      	orrs	r3, r2
 8003662:	823b      	strh	r3, [r7, #16]

                /* Get upside enable */
                config->ud_en = lsb_msb & BMI3_ORIENT_UD_EN_MASK;
 8003664:	8a3b      	ldrh	r3, [r7, #16]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	701a      	strb	r2, [r3, #0]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_ORIENT_MODE_MASK) >> BMI3_ORIENT_MODE_POS;
 8003672:	8a3b      	ldrh	r3, [r7, #16]
 8003674:	105b      	asrs	r3, r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	b2da      	uxtb	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	705a      	strb	r2, [r3, #1]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_ORIENT_BLOCKING_MASK) >> BMI3_ORIENT_BLOCKING_POS;
 8003682:	8a3b      	ldrh	r3, [r7, #16]
 8003684:	10db      	asrs	r3, r3, #3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	b2da      	uxtb	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	709a      	strb	r2, [r3, #2]

                /* Get theta */
                config->theta = (lsb_msb & BMI3_ORIENT_THETA_MASK) >> BMI3_ORIENT_THETA_POS;
 8003692:	8a3b      	ldrh	r3, [r7, #16]
 8003694:	115b      	asrs	r3, r3, #5
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800369c:	b2da      	uxtb	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	70da      	strb	r2, [r3, #3]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_ORIENT_HOLD_TIME_MASK) >> BMI3_ORIENT_HOLD_TIME_POS;
 80036a2:	8a3b      	ldrh	r3, [r7, #16]
 80036a4:	0adb      	lsrs	r3, r3, #11
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) orient_config[idx++];
 80036ae:	7dbb      	ldrb	r3, [r7, #22]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	75ba      	strb	r2, [r7, #22]
 80036b4:	3318      	adds	r3, #24
 80036b6:	443b      	add	r3, r7
 80036b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80036bc:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 80036be:	7dbb      	ldrb	r3, [r7, #22]
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	75ba      	strb	r2, [r7, #22]
 80036c4:	3318      	adds	r3, #24
 80036c6:	443b      	add	r3, r7
 80036c8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 80036d0:	8aba      	ldrh	r2, [r7, #20]
 80036d2:	8a7b      	ldrh	r3, [r7, #18]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_ORIENT_SLOPE_THRES_MASK;
 80036d8:	8a3b      	ldrh	r3, [r7, #16]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	719a      	strb	r2, [r3, #6]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ORIENT_HYST_MASK) >> BMI3_ORIENT_HYST_POS;
 80036e0:	8a3b      	ldrh	r3, [r7, #16]
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	715a      	strb	r2, [r3, #5]
 80036ec:	e001      	b.n	80036f2 <get_orientation_config+0x108>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80036ee:	23ff      	movs	r3, #255	@ 0xff
 80036f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80036f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <set_orientation_config>:
/*!
 * @brief This internal API sets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t set_orientation_config(const struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b08a      	sub	sp, #40	@ 0x28
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of orient feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 800370c:	231c      	movs	r3, #28
 800370e:	81bb      	strh	r3, [r7, #12]

    uint16_t ud_en, mode, blocking, theta, theta1, holdtime, slope_thres, hyst;

    if (config != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80a3 	beq.w	800385e <set_orientation_config+0x160>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8003718:	f107 010c 	add.w	r1, r7, #12
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2202      	movs	r2, #2
 8003720:	2041      	movs	r0, #65	@ 0x41
 8003722:	f7fe fb61 	bl	8001de8 <bmi3_set_regs>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI3_OK)
 800372c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 8097 	bne.w	8003864 <set_orientation_config+0x166>
        {
            /* Set upside down bit */
            ud_en = BMI3_SET_BIT_POS0(orient_config[0], BMI3_ORIENT_UD_EN, config->ud_en);
 8003736:	7c3b      	ldrb	r3, [r7, #16]
 8003738:	b21b      	sxth	r3, r3
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	b21a      	sxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b21b      	sxth	r3, r3
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	b21b      	sxth	r3, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	b21b      	sxth	r3, r3
 8003750:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set mode */
            mode = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_MODE, config->mode);
 8003752:	7c3b      	ldrb	r3, [r7, #16]
 8003754:	b21b      	sxth	r3, r3
 8003756:	f023 0306 	bic.w	r3, r3, #6
 800375a:	b21a      	sxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	b21b      	sxth	r3, r3
 8003764:	f003 0306 	and.w	r3, r3, #6
 8003768:	b21b      	sxth	r3, r3
 800376a:	4313      	orrs	r3, r2
 800376c:	b21b      	sxth	r3, r3
 800376e:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set blocking */
            blocking = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_BLOCKING, config->blocking);
 8003770:	7c3b      	ldrb	r3, [r7, #16]
 8003772:	b21b      	sxth	r3, r3
 8003774:	f023 0318 	bic.w	r3, r3, #24
 8003778:	b21a      	sxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	789b      	ldrb	r3, [r3, #2]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	b21b      	sxth	r3, r3
 8003782:	f003 0318 	and.w	r3, r3, #24
 8003786:	b21b      	sxth	r3, r3
 8003788:	4313      	orrs	r3, r2
 800378a:	b21b      	sxth	r3, r3
 800378c:	843b      	strh	r3, [r7, #32]

            /* Set theta for lsb 8 bits */
            theta1 = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_THETA, config->theta);
 800378e:	7c3b      	ldrb	r3, [r7, #16]
 8003790:	b21b      	sxth	r3, r3
 8003792:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8003796:	b21a      	sxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	78db      	ldrb	r3, [r3, #3]
 800379c:	015b      	lsls	r3, r3, #5
 800379e:	b21b      	sxth	r3, r3
 80037a0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80037a4:	b21b      	sxth	r3, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b21b      	sxth	r3, r3
 80037aa:	83fb      	strh	r3, [r7, #30]

            theta = ((uint16_t)orient_config[1] << 8);
 80037ac:	7c7b      	ldrb	r3, [r7, #17]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	83bb      	strh	r3, [r7, #28]

            /* Set theta for msb 8 bits */
            theta = BMI3_SET_BITS(theta, BMI3_ORIENT_THETA, config->theta);
 80037b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80037b6:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80037ba:	b21a      	sxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	78db      	ldrb	r3, [r3, #3]
 80037c0:	015b      	lsls	r3, r3, #5
 80037c2:	b21b      	sxth	r3, r3
 80037c4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80037c8:	b21b      	sxth	r3, r3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b21b      	sxth	r3, r3
 80037ce:	83bb      	strh	r3, [r7, #28]

            /* Set hold time */
            holdtime = BMI3_SET_BITS(orient_config[1], BMI3_ORIENT_HOLD_TIME, config->hold_time);
 80037d0:	7c7b      	ldrb	r3, [r7, #17]
 80037d2:	b21a      	sxth	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	791b      	ldrb	r3, [r3, #4]
 80037d8:	02db      	lsls	r3, r3, #11
 80037da:	b21b      	sxth	r3, r3
 80037dc:	4313      	orrs	r3, r2
 80037de:	b21b      	sxth	r3, r3
 80037e0:	837b      	strh	r3, [r7, #26]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(orient_config[2], BMI3_ORIENT_SLOPE_THRES, config->slope_thres);
 80037e2:	7cbb      	ldrb	r3, [r7, #18]
 80037e4:	b21b      	sxth	r3, r3
 80037e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037ea:	b21a      	sxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	799b      	ldrb	r3, [r3, #6]
 80037f0:	b21b      	sxth	r3, r3
 80037f2:	4313      	orrs	r3, r2
 80037f4:	b21b      	sxth	r3, r3
 80037f6:	833b      	strh	r3, [r7, #24]

            /* Set hysteresis */
            hyst = BMI3_SET_BITS(orient_config[3], BMI3_ORIENT_HYST, config->hysteresis);
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	b21a      	sxth	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	795b      	ldrb	r3, [r3, #5]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	b21b      	sxth	r3, r3
 8003804:	4313      	orrs	r3, r2
 8003806:	b21b      	sxth	r3, r3
 8003808:	82fb      	strh	r3, [r7, #22]

            orient_config[0] = (uint8_t)(ud_en | mode | blocking | theta1);
 800380a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800380c:	b2da      	uxtb	r2, r3
 800380e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003810:	b2db      	uxtb	r3, r3
 8003812:	4313      	orrs	r3, r2
 8003814:	b2da      	uxtb	r2, r3
 8003816:	8c3b      	ldrh	r3, [r7, #32]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	4313      	orrs	r3, r2
 800381c:	b2da      	uxtb	r2, r3
 800381e:	8bfb      	ldrh	r3, [r7, #30]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	4313      	orrs	r3, r2
 8003824:	b2db      	uxtb	r3, r3
 8003826:	743b      	strb	r3, [r7, #16]
            orient_config[1] = (uint8_t)((theta | holdtime) >> 8);
 8003828:	8bba      	ldrh	r2, [r7, #28]
 800382a:	8b7b      	ldrh	r3, [r7, #26]
 800382c:	4313      	orrs	r3, r2
 800382e:	b29b      	uxth	r3, r3
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	b29b      	uxth	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	747b      	strb	r3, [r7, #17]
            orient_config[2] = (uint8_t)(slope_thres);
 8003838:	8b3b      	ldrh	r3, [r7, #24]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	74bb      	strb	r3, [r7, #18]
            orient_config[3] = (uint8_t)(hyst >> 8);
 800383e:	8afb      	ldrh	r3, [r7, #22]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	b29b      	uxth	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8003848:	f107 0110 	add.w	r1, r7, #16
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2204      	movs	r2, #4
 8003850:	2042      	movs	r0, #66	@ 0x42
 8003852:	f7fe fac9 	bl	8001de8 <bmi3_set_regs>
 8003856:	4603      	mov	r3, r0
 8003858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800385c:	e002      	b.n	8003864 <set_orientation_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800385e:	23ff      	movs	r3, #255	@ 0xff
 8003860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003864:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003868:	4618      	mov	r0, r3
 800386a:	3728      	adds	r7, #40	@ 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <get_step_config>:
/*!
 * @brief This internal API gets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t get_step_config(struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	@ 0x30
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	f107 0314 	add.w	r3, r7, #20
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	60da      	str	r2, [r3, #12]
 800388c:	611a      	str	r2, [r3, #16]

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 800388e:	2310      	movs	r3, #16
 8003890:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 81e7 	beq.w	8003c6e <get_step_config+0x3fe>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80038a0:	f107 010c 	add.w	r1, r7, #12
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2202      	movs	r2, #2
 80038a8:	2041      	movs	r0, #65	@ 0x41
 80038aa:	f7fe fa9d 	bl	8001de8 <bmi3_set_regs>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 80038b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f040 81db 	bne.w	8003c74 <get_step_config+0x404>
        {
            /* Get the configuration from the feature engine register where step counter feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 80038be:	f107 0110 	add.w	r1, r7, #16
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2218      	movs	r2, #24
 80038c6:	2042      	movs	r0, #66	@ 0x42
 80038c8:	f7fe fa29 	bl	8001d1e <bmi3_get_regs>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (rslt == BMI3_OK)
 80038d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 81cc 	bne.w	8003c74 <get_step_config+0x404>
            {
                /* Get word to calculate water-mark level, reset counter from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80038dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80038e6:	3330      	adds	r3, #48	@ 0x30
 80038e8:	443b      	add	r3, r7
 80038ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80038ee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80038f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80038fa:	3330      	adds	r3, #48	@ 0x30
 80038fc:	443b      	add	r3, r7
 80038fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003902:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003904:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	b21a      	sxth	r2, r3
 800390a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800390e:	4313      	orrs	r3, r2
 8003910:	b21b      	sxth	r3, r3
 8003912:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get water-mark level */
                config->watermark_level = lsb_msb & BMI3_STEP_WATERMARK_MASK;
 8003914:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	801a      	strh	r2, [r3, #0]

                /* Get reset counter */
                config->reset_counter = (lsb_msb & BMI3_STEP_RESET_COUNTER_MASK) >> BMI3_STEP_RESET_COUNTER_POS;
 8003920:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003922:	129b      	asrs	r3, r3, #10
 8003924:	b29b      	uxth	r3, r3
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate minimum distance up */
                lsb = ((uint16_t)step_config[idx++]);
 8003930:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800393a:	3330      	adds	r3, #48	@ 0x30
 800393c:	443b      	add	r3, r7
 800393e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003942:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003944:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800394e:	3330      	adds	r3, #48	@ 0x30
 8003950:	443b      	add	r3, r7
 8003952:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003956:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003958:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	b21a      	sxth	r2, r3
 800395e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003962:	4313      	orrs	r3, r2
 8003964:	b21b      	sxth	r3, r3
 8003966:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get minimum distance up */
                config->env_min_dist_up = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_UP_MASK);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800396c:	809a      	strh	r2, [r3, #4]

                /* Get word to calculate env coefficient up */
                lsb = ((uint16_t)step_config[idx++]);
 800396e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003978:	3330      	adds	r3, #48	@ 0x30
 800397a:	443b      	add	r3, r7
 800397c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003980:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003982:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800398c:	3330      	adds	r3, #48	@ 0x30
 800398e:	443b      	add	r3, r7
 8003990:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003994:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003996:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	b21a      	sxth	r2, r3
 800399c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80039a0:	4313      	orrs	r3, r2
 80039a2:	b21b      	sxth	r3, r3
 80039a4:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env coefficient up */
                config->env_coef_up = (lsb_msb & BMI3_STEP_ENV_COEF_UP_MASK);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80039aa:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate env minimum distance down */
                lsb = ((uint16_t)step_config[idx++]);
 80039ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80039b6:	3330      	adds	r3, #48	@ 0x30
 80039b8:	443b      	add	r3, r7
 80039ba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80039be:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80039c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80039ca:	3330      	adds	r3, #48	@ 0x30
 80039cc:	443b      	add	r3, r7
 80039ce:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80039d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80039d4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	b21a      	sxth	r2, r3
 80039da:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80039de:	4313      	orrs	r3, r2
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env minimum distance down */
                config->env_min_dist_down = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_DOWN_MASK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80039e8:	811a      	strh	r2, [r3, #8]

                /* Get word to calculate env coefficient down */
                lsb = ((uint16_t)step_config[idx++]);
 80039ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80039f4:	3330      	adds	r3, #48	@ 0x30
 80039f6:	443b      	add	r3, r7
 80039f8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80039fc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80039fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003a08:	3330      	adds	r3, #48	@ 0x30
 8003a0a:	443b      	add	r3, r7
 8003a0c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a10:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003a12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	b21a      	sxth	r2, r3
 8003a18:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	b21b      	sxth	r3, r3
 8003a20:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env coefficient down */
                config->env_coef_down = (lsb_msb & BMI3_STEP_ENV_COEF_DOWN_MASK);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003a26:	815a      	strh	r2, [r3, #10]

                /* Get word to calculate mean val decay */
                lsb = ((uint16_t)step_config[idx++]);
 8003a28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003a32:	3330      	adds	r3, #48	@ 0x30
 8003a34:	443b      	add	r3, r7
 8003a36:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a3a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003a46:	3330      	adds	r3, #48	@ 0x30
 8003a48:	443b      	add	r3, r7
 8003a4a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a4e:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003a50:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	b21a      	sxth	r2, r3
 8003a56:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	b21b      	sxth	r3, r3
 8003a5e:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get mean val decay */
                config->mean_val_decay = (lsb_msb & BMI3_STEP_MEAN_VAL_DECAY_MASK);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003a64:	819a      	strh	r2, [r3, #12]

                /* Get word to calculate mean step duration */
                lsb = ((uint16_t)step_config[idx++]);
 8003a66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003a70:	3330      	adds	r3, #48	@ 0x30
 8003a72:	443b      	add	r3, r7
 8003a74:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a78:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003a7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003a84:	3330      	adds	r3, #48	@ 0x30
 8003a86:	443b      	add	r3, r7
 8003a88:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a8c:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003a8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	b21a      	sxth	r2, r3
 8003a94:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b21b      	sxth	r3, r3
 8003a9c:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get mean step duration */
                config->mean_step_dur = (lsb_msb & BMI3_STEP_MEAN_STEP_DUR_MASK);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003aa2:	81da      	strh	r2, [r3, #14]

                /* Get word to calculate step buffer size, filter cascade enabled and step counter increment
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003aa4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003aae:	3330      	adds	r3, #48	@ 0x30
 8003ab0:	443b      	add	r3, r7
 8003ab2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003ab6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003ab8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003ac2:	3330      	adds	r3, #48	@ 0x30
 8003ac4:	443b      	add	r3, r7
 8003ac6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003aca:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003acc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	b21a      	sxth	r2, r3
 8003ad2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	b21b      	sxth	r3, r3
 8003ada:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step buffer size */
                config->step_buffer_size = lsb_msb & BMI3_STEP_BUFFER_SIZE_MASK;
 8003adc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	821a      	strh	r2, [r3, #16]

                /* Get filter cascade enable */
                config->filter_cascade_enabled = (lsb_msb & BMI3_STEP_FILTER_CASCADE_ENABLED_MASK) >>
 8003ae8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003aea:	111b      	asrs	r3, r3, #4
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	825a      	strh	r2, [r3, #18]
                                                 BMI3_STEP_FILTER_CASCADE_ENABLED_POS;

                /* Get step counter increment */
                config->step_counter_increment = (lsb_msb & BMI3_STEP_COUNTER_INCREMENT_MASK) >>
 8003af8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	829a      	strh	r2, [r3, #20]
                                                 BMI3_STEP_COUNTER_INCREMENT_POS;

                /* Get word to calculate peak duration minimum walking and peak duration minimum running */
                lsb = ((uint16_t)step_config[idx++]);
 8003b02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003b0c:	3330      	adds	r3, #48	@ 0x30
 8003b0e:	443b      	add	r3, r7
 8003b10:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003b14:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003b16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003b20:	3330      	adds	r3, #48	@ 0x30
 8003b22:	443b      	add	r3, r7
 8003b24:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003b28:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003b2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	b21a      	sxth	r2, r3
 8003b30:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003b34:	4313      	orrs	r3, r2
 8003b36:	b21b      	sxth	r3, r3
 8003b38:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get peak duration minimum walking */
                config->peak_duration_min_walking = lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_WALKING_MASK;
 8003b3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	82da      	strh	r2, [r3, #22]

                /* Get peak duration minimum running */
                config->peak_duration_min_running = (lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_RUNNING_MASK) >>
 8003b44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	831a      	strh	r2, [r3, #24]
                                                    BMI3_STEP_PEAK_DURATION_MIN_RUNNING_POS;

                /* Get word to calculate activity detection factor and activity detection threshold
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003b4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003b58:	3330      	adds	r3, #48	@ 0x30
 8003b5a:	443b      	add	r3, r7
 8003b5c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003b60:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003b62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003b6c:	3330      	adds	r3, #48	@ 0x30
 8003b6e:	443b      	add	r3, r7
 8003b70:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003b74:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003b76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	b21a      	sxth	r2, r3
 8003b7c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003b80:	4313      	orrs	r3, r2
 8003b82:	b21b      	sxth	r3, r3
 8003b84:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get activity detection factor */
                config->activity_detection_factor = lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_FACTOR_MASK;
 8003b86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	835a      	strh	r2, [r3, #26]

                /* Get activity detection threshold */
                config->activity_detection_thres = (lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_MASK) >>
 8003b92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	839a      	strh	r2, [r3, #28]
                                                   BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_POS;

                /* Get word to calculate step duration max and step duration window from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003b9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003ba6:	3330      	adds	r3, #48	@ 0x30
 8003ba8:	443b      	add	r3, r7
 8003baa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003bae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003bba:	3330      	adds	r3, #48	@ 0x30
 8003bbc:	443b      	add	r3, r7
 8003bbe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003bc2:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003bc4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	b21a      	sxth	r2, r3
 8003bca:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	b21b      	sxth	r3, r3
 8003bd2:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step duration max */
                config->step_duration_max = lsb_msb & BMI3_STEP_DURATION_MAX_MASK;
 8003bd4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	83da      	strh	r2, [r3, #30]

                /* Get step duration window */
                config->step_duration_window = (lsb_msb & BMI3_STEP_DURATION_WINDOW_MASK) >>
 8003bde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	841a      	strh	r2, [r3, #32]
                                               BMI3_STEP_DURATION_WINDOW_POS;

                /* Get word to calculate step duration pp enabled, duration threshold,
                 * mean crossing pp enabled, mcr threshold, sc_12_res from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003be8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003bf2:	3330      	adds	r3, #48	@ 0x30
 8003bf4:	443b      	add	r3, r7
 8003bf6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003bfa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003bfc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003c06:	3330      	adds	r3, #48	@ 0x30
 8003c08:	443b      	add	r3, r7
 8003c0a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003c0e:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003c10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	b21a      	sxth	r2, r3
 8003c16:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	b21b      	sxth	r3, r3
 8003c1e:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step duration pp enable */
                config->step_duration_pp_enabled = lsb_msb & BMI3_STEP_DURATION_PP_ENABLED_MASK;
 8003c20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	845a      	strh	r2, [r3, #34]	@ 0x22

                /* Get step duration threshold */
                config->step_duration_thres = (lsb_msb & BMI3_STEP_DURATION_THRESHOLD_MASK) >>
 8003c2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003c2e:	105b      	asrs	r3, r3, #1
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	849a      	strh	r2, [r3, #36]	@ 0x24
                                              BMI3_STEP_DURATION_THRESHOLD_POS;

                /* Get mean crossing pp enabled */
                config->mean_crossing_pp_enabled = (lsb_msb & BMI3_STEP_MEAN_CROSSING_PP_ENABLED_MASK) >>
 8003c3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003c3e:	111b      	asrs	r3, r3, #4
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	84da      	strh	r2, [r3, #38]	@ 0x26
                                                   BMI3_STEP_MEAN_CROSSING_PP_ENABLED_POS;

                /* Get mcr threshold */
                config->mcr_threshold = (lsb_msb & BMI3_STEP_MCR_THRESHOLD_MASK) >> BMI3_STEP_MCR_THRESHOLD_POS;
 8003c4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003c4e:	115b      	asrs	r3, r3, #5
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	851a      	strh	r2, [r3, #40]	@ 0x28

                /* Get sc_12_res selection */
                config->sc_12_res = (lsb_msb & BMI3_STEP_SC_12_RES_MASK) >> BMI3_STEP_SC_12_RES_POS;
 8003c5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003c5e:	129b      	asrs	r3, r3, #10
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c6c:	e002      	b.n	8003c74 <get_step_config+0x404>
            }
        }
    }
    else
    {
        rslt = BMI3_E_INVALID_SENSOR;
 8003c6e:	23fa      	movs	r3, #250	@ 0xfa
 8003c70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8003c74:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3730      	adds	r7, #48	@ 0x30
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <set_step_config>:
/*!
 * @brief This internal API sets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t set_step_config(const struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0a4      	sub	sp, #144	@ 0x90
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 8003c8a:	2310      	movs	r3, #16
 8003c8c:	873b      	strh	r3, [r7, #56]	@ 0x38

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	609a      	str	r2, [r3, #8]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	611a      	str	r2, [r3, #16]

    uint8_t data_array[24] = { 0 };
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	f107 030c 	add.w	r3, r7, #12
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	605a      	str	r2, [r3, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	60da      	str	r2, [r3, #12]
 8003cb4:	611a      	str	r2, [r3, #16]
    uint16_t reset_counter, activity_detection_factor, step_duration_max, step_duration_window,
             step_duration_pp_enabled;

    uint16_t step_duration_threshold, mean_crossing_pp_enabled, mcr_threshold1, mcr_threshold2, sc_12_res;

    if (config != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8259 	beq.w	8004170 <set_step_config+0x4f0>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003cbe:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	2041      	movs	r0, #65	@ 0x41
 8003cc8:	f7fe f88e 	bl	8001de8 <bmi3_set_regs>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

        if (rslt == BMI3_OK)
 8003cd2:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f040 824d 	bne.w	8004176 <set_step_config+0x4f6>
        {
            /* Set water-mark for lsb 8 bits */
            watermark1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_STEP_WATERMARK, config->watermark_level);
 8003cdc:	7a3b      	ldrb	r3, [r7, #8]
 8003cde:	b21a      	sxth	r2, r3
 8003ce0:	4bac      	ldr	r3, [pc, #688]	@ (8003f94 <set_step_config+0x314>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	b21a      	sxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b21b      	sxth	r3, r3
 8003cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	b21b      	sxth	r3, r3
 8003cf6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

            watermark = ((uint16_t)data_array[1] << 8);
 8003cfa:	7a7b      	ldrb	r3, [r7, #9]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

            /* Set water-mark for msb 8 bits */
            watermark2 = BMI3_SET_BIT_POS0(watermark, BMI3_STEP_WATERMARK, config->watermark_level);
 8003d02:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 8003d06:	4ba3      	ldr	r3, [pc, #652]	@ (8003f94 <set_step_config+0x314>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	b21a      	sxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b21b      	sxth	r3, r3
 8003d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d16:	b21b      	sxth	r3, r3
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

            reset_counter = ((uint16_t)data_array[1] << 8);
 8003d20:	7a7b      	ldrb	r3, [r7, #9]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set reset counter */
            reset_counter = BMI3_SET_BITS(reset_counter, BMI3_STEP_RESET_COUNTER, config->reset_counter);
 8003d28:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8003d2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	885b      	ldrh	r3, [r3, #2]
 8003d36:	029b      	lsls	r3, r3, #10
 8003d38:	b21b      	sxth	r3, r3
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3e:	b21b      	sxth	r3, r3
 8003d40:	4313      	orrs	r3, r2
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set env_min_dist_up for lsb 8 bits */
            env_min_dist_up1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	889b      	ldrh	r3, [r3, #4]
 8003d4c:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

            env_min_dist_up = ((uint16_t)data_array[3] << 8);
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

            /* Set env_min_dist_up for msb 8 bits */
            env_min_dist_up2 = BMI3_SET_BIT_POS0(env_min_dist_up, BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	889b      	ldrh	r3, [r3, #4]
 8003d5c:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

            /* Set env_coef_up for lsb 8 bits */
            env_coef_up1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	88db      	ldrh	r3, [r3, #6]
 8003d64:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

            env_coef_up = ((uint16_t)data_array[5] << 8);
 8003d68:	7b7b      	ldrb	r3, [r7, #13]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

            /* Set env_coef_up for msb 8 bits */
            env_coef_up2 = BMI3_SET_BIT_POS0(env_coef_up, BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	88db      	ldrh	r3, [r3, #6]
 8003d74:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

            /* Set env_min_dist_down for lsb 8 bits */
            env_min_dist_down1 =
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	891b      	ldrh	r3, [r3, #8]
 8003d7c:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
                BMI3_SET_BIT_POS0(data_array[6], BMI3_STEP_ENV_MIN_DIST_DOWN, config->env_min_dist_down);

            env_min_dist_down = ((uint16_t)data_array[7] << 8);
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Set env_min_dist_down for msb 8 bits */
            env_min_dist_down2 = BMI3_SET_BIT_POS0(env_min_dist_down,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	891b      	ldrh	r3, [r3, #8]
 8003d8c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
                                                   BMI3_STEP_ENV_MIN_DIST_DOWN,
                                                   config->env_min_dist_down);

            /* Set env_coef_down for lsb 8 bits */
            env_coef_down1 = BMI3_SET_BIT_POS0(data_array[8], BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	895b      	ldrh	r3, [r3, #10]
 8003d94:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

            env_coef_down = ((uint16_t)data_array[9] << 8);
 8003d98:	7c7b      	ldrb	r3, [r7, #17]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

            /* Set env_coef_down for msb 8 bits */
            env_coef_down2 = BMI3_SET_BIT_POS0(env_coef_down, BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	895b      	ldrh	r3, [r3, #10]
 8003da4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

            /* Set mean_val_decay for lsb 8 bits */
            mean_val_decay1 = BMI3_SET_BIT_POS0(data_array[10], BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	899b      	ldrh	r3, [r3, #12]
 8003dac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

            mean_val_decay = ((uint16_t)data_array[11] << 8);
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

            /* Set mean_val_decay for msb 8 bits */
            mean_val_decay2 = BMI3_SET_BIT_POS0(mean_val_decay, BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	899b      	ldrh	r3, [r3, #12]
 8003dbc:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

            /* Set mean_step_dur for lsb 8 bits */
            mean_step_dur1 = BMI3_SET_BIT_POS0(data_array[12], BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	89db      	ldrh	r3, [r3, #14]
 8003dc4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

            mean_step_dur = ((uint16_t)data_array[13] << 8);
 8003dc8:	7d7b      	ldrb	r3, [r7, #21]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

            /* Set mean_step_dur for msb 8 bits */
            mean_step_dur2 = BMI3_SET_BIT_POS0(mean_step_dur, BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	89db      	ldrh	r3, [r3, #14]
 8003dd4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

            /* Set step buffer size */
            step_buffer_size = BMI3_SET_BIT_POS0(data_array[14], BMI3_STEP_BUFFER_SIZE, config->step_buffer_size);
 8003dd8:	7dbb      	ldrb	r3, [r7, #22]
 8003dda:	b21b      	sxth	r3, r3
 8003ddc:	f023 030f 	bic.w	r3, r3, #15
 8003de0:	b21a      	sxth	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8a1b      	ldrh	r3, [r3, #16]
 8003de6:	b21b      	sxth	r3, r3
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	b21b      	sxth	r3, r3
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b21b      	sxth	r3, r3
 8003df2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

            /* Set filter cascade */
            filter_cascade_enabled = BMI3_SET_BITS(data_array[14],
 8003df6:	7dbb      	ldrb	r3, [r7, #22]
 8003df8:	b21b      	sxth	r3, r3
 8003dfa:	f023 0310 	bic.w	r3, r3, #16
 8003dfe:	b21a      	sxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8a5b      	ldrh	r3, [r3, #18]
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	b21b      	sxth	r3, r3
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	b21b      	sxth	r3, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b21b      	sxth	r3, r3
 8003e12:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                                   BMI3_STEP_FILTER_CASCADE_ENABLED,
                                                   config->filter_cascade_enabled);

            /* Set step_counter_increment for lsb 8 bits */
            step_counter_increment1 = BMI3_SET_BITS(data_array[14],
 8003e16:	7dbb      	ldrb	r3, [r7, #22]
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	b21a      	sxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8a9b      	ldrh	r3, [r3, #20]
 8003e24:	015b      	lsls	r3, r3, #5
 8003e26:	b21b      	sxth	r3, r3
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b21b      	sxth	r3, r3
 8003e2c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            step_counter_increment2 = ((uint16_t)data_array[15] << 8);
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Set step_counter_increment for msb 8 bits */
            step_counter_increment2 = BMI3_SET_BITS(step_counter_increment2,
 8003e38:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	b21a      	sxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8a9b      	ldrh	r3, [r3, #20]
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b21b      	sxth	r3, r3
 8003e4e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            /* Set peak_duration_min_walking for lsb 8 bits */
            peak_duration_min_walking = BMI3_SET_BIT_POS0(data_array[16],
 8003e52:	7e3b      	ldrb	r3, [r7, #24]
 8003e54:	b21b      	sxth	r3, r3
 8003e56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e5a:	b21a      	sxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8adb      	ldrh	r3, [r3, #22]
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	b21b      	sxth	r3, r3
 8003e66:	4313      	orrs	r3, r2
 8003e68:	b21b      	sxth	r3, r3
 8003e6a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                                                          BMI3_STEP_PEAK_DURATION_MIN_WALKING,
                                                          config->peak_duration_min_walking);

            peak_duration_min_running = ((uint16_t)data_array[17] << 8);
 8003e6e:	7e7b      	ldrb	r3, [r7, #25]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

            /* Set peak_duration_min_walking for msb 8 bits */
            peak_duration_min_running = BMI3_SET_BITS(peak_duration_min_running,
 8003e76:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	b21a      	sxth	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8b1b      	ldrh	r3, [r3, #24]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	b21b      	sxth	r3, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                                      BMI3_STEP_PEAK_DURATION_MIN_RUNNING,
                                                      config->peak_duration_min_running);

            /* Set activity detection fsctor */
            activity_detection_factor = BMI3_SET_BIT_POS0(data_array[18],
 8003e8e:	7ebb      	ldrb	r3, [r7, #26]
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	f023 030f 	bic.w	r3, r3, #15
 8003e96:	b21a      	sxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8b5b      	ldrh	r3, [r3, #26]
 8003e9c:	b21b      	sxth	r3, r3
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	b21b      	sxth	r3, r3
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	b21b      	sxth	r3, r3
 8003ea8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                                                          BMI3_STEP_ACTIVITY_DETECTION_FACTOR,
                                                          config->activity_detection_factor);

            /* Set activity_detection_threshold for lsb 8 bits */
            activity_detection_threshold1 = BMI3_SET_BITS(data_array[18],
 8003eac:	7ebb      	ldrb	r3, [r7, #26]
 8003eae:	b21b      	sxth	r3, r3
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	b21a      	sxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8b9b      	ldrh	r3, [r3, #28]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b21b      	sxth	r3, r3
 8003ec2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            activity_detection_threshold = ((uint16_t)data_array[19] << 8);
 8003ec6:	7efb      	ldrb	r3, [r7, #27]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

            /* Set activity_detection_threshold for msb 8 bits */
            activity_detection_threshold2 = BMI3_SET_BITS(activity_detection_threshold,
 8003ece:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	b21a      	sxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8b9b      	ldrh	r3, [r3, #28]
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	b21b      	sxth	r3, r3
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	b21b      	sxth	r3, r3
 8003ee4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            /* Set maximum step duration */
            step_duration_max = BMI3_SET_BIT_POS0(data_array[20], BMI3_STEP_DURATION_MAX, config->step_duration_max);
 8003ee8:	7f3b      	ldrb	r3, [r7, #28]
 8003eea:	b21b      	sxth	r3, r3
 8003eec:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ef0:	b21a      	sxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8bdb      	ldrh	r3, [r3, #30]
 8003ef6:	b21b      	sxth	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

            step_duration_window = ((uint16_t)data_array[21] << 8);
 8003f04:	7f7b      	ldrb	r3, [r7, #29]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            /* Set step duration window */
            step_duration_window = BMI3_SET_BITS(step_duration_window,
 8003f0c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	b21a      	sxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8c1b      	ldrh	r3, [r3, #32]
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	b21b      	sxth	r3, r3
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	b21b      	sxth	r3, r3
 8003f20:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                                                 BMI3_STEP_DURATION_WINDOW,
                                                 config->step_duration_window);

            step_duration_pp_enabled = BMI3_SET_BIT_POS0(data_array[22],
 8003f24:	7fbb      	ldrb	r3, [r7, #30]
 8003f26:	b21b      	sxth	r3, r3
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	b21a      	sxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003f32:	b21b      	sxth	r3, r3
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	b21b      	sxth	r3, r3
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	b21b      	sxth	r3, r3
 8003f3e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                                                         BMI3_STEP_DURATION_PP_ENABLED,
                                                         config->step_duration_pp_enabled);

            step_duration_threshold = BMI3_SET_BITS(data_array[22],
 8003f42:	7fbb      	ldrb	r3, [r7, #30]
 8003f44:	b21b      	sxth	r3, r3
 8003f46:	f023 030e 	bic.w	r3, r3, #14
 8003f4a:	b21a      	sxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	b21b      	sxth	r3, r3
 8003f54:	f003 030e 	and.w	r3, r3, #14
 8003f58:	b21b      	sxth	r3, r3
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	b21b      	sxth	r3, r3
 8003f5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                    BMI3_STEP_DURATION_THRESHOLD,
                                                    config->step_duration_thres);

            mean_crossing_pp_enabled = BMI3_SET_BITS(data_array[22],
 8003f62:	7fbb      	ldrb	r3, [r7, #30]
 8003f64:	b21b      	sxth	r3, r3
 8003f66:	f023 0310 	bic.w	r3, r3, #16
 8003f6a:	b21a      	sxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	b21b      	sxth	r3, r3
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	b21b      	sxth	r3, r3
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	b21b      	sxth	r3, r3
 8003f7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                                                     BMI3_STEP_MEAN_CROSSING_PP_ENABLED,
                                                     config->mean_crossing_pp_enabled);

            /* Set mcr_threshold for lsb 8 bits */
            mcr_threshold1 = BMI3_SET_BITS(data_array[22], BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 8003f82:	7fbb      	ldrb	r3, [r7, #30]
 8003f84:	b21b      	sxth	r3, r3
 8003f86:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8003f8a:	b21a      	sxth	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f90:	015b      	lsls	r3, r3, #5
 8003f92:	e001      	b.n	8003f98 <set_step_config+0x318>
 8003f94:	fffffc00 	.word	0xfffffc00
 8003f98:	b21b      	sxth	r3, r3
 8003f9a:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 8003f9e:	b21b      	sxth	r3, r3
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	b21b      	sxth	r3, r3
 8003fa4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

            mcr_threshold = ((uint16_t)data_array[23] << 8);
 8003fa8:	7ffb      	ldrb	r3, [r7, #31]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            /* Set mcr_threshold for msb 8 bits */
            mcr_threshold2 = BMI3_SET_BITS(mcr_threshold, BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 8003fb0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8003fb4:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8003fb8:	b21a      	sxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbe:	015b      	lsls	r3, r3, #5
 8003fc0:	b21b      	sxth	r3, r3
 8003fc2:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 8003fc6:	b21b      	sxth	r3, r3
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b21b      	sxth	r3, r3
 8003fcc:	87fb      	strh	r3, [r7, #62]	@ 0x3e

            sc_12_res = ((uint16_t)data_array[23] << 8);
 8003fce:	7ffb      	ldrb	r3, [r7, #31]
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            sc_12_res = BMI3_SET_BITS(sc_12_res, BMI3_STEP_SC_12_RES, config->sc_12_res);
 8003fd4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8003fd8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003fdc:	b21a      	sxth	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe2:	029b      	lsls	r3, r3, #10
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	4313      	orrs	r3, r2
 8003fee:	b21b      	sxth	r3, r3
 8003ff0:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            step_config[0] = (uint8_t)watermark1;
 8003ff2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f887 3020 	strb.w	r3, [r7, #32]
            step_config[1] = (uint8_t)((watermark2 | reset_counter) >> 8);
 8003ffc:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8004000:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004004:	4313      	orrs	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	b29b      	uxth	r3, r3
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            step_config[2] = (uint8_t)env_min_dist_up1;
 8004012:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            step_config[3] = (uint8_t)(env_min_dist_up2 >> 8);
 800401c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	b29b      	uxth	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            step_config[4] = (uint8_t)env_coef_up1;
 800402a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            step_config[5] = (uint8_t)(env_coef_up2 >> 8);
 8004034:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	b29b      	uxth	r3, r3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            step_config[6] = (uint8_t)env_min_dist_down1;
 8004042:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            step_config[7] = (uint8_t)(env_min_dist_down2 >> 8);
 800404c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8004050:	0a1b      	lsrs	r3, r3, #8
 8004052:	b29b      	uxth	r3, r3
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            step_config[8] = (uint8_t)env_coef_down1;
 800405a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            step_config[9] = (uint8_t)(env_coef_down2 >> 8);
 8004064:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004068:	0a1b      	lsrs	r3, r3, #8
 800406a:	b29b      	uxth	r3, r3
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            step_config[10] = (uint8_t)mean_val_decay1;
 8004072:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            step_config[11] = (uint8_t)(mean_val_decay2 >> 8);
 800407c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	b29b      	uxth	r3, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            step_config[12] = (uint8_t)mean_step_dur1;
 800408a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800408e:	b2db      	uxtb	r3, r3
 8004090:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            step_config[13] = (uint8_t)(mean_step_dur2 >> 8);
 8004094:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	b29b      	uxth	r3, r3
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            step_config[14] = (uint8_t)(step_buffer_size | filter_cascade_enabled | step_counter_increment1);
 80040a2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	4313      	orrs	r3, r2
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	4313      	orrs	r3, r2
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            step_config[15] = (uint8_t)(step_counter_increment2 >> 8);
 80040c0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            step_config[16] = (uint8_t)peak_duration_min_walking;
 80040ce:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            step_config[17] = (uint8_t)(peak_duration_min_running >> 8);
 80040d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	b29b      	uxth	r3, r3
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
            step_config[18] = (uint8_t)(activity_detection_factor | activity_detection_threshold1);
 80040e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4313      	orrs	r3, r2
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            step_config[19] = (uint8_t)(activity_detection_threshold2 >> 8);
 80040fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	b29b      	uxth	r3, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            step_config[20] = (uint8_t)step_duration_max;
 8004108:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            step_config[21] = (uint8_t)(step_duration_window >> 8);
 8004112:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	b29b      	uxth	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            step_config[22] =
                (uint8_t)(step_duration_pp_enabled | step_duration_threshold | mean_crossing_pp_enabled |
 8004120:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004124:	b2da      	uxtb	r2, r3
 8004126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800412a:	b2db      	uxtb	r3, r3
 800412c:	4313      	orrs	r3, r2
 800412e:	b2da      	uxtb	r2, r3
 8004130:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004134:	b2db      	uxtb	r3, r3
 8004136:	4313      	orrs	r3, r2
 8004138:	b2da      	uxtb	r2, r3
 800413a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800413e:	b2db      	uxtb	r3, r3
 8004140:	4313      	orrs	r3, r2
 8004142:	b2db      	uxtb	r3, r3
            step_config[22] =
 8004144:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                          mcr_threshold1);
            step_config[23] = (uint8_t)((mcr_threshold2 | sc_12_res) >> 8);
 8004148:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800414a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800414c:	4313      	orrs	r3, r2
 800414e:	b29b      	uxth	r3, r3
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	b29b      	uxth	r3, r3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

            /* Set the configuration back to feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 800415a:	f107 0120 	add.w	r1, r7, #32
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2218      	movs	r2, #24
 8004162:	2042      	movs	r0, #66	@ 0x42
 8004164:	f7fd fe40 	bl	8001de8 <bmi3_set_regs>
 8004168:	4603      	mov	r3, r0
 800416a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800416e:	e002      	b.n	8004176 <set_step_config+0x4f6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004170:	23ff      	movs	r3, #255	@ 0xff
 8004172:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return rslt;
 8004176:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
}
 800417a:	4618      	mov	r0, r3
 800417c:	3790      	adds	r7, #144	@ 0x90
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop

08004184 <get_tap_config>:
 * @brief This internal API gets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t get_tap_config(struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	2300      	movs	r3, #0
 8004194:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8004196:	231e      	movs	r3, #30
 8004198:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80a4 	beq.w	80042ee <get_tap_config+0x16a>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80041a6:	f107 010c 	add.w	r1, r7, #12
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2202      	movs	r2, #2
 80041ae:	2041      	movs	r0, #65	@ 0x41
 80041b0:	f7fd fe1a 	bl	8001de8 <bmi3_set_regs>
 80041b4:	4603      	mov	r3, r0
 80041b6:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80041b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 8098 	bne.w	80042f2 <get_tap_config+0x16e>
        {
            /* Get the configuration from the feature engine register where tap feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 80041c2:	f107 0110 	add.w	r1, r7, #16
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2206      	movs	r2, #6
 80041ca:	2042      	movs	r0, #66	@ 0x42
 80041cc:	f7fd fda7 	bl	8001d1e <bmi3_get_regs>
 80041d0:	4603      	mov	r3, r0
 80041d2:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80041d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f040 808a 	bne.w	80042f2 <get_tap_config+0x16e>
            {
                /* Get word to calculate axis select, wait for time out, max peaks for tap and mode
                 * from the same word */
                lsb = (uint16_t) tap_config[idx++];
 80041de:	7fbb      	ldrb	r3, [r7, #30]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	77ba      	strb	r2, [r7, #30]
 80041e4:	3320      	adds	r3, #32
 80041e6:	443b      	add	r3, r7
 80041e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80041ec:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 80041ee:	7fbb      	ldrb	r3, [r7, #30]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	77ba      	strb	r2, [r7, #30]
 80041f4:	3320      	adds	r3, #32
 80041f6:	443b      	add	r3, r7
 80041f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8004200:	8bba      	ldrh	r2, [r7, #28]
 8004202:	8b7b      	ldrh	r3, [r7, #26]
 8004204:	4313      	orrs	r3, r2
 8004206:	833b      	strh	r3, [r7, #24]

                /* Get axis selection */
                config->axis_sel = lsb_msb & BMI3_TAP_AXIS_SEL_MASK;
 8004208:	8b3b      	ldrh	r3, [r7, #24]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	b2da      	uxtb	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	701a      	strb	r2, [r3, #0]

                /* Get wait for time out */
                config->wait_for_timeout = (lsb_msb & BMI3_TAP_WAIT_FR_TIME_OUT_MASK) >> BMI3_TAP_WAIT_FR_TIME_OUT_POS;
 8004216:	8b3b      	ldrh	r3, [r7, #24]
 8004218:	109b      	asrs	r3, r3, #2
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	b2da      	uxtb	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	705a      	strb	r2, [r3, #1]

                /* Get max peaks for tap */
                config->max_peaks_for_tap = (lsb_msb & BMI3_TAP_MAX_PEAKS_MASK) >> BMI3_TAP_MAX_PEAKS_POS;
 8004226:	8b3b      	ldrh	r3, [r7, #24]
 8004228:	10db      	asrs	r3, r3, #3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	b2da      	uxtb	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	709a      	strb	r2, [r3, #2]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_TAP_MODE_MASK) >> BMI3_TAP_MODE_POS;
 8004236:	8b3b      	ldrh	r3, [r7, #24]
 8004238:	119b      	asrs	r3, r3, #6
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	b2da      	uxtb	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	70da      	strb	r2, [r3, #3]

                /* Get word to calculate threshold, output configuration from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8004246:	7fbb      	ldrb	r3, [r7, #30]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	77ba      	strb	r2, [r7, #30]
 800424c:	3320      	adds	r3, #32
 800424e:	443b      	add	r3, r7
 8004250:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004254:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8004256:	7fbb      	ldrb	r3, [r7, #30]
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	77ba      	strb	r2, [r7, #30]
 800425c:	3320      	adds	r3, #32
 800425e:	443b      	add	r3, r7
 8004260:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8004268:	8bba      	ldrh	r2, [r7, #28]
 800426a:	8b7b      	ldrh	r3, [r7, #26]
 800426c:	4313      	orrs	r3, r2
 800426e:	833b      	strh	r3, [r7, #24]

                /* Get tap peak threshold */
                config->tap_peak_thres = lsb_msb & BMI3_TAP_PEAK_THRES_MASK;
 8004270:	8b3b      	ldrh	r3, [r7, #24]
 8004272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	809a      	strh	r2, [r3, #4]

                /* Get max gesture duration */
                config->max_gest_dur = (lsb_msb & BMI3_TAP_MAX_GEST_DUR_MASK) >> BMI3_TAP_MAX_GEST_DUR_POS;
 800427c:	8b3b      	ldrh	r3, [r7, #24]
 800427e:	0a9b      	lsrs	r3, r3, #10
 8004280:	b29b      	uxth	r3, r3
 8004282:	b2da      	uxtb	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	719a      	strb	r2, [r3, #6]

                /* Get word to calculate max_dur_between_peaks, tap_shock_settling_dur, min_quite_dur_between_taps
                 *  and quite_time_after_gest from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8004288:	7fbb      	ldrb	r3, [r7, #30]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	77ba      	strb	r2, [r7, #30]
 800428e:	3320      	adds	r3, #32
 8004290:	443b      	add	r3, r7
 8004292:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004296:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8004298:	7fbb      	ldrb	r3, [r7, #30]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	77ba      	strb	r2, [r7, #30]
 800429e:	3320      	adds	r3, #32
 80042a0:	443b      	add	r3, r7
 80042a2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 80042aa:	8bba      	ldrh	r2, [r7, #28]
 80042ac:	8b7b      	ldrh	r3, [r7, #26]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	833b      	strh	r3, [r7, #24]

                /* Get maximum duration between peaks */
                config->max_dur_between_peaks = lsb_msb & BMI3_TAP_MAX_DUR_BW_PEAKS_MASK;
 80042b2:	8b3b      	ldrh	r3, [r7, #24]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	71da      	strb	r2, [r3, #7]

                /* Get tap shock settling duration */
                config->tap_shock_settling_dur = (lsb_msb & BMI3_TAP_SHOCK_SETT_DUR_MASK) >>
 80042c0:	8b3b      	ldrh	r3, [r7, #24]
 80042c2:	111b      	asrs	r3, r3, #4
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	721a      	strb	r2, [r3, #8]
                                                 BMI3_TAP_SHOCK_SETT_DUR_POS;

                /* Get minimum quite duration between taps */
                config->min_quite_dur_between_taps = (lsb_msb & BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_MASK) >>
 80042d0:	8b3b      	ldrh	r3, [r7, #24]
 80042d2:	121b      	asrs	r3, r3, #8
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	725a      	strb	r2, [r3, #9]
                                                     BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_POS;

                /* Get quite time after gesture */
                config->quite_time_after_gest = (lsb_msb & BMI3_TAP_QUITE_TIME_AFTR_GEST_MASK) >>
 80042e0:	8b3b      	ldrh	r3, [r7, #24]
 80042e2:	0b1b      	lsrs	r3, r3, #12
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	729a      	strb	r2, [r3, #10]
 80042ec:	e001      	b.n	80042f2 <get_tap_config+0x16e>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80042ee:	23ff      	movs	r3, #255	@ 0xff
 80042f0:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80042f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <set_tap_config>:
 * @brief This internal API sets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t set_tap_config(const struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08c      	sub	sp, #48	@ 0x30
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	2300      	movs	r3, #0
 8004310:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8004312:	231e      	movs	r3, #30
 8004314:	81bb      	strh	r3, [r7, #12]

    uint16_t axis_sel, wait_fr_time_out, max_peaks_for_tap, mode;
    uint16_t tap_peak_thres, tap_peak_thres1, tap_peak_thres2, max_gest_dur;
    uint16_t max_dur_between_peaks, tap_shock_setting_dur, min_quite_dur_between_taps, quite_time_after_gest;

    if (config != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80e8 	beq.w	80044ee <set_tap_config+0x1ee>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 800431e:	f107 010c 	add.w	r1, r7, #12
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2202      	movs	r2, #2
 8004326:	2041      	movs	r0, #65	@ 0x41
 8004328:	f7fd fd5e 	bl	8001de8 <bmi3_set_regs>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 8004332:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004336:	2b00      	cmp	r3, #0
 8004338:	f040 80dc 	bne.w	80044f4 <set_tap_config+0x1f4>
        {
            /* Set axis_sel */
            axis_sel = BMI3_SET_BIT_POS0(tap_config[0], BMI3_TAP_AXIS_SEL, config->axis_sel);
 800433c:	7c3b      	ldrb	r3, [r7, #16]
 800433e:	b21b      	sxth	r3, r3
 8004340:	f023 0303 	bic.w	r3, r3, #3
 8004344:	b21a      	sxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	b21b      	sxth	r3, r3
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	b21b      	sxth	r3, r3
 8004352:	4313      	orrs	r3, r2
 8004354:	b21b      	sxth	r3, r3
 8004356:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set wait for time out */
            wait_fr_time_out = BMI3_SET_BITS(tap_config[0], BMI3_TAP_WAIT_FR_TIME_OUT, config->wait_for_timeout);
 8004358:	7c3b      	ldrb	r3, [r7, #16]
 800435a:	b21b      	sxth	r3, r3
 800435c:	f023 0304 	bic.w	r3, r3, #4
 8004360:	b21a      	sxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	b21b      	sxth	r3, r3
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	b21b      	sxth	r3, r3
 8004370:	4313      	orrs	r3, r2
 8004372:	b21b      	sxth	r3, r3
 8004374:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set maximum peaks for tap */
            max_peaks_for_tap = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MAX_PEAKS, config->max_peaks_for_tap);
 8004376:	7c3b      	ldrb	r3, [r7, #16]
 8004378:	b21b      	sxth	r3, r3
 800437a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800437e:	b21a      	sxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	789b      	ldrb	r3, [r3, #2]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	b21b      	sxth	r3, r3
 8004388:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800438c:	b21b      	sxth	r3, r3
 800438e:	4313      	orrs	r3, r2
 8004390:	b21b      	sxth	r3, r3
 8004392:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mode */
            mode = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MODE, config->mode);
 8004394:	7c3b      	ldrb	r3, [r7, #16]
 8004396:	b21b      	sxth	r3, r3
 8004398:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800439c:	b21a      	sxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	78db      	ldrb	r3, [r3, #3]
 80043a2:	019b      	lsls	r3, r3, #6
 80043a4:	b21b      	sxth	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	b21b      	sxth	r3, r3
 80043aa:	4313      	orrs	r3, r2
 80043ac:	b21b      	sxth	r3, r3
 80043ae:	84fb      	strh	r3, [r7, #38]	@ 0x26

            /* Set peak threshold first byte in word */
            tap_peak_thres = BMI3_SET_BIT_POS0(tap_config[2], BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 80043b0:	7cbb      	ldrb	r3, [r7, #18]
 80043b2:	b21a      	sxth	r2, r3
 80043b4:	4b52      	ldr	r3, [pc, #328]	@ (8004500 <set_tap_config+0x200>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	b21a      	sxth	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	889b      	ldrh	r3, [r3, #4]
 80043be:	b21b      	sxth	r3, r3
 80043c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c4:	b21b      	sxth	r3, r3
 80043c6:	4313      	orrs	r3, r2
 80043c8:	b21b      	sxth	r3, r3
 80043ca:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Left shift by 8 times so that we can set rest of the values of tap peak threshold conf in word */
            tap_peak_thres1 = ((uint16_t)tap_config[3] << 8);
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set peak threshold second byte in word */
            tap_peak_thres2 = BMI3_SET_BIT_POS0(tap_peak_thres1, BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 80043d2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80043d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004500 <set_tap_config+0x200>)
 80043d8:	4013      	ands	r3, r2
 80043da:	b21a      	sxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	889b      	ldrh	r3, [r3, #4]
 80043e0:	b21b      	sxth	r3, r3
 80043e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e6:	b21b      	sxth	r3, r3
 80043e8:	4313      	orrs	r3, r2
 80043ea:	b21b      	sxth	r3, r3
 80043ec:	843b      	strh	r3, [r7, #32]

            max_gest_dur = ((uint16_t)tap_config[3] << 8);
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	83fb      	strh	r3, [r7, #30]

            /* Set max gesture duration */
            max_gest_dur = BMI3_SET_BITS(max_gest_dur, BMI3_TAP_MAX_GEST_DUR, config->max_gest_dur);
 80043f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80043f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043fc:	b21a      	sxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	799b      	ldrb	r3, [r3, #6]
 8004402:	029b      	lsls	r3, r3, #10
 8004404:	b21b      	sxth	r3, r3
 8004406:	4313      	orrs	r3, r2
 8004408:	b21b      	sxth	r3, r3
 800440a:	83fb      	strh	r3, [r7, #30]

            /* Set max duration between peaks */
            max_dur_between_peaks = BMI3_SET_BIT_POS0(tap_config[4],
 800440c:	7d3b      	ldrb	r3, [r7, #20]
 800440e:	b21b      	sxth	r3, r3
 8004410:	f023 030f 	bic.w	r3, r3, #15
 8004414:	b21a      	sxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	79db      	ldrb	r3, [r3, #7]
 800441a:	b21b      	sxth	r3, r3
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	b21b      	sxth	r3, r3
 8004422:	4313      	orrs	r3, r2
 8004424:	b21b      	sxth	r3, r3
 8004426:	83bb      	strh	r3, [r7, #28]
                                                      BMI3_TAP_MAX_DUR_BW_PEAKS,
                                                      config->max_dur_between_peaks);

            /* Set shock settling duration */
            tap_shock_setting_dur =
                BMI3_SET_BITS(tap_config[4], BMI3_TAP_SHOCK_SETT_DUR, config->tap_shock_settling_dur);
 8004428:	7d3b      	ldrb	r3, [r7, #20]
 800442a:	b21b      	sxth	r3, r3
 800442c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004430:	b21a      	sxth	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	7a1b      	ldrb	r3, [r3, #8]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	b21b      	sxth	r3, r3
 800443a:	b2db      	uxtb	r3, r3
 800443c:	b21b      	sxth	r3, r3
 800443e:	4313      	orrs	r3, r2
 8004440:	b21b      	sxth	r3, r3
            tap_shock_setting_dur =
 8004442:	837b      	strh	r3, [r7, #26]

            min_quite_dur_between_taps = ((uint16_t)tap_config[5] << 8);
 8004444:	7d7b      	ldrb	r3, [r7, #21]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	833b      	strh	r3, [r7, #24]

            /* Set quite duration between taps */
            min_quite_dur_between_taps = BMI3_SET_BITS(min_quite_dur_between_taps,
 800444a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800444e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004452:	b21a      	sxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	7a5b      	ldrb	r3, [r3, #9]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	b21b      	sxth	r3, r3
 800445c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004460:	b21b      	sxth	r3, r3
 8004462:	4313      	orrs	r3, r2
 8004464:	b21b      	sxth	r3, r3
 8004466:	833b      	strh	r3, [r7, #24]
                                                       BMI3_TAP_MIN_QUITE_DUR_BW_TAPS,
                                                       config->min_quite_dur_between_taps);

            quite_time_after_gest = ((uint16_t)tap_config[5] << 8);
 8004468:	7d7b      	ldrb	r3, [r7, #21]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	82fb      	strh	r3, [r7, #22]

            /* Set quite time after gesture */
            quite_time_after_gest = BMI3_SET_BITS(quite_time_after_gest,
 800446e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004476:	b21a      	sxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	7a9b      	ldrb	r3, [r3, #10]
 800447c:	031b      	lsls	r3, r3, #12
 800447e:	b21b      	sxth	r3, r3
 8004480:	4313      	orrs	r3, r2
 8004482:	b21b      	sxth	r3, r3
 8004484:	82fb      	strh	r3, [r7, #22]
                                                  BMI3_TAP_QUITE_TIME_AFTR_GEST,
                                                  config->quite_time_after_gest);

            /* Copy all the configurations back to the tap configuration array */
            tap_config[0] = (uint8_t)(axis_sel | wait_fr_time_out | max_peaks_for_tap | mode);
 8004486:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004488:	b2da      	uxtb	r2, r3
 800448a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800448c:	b2db      	uxtb	r3, r3
 800448e:	4313      	orrs	r3, r2
 8004490:	b2da      	uxtb	r2, r3
 8004492:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	b2da      	uxtb	r2, r3
 800449a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800449c:	b2db      	uxtb	r3, r3
 800449e:	4313      	orrs	r3, r2
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	743b      	strb	r3, [r7, #16]
            tap_config[2] = (uint8_t)(tap_peak_thres);
 80044a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	74bb      	strb	r3, [r7, #18]
            tap_config[3] = (uint8_t)((tap_peak_thres2 | max_gest_dur) >> 8);
 80044aa:	8c3a      	ldrh	r2, [r7, #32]
 80044ac:	8bfb      	ldrh	r3, [r7, #30]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	74fb      	strb	r3, [r7, #19]
            tap_config[4] = (uint8_t)(max_dur_between_peaks | tap_shock_setting_dur);
 80044ba:	8bbb      	ldrh	r3, [r7, #28]
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	8b7b      	ldrh	r3, [r7, #26]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	4313      	orrs	r3, r2
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	753b      	strb	r3, [r7, #20]
            tap_config[5] = (uint8_t)((min_quite_dur_between_taps | quite_time_after_gest) >> 8);
 80044c8:	8b3a      	ldrh	r2, [r7, #24]
 80044ca:	8afb      	ldrh	r3, [r7, #22]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	0a1b      	lsrs	r3, r3, #8
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	757b      	strb	r3, [r7, #21]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 80044d8:	f107 0110 	add.w	r1, r7, #16
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2206      	movs	r2, #6
 80044e0:	2042      	movs	r0, #66	@ 0x42
 80044e2:	f7fd fc81 	bl	8001de8 <bmi3_set_regs>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80044ec:	e002      	b.n	80044f4 <set_tap_config+0x1f4>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80044ee:	23ff      	movs	r3, #255	@ 0xff
 80044f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 80044f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3730      	adds	r7, #48	@ 0x30
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	fffffc00 	.word	0xfffffc00

08004504 <set_alternate_accel_config>:
/*!
 * @brief This internal API sets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t set_alternate_accel_config(const struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 800450e:	2300      	movs	r3, #0
 8004510:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_acc_odr, alt_acc_avg_num, alt_acc_mode;

    if (config != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d03a      	beq.n	800458e <set_alternate_accel_config+0x8a>
    {
        /* Set alternate accelerometer ODR */
        alt_acc_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_ACC_ODR, config->alt_acc_odr);
 8004518:	7b3b      	ldrb	r3, [r7, #12]
 800451a:	b21b      	sxth	r3, r3
 800451c:	f023 030f 	bic.w	r3, r3, #15
 8004520:	b21a      	sxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	b21b      	sxth	r3, r3
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	b21b      	sxth	r3, r3
 800452e:	4313      	orrs	r3, r2
 8004530:	b21b      	sxth	r3, r3
 8004532:	82bb      	strh	r3, [r7, #20]

        /* Set alternate accelerometer average number of samples */
        alt_acc_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_AVG_NUM, config->alt_acc_avg_num);
 8004534:	7b7b      	ldrb	r3, [r7, #13]
 8004536:	b21a      	sxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	789b      	ldrb	r3, [r3, #2]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	b21b      	sxth	r3, r3
 8004540:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004544:	b21b      	sxth	r3, r3
 8004546:	4313      	orrs	r3, r2
 8004548:	b21b      	sxth	r3, r3
 800454a:	827b      	strh	r3, [r7, #18]

        /* Set alternate accelerometer mode */
        alt_acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_MODE, config->alt_acc_mode);
 800454c:	7b7b      	ldrb	r3, [r7, #13]
 800454e:	b21a      	sxth	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	785b      	ldrb	r3, [r3, #1]
 8004554:	031b      	lsls	r3, r3, #12
 8004556:	b21b      	sxth	r3, r3
 8004558:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800455c:	b21b      	sxth	r3, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	b21b      	sxth	r3, r3
 8004562:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_acc_odr);
 8004564:	8abb      	ldrh	r3, [r7, #20]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_acc_avg_num | alt_acc_mode) >> 8);
 800456a:	8a7a      	ldrh	r2, [r7, #18]
 800456c:	8a3b      	ldrh	r3, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	b29b      	uxth	r3, r3
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	b29b      	uxth	r3, r3
 8004576:	b2db      	uxtb	r3, r3
 8004578:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate accel */
        rslt = bmi3_set_regs(BMI3_REG_ALT_ACC_CONF, reg_data, 2, dev);
 800457a:	f107 010c 	add.w	r1, r7, #12
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2202      	movs	r2, #2
 8004582:	2028      	movs	r0, #40	@ 0x28
 8004584:	f7fd fc30 	bl	8001de8 <bmi3_set_regs>
 8004588:	4603      	mov	r3, r0
 800458a:	75fb      	strb	r3, [r7, #23]
 800458c:	e001      	b.n	8004592 <set_alternate_accel_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800458e:	23ff      	movs	r3, #255	@ 0xff
 8004590:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004592:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <get_alternate_accel_config>:
/*!
 * @brief This internal API gets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t get_alternate_accel_config(struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80045a8:	2300      	movs	r3, #0
 80045aa:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d029      	beq.n	8004606 <get_alternate_accel_config+0x68>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_ACC_CONF, data_array, 2, dev);
 80045b2:	f107 0108 	add.w	r1, r7, #8
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2202      	movs	r2, #2
 80045ba:	2028      	movs	r0, #40	@ 0x28
 80045bc:	f7fd fbaf 	bl	8001d1e <bmi3_get_regs>
 80045c0:	4603      	mov	r3, r0
 80045c2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80045c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d11e      	bne.n	800460a <get_alternate_accel_config+0x6c>
        {
            reg_data = data_array[0];
 80045cc:	7a3b      	ldrb	r3, [r7, #8]
 80045ce:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer ODR */
            config->alt_acc_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_ACC_ODR);
 80045d0:	89bb      	ldrh	r3, [r7, #12]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 80045de:	7a7b      	ldrb	r3, [r7, #9]
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer average samples */
            config->alt_acc_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_AVG_NUM);
 80045e4:	89bb      	ldrh	r3, [r7, #12]
 80045e6:	121b      	asrs	r3, r3, #8
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	709a      	strb	r2, [r3, #2]

            /* Get alternate accel mode */
            config->alt_acc_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_MODE);
 80045f4:	89bb      	ldrh	r3, [r7, #12]
 80045f6:	131b      	asrs	r3, r3, #12
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	705a      	strb	r2, [r3, #1]
 8004604:	e001      	b.n	800460a <get_alternate_accel_config+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004606:	23ff      	movs	r3, #255	@ 0xff
 8004608:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800460a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <set_alternate_gyro_config>:
/*!
 * @brief This internal API sets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t set_alternate_gyro_config(const struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b086      	sub	sp, #24
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8004620:	2300      	movs	r3, #0
 8004622:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_gyro_odr, alt_gyro_avg_num, alt_gyro_mode;

    if (config != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d03a      	beq.n	80046a0 <set_alternate_gyro_config+0x8a>
    {
        /* Set alternate gyro ODR */
        alt_gyro_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_GYR_ODR, config->alt_gyro_odr);
 800462a:	7b3b      	ldrb	r3, [r7, #12]
 800462c:	b21b      	sxth	r3, r3
 800462e:	f023 030f 	bic.w	r3, r3, #15
 8004632:	b21a      	sxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	b21b      	sxth	r3, r3
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	b21b      	sxth	r3, r3
 8004640:	4313      	orrs	r3, r2
 8004642:	b21b      	sxth	r3, r3
 8004644:	82bb      	strh	r3, [r7, #20]

        /* Set alternate gyro average number of samples */
        alt_gyro_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_AVG_NUM, config->alt_gyro_avg_num);
 8004646:	7b7b      	ldrb	r3, [r7, #13]
 8004648:	b21a      	sxth	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	789b      	ldrb	r3, [r3, #2]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	b21b      	sxth	r3, r3
 8004652:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004656:	b21b      	sxth	r3, r3
 8004658:	4313      	orrs	r3, r2
 800465a:	b21b      	sxth	r3, r3
 800465c:	827b      	strh	r3, [r7, #18]

        /* Set alternate gyro mode */
        alt_gyro_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_MODE, config->alt_gyro_mode);
 800465e:	7b7b      	ldrb	r3, [r7, #13]
 8004660:	b21a      	sxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	031b      	lsls	r3, r3, #12
 8004668:	b21b      	sxth	r3, r3
 800466a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800466e:	b21b      	sxth	r3, r3
 8004670:	4313      	orrs	r3, r2
 8004672:	b21b      	sxth	r3, r3
 8004674:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_gyro_odr);
 8004676:	8abb      	ldrh	r3, [r7, #20]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_gyro_avg_num | alt_gyro_mode) >> 8);
 800467c:	8a7a      	ldrh	r2, [r7, #18]
 800467e:	8a3b      	ldrh	r3, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	b29b      	uxth	r3, r3
 8004684:	0a1b      	lsrs	r3, r3, #8
 8004686:	b29b      	uxth	r3, r3
 8004688:	b2db      	uxtb	r3, r3
 800468a:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate gyro */
        rslt = bmi3_set_regs(BMI3_REG_ALT_GYR_CONF, reg_data, 2, dev);
 800468c:	f107 010c 	add.w	r1, r7, #12
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2202      	movs	r2, #2
 8004694:	2029      	movs	r0, #41	@ 0x29
 8004696:	f7fd fba7 	bl	8001de8 <bmi3_set_regs>
 800469a:	4603      	mov	r3, r0
 800469c:	75fb      	strb	r3, [r7, #23]
 800469e:	e001      	b.n	80046a4 <set_alternate_gyro_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80046a0:	23ff      	movs	r3, #255	@ 0xff
 80046a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80046a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <get_alternate_gyro_config>:
/*!
 * @brief This internal API gets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t get_alternate_gyro_config(struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80046ba:	2300      	movs	r3, #0
 80046bc:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d029      	beq.n	8004718 <get_alternate_gyro_config+0x68>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_GYR_CONF, data_array, 2, dev);
 80046c4:	f107 0108 	add.w	r1, r7, #8
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2202      	movs	r2, #2
 80046cc:	2029      	movs	r0, #41	@ 0x29
 80046ce:	f7fd fb26 	bl	8001d1e <bmi3_get_regs>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80046d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d11e      	bne.n	800471c <get_alternate_gyro_config+0x6c>
        {
            reg_data = data_array[0];
 80046de:	7a3b      	ldrb	r3, [r7, #8]
 80046e0:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro ODR */
            config->alt_gyro_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_GYR_ODR);
 80046e2:	89bb      	ldrh	r3, [r7, #12]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 80046f0:	7a7b      	ldrb	r3, [r7, #9]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro average samples */
            config->alt_gyro_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_AVG_NUM);
 80046f6:	89bb      	ldrh	r3, [r7, #12]
 80046f8:	121b      	asrs	r3, r3, #8
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	b2da      	uxtb	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	709a      	strb	r2, [r3, #2]

            /* Get alternate gyro mode */
            config->alt_gyro_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_MODE);
 8004706:	89bb      	ldrh	r3, [r7, #12]
 8004708:	131b      	asrs	r3, r3, #12
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	b2da      	uxtb	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	705a      	strb	r2, [r3, #1]
 8004716:	e001      	b.n	800471c <get_alternate_gyro_config+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004718:	23ff      	movs	r3, #255	@ 0xff
 800471a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800471c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <set_alternate_auto_config>:

/*!
 * @brief This internal API sets alternate auto configurations for feature interrupts.
 */
static int8_t set_alternate_auto_config(const struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 8004732:	2300      	movs	r3, #0
 8004734:	823b      	strh	r3, [r7, #16]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8004736:	2323      	movs	r3, #35	@ 0x23
 8004738:	81bb      	strh	r3, [r7, #12]

    uint8_t alt_switch, user_switch;

    if (config != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d035      	beq.n	80047ac <set_alternate_auto_config+0x84>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004740:	f107 010c 	add.w	r1, r7, #12
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2202      	movs	r2, #2
 8004748:	2041      	movs	r0, #65	@ 0x41
 800474a:	f7fd fb4d 	bl	8001de8 <bmi3_set_regs>
 800474e:	4603      	mov	r3, r0
 8004750:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8004752:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d12a      	bne.n	80047b0 <set_alternate_auto_config+0x88>
        {
            /* Set alternate switch config */
            alt_switch = BMI3_SET_BIT_POS0(alt_auto_config[0],
 800475a:	7c3b      	ldrb	r3, [r7, #16]
 800475c:	b25b      	sxtb	r3, r3
 800475e:	f023 030f 	bic.w	r3, r3, #15
 8004762:	b25a      	sxtb	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	b25b      	sxtb	r3, r3
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	b25b      	sxtb	r3, r3
 8004770:	4313      	orrs	r3, r2
 8004772:	b25b      	sxtb	r3, r3
 8004774:	75bb      	strb	r3, [r7, #22]
                                           BMI3_ALT_CONF_ALT_SWITCH,
                                           config->alt_conf_alt_switch_src_select);

            /* Set alternate user config */
            user_switch = BMI3_SET_BITS(alt_auto_config[0],
 8004776:	7c3b      	ldrb	r3, [r7, #16]
 8004778:	b25b      	sxtb	r3, r3
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	b25a      	sxtb	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	b25b      	sxtb	r3, r3
 8004788:	4313      	orrs	r3, r2
 800478a:	b25b      	sxtb	r3, r3
 800478c:	757b      	strb	r3, [r7, #21]
                                        BMI3_ALT_CONF_USER_SWITCH,
                                        config->alt_conf_user_switch_src_select);

            alt_auto_config[0] = alt_switch | user_switch;
 800478e:	7dba      	ldrb	r2, [r7, #22]
 8004790:	7d7b      	ldrb	r3, [r7, #21]
 8004792:	4313      	orrs	r3, r2
 8004794:	b2db      	uxtb	r3, r3
 8004796:	743b      	strb	r3, [r7, #16]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8004798:	f107 0110 	add.w	r1, r7, #16
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2202      	movs	r2, #2
 80047a0:	2042      	movs	r0, #66	@ 0x42
 80047a2:	f7fd fb21 	bl	8001de8 <bmi3_set_regs>
 80047a6:	4603      	mov	r3, r0
 80047a8:	75fb      	strb	r3, [r7, #23]
 80047aa:	e001      	b.n	80047b0 <set_alternate_auto_config+0x88>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80047ac:	23ff      	movs	r3, #255	@ 0xff
 80047ae:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80047b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <get_alternate_auto_config>:

/*!
 * @brief This internal API gets alternate auto configurations for feature interrupts.
 */
static int8_t get_alternate_auto_config(struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 80047c6:	2300      	movs	r3, #0
 80047c8:	81bb      	strh	r3, [r7, #12]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 80047ca:	2323      	movs	r3, #35	@ 0x23
 80047cc:	813b      	strh	r3, [r7, #8]

    if (config != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d025      	beq.n	8004820 <get_alternate_auto_config+0x64>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80047d4:	f107 0108 	add.w	r1, r7, #8
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2202      	movs	r2, #2
 80047dc:	2041      	movs	r0, #65	@ 0x41
 80047de:	f7fd fb03 	bl	8001de8 <bmi3_set_regs>
 80047e2:	4603      	mov	r3, r0
 80047e4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80047e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11a      	bne.n	8004824 <get_alternate_auto_config+0x68>
        {
            /* Get the configuration from the feature engine register where alternate config feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 80047ee:	f107 010c 	add.w	r1, r7, #12
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2202      	movs	r2, #2
 80047f6:	2042      	movs	r0, #66	@ 0x42
 80047f8:	f7fd fa91 	bl	8001d1e <bmi3_get_regs>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8004800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10d      	bne.n	8004824 <get_alternate_auto_config+0x68>
            {
                /* Get alternate switch config */
                config->alt_conf_alt_switch_src_select = alt_auto_config[0] & BMI3_ALT_CONF_ALT_SWITCH_MASK;
 8004808:	7b3b      	ldrb	r3, [r7, #12]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	b2da      	uxtb	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	701a      	strb	r2, [r3, #0]

                /* Get alternate user config */
                config->alt_conf_user_switch_src_select = (alt_auto_config[0] & BMI3_ALT_CONF_USER_SWITCH_MASK) >>
 8004814:	7b3b      	ldrb	r3, [r7, #12]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	b2da      	uxtb	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	705a      	strb	r2, [r3, #1]
 800481e:	e001      	b.n	8004824 <get_alternate_auto_config+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004820:	23ff      	movs	r3, #255	@ 0xff
 8004822:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004824:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <validate_acc_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for accel
 */
static int8_t validate_acc_odr_avg(uint8_t acc_odr, uint8_t acc_avg)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	460a      	mov	r2, r1
 800483a:	71fb      	strb	r3, [r7, #7]
 800483c:	4613      	mov	r3, r2
 800483e:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	613b      	str	r3, [r7, #16]

    switch (acc_odr)
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	3b01      	subs	r3, #1
 8004850:	2b09      	cmp	r3, #9
 8004852:	d835      	bhi.n	80048c0 <validate_acc_odr_avg+0x90>
 8004854:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <validate_acc_odr_avg+0x2c>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	08004885 	.word	0x08004885
 8004860:	0800488b 	.word	0x0800488b
 8004864:	08004891 	.word	0x08004891
 8004868:	08004897 	.word	0x08004897
 800486c:	0800489d 	.word	0x0800489d
 8004870:	080048a3 	.word	0x080048a3
 8004874:	080048a9 	.word	0x080048a9
 8004878:	080048af 	.word	0x080048af
 800487c:	080048b5 	.word	0x080048b5
 8004880:	080048bb 	.word	0x080048bb
    {
        case BMI3_ACC_ODR_0_78HZ:
            odr = 0.78125;
 8004884:	4b2f      	ldr	r3, [pc, #188]	@ (8004944 <validate_acc_odr_avg+0x114>)
 8004886:	617b      	str	r3, [r7, #20]
            break;
 8004888:	e01b      	b.n	80048c2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_1_56HZ:
            odr = 1.5625;
 800488a:	4b2f      	ldr	r3, [pc, #188]	@ (8004948 <validate_acc_odr_avg+0x118>)
 800488c:	617b      	str	r3, [r7, #20]
            break;
 800488e:	e018      	b.n	80048c2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_3_125HZ:
            odr = 3.125;
 8004890:	4b2e      	ldr	r3, [pc, #184]	@ (800494c <validate_acc_odr_avg+0x11c>)
 8004892:	617b      	str	r3, [r7, #20]
            break;
 8004894:	e015      	b.n	80048c2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_6_25HZ:
            odr = 6.25;
 8004896:	4b2e      	ldr	r3, [pc, #184]	@ (8004950 <validate_acc_odr_avg+0x120>)
 8004898:	617b      	str	r3, [r7, #20]
            break;
 800489a:	e012      	b.n	80048c2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_12_5HZ:
            odr = 12.5;
 800489c:	4b2d      	ldr	r3, [pc, #180]	@ (8004954 <validate_acc_odr_avg+0x124>)
 800489e:	617b      	str	r3, [r7, #20]
            break;
 80048a0:	e00f      	b.n	80048c2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_25HZ:
            odr = 25.0;
 80048a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004958 <validate_acc_odr_avg+0x128>)
 80048a4:	617b      	str	r3, [r7, #20]
            break;
 80048a6:	e00c      	b.n	80048c2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_50HZ:
            odr = 50.0;
 80048a8:	4b2c      	ldr	r3, [pc, #176]	@ (800495c <validate_acc_odr_avg+0x12c>)
 80048aa:	617b      	str	r3, [r7, #20]
            break;
 80048ac:	e009      	b.n	80048c2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_100HZ:
            odr = 100.0;
 80048ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004960 <validate_acc_odr_avg+0x130>)
 80048b0:	617b      	str	r3, [r7, #20]
            break;
 80048b2:	e006      	b.n	80048c2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_200HZ:
            odr = 200.0;
 80048b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004964 <validate_acc_odr_avg+0x134>)
 80048b6:	617b      	str	r3, [r7, #20]
            break;
 80048b8:	e003      	b.n	80048c2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_400HZ:
            odr = 400.0;
 80048ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004968 <validate_acc_odr_avg+0x138>)
 80048bc:	617b      	str	r3, [r7, #20]
            break;
 80048be:	e000      	b.n	80048c2 <validate_acc_odr_avg+0x92>
        default:
            break;
 80048c0:	bf00      	nop
    }

    switch (acc_avg)
 80048c2:	79bb      	ldrb	r3, [r7, #6]
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d82d      	bhi.n	8004924 <validate_acc_odr_avg+0xf4>
 80048c8:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <validate_acc_odr_avg+0xa0>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	080048ed 	.word	0x080048ed
 80048d4:	080048f5 	.word	0x080048f5
 80048d8:	080048fd 	.word	0x080048fd
 80048dc:	08004905 	.word	0x08004905
 80048e0:	0800490d 	.word	0x0800490d
 80048e4:	08004915 	.word	0x08004915
 80048e8:	0800491d 	.word	0x0800491d
    {
        case BMI3_ACC_AVG1:
            avg = 1.0;
 80048ec:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80048f0:	613b      	str	r3, [r7, #16]
            break;
 80048f2:	e018      	b.n	8004926 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG2:
            avg = 2.0;
 80048f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80048f8:	613b      	str	r3, [r7, #16]
            break;
 80048fa:	e014      	b.n	8004926 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG4:
            avg = 4.0;
 80048fc:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8004900:	613b      	str	r3, [r7, #16]
            break;
 8004902:	e010      	b.n	8004926 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG8:
            avg = 8.0;
 8004904:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004908:	613b      	str	r3, [r7, #16]
            break;
 800490a:	e00c      	b.n	8004926 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG16:
            avg = 16.0;
 800490c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004910:	613b      	str	r3, [r7, #16]
            break;
 8004912:	e008      	b.n	8004926 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG32:
            avg = 32.0;
 8004914:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8004918:	613b      	str	r3, [r7, #16]
            break;
 800491a:	e004      	b.n	8004926 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG64:
            avg = 64.0;
 800491c:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8004920:	613b      	str	r3, [r7, #16]
            break;
 8004922:	e000      	b.n	8004926 <validate_acc_odr_avg+0xf6>
        default:
            break;
 8004924:	bf00      	nop
    }

    rslt = accel_skipped_samples_check(odr, avg);
 8004926:	edd7 0a04 	vldr	s1, [r7, #16]
 800492a:	ed97 0a05 	vldr	s0, [r7, #20]
 800492e:	f000 f81d 	bl	800496c <accel_skipped_samples_check>
 8004932:	4603      	mov	r3, r0
 8004934:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8004936:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	3f480000 	.word	0x3f480000
 8004948:	3fc80000 	.word	0x3fc80000
 800494c:	40480000 	.word	0x40480000
 8004950:	40c80000 	.word	0x40c80000
 8004954:	41480000 	.word	0x41480000
 8004958:	41c80000 	.word	0x41c80000
 800495c:	42480000 	.word	0x42480000
 8004960:	42c80000 	.word	0x42c80000
 8004964:	43480000 	.word	0x43480000
 8004968:	43c80000 	.word	0x43c80000

0800496c <accel_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for accel
 */
static int8_t accel_skipped_samples_check(float odr, float avg)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	ed87 0a01 	vstr	s0, [r7, #4]
 8004976:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 800497a:	4b1b      	ldr	r3, [pc, #108]	@ (80049e8 <accel_skipped_samples_check+0x7c>)
 800497c:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8004984:	edd7 7a01 	vldr	s15, [r7, #4]
 8004988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004990:	dd1f      	ble.n	80049d2 <accel_skipped_samples_check+0x66>
 8004992:	edd7 7a00 	vldr	s15, [r7]
 8004996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800499a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499e:	dd18      	ble.n	80049d2 <accel_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 80049a0:	edd7 6a04 	vldr	s13, [r7, #16]
 80049a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80049a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ac:	edd7 7a00 	vldr	s15, [r7]
 80049b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049b4:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 80049b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80049bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c4:	dd02      	ble.n	80049cc <accel_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80049ca:	e004      	b.n	80049d6 <accel_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 80049cc:	23fc      	movs	r3, #252	@ 0xfc
 80049ce:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80049d0:	e001      	b.n	80049d6 <accel_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_ACC_INVALID_CFG;
 80049d2:	23fc      	movs	r3, #252	@ 0xfc
 80049d4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80049d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	45c80000 	.word	0x45c80000

080049ec <validate_gyr_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for gyro
 */
static int8_t validate_gyr_odr_avg(uint8_t gyr_odr, uint8_t gyr_avg)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	460a      	mov	r2, r1
 80049f6:	71fb      	strb	r3, [r7, #7]
 80049f8:	4613      	mov	r3, r2
 80049fa:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	613b      	str	r3, [r7, #16]

    switch (gyr_odr)
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	2b09      	cmp	r3, #9
 8004a0e:	d835      	bhi.n	8004a7c <validate_gyr_odr_avg+0x90>
 8004a10:	a201      	add	r2, pc, #4	@ (adr r2, 8004a18 <validate_gyr_odr_avg+0x2c>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a47 	.word	0x08004a47
 8004a20:	08004a4d 	.word	0x08004a4d
 8004a24:	08004a53 	.word	0x08004a53
 8004a28:	08004a59 	.word	0x08004a59
 8004a2c:	08004a5f 	.word	0x08004a5f
 8004a30:	08004a65 	.word	0x08004a65
 8004a34:	08004a6b 	.word	0x08004a6b
 8004a38:	08004a71 	.word	0x08004a71
 8004a3c:	08004a77 	.word	0x08004a77
    {
        case BMI3_GYR_ODR_0_78HZ:
            odr = 0.78125;
 8004a40:	4b2f      	ldr	r3, [pc, #188]	@ (8004b00 <validate_gyr_odr_avg+0x114>)
 8004a42:	617b      	str	r3, [r7, #20]
            break;
 8004a44:	e01b      	b.n	8004a7e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_1_56HZ:
            odr = 1.5625;
 8004a46:	4b2f      	ldr	r3, [pc, #188]	@ (8004b04 <validate_gyr_odr_avg+0x118>)
 8004a48:	617b      	str	r3, [r7, #20]
            break;
 8004a4a:	e018      	b.n	8004a7e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_3_125HZ:
            odr = 3.125;
 8004a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b08 <validate_gyr_odr_avg+0x11c>)
 8004a4e:	617b      	str	r3, [r7, #20]
            break;
 8004a50:	e015      	b.n	8004a7e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_6_25HZ:
            odr = 6.25;
 8004a52:	4b2e      	ldr	r3, [pc, #184]	@ (8004b0c <validate_gyr_odr_avg+0x120>)
 8004a54:	617b      	str	r3, [r7, #20]
            break;
 8004a56:	e012      	b.n	8004a7e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_12_5HZ:
            odr = 12.5;
 8004a58:	4b2d      	ldr	r3, [pc, #180]	@ (8004b10 <validate_gyr_odr_avg+0x124>)
 8004a5a:	617b      	str	r3, [r7, #20]
            break;
 8004a5c:	e00f      	b.n	8004a7e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_25HZ:
            odr = 25.0;
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b14 <validate_gyr_odr_avg+0x128>)
 8004a60:	617b      	str	r3, [r7, #20]
            break;
 8004a62:	e00c      	b.n	8004a7e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_50HZ:
            odr = 50.0;
 8004a64:	4b2c      	ldr	r3, [pc, #176]	@ (8004b18 <validate_gyr_odr_avg+0x12c>)
 8004a66:	617b      	str	r3, [r7, #20]
            break;
 8004a68:	e009      	b.n	8004a7e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_100HZ:
            odr = 100.0;
 8004a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004b1c <validate_gyr_odr_avg+0x130>)
 8004a6c:	617b      	str	r3, [r7, #20]
            break;
 8004a6e:	e006      	b.n	8004a7e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_200HZ:
            odr = 200.0;
 8004a70:	4b2b      	ldr	r3, [pc, #172]	@ (8004b20 <validate_gyr_odr_avg+0x134>)
 8004a72:	617b      	str	r3, [r7, #20]
            break;
 8004a74:	e003      	b.n	8004a7e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_400HZ:
            odr = 400.0;
 8004a76:	4b2b      	ldr	r3, [pc, #172]	@ (8004b24 <validate_gyr_odr_avg+0x138>)
 8004a78:	617b      	str	r3, [r7, #20]
            break;
 8004a7a:	e000      	b.n	8004a7e <validate_gyr_odr_avg+0x92>
        default:
            break;
 8004a7c:	bf00      	nop
    }

    switch (gyr_avg)
 8004a7e:	79bb      	ldrb	r3, [r7, #6]
 8004a80:	2b06      	cmp	r3, #6
 8004a82:	d82d      	bhi.n	8004ae0 <validate_gyr_odr_avg+0xf4>
 8004a84:	a201      	add	r2, pc, #4	@ (adr r2, 8004a8c <validate_gyr_odr_avg+0xa0>)
 8004a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8a:	bf00      	nop
 8004a8c:	08004aa9 	.word	0x08004aa9
 8004a90:	08004ab1 	.word	0x08004ab1
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004ac1 	.word	0x08004ac1
 8004a9c:	08004ac9 	.word	0x08004ac9
 8004aa0:	08004ad1 	.word	0x08004ad1
 8004aa4:	08004ad9 	.word	0x08004ad9
    {
        case BMI3_GYR_AVG1:
            avg = 1.0;
 8004aa8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004aac:	613b      	str	r3, [r7, #16]
            break;
 8004aae:	e018      	b.n	8004ae2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG2:
            avg = 2.0;
 8004ab0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004ab4:	613b      	str	r3, [r7, #16]
            break;
 8004ab6:	e014      	b.n	8004ae2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG4:
            avg = 4.0;
 8004ab8:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8004abc:	613b      	str	r3, [r7, #16]
            break;
 8004abe:	e010      	b.n	8004ae2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG8:
            avg = 8.0;
 8004ac0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004ac4:	613b      	str	r3, [r7, #16]
            break;
 8004ac6:	e00c      	b.n	8004ae2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG16:
            avg = 16.0;
 8004ac8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004acc:	613b      	str	r3, [r7, #16]
            break;
 8004ace:	e008      	b.n	8004ae2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG32:
            avg = 32.0;
 8004ad0:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8004ad4:	613b      	str	r3, [r7, #16]
            break;
 8004ad6:	e004      	b.n	8004ae2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG64:
            avg = 64.0;
 8004ad8:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8004adc:	613b      	str	r3, [r7, #16]
            break;
 8004ade:	e000      	b.n	8004ae2 <validate_gyr_odr_avg+0xf6>
        default:
            break;
 8004ae0:	bf00      	nop
    }

    rslt = gyro_skipped_samples_check(odr, avg);
 8004ae2:	edd7 0a04 	vldr	s1, [r7, #16]
 8004ae6:	ed97 0a05 	vldr	s0, [r7, #20]
 8004aea:	f000 f81d 	bl	8004b28 <gyro_skipped_samples_check>
 8004aee:	4603      	mov	r3, r0
 8004af0:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8004af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	3f480000 	.word	0x3f480000
 8004b04:	3fc80000 	.word	0x3fc80000
 8004b08:	40480000 	.word	0x40480000
 8004b0c:	40c80000 	.word	0x40c80000
 8004b10:	41480000 	.word	0x41480000
 8004b14:	41c80000 	.word	0x41c80000
 8004b18:	42480000 	.word	0x42480000
 8004b1c:	42c80000 	.word	0x42c80000
 8004b20:	43480000 	.word	0x43480000
 8004b24:	43c80000 	.word	0x43c80000

08004b28 <gyro_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for gyro
 */
static int8_t gyro_skipped_samples_check(float odr, float avg)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004b32:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 8004b36:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <gyro_skipped_samples_check+0x7c>)
 8004b38:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8004b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4c:	dd1f      	ble.n	8004b8e <gyro_skipped_samples_check+0x66>
 8004b4e:	edd7 7a00 	vldr	s15, [r7]
 8004b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	dd18      	ble.n	8004b8e <gyro_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 8004b5c:	edd7 6a04 	vldr	s13, [r7, #16]
 8004b60:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b68:	edd7 7a00 	vldr	s15, [r7]
 8004b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b70:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 8004b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b80:	dd02      	ble.n	8004b88 <gyro_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8004b86:	e004      	b.n	8004b92 <gyro_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8004b88:	23fb      	movs	r3, #251	@ 0xfb
 8004b8a:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8004b8c:	e001      	b.n	8004b92 <gyro_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_GYRO_INVALID_CFG;
 8004b8e:	23fb      	movs	r3, #251	@ 0xfb
 8004b90:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004b92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	45c80000 	.word	0x45c80000

08004ba8 <bmi323_init>:
/*!
 * @brief This API is the entry point for bmi323 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi323_init(struct bmi3_dev *dev)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fdf5 	bl	80057a0 <null_ptr_check>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI323_OK)
 8004bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d104      	bne.n	8004bcc <bmi323_init+0x24>
    {
        rslt = bmi3_init(dev);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fd f859 	bl	8001c7a <bmi3_init>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI323_OK)
 8004bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <bmi323_init+0x40>
    {
        /* Validate chip-id */
        if (dev->chip_id == BMI323_CHIP_ID)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b43      	cmp	r3, #67	@ 0x43
 8004bda:	d103      	bne.n	8004be4 <bmi323_init+0x3c>
        {
            /* Assign resolution to the structure */
            dev->resolution = BMI323_16_BIT_RESOLUTION;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2210      	movs	r2, #16
 8004be0:	731a      	strb	r2, [r3, #12]
 8004be2:	e001      	b.n	8004be8 <bmi323_init+0x40>
        }
        else
        {
            rslt = BMI323_E_DEV_NOT_FOUND;
 8004be4:	23fd      	movs	r3, #253	@ 0xfd
 8004be6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (rslt == BMI323_OK)
 8004be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <bmi323_init+0x54>
    {
        rslt = bmi323_context_switch_selection(BMI323_WEARABLE_SEL, dev);
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	f000 f832 	bl	8004c5c <bmi323_context_switch_selection>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <bmi323_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi323_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	460b      	mov	r3, r1
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_sensor_config(sens_cfg, n_sens, dev);
 8004c16:	7afb      	ldrb	r3, [r7, #11]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7fd f9d5 	bl	8001fcc <bmi3_set_sensor_config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8004c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <bmi323_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi323_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_get_sensor_config(sens_cfg, n_sens, dev);
 8004c40:	7afb      	ldrb	r3, [r7, #11]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4619      	mov	r1, r3
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7fd faca 	bl	80021e0 <bmi3_get_sensor_config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8004c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <bmi323_context_switch_selection>:

/*!
 * @brief This API writes the configurations of context feature for smart phone, wearables and hearables.
 */
int8_t bmi323_context_switch_selection(uint8_t context_sel, struct bmi3_dev *dev)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b0c8      	sub	sp, #288	@ 0x120
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4602      	mov	r2, r0
 8004c64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c68:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004c6c:	6019      	str	r1, [r3, #0]
 8004c6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c72:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004c76:	701a      	strb	r2, [r3, #0]
    /* Variable to define error */
    int8_t rslt;

    struct bmi3_sens_config sens_cfg[BMI323_MAX_FEATURE];

    uint8_t index = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    if (context_sel < BMI323_SEL_MAX)
 8004c7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c82:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	f200 8578 	bhi.w	800577e <bmi323_context_switch_selection+0xb22>
    {
        /* Set any-motion configuration */
        sens_cfg[0].type = BMI323_ANY_MOTION;
 8004c8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c92:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c96:	2203      	movs	r2, #3
 8004c98:	701a      	strb	r2, [r3, #0]
        sens_cfg[0].cfg.any_motion.slope_thres = any_motion_param_set[context_sel][index++];
 8004c9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c9e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004cae:	4618      	mov	r0, r3
 8004cb0:	49e3      	ldr	r1, [pc, #908]	@ (8005040 <bmi323_context_switch_selection+0x3e4>)
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	4403      	add	r3, r0
 8004cba:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004cbe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cc2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004cc6:	809a      	strh	r2, [r3, #4]
        sens_cfg[0].cfg.any_motion.acc_ref_up = (uint8_t)(any_motion_param_set[context_sel][index++]);
 8004cc8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ccc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004cd6:	1c59      	adds	r1, r3, #1
 8004cd8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004cdc:	4618      	mov	r0, r3
 8004cde:	49d8      	ldr	r1, [pc, #864]	@ (8005040 <bmi323_context_switch_selection+0x3e4>)
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	4403      	add	r3, r0
 8004ce8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cf2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004cf6:	719a      	strb	r2, [r3, #6]
        sens_cfg[0].cfg.any_motion.hysteresis = any_motion_param_set[context_sel][index++];
 8004cf8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cfc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004d00:	781a      	ldrb	r2, [r3, #0]
 8004d02:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004d06:	1c59      	adds	r1, r3, #1
 8004d08:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	49cc      	ldr	r1, [pc, #816]	@ (8005040 <bmi323_context_switch_selection+0x3e4>)
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	4403      	add	r3, r0
 8004d18:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d1c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d20:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d24:	811a      	strh	r2, [r3, #8]
        sens_cfg[0].cfg.any_motion.duration = any_motion_param_set[context_sel][index++];
 8004d26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d2a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004d2e:	781a      	ldrb	r2, [r3, #0]
 8004d30:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004d34:	1c59      	adds	r1, r3, #1
 8004d36:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	49c0      	ldr	r1, [pc, #768]	@ (8005040 <bmi323_context_switch_selection+0x3e4>)
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	4403      	add	r3, r0
 8004d46:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d52:	805a      	strh	r2, [r3, #2]
        sens_cfg[0].cfg.any_motion.wait_time = any_motion_param_set[context_sel][index++];
 8004d54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d58:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004d68:	4618      	mov	r0, r3
 8004d6a:	49b5      	ldr	r1, [pc, #724]	@ (8005040 <bmi323_context_switch_selection+0x3e4>)
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	4403      	add	r3, r0
 8004d74:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d80:	815a      	strh	r2, [r3, #10]

        /* Set no-motion configuration */
        index = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[1].type = BMI323_NO_MOTION;
 8004d88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d8c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d90:	2204      	movs	r2, #4
 8004d92:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        sens_cfg[1].cfg.no_motion.slope_thres = no_motion_param_set[context_sel][index++];
 8004d96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d9a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004d9e:	781a      	ldrb	r2, [r3, #0]
 8004da0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004da4:	1c59      	adds	r1, r3, #1
 8004da6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004daa:	4618      	mov	r0, r3
 8004dac:	49a5      	ldr	r1, [pc, #660]	@ (8005044 <bmi323_context_switch_selection+0x3e8>)
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	4403      	add	r3, r0
 8004db6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004dba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dbe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004dc2:	865a      	strh	r2, [r3, #50]	@ 0x32
        sens_cfg[1].cfg.no_motion.acc_ref_up = (uint8_t)(no_motion_param_set[context_sel][index++]);
 8004dc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dc8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004dcc:	781a      	ldrb	r2, [r3, #0]
 8004dce:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004dd2:	1c59      	adds	r1, r3, #1
 8004dd4:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004dd8:	4618      	mov	r0, r3
 8004dda:	499a      	ldr	r1, [pc, #616]	@ (8005044 <bmi323_context_switch_selection+0x3e8>)
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	4403      	add	r3, r0
 8004de4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        sens_cfg[1].cfg.no_motion.hysteresis = no_motion_param_set[context_sel][index++];
 8004df6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dfa:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004e04:	1c59      	adds	r1, r3, #1
 8004e06:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	498d      	ldr	r1, [pc, #564]	@ (8005044 <bmi323_context_switch_selection+0x3e8>)
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	4403      	add	r3, r0
 8004e16:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e1e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e22:	86da      	strh	r2, [r3, #54]	@ 0x36
        sens_cfg[1].cfg.no_motion.duration = no_motion_param_set[context_sel][index++];
 8004e24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e28:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004e32:	1c59      	adds	r1, r3, #1
 8004e34:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004e38:	4618      	mov	r0, r3
 8004e3a:	4982      	ldr	r1, [pc, #520]	@ (8005044 <bmi323_context_switch_selection+0x3e8>)
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	4403      	add	r3, r0
 8004e44:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e50:	861a      	strh	r2, [r3, #48]	@ 0x30
        sens_cfg[1].cfg.no_motion.wait_time = no_motion_param_set[context_sel][index++];
 8004e52:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e56:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004e60:	1c59      	adds	r1, r3, #1
 8004e62:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004e66:	4618      	mov	r0, r3
 8004e68:	4976      	ldr	r1, [pc, #472]	@ (8005044 <bmi323_context_switch_selection+0x3e8>)
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	4403      	add	r3, r0
 8004e72:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e7a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e7e:	871a      	strh	r2, [r3, #56]	@ 0x38

        /* Set tap configuration */
        index = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[2].type = BMI323_TAP;
 8004e86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e8a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e8e:	2209      	movs	r2, #9
 8004e90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        sens_cfg[2].cfg.tap.axis_sel = (uint8_t)tap_param_set[context_sel][index++];
 8004e94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e98:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004e9c:	781a      	ldrb	r2, [r3, #0]
 8004e9e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ea2:	1c59      	adds	r1, r3, #1
 8004ea4:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	4967      	ldr	r1, [pc, #412]	@ (8005048 <bmi323_context_switch_selection+0x3ec>)
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4403      	add	r3, r0
 8004eb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ec0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ec4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
        sens_cfg[2].cfg.tap.wait_for_timeout = (uint8_t)tap_param_set[context_sel][index++];
 8004ec8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ecc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ed6:	1c59      	adds	r1, r3, #1
 8004ed8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004edc:	4618      	mov	r0, r3
 8004ede:	495a      	ldr	r1, [pc, #360]	@ (8005048 <bmi323_context_switch_selection+0x3ec>)
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4403      	add	r3, r0
 8004eea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ef4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ef8:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
        sens_cfg[2].cfg.tap.max_peaks_for_tap = (uint8_t)tap_param_set[context_sel][index++];
 8004efc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f00:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f0a:	1c59      	adds	r1, r3, #1
 8004f0c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f10:	4618      	mov	r0, r3
 8004f12:	494d      	ldr	r1, [pc, #308]	@ (8005048 <bmi323_context_switch_selection+0x3ec>)
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	4403      	add	r3, r0
 8004f1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f2c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        sens_cfg[2].cfg.tap.mode = (uint8_t)tap_param_set[context_sel][index++];
 8004f30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f34:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004f38:	781a      	ldrb	r2, [r3, #0]
 8004f3a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f3e:	1c59      	adds	r1, r3, #1
 8004f40:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f44:	4618      	mov	r0, r3
 8004f46:	4940      	ldr	r1, [pc, #256]	@ (8005048 <bmi323_context_switch_selection+0x3ec>)
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4403      	add	r3, r0
 8004f52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f5c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f60:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        sens_cfg[2].cfg.tap.tap_peak_thres = tap_param_set[context_sel][index++];
 8004f64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f68:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004f6c:	781a      	ldrb	r2, [r3, #0]
 8004f6e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f78:	4618      	mov	r0, r3
 8004f7a:	4933      	ldr	r1, [pc, #204]	@ (8005048 <bmi323_context_switch_selection+0x3ec>)
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4403      	add	r3, r0
 8004f86:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004f8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f8e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f92:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        sens_cfg[2].cfg.tap.max_gest_dur = (uint8_t)tap_param_set[context_sel][index++];
 8004f96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f9a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004f9e:	781a      	ldrb	r2, [r3, #0]
 8004fa0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004fa4:	1c59      	adds	r1, r3, #1
 8004fa6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004faa:	4618      	mov	r0, r3
 8004fac:	4926      	ldr	r1, [pc, #152]	@ (8005048 <bmi323_context_switch_selection+0x3ec>)
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4403      	add	r3, r0
 8004fb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fc2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004fc6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        sens_cfg[2].cfg.tap.max_dur_between_peaks = (uint8_t)tap_param_set[context_sel][index++];
 8004fca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fce:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004fd2:	781a      	ldrb	r2, [r3, #0]
 8004fd4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004fd8:	1c59      	adds	r1, r3, #1
 8004fda:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004fde:	4618      	mov	r0, r3
 8004fe0:	4919      	ldr	r1, [pc, #100]	@ (8005048 <bmi323_context_switch_selection+0x3ec>)
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4403      	add	r3, r0
 8004fec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ff6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ffa:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
        sens_cfg[2].cfg.tap.tap_shock_settling_dur = (uint8_t)tap_param_set[context_sel][index++];
 8004ffe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005002:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005006:	781a      	ldrb	r2, [r3, #0]
 8005008:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005012:	4618      	mov	r0, r3
 8005014:	490c      	ldr	r1, [pc, #48]	@ (8005048 <bmi323_context_switch_selection+0x3ec>)
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4403      	add	r3, r0
 8005020:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800502a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800502e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
        sens_cfg[2].cfg.tap.min_quite_dur_between_taps = (uint8_t)tap_param_set[context_sel][index++];
 8005032:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005036:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800503a:	781a      	ldrb	r2, [r3, #0]
 800503c:	e006      	b.n	800504c <bmi323_context_switch_selection+0x3f0>
 800503e:	bf00      	nop
 8005040:	24000004 	.word	0x24000004
 8005044:	24000024 	.word	0x24000024
 8005048:	24000044 	.word	0x24000044
 800504c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005050:	1c59      	adds	r1, r3, #1
 8005052:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005056:	4618      	mov	r0, r3
 8005058:	49e9      	ldr	r1, [pc, #932]	@ (8005400 <bmi323_context_switch_selection+0x7a4>)
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4403      	add	r3, r0
 8005064:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005068:	b2da      	uxtb	r2, r3
 800506a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800506e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005072:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
        sens_cfg[2].cfg.tap.quite_time_after_gest = (uint8_t)tap_param_set[context_sel][index++];
 8005076:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800507a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800507e:	781a      	ldrb	r2, [r3, #0]
 8005080:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800508a:	4618      	mov	r0, r3
 800508c:	49dc      	ldr	r1, [pc, #880]	@ (8005400 <bmi323_context_switch_selection+0x7a4>)
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4403      	add	r3, r0
 8005098:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050a2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80050a6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

        /* Set step counter configuration */
        index = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[3].type = BMI323_STEP_COUNTER;
 80050b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80050b8:	2205      	movs	r2, #5
 80050ba:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
        sens_cfg[3].cfg.step_counter.watermark_level = step_counter_param_set[context_sel][index++];
 80050be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050c2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80050cc:	1c59      	adds	r1, r3, #1
 80050ce:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80050d2:	4618      	mov	r0, r3
 80050d4:	49cb      	ldr	r1, [pc, #812]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 80050d6:	2316      	movs	r3, #22
 80050d8:	fb02 f303 	mul.w	r3, r2, r3
 80050dc:	4403      	add	r3, r0
 80050de:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80050e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80050ea:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
        sens_cfg[3].cfg.step_counter.reset_counter = step_counter_param_set[context_sel][index++];
 80050ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050f2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80050f6:	781a      	ldrb	r2, [r3, #0]
 80050f8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80050fc:	1c59      	adds	r1, r3, #1
 80050fe:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005102:	4618      	mov	r0, r3
 8005104:	49bf      	ldr	r1, [pc, #764]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 8005106:	2316      	movs	r3, #22
 8005108:	fb02 f303 	mul.w	r3, r2, r3
 800510c:	4403      	add	r3, r0
 800510e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005112:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005116:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800511a:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        sens_cfg[3].cfg.step_counter.env_min_dist_up = step_counter_param_set[context_sel][index++];
 800511e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005122:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005126:	781a      	ldrb	r2, [r3, #0]
 8005128:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800512c:	1c59      	adds	r1, r3, #1
 800512e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005132:	4618      	mov	r0, r3
 8005134:	49b3      	ldr	r1, [pc, #716]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 8005136:	2316      	movs	r3, #22
 8005138:	fb02 f303 	mul.w	r3, r2, r3
 800513c:	4403      	add	r3, r0
 800513e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005142:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005146:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800514a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        sens_cfg[3].cfg.step_counter.env_coef_up = step_counter_param_set[context_sel][index++];
 800514e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005152:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005156:	781a      	ldrb	r2, [r3, #0]
 8005158:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800515c:	1c59      	adds	r1, r3, #1
 800515e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005162:	4618      	mov	r0, r3
 8005164:	49a7      	ldr	r1, [pc, #668]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 8005166:	2316      	movs	r3, #22
 8005168:	fb02 f303 	mul.w	r3, r2, r3
 800516c:	4403      	add	r3, r0
 800516e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005172:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005176:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800517a:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        sens_cfg[3].cfg.step_counter.env_min_dist_down = step_counter_param_set[context_sel][index++];
 800517e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005182:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800518c:	1c59      	adds	r1, r3, #1
 800518e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005192:	4618      	mov	r0, r3
 8005194:	499b      	ldr	r1, [pc, #620]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 8005196:	2316      	movs	r3, #22
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	4403      	add	r3, r0
 800519e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80051a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051a6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80051aa:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        sens_cfg[3].cfg.step_counter.env_coef_down = step_counter_param_set[context_sel][index++];
 80051ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051b2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80051bc:	1c59      	adds	r1, r3, #1
 80051be:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80051c2:	4618      	mov	r0, r3
 80051c4:	498f      	ldr	r1, [pc, #572]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 80051c6:	2316      	movs	r3, #22
 80051c8:	fb02 f303 	mul.w	r3, r2, r3
 80051cc:	4403      	add	r3, r0
 80051ce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80051d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80051da:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        sens_cfg[3].cfg.step_counter.mean_val_decay = step_counter_param_set[context_sel][index++];
 80051de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051e2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80051e6:	781a      	ldrb	r2, [r3, #0]
 80051e8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80051ec:	1c59      	adds	r1, r3, #1
 80051ee:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80051f2:	4618      	mov	r0, r3
 80051f4:	4983      	ldr	r1, [pc, #524]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 80051f6:	2316      	movs	r3, #22
 80051f8:	fb02 f303 	mul.w	r3, r2, r3
 80051fc:	4403      	add	r3, r0
 80051fe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005202:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005206:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800520a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        sens_cfg[3].cfg.step_counter.mean_step_dur = step_counter_param_set[context_sel][index++];
 800520e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005212:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005216:	781a      	ldrb	r2, [r3, #0]
 8005218:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800521c:	1c59      	adds	r1, r3, #1
 800521e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005222:	4618      	mov	r0, r3
 8005224:	4977      	ldr	r1, [pc, #476]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 8005226:	2316      	movs	r3, #22
 8005228:	fb02 f303 	mul.w	r3, r2, r3
 800522c:	4403      	add	r3, r0
 800522e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005232:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005236:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800523a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
        sens_cfg[3].cfg.step_counter.step_buffer_size = step_counter_param_set[context_sel][index++];
 800523e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005242:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005246:	781a      	ldrb	r2, [r3, #0]
 8005248:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800524c:	1c59      	adds	r1, r3, #1
 800524e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005252:	4618      	mov	r0, r3
 8005254:	496b      	ldr	r1, [pc, #428]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 8005256:	2316      	movs	r3, #22
 8005258:	fb02 f303 	mul.w	r3, r2, r3
 800525c:	4403      	add	r3, r0
 800525e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005262:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005266:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800526a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
        sens_cfg[3].cfg.step_counter.filter_cascade_enabled = step_counter_param_set[context_sel][index++];
 800526e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005272:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005276:	781a      	ldrb	r2, [r3, #0]
 8005278:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800527c:	1c59      	adds	r1, r3, #1
 800527e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005282:	4618      	mov	r0, r3
 8005284:	495f      	ldr	r1, [pc, #380]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 8005286:	2316      	movs	r3, #22
 8005288:	fb02 f303 	mul.w	r3, r2, r3
 800528c:	4403      	add	r3, r0
 800528e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005292:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005296:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800529a:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        sens_cfg[3].cfg.step_counter.step_counter_increment = step_counter_param_set[context_sel][index++];
 800529e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052a2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80052a6:	781a      	ldrb	r2, [r3, #0]
 80052a8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80052b2:	4618      	mov	r0, r3
 80052b4:	4953      	ldr	r1, [pc, #332]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 80052b6:	2316      	movs	r3, #22
 80052b8:	fb02 f303 	mul.w	r3, r2, r3
 80052bc:	4403      	add	r3, r0
 80052be:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80052c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052c6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80052ca:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        sens_cfg[3].cfg.step_counter.peak_duration_min_walking = step_counter_param_set[context_sel][index++];
 80052ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052d2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80052dc:	1c59      	adds	r1, r3, #1
 80052de:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80052e2:	4618      	mov	r0, r3
 80052e4:	4947      	ldr	r1, [pc, #284]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 80052e6:	2316      	movs	r3, #22
 80052e8:	fb02 f303 	mul.w	r3, r2, r3
 80052ec:	4403      	add	r3, r0
 80052ee:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80052f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80052fa:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
        sens_cfg[3].cfg.step_counter.peak_duration_min_running = step_counter_param_set[context_sel][index++];
 80052fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005302:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005306:	781a      	ldrb	r2, [r3, #0]
 8005308:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800530c:	1c59      	adds	r1, r3, #1
 800530e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005312:	4618      	mov	r0, r3
 8005314:	493b      	ldr	r1, [pc, #236]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 8005316:	2316      	movs	r3, #22
 8005318:	fb02 f303 	mul.w	r3, r2, r3
 800531c:	4403      	add	r3, r0
 800531e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005322:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005326:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800532a:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
        sens_cfg[3].cfg.step_counter.activity_detection_factor = step_counter_param_set[context_sel][index++];
 800532e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005332:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005336:	781a      	ldrb	r2, [r3, #0]
 8005338:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800533c:	1c59      	adds	r1, r3, #1
 800533e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005342:	4618      	mov	r0, r3
 8005344:	492f      	ldr	r1, [pc, #188]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 8005346:	2316      	movs	r3, #22
 8005348:	fb02 f303 	mul.w	r3, r2, r3
 800534c:	4403      	add	r3, r0
 800534e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005352:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005356:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800535a:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
        sens_cfg[3].cfg.step_counter.activity_detection_thres = step_counter_param_set[context_sel][index++];
 800535e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005362:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005366:	781a      	ldrb	r2, [r3, #0]
 8005368:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800536c:	1c59      	adds	r1, r3, #1
 800536e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005372:	4618      	mov	r0, r3
 8005374:	4923      	ldr	r1, [pc, #140]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 8005376:	2316      	movs	r3, #22
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	4403      	add	r3, r0
 800537e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005382:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005386:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800538a:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
        sens_cfg[3].cfg.step_counter.step_duration_max = step_counter_param_set[context_sel][index++];
 800538e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005392:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005396:	781a      	ldrb	r2, [r3, #0]
 8005398:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800539c:	1c59      	adds	r1, r3, #1
 800539e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80053a2:	4618      	mov	r0, r3
 80053a4:	4917      	ldr	r1, [pc, #92]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 80053a6:	2316      	movs	r3, #22
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
 80053ac:	4403      	add	r3, r0
 80053ae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80053b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80053ba:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
        sens_cfg[3].cfg.step_counter.step_duration_window = step_counter_param_set[context_sel][index++];
 80053be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053c2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80053cc:	1c59      	adds	r1, r3, #1
 80053ce:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80053d2:	4618      	mov	r0, r3
 80053d4:	490b      	ldr	r1, [pc, #44]	@ (8005404 <bmi323_context_switch_selection+0x7a8>)
 80053d6:	2316      	movs	r3, #22
 80053d8:	fb02 f303 	mul.w	r3, r2, r3
 80053dc:	4403      	add	r3, r0
 80053de:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80053e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80053ea:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        sens_cfg[3].cfg.step_counter.step_duration_pp_enabled = step_counter_param_set[context_sel][index++];
 80053ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053f2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80053f6:	781a      	ldrb	r2, [r3, #0]
 80053f8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80053fc:	1c59      	adds	r1, r3, #1
 80053fe:	e003      	b.n	8005408 <bmi323_context_switch_selection+0x7ac>
 8005400:	24000044 	.word	0x24000044
 8005404:	24000080 	.word	0x24000080
 8005408:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800540c:	4618      	mov	r0, r3
 800540e:	49e1      	ldr	r1, [pc, #900]	@ (8005794 <bmi323_context_switch_selection+0xb38>)
 8005410:	2316      	movs	r3, #22
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	4403      	add	r3, r0
 8005418:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800541c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005420:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005424:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        sens_cfg[3].cfg.step_counter.step_duration_thres = step_counter_param_set[context_sel][index++];
 8005428:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800542c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005430:	781a      	ldrb	r2, [r3, #0]
 8005432:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005436:	1c59      	adds	r1, r3, #1
 8005438:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800543c:	4618      	mov	r0, r3
 800543e:	49d5      	ldr	r1, [pc, #852]	@ (8005794 <bmi323_context_switch_selection+0xb38>)
 8005440:	2316      	movs	r3, #22
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	4403      	add	r3, r0
 8005448:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800544c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005450:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005454:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
        sens_cfg[3].cfg.step_counter.mean_crossing_pp_enabled = step_counter_param_set[context_sel][index++];
 8005458:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800545c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005466:	1c59      	adds	r1, r3, #1
 8005468:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800546c:	4618      	mov	r0, r3
 800546e:	49c9      	ldr	r1, [pc, #804]	@ (8005794 <bmi323_context_switch_selection+0xb38>)
 8005470:	2316      	movs	r3, #22
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	4403      	add	r3, r0
 8005478:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800547c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005480:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005484:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        sens_cfg[3].cfg.step_counter.mcr_threshold = step_counter_param_set[context_sel][index++];
 8005488:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800548c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005496:	1c59      	adds	r1, r3, #1
 8005498:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800549c:	4618      	mov	r0, r3
 800549e:	49bd      	ldr	r1, [pc, #756]	@ (8005794 <bmi323_context_switch_selection+0xb38>)
 80054a0:	2316      	movs	r3, #22
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	4403      	add	r3, r0
 80054a8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80054ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80054b4:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
        sens_cfg[3].cfg.step_counter.sc_12_res = step_counter_param_set[context_sel][index++];
 80054b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054bc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80054c0:	781a      	ldrb	r2, [r3, #0]
 80054c2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80054c6:	1c59      	adds	r1, r3, #1
 80054c8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80054cc:	4618      	mov	r0, r3
 80054ce:	49b1      	ldr	r1, [pc, #708]	@ (8005794 <bmi323_context_switch_selection+0xb38>)
 80054d0:	2316      	movs	r3, #22
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	4403      	add	r3, r0
 80054d8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80054dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80054e4:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6

        /* Set significant motion configuration */
        index = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[4].type = BMI323_SIG_MOTION;
 80054ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054f2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
        sens_cfg[4].cfg.sig_motion.block_size = sig_motion_param_set[context_sel][index++];
 80054fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005500:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800550a:	1c59      	adds	r1, r3, #1
 800550c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005510:	4618      	mov	r0, r3
 8005512:	49a1      	ldr	r1, [pc, #644]	@ (8005798 <bmi323_context_switch_selection+0xb3c>)
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	4403      	add	r3, r0
 800551c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005520:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005524:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005528:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        sens_cfg[4].cfg.sig_motion.peak_2_peak_min = sig_motion_param_set[context_sel][index++];
 800552c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005530:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800553a:	1c59      	adds	r1, r3, #1
 800553c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005540:	4618      	mov	r0, r3
 8005542:	4995      	ldr	r1, [pc, #596]	@ (8005798 <bmi323_context_switch_selection+0xb3c>)
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	4403      	add	r3, r0
 800554c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005550:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005554:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005558:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
        sens_cfg[4].cfg.sig_motion.mcr_min = (uint8_t)sig_motion_param_set[context_sel][index++];
 800555c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005560:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005564:	781a      	ldrb	r2, [r3, #0]
 8005566:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800556a:	1c59      	adds	r1, r3, #1
 800556c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005570:	4618      	mov	r0, r3
 8005572:	4989      	ldr	r1, [pc, #548]	@ (8005798 <bmi323_context_switch_selection+0xb3c>)
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	4403      	add	r3, r0
 800557c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005586:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800558a:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
        sens_cfg[4].cfg.sig_motion.peak_2_peak_max = sig_motion_param_set[context_sel][index++];
 800558e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005592:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800559c:	1c59      	adds	r1, r3, #1
 800559e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80055a2:	4618      	mov	r0, r3
 80055a4:	497c      	ldr	r1, [pc, #496]	@ (8005798 <bmi323_context_switch_selection+0xb3c>)
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	4403      	add	r3, r0
 80055ae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80055b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80055ba:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        sens_cfg[4].cfg.sig_motion.mcr_max = (uint8_t)sig_motion_param_set[context_sel][index++];
 80055be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055c2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80055c6:	781a      	ldrb	r2, [r3, #0]
 80055c8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80055cc:	1c59      	adds	r1, r3, #1
 80055ce:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80055d2:	4618      	mov	r0, r3
 80055d4:	4970      	ldr	r1, [pc, #448]	@ (8005798 <bmi323_context_switch_selection+0xb3c>)
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	4403      	add	r3, r0
 80055de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80055ec:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

        /* Set orientation configuration */
        index = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[5].type = BMI323_ORIENTATION;
 80055f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055fa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80055fe:	2207      	movs	r2, #7
 8005600:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        sens_cfg[5].cfg.orientation.ud_en = (uint8_t)orientation_param_set[context_sel][index++];
 8005604:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005608:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005612:	1c59      	adds	r1, r3, #1
 8005614:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005618:	4618      	mov	r0, r3
 800561a:	4960      	ldr	r1, [pc, #384]	@ (800579c <bmi323_context_switch_selection+0xb40>)
 800561c:	4613      	mov	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	4403      	add	r3, r0
 8005624:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800562e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005632:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        sens_cfg[5].cfg.orientation.mode = (uint8_t)orientation_param_set[context_sel][index++];
 8005636:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800563a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800564a:	4618      	mov	r0, r3
 800564c:	4953      	ldr	r1, [pc, #332]	@ (800579c <bmi323_context_switch_selection+0xb40>)
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	4403      	add	r3, r0
 8005656:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005660:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005664:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
        sens_cfg[5].cfg.orientation.blocking = (uint8_t)orientation_param_set[context_sel][index++];
 8005668:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800566c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005676:	1c59      	adds	r1, r3, #1
 8005678:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800567c:	4618      	mov	r0, r3
 800567e:	4947      	ldr	r1, [pc, #284]	@ (800579c <bmi323_context_switch_selection+0xb40>)
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	4403      	add	r3, r0
 8005688:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005692:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005696:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        sens_cfg[5].cfg.orientation.theta = (uint8_t)orientation_param_set[context_sel][index++];
 800569a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800569e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80056a8:	1c59      	adds	r1, r3, #1
 80056aa:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80056ae:	4618      	mov	r0, r3
 80056b0:	493a      	ldr	r1, [pc, #232]	@ (800579c <bmi323_context_switch_selection+0xb40>)
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	4403      	add	r3, r0
 80056ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80056c8:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        sens_cfg[5].cfg.orientation.hold_time = (uint8_t)orientation_param_set[context_sel][index++];
 80056cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056d0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80056da:	1c59      	adds	r1, r3, #1
 80056dc:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80056e0:	4618      	mov	r0, r3
 80056e2:	492e      	ldr	r1, [pc, #184]	@ (800579c <bmi323_context_switch_selection+0xb40>)
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	4403      	add	r3, r0
 80056ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80056fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        sens_cfg[5].cfg.orientation.slope_thres = (uint8_t)orientation_param_set[context_sel][index++];
 80056fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005702:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800570c:	1c59      	adds	r1, r3, #1
 800570e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005712:	4618      	mov	r0, r3
 8005714:	4921      	ldr	r1, [pc, #132]	@ (800579c <bmi323_context_switch_selection+0xb40>)
 8005716:	4613      	mov	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	4403      	add	r3, r0
 800571e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005728:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800572c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
        sens_cfg[5].cfg.orientation.hysteresis = (uint8_t)orientation_param_set[context_sel][index++];
 8005730:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005734:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005738:	781a      	ldrb	r2, [r3, #0]
 800573a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800573e:	1c59      	adds	r1, r3, #1
 8005740:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005744:	4618      	mov	r0, r3
 8005746:	4915      	ldr	r1, [pc, #84]	@ (800579c <bmi323_context_switch_selection+0xb40>)
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	1a9b      	subs	r3, r3, r2
 800574e:	4403      	add	r3, r0
 8005750:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005754:	b2da      	uxtb	r2, r3
 8005756:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800575a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800575e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed

        /* Set the context configurations */
        rslt = bmi323_set_sensor_config(sens_cfg, BMI323_MAX_FEATURE, dev);
 8005762:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005766:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800576a:	f107 0008 	add.w	r0, r7, #8
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	2106      	movs	r1, #6
 8005772:	f7ff fa49 	bl	8004c08 <bmi323_set_sensor_config>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800577c:	e002      	b.n	8005784 <bmi323_context_switch_selection+0xb28>
    }
    else
    {
        rslt = BMI323_E_INVALID_CONTEXT_SEL;
 800577e:	23f3      	movs	r3, #243	@ 0xf3
 8005780:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    }

    return rslt;
 8005784:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8005788:	4618      	mov	r0, r3
 800578a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	24000080 	.word	0x24000080
 8005798:	24000104 	.word	0x24000104
 800579c:	24000124 	.word	0x24000124

080057a0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <null_ptr_check+0x26>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d007      	beq.n	80057c6 <null_ptr_check+0x26>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <null_ptr_check+0x26>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d102      	bne.n	80057cc <null_ptr_check+0x2c>
    {
        rslt = BMI323_E_NULL_PTR;
 80057c6:	23ff      	movs	r3, #255	@ 0xff
 80057c8:	73fb      	strb	r3, [r7, #15]
 80057ca:	e001      	b.n	80057d0 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI323_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80057d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <bmi3_interface_init>:
float gyro_lsb_to_dps_2000(int16_t val) {
    return val / 16.4f;
}

int8_t bmi3_interface_init(struct bmi3_dev *bmi, uint8_t intf)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMI3_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	73fb      	strb	r3, [r7, #15]

		bmi->intf = BMI3_SPI_INTF;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	725a      	strb	r2, [r3, #9]
		bmi->read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005824 <bmi3_interface_init+0x44>)
 80057fa:	611a      	str	r2, [r3, #16]
		bmi->write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005828 <bmi3_interface_init+0x48>)
 8005800:	615a      	str	r2, [r3, #20]

	/* Assign device address to interface pointer */
	bmi->intf_ptr = &bmi323_dev_addr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a09      	ldr	r2, [pc, #36]	@ (800582c <bmi3_interface_init+0x4c>)
 8005806:	605a      	str	r2, [r3, #4]

	/* Configure delay in microseconds */
	bmi->delay_us = bst_delay_us;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a09      	ldr	r2, [pc, #36]	@ (8005830 <bmi3_interface_init+0x50>)
 800580c:	619a      	str	r2, [r3, #24]

	/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
	bmi->read_write_len = READ_WRITE_LEN;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	81da      	strh	r2, [r3, #14]

	return rslt;
 8005814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	08005a31 	.word	0x08005a31
 8005828:	08005ab1 	.word	0x08005ab1
 800582c:	240007fc 	.word	0x240007fc
 8005830:	080059f9 	.word	0x080059f9

08005834 <Init_BMI323>:

int8_t Init_BMI323()
{ // START INIT
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	71fb      	strb	r3, [r7, #7]
	uint8_t chipid;


	rslt = bmi3_interface_init(dev, BMI3_SPI_INTF);
 800583e:	4b24      	ldr	r3, [pc, #144]	@ (80058d0 <Init_BMI323+0x9c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff ffcb 	bl	80057e0 <bmi3_interface_init>
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]

	bst_delay_us(100000, dev->intf_ptr);
 800584e:	4b20      	ldr	r3, [pc, #128]	@ (80058d0 <Init_BMI323+0x9c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4619      	mov	r1, r3
 8005856:	481f      	ldr	r0, [pc, #124]	@ (80058d4 <Init_BMI323+0xa0>)
 8005858:	f000 f8ce 	bl	80059f8 <bst_delay_us>

	/* Initialize bmi323. */
	rslt = bmi323_init(dev);
 800585c:	4b1c      	ldr	r3, [pc, #112]	@ (80058d0 <Init_BMI323+0x9c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff f9a1 	bl	8004ba8 <bmi323_init>
 8005866:	4603      	mov	r3, r0
 8005868:	71fb      	strb	r3, [r7, #7]

	if (rslt != BMI3_OK)
 800586a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <Init_BMI323+0x50>
	{
		printf("bmi323_init() failed, error code: %d\r\n", rslt);
 8005872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005876:	4619      	mov	r1, r3
 8005878:	4817      	ldr	r0, [pc, #92]	@ (80058d8 <Init_BMI323+0xa4>)
 800587a:	f00e fe9b 	bl	80145b4 <iprintf>
		return rslt;
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	e021      	b.n	80058c8 <Init_BMI323+0x94>
	}

	rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, &chipid, 1, dev);
 8005884:	4b12      	ldr	r3, [pc, #72]	@ (80058d0 <Init_BMI323+0x9c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	1db9      	adds	r1, r7, #6
 800588a:	2201      	movs	r2, #1
 800588c:	2000      	movs	r0, #0
 800588e:	f7fc fa46 	bl	8001d1e <bmi3_get_regs>
 8005892:	4603      	mov	r3, r0
 8005894:	71fb      	strb	r3, [r7, #7]
	if (rslt != BMI3_OK)
 8005896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d008      	beq.n	80058b0 <Init_BMI323+0x7c>
	{
		printf("read chip ID failed, error code: %d\r\n", rslt);
 800589e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a2:	4619      	mov	r1, r3
 80058a4:	480d      	ldr	r0, [pc, #52]	@ (80058dc <Init_BMI323+0xa8>)
 80058a6:	f00e fe85 	bl	80145b4 <iprintf>
		return rslt;
 80058aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ae:	e00b      	b.n	80058c8 <Init_BMI323+0x94>
	//printf("Result of self-test error is %d\n", st_result_status.self_test_err_rslt);
	//printf("Result of ST_result is %d\n", st_result_status.self_test_rslt);
#endif

	#if defined(ACC_GYRO)
	Open_BMI323_ACC(dev);
 80058b0:	4b07      	ldr	r3, [pc, #28]	@ (80058d0 <Init_BMI323+0x9c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 f813 	bl	80058e0 <Open_BMI323_ACC>
	Open_BMI323_GYRO(dev);
 80058ba:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <Init_BMI323+0x9c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f854 	bl	800596c <Open_BMI323_GYRO>
	#endif

	return rslt;
 80058c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	24000150 	.word	0x24000150
 80058d4:	000186a0 	.word	0x000186a0
 80058d8:	08017e44 	.word	0x08017e44
 80058dc:	08017e6c 	.word	0x08017e6c

080058e0 <Open_BMI323_ACC>:

int8_t Open_BMI323_ACC()
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	@ 0x30
 80058e4:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 80058ec:	463b      	mov	r3, r7
 80058ee:	222e      	movs	r2, #46	@ 0x2e
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f00e ffc6 	bl	8014884 <memset>

	config.type = BMI3_ACCEL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	703b      	strb	r3, [r7, #0]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 80058fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005968 <Open_BMI323_ACC+0x88>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	463b      	mov	r3, r7
 8005902:	2101      	movs	r1, #1
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff f994 	bl	8004c32 <bmi323_get_sensor_config>
 800590a:	4603      	mov	r3, r0
 800590c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (rslt == BMI3_OK)
 8005910:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005914:	2b00      	cmp	r3, #0
 8005916:	d121      	bne.n	800595c <Open_BMI323_ACC+0x7c>
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_LOW_PWR;
	#else
		/* The Accel bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR. */
		config.cfg.acc.bwp = BMI3_ACC_BW_ODR_HALF;
 8005918:	2300      	movs	r3, #0
 800591a:	70fb      	strb	r3, [r7, #3]

		/* Set number of average samples for accel. */
		config.cfg.acc.avg_num = BMI3_ACC_AVG4;
 800591c:	2302      	movs	r3, #2
 800591e:	71bb      	strb	r3, [r7, #6]

		/* Enable the accel mode where averaging of samples
		* will be done based on above set bandwidth and ODR.
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_HIGH_PERF;
 8005920:	2307      	movs	r3, #7
 8005922:	713b      	strb	r3, [r7, #4]
	#endif


		config.cfg.acc.odr      = BMI3_ACC_ODR_50HZ;
 8005924:	2307      	movs	r3, #7
 8005926:	70bb      	strb	r3, [r7, #2]

		/* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
		config.cfg.acc.range     = BMI3_ACC_RANGE_4G;
 8005928:	2301      	movs	r3, #1
 800592a:	717b      	strb	r3, [r7, #5]

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 800592c:	4b0e      	ldr	r3, [pc, #56]	@ (8005968 <Open_BMI323_ACC+0x88>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	463b      	mov	r3, r7
 8005932:	2101      	movs	r1, #1
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff f967 	bl	8004c08 <bmi323_set_sensor_config>
 800593a:	4603      	mov	r3, r0
 800593c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (rslt != BMI3_OK)
 8005940:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <Open_BMI323_ACC+0x7c>
		else
		{
			//printf("Open ACC set successfully\r\n");

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005948:	4b07      	ldr	r3, [pc, #28]	@ (8005968 <Open_BMI323_ACC+0x88>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	463b      	mov	r3, r7
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff f96e 	bl	8004c32 <bmi323_get_sensor_config>
 8005956:	4603      	mov	r3, r0
 8005958:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				//printf("avg_num = %d\r\n", config.cfg.acc.avg_num);
			}
		}
	}

	return rslt;
 800595c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005960:	4618      	mov	r0, r3
 8005962:	3730      	adds	r7, #48	@ 0x30
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	24000150 	.word	0x24000150

0800596c <Open_BMI323_GYRO>:

	return rslt;
}

int8_t Open_BMI323_GYRO()
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08c      	sub	sp, #48	@ 0x30
 8005970:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 8005978:	463b      	mov	r3, r7
 800597a:	222e      	movs	r2, #46	@ 0x2e
 800597c:	2100      	movs	r1, #0
 800597e:	4618      	mov	r0, r3
 8005980:	f00e ff80 	bl	8014884 <memset>

	config.type = BMI3_GYRO;
 8005984:	2301      	movs	r3, #1
 8005986:	703b      	strb	r3, [r7, #0]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005988:	4b1a      	ldr	r3, [pc, #104]	@ (80059f4 <Open_BMI323_GYRO+0x88>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	463b      	mov	r3, r7
 800598e:	2101      	movs	r1, #1
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff f94e 	bl	8004c32 <bmi323_get_sensor_config>
 8005996:	4603      	mov	r3, r0
 8005998:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (rslt == BMI3_OK)
 800599c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d121      	bne.n	80059e8 <Open_BMI323_GYRO+0x7c>
	{
		config.cfg.gyr.odr = BMI3_GYR_ODR_50HZ;
 80059a4:	2307      	movs	r3, #7
 80059a6:	70bb      	strb	r3, [r7, #2]
		/* Gyroscope Angular Rate Measurement Range. By default the range is 2000dps. */
		config.cfg.gyr.range = BMI3_GYR_RANGE_2000DPS;
 80059a8:	2304      	movs	r3, #4
 80059aa:	717b      	strb	r3, [r7, #5]
		/*	The Gyroscope bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR
		*	Value	Name	  Description
		*	  0   odr_half	 BW = gyr_odr/2
		*	  1  odr_quarter BW = gyr_odr/4
		*/
		config.cfg.gyr.bwp = BMI3_GYR_BW_ODR_HALF;
 80059ac:	2300      	movs	r3, #0
 80059ae:	70fb      	strb	r3, [r7, #3]
		/* By default the gyro is disabled. Gyro is enabled by selecting the mode. */
		config.cfg.gyr.gyr_mode = BMI3_GYR_MODE_HIGH_PERF;
 80059b0:	2307      	movs	r3, #7
 80059b2:	713b      	strb	r3, [r7, #4]
		*  011     avg_8   Averaging of 8 samples
		*  100     avg_16  Averaging of 16 samples
		*  101     avg_32  Averaging of 32 samples
		*  110     avg_64  Averaging of 64 samples
		*/
		config.cfg.gyr.avg_num = BMI3_GYR_AVG4;
 80059b4:	2302      	movs	r3, #2
 80059b6:	71bb      	strb	r3, [r7, #6]
	#endif

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80059b8:	4b0e      	ldr	r3, [pc, #56]	@ (80059f4 <Open_BMI323_GYRO+0x88>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	463b      	mov	r3, r7
 80059be:	2101      	movs	r1, #1
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff f921 	bl	8004c08 <bmi323_set_sensor_config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (rslt != BMI3_OK)
 80059cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <Open_BMI323_GYRO+0x7c>
		else
		{
			//printf("Open GYRO successfully\r\n");

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 80059d4:	4b07      	ldr	r3, [pc, #28]	@ (80059f4 <Open_BMI323_GYRO+0x88>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	463b      	mov	r3, r7
 80059da:	2101      	movs	r1, #1
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff f928 	bl	8004c32 <bmi323_get_sensor_config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				//printf("avg_num = %d\r\n", config.cfg.gyr.avg_num);
			}
		}
	}

	return rslt;
 80059e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3730      	adds	r7, #48	@ 0x30
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	24000150 	.word	0x24000150

080059f8 <bst_delay_us>:

extern SPI_HandleTypeDef hspi1;


void bst_delay_us(uint32_t period, void *intf_ptr)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
//	HAL_Delay(period/1000);
	uint32_t i;

	while(period--)
 8005a02:	e008      	b.n	8005a16 <bst_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e002      	b.n	8005a10 <bst_delay_us+0x18>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b53      	cmp	r3, #83	@ 0x53
 8005a14:	d9f9      	bls.n	8005a0a <bst_delay_us+0x12>
	while(period--)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	1e5a      	subs	r2, r3, #1
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f1      	bne.n	8005a04 <bst_delay_us+0xc>
		{
			;
		}
	}
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
	...

08005a30 <SensorAPI_SPIx_Read>:

#if defined(USE_BOSCH_SENSOR_API)


int8_t SensorAPI_SPIx_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	4b14      	ldr	r3, [pc, #80]	@ (8005a9c <SensorAPI_SPIx_Read+0x6c>)
 8005a4a:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2110      	movs	r1, #16
 8005a50:	4813      	ldr	r0, [pc, #76]	@ (8005aa0 <SensorAPI_SPIx_Read+0x70>)
 8005a52:	f003 fe2f 	bl	80096b4 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, ReadNumbr+1, BUS_TIMEOUT); // timeout 1000msec;
    HAL_SPI_TransmitReceive(&hspi1, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a62:	9200      	str	r2, [sp, #0]
 8005a64:	4a0f      	ldr	r2, [pc, #60]	@ (8005aa4 <SensorAPI_SPIx_Read+0x74>)
 8005a66:	490d      	ldr	r1, [pc, #52]	@ (8005a9c <SensorAPI_SPIx_Read+0x6c>)
 8005a68:	480f      	ldr	r0, [pc, #60]	@ (8005aa8 <SensorAPI_SPIx_Read+0x78>)
 8005a6a:	f00a f8e1 	bl	800fc30 <HAL_SPI_TransmitReceive>
    while(hspi1.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8005a6e:	bf00      	nop
 8005a70:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa8 <SensorAPI_SPIx_Read+0x78>)
 8005a72:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d0f9      	beq.n	8005a70 <SensorAPI_SPIx_Read+0x40>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_SET); // NSS high
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	2110      	movs	r1, #16
 8005a80:	4807      	ldr	r0, [pc, #28]	@ (8005aa0 <SensorAPI_SPIx_Read+0x70>)
 8005a82:	f003 fe17 	bl	80096b4 <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 8005a86:	4b09      	ldr	r3, [pc, #36]	@ (8005aac <SensorAPI_SPIx_Read+0x7c>)
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	68b8      	ldr	r0, [r7, #8]
 8005a8e:	f00e ff78 	bl	8014982 <memcpy>

    return 0;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	24000800 	.word	0x24000800
 8005aa0:	58020000 	.word	0x58020000
 8005aa4:	24000a00 	.word	0x24000a00
 8005aa8:	240015bc 	.word	0x240015bc
 8005aac:	24000a01 	.word	0x24000a01

08005ab0 <SensorAPI_SPIx_Write>:

int8_t SensorAPI_SPIx_Write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	607a      	str	r2, [r7, #4]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	4b13      	ldr	r3, [pc, #76]	@ (8005b18 <SensorAPI_SPIx_Write+0x68>)
 8005aca:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	4812      	ldr	r0, [pc, #72]	@ (8005b1c <SensorAPI_SPIx_Write+0x6c>)
 8005ad2:	f00e ff56 	bl	8014982 <memcpy>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2110      	movs	r1, #16
 8005ada:	4811      	ldr	r0, [pc, #68]	@ (8005b20 <SensorAPI_SPIx_Write+0x70>)
 8005adc:	f003 fdea 	bl	80096b4 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, WriteNumbr+1, BUS_TIMEOUT); // send register address + write data
    HAL_SPI_Transmit(&hspi1, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005aec:	490a      	ldr	r1, [pc, #40]	@ (8005b18 <SensorAPI_SPIx_Write+0x68>)
 8005aee:	480d      	ldr	r0, [pc, #52]	@ (8005b24 <SensorAPI_SPIx_Write+0x74>)
 8005af0:	f009 fc3e 	bl	800f370 <HAL_SPI_Transmit>
    while(hspi1.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8005af4:	bf00      	nop
 8005af6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b24 <SensorAPI_SPIx_Write+0x74>)
 8005af8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d0f9      	beq.n	8005af6 <SensorAPI_SPIx_Write+0x46>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_SET); // NSS high
 8005b02:	2201      	movs	r2, #1
 8005b04:	2110      	movs	r1, #16
 8005b06:	4806      	ldr	r0, [pc, #24]	@ (8005b20 <SensorAPI_SPIx_Write+0x70>)
 8005b08:	f003 fdd4 	bl	80096b4 <HAL_GPIO_WritePin>

    return 0;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	24000800 	.word	0x24000800
 8005b1c:	24000801 	.word	0x24000801
 8005b20:	58020000 	.word	0x58020000
 8005b24:	240015bc 	.word	0x240015bc

08005b28 <bno055_init>:
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	23ff      	movs	r3, #255	@ 0xff
 8005b32:	73fb      	strb	r3, [r7, #15]
 8005b34:	2300      	movs	r3, #0
 8005b36:	73bb      	strb	r3, [r7, #14]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	737b      	strb	r3, [r7, #13]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	813b      	strh	r3, [r7, #8]
 8005b40:	4a58      	ldr	r2, [pc, #352]	@ (8005ca4 <bno055_init+0x17c>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	4b57      	ldr	r3, [pc, #348]	@ (8005ca4 <bno055_init+0x17c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68dc      	ldr	r4, [r3, #12]
 8005b4c:	4b55      	ldr	r3, [pc, #340]	@ (8005ca4 <bno055_init+0x17c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	7a58      	ldrb	r0, [r3, #9]
 8005b52:	f107 020d 	add.w	r2, r7, #13
 8005b56:	2301      	movs	r3, #1
 8005b58:	2107      	movs	r1, #7
 8005b5a:	47a0      	blx	r4
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]
 8005b60:	4b50      	ldr	r3, [pc, #320]	@ (8005ca4 <bno055_init+0x17c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691c      	ldr	r4, [r3, #16]
 8005b66:	4b4f      	ldr	r3, [pc, #316]	@ (8005ca4 <bno055_init+0x17c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	7a58      	ldrb	r0, [r3, #9]
 8005b6c:	f107 020e 	add.w	r2, r7, #14
 8005b70:	2301      	movs	r3, #1
 8005b72:	2100      	movs	r1, #0
 8005b74:	47a0      	blx	r4
 8005b76:	4603      	mov	r3, r0
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	73fb      	strb	r3, [r7, #15]
 8005b82:	4b48      	ldr	r3, [pc, #288]	@ (8005ca4 <bno055_init+0x17c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	7bba      	ldrb	r2, [r7, #14]
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	4b46      	ldr	r3, [pc, #280]	@ (8005ca4 <bno055_init+0x17c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691c      	ldr	r4, [r3, #16]
 8005b90:	4b44      	ldr	r3, [pc, #272]	@ (8005ca4 <bno055_init+0x17c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	7a58      	ldrb	r0, [r3, #9]
 8005b96:	f107 020e 	add.w	r2, r7, #14
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	47a0      	blx	r4
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	73fb      	strb	r3, [r7, #15]
 8005bac:	4b3d      	ldr	r3, [pc, #244]	@ (8005ca4 <bno055_init+0x17c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	7bba      	ldrb	r2, [r7, #14]
 8005bb2:	715a      	strb	r2, [r3, #5]
 8005bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ca4 <bno055_init+0x17c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691c      	ldr	r4, [r3, #16]
 8005bba:	4b3a      	ldr	r3, [pc, #232]	@ (8005ca4 <bno055_init+0x17c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	7a58      	ldrb	r0, [r3, #9]
 8005bc0:	f107 020e 	add.w	r2, r7, #14
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	47a0      	blx	r4
 8005bca:	4603      	mov	r3, r0
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	73fb      	strb	r3, [r7, #15]
 8005bd6:	4b33      	ldr	r3, [pc, #204]	@ (8005ca4 <bno055_init+0x17c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	7bba      	ldrb	r2, [r7, #14]
 8005bdc:	719a      	strb	r2, [r3, #6]
 8005bde:	4b31      	ldr	r3, [pc, #196]	@ (8005ca4 <bno055_init+0x17c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691c      	ldr	r4, [r3, #16]
 8005be4:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca4 <bno055_init+0x17c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	7a58      	ldrb	r0, [r3, #9]
 8005bea:	f107 020e 	add.w	r2, r7, #14
 8005bee:	2301      	movs	r3, #1
 8005bf0:	2103      	movs	r1, #3
 8005bf2:	47a0      	blx	r4
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	73fb      	strb	r3, [r7, #15]
 8005c00:	4b28      	ldr	r3, [pc, #160]	@ (8005ca4 <bno055_init+0x17c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	7bba      	ldrb	r2, [r7, #14]
 8005c06:	71da      	strb	r2, [r3, #7]
 8005c08:	4b26      	ldr	r3, [pc, #152]	@ (8005ca4 <bno055_init+0x17c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691c      	ldr	r4, [r3, #16]
 8005c0e:	4b25      	ldr	r3, [pc, #148]	@ (8005ca4 <bno055_init+0x17c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	7a58      	ldrb	r0, [r3, #9]
 8005c14:	f107 020e 	add.w	r2, r7, #14
 8005c18:	2301      	movs	r3, #1
 8005c1a:	2106      	movs	r1, #6
 8005c1c:	47a0      	blx	r4
 8005c1e:	4603      	mov	r3, r0
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	4413      	add	r3, r2
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	73fb      	strb	r3, [r7, #15]
 8005c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca4 <bno055_init+0x17c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	7bba      	ldrb	r2, [r7, #14]
 8005c30:	721a      	strb	r2, [r3, #8]
 8005c32:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca4 <bno055_init+0x17c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691c      	ldr	r4, [r3, #16]
 8005c38:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca4 <bno055_init+0x17c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	7a58      	ldrb	r0, [r3, #9]
 8005c3e:	f107 0208 	add.w	r2, r7, #8
 8005c42:	2302      	movs	r3, #2
 8005c44:	2104      	movs	r1, #4
 8005c46:	47a0      	blx	r4
 8005c48:	4603      	mov	r3, r0
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	4413      	add	r3, r2
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	73fb      	strb	r3, [r7, #15]
 8005c54:	7a3b      	ldrb	r3, [r7, #8]
 8005c56:	723b      	strb	r3, [r7, #8]
 8005c58:	7a7b      	ldrb	r3, [r7, #9]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	7a3b      	ldrb	r3, [r7, #8]
 8005c60:	4619      	mov	r1, r3
 8005c62:	4b10      	ldr	r3, [pc, #64]	@ (8005ca4 <bno055_init+0x17c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	b292      	uxth	r2, r2
 8005c6a:	805a      	strh	r2, [r3, #2]
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca4 <bno055_init+0x17c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691c      	ldr	r4, [r3, #16]
 8005c72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <bno055_init+0x17c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	7a58      	ldrb	r0, [r3, #9]
 8005c78:	f107 020e 	add.w	r2, r7, #14
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	2107      	movs	r1, #7
 8005c80:	47a0      	blx	r4
 8005c82:	4603      	mov	r3, r0
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	4413      	add	r3, r2
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	73fb      	strb	r3, [r7, #15]
 8005c8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ca4 <bno055_init+0x17c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	7bba      	ldrb	r2, [r7, #14]
 8005c94:	711a      	strb	r2, [r3, #4]
 8005c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd90      	pop	{r4, r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	24001200 	.word	0x24001200

08005ca8 <bno055_write_register>:
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	6039      	str	r1, [r7, #0]
 8005cb2:	71fb      	strb	r3, [r7, #7]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71bb      	strb	r3, [r7, #6]
 8005cb8:	23ff      	movs	r3, #255	@ 0xff
 8005cba:	73fb      	strb	r3, [r7, #15]
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <bno055_write_register+0x48>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <bno055_write_register+0x22>
 8005cc4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8005cc8:	e00d      	b.n	8005ce6 <bno055_write_register+0x3e>
 8005cca:	4b09      	ldr	r3, [pc, #36]	@ (8005cf0 <bno055_write_register+0x48>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68dc      	ldr	r4, [r3, #12]
 8005cd0:	4b07      	ldr	r3, [pc, #28]	@ (8005cf0 <bno055_write_register+0x48>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	7a58      	ldrb	r0, [r3, #9]
 8005cd6:	79bb      	ldrb	r3, [r7, #6]
 8005cd8:	79f9      	ldrb	r1, [r7, #7]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	47a0      	blx	r4
 8005cde:	4603      	mov	r3, r0
 8005ce0:	73fb      	strb	r3, [r7, #15]
 8005ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd90      	pop	{r4, r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	24001200 	.word	0x24001200

08005cf4 <bno055_write_page_id>:
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71fb      	strb	r3, [r7, #7]
 8005cfe:	23ff      	movs	r3, #255	@ 0xff
 8005d00:	73fb      	strb	r3, [r7, #15]
 8005d02:	2300      	movs	r3, #0
 8005d04:	73bb      	strb	r3, [r7, #14]
 8005d06:	4b1e      	ldr	r3, [pc, #120]	@ (8005d80 <bno055_write_page_id+0x8c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d102      	bne.n	8005d14 <bno055_write_page_id+0x20>
 8005d0e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8005d12:	e030      	b.n	8005d76 <bno055_write_page_id+0x82>
 8005d14:	4b1a      	ldr	r3, [pc, #104]	@ (8005d80 <bno055_write_page_id+0x8c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691c      	ldr	r4, [r3, #16]
 8005d1a:	4b19      	ldr	r3, [pc, #100]	@ (8005d80 <bno055_write_page_id+0x8c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	7a58      	ldrb	r0, [r3, #9]
 8005d20:	f107 020e 	add.w	r2, r7, #14
 8005d24:	2301      	movs	r3, #1
 8005d26:	2107      	movs	r1, #7
 8005d28:	47a0      	blx	r4
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73fb      	strb	r3, [r7, #15]
 8005d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d11b      	bne.n	8005d6e <bno055_write_page_id+0x7a>
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	73bb      	strb	r3, [r7, #14]
 8005d3a:	4b11      	ldr	r3, [pc, #68]	@ (8005d80 <bno055_write_page_id+0x8c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68dc      	ldr	r4, [r3, #12]
 8005d40:	4b0f      	ldr	r3, [pc, #60]	@ (8005d80 <bno055_write_page_id+0x8c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	7a58      	ldrb	r0, [r3, #9]
 8005d46:	f107 020e 	add.w	r2, r7, #14
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	2107      	movs	r1, #7
 8005d4e:	47a0      	blx	r4
 8005d50:	4603      	mov	r3, r0
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	4413      	add	r3, r2
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	73fb      	strb	r3, [r7, #15]
 8005d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <bno055_write_page_id+0x7e>
 8005d64:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <bno055_write_page_id+0x8c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	79fa      	ldrb	r2, [r7, #7]
 8005d6a:	711a      	strb	r2, [r3, #4]
 8005d6c:	e001      	b.n	8005d72 <bno055_write_page_id+0x7e>
 8005d6e:	23ff      	movs	r3, #255	@ 0xff
 8005d70:	73fb      	strb	r3, [r7, #15]
 8005d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd90      	pop	{r4, r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	24001200 	.word	0x24001200

08005d84 <bno055_read_accel_xyz>:
 8005d84:	b590      	push	{r4, r7, lr}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	23ff      	movs	r3, #255	@ 0xff
 8005d8e:	73fb      	strb	r3, [r7, #15]
 8005d90:	4a31      	ldr	r2, [pc, #196]	@ (8005e58 <bno055_read_accel_xyz+0xd4>)
 8005d92:	f107 0308 	add.w	r3, r7, #8
 8005d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d9a:	6018      	str	r0, [r3, #0]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	8019      	strh	r1, [r3, #0]
 8005da0:	23ff      	movs	r3, #255	@ 0xff
 8005da2:	73bb      	strb	r3, [r7, #14]
 8005da4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e5c <bno055_read_accel_xyz+0xd8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <bno055_read_accel_xyz+0x2e>
 8005dac:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8005db0:	e04e      	b.n	8005e50 <bno055_read_accel_xyz+0xcc>
 8005db2:	4b2a      	ldr	r3, [pc, #168]	@ (8005e5c <bno055_read_accel_xyz+0xd8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	791b      	ldrb	r3, [r3, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <bno055_read_accel_xyz+0x42>
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f7ff ff99 	bl	8005cf4 <bno055_write_page_id>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	73bb      	strb	r3, [r7, #14]
 8005dc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <bno055_read_accel_xyz+0x54>
 8005dce:	4b23      	ldr	r3, [pc, #140]	@ (8005e5c <bno055_read_accel_xyz+0xd8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	791b      	ldrb	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d137      	bne.n	8005e48 <bno055_read_accel_xyz+0xc4>
 8005dd8:	4b20      	ldr	r3, [pc, #128]	@ (8005e5c <bno055_read_accel_xyz+0xd8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691c      	ldr	r4, [r3, #16]
 8005dde:	4b1f      	ldr	r3, [pc, #124]	@ (8005e5c <bno055_read_accel_xyz+0xd8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	7a58      	ldrb	r0, [r3, #9]
 8005de4:	f107 0208 	add.w	r2, r7, #8
 8005de8:	2306      	movs	r3, #6
 8005dea:	2108      	movs	r1, #8
 8005dec:	47a0      	blx	r4
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
 8005df2:	7a3b      	ldrb	r3, [r7, #8]
 8005df4:	723b      	strb	r3, [r7, #8]
 8005df6:	7a7b      	ldrb	r3, [r7, #9]
 8005df8:	727b      	strb	r3, [r7, #9]
 8005dfa:	7a7b      	ldrb	r3, [r7, #9]
 8005dfc:	b25b      	sxtb	r3, r3
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	b21a      	sxth	r2, r3
 8005e02:	7a3b      	ldrb	r3, [r7, #8]
 8005e04:	b21b      	sxth	r3, r3
 8005e06:	4313      	orrs	r3, r2
 8005e08:	b21a      	sxth	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	7abb      	ldrb	r3, [r7, #10]
 8005e10:	72bb      	strb	r3, [r7, #10]
 8005e12:	7afb      	ldrb	r3, [r7, #11]
 8005e14:	72fb      	strb	r3, [r7, #11]
 8005e16:	7afb      	ldrb	r3, [r7, #11]
 8005e18:	b25b      	sxtb	r3, r3
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	b21a      	sxth	r2, r3
 8005e1e:	7abb      	ldrb	r3, [r7, #10]
 8005e20:	b21b      	sxth	r3, r3
 8005e22:	4313      	orrs	r3, r2
 8005e24:	b21a      	sxth	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	805a      	strh	r2, [r3, #2]
 8005e2a:	7b3b      	ldrb	r3, [r7, #12]
 8005e2c:	733b      	strb	r3, [r7, #12]
 8005e2e:	7b7b      	ldrb	r3, [r7, #13]
 8005e30:	737b      	strb	r3, [r7, #13]
 8005e32:	7b7b      	ldrb	r3, [r7, #13]
 8005e34:	b25b      	sxtb	r3, r3
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	b21a      	sxth	r2, r3
 8005e3a:	7b3b      	ldrb	r3, [r7, #12]
 8005e3c:	b21b      	sxth	r3, r3
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	b21a      	sxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	809a      	strh	r2, [r3, #4]
 8005e46:	e001      	b.n	8005e4c <bno055_read_accel_xyz+0xc8>
 8005e48:	23ff      	movs	r3, #255	@ 0xff
 8005e4a:	73fb      	strb	r3, [r7, #15]
 8005e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd90      	pop	{r4, r7, pc}
 8005e58:	08017f20 	.word	0x08017f20
 8005e5c:	24001200 	.word	0x24001200

08005e60 <bno055_read_mag_x>:
 8005e60:	b590      	push	{r4, r7, lr}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	23ff      	movs	r3, #255	@ 0xff
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	81bb      	strh	r3, [r7, #12]
 8005e70:	23ff      	movs	r3, #255	@ 0xff
 8005e72:	73bb      	strb	r3, [r7, #14]
 8005e74:	4b1e      	ldr	r3, [pc, #120]	@ (8005ef0 <bno055_read_mag_x+0x90>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d102      	bne.n	8005e82 <bno055_read_mag_x+0x22>
 8005e7c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8005e80:	e032      	b.n	8005ee8 <bno055_read_mag_x+0x88>
 8005e82:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <bno055_read_mag_x+0x90>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	791b      	ldrb	r3, [r3, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d004      	beq.n	8005e96 <bno055_read_mag_x+0x36>
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f7ff ff31 	bl	8005cf4 <bno055_write_page_id>
 8005e92:	4603      	mov	r3, r0
 8005e94:	73bb      	strb	r3, [r7, #14]
 8005e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d004      	beq.n	8005ea8 <bno055_read_mag_x+0x48>
 8005e9e:	4b14      	ldr	r3, [pc, #80]	@ (8005ef0 <bno055_read_mag_x+0x90>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	791b      	ldrb	r3, [r3, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11b      	bne.n	8005ee0 <bno055_read_mag_x+0x80>
 8005ea8:	4b11      	ldr	r3, [pc, #68]	@ (8005ef0 <bno055_read_mag_x+0x90>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691c      	ldr	r4, [r3, #16]
 8005eae:	4b10      	ldr	r3, [pc, #64]	@ (8005ef0 <bno055_read_mag_x+0x90>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	7a58      	ldrb	r0, [r3, #9]
 8005eb4:	f107 020c 	add.w	r2, r7, #12
 8005eb8:	2302      	movs	r3, #2
 8005eba:	210e      	movs	r1, #14
 8005ebc:	47a0      	blx	r4
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	73fb      	strb	r3, [r7, #15]
 8005ec2:	7b3b      	ldrb	r3, [r7, #12]
 8005ec4:	733b      	strb	r3, [r7, #12]
 8005ec6:	7b7b      	ldrb	r3, [r7, #13]
 8005ec8:	737b      	strb	r3, [r7, #13]
 8005eca:	7b7b      	ldrb	r3, [r7, #13]
 8005ecc:	b25b      	sxtb	r3, r3
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	b21a      	sxth	r2, r3
 8005ed2:	7b3b      	ldrb	r3, [r7, #12]
 8005ed4:	b21b      	sxth	r3, r3
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	b21a      	sxth	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	e001      	b.n	8005ee4 <bno055_read_mag_x+0x84>
 8005ee0:	23ff      	movs	r3, #255	@ 0xff
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd90      	pop	{r4, r7, pc}
 8005ef0:	24001200 	.word	0x24001200

08005ef4 <bno055_read_mag_y>:
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	23ff      	movs	r3, #255	@ 0xff
 8005efe:	73fb      	strb	r3, [r7, #15]
 8005f00:	2300      	movs	r3, #0
 8005f02:	81bb      	strh	r3, [r7, #12]
 8005f04:	23ff      	movs	r3, #255	@ 0xff
 8005f06:	73bb      	strb	r3, [r7, #14]
 8005f08:	4b1e      	ldr	r3, [pc, #120]	@ (8005f84 <bno055_read_mag_y+0x90>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <bno055_read_mag_y+0x22>
 8005f10:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8005f14:	e032      	b.n	8005f7c <bno055_read_mag_y+0x88>
 8005f16:	4b1b      	ldr	r3, [pc, #108]	@ (8005f84 <bno055_read_mag_y+0x90>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	791b      	ldrb	r3, [r3, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d004      	beq.n	8005f2a <bno055_read_mag_y+0x36>
 8005f20:	2000      	movs	r0, #0
 8005f22:	f7ff fee7 	bl	8005cf4 <bno055_write_page_id>
 8005f26:	4603      	mov	r3, r0
 8005f28:	73bb      	strb	r3, [r7, #14]
 8005f2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d004      	beq.n	8005f3c <bno055_read_mag_y+0x48>
 8005f32:	4b14      	ldr	r3, [pc, #80]	@ (8005f84 <bno055_read_mag_y+0x90>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	791b      	ldrb	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d11b      	bne.n	8005f74 <bno055_read_mag_y+0x80>
 8005f3c:	4b11      	ldr	r3, [pc, #68]	@ (8005f84 <bno055_read_mag_y+0x90>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691c      	ldr	r4, [r3, #16]
 8005f42:	4b10      	ldr	r3, [pc, #64]	@ (8005f84 <bno055_read_mag_y+0x90>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	7a58      	ldrb	r0, [r3, #9]
 8005f48:	f107 020c 	add.w	r2, r7, #12
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	2110      	movs	r1, #16
 8005f50:	47a0      	blx	r4
 8005f52:	4603      	mov	r3, r0
 8005f54:	73fb      	strb	r3, [r7, #15]
 8005f56:	7b3b      	ldrb	r3, [r7, #12]
 8005f58:	733b      	strb	r3, [r7, #12]
 8005f5a:	7b7b      	ldrb	r3, [r7, #13]
 8005f5c:	737b      	strb	r3, [r7, #13]
 8005f5e:	7b7b      	ldrb	r3, [r7, #13]
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	b21a      	sxth	r2, r3
 8005f66:	7b3b      	ldrb	r3, [r7, #12]
 8005f68:	b21b      	sxth	r3, r3
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	b21a      	sxth	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	e001      	b.n	8005f78 <bno055_read_mag_y+0x84>
 8005f74:	23ff      	movs	r3, #255	@ 0xff
 8005f76:	73fb      	strb	r3, [r7, #15]
 8005f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd90      	pop	{r4, r7, pc}
 8005f84:	24001200 	.word	0x24001200

08005f88 <bno055_read_mag_z>:
 8005f88:	b590      	push	{r4, r7, lr}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	23ff      	movs	r3, #255	@ 0xff
 8005f92:	73fb      	strb	r3, [r7, #15]
 8005f94:	2300      	movs	r3, #0
 8005f96:	81bb      	strh	r3, [r7, #12]
 8005f98:	23ff      	movs	r3, #255	@ 0xff
 8005f9a:	73bb      	strb	r3, [r7, #14]
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006018 <bno055_read_mag_z+0x90>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <bno055_read_mag_z+0x22>
 8005fa4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8005fa8:	e032      	b.n	8006010 <bno055_read_mag_z+0x88>
 8005faa:	4b1b      	ldr	r3, [pc, #108]	@ (8006018 <bno055_read_mag_z+0x90>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	791b      	ldrb	r3, [r3, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <bno055_read_mag_z+0x36>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f7ff fe9d 	bl	8005cf4 <bno055_write_page_id>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	73bb      	strb	r3, [r7, #14]
 8005fbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <bno055_read_mag_z+0x48>
 8005fc6:	4b14      	ldr	r3, [pc, #80]	@ (8006018 <bno055_read_mag_z+0x90>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	791b      	ldrb	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d11b      	bne.n	8006008 <bno055_read_mag_z+0x80>
 8005fd0:	4b11      	ldr	r3, [pc, #68]	@ (8006018 <bno055_read_mag_z+0x90>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691c      	ldr	r4, [r3, #16]
 8005fd6:	4b10      	ldr	r3, [pc, #64]	@ (8006018 <bno055_read_mag_z+0x90>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	7a58      	ldrb	r0, [r3, #9]
 8005fdc:	f107 020c 	add.w	r2, r7, #12
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	2112      	movs	r1, #18
 8005fe4:	47a0      	blx	r4
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]
 8005fea:	7b3b      	ldrb	r3, [r7, #12]
 8005fec:	733b      	strb	r3, [r7, #12]
 8005fee:	7b7b      	ldrb	r3, [r7, #13]
 8005ff0:	737b      	strb	r3, [r7, #13]
 8005ff2:	7b7b      	ldrb	r3, [r7, #13]
 8005ff4:	b25b      	sxtb	r3, r3
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	b21a      	sxth	r2, r3
 8005ffa:	7b3b      	ldrb	r3, [r7, #12]
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	4313      	orrs	r3, r2
 8006000:	b21a      	sxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e001      	b.n	800600c <bno055_read_mag_z+0x84>
 8006008:	23ff      	movs	r3, #255	@ 0xff
 800600a:	73fb      	strb	r3, [r7, #15]
 800600c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	bd90      	pop	{r4, r7, pc}
 8006018:	24001200 	.word	0x24001200

0800601c <bno055_read_gyro_xyz>:
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	23ff      	movs	r3, #255	@ 0xff
 8006026:	73fb      	strb	r3, [r7, #15]
 8006028:	4a31      	ldr	r2, [pc, #196]	@ (80060f0 <bno055_read_gyro_xyz+0xd4>)
 800602a:	f107 0308 	add.w	r3, r7, #8
 800602e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006032:	6018      	str	r0, [r3, #0]
 8006034:	3304      	adds	r3, #4
 8006036:	8019      	strh	r1, [r3, #0]
 8006038:	23ff      	movs	r3, #255	@ 0xff
 800603a:	73bb      	strb	r3, [r7, #14]
 800603c:	4b2d      	ldr	r3, [pc, #180]	@ (80060f4 <bno055_read_gyro_xyz+0xd8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <bno055_read_gyro_xyz+0x2e>
 8006044:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006048:	e04e      	b.n	80060e8 <bno055_read_gyro_xyz+0xcc>
 800604a:	4b2a      	ldr	r3, [pc, #168]	@ (80060f4 <bno055_read_gyro_xyz+0xd8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	791b      	ldrb	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <bno055_read_gyro_xyz+0x42>
 8006054:	2000      	movs	r0, #0
 8006056:	f7ff fe4d 	bl	8005cf4 <bno055_write_page_id>
 800605a:	4603      	mov	r3, r0
 800605c:	73bb      	strb	r3, [r7, #14]
 800605e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <bno055_read_gyro_xyz+0x54>
 8006066:	4b23      	ldr	r3, [pc, #140]	@ (80060f4 <bno055_read_gyro_xyz+0xd8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	791b      	ldrb	r3, [r3, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d137      	bne.n	80060e0 <bno055_read_gyro_xyz+0xc4>
 8006070:	4b20      	ldr	r3, [pc, #128]	@ (80060f4 <bno055_read_gyro_xyz+0xd8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691c      	ldr	r4, [r3, #16]
 8006076:	4b1f      	ldr	r3, [pc, #124]	@ (80060f4 <bno055_read_gyro_xyz+0xd8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	7a58      	ldrb	r0, [r3, #9]
 800607c:	f107 0208 	add.w	r2, r7, #8
 8006080:	2306      	movs	r3, #6
 8006082:	2114      	movs	r1, #20
 8006084:	47a0      	blx	r4
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]
 800608a:	7a3b      	ldrb	r3, [r7, #8]
 800608c:	723b      	strb	r3, [r7, #8]
 800608e:	7a7b      	ldrb	r3, [r7, #9]
 8006090:	727b      	strb	r3, [r7, #9]
 8006092:	7a7b      	ldrb	r3, [r7, #9]
 8006094:	b25b      	sxtb	r3, r3
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	b21a      	sxth	r2, r3
 800609a:	7a3b      	ldrb	r3, [r7, #8]
 800609c:	b21b      	sxth	r3, r3
 800609e:	4313      	orrs	r3, r2
 80060a0:	b21a      	sxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	7abb      	ldrb	r3, [r7, #10]
 80060a8:	72bb      	strb	r3, [r7, #10]
 80060aa:	7afb      	ldrb	r3, [r7, #11]
 80060ac:	72fb      	strb	r3, [r7, #11]
 80060ae:	7afb      	ldrb	r3, [r7, #11]
 80060b0:	b25b      	sxtb	r3, r3
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	b21a      	sxth	r2, r3
 80060b6:	7abb      	ldrb	r3, [r7, #10]
 80060b8:	b21b      	sxth	r3, r3
 80060ba:	4313      	orrs	r3, r2
 80060bc:	b21a      	sxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	805a      	strh	r2, [r3, #2]
 80060c2:	7b3b      	ldrb	r3, [r7, #12]
 80060c4:	733b      	strb	r3, [r7, #12]
 80060c6:	7b7b      	ldrb	r3, [r7, #13]
 80060c8:	737b      	strb	r3, [r7, #13]
 80060ca:	7b7b      	ldrb	r3, [r7, #13]
 80060cc:	b25b      	sxtb	r3, r3
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	b21a      	sxth	r2, r3
 80060d2:	7b3b      	ldrb	r3, [r7, #12]
 80060d4:	b21b      	sxth	r3, r3
 80060d6:	4313      	orrs	r3, r2
 80060d8:	b21a      	sxth	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	809a      	strh	r2, [r3, #4]
 80060de:	e001      	b.n	80060e4 <bno055_read_gyro_xyz+0xc8>
 80060e0:	23ff      	movs	r3, #255	@ 0xff
 80060e2:	73fb      	strb	r3, [r7, #15]
 80060e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd90      	pop	{r4, r7, pc}
 80060f0:	08017f20 	.word	0x08017f20
 80060f4:	24001200 	.word	0x24001200

080060f8 <bno055_read_euler_hrp>:
 80060f8:	b590      	push	{r4, r7, lr}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	23ff      	movs	r3, #255	@ 0xff
 8006102:	73fb      	strb	r3, [r7, #15]
 8006104:	4a31      	ldr	r2, [pc, #196]	@ (80061cc <bno055_read_euler_hrp+0xd4>)
 8006106:	f107 0308 	add.w	r3, r7, #8
 800610a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800610e:	6018      	str	r0, [r3, #0]
 8006110:	3304      	adds	r3, #4
 8006112:	8019      	strh	r1, [r3, #0]
 8006114:	23ff      	movs	r3, #255	@ 0xff
 8006116:	73bb      	strb	r3, [r7, #14]
 8006118:	4b2d      	ldr	r3, [pc, #180]	@ (80061d0 <bno055_read_euler_hrp+0xd8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <bno055_read_euler_hrp+0x2e>
 8006120:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006124:	e04e      	b.n	80061c4 <bno055_read_euler_hrp+0xcc>
 8006126:	4b2a      	ldr	r3, [pc, #168]	@ (80061d0 <bno055_read_euler_hrp+0xd8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	791b      	ldrb	r3, [r3, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d004      	beq.n	800613a <bno055_read_euler_hrp+0x42>
 8006130:	2000      	movs	r0, #0
 8006132:	f7ff fddf 	bl	8005cf4 <bno055_write_page_id>
 8006136:	4603      	mov	r3, r0
 8006138:	73bb      	strb	r3, [r7, #14]
 800613a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d004      	beq.n	800614c <bno055_read_euler_hrp+0x54>
 8006142:	4b23      	ldr	r3, [pc, #140]	@ (80061d0 <bno055_read_euler_hrp+0xd8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	791b      	ldrb	r3, [r3, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d137      	bne.n	80061bc <bno055_read_euler_hrp+0xc4>
 800614c:	4b20      	ldr	r3, [pc, #128]	@ (80061d0 <bno055_read_euler_hrp+0xd8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691c      	ldr	r4, [r3, #16]
 8006152:	4b1f      	ldr	r3, [pc, #124]	@ (80061d0 <bno055_read_euler_hrp+0xd8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	7a58      	ldrb	r0, [r3, #9]
 8006158:	f107 0208 	add.w	r2, r7, #8
 800615c:	2306      	movs	r3, #6
 800615e:	211a      	movs	r1, #26
 8006160:	47a0      	blx	r4
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]
 8006166:	7a3b      	ldrb	r3, [r7, #8]
 8006168:	723b      	strb	r3, [r7, #8]
 800616a:	7a7b      	ldrb	r3, [r7, #9]
 800616c:	727b      	strb	r3, [r7, #9]
 800616e:	7a7b      	ldrb	r3, [r7, #9]
 8006170:	b25b      	sxtb	r3, r3
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	b21a      	sxth	r2, r3
 8006176:	7a3b      	ldrb	r3, [r7, #8]
 8006178:	b21b      	sxth	r3, r3
 800617a:	4313      	orrs	r3, r2
 800617c:	b21a      	sxth	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	801a      	strh	r2, [r3, #0]
 8006182:	7abb      	ldrb	r3, [r7, #10]
 8006184:	72bb      	strb	r3, [r7, #10]
 8006186:	7afb      	ldrb	r3, [r7, #11]
 8006188:	72fb      	strb	r3, [r7, #11]
 800618a:	7afb      	ldrb	r3, [r7, #11]
 800618c:	b25b      	sxtb	r3, r3
 800618e:	021b      	lsls	r3, r3, #8
 8006190:	b21a      	sxth	r2, r3
 8006192:	7abb      	ldrb	r3, [r7, #10]
 8006194:	b21b      	sxth	r3, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	b21a      	sxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	805a      	strh	r2, [r3, #2]
 800619e:	7b3b      	ldrb	r3, [r7, #12]
 80061a0:	733b      	strb	r3, [r7, #12]
 80061a2:	7b7b      	ldrb	r3, [r7, #13]
 80061a4:	737b      	strb	r3, [r7, #13]
 80061a6:	7b7b      	ldrb	r3, [r7, #13]
 80061a8:	b25b      	sxtb	r3, r3
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	b21a      	sxth	r2, r3
 80061ae:	7b3b      	ldrb	r3, [r7, #12]
 80061b0:	b21b      	sxth	r3, r3
 80061b2:	4313      	orrs	r3, r2
 80061b4:	b21a      	sxth	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	809a      	strh	r2, [r3, #4]
 80061ba:	e001      	b.n	80061c0 <bno055_read_euler_hrp+0xc8>
 80061bc:	23ff      	movs	r3, #255	@ 0xff
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd90      	pop	{r4, r7, pc}
 80061cc:	08017f20 	.word	0x08017f20
 80061d0:	24001200 	.word	0x24001200

080061d4 <bno055_read_quaternion_wxyz>:
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	23ff      	movs	r3, #255	@ 0xff
 80061de:	75fb      	strb	r3, [r7, #23]
 80061e0:	4a38      	ldr	r2, [pc, #224]	@ (80062c4 <bno055_read_quaternion_wxyz+0xf0>)
 80061e2:	f107 030c 	add.w	r3, r7, #12
 80061e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80061ee:	23ff      	movs	r3, #255	@ 0xff
 80061f0:	75bb      	strb	r3, [r7, #22]
 80061f2:	4b35      	ldr	r3, [pc, #212]	@ (80062c8 <bno055_read_quaternion_wxyz+0xf4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d102      	bne.n	8006200 <bno055_read_quaternion_wxyz+0x2c>
 80061fa:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80061fe:	e05c      	b.n	80062ba <bno055_read_quaternion_wxyz+0xe6>
 8006200:	4b31      	ldr	r3, [pc, #196]	@ (80062c8 <bno055_read_quaternion_wxyz+0xf4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	791b      	ldrb	r3, [r3, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <bno055_read_quaternion_wxyz+0x40>
 800620a:	2000      	movs	r0, #0
 800620c:	f7ff fd72 	bl	8005cf4 <bno055_write_page_id>
 8006210:	4603      	mov	r3, r0
 8006212:	75bb      	strb	r3, [r7, #22]
 8006214:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d004      	beq.n	8006226 <bno055_read_quaternion_wxyz+0x52>
 800621c:	4b2a      	ldr	r3, [pc, #168]	@ (80062c8 <bno055_read_quaternion_wxyz+0xf4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	791b      	ldrb	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d145      	bne.n	80062b2 <bno055_read_quaternion_wxyz+0xde>
 8006226:	4b28      	ldr	r3, [pc, #160]	@ (80062c8 <bno055_read_quaternion_wxyz+0xf4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691c      	ldr	r4, [r3, #16]
 800622c:	4b26      	ldr	r3, [pc, #152]	@ (80062c8 <bno055_read_quaternion_wxyz+0xf4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	7a58      	ldrb	r0, [r3, #9]
 8006232:	f107 020c 	add.w	r2, r7, #12
 8006236:	2308      	movs	r3, #8
 8006238:	2120      	movs	r1, #32
 800623a:	47a0      	blx	r4
 800623c:	4603      	mov	r3, r0
 800623e:	75fb      	strb	r3, [r7, #23]
 8006240:	7b3b      	ldrb	r3, [r7, #12]
 8006242:	733b      	strb	r3, [r7, #12]
 8006244:	7b7b      	ldrb	r3, [r7, #13]
 8006246:	737b      	strb	r3, [r7, #13]
 8006248:	7b7b      	ldrb	r3, [r7, #13]
 800624a:	b25b      	sxtb	r3, r3
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	b21a      	sxth	r2, r3
 8006250:	7b3b      	ldrb	r3, [r7, #12]
 8006252:	b21b      	sxth	r3, r3
 8006254:	4313      	orrs	r3, r2
 8006256:	b21a      	sxth	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	73bb      	strb	r3, [r7, #14]
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	73fb      	strb	r3, [r7, #15]
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	b25b      	sxtb	r3, r3
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	b21a      	sxth	r2, r3
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	b21b      	sxth	r3, r3
 8006270:	4313      	orrs	r3, r2
 8006272:	b21a      	sxth	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	805a      	strh	r2, [r3, #2]
 8006278:	7c3b      	ldrb	r3, [r7, #16]
 800627a:	743b      	strb	r3, [r7, #16]
 800627c:	7c7b      	ldrb	r3, [r7, #17]
 800627e:	747b      	strb	r3, [r7, #17]
 8006280:	7c7b      	ldrb	r3, [r7, #17]
 8006282:	b25b      	sxtb	r3, r3
 8006284:	021b      	lsls	r3, r3, #8
 8006286:	b21a      	sxth	r2, r3
 8006288:	7c3b      	ldrb	r3, [r7, #16]
 800628a:	b21b      	sxth	r3, r3
 800628c:	4313      	orrs	r3, r2
 800628e:	b21a      	sxth	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	809a      	strh	r2, [r3, #4]
 8006294:	7cbb      	ldrb	r3, [r7, #18]
 8006296:	74bb      	strb	r3, [r7, #18]
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	74fb      	strb	r3, [r7, #19]
 800629c:	7cfb      	ldrb	r3, [r7, #19]
 800629e:	b25b      	sxtb	r3, r3
 80062a0:	021b      	lsls	r3, r3, #8
 80062a2:	b21a      	sxth	r2, r3
 80062a4:	7cbb      	ldrb	r3, [r7, #18]
 80062a6:	b21b      	sxth	r3, r3
 80062a8:	4313      	orrs	r3, r2
 80062aa:	b21a      	sxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	80da      	strh	r2, [r3, #6]
 80062b0:	e001      	b.n	80062b6 <bno055_read_quaternion_wxyz+0xe2>
 80062b2:	23ff      	movs	r3, #255	@ 0xff
 80062b4:	75fb      	strb	r3, [r7, #23]
 80062b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062ba:	4618      	mov	r0, r3
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd90      	pop	{r4, r7, pc}
 80062c2:	bf00      	nop
 80062c4:	08017f28 	.word	0x08017f28
 80062c8:	24001200 	.word	0x24001200

080062cc <bno055_read_gravity_xyz>:
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	23ff      	movs	r3, #255	@ 0xff
 80062d6:	73fb      	strb	r3, [r7, #15]
 80062d8:	4a31      	ldr	r2, [pc, #196]	@ (80063a0 <bno055_read_gravity_xyz+0xd4>)
 80062da:	f107 0308 	add.w	r3, r7, #8
 80062de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062e2:	6018      	str	r0, [r3, #0]
 80062e4:	3304      	adds	r3, #4
 80062e6:	8019      	strh	r1, [r3, #0]
 80062e8:	23ff      	movs	r3, #255	@ 0xff
 80062ea:	73bb      	strb	r3, [r7, #14]
 80062ec:	4b2d      	ldr	r3, [pc, #180]	@ (80063a4 <bno055_read_gravity_xyz+0xd8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <bno055_read_gravity_xyz+0x2e>
 80062f4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80062f8:	e04e      	b.n	8006398 <bno055_read_gravity_xyz+0xcc>
 80062fa:	4b2a      	ldr	r3, [pc, #168]	@ (80063a4 <bno055_read_gravity_xyz+0xd8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	791b      	ldrb	r3, [r3, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <bno055_read_gravity_xyz+0x42>
 8006304:	2000      	movs	r0, #0
 8006306:	f7ff fcf5 	bl	8005cf4 <bno055_write_page_id>
 800630a:	4603      	mov	r3, r0
 800630c:	73bb      	strb	r3, [r7, #14]
 800630e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <bno055_read_gravity_xyz+0x54>
 8006316:	4b23      	ldr	r3, [pc, #140]	@ (80063a4 <bno055_read_gravity_xyz+0xd8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	791b      	ldrb	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d137      	bne.n	8006390 <bno055_read_gravity_xyz+0xc4>
 8006320:	4b20      	ldr	r3, [pc, #128]	@ (80063a4 <bno055_read_gravity_xyz+0xd8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691c      	ldr	r4, [r3, #16]
 8006326:	4b1f      	ldr	r3, [pc, #124]	@ (80063a4 <bno055_read_gravity_xyz+0xd8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	7a58      	ldrb	r0, [r3, #9]
 800632c:	f107 0208 	add.w	r2, r7, #8
 8006330:	2306      	movs	r3, #6
 8006332:	212e      	movs	r1, #46	@ 0x2e
 8006334:	47a0      	blx	r4
 8006336:	4603      	mov	r3, r0
 8006338:	73fb      	strb	r3, [r7, #15]
 800633a:	7a3b      	ldrb	r3, [r7, #8]
 800633c:	723b      	strb	r3, [r7, #8]
 800633e:	7a7b      	ldrb	r3, [r7, #9]
 8006340:	727b      	strb	r3, [r7, #9]
 8006342:	7a7b      	ldrb	r3, [r7, #9]
 8006344:	b25b      	sxtb	r3, r3
 8006346:	021b      	lsls	r3, r3, #8
 8006348:	b21a      	sxth	r2, r3
 800634a:	7a3b      	ldrb	r3, [r7, #8]
 800634c:	b21b      	sxth	r3, r3
 800634e:	4313      	orrs	r3, r2
 8006350:	b21a      	sxth	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	801a      	strh	r2, [r3, #0]
 8006356:	7abb      	ldrb	r3, [r7, #10]
 8006358:	72bb      	strb	r3, [r7, #10]
 800635a:	7afb      	ldrb	r3, [r7, #11]
 800635c:	72fb      	strb	r3, [r7, #11]
 800635e:	7afb      	ldrb	r3, [r7, #11]
 8006360:	b25b      	sxtb	r3, r3
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	b21a      	sxth	r2, r3
 8006366:	7abb      	ldrb	r3, [r7, #10]
 8006368:	b21b      	sxth	r3, r3
 800636a:	4313      	orrs	r3, r2
 800636c:	b21a      	sxth	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	805a      	strh	r2, [r3, #2]
 8006372:	7b3b      	ldrb	r3, [r7, #12]
 8006374:	733b      	strb	r3, [r7, #12]
 8006376:	7b7b      	ldrb	r3, [r7, #13]
 8006378:	737b      	strb	r3, [r7, #13]
 800637a:	7b7b      	ldrb	r3, [r7, #13]
 800637c:	b25b      	sxtb	r3, r3
 800637e:	021b      	lsls	r3, r3, #8
 8006380:	b21a      	sxth	r2, r3
 8006382:	7b3b      	ldrb	r3, [r7, #12]
 8006384:	b21b      	sxth	r3, r3
 8006386:	4313      	orrs	r3, r2
 8006388:	b21a      	sxth	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	809a      	strh	r2, [r3, #4]
 800638e:	e001      	b.n	8006394 <bno055_read_gravity_xyz+0xc8>
 8006390:	23ff      	movs	r3, #255	@ 0xff
 8006392:	73fb      	strb	r3, [r7, #15]
 8006394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	bd90      	pop	{r4, r7, pc}
 80063a0:	08017f20 	.word	0x08017f20
 80063a4:	24001200 	.word	0x24001200

080063a8 <bno055_read_temp_data>:
 80063a8:	b590      	push	{r4, r7, lr}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	23ff      	movs	r3, #255	@ 0xff
 80063b2:	73fb      	strb	r3, [r7, #15]
 80063b4:	2300      	movs	r3, #0
 80063b6:	737b      	strb	r3, [r7, #13]
 80063b8:	23ff      	movs	r3, #255	@ 0xff
 80063ba:	73bb      	strb	r3, [r7, #14]
 80063bc:	4b19      	ldr	r3, [pc, #100]	@ (8006424 <bno055_read_temp_data+0x7c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <bno055_read_temp_data+0x22>
 80063c4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80063c8:	e028      	b.n	800641c <bno055_read_temp_data+0x74>
 80063ca:	4b16      	ldr	r3, [pc, #88]	@ (8006424 <bno055_read_temp_data+0x7c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	791b      	ldrb	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <bno055_read_temp_data+0x36>
 80063d4:	2000      	movs	r0, #0
 80063d6:	f7ff fc8d 	bl	8005cf4 <bno055_write_page_id>
 80063da:	4603      	mov	r3, r0
 80063dc:	73bb      	strb	r3, [r7, #14]
 80063de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <bno055_read_temp_data+0x48>
 80063e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006424 <bno055_read_temp_data+0x7c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	791b      	ldrb	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d111      	bne.n	8006414 <bno055_read_temp_data+0x6c>
 80063f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006424 <bno055_read_temp_data+0x7c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691c      	ldr	r4, [r3, #16]
 80063f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006424 <bno055_read_temp_data+0x7c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	7a58      	ldrb	r0, [r3, #9]
 80063fc:	f107 020d 	add.w	r2, r7, #13
 8006400:	2301      	movs	r3, #1
 8006402:	2134      	movs	r1, #52	@ 0x34
 8006404:	47a0      	blx	r4
 8006406:	4603      	mov	r3, r0
 8006408:	73fb      	strb	r3, [r7, #15]
 800640a:	7b7b      	ldrb	r3, [r7, #13]
 800640c:	b25a      	sxtb	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e001      	b.n	8006418 <bno055_read_temp_data+0x70>
 8006414:	23ff      	movs	r3, #255	@ 0xff
 8006416:	73fb      	strb	r3, [r7, #15]
 8006418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	bd90      	pop	{r4, r7, pc}
 8006424:	24001200 	.word	0x24001200

08006428 <bno055_convert_float_euler_hpr_deg>:
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	23ff      	movs	r3, #255	@ 0xff
 8006432:	75fb      	strb	r3, [r7, #23]
 8006434:	2300      	movs	r3, #0
 8006436:	823b      	strh	r3, [r7, #16]
 8006438:	2300      	movs	r3, #0
 800643a:	827b      	strh	r3, [r7, #18]
 800643c:	2300      	movs	r3, #0
 800643e:	82bb      	strh	r3, [r7, #20]
 8006440:	2300      	movs	r3, #0
 8006442:	73fb      	strb	r3, [r7, #15]
 8006444:	f107 030f 	add.w	r3, r7, #15
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fbd5 	bl	8006bf8 <bno055_get_euler_unit>
 800644e:	4603      	mov	r3, r0
 8006450:	75fb      	strb	r3, [r7, #23]
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <bno055_convert_float_euler_hpr_deg+0x42>
 8006458:	2000      	movs	r0, #0
 800645a:	f000 fc11 	bl	8006c80 <bno055_set_euler_unit>
 800645e:	4603      	mov	r3, r0
 8006460:	b2da      	uxtb	r2, r3
 8006462:	7dfb      	ldrb	r3, [r7, #23]
 8006464:	4413      	add	r3, r2
 8006466:	b2db      	uxtb	r3, r3
 8006468:	75fb      	strb	r3, [r7, #23]
 800646a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d13f      	bne.n	80064f2 <bno055_convert_float_euler_hpr_deg+0xca>
 8006472:	f107 0310 	add.w	r3, r7, #16
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fe3e 	bl	80060f8 <bno055_read_euler_hrp>
 800647c:	4603      	mov	r3, r0
 800647e:	b2da      	uxtb	r2, r3
 8006480:	7dfb      	ldrb	r3, [r7, #23]
 8006482:	4413      	add	r3, r2
 8006484:	b2db      	uxtb	r3, r3
 8006486:	75fb      	strb	r3, [r7, #23]
 8006488:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d12d      	bne.n	80064ec <bno055_convert_float_euler_hpr_deg+0xc4>
 8006490:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006494:	ee07 3a90 	vmov	s15, r3
 8006498:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800649c:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80064a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80064a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	edc3 7a00 	vstr	s15, [r3]
 80064ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80064ba:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80064be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80064c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	edc3 7a02 	vstr	s15, [r3, #8]
 80064cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80064d8:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80064dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80064e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	edc3 7a01 	vstr	s15, [r3, #4]
 80064ea:	e004      	b.n	80064f6 <bno055_convert_float_euler_hpr_deg+0xce>
 80064ec:	23ff      	movs	r3, #255	@ 0xff
 80064ee:	75fb      	strb	r3, [r7, #23]
 80064f0:	e001      	b.n	80064f6 <bno055_convert_float_euler_hpr_deg+0xce>
 80064f2:	23ff      	movs	r3, #255	@ 0xff
 80064f4:	75fb      	strb	r3, [r7, #23]
 80064f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	0000      	movs	r0, r0
 8006504:	0000      	movs	r0, r0
	...

08006508 <bno055_convert_float_gravity_xyz_msq>:
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	23ff      	movs	r3, #255	@ 0xff
 8006512:	73fb      	strb	r3, [r7, #15]
 8006514:	2300      	movs	r3, #0
 8006516:	813b      	strh	r3, [r7, #8]
 8006518:	2300      	movs	r3, #0
 800651a:	817b      	strh	r3, [r7, #10]
 800651c:	2300      	movs	r3, #0
 800651e:	81bb      	strh	r3, [r7, #12]
 8006520:	f107 0308 	add.w	r3, r7, #8
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fed1 	bl	80062cc <bno055_read_gravity_xyz>
 800652a:	4603      	mov	r3, r0
 800652c:	73fb      	strb	r3, [r7, #15]
 800652e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d12d      	bne.n	8006592 <bno055_convert_float_gravity_xyz_msq+0x8a>
 8006536:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006542:	ed9f 5b19 	vldr	d5, [pc, #100]	@ 80065a8 <bno055_convert_float_gravity_xyz_msq+0xa0>
 8006546:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800654a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	edc3 7a00 	vstr	s15, [r3]
 8006554:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006560:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80065a8 <bno055_convert_float_gravity_xyz_msq+0xa0>
 8006564:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006568:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	edc3 7a01 	vstr	s15, [r3, #4]
 8006572:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800657e:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 80065a8 <bno055_convert_float_gravity_xyz_msq+0xa0>
 8006582:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006586:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006590:	e001      	b.n	8006596 <bno055_convert_float_gravity_xyz_msq+0x8e>
 8006592:	23ff      	movs	r3, #255	@ 0xff
 8006594:	73fb      	strb	r3, [r7, #15]
 8006596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	f3af 8000 	nop.w
 80065a8:	00000000 	.word	0x00000000
 80065ac:	40590000 	.word	0x40590000

080065b0 <bno055_convert_float_temp_celsius>:
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	23ff      	movs	r3, #255	@ 0xff
 80065ba:	75fb      	strb	r3, [r7, #23]
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	2300      	movs	r3, #0
 80065c8:	73bb      	strb	r3, [r7, #14]
 80065ca:	f107 030e 	add.w	r3, r7, #14
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fbd2 	bl	8006d78 <bno055_get_temp_unit>
 80065d4:	4603      	mov	r3, r0
 80065d6:	75fb      	strb	r3, [r7, #23]
 80065d8:	7bbb      	ldrb	r3, [r7, #14]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d008      	beq.n	80065f0 <bno055_convert_float_temp_celsius+0x40>
 80065de:	2000      	movs	r0, #0
 80065e0:	f000 fc0e 	bl	8006e00 <bno055_set_temp_unit>
 80065e4:	4603      	mov	r3, r0
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	7dfb      	ldrb	r3, [r7, #23]
 80065ea:	4413      	add	r3, r2
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	75fb      	strb	r3, [r7, #23]
 80065f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d11f      	bne.n	8006638 <bno055_convert_float_temp_celsius+0x88>
 80065f8:	f107 030f 	add.w	r3, r7, #15
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff fed3 	bl	80063a8 <bno055_read_temp_data>
 8006602:	4603      	mov	r3, r0
 8006604:	b2da      	uxtb	r2, r3
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	4413      	add	r3, r2
 800660a:	b2db      	uxtb	r3, r3
 800660c:	75fb      	strb	r3, [r7, #23]
 800660e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10d      	bne.n	8006632 <bno055_convert_float_temp_celsius+0x82>
 8006616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800661a:	ee07 3a90 	vmov	s15, r3
 800661e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006622:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006626:	edc7 7a04 	vstr	s15, [r7, #16]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e004      	b.n	800663c <bno055_convert_float_temp_celsius+0x8c>
 8006632:	23ff      	movs	r3, #255	@ 0xff
 8006634:	75fb      	strb	r3, [r7, #23]
 8006636:	e001      	b.n	800663c <bno055_convert_float_temp_celsius+0x8c>
 8006638:	23ff      	movs	r3, #255	@ 0xff
 800663a:	75fb      	strb	r3, [r7, #23]
 800663c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <bno055_convert_double_accel_xyz_mg>:
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	23ff      	movs	r3, #255	@ 0xff
 8006652:	75fb      	strb	r3, [r7, #23]
 8006654:	2300      	movs	r3, #0
 8006656:	823b      	strh	r3, [r7, #16]
 8006658:	2300      	movs	r3, #0
 800665a:	827b      	strh	r3, [r7, #18]
 800665c:	2300      	movs	r3, #0
 800665e:	82bb      	strh	r3, [r7, #20]
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]
 8006664:	f107 030f 	add.w	r3, r7, #15
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f949 	bl	8006900 <bno055_get_accel_unit>
 800666e:	4603      	mov	r3, r0
 8006670:	75fb      	strb	r3, [r7, #23]
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d008      	beq.n	800668a <bno055_convert_double_accel_xyz_mg+0x42>
 8006678:	2001      	movs	r0, #1
 800667a:	f000 f983 	bl	8006984 <bno055_set_accel_unit>
 800667e:	4603      	mov	r3, r0
 8006680:	b2da      	uxtb	r2, r3
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	4413      	add	r3, r2
 8006686:	b2db      	uxtb	r3, r3
 8006688:	75fb      	strb	r3, [r7, #23]
 800668a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d12d      	bne.n	80066ee <bno055_convert_double_accel_xyz_mg+0xa6>
 8006692:	f107 0310 	add.w	r3, r7, #16
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fb74 	bl	8005d84 <bno055_read_accel_xyz>
 800669c:	4603      	mov	r3, r0
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	4413      	add	r3, r2
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	75fb      	strb	r3, [r7, #23]
 80066a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11b      	bne.n	80066e8 <bno055_convert_double_accel_xyz_mg+0xa0>
 80066b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80066b4:	ee07 3a90 	vmov	s15, r3
 80066b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	ed83 7b00 	vstr	d7, [r3]
 80066c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	ed83 7b02 	vstr	d7, [r3, #8]
 80066d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	ed83 7b04 	vstr	d7, [r3, #16]
 80066e6:	e004      	b.n	80066f2 <bno055_convert_double_accel_xyz_mg+0xaa>
 80066e8:	23ff      	movs	r3, #255	@ 0xff
 80066ea:	75fb      	strb	r3, [r7, #23]
 80066ec:	e001      	b.n	80066f2 <bno055_convert_double_accel_xyz_mg+0xaa>
 80066ee:	23ff      	movs	r3, #255	@ 0xff
 80066f0:	75fb      	strb	r3, [r7, #23]
 80066f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <bno055_convert_double_mag_x_uT>:
 80066fe:	b580      	push	{r7, lr}
 8006700:	b088      	sub	sp, #32
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	23ff      	movs	r3, #255	@ 0xff
 8006708:	77fb      	strb	r3, [r7, #31]
 800670a:	2300      	movs	r3, #0
 800670c:	81fb      	strh	r3, [r7, #14]
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800671a:	f107 030e 	add.w	r3, r7, #14
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fb9e 	bl	8005e60 <bno055_read_mag_x>
 8006724:	4603      	mov	r3, r0
 8006726:	77fb      	strb	r3, [r7, #31]
 8006728:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d111      	bne.n	8006754 <bno055_convert_double_mag_x_uT+0x56>
 8006730:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006734:	ee07 3a90 	vmov	s15, r3
 8006738:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800673c:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8006740:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006744:	ed87 7b04 	vstr	d7, [r7, #16]
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800674e:	e9c1 2300 	strd	r2, r3, [r1]
 8006752:	e001      	b.n	8006758 <bno055_convert_double_mag_x_uT+0x5a>
 8006754:	23ff      	movs	r3, #255	@ 0xff
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800675c:	4618      	mov	r0, r3
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <bno055_convert_double_mag_y_uT>:
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	23ff      	movs	r3, #255	@ 0xff
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	2300      	movs	r3, #0
 8006772:	81fb      	strh	r3, [r7, #14]
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006780:	f107 030e 	add.w	r3, r7, #14
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fbb5 	bl	8005ef4 <bno055_read_mag_y>
 800678a:	4603      	mov	r3, r0
 800678c:	77fb      	strb	r3, [r7, #31]
 800678e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d111      	bne.n	80067ba <bno055_convert_double_mag_y_uT+0x56>
 8006796:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80067a2:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80067a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80067aa:	ed87 7b04 	vstr	d7, [r7, #16]
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067b4:	e9c1 2300 	strd	r2, r3, [r1]
 80067b8:	e001      	b.n	80067be <bno055_convert_double_mag_y_uT+0x5a>
 80067ba:	23ff      	movs	r3, #255	@ 0xff
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <bno055_convert_double_mag_z_uT>:
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b088      	sub	sp, #32
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	23ff      	movs	r3, #255	@ 0xff
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	2300      	movs	r3, #0
 80067d8:	81fb      	strh	r3, [r7, #14]
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80067e6:	f107 030e 	add.w	r3, r7, #14
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff fbcc 	bl	8005f88 <bno055_read_mag_z>
 80067f0:	4603      	mov	r3, r0
 80067f2:	77fb      	strb	r3, [r7, #31]
 80067f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d111      	bne.n	8006820 <bno055_convert_double_mag_z_uT+0x56>
 80067fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006800:	ee07 3a90 	vmov	s15, r3
 8006804:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006808:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800680c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006810:	ed87 7b04 	vstr	d7, [r7, #16]
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800681a:	e9c1 2300 	strd	r2, r3, [r1]
 800681e:	e001      	b.n	8006824 <bno055_convert_double_mag_z_uT+0x5a>
 8006820:	23ff      	movs	r3, #255	@ 0xff
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006828:	4618      	mov	r0, r3
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <bno055_convert_double_gyro_xyz_dps>:
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	23ff      	movs	r3, #255	@ 0xff
 800683a:	75fb      	strb	r3, [r7, #23]
 800683c:	2300      	movs	r3, #0
 800683e:	823b      	strh	r3, [r7, #16]
 8006840:	2300      	movs	r3, #0
 8006842:	827b      	strh	r3, [r7, #18]
 8006844:	2300      	movs	r3, #0
 8006846:	82bb      	strh	r3, [r7, #20]
 8006848:	2300      	movs	r3, #0
 800684a:	73fb      	strb	r3, [r7, #15]
 800684c:	f107 030f 	add.w	r3, r7, #15
 8006850:	4618      	mov	r0, r3
 8006852:	f000 f911 	bl	8006a78 <bno055_get_gyro_unit>
 8006856:	4603      	mov	r3, r0
 8006858:	75fb      	strb	r3, [r7, #23]
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <bno055_convert_double_gyro_xyz_dps+0x42>
 8006860:	2000      	movs	r0, #0
 8006862:	f000 f94d 	bl	8006b00 <bno055_set_gyro_unit>
 8006866:	4603      	mov	r3, r0
 8006868:	b2da      	uxtb	r2, r3
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	4413      	add	r3, r2
 800686e:	b2db      	uxtb	r3, r3
 8006870:	75fb      	strb	r3, [r7, #23]
 8006872:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d139      	bne.n	80068ee <bno055_convert_double_gyro_xyz_dps+0xbe>
 800687a:	f107 0310 	add.w	r3, r7, #16
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fbcc 	bl	800601c <bno055_read_gyro_xyz>
 8006884:	4603      	mov	r3, r0
 8006886:	b2da      	uxtb	r2, r3
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	4413      	add	r3, r2
 800688c:	b2db      	uxtb	r3, r3
 800688e:	75fb      	strb	r3, [r7, #23]
 8006890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d127      	bne.n	80068e8 <bno055_convert_double_gyro_xyz_dps+0xb8>
 8006898:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80068a4:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80068a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	ed83 7b00 	vstr	d7, [r3]
 80068b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80068be:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80068c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	ed83 7b02 	vstr	d7, [r3, #8]
 80068cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80068d8:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80068dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	ed83 7b04 	vstr	d7, [r3, #16]
 80068e6:	e004      	b.n	80068f2 <bno055_convert_double_gyro_xyz_dps+0xc2>
 80068e8:	23ff      	movs	r3, #255	@ 0xff
 80068ea:	75fb      	strb	r3, [r7, #23]
 80068ec:	e001      	b.n	80068f2 <bno055_convert_double_gyro_xyz_dps+0xc2>
 80068ee:	23ff      	movs	r3, #255	@ 0xff
 80068f0:	75fb      	strb	r3, [r7, #23]
 80068f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <bno055_get_accel_unit>:
 8006900:	b590      	push	{r4, r7, lr}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	23ff      	movs	r3, #255	@ 0xff
 800690a:	73fb      	strb	r3, [r7, #15]
 800690c:	2300      	movs	r3, #0
 800690e:	737b      	strb	r3, [r7, #13]
 8006910:	23ff      	movs	r3, #255	@ 0xff
 8006912:	73bb      	strb	r3, [r7, #14]
 8006914:	4b1a      	ldr	r3, [pc, #104]	@ (8006980 <bno055_get_accel_unit+0x80>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <bno055_get_accel_unit+0x22>
 800691c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006920:	e02a      	b.n	8006978 <bno055_get_accel_unit+0x78>
 8006922:	4b17      	ldr	r3, [pc, #92]	@ (8006980 <bno055_get_accel_unit+0x80>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	791b      	ldrb	r3, [r3, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <bno055_get_accel_unit+0x36>
 800692c:	2000      	movs	r0, #0
 800692e:	f7ff f9e1 	bl	8005cf4 <bno055_write_page_id>
 8006932:	4603      	mov	r3, r0
 8006934:	73bb      	strb	r3, [r7, #14]
 8006936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <bno055_get_accel_unit+0x48>
 800693e:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <bno055_get_accel_unit+0x80>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	791b      	ldrb	r3, [r3, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d113      	bne.n	8006970 <bno055_get_accel_unit+0x70>
 8006948:	4b0d      	ldr	r3, [pc, #52]	@ (8006980 <bno055_get_accel_unit+0x80>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691c      	ldr	r4, [r3, #16]
 800694e:	4b0c      	ldr	r3, [pc, #48]	@ (8006980 <bno055_get_accel_unit+0x80>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	7a58      	ldrb	r0, [r3, #9]
 8006954:	f107 020d 	add.w	r2, r7, #13
 8006958:	2301      	movs	r3, #1
 800695a:	213b      	movs	r1, #59	@ 0x3b
 800695c:	47a0      	blx	r4
 800695e:	4603      	mov	r3, r0
 8006960:	73fb      	strb	r3, [r7, #15]
 8006962:	7b7b      	ldrb	r3, [r7, #13]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	e001      	b.n	8006974 <bno055_get_accel_unit+0x74>
 8006970:	23ff      	movs	r3, #255	@ 0xff
 8006972:	73fb      	strb	r3, [r7, #15]
 8006974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	bd90      	pop	{r4, r7, pc}
 8006980:	24001200 	.word	0x24001200

08006984 <bno055_set_accel_unit>:
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	71fb      	strb	r3, [r7, #7]
 800698e:	23ff      	movs	r3, #255	@ 0xff
 8006990:	73fb      	strb	r3, [r7, #15]
 8006992:	2300      	movs	r3, #0
 8006994:	737b      	strb	r3, [r7, #13]
 8006996:	2300      	movs	r3, #0
 8006998:	733b      	strb	r3, [r7, #12]
 800699a:	23ff      	movs	r3, #255	@ 0xff
 800699c:	73bb      	strb	r3, [r7, #14]
 800699e:	4b35      	ldr	r3, [pc, #212]	@ (8006a74 <bno055_set_accel_unit+0xf0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d102      	bne.n	80069ac <bno055_set_accel_unit+0x28>
 80069a6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80069aa:	e05f      	b.n	8006a6c <bno055_set_accel_unit+0xe8>
 80069ac:	f107 030c 	add.w	r3, r7, #12
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 faa1 	bl	8006ef8 <bno055_get_operation_mode>
 80069b6:	4603      	mov	r3, r0
 80069b8:	73bb      	strb	r3, [r7, #14]
 80069ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d143      	bne.n	8006a4a <bno055_set_accel_unit+0xc6>
 80069c2:	7b3b      	ldrb	r3, [r7, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <bno055_set_accel_unit+0x56>
 80069c8:	2000      	movs	r0, #0
 80069ca:	f000 fad7 	bl	8006f7c <bno055_set_operation_mode>
 80069ce:	4603      	mov	r3, r0
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	4413      	add	r3, r2
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	73bb      	strb	r3, [r7, #14]
 80069da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d130      	bne.n	8006a44 <bno055_set_accel_unit+0xc0>
 80069e2:	4b24      	ldr	r3, [pc, #144]	@ (8006a74 <bno055_set_accel_unit+0xf0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691c      	ldr	r4, [r3, #16]
 80069e8:	4b22      	ldr	r3, [pc, #136]	@ (8006a74 <bno055_set_accel_unit+0xf0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	7a58      	ldrb	r0, [r3, #9]
 80069ee:	f107 020d 	add.w	r2, r7, #13
 80069f2:	2301      	movs	r3, #1
 80069f4:	213b      	movs	r1, #59	@ 0x3b
 80069f6:	47a0      	blx	r4
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]
 80069fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d124      	bne.n	8006a4e <bno055_set_accel_unit+0xca>
 8006a04:	7b7b      	ldrb	r3, [r7, #13]
 8006a06:	b25b      	sxtb	r3, r3
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	b25a      	sxtb	r2, r3
 8006a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	b25b      	sxtb	r3, r3
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	737b      	strb	r3, [r7, #13]
 8006a20:	4b14      	ldr	r3, [pc, #80]	@ (8006a74 <bno055_set_accel_unit+0xf0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68dc      	ldr	r4, [r3, #12]
 8006a26:	4b13      	ldr	r3, [pc, #76]	@ (8006a74 <bno055_set_accel_unit+0xf0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	7a58      	ldrb	r0, [r3, #9]
 8006a2c:	f107 020d 	add.w	r2, r7, #13
 8006a30:	2301      	movs	r3, #1
 8006a32:	213b      	movs	r1, #59	@ 0x3b
 8006a34:	47a0      	blx	r4
 8006a36:	4603      	mov	r3, r0
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	73fb      	strb	r3, [r7, #15]
 8006a42:	e004      	b.n	8006a4e <bno055_set_accel_unit+0xca>
 8006a44:	23ff      	movs	r3, #255	@ 0xff
 8006a46:	73fb      	strb	r3, [r7, #15]
 8006a48:	e001      	b.n	8006a4e <bno055_set_accel_unit+0xca>
 8006a4a:	23ff      	movs	r3, #255	@ 0xff
 8006a4c:	73fb      	strb	r3, [r7, #15]
 8006a4e:	7b3b      	ldrb	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d009      	beq.n	8006a68 <bno055_set_accel_unit+0xe4>
 8006a54:	7b3b      	ldrb	r3, [r7, #12]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fa90 	bl	8006f7c <bno055_set_operation_mode>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	4413      	add	r3, r2
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	73fb      	strb	r3, [r7, #15]
 8006a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd90      	pop	{r4, r7, pc}
 8006a74:	24001200 	.word	0x24001200

08006a78 <bno055_get_gyro_unit>:
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	23ff      	movs	r3, #255	@ 0xff
 8006a82:	73fb      	strb	r3, [r7, #15]
 8006a84:	2300      	movs	r3, #0
 8006a86:	737b      	strb	r3, [r7, #13]
 8006a88:	23ff      	movs	r3, #255	@ 0xff
 8006a8a:	73bb      	strb	r3, [r7, #14]
 8006a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006afc <bno055_get_gyro_unit+0x84>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d102      	bne.n	8006a9a <bno055_get_gyro_unit+0x22>
 8006a94:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006a98:	e02c      	b.n	8006af4 <bno055_get_gyro_unit+0x7c>
 8006a9a:	4b18      	ldr	r3, [pc, #96]	@ (8006afc <bno055_get_gyro_unit+0x84>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	791b      	ldrb	r3, [r3, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d004      	beq.n	8006aae <bno055_get_gyro_unit+0x36>
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	f7ff f925 	bl	8005cf4 <bno055_write_page_id>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73bb      	strb	r3, [r7, #14]
 8006aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <bno055_get_gyro_unit+0x48>
 8006ab6:	4b11      	ldr	r3, [pc, #68]	@ (8006afc <bno055_get_gyro_unit+0x84>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	791b      	ldrb	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d115      	bne.n	8006aec <bno055_get_gyro_unit+0x74>
 8006ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8006afc <bno055_get_gyro_unit+0x84>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691c      	ldr	r4, [r3, #16]
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8006afc <bno055_get_gyro_unit+0x84>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	7a58      	ldrb	r0, [r3, #9]
 8006acc:	f107 020d 	add.w	r2, r7, #13
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	213b      	movs	r1, #59	@ 0x3b
 8006ad4:	47a0      	blx	r4
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73fb      	strb	r3, [r7, #15]
 8006ada:	7b7b      	ldrb	r3, [r7, #13]
 8006adc:	105b      	asrs	r3, r3, #1
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	e001      	b.n	8006af0 <bno055_get_gyro_unit+0x78>
 8006aec:	23ff      	movs	r3, #255	@ 0xff
 8006aee:	73fb      	strb	r3, [r7, #15]
 8006af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd90      	pop	{r4, r7, pc}
 8006afc:	24001200 	.word	0x24001200

08006b00 <bno055_set_gyro_unit>:
 8006b00:	b590      	push	{r4, r7, lr}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	71fb      	strb	r3, [r7, #7]
 8006b0a:	23ff      	movs	r3, #255	@ 0xff
 8006b0c:	73fb      	strb	r3, [r7, #15]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	737b      	strb	r3, [r7, #13]
 8006b12:	2300      	movs	r3, #0
 8006b14:	733b      	strb	r3, [r7, #12]
 8006b16:	23ff      	movs	r3, #255	@ 0xff
 8006b18:	73bb      	strb	r3, [r7, #14]
 8006b1a:	4b36      	ldr	r3, [pc, #216]	@ (8006bf4 <bno055_set_gyro_unit+0xf4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d102      	bne.n	8006b28 <bno055_set_gyro_unit+0x28>
 8006b22:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006b26:	e060      	b.n	8006bea <bno055_set_gyro_unit+0xea>
 8006b28:	f107 030c 	add.w	r3, r7, #12
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 f9e3 	bl	8006ef8 <bno055_get_operation_mode>
 8006b32:	4603      	mov	r3, r0
 8006b34:	73bb      	strb	r3, [r7, #14]
 8006b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d144      	bne.n	8006bc8 <bno055_set_gyro_unit+0xc8>
 8006b3e:	7b3b      	ldrb	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <bno055_set_gyro_unit+0x56>
 8006b44:	2000      	movs	r0, #0
 8006b46:	f000 fa19 	bl	8006f7c <bno055_set_operation_mode>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	4413      	add	r3, r2
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	73bb      	strb	r3, [r7, #14]
 8006b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d131      	bne.n	8006bc2 <bno055_set_gyro_unit+0xc2>
 8006b5e:	4b25      	ldr	r3, [pc, #148]	@ (8006bf4 <bno055_set_gyro_unit+0xf4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691c      	ldr	r4, [r3, #16]
 8006b64:	4b23      	ldr	r3, [pc, #140]	@ (8006bf4 <bno055_set_gyro_unit+0xf4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	7a58      	ldrb	r0, [r3, #9]
 8006b6a:	f107 020d 	add.w	r2, r7, #13
 8006b6e:	2301      	movs	r3, #1
 8006b70:	213b      	movs	r1, #59	@ 0x3b
 8006b72:	47a0      	blx	r4
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]
 8006b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d125      	bne.n	8006bcc <bno055_set_gyro_unit+0xcc>
 8006b80:	7b7b      	ldrb	r3, [r7, #13]
 8006b82:	b25b      	sxtb	r3, r3
 8006b84:	f023 0302 	bic.w	r3, r3, #2
 8006b88:	b25a      	sxtb	r2, r3
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	b25b      	sxtb	r3, r3
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	b25b      	sxtb	r3, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	737b      	strb	r3, [r7, #13]
 8006b9e:	4b15      	ldr	r3, [pc, #84]	@ (8006bf4 <bno055_set_gyro_unit+0xf4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68dc      	ldr	r4, [r3, #12]
 8006ba4:	4b13      	ldr	r3, [pc, #76]	@ (8006bf4 <bno055_set_gyro_unit+0xf4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	7a58      	ldrb	r0, [r3, #9]
 8006baa:	f107 020d 	add.w	r2, r7, #13
 8006bae:	2301      	movs	r3, #1
 8006bb0:	213b      	movs	r1, #59	@ 0x3b
 8006bb2:	47a0      	blx	r4
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	4413      	add	r3, r2
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	73fb      	strb	r3, [r7, #15]
 8006bc0:	e004      	b.n	8006bcc <bno055_set_gyro_unit+0xcc>
 8006bc2:	23ff      	movs	r3, #255	@ 0xff
 8006bc4:	73fb      	strb	r3, [r7, #15]
 8006bc6:	e001      	b.n	8006bcc <bno055_set_gyro_unit+0xcc>
 8006bc8:	23ff      	movs	r3, #255	@ 0xff
 8006bca:	73fb      	strb	r3, [r7, #15]
 8006bcc:	7b3b      	ldrb	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <bno055_set_gyro_unit+0xe6>
 8006bd2:	7b3b      	ldrb	r3, [r7, #12]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 f9d1 	bl	8006f7c <bno055_set_operation_mode>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	4413      	add	r3, r2
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	73fb      	strb	r3, [r7, #15]
 8006be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd90      	pop	{r4, r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	24001200 	.word	0x24001200

08006bf8 <bno055_get_euler_unit>:
 8006bf8:	b590      	push	{r4, r7, lr}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	23ff      	movs	r3, #255	@ 0xff
 8006c02:	73fb      	strb	r3, [r7, #15]
 8006c04:	2300      	movs	r3, #0
 8006c06:	737b      	strb	r3, [r7, #13]
 8006c08:	23ff      	movs	r3, #255	@ 0xff
 8006c0a:	73bb      	strb	r3, [r7, #14]
 8006c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c7c <bno055_get_euler_unit+0x84>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <bno055_get_euler_unit+0x22>
 8006c14:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006c18:	e02c      	b.n	8006c74 <bno055_get_euler_unit+0x7c>
 8006c1a:	4b18      	ldr	r3, [pc, #96]	@ (8006c7c <bno055_get_euler_unit+0x84>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	791b      	ldrb	r3, [r3, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <bno055_get_euler_unit+0x36>
 8006c24:	2000      	movs	r0, #0
 8006c26:	f7ff f865 	bl	8005cf4 <bno055_write_page_id>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73bb      	strb	r3, [r7, #14]
 8006c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d004      	beq.n	8006c40 <bno055_get_euler_unit+0x48>
 8006c36:	4b11      	ldr	r3, [pc, #68]	@ (8006c7c <bno055_get_euler_unit+0x84>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	791b      	ldrb	r3, [r3, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d115      	bne.n	8006c6c <bno055_get_euler_unit+0x74>
 8006c40:	4b0e      	ldr	r3, [pc, #56]	@ (8006c7c <bno055_get_euler_unit+0x84>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691c      	ldr	r4, [r3, #16]
 8006c46:	4b0d      	ldr	r3, [pc, #52]	@ (8006c7c <bno055_get_euler_unit+0x84>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	7a58      	ldrb	r0, [r3, #9]
 8006c4c:	f107 020d 	add.w	r2, r7, #13
 8006c50:	2301      	movs	r3, #1
 8006c52:	213b      	movs	r1, #59	@ 0x3b
 8006c54:	47a0      	blx	r4
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]
 8006c5a:	7b7b      	ldrb	r3, [r7, #13]
 8006c5c:	109b      	asrs	r3, r3, #2
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e001      	b.n	8006c70 <bno055_get_euler_unit+0x78>
 8006c6c:	23ff      	movs	r3, #255	@ 0xff
 8006c6e:	73fb      	strb	r3, [r7, #15]
 8006c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd90      	pop	{r4, r7, pc}
 8006c7c:	24001200 	.word	0x24001200

08006c80 <bno055_set_euler_unit>:
 8006c80:	b590      	push	{r4, r7, lr}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
 8006c8a:	23ff      	movs	r3, #255	@ 0xff
 8006c8c:	73fb      	strb	r3, [r7, #15]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	737b      	strb	r3, [r7, #13]
 8006c92:	2300      	movs	r3, #0
 8006c94:	733b      	strb	r3, [r7, #12]
 8006c96:	23ff      	movs	r3, #255	@ 0xff
 8006c98:	73bb      	strb	r3, [r7, #14]
 8006c9a:	4b36      	ldr	r3, [pc, #216]	@ (8006d74 <bno055_set_euler_unit+0xf4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d102      	bne.n	8006ca8 <bno055_set_euler_unit+0x28>
 8006ca2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006ca6:	e060      	b.n	8006d6a <bno055_set_euler_unit+0xea>
 8006ca8:	f107 030c 	add.w	r3, r7, #12
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f923 	bl	8006ef8 <bno055_get_operation_mode>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73bb      	strb	r3, [r7, #14]
 8006cb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d144      	bne.n	8006d48 <bno055_set_euler_unit+0xc8>
 8006cbe:	7b3b      	ldrb	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d008      	beq.n	8006cd6 <bno055_set_euler_unit+0x56>
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	f000 f959 	bl	8006f7c <bno055_set_operation_mode>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	73bb      	strb	r3, [r7, #14]
 8006cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d131      	bne.n	8006d42 <bno055_set_euler_unit+0xc2>
 8006cde:	4b25      	ldr	r3, [pc, #148]	@ (8006d74 <bno055_set_euler_unit+0xf4>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691c      	ldr	r4, [r3, #16]
 8006ce4:	4b23      	ldr	r3, [pc, #140]	@ (8006d74 <bno055_set_euler_unit+0xf4>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	7a58      	ldrb	r0, [r3, #9]
 8006cea:	f107 020d 	add.w	r2, r7, #13
 8006cee:	2301      	movs	r3, #1
 8006cf0:	213b      	movs	r1, #59	@ 0x3b
 8006cf2:	47a0      	blx	r4
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
 8006cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d125      	bne.n	8006d4c <bno055_set_euler_unit+0xcc>
 8006d00:	7b7b      	ldrb	r3, [r7, #13]
 8006d02:	b25b      	sxtb	r3, r3
 8006d04:	f023 0304 	bic.w	r3, r3, #4
 8006d08:	b25a      	sxtb	r2, r3
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	b25b      	sxtb	r3, r3
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	b25b      	sxtb	r3, r3
 8006d16:	4313      	orrs	r3, r2
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	737b      	strb	r3, [r7, #13]
 8006d1e:	4b15      	ldr	r3, [pc, #84]	@ (8006d74 <bno055_set_euler_unit+0xf4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68dc      	ldr	r4, [r3, #12]
 8006d24:	4b13      	ldr	r3, [pc, #76]	@ (8006d74 <bno055_set_euler_unit+0xf4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	7a58      	ldrb	r0, [r3, #9]
 8006d2a:	f107 020d 	add.w	r2, r7, #13
 8006d2e:	2301      	movs	r3, #1
 8006d30:	213b      	movs	r1, #59	@ 0x3b
 8006d32:	47a0      	blx	r4
 8006d34:	4603      	mov	r3, r0
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	73fb      	strb	r3, [r7, #15]
 8006d40:	e004      	b.n	8006d4c <bno055_set_euler_unit+0xcc>
 8006d42:	23ff      	movs	r3, #255	@ 0xff
 8006d44:	73fb      	strb	r3, [r7, #15]
 8006d46:	e001      	b.n	8006d4c <bno055_set_euler_unit+0xcc>
 8006d48:	23ff      	movs	r3, #255	@ 0xff
 8006d4a:	73fb      	strb	r3, [r7, #15]
 8006d4c:	7b3b      	ldrb	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <bno055_set_euler_unit+0xe6>
 8006d52:	7b3b      	ldrb	r3, [r7, #12]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f911 	bl	8006f7c <bno055_set_operation_mode>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	4413      	add	r3, r2
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd90      	pop	{r4, r7, pc}
 8006d72:	bf00      	nop
 8006d74:	24001200 	.word	0x24001200

08006d78 <bno055_get_temp_unit>:
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	23ff      	movs	r3, #255	@ 0xff
 8006d82:	73fb      	strb	r3, [r7, #15]
 8006d84:	2300      	movs	r3, #0
 8006d86:	737b      	strb	r3, [r7, #13]
 8006d88:	23ff      	movs	r3, #255	@ 0xff
 8006d8a:	73bb      	strb	r3, [r7, #14]
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006dfc <bno055_get_temp_unit+0x84>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d102      	bne.n	8006d9a <bno055_get_temp_unit+0x22>
 8006d94:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006d98:	e02c      	b.n	8006df4 <bno055_get_temp_unit+0x7c>
 8006d9a:	4b18      	ldr	r3, [pc, #96]	@ (8006dfc <bno055_get_temp_unit+0x84>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	791b      	ldrb	r3, [r3, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <bno055_get_temp_unit+0x36>
 8006da4:	2000      	movs	r0, #0
 8006da6:	f7fe ffa5 	bl	8005cf4 <bno055_write_page_id>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73bb      	strb	r3, [r7, #14]
 8006dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <bno055_get_temp_unit+0x48>
 8006db6:	4b11      	ldr	r3, [pc, #68]	@ (8006dfc <bno055_get_temp_unit+0x84>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	791b      	ldrb	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d115      	bne.n	8006dec <bno055_get_temp_unit+0x74>
 8006dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8006dfc <bno055_get_temp_unit+0x84>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691c      	ldr	r4, [r3, #16]
 8006dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dfc <bno055_get_temp_unit+0x84>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	7a58      	ldrb	r0, [r3, #9]
 8006dcc:	f107 020d 	add.w	r2, r7, #13
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	213b      	movs	r1, #59	@ 0x3b
 8006dd4:	47a0      	blx	r4
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	73fb      	strb	r3, [r7, #15]
 8006dda:	7b7b      	ldrb	r3, [r7, #13]
 8006ddc:	111b      	asrs	r3, r3, #4
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e001      	b.n	8006df0 <bno055_get_temp_unit+0x78>
 8006dec:	23ff      	movs	r3, #255	@ 0xff
 8006dee:	73fb      	strb	r3, [r7, #15]
 8006df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd90      	pop	{r4, r7, pc}
 8006dfc:	24001200 	.word	0x24001200

08006e00 <bno055_set_temp_unit>:
 8006e00:	b590      	push	{r4, r7, lr}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	71fb      	strb	r3, [r7, #7]
 8006e0a:	23ff      	movs	r3, #255	@ 0xff
 8006e0c:	73fb      	strb	r3, [r7, #15]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	737b      	strb	r3, [r7, #13]
 8006e12:	2300      	movs	r3, #0
 8006e14:	733b      	strb	r3, [r7, #12]
 8006e16:	23ff      	movs	r3, #255	@ 0xff
 8006e18:	73bb      	strb	r3, [r7, #14]
 8006e1a:	4b36      	ldr	r3, [pc, #216]	@ (8006ef4 <bno055_set_temp_unit+0xf4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <bno055_set_temp_unit+0x28>
 8006e22:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006e26:	e060      	b.n	8006eea <bno055_set_temp_unit+0xea>
 8006e28:	f107 030c 	add.w	r3, r7, #12
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 f863 	bl	8006ef8 <bno055_get_operation_mode>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73bb      	strb	r3, [r7, #14]
 8006e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d144      	bne.n	8006ec8 <bno055_set_temp_unit+0xc8>
 8006e3e:	7b3b      	ldrb	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d008      	beq.n	8006e56 <bno055_set_temp_unit+0x56>
 8006e44:	2000      	movs	r0, #0
 8006e46:	f000 f899 	bl	8006f7c <bno055_set_operation_mode>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	4413      	add	r3, r2
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	73bb      	strb	r3, [r7, #14]
 8006e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d131      	bne.n	8006ec2 <bno055_set_temp_unit+0xc2>
 8006e5e:	4b25      	ldr	r3, [pc, #148]	@ (8006ef4 <bno055_set_temp_unit+0xf4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	691c      	ldr	r4, [r3, #16]
 8006e64:	4b23      	ldr	r3, [pc, #140]	@ (8006ef4 <bno055_set_temp_unit+0xf4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	7a58      	ldrb	r0, [r3, #9]
 8006e6a:	f107 020d 	add.w	r2, r7, #13
 8006e6e:	2301      	movs	r3, #1
 8006e70:	213b      	movs	r1, #59	@ 0x3b
 8006e72:	47a0      	blx	r4
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]
 8006e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d125      	bne.n	8006ecc <bno055_set_temp_unit+0xcc>
 8006e80:	7b7b      	ldrb	r3, [r7, #13]
 8006e82:	b25b      	sxtb	r3, r3
 8006e84:	f023 0310 	bic.w	r3, r3, #16
 8006e88:	b25a      	sxtb	r2, r3
 8006e8a:	79fb      	ldrb	r3, [r7, #7]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	b25b      	sxtb	r3, r3
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	b25b      	sxtb	r3, r3
 8006e96:	4313      	orrs	r3, r2
 8006e98:	b25b      	sxtb	r3, r3
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	737b      	strb	r3, [r7, #13]
 8006e9e:	4b15      	ldr	r3, [pc, #84]	@ (8006ef4 <bno055_set_temp_unit+0xf4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68dc      	ldr	r4, [r3, #12]
 8006ea4:	4b13      	ldr	r3, [pc, #76]	@ (8006ef4 <bno055_set_temp_unit+0xf4>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	7a58      	ldrb	r0, [r3, #9]
 8006eaa:	f107 020d 	add.w	r2, r7, #13
 8006eae:	2301      	movs	r3, #1
 8006eb0:	213b      	movs	r1, #59	@ 0x3b
 8006eb2:	47a0      	blx	r4
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	4413      	add	r3, r2
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	73fb      	strb	r3, [r7, #15]
 8006ec0:	e004      	b.n	8006ecc <bno055_set_temp_unit+0xcc>
 8006ec2:	23ff      	movs	r3, #255	@ 0xff
 8006ec4:	73fb      	strb	r3, [r7, #15]
 8006ec6:	e001      	b.n	8006ecc <bno055_set_temp_unit+0xcc>
 8006ec8:	23ff      	movs	r3, #255	@ 0xff
 8006eca:	73fb      	strb	r3, [r7, #15]
 8006ecc:	7b3b      	ldrb	r3, [r7, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d009      	beq.n	8006ee6 <bno055_set_temp_unit+0xe6>
 8006ed2:	7b3b      	ldrb	r3, [r7, #12]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 f851 	bl	8006f7c <bno055_set_operation_mode>
 8006eda:	4603      	mov	r3, r0
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	73fb      	strb	r3, [r7, #15]
 8006ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd90      	pop	{r4, r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	24001200 	.word	0x24001200

08006ef8 <bno055_get_operation_mode>:
 8006ef8:	b590      	push	{r4, r7, lr}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	23ff      	movs	r3, #255	@ 0xff
 8006f02:	73fb      	strb	r3, [r7, #15]
 8006f04:	2300      	movs	r3, #0
 8006f06:	737b      	strb	r3, [r7, #13]
 8006f08:	23ff      	movs	r3, #255	@ 0xff
 8006f0a:	73bb      	strb	r3, [r7, #14]
 8006f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f78 <bno055_get_operation_mode+0x80>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <bno055_get_operation_mode+0x22>
 8006f14:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006f18:	e02a      	b.n	8006f70 <bno055_get_operation_mode+0x78>
 8006f1a:	4b17      	ldr	r3, [pc, #92]	@ (8006f78 <bno055_get_operation_mode+0x80>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	791b      	ldrb	r3, [r3, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <bno055_get_operation_mode+0x36>
 8006f24:	2000      	movs	r0, #0
 8006f26:	f7fe fee5 	bl	8005cf4 <bno055_write_page_id>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73bb      	strb	r3, [r7, #14]
 8006f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d004      	beq.n	8006f40 <bno055_get_operation_mode+0x48>
 8006f36:	4b10      	ldr	r3, [pc, #64]	@ (8006f78 <bno055_get_operation_mode+0x80>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	791b      	ldrb	r3, [r3, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d113      	bne.n	8006f68 <bno055_get_operation_mode+0x70>
 8006f40:	4b0d      	ldr	r3, [pc, #52]	@ (8006f78 <bno055_get_operation_mode+0x80>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691c      	ldr	r4, [r3, #16]
 8006f46:	4b0c      	ldr	r3, [pc, #48]	@ (8006f78 <bno055_get_operation_mode+0x80>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	7a58      	ldrb	r0, [r3, #9]
 8006f4c:	f107 020d 	add.w	r2, r7, #13
 8006f50:	2301      	movs	r3, #1
 8006f52:	213d      	movs	r1, #61	@ 0x3d
 8006f54:	47a0      	blx	r4
 8006f56:	4603      	mov	r3, r0
 8006f58:	73fb      	strb	r3, [r7, #15]
 8006f5a:	7b7b      	ldrb	r3, [r7, #13]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	e001      	b.n	8006f6c <bno055_get_operation_mode+0x74>
 8006f68:	23ff      	movs	r3, #255	@ 0xff
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd90      	pop	{r4, r7, pc}
 8006f78:	24001200 	.word	0x24001200

08006f7c <bno055_set_operation_mode>:
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
 8006f86:	23ff      	movs	r3, #255	@ 0xff
 8006f88:	73fb      	strb	r3, [r7, #15]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	737b      	strb	r3, [r7, #13]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	733b      	strb	r3, [r7, #12]
 8006f92:	23ff      	movs	r3, #255	@ 0xff
 8006f94:	73bb      	strb	r3, [r7, #14]
 8006f96:	4b5c      	ldr	r3, [pc, #368]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d102      	bne.n	8006fa4 <bno055_set_operation_mode+0x28>
 8006f9e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006fa2:	e0ac      	b.n	80070fe <bno055_set_operation_mode+0x182>
 8006fa4:	f107 030c 	add.w	r3, r7, #12
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff ffa5 	bl	8006ef8 <bno055_get_operation_mode>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73bb      	strb	r3, [r7, #14]
 8006fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f040 809d 	bne.w	80070f6 <bno055_set_operation_mode+0x17a>
 8006fbc:	7b3b      	ldrb	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d137      	bne.n	8007032 <bno055_set_operation_mode+0xb6>
 8006fc2:	4b51      	ldr	r3, [pc, #324]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691c      	ldr	r4, [r3, #16]
 8006fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	7a58      	ldrb	r0, [r3, #9]
 8006fce:	f107 020d 	add.w	r2, r7, #13
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	213d      	movs	r1, #61	@ 0x3d
 8006fd6:	47a0      	blx	r4
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f040 808a 	bne.w	80070fa <bno055_set_operation_mode+0x17e>
 8006fe6:	7b7b      	ldrb	r3, [r7, #13]
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	f023 030f 	bic.w	r3, r3, #15
 8006fee:	b25a      	sxtb	r2, r3
 8006ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	b25b      	sxtb	r3, r3
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	b25b      	sxtb	r3, r3
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	737b      	strb	r3, [r7, #13]
 8007002:	4b41      	ldr	r3, [pc, #260]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68dc      	ldr	r4, [r3, #12]
 8007008:	4b3f      	ldr	r3, [pc, #252]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	7a58      	ldrb	r0, [r3, #9]
 800700e:	f107 020d 	add.w	r2, r7, #13
 8007012:	2301      	movs	r3, #1
 8007014:	213d      	movs	r1, #61	@ 0x3d
 8007016:	47a0      	blx	r4
 8007018:	4603      	mov	r3, r0
 800701a:	b2da      	uxtb	r2, r3
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	4413      	add	r3, r2
 8007020:	b2db      	uxtb	r3, r3
 8007022:	73fb      	strb	r3, [r7, #15]
 8007024:	4b38      	ldr	r3, [pc, #224]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800702e:	4798      	blx	r3
 8007030:	e063      	b.n	80070fa <bno055_set_operation_mode+0x17e>
 8007032:	4b35      	ldr	r3, [pc, #212]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	691c      	ldr	r4, [r3, #16]
 8007038:	4b33      	ldr	r3, [pc, #204]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	7a58      	ldrb	r0, [r3, #9]
 800703e:	f107 020d 	add.w	r2, r7, #13
 8007042:	2301      	movs	r3, #1
 8007044:	213d      	movs	r1, #61	@ 0x3d
 8007046:	47a0      	blx	r4
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]
 800704c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d116      	bne.n	8007082 <bno055_set_operation_mode+0x106>
 8007054:	7b7b      	ldrb	r3, [r7, #13]
 8007056:	f023 030f 	bic.w	r3, r3, #15
 800705a:	b2db      	uxtb	r3, r3
 800705c:	737b      	strb	r3, [r7, #13]
 800705e:	f107 030d 	add.w	r3, r7, #13
 8007062:	2201      	movs	r2, #1
 8007064:	4619      	mov	r1, r3
 8007066:	203d      	movs	r0, #61	@ 0x3d
 8007068:	f7fe fe1e 	bl	8005ca8 <bno055_write_register>
 800706c:	4603      	mov	r3, r0
 800706e:	b2da      	uxtb	r2, r3
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	4413      	add	r3, r2
 8007074:	b2db      	uxtb	r3, r3
 8007076:	73fb      	strb	r3, [r7, #15]
 8007078:	4b23      	ldr	r3, [pc, #140]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	2014      	movs	r0, #20
 8007080:	4798      	blx	r3
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d038      	beq.n	80070fa <bno055_set_operation_mode+0x17e>
 8007088:	4b1f      	ldr	r3, [pc, #124]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691c      	ldr	r4, [r3, #16]
 800708e:	4b1e      	ldr	r3, [pc, #120]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	7a58      	ldrb	r0, [r3, #9]
 8007094:	f107 020d 	add.w	r2, r7, #13
 8007098:	2301      	movs	r3, #1
 800709a:	213d      	movs	r1, #61	@ 0x3d
 800709c:	47a0      	blx	r4
 800709e:	4603      	mov	r3, r0
 80070a0:	73fb      	strb	r3, [r7, #15]
 80070a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d127      	bne.n	80070fa <bno055_set_operation_mode+0x17e>
 80070aa:	7b7b      	ldrb	r3, [r7, #13]
 80070ac:	b25b      	sxtb	r3, r3
 80070ae:	f023 030f 	bic.w	r3, r3, #15
 80070b2:	b25a      	sxtb	r2, r3
 80070b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	b25b      	sxtb	r3, r3
 80070be:	4313      	orrs	r3, r2
 80070c0:	b25b      	sxtb	r3, r3
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	737b      	strb	r3, [r7, #13]
 80070c6:	4b10      	ldr	r3, [pc, #64]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68dc      	ldr	r4, [r3, #12]
 80070cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	7a58      	ldrb	r0, [r3, #9]
 80070d2:	f107 020d 	add.w	r2, r7, #13
 80070d6:	2301      	movs	r3, #1
 80070d8:	213d      	movs	r1, #61	@ 0x3d
 80070da:	47a0      	blx	r4
 80070dc:	4603      	mov	r3, r0
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	4413      	add	r3, r2
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	73fb      	strb	r3, [r7, #15]
 80070e8:	4b07      	ldr	r3, [pc, #28]	@ (8007108 <bno055_set_operation_mode+0x18c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80070f2:	4798      	blx	r3
 80070f4:	e001      	b.n	80070fa <bno055_set_operation_mode+0x17e>
 80070f6:	23ff      	movs	r3, #255	@ 0xff
 80070f8:	73fb      	strb	r3, [r7, #15]
 80070fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	bd90      	pop	{r4, r7, pc}
 8007106:	bf00      	nop
 8007108:	24001200 	.word	0x24001200

0800710c <bno055_set_power_mode>:
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	71fb      	strb	r3, [r7, #7]
 8007116:	23ff      	movs	r3, #255	@ 0xff
 8007118:	73fb      	strb	r3, [r7, #15]
 800711a:	2300      	movs	r3, #0
 800711c:	737b      	strb	r3, [r7, #13]
 800711e:	2300      	movs	r3, #0
 8007120:	733b      	strb	r3, [r7, #12]
 8007122:	23ff      	movs	r3, #255	@ 0xff
 8007124:	73bb      	strb	r3, [r7, #14]
 8007126:	4b35      	ldr	r3, [pc, #212]	@ (80071fc <bno055_set_power_mode+0xf0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d102      	bne.n	8007134 <bno055_set_power_mode+0x28>
 800712e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007132:	e05f      	b.n	80071f4 <bno055_set_power_mode+0xe8>
 8007134:	f107 030c 	add.w	r3, r7, #12
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fedd 	bl	8006ef8 <bno055_get_operation_mode>
 800713e:	4603      	mov	r3, r0
 8007140:	73bb      	strb	r3, [r7, #14]
 8007142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d143      	bne.n	80071d2 <bno055_set_power_mode+0xc6>
 800714a:	7b3b      	ldrb	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d008      	beq.n	8007162 <bno055_set_power_mode+0x56>
 8007150:	2000      	movs	r0, #0
 8007152:	f7ff ff13 	bl	8006f7c <bno055_set_operation_mode>
 8007156:	4603      	mov	r3, r0
 8007158:	b2da      	uxtb	r2, r3
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	4413      	add	r3, r2
 800715e:	b2db      	uxtb	r3, r3
 8007160:	73bb      	strb	r3, [r7, #14]
 8007162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d130      	bne.n	80071cc <bno055_set_power_mode+0xc0>
 800716a:	4b24      	ldr	r3, [pc, #144]	@ (80071fc <bno055_set_power_mode+0xf0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691c      	ldr	r4, [r3, #16]
 8007170:	4b22      	ldr	r3, [pc, #136]	@ (80071fc <bno055_set_power_mode+0xf0>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	7a58      	ldrb	r0, [r3, #9]
 8007176:	f107 020d 	add.w	r2, r7, #13
 800717a:	2301      	movs	r3, #1
 800717c:	213e      	movs	r1, #62	@ 0x3e
 800717e:	47a0      	blx	r4
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]
 8007184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d124      	bne.n	80071d6 <bno055_set_power_mode+0xca>
 800718c:	7b7b      	ldrb	r3, [r7, #13]
 800718e:	b25b      	sxtb	r3, r3
 8007190:	f023 0303 	bic.w	r3, r3, #3
 8007194:	b25a      	sxtb	r2, r3
 8007196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	b25b      	sxtb	r3, r3
 80071a0:	4313      	orrs	r3, r2
 80071a2:	b25b      	sxtb	r3, r3
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	737b      	strb	r3, [r7, #13]
 80071a8:	4b14      	ldr	r3, [pc, #80]	@ (80071fc <bno055_set_power_mode+0xf0>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68dc      	ldr	r4, [r3, #12]
 80071ae:	4b13      	ldr	r3, [pc, #76]	@ (80071fc <bno055_set_power_mode+0xf0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	7a58      	ldrb	r0, [r3, #9]
 80071b4:	f107 020d 	add.w	r2, r7, #13
 80071b8:	2301      	movs	r3, #1
 80071ba:	213e      	movs	r1, #62	@ 0x3e
 80071bc:	47a0      	blx	r4
 80071be:	4603      	mov	r3, r0
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	4413      	add	r3, r2
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	73fb      	strb	r3, [r7, #15]
 80071ca:	e004      	b.n	80071d6 <bno055_set_power_mode+0xca>
 80071cc:	23ff      	movs	r3, #255	@ 0xff
 80071ce:	73fb      	strb	r3, [r7, #15]
 80071d0:	e001      	b.n	80071d6 <bno055_set_power_mode+0xca>
 80071d2:	23ff      	movs	r3, #255	@ 0xff
 80071d4:	73fb      	strb	r3, [r7, #15]
 80071d6:	7b3b      	ldrb	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d009      	beq.n	80071f0 <bno055_set_power_mode+0xe4>
 80071dc:	7b3b      	ldrb	r3, [r7, #12]
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fecc 	bl	8006f7c <bno055_set_operation_mode>
 80071e4:	4603      	mov	r3, r0
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	4413      	add	r3, r2
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	73fb      	strb	r3, [r7, #15]
 80071f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd90      	pop	{r4, r7, pc}
 80071fc:	24001200 	.word	0x24001200

08007200 <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
signed char bno055_platform_read(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char ReadNumbr)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af02      	add	r7, sp, #8
 8007206:	603a      	str	r2, [r7, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	4603      	mov	r3, r0
 800720c:	71fb      	strb	r3, [r7, #7]
 800720e:	460b      	mov	r3, r1
 8007210:	71bb      	strb	r3, [r7, #6]
 8007212:	4613      	mov	r3, r2
 8007214:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	b29b      	uxth	r3, r3
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	81fb      	strh	r3, [r7, #14]

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 800721e:	1dba      	adds	r2, r7, #6
 8007220:	89f9      	ldrh	r1, [r7, #14]
 8007222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2301      	movs	r3, #1
 800722a:	4809      	ldr	r0, [pc, #36]	@ (8007250 <bno055_platform_read+0x50>)
 800722c:	f002 faf8 	bl	8009820 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BNO_I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8007230:	797b      	ldrb	r3, [r7, #5]
 8007232:	b29b      	uxth	r3, r3
 8007234:	89f9      	ldrh	r1, [r7, #14]
 8007236:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800723a:	9200      	str	r2, [sp, #0]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	4804      	ldr	r0, [pc, #16]	@ (8007250 <bno055_platform_read+0x50>)
 8007240:	f002 fc06 	bl	8009a50 <HAL_I2C_Master_Receive>
    return 0;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	24001498 	.word	0x24001498

08007254 <bno055_platform_write>:
  *
  */


signed char bno055_platform_write(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char WriteNumbr)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af02      	add	r7, sp, #8
 800725a:	603a      	str	r2, [r7, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	4603      	mov	r3, r0
 8007260:	71fb      	strb	r3, [r7, #7]
 8007262:	460b      	mov	r3, r1
 8007264:	71bb      	strb	r3, [r7, #6]
 8007266:	4613      	mov	r3, r2
 8007268:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	b29b      	uxth	r3, r3
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	81fb      	strh	r3, [r7, #14]

    BNO_GTXBuffer[0] = subaddress;
 8007272:	4a0d      	ldr	r2, [pc, #52]	@ (80072a8 <bno055_platform_write+0x54>)
 8007274:	79bb      	ldrb	r3, [r7, #6]
 8007276:	7013      	strb	r3, [r2, #0]
    memcpy(&BNO_GTXBuffer[1], pBuffer, WriteNumbr);
 8007278:	797b      	ldrb	r3, [r7, #5]
 800727a:	461a      	mov	r2, r3
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	480b      	ldr	r0, [pc, #44]	@ (80072ac <bno055_platform_write+0x58>)
 8007280:	f00d fb7f 	bl	8014982 <memcpy>

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, BNO_GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8007284:	797b      	ldrb	r3, [r7, #5]
 8007286:	b29b      	uxth	r3, r3
 8007288:	3301      	adds	r3, #1
 800728a:	b29b      	uxth	r3, r3
 800728c:	89f9      	ldrh	r1, [r7, #14]
 800728e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007292:	9200      	str	r2, [sp, #0]
 8007294:	4a04      	ldr	r2, [pc, #16]	@ (80072a8 <bno055_platform_write+0x54>)
 8007296:	4806      	ldr	r0, [pc, #24]	@ (80072b0 <bno055_platform_write+0x5c>)
 8007298:	f002 fac2 	bl	8009820 <HAL_I2C_Master_Transmit>
    return 0;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	2400121c 	.word	0x2400121c
 80072ac:	2400121d 	.word	0x2400121d
 80072b0:	24001498 	.word	0x24001498

080072b4 <DelayUs>:
  *
  */


void DelayUs(unsigned int Delay)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(Delay--)
 80072bc:	e008      	b.n	80072d0 <DelayUs+0x1c>
	{
		for(i = 0; i < 84; i++)
 80072be:	2300      	movs	r3, #0
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	e002      	b.n	80072ca <DelayUs+0x16>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b53      	cmp	r3, #83	@ 0x53
 80072ce:	d9f9      	bls.n	80072c4 <DelayUs+0x10>
	while(Delay--)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	1e5a      	subs	r2, r3, #1
 80072d4:	607a      	str	r2, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f1      	bne.n	80072be <DelayUs+0xa>
			;
		}
	}

	//HAL_Delay(Delay);
}
 80072da:	bf00      	nop
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
int8_t BNO055_Init(){
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 80072ee:	4b23      	ldr	r3, [pc, #140]	@ (800737c <BNO055_Init+0x94>)
 80072f0:	4a23      	ldr	r2, [pc, #140]	@ (8007380 <BNO055_Init+0x98>)
 80072f2:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 80072f4:	4b21      	ldr	r3, [pc, #132]	@ (800737c <BNO055_Init+0x94>)
 80072f6:	4a23      	ldr	r2, [pc, #140]	@ (8007384 <BNO055_Init+0x9c>)
 80072f8:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = &DelayUs;
 80072fa:	4b20      	ldr	r3, [pc, #128]	@ (800737c <BNO055_Init+0x94>)
 80072fc:	4a22      	ldr	r2, [pc, #136]	@ (8007388 <BNO055_Init+0xa0>)
 80072fe:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 8007300:	4b1e      	ldr	r3, [pc, #120]	@ (800737c <BNO055_Init+0x94>)
 8007302:	2228      	movs	r2, #40	@ 0x28
 8007304:	725a      	strb	r2, [r3, #9]

	uint8_t value;
	bno055_platform_read(BNO055_I2C_ADDR1, 0x00, &value, 1);
 8007306:	1dfa      	adds	r2, r7, #7
 8007308:	2301      	movs	r3, #1
 800730a:	2100      	movs	r1, #0
 800730c:	2028      	movs	r0, #40	@ 0x28
 800730e:	f7ff ff77 	bl	8007200 <bno055_platform_read>

	comres = bno055_init(&bno055_dev);
 8007312:	481a      	ldr	r0, [pc, #104]	@ (800737c <BNO055_Init+0x94>)
 8007314:	f7fe fc08 	bl	8005b28 <bno055_init>
 8007318:	4603      	mov	r3, r0
 800731a:	461a      	mov	r2, r3
 800731c:	4b1b      	ldr	r3, [pc, #108]	@ (800738c <BNO055_Init+0xa4>)
 800731e:	601a      	str	r2, [r3, #0]
//	{
//		printf("bno055_init failed, comres=%d\r\n", comres);
//	}

	/* set the power mode as NORMAL*/
	power_mode = BNO055_POWER_MODE_NORMAL;
 8007320:	4b1b      	ldr	r3, [pc, #108]	@ (8007390 <BNO055_Init+0xa8>)
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
	comres += bno055_set_power_mode(power_mode);
 8007326:	4b1a      	ldr	r3, [pc, #104]	@ (8007390 <BNO055_Init+0xa8>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff feee 	bl	800710c <bno055_set_power_mode>
 8007330:	4603      	mov	r3, r0
 8007332:	461a      	mov	r2, r3
 8007334:	4b15      	ldr	r3, [pc, #84]	@ (800738c <BNO055_Init+0xa4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4413      	add	r3, r2
 800733a:	4a14      	ldr	r2, [pc, #80]	@ (800738c <BNO055_Init+0xa4>)
 800733c:	6013      	str	r3, [r2, #0]
		* 0x0A - BNO055_OPERATION_MODE_M4G
		* 0x0B - BNO055_OPERATION_MODE_NDOF_FMC_OFF
		* 0x0C - BNO055_OPERATION_MODE_NDOF
		* based on the user need configure the operation mode*/
	    // Set the operation mode to NDOF
	    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 800733e:	200c      	movs	r0, #12
 8007340:	f7ff fe1c 	bl	8006f7c <bno055_set_operation_mode>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	4b10      	ldr	r3, [pc, #64]	@ (800738c <BNO055_Init+0xa4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4413      	add	r3, r2
 800734e:	4a0f      	ldr	r2, [pc, #60]	@ (800738c <BNO055_Init+0xa4>)
 8007350:	6013      	str	r3, [r2, #0]
	    comres += bno055_get_operation_mode(&op_mode_current);
 8007352:	4810      	ldr	r0, [pc, #64]	@ (8007394 <BNO055_Init+0xac>)
 8007354:	f7ff fdd0 	bl	8006ef8 <bno055_get_operation_mode>
 8007358:	4603      	mov	r3, r0
 800735a:	461a      	mov	r2, r3
 800735c:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <BNO055_Init+0xa4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4413      	add	r3, r2
 8007362:	4a0a      	ldr	r2, [pc, #40]	@ (800738c <BNO055_Init+0xa4>)
 8007364:	6013      	str	r3, [r2, #0]
//		}
//		else
//		{
//			printf("bno055_init failed, comres=%d\r\n", comres);
//		}
	    DelayUs(1000000); // 1 second
 8007366:	480c      	ldr	r0, [pc, #48]	@ (8007398 <BNO055_Init+0xb0>)
 8007368:	f7ff ffa4 	bl	80072b4 <DelayUs>
//			printf("BNO Units configuration failed\r\n", comres);
//		}



	return (int8_t)comres;
 800736c:	4b07      	ldr	r3, [pc, #28]	@ (800738c <BNO055_Init+0xa4>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	b25b      	sxtb	r3, r3
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	24001204 	.word	0x24001204
 8007380:	08007255 	.word	0x08007255
 8007384:	08007201 	.word	0x08007201
 8007388:	080072b5 	.word	0x080072b5
 800738c:	24000154 	.word	0x24000154
 8007390:	24001431 	.word	0x24001431
 8007394:	24001430 	.word	0x24001430
 8007398:	000f4240 	.word	0x000f4240
 800739c:	00000000 	.word	0x00000000

080073a0 <bno_read_fusion_data>:

AHRS_9_Axis_Data bno_read_fusion_data(){
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b0c2      	sub	sp, #264	@ 0x108
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ae:	6018      	str	r0, [r3, #0]

    int8_t comres = 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

    // Initialize the return structure
    AHRS_9_Axis_Data data = {0};
 80073b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80073be:	4618      	mov	r0, r3
 80073c0:	23f8      	movs	r3, #248	@ 0xf8
 80073c2:	461a      	mov	r2, r3
 80073c4:	2100      	movs	r1, #0
 80073c6:	f00d fa5d 	bl	8014884 <memset>

    // Read Euler angles (Orientation)
    comres += bno055_convert_float_euler_hpr_deg(euler_temp_data);
 80073ca:	4ba3      	ldr	r3, [pc, #652]	@ (8007658 <bno_read_fusion_data+0x2b8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff f82a 	bl	8006428 <bno055_convert_float_euler_hpr_deg>
 80073d4:	4603      	mov	r3, r0
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80073dc:	4413      	add	r3, r2
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    data.orientation[0] = euler_temp_data->p;
 80073e4:	4b9c      	ldr	r3, [pc, #624]	@ (8007658 <bno_read_fusion_data+0x2b8>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80073f2:	601a      	str	r2, [r3, #0]
    data.orientation[1] = euler_temp_data->r;
 80073f4:	4b98      	ldr	r3, [pc, #608]	@ (8007658 <bno_read_fusion_data+0x2b8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007402:	605a      	str	r2, [r3, #4]
    data.orientation[2] = euler_temp_data->h;
 8007404:	4b94      	ldr	r3, [pc, #592]	@ (8007658 <bno_read_fusion_data+0x2b8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007412:	609a      	str	r2, [r3, #8]

    // Read Quaternion data (Optional, not used in this example)
    comres += bno055_read_quaternion_wxyz(quaternion_temp_data);
 8007414:	4b91      	ldr	r3, [pc, #580]	@ (800765c <bno_read_fusion_data+0x2bc>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f7fe fedb 	bl	80061d4 <bno055_read_quaternion_wxyz>
 800741e:	4603      	mov	r3, r0
 8007420:	b2da      	uxtb	r2, r3
 8007422:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8007426:	4413      	add	r3, r2
 8007428:	b2db      	uxtb	r3, r3
 800742a:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    data.quaternion->w = quaternion_temp_data->w;
 800742e:	4b8b      	ldr	r3, [pc, #556]	@ (800765c <bno_read_fusion_data+0x2bc>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800743e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007442:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007446:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
    data.quaternion->x = quaternion_temp_data->x;
 800744a:	4b84      	ldr	r3, [pc, #528]	@ (800765c <bno_read_fusion_data+0x2bc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800745a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007462:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
    data.quaternion->y = quaternion_temp_data->y;
 8007466:	4b7d      	ldr	r3, [pc, #500]	@ (800765c <bno_read_fusion_data+0x2bc>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800747e:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
    data.quaternion->z = quaternion_temp_data->z;
 8007482:	4b76      	ldr	r3, [pc, #472]	@ (800765c <bno_read_fusion_data+0x2bc>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007496:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800749a:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90

    // Read Linear acceleration
    comres += bno055_convert_double_accel_xyz_mg(accel_temp_data);
 800749e:	4b70      	ldr	r3, [pc, #448]	@ (8007660 <bno_read_fusion_data+0x2c0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff f8d0 	bl	8006648 <bno055_convert_double_accel_xyz_mg>
 80074a8:	4603      	mov	r3, r0
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80074b0:	4413      	add	r3, r2
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    data.acceleration[0] = accel_temp_data->x / 1000; // Division by 1000 -> Converts millig to g
 80074b8:	4b69      	ldr	r3, [pc, #420]	@ (8007660 <bno_read_fusion_data+0x2c0>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	ed93 6b00 	vldr	d6, [r3]
 80074c0:	ed9f 5b63 	vldr	d5, [pc, #396]	@ 8007650 <bno_read_fusion_data+0x2b0>
 80074c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80074c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80074d0:	ed83 7b06 	vstr	d7, [r3, #24]
    data.acceleration[1] = accel_temp_data->y / 1000; // Division by 1000 -> Converts millig to g
 80074d4:	4b62      	ldr	r3, [pc, #392]	@ (8007660 <bno_read_fusion_data+0x2c0>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	ed93 6b02 	vldr	d6, [r3, #8]
 80074dc:	ed9f 5b5c 	vldr	d5, [pc, #368]	@ 8007650 <bno_read_fusion_data+0x2b0>
 80074e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80074e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80074ec:	ed83 7b08 	vstr	d7, [r3, #32]
    data.acceleration[2] = accel_temp_data->z / 1000; // Division by 1000 -> Converts millig to g
 80074f0:	4b5b      	ldr	r3, [pc, #364]	@ (8007660 <bno_read_fusion_data+0x2c0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	ed93 6b04 	vldr	d6, [r3, #16]
 80074f8:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 8007650 <bno_read_fusion_data+0x2b0>
 80074fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007504:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007508:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28

    comres += bno055_convert_double_gyro_xyz_dps(gyro_temp_xyz);
 800750c:	4b55      	ldr	r3, [pc, #340]	@ (8007664 <bno_read_fusion_data+0x2c4>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff f98d 	bl	8006830 <bno055_convert_double_gyro_xyz_dps>
 8007516:	4603      	mov	r3, r0
 8007518:	b2da      	uxtb	r2, r3
 800751a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800751e:	4413      	add	r3, r2
 8007520:	b2db      	uxtb	r3, r3
 8007522:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    data.gyroscope[0] = gyro_temp_xyz->x;
 8007526:	4b4f      	ldr	r3, [pc, #316]	@ (8007664 <bno_read_fusion_data+0x2c4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8007532:	f5a1 7180 	sub.w	r1, r1, #256	@ 0x100
 8007536:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    data.gyroscope[1] = gyro_temp_xyz->y;
 800753a:	4b4a      	ldr	r3, [pc, #296]	@ (8007664 <bno_read_fusion_data+0x2c4>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007542:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8007546:	f5a1 7180 	sub.w	r1, r1, #256	@ 0x100
 800754a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    data.gyroscope[2] = gyro_temp_xyz->z;
 800754e:	4b45      	ldr	r3, [pc, #276]	@ (8007664 <bno_read_fusion_data+0x2c4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007556:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800755a:	f5a1 7180 	sub.w	r1, r1, #256	@ 0x100
 800755e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Read Gravity data
    comres += bno055_convert_float_gravity_xyz_msq(gravity_temp_data);
 8007562:	4b41      	ldr	r3, [pc, #260]	@ (8007668 <bno_read_fusion_data+0x2c8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe ffce 	bl	8006508 <bno055_convert_float_gravity_xyz_msq>
 800756c:	4603      	mov	r3, r0
 800756e:	b2da      	uxtb	r2, r3
 8007570:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8007574:	4413      	add	r3, r2
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    data.gravity[0] = gravity_temp_data->x;
 800757c:	4b3a      	ldr	r3, [pc, #232]	@ (8007668 <bno_read_fusion_data+0x2c8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007586:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800758a:	649a      	str	r2, [r3, #72]	@ 0x48
    data.gravity[1] = gravity_temp_data->y;
 800758c:	4b36      	ldr	r3, [pc, #216]	@ (8007668 <bno_read_fusion_data+0x2c8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007596:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800759a:	64da      	str	r2, [r3, #76]	@ 0x4c
    data.gravity[2] = gravity_temp_data->z;
 800759c:	4b32      	ldr	r3, [pc, #200]	@ (8007668 <bno_read_fusion_data+0x2c8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80075aa:	651a      	str	r2, [r3, #80]	@ 0x50

    // Read Magnetometer data
    comres += bno055_convert_double_mag_x_uT(&data.magnetometer[0]);
 80075ac:	f107 0308 	add.w	r3, r7, #8
 80075b0:	3358      	adds	r3, #88	@ 0x58
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff f8a3 	bl	80066fe <bno055_convert_double_mag_x_uT>
 80075b8:	4603      	mov	r3, r0
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80075c0:	4413      	add	r3, r2
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    comres += bno055_convert_double_mag_y_uT(&data.magnetometer[1]);
 80075c8:	f107 0308 	add.w	r3, r7, #8
 80075cc:	3360      	adds	r3, #96	@ 0x60
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff f8c8 	bl	8006764 <bno055_convert_double_mag_y_uT>
 80075d4:	4603      	mov	r3, r0
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80075dc:	4413      	add	r3, r2
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    comres += bno055_convert_double_mag_z_uT(&data.magnetometer[2]);
 80075e4:	f107 0308 	add.w	r3, r7, #8
 80075e8:	3368      	adds	r3, #104	@ 0x68
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff f8ed 	bl	80067ca <bno055_convert_double_mag_z_uT>
 80075f0:	4603      	mov	r3, r0
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80075f8:	4413      	add	r3, r2
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

    comres += bno055_convert_float_temp_celsius(&data.temperature);
 8007600:	f107 0308 	add.w	r3, r7, #8
 8007604:	3370      	adds	r3, #112	@ 0x70
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe ffd2 	bl	80065b0 <bno055_convert_float_temp_celsius>
 800760c:	4603      	mov	r3, r0
 800760e:	b2da      	uxtb	r2, r3
 8007610:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8007614:	4413      	add	r3, r2
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    // Check communication results (Optional, for debugging)
    if (comres != 0) {
        //printf("Communication error: %d\n", comres);
    }

    return data;
 800761c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007620:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800762e:	4610      	mov	r0, r2
 8007630:	4619      	mov	r1, r3
 8007632:	23f8      	movs	r3, #248	@ 0xf8
 8007634:	461a      	mov	r2, r3
 8007636:	f00d f9a4 	bl	8014982 <memcpy>
}
 800763a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	f3af 8000 	nop.w
 8007650:	00000000 	.word	0x00000000
 8007654:	408f4000 	.word	0x408f4000
 8007658:	2400141c 	.word	0x2400141c
 800765c:	24001420 	.word	0x24001420
 8007660:	24001424 	.word	0x24001424
 8007664:	24001428 	.word	0x24001428
 8007668:	2400142c 	.word	0x2400142c

0800766c <bno055_print_fusion_data>:

void bno055_print_fusion_data(AHRS_9_Axis_Data *data) {
 800766c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007670:	b088      	sub	sp, #32
 8007672:	af06      	add	r7, sp, #24
 8007674:	6078      	str	r0, [r7, #4]
printf("BNO055 AHRS: \n");
 8007676:	4853      	ldr	r0, [pc, #332]	@ (80077c4 <bno055_print_fusion_data+0x158>)
 8007678:	f00d f804 	bl	8014684 <puts>
// Print orientation (Pitch, Roll, Yaw)
printf("Orientation -> ");
 800767c:	4852      	ldr	r0, [pc, #328]	@ (80077c8 <bno055_print_fusion_data+0x15c>)
 800767e:	f00c ff99 	bl	80145b4 <iprintf>
printf("Pitch: %.2f deg, Roll: %.2f deg, Yaw: %.2f deg \n", data->orientation[0], data->orientation[1], data->orientation[2]);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	edd3 7a00 	vldr	s15, [r3]
 8007688:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007692:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	edd3 6a02 	vldr	s13, [r3, #8]
 800769c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80076a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80076a4:	ed8d 7b00 	vstr	d7, [sp]
 80076a8:	ec53 2b15 	vmov	r2, r3, d5
 80076ac:	4847      	ldr	r0, [pc, #284]	@ (80077cc <bno055_print_fusion_data+0x160>)
 80076ae:	f00c ff81 	bl	80145b4 <iprintf>

//printf("Orientation from Quaternions -> ");
//printf("Pitch: %.2f deg, Roll: %.2f deg, Yaw: %.2f deg \n", data->orientation_q[0], data->orientation_q[1], data->orientation_q[2]);

// Print quaternion (W, X, Y, Z vectors)
printf("Quaternion -> ");
 80076b2:	4847      	ldr	r0, [pc, #284]	@ (80077d0 <bno055_print_fusion_data+0x164>)
 80076b4:	f00c ff7e 	bl	80145b4 <iprintf>
printf("W: %.2f , X: %.2f , Y: %.2f , Z: %.2f \n", data->quaternion->w, data->quaternion->x, data->quaternion->y, data->quaternion->z);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	e9d3 891e 	ldrd	r8, r9, [r3, #120]	@ 0x78
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	e9d1 0122 	ldrd	r0, r1, [r1, #136]	@ 0x88
 80076ca:	687c      	ldr	r4, [r7, #4]
 80076cc:	e9d4 4524 	ldrd	r4, r5, [r4, #144]	@ 0x90
 80076d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80076d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076d8:	e9cd 2300 	strd	r2, r3, [sp]
 80076dc:	4642      	mov	r2, r8
 80076de:	464b      	mov	r3, r9
 80076e0:	483c      	ldr	r0, [pc, #240]	@ (80077d4 <bno055_print_fusion_data+0x168>)
 80076e2:	f00c ff67 	bl	80145b4 <iprintf>

// Print acceleration (X, Y, Z)
printf("Acceleration -> ");
 80076e6:	483c      	ldr	r0, [pc, #240]	@ (80077d8 <bno055_print_fusion_data+0x16c>)
 80076e8:	f00c ff64 	bl	80145b4 <iprintf>
printf("X: %.2f g, Y: %.2f g, Z: %.2f g \n", data->acceleration[0], data->acceleration[1], data->acceleration[2]);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	@ 0x28
 80076fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007702:	e9cd 2300 	strd	r2, r3, [sp]
 8007706:	4622      	mov	r2, r4
 8007708:	462b      	mov	r3, r5
 800770a:	4834      	ldr	r0, [pc, #208]	@ (80077dc <bno055_print_fusion_data+0x170>)
 800770c:	f00c ff52 	bl	80145b4 <iprintf>

// Print gyroscope data (X, Y, Z)
printf("Angular Rate -> ");
 8007710:	4833      	ldr	r0, [pc, #204]	@ (80077e0 <bno055_print_fusion_data+0x174>)
 8007712:	f00c ff4f 	bl	80145b4 <iprintf>
printf("X: %.2f dps, Y: %.2f dps, Z: %.2f dps \n", data->gyroscope[0], data->gyroscope[1], data->gyroscope[2]);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	@ 0x40
 8007728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800772c:	e9cd 2300 	strd	r2, r3, [sp]
 8007730:	4622      	mov	r2, r4
 8007732:	462b      	mov	r3, r5
 8007734:	482b      	ldr	r0, [pc, #172]	@ (80077e4 <bno055_print_fusion_data+0x178>)
 8007736:	f00c ff3d 	bl	80145b4 <iprintf>

// Print gravity data (X, Y, Z)
printf("Gravity -> ");
 800773a:	482b      	ldr	r0, [pc, #172]	@ (80077e8 <bno055_print_fusion_data+0x17c>)
 800773c:	f00c ff3a 	bl	80145b4 <iprintf>
printf("X: %.2f m/s^2, Y: %.2f m/s^2, Z: %.2f m/s^2\n", data->gravity[0], data->gravity[1], data->gravity[2]);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007746:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8007750:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800775a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800775e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007762:	ed8d 7b00 	vstr	d7, [sp]
 8007766:	ec53 2b15 	vmov	r2, r3, d5
 800776a:	4820      	ldr	r0, [pc, #128]	@ (80077ec <bno055_print_fusion_data+0x180>)
 800776c:	f00c ff22 	bl	80145b4 <iprintf>

// Print magnetometer data (X, Y, Z)
printf("Magnetometer -> ");
 8007770:	481f      	ldr	r0, [pc, #124]	@ (80077f0 <bno055_print_fusion_data+0x184>)
 8007772:	f00c ff1f 	bl	80145b4 <iprintf>
printf("X: %.2f µT, Y: %.2f µT, Z: %.2f µT \n", data->magnetometer[0], data->magnetometer[1], data->magnetometer[2]);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	e9d1 011a 	ldrd	r0, r1, [r1, #104]	@ 0x68
 8007788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800778c:	e9cd 2300 	strd	r2, r3, [sp]
 8007790:	4622      	mov	r2, r4
 8007792:	462b      	mov	r3, r5
 8007794:	4817      	ldr	r0, [pc, #92]	@ (80077f4 <bno055_print_fusion_data+0x188>)
 8007796:	f00c ff0d 	bl	80145b4 <iprintf>

// Print magnetometer data (X, Y, Z)
printf("Temperature -> ");
 800779a:	4817      	ldr	r0, [pc, #92]	@ (80077f8 <bno055_print_fusion_data+0x18c>)
 800779c:	f00c ff0a 	bl	80145b4 <iprintf>
printf("Temperature: %.2f degC \n", data->temperature);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80077a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80077aa:	ec53 2b17 	vmov	r2, r3, d7
 80077ae:	4813      	ldr	r0, [pc, #76]	@ (80077fc <bno055_print_fusion_data+0x190>)
 80077b0:	f00c ff00 	bl	80145b4 <iprintf>

printf("----- \n");
 80077b4:	4812      	ldr	r0, [pc, #72]	@ (8007800 <bno055_print_fusion_data+0x194>)
 80077b6:	f00c ff65 	bl	8014684 <puts>
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80077c4:	08017f44 	.word	0x08017f44
 80077c8:	08017f54 	.word	0x08017f54
 80077cc:	08017f64 	.word	0x08017f64
 80077d0:	08017f98 	.word	0x08017f98
 80077d4:	08017fa8 	.word	0x08017fa8
 80077d8:	08017fd0 	.word	0x08017fd0
 80077dc:	08017fe4 	.word	0x08017fe4
 80077e0:	08018008 	.word	0x08018008
 80077e4:	0801801c 	.word	0x0801801c
 80077e8:	08018044 	.word	0x08018044
 80077ec:	08018050 	.word	0x08018050
 80077f0:	08018080 	.word	0x08018080
 80077f4:	08018094 	.word	0x08018094
 80077f8:	080180bc 	.word	0x080180bc
 80077fc:	080180cc 	.word	0x080180cc
 8007800:	080180e8 	.word	0x080180e8

08007804 <ms5607_delay_func>:
static struct MS5607UncompensatedValues uncompValues;
/* Compensated values structure */
static struct MS5607Readings readings;

void ms5607_delay_func(uint32_t period)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 800780c:	e008      	b.n	8007820 <ms5607_delay_func+0x1c>
	{
		for(i = 0; i < 84; i++)
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	e002      	b.n	800781a <ms5607_delay_func+0x16>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b53      	cmp	r3, #83	@ 0x53
 800781e:	d9f9      	bls.n	8007814 <ms5607_delay_func+0x10>
	while(period--)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	1e5a      	subs	r2, r3, #1
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1f1      	bne.n	800780e <ms5607_delay_func+0xa>
		{
			;
		}
	}
	//HAL_Delay(period/1000);
}
 800782a:	bf00      	nop
 800782c:	bf00      	nop
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0

  enableCSB();
 800783c:	f000 f87c 	bl	8007938 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8007840:	4b12      	ldr	r3, [pc, #72]	@ (800788c <MS5607_Init+0x54>)
 8007842:	221e      	movs	r2, #30
 8007844:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8007846:	230a      	movs	r3, #10
 8007848:	2201      	movs	r2, #1
 800784a:	4910      	ldr	r1, [pc, #64]	@ (800788c <MS5607_Init+0x54>)
 800784c:	4810      	ldr	r0, [pc, #64]	@ (8007890 <MS5607_Init+0x58>)
 800784e:	f007 fd8f 	bl	800f370 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8007852:	bf00      	nop
 8007854:	4b0e      	ldr	r3, [pc, #56]	@ (8007890 <MS5607_Init+0x58>)
 8007856:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d0f9      	beq.n	8007854 <MS5607_Init+0x1c>
//  HAL_Delay(3);
  ms5607_delay_func(3000);
 8007860:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007864:	f7ff ffce 	bl	8007804 <ms5607_delay_func>
  disableCSB();
 8007868:	f000 f872 	bl	8007950 <disableCSB>

  MS5607PromRead(&promData);
 800786c:	4809      	ldr	r0, [pc, #36]	@ (8007894 <MS5607_Init+0x5c>)
 800786e:	f000 f813 	bl	8007898 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 8007872:	4b08      	ldr	r3, [pc, #32]	@ (8007894 <MS5607_Init+0x5c>)
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <MS5607_Init+0x4a>
 800787a:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <MS5607_Init+0x5c>)
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	2bff      	cmp	r3, #255	@ 0xff
 8007880:	d101      	bne.n	8007886 <MS5607_Init+0x4e>
	 //printf("MS5607 Init fail! \n");
    return MS5607_STATE_FAILED;
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <MS5607_Init+0x50>
  } else {
	  //printf("MS5607 Init success! \n");
    return MS5607_STATE_READY;
 8007886:	2300      	movs	r3, #0
  }
}
 8007888:	4618      	mov	r0, r3
 800788a:	bd80      	pop	{r7, pc}
 800788c:	24001432 	.word	0x24001432
 8007890:	240016cc 	.word	0x240016cc
 8007894:	24001434 	.word	0x24001434

08007898 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 80078a4:	2300      	movs	r3, #0
 80078a6:	75fb      	strb	r3, [r7, #23]
 80078a8:	e01e      	b.n	80078e8 <MS5607PromRead+0x50>
    SPITransmitData = PROM_READ(address);
 80078aa:	7dfb      	ldrb	r3, [r7, #23]
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	b25b      	sxtb	r3, r3
 80078b0:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 80078b4:	b25b      	sxtb	r3, r3
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007930 <MS5607PromRead+0x98>)
 80078ba:	701a      	strb	r2, [r3, #0]
    enableCSB();
 80078bc:	f000 f83c 	bl	8007938 <enableCSB>
    HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 80078c0:	230a      	movs	r3, #10
 80078c2:	2201      	movs	r2, #1
 80078c4:	491a      	ldr	r1, [pc, #104]	@ (8007930 <MS5607PromRead+0x98>)
 80078c6:	481b      	ldr	r0, [pc, #108]	@ (8007934 <MS5607PromRead+0x9c>)
 80078c8:	f007 fd52 	bl	800f370 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(&hspi4, structPointer, 2, 10);
 80078cc:	230a      	movs	r3, #10
 80078ce:	2202      	movs	r2, #2
 80078d0:	6939      	ldr	r1, [r7, #16]
 80078d2:	4818      	ldr	r0, [pc, #96]	@ (8007934 <MS5607PromRead+0x9c>)
 80078d4:	f007 ff3a 	bl	800f74c <HAL_SPI_Receive>
    disableCSB();
 80078d8:	f000 f83a 	bl	8007950 <disableCSB>
    structPointer++;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	3302      	adds	r3, #2
 80078e0:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
 80078e4:	3301      	adds	r3, #1
 80078e6:	75fb      	strb	r3, [r7, #23]
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	2b07      	cmp	r3, #7
 80078ec:	d9dd      	bls.n	80078aa <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]
 80078f6:	e012      	b.n	800791e <MS5607PromRead+0x86>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	785a      	ldrb	r2, [r3, #1]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3301      	adds	r3, #1
 800790e:	7afa      	ldrb	r2, [r7, #11]
 8007910:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	3302      	adds	r3, #2
 8007916:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	3301      	adds	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b07      	cmp	r3, #7
 8007922:	d9e9      	bls.n	80078f8 <MS5607PromRead+0x60>
  }
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	24001432 	.word	0x24001432
 8007934:	240016cc 	.word	0x240016cc

08007938 <enableCSB>:
int32_t MS5607GetPressurePa(void){
  return readings.pressure;
}

/* Sets the CS pin */
void enableCSB(void){
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800793c:	2200      	movs	r2, #0
 800793e:	2110      	movs	r1, #16
 8007940:	4802      	ldr	r0, [pc, #8]	@ (800794c <enableCSB+0x14>)
 8007942:	f001 feb7 	bl	80096b4 <HAL_GPIO_WritePin>
}
 8007946:	bf00      	nop
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	58021000 	.word	0x58021000

08007950 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8007954:	2201      	movs	r2, #1
 8007956:	2110      	movs	r1, #16
 8007958:	4802      	ldr	r0, [pc, #8]	@ (8007964 <disableCSB+0x14>)
 800795a:	f001 feab 	bl	80096b4 <HAL_GPIO_WritePin>
}
 800795e:	bf00      	nop
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	58021000 	.word	0x58021000

08007968 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007970:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8007974:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d013      	beq.n	80079a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007980:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8007984:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8007988:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007990:	e000      	b.n	8007994 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007992:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007994:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f9      	beq.n	8007992 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800799e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80079a8:	687b      	ldr	r3, [r7, #4]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b086      	sub	sp, #24
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
	int i=0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	e009      	b.n	80079e0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	60ba      	str	r2, [r7, #8]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff ffc7 	bl	8007968 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	3301      	adds	r3, #1
 80079de:	617b      	str	r3, [r7, #20]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	dbf1      	blt.n	80079cc <_write+0x16>
	}
	return len;
 80079e8:	687b      	ldr	r3, [r7, #4]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80079f6:	f000 fc2d 	bl	8008254 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80079fa:	f001 fa89 	bl	8008f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80079fe:	f000 f81d 	bl	8007a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a02:	f000 fb15 	bl	8008030 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8007a06:	f000 f947 	bl	8007c98 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8007a0a:	f000 f885 	bl	8007b18 <MX_I2C1_Init>
  MX_I2C2_Init();
 8007a0e:	f000 f8c3 	bl	8007b98 <MX_I2C2_Init>
  MX_I2C4_Init();
 8007a12:	f000 f901 	bl	8007c18 <MX_I2C4_Init>
  MX_SPI1_Init();
 8007a16:	f000 f95d 	bl	8007cd4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8007a1a:	f000 f9b1 	bl	8007d80 <MX_SPI2_Init>
  MX_UART8_Init();
 8007a1e:	f000 fa5b 	bl	8007ed8 <MX_UART8_Init>
  MX_USART1_Init();
 8007a22:	f000 faa7 	bl	8007f74 <MX_USART1_Init>
  MX_SPI4_Init();
 8007a26:	f000 fa01 	bl	8007e2c <MX_SPI4_Init>
  MX_FATFS_Init();
 8007a2a:	f00b fcc5 	bl	80133b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
  SensorManager_Init();
 8007a2e:	f001 f995 	bl	8008d5c <SensorManager_Init>
  TestTelemetry();
 8007a32:	f001 fa1d 	bl	8008e70 <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <main+0x44>
	...

08007a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b09c      	sub	sp, #112	@ 0x70
 8007a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a46:	224c      	movs	r2, #76	@ 0x4c
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f00c ff1a 	bl	8014884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a50:	1d3b      	adds	r3, r7, #4
 8007a52:	2220      	movs	r2, #32
 8007a54:	2100      	movs	r1, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f00c ff14 	bl	8014884 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007a5c:	2002      	movs	r0, #2
 8007a5e:	f002 fc2b 	bl	800a2b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007a62:	2300      	movs	r3, #0
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	4b2b      	ldr	r3, [pc, #172]	@ (8007b14 <SystemClock_Config+0xd8>)
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8007b14 <SystemClock_Config+0xd8>)
 8007a6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007a70:	6193      	str	r3, [r2, #24]
 8007a72:	4b28      	ldr	r3, [pc, #160]	@ (8007b14 <SystemClock_Config+0xd8>)
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007a7e:	bf00      	nop
 8007a80:	4b24      	ldr	r3, [pc, #144]	@ (8007b14 <SystemClock_Config+0xd8>)
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a8c:	d1f8      	bne.n	8007a80 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007a92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a98:	2302      	movs	r3, #2
 8007a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8007aa4:	231f      	movs	r3, #31
 8007aa6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007aac:	2302      	movs	r3, #2
 8007aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007ab4:	230c      	movs	r3, #12
 8007ab6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8007abc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f002 fc30 	bl	800a32c <HAL_RCC_OscConfig>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007ad2:	f000 fbeb 	bl	80082ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ad6:	233f      	movs	r3, #63	@ 0x3f
 8007ad8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ada:	2303      	movs	r3, #3
 8007adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007ae2:	2308      	movs	r3, #8
 8007ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007ae6:	2340      	movs	r3, #64	@ 0x40
 8007ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007aea:	2340      	movs	r3, #64	@ 0x40
 8007aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007af2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007af4:	2340      	movs	r3, #64	@ 0x40
 8007af6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007af8:	1d3b      	adds	r3, r7, #4
 8007afa:	2103      	movs	r1, #3
 8007afc:	4618      	mov	r0, r3
 8007afe:	f002 ffef 	bl	800aae0 <HAL_RCC_ClockConfig>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007b08:	f000 fbd0 	bl	80082ac <Error_Handler>
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	3770      	adds	r7, #112	@ 0x70
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	58024800 	.word	0x58024800

08007b18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007b90 <MX_I2C1_Init+0x78>)
 8007b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 8007b22:	4b1a      	ldr	r3, [pc, #104]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b24:	4a1b      	ldr	r2, [pc, #108]	@ (8007b94 <MX_I2C1_Init+0x7c>)
 8007b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007b28:	4b18      	ldr	r3, [pc, #96]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b2e:	4b17      	ldr	r3, [pc, #92]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b34:	4b15      	ldr	r3, [pc, #84]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007b3a:	4b14      	ldr	r3, [pc, #80]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007b40:	4b12      	ldr	r3, [pc, #72]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b46:	4b11      	ldr	r3, [pc, #68]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007b52:	480e      	ldr	r0, [pc, #56]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b54:	f001 fdc8 	bl	80096e8 <HAL_I2C_Init>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007b5e:	f000 fba5 	bl	80082ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007b62:	2100      	movs	r1, #0
 8007b64:	4809      	ldr	r0, [pc, #36]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b66:	f002 fb0f 	bl	800a188 <HAL_I2CEx_ConfigAnalogFilter>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007b70:	f000 fb9c 	bl	80082ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007b74:	2100      	movs	r1, #0
 8007b76:	4805      	ldr	r0, [pc, #20]	@ (8007b8c <MX_I2C1_Init+0x74>)
 8007b78:	f002 fb51 	bl	800a21e <HAL_I2CEx_ConfigDigitalFilter>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007b82:	f000 fb93 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007b86:	bf00      	nop
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	24001444 	.word	0x24001444
 8007b90:	40005400 	.word	0x40005400
 8007b94:	20a0a3f6 	.word	0x20a0a3f6

08007b98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8007c10 <MX_I2C2_Init+0x78>)
 8007ba0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 8007ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c14 <MX_I2C2_Init+0x7c>)
 8007ba6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007ba8:	4b18      	ldr	r3, [pc, #96]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007bae:	4b17      	ldr	r3, [pc, #92]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007bb4:	4b15      	ldr	r3, [pc, #84]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007bba:	4b14      	ldr	r3, [pc, #80]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007bc0:	4b12      	ldr	r3, [pc, #72]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007bc6:	4b11      	ldr	r3, [pc, #68]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007bd2:	480e      	ldr	r0, [pc, #56]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007bd4:	f001 fd88 	bl	80096e8 <HAL_I2C_Init>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007bde:	f000 fb65 	bl	80082ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007be2:	2100      	movs	r1, #0
 8007be4:	4809      	ldr	r0, [pc, #36]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007be6:	f002 facf 	bl	800a188 <HAL_I2CEx_ConfigAnalogFilter>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007bf0:	f000 fb5c 	bl	80082ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4805      	ldr	r0, [pc, #20]	@ (8007c0c <MX_I2C2_Init+0x74>)
 8007bf8:	f002 fb11 	bl	800a21e <HAL_I2CEx_ConfigDigitalFilter>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007c02:	f000 fb53 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007c06:	bf00      	nop
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	24001498 	.word	0x24001498
 8007c10:	40005800 	.word	0x40005800
 8007c14:	20a0a3f6 	.word	0x20a0a3f6

08007c18 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8007c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007c90 <MX_I2C4_Init+0x78>)
 8007c20:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8007c22:	4b1a      	ldr	r3, [pc, #104]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c24:	4a1b      	ldr	r2, [pc, #108]	@ (8007c94 <MX_I2C4_Init+0x7c>)
 8007c26:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8007c28:	4b18      	ldr	r3, [pc, #96]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c2e:	4b17      	ldr	r3, [pc, #92]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c30:	2201      	movs	r2, #1
 8007c32:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007c34:	4b15      	ldr	r3, [pc, #84]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8007c3a:	4b14      	ldr	r3, [pc, #80]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007c40:	4b12      	ldr	r3, [pc, #72]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007c46:	4b11      	ldr	r3, [pc, #68]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8007c52:	480e      	ldr	r0, [pc, #56]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c54:	f001 fd48 	bl	80096e8 <HAL_I2C_Init>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8007c5e:	f000 fb25 	bl	80082ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8007c62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c66:	4809      	ldr	r0, [pc, #36]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c68:	f002 fa8e 	bl	800a188 <HAL_I2CEx_ConfigAnalogFilter>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8007c72:	f000 fb1b 	bl	80082ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8007c76:	2100      	movs	r1, #0
 8007c78:	4804      	ldr	r0, [pc, #16]	@ (8007c8c <MX_I2C4_Init+0x74>)
 8007c7a:	f002 fad0 	bl	800a21e <HAL_I2CEx_ConfigDigitalFilter>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8007c84:	f000 fb12 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8007c88:	bf00      	nop
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	240014ec 	.word	0x240014ec
 8007c90:	58001c00 	.word	0x58001c00
 8007c94:	60405858 	.word	0x60405858

08007c98 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007ccc <MX_SDMMC1_SD_Init+0x34>)
 8007c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8007cd0 <MX_SDMMC1_SD_Init+0x38>)
 8007ca0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <MX_SDMMC1_SD_Init+0x34>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007ca8:	4b08      	ldr	r3, [pc, #32]	@ (8007ccc <MX_SDMMC1_SD_Init+0x34>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007cae:	4b07      	ldr	r3, [pc, #28]	@ (8007ccc <MX_SDMMC1_SD_Init+0x34>)
 8007cb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007cb4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007cb6:	4b05      	ldr	r3, [pc, #20]	@ (8007ccc <MX_SDMMC1_SD_Init+0x34>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8007cbc:	4b03      	ldr	r3, [pc, #12]	@ (8007ccc <MX_SDMMC1_SD_Init+0x34>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8007cc2:	bf00      	nop
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	24001540 	.word	0x24001540
 8007cd0:	52007000 	.word	0x52007000

08007cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007cd8:	4b27      	ldr	r3, [pc, #156]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007cda:	4a28      	ldr	r2, [pc, #160]	@ (8007d7c <MX_SPI1_Init+0xa8>)
 8007cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007cde:	4b26      	ldr	r3, [pc, #152]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007ce0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007ce6:	4b24      	ldr	r3, [pc, #144]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007cec:	4b22      	ldr	r3, [pc, #136]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007cee:	2207      	movs	r2, #7
 8007cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007cf2:	4b21      	ldr	r3, [pc, #132]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d00:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007d06:	4b1c      	ldr	r3, [pc, #112]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d08:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8007d0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007d14:	4b18      	ldr	r3, [pc, #96]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d1a:	4b17      	ldr	r3, [pc, #92]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8007d20:	4b15      	ldr	r3, [pc, #84]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007d26:	4b14      	ldr	r3, [pc, #80]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007d2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007d2e:	4b12      	ldr	r3, [pc, #72]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007d34:	4b10      	ldr	r3, [pc, #64]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007d40:	4b0d      	ldr	r3, [pc, #52]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007d46:	4b0c      	ldr	r3, [pc, #48]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007d52:	4b09      	ldr	r3, [pc, #36]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007d58:	4b07      	ldr	r3, [pc, #28]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007d5e:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007d64:	4804      	ldr	r0, [pc, #16]	@ (8007d78 <MX_SPI1_Init+0xa4>)
 8007d66:	f007 f9df 	bl	800f128 <HAL_SPI_Init>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8007d70:	f000 fa9c 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007d74:	bf00      	nop
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	240015bc 	.word	0x240015bc
 8007d7c:	40013000 	.word	0x40013000

08007d80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007d84:	4b27      	ldr	r3, [pc, #156]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007d86:	4a28      	ldr	r2, [pc, #160]	@ (8007e28 <MX_SPI2_Init+0xa8>)
 8007d88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007d8a:	4b26      	ldr	r3, [pc, #152]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007d8c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007d90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007d92:	4b24      	ldr	r3, [pc, #144]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d98:	4b22      	ldr	r3, [pc, #136]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007d9a:	2207      	movs	r2, #7
 8007d9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d9e:	4b21      	ldr	r3, [pc, #132]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007da4:	4b1f      	ldr	r3, [pc, #124]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007daa:	4b1e      	ldr	r3, [pc, #120]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007dac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007db0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007db2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007db4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8007db8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007dba:	4b1a      	ldr	r3, [pc, #104]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007dc0:	4b18      	ldr	r3, [pc, #96]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dc6:	4b17      	ldr	r3, [pc, #92]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007dcc:	4b15      	ldr	r3, [pc, #84]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007dd2:	4b14      	ldr	r3, [pc, #80]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007dd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007dd8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007dda:	4b12      	ldr	r3, [pc, #72]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007de0:	4b10      	ldr	r3, [pc, #64]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007de6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007dec:	4b0d      	ldr	r3, [pc, #52]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007df2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007dfe:	4b09      	ldr	r3, [pc, #36]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007e04:	4b07      	ldr	r3, [pc, #28]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007e0a:	4b06      	ldr	r3, [pc, #24]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007e10:	4804      	ldr	r0, [pc, #16]	@ (8007e24 <MX_SPI2_Init+0xa4>)
 8007e12:	f007 f989 	bl	800f128 <HAL_SPI_Init>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8007e1c:	f000 fa46 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007e20:	bf00      	nop
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	24001644 	.word	0x24001644
 8007e28:	40003800 	.word	0x40003800

08007e2c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8007e30:	4b27      	ldr	r3, [pc, #156]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e32:	4a28      	ldr	r2, [pc, #160]	@ (8007ed4 <MX_SPI4_Init+0xa8>)
 8007e34:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8007e36:	4b26      	ldr	r3, [pc, #152]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e38:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007e3c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8007e3e:	4b24      	ldr	r3, [pc, #144]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8007e44:	4b22      	ldr	r3, [pc, #136]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e46:	2207      	movs	r2, #7
 8007e48:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e4a:	4b21      	ldr	r3, [pc, #132]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007e50:	4b1f      	ldr	r3, [pc, #124]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8007e56:	4b1e      	ldr	r3, [pc, #120]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e58:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007e5c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e60:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8007e64:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007e66:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8007e6c:	4b18      	ldr	r3, [pc, #96]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e72:	4b17      	ldr	r3, [pc, #92]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8007e78:	4b15      	ldr	r3, [pc, #84]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007e7e:	4b14      	ldr	r3, [pc, #80]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007e84:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007e86:	4b12      	ldr	r3, [pc, #72]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007e8c:	4b10      	ldr	r3, [pc, #64]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007e92:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007e98:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007eaa:	4b09      	ldr	r3, [pc, #36]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007eb0:	4b07      	ldr	r3, [pc, #28]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007eb6:	4b06      	ldr	r3, [pc, #24]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8007ebc:	4804      	ldr	r0, [pc, #16]	@ (8007ed0 <MX_SPI4_Init+0xa4>)
 8007ebe:	f007 f933 	bl	800f128 <HAL_SPI_Init>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8007ec8:	f000 f9f0 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8007ecc:	bf00      	nop
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	240016cc 	.word	0x240016cc
 8007ed4:	40013400 	.word	0x40013400

08007ed8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8007edc:	4b23      	ldr	r3, [pc, #140]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007ede:	4a24      	ldr	r2, [pc, #144]	@ (8007f70 <MX_UART8_Init+0x98>)
 8007ee0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8007ee2:	4b22      	ldr	r3, [pc, #136]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007ee8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8007eea:	4b20      	ldr	r3, [pc, #128]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8007ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8007ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8007efc:	4b1b      	ldr	r3, [pc, #108]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007efe:	220c      	movs	r2, #12
 8007f00:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8007f02:	4b1a      	ldr	r3, [pc, #104]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007f04:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8007f08:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f0a:	4b18      	ldr	r3, [pc, #96]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f10:	4b16      	ldr	r3, [pc, #88]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007f16:	4b15      	ldr	r3, [pc, #84]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f1c:	4b13      	ldr	r3, [pc, #76]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8007f22:	4812      	ldr	r0, [pc, #72]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007f24:	f008 faa7 	bl	8010476 <HAL_UART_Init>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8007f2e:	f000 f9bd 	bl	80082ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f32:	2100      	movs	r1, #0
 8007f34:	480d      	ldr	r0, [pc, #52]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007f36:	f009 fbb4 	bl	80116a2 <HAL_UARTEx_SetTxFifoThreshold>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8007f40:	f000 f9b4 	bl	80082ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f44:	2100      	movs	r1, #0
 8007f46:	4809      	ldr	r0, [pc, #36]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007f48:	f009 fbe9 	bl	801171e <HAL_UARTEx_SetRxFifoThreshold>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8007f52:	f000 f9ab 	bl	80082ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8007f56:	4805      	ldr	r0, [pc, #20]	@ (8007f6c <MX_UART8_Init+0x94>)
 8007f58:	f009 fb6a 	bl	8011630 <HAL_UARTEx_DisableFifoMode>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8007f62:	f000 f9a3 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8007f66:	bf00      	nop
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	24001754 	.word	0x24001754
 8007f70:	40007c00 	.word	0x40007c00

08007f74 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8007f78:	4b2b      	ldr	r3, [pc, #172]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800802c <MX_USART1_Init+0xb8>)
 8007f7c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8007f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007f84:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8007f86:	4b28      	ldr	r3, [pc, #160]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8007f8c:	4b26      	ldr	r3, [pc, #152]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8007f92:	4b25      	ldr	r3, [pc, #148]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8007f98:	4b23      	ldr	r3, [pc, #140]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007f9a:	220c      	movs	r2, #12
 8007f9c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8007f9e:	4b22      	ldr	r3, [pc, #136]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8007fa4:	4b20      	ldr	r3, [pc, #128]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8007faa:	4b1f      	ldr	r3, [pc, #124]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8007fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 8007fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007fb8:	2201      	movs	r2, #1
 8007fba:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8007fbc:	481a      	ldr	r0, [pc, #104]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007fbe:	f009 fc3b 	bl	8011838 <HAL_USART_Init>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8007fc8:	f000 f970 	bl	80082ac <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4816      	ldr	r0, [pc, #88]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007fd0:	f00a fb62 	bl	8012698 <HAL_USARTEx_SetTxFifoThreshold>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8007fda:	f000 f967 	bl	80082ac <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007fde:	2100      	movs	r1, #0
 8007fe0:	4811      	ldr	r0, [pc, #68]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007fe2:	f00a fb97 	bl	8012714 <HAL_USARTEx_SetRxFifoThreshold>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8007fec:	f000 f95e 	bl	80082ac <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	480d      	ldr	r0, [pc, #52]	@ (8008028 <MX_USART1_Init+0xb4>)
 8007ff4:	f00a fada 	bl	80125ac <HAL_USARTEx_ConfigNSS>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8007ffe:	f000 f955 	bl	80082ac <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8008002:	4809      	ldr	r0, [pc, #36]	@ (8008028 <MX_USART1_Init+0xb4>)
 8008004:	f00a fb0f 	bl	8012626 <HAL_USARTEx_DisableFifoMode>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 800800e:	f000 f94d 	bl	80082ac <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8008012:	4805      	ldr	r0, [pc, #20]	@ (8008028 <MX_USART1_Init+0xb4>)
 8008014:	f00a fa75 	bl	8012502 <HAL_USARTEx_EnableSlaveMode>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <MX_USART1_Init+0xae>
  {
    Error_Handler();
 800801e:	f000 f945 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008022:	bf00      	nop
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	240017e8 	.word	0x240017e8
 800802c:	40011000 	.word	0x40011000

08008030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08c      	sub	sp, #48	@ 0x30
 8008034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008036:	f107 031c 	add.w	r3, r7, #28
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	605a      	str	r2, [r3, #4]
 8008040:	609a      	str	r2, [r3, #8]
 8008042:	60da      	str	r2, [r3, #12]
 8008044:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008046:	4b7d      	ldr	r3, [pc, #500]	@ (800823c <MX_GPIO_Init+0x20c>)
 8008048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800804c:	4a7b      	ldr	r2, [pc, #492]	@ (800823c <MX_GPIO_Init+0x20c>)
 800804e:	f043 0304 	orr.w	r3, r3, #4
 8008052:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008056:	4b79      	ldr	r3, [pc, #484]	@ (800823c <MX_GPIO_Init+0x20c>)
 8008058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008064:	4b75      	ldr	r3, [pc, #468]	@ (800823c <MX_GPIO_Init+0x20c>)
 8008066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800806a:	4a74      	ldr	r2, [pc, #464]	@ (800823c <MX_GPIO_Init+0x20c>)
 800806c:	f043 0310 	orr.w	r3, r3, #16
 8008070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008074:	4b71      	ldr	r3, [pc, #452]	@ (800823c <MX_GPIO_Init+0x20c>)
 8008076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008082:	4b6e      	ldr	r3, [pc, #440]	@ (800823c <MX_GPIO_Init+0x20c>)
 8008084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008088:	4a6c      	ldr	r2, [pc, #432]	@ (800823c <MX_GPIO_Init+0x20c>)
 800808a:	f043 0302 	orr.w	r3, r3, #2
 800808e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008092:	4b6a      	ldr	r3, [pc, #424]	@ (800823c <MX_GPIO_Init+0x20c>)
 8008094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080a0:	4b66      	ldr	r3, [pc, #408]	@ (800823c <MX_GPIO_Init+0x20c>)
 80080a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080a6:	4a65      	ldr	r2, [pc, #404]	@ (800823c <MX_GPIO_Init+0x20c>)
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80080b0:	4b62      	ldr	r3, [pc, #392]	@ (800823c <MX_GPIO_Init+0x20c>)
 80080b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80080be:	4b5f      	ldr	r3, [pc, #380]	@ (800823c <MX_GPIO_Init+0x20c>)
 80080c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080c4:	4a5d      	ldr	r2, [pc, #372]	@ (800823c <MX_GPIO_Init+0x20c>)
 80080c6:	f043 0308 	orr.w	r3, r3, #8
 80080ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80080ce:	4b5b      	ldr	r3, [pc, #364]	@ (800823c <MX_GPIO_Init+0x20c>)
 80080d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	60bb      	str	r3, [r7, #8]
 80080da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80080dc:	4b57      	ldr	r3, [pc, #348]	@ (800823c <MX_GPIO_Init+0x20c>)
 80080de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080e2:	4a56      	ldr	r2, [pc, #344]	@ (800823c <MX_GPIO_Init+0x20c>)
 80080e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80080ec:	4b53      	ldr	r3, [pc, #332]	@ (800823c <MX_GPIO_Init+0x20c>)
 80080ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080f6:	607b      	str	r3, [r7, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80080fa:	2200      	movs	r2, #0
 80080fc:	2110      	movs	r1, #16
 80080fe:	4850      	ldr	r0, [pc, #320]	@ (8008240 <MX_GPIO_Init+0x210>)
 8008100:	f001 fad8 	bl	80096b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8008104:	2200      	movs	r2, #0
 8008106:	2110      	movs	r1, #16
 8008108:	484e      	ldr	r0, [pc, #312]	@ (8008244 <MX_GPIO_Init+0x214>)
 800810a:	f001 fad3 	bl	80096b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 800810e:	2200      	movs	r2, #0
 8008110:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8008114:	484c      	ldr	r0, [pc, #304]	@ (8008248 <MX_GPIO_Init+0x218>)
 8008116:	f001 facd 	bl	80096b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 800811a:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 800811e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008120:	2300      	movs	r3, #0
 8008122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008124:	2300      	movs	r3, #0
 8008126:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008128:	f107 031c 	add.w	r3, r7, #28
 800812c:	4619      	mov	r1, r3
 800812e:	4847      	ldr	r0, [pc, #284]	@ (800824c <MX_GPIO_Init+0x21c>)
 8008130:	f001 f900 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8008134:	2310      	movs	r3, #16
 8008136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008138:	2301      	movs	r3, #1
 800813a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800813c:	2300      	movs	r3, #0
 800813e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008140:	2302      	movs	r3, #2
 8008142:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8008144:	f107 031c 	add.w	r3, r7, #28
 8008148:	4619      	mov	r1, r3
 800814a:	483d      	ldr	r0, [pc, #244]	@ (8008240 <MX_GPIO_Init+0x210>)
 800814c:	f001 f8f2 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008150:	2302      	movs	r3, #2
 8008152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008154:	2303      	movs	r3, #3
 8008156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008158:	2300      	movs	r3, #0
 800815a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800815c:	f107 031c 	add.w	r3, r7, #28
 8008160:	4619      	mov	r1, r3
 8008162:	483b      	ldr	r0, [pc, #236]	@ (8008250 <MX_GPIO_Init+0x220>)
 8008164:	f001 f8e6 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008168:	2308      	movs	r3, #8
 800816a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800816c:	2303      	movs	r3, #3
 800816e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008170:	2300      	movs	r3, #0
 8008172:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008174:	f107 031c 	add.w	r3, r7, #28
 8008178:	4619      	mov	r1, r3
 800817a:	4834      	ldr	r0, [pc, #208]	@ (800824c <MX_GPIO_Init+0x21c>)
 800817c:	f001 f8da 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8008180:	2310      	movs	r3, #16
 8008182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008184:	2301      	movs	r3, #1
 8008186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008188:	2300      	movs	r3, #0
 800818a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800818c:	2300      	movs	r3, #0
 800818e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8008190:	f107 031c 	add.w	r3, r7, #28
 8008194:	4619      	mov	r1, r3
 8008196:	482b      	ldr	r0, [pc, #172]	@ (8008244 <MX_GPIO_Init+0x214>)
 8008198:	f001 f8cc 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800819c:	2304      	movs	r3, #4
 800819e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081a0:	2303      	movs	r3, #3
 80081a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081a8:	f107 031c 	add.w	r3, r7, #28
 80081ac:	4619      	mov	r1, r3
 80081ae:	4826      	ldr	r0, [pc, #152]	@ (8008248 <MX_GPIO_Init+0x218>)
 80081b0:	f001 f8c0 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 80081b4:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80081b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081ba:	2300      	movs	r3, #0
 80081bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80081c2:	f107 031c 	add.w	r3, r7, #28
 80081c6:	4619      	mov	r1, r3
 80081c8:	481d      	ldr	r0, [pc, #116]	@ (8008240 <MX_GPIO_Init+0x210>)
 80081ca:	f001 f8b3 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 80081ce:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80081d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081d4:	2301      	movs	r3, #1
 80081d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d8:	2300      	movs	r3, #0
 80081da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081dc:	2300      	movs	r3, #0
 80081de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081e0:	f107 031c 	add.w	r3, r7, #28
 80081e4:	4619      	mov	r1, r3
 80081e6:	4818      	ldr	r0, [pc, #96]	@ (8008248 <MX_GPIO_Init+0x218>)
 80081e8:	f001 f8a4 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80081ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081f2:	2303      	movs	r3, #3
 80081f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80081fa:	f107 031c 	add.w	r3, r7, #28
 80081fe:	4619      	mov	r1, r3
 8008200:	480f      	ldr	r0, [pc, #60]	@ (8008240 <MX_GPIO_Init+0x210>)
 8008202:	f001 f897 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008206:	2308      	movs	r3, #8
 8008208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800820a:	2303      	movs	r3, #3
 800820c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800820e:	2300      	movs	r3, #0
 8008210:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008212:	f107 031c 	add.w	r3, r7, #28
 8008216:	4619      	mov	r1, r3
 8008218:	480a      	ldr	r0, [pc, #40]	@ (8008244 <MX_GPIO_Init+0x214>)
 800821a:	f001 f88b 	bl	8009334 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 800821e:	2200      	movs	r2, #0
 8008220:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008224:	4808      	ldr	r0, [pc, #32]	@ (8008248 <MX_GPIO_Init+0x218>)
 8008226:	f001 fa45 	bl	80096b4 <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 800822a:	2200      	movs	r2, #0
 800822c:	2110      	movs	r1, #16
 800822e:	4805      	ldr	r0, [pc, #20]	@ (8008244 <MX_GPIO_Init+0x214>)
 8008230:	f001 fa40 	bl	80096b4 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8008234:	bf00      	nop
 8008236:	3730      	adds	r7, #48	@ 0x30
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	58024400 	.word	0x58024400
 8008240:	58021000 	.word	0x58021000
 8008244:	58020000 	.word	0x58020000
 8008248:	58020400 	.word	0x58020400
 800824c:	58020800 	.word	0x58020800
 8008250:	58020c00 	.word	0x58020c00

08008254 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800825a:	463b      	mov	r3, r7
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	605a      	str	r2, [r3, #4]
 8008262:	609a      	str	r2, [r3, #8]
 8008264:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8008266:	f000 ffed 	bl	8009244 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800826a:	2301      	movs	r3, #1
 800826c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800826e:	2300      	movs	r3, #0
 8008270:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8008272:	2300      	movs	r3, #0
 8008274:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8008276:	231f      	movs	r3, #31
 8008278:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800827a:	2387      	movs	r3, #135	@ 0x87
 800827c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800827e:	2300      	movs	r3, #0
 8008280:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8008282:	2300      	movs	r3, #0
 8008284:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8008286:	2301      	movs	r3, #1
 8008288:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800828a:	2301      	movs	r3, #1
 800828c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800828e:	2300      	movs	r3, #0
 8008290:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008296:	463b      	mov	r3, r7
 8008298:	4618      	mov	r0, r3
 800829a:	f001 f80b 	bl	80092b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800829e:	2004      	movs	r0, #4
 80082a0:	f000 ffe8 	bl	8009274 <HAL_MPU_Enable>

}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80082b0:	b672      	cpsid	i
}
 80082b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80082b4:	bf00      	nop
 80082b6:	e7fd      	b.n	80082b4 <Error_Handler+0x8>

080082b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082be:	4b0a      	ldr	r3, [pc, #40]	@ (80082e8 <HAL_MspInit+0x30>)
 80082c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082c4:	4a08      	ldr	r2, [pc, #32]	@ (80082e8 <HAL_MspInit+0x30>)
 80082c6:	f043 0302 	orr.w	r3, r3, #2
 80082ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80082ce:	4b06      	ldr	r3, [pc, #24]	@ (80082e8 <HAL_MspInit+0x30>)
 80082d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	607b      	str	r3, [r7, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	58024400 	.word	0x58024400

080082ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b0bc      	sub	sp, #240	@ 0xf0
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	605a      	str	r2, [r3, #4]
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	60da      	str	r2, [r3, #12]
 8008302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008304:	f107 0320 	add.w	r3, r7, #32
 8008308:	22b8      	movs	r2, #184	@ 0xb8
 800830a:	2100      	movs	r1, #0
 800830c:	4618      	mov	r0, r3
 800830e:	f00c fab9 	bl	8014884 <memset>
  if(hi2c->Instance==I2C1)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a74      	ldr	r2, [pc, #464]	@ (80084e8 <HAL_I2C_MspInit+0x1fc>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d147      	bne.n	80083ac <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800831c:	f04f 0208 	mov.w	r2, #8
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8008328:	2300      	movs	r3, #0
 800832a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800832e:	f107 0320 	add.w	r3, r7, #32
 8008332:	4618      	mov	r0, r3
 8008334:	f002 ff60 	bl	800b1f8 <HAL_RCCEx_PeriphCLKConfig>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800833e:	f7ff ffb5 	bl	80082ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008342:	4b6a      	ldr	r3, [pc, #424]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 8008344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008348:	4a68      	ldr	r2, [pc, #416]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 800834a:	f043 0302 	orr.w	r3, r3, #2
 800834e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008352:	4b66      	ldr	r3, [pc, #408]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 8008354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8008360:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8008364:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008368:	2312      	movs	r3, #18
 800836a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800836e:	2300      	movs	r3, #0
 8008370:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008374:	2300      	movs	r3, #0
 8008376:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800837a:	2304      	movs	r3, #4
 800837c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008380:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8008384:	4619      	mov	r1, r3
 8008386:	485a      	ldr	r0, [pc, #360]	@ (80084f0 <HAL_I2C_MspInit+0x204>)
 8008388:	f000 ffd4 	bl	8009334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800838c:	4b57      	ldr	r3, [pc, #348]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 800838e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008392:	4a56      	ldr	r2, [pc, #344]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 8008394:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008398:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800839c:	4b53      	ldr	r3, [pc, #332]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 800839e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083a6:	61bb      	str	r3, [r7, #24]
 80083a8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80083aa:	e098      	b.n	80084de <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a50      	ldr	r2, [pc, #320]	@ (80084f4 <HAL_I2C_MspInit+0x208>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d147      	bne.n	8008446 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80083b6:	f04f 0208 	mov.w	r2, #8
 80083ba:	f04f 0300 	mov.w	r3, #0
 80083be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80083c2:	2300      	movs	r3, #0
 80083c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80083c8:	f107 0320 	add.w	r3, r7, #32
 80083cc:	4618      	mov	r0, r3
 80083ce:	f002 ff13 	bl	800b1f8 <HAL_RCCEx_PeriphCLKConfig>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80083d8:	f7ff ff68 	bl	80082ac <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083dc:	4b43      	ldr	r3, [pc, #268]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 80083de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083e2:	4a42      	ldr	r2, [pc, #264]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 80083e4:	f043 0302 	orr.w	r3, r3, #2
 80083e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80083ec:	4b3f      	ldr	r3, [pc, #252]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 80083ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	617b      	str	r3, [r7, #20]
 80083f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80083fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80083fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008402:	2312      	movs	r3, #18
 8008404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008408:	2300      	movs	r3, #0
 800840a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800840e:	2300      	movs	r3, #0
 8008410:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008414:	2304      	movs	r3, #4
 8008416:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800841a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800841e:	4619      	mov	r1, r3
 8008420:	4833      	ldr	r0, [pc, #204]	@ (80084f0 <HAL_I2C_MspInit+0x204>)
 8008422:	f000 ff87 	bl	8009334 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008426:	4b31      	ldr	r3, [pc, #196]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 8008428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800842c:	4a2f      	ldr	r2, [pc, #188]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 800842e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008432:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008436:	4b2d      	ldr	r3, [pc, #180]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 8008438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800843c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	693b      	ldr	r3, [r7, #16]
}
 8008444:	e04b      	b.n	80084de <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a2b      	ldr	r2, [pc, #172]	@ (80084f8 <HAL_I2C_MspInit+0x20c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d146      	bne.n	80084de <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8008450:	f04f 0210 	mov.w	r2, #16
 8008454:	f04f 0300 	mov.w	r3, #0
 8008458:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800845c:	2300      	movs	r3, #0
 800845e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008462:	f107 0320 	add.w	r3, r7, #32
 8008466:	4618      	mov	r0, r3
 8008468:	f002 fec6 	bl	800b1f8 <HAL_RCCEx_PeriphCLKConfig>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8008472:	f7ff ff1b 	bl	80082ac <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008476:	4b1d      	ldr	r3, [pc, #116]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 8008478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800847c:	4a1b      	ldr	r2, [pc, #108]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 800847e:	f043 0308 	orr.w	r3, r3, #8
 8008482:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008486:	4b19      	ldr	r3, [pc, #100]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 8008488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800848c:	f003 0308 	and.w	r3, r3, #8
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8008494:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8008498:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800849c:	2312      	movs	r3, #18
 800849e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084a8:	2303      	movs	r3, #3
 80084aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80084ae:	2304      	movs	r3, #4
 80084b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80084b8:	4619      	mov	r1, r3
 80084ba:	4810      	ldr	r0, [pc, #64]	@ (80084fc <HAL_I2C_MspInit+0x210>)
 80084bc:	f000 ff3a 	bl	8009334 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80084c0:	4b0a      	ldr	r3, [pc, #40]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 80084c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084c6:	4a09      	ldr	r2, [pc, #36]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 80084c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80084d0:	4b06      	ldr	r3, [pc, #24]	@ (80084ec <HAL_I2C_MspInit+0x200>)
 80084d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084da:	60bb      	str	r3, [r7, #8]
 80084dc:	68bb      	ldr	r3, [r7, #8]
}
 80084de:	bf00      	nop
 80084e0:	37f0      	adds	r7, #240	@ 0xf0
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	40005400 	.word	0x40005400
 80084ec:	58024400 	.word	0x58024400
 80084f0:	58020400 	.word	0x58020400
 80084f4:	40005800 	.word	0x40005800
 80084f8:	58001c00 	.word	0x58001c00
 80084fc:	58020c00 	.word	0x58020c00

08008500 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b0ba      	sub	sp, #232	@ 0xe8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008508:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	605a      	str	r2, [r3, #4]
 8008512:	609a      	str	r2, [r3, #8]
 8008514:	60da      	str	r2, [r3, #12]
 8008516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008518:	f107 0318 	add.w	r3, r7, #24
 800851c:	22b8      	movs	r2, #184	@ 0xb8
 800851e:	2100      	movs	r1, #0
 8008520:	4618      	mov	r0, r3
 8008522:	f00c f9af 	bl	8014884 <memset>
  if(hsd->Instance==SDMMC1)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a38      	ldr	r2, [pc, #224]	@ (800860c <HAL_SD_MspInit+0x10c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d169      	bne.n	8008604 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8008530:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008534:	f04f 0300 	mov.w	r3, #0
 8008538:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800853c:	2300      	movs	r3, #0
 800853e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008540:	f107 0318 	add.w	r3, r7, #24
 8008544:	4618      	mov	r0, r3
 8008546:	f002 fe57 	bl	800b1f8 <HAL_RCCEx_PeriphCLKConfig>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8008550:	f7ff feac 	bl	80082ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008554:	4b2e      	ldr	r3, [pc, #184]	@ (8008610 <HAL_SD_MspInit+0x110>)
 8008556:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800855a:	4a2d      	ldr	r2, [pc, #180]	@ (8008610 <HAL_SD_MspInit+0x110>)
 800855c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008560:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8008564:	4b2a      	ldr	r3, [pc, #168]	@ (8008610 <HAL_SD_MspInit+0x110>)
 8008566:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800856a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008572:	4b27      	ldr	r3, [pc, #156]	@ (8008610 <HAL_SD_MspInit+0x110>)
 8008574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008578:	4a25      	ldr	r2, [pc, #148]	@ (8008610 <HAL_SD_MspInit+0x110>)
 800857a:	f043 0308 	orr.w	r3, r3, #8
 800857e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008582:	4b23      	ldr	r3, [pc, #140]	@ (8008610 <HAL_SD_MspInit+0x110>)
 8008584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008588:	f003 0308 	and.w	r3, r3, #8
 800858c:	613b      	str	r3, [r7, #16]
 800858e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008590:	4b1f      	ldr	r3, [pc, #124]	@ (8008610 <HAL_SD_MspInit+0x110>)
 8008592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008596:	4a1e      	ldr	r2, [pc, #120]	@ (8008610 <HAL_SD_MspInit+0x110>)
 8008598:	f043 0304 	orr.w	r3, r3, #4
 800859c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80085a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008610 <HAL_SD_MspInit+0x110>)
 80085a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085a6:	f003 0304 	and.w	r3, r3, #4
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80085ae:	2304      	movs	r3, #4
 80085b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085b4:	2302      	movs	r3, #2
 80085b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085c0:	2303      	movs	r3, #3
 80085c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80085c6:	230c      	movs	r3, #12
 80085c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80085d0:	4619      	mov	r1, r3
 80085d2:	4810      	ldr	r0, [pc, #64]	@ (8008614 <HAL_SD_MspInit+0x114>)
 80085d4:	f000 feae 	bl	8009334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 80085d8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80085dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e0:	2302      	movs	r3, #2
 80085e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085ec:	2303      	movs	r3, #3
 80085ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80085f2:	230c      	movs	r3, #12
 80085f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80085fc:	4619      	mov	r1, r3
 80085fe:	4806      	ldr	r0, [pc, #24]	@ (8008618 <HAL_SD_MspInit+0x118>)
 8008600:	f000 fe98 	bl	8009334 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8008604:	bf00      	nop
 8008606:	37e8      	adds	r7, #232	@ 0xe8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	52007000 	.word	0x52007000
 8008610:	58024400 	.word	0x58024400
 8008614:	58020c00 	.word	0x58020c00
 8008618:	58020800 	.word	0x58020800

0800861c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b0be      	sub	sp, #248	@ 0xf8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008624:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	605a      	str	r2, [r3, #4]
 800862e:	609a      	str	r2, [r3, #8]
 8008630:	60da      	str	r2, [r3, #12]
 8008632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008634:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008638:	22b8      	movs	r2, #184	@ 0xb8
 800863a:	2100      	movs	r1, #0
 800863c:	4618      	mov	r0, r3
 800863e:	f00c f921 	bl	8014884 <memset>
  if(hspi->Instance==SPI1)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a97      	ldr	r2, [pc, #604]	@ (80088a4 <HAL_SPI_MspInit+0x288>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d16a      	bne.n	8008722 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800864c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008650:	f04f 0300 	mov.w	r3, #0
 8008654:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8008658:	2300      	movs	r3, #0
 800865a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800865e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008662:	4618      	mov	r0, r3
 8008664:	f002 fdc8 	bl	800b1f8 <HAL_RCCEx_PeriphCLKConfig>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800866e:	f7ff fe1d 	bl	80082ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008672:	4b8d      	ldr	r3, [pc, #564]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008678:	4a8b      	ldr	r2, [pc, #556]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 800867a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800867e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008682:	4b89      	ldr	r3, [pc, #548]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800868c:	627b      	str	r3, [r7, #36]	@ 0x24
 800868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008690:	4b85      	ldr	r3, [pc, #532]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008696:	4a84      	ldr	r2, [pc, #528]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008698:	f043 0302 	orr.w	r3, r3, #2
 800869c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80086a0:	4b81      	ldr	r3, [pc, #516]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 80086a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	623b      	str	r3, [r7, #32]
 80086ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ae:	4b7e      	ldr	r3, [pc, #504]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 80086b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086b4:	4a7c      	ldr	r2, [pc, #496]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 80086b6:	f043 0301 	orr.w	r3, r3, #1
 80086ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80086be:	4b7a      	ldr	r3, [pc, #488]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 80086c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80086cc:	2310      	movs	r3, #16
 80086ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086d2:	2302      	movs	r3, #2
 80086d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d8:	2300      	movs	r3, #0
 80086da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086de:	2300      	movs	r3, #0
 80086e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80086e4:	2305      	movs	r3, #5
 80086e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086ea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80086ee:	4619      	mov	r1, r3
 80086f0:	486e      	ldr	r0, [pc, #440]	@ (80088ac <HAL_SPI_MspInit+0x290>)
 80086f2:	f000 fe1f 	bl	8009334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80086f6:	23a0      	movs	r3, #160	@ 0xa0
 80086f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086fc:	2302      	movs	r3, #2
 80086fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008702:	2300      	movs	r3, #0
 8008704:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008708:	2300      	movs	r3, #0
 800870a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800870e:	2305      	movs	r3, #5
 8008710:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008714:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8008718:	4619      	mov	r1, r3
 800871a:	4865      	ldr	r0, [pc, #404]	@ (80088b0 <HAL_SPI_MspInit+0x294>)
 800871c:	f000 fe0a 	bl	8009334 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8008720:	e0bb      	b.n	800889a <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a63      	ldr	r2, [pc, #396]	@ (80088b4 <HAL_SPI_MspInit+0x298>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d16b      	bne.n	8008804 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800872c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008730:	f04f 0300 	mov.w	r3, #0
 8008734:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8008738:	2300      	movs	r3, #0
 800873a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800873e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008742:	4618      	mov	r0, r3
 8008744:	f002 fd58 	bl	800b1f8 <HAL_RCCEx_PeriphCLKConfig>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 800874e:	f7ff fdad 	bl	80082ac <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008752:	4b55      	ldr	r3, [pc, #340]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008758:	4a53      	ldr	r2, [pc, #332]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 800875a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800875e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008762:	4b51      	ldr	r3, [pc, #324]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008770:	4b4d      	ldr	r3, [pc, #308]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008776:	4a4c      	ldr	r2, [pc, #304]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008778:	f043 0301 	orr.w	r3, r3, #1
 800877c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008780:	4b49      	ldr	r3, [pc, #292]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800878e:	4b46      	ldr	r3, [pc, #280]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008794:	4a44      	ldr	r2, [pc, #272]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008796:	f043 0304 	orr.w	r3, r3, #4
 800879a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800879e:	4b42      	ldr	r3, [pc, #264]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 80087a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	613b      	str	r3, [r7, #16]
 80087aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80087ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80087b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087b4:	2302      	movs	r3, #2
 80087b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80087c6:	2305      	movs	r3, #5
 80087c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80087d0:	4619      	mov	r1, r3
 80087d2:	4837      	ldr	r0, [pc, #220]	@ (80088b0 <HAL_SPI_MspInit+0x294>)
 80087d4:	f000 fdae 	bl	8009334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 80087d8:	2306      	movs	r3, #6
 80087da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087de:	2302      	movs	r3, #2
 80087e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087ea:	2300      	movs	r3, #0
 80087ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80087f0:	2305      	movs	r3, #5
 80087f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087f6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80087fa:	4619      	mov	r1, r3
 80087fc:	482e      	ldr	r0, [pc, #184]	@ (80088b8 <HAL_SPI_MspInit+0x29c>)
 80087fe:	f000 fd99 	bl	8009334 <HAL_GPIO_Init>
}
 8008802:	e04a      	b.n	800889a <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a2c      	ldr	r2, [pc, #176]	@ (80088bc <HAL_SPI_MspInit+0x2a0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d145      	bne.n	800889a <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800880e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008812:	f04f 0300 	mov.w	r3, #0
 8008816:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800881a:	2300      	movs	r3, #0
 800881c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008820:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008824:	4618      	mov	r0, r3
 8008826:	f002 fce7 	bl	800b1f8 <HAL_RCCEx_PeriphCLKConfig>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 8008830:	f7ff fd3c 	bl	80082ac <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8008834:	4b1c      	ldr	r3, [pc, #112]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800883a:	4a1b      	ldr	r2, [pc, #108]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 800883c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008840:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008844:	4b18      	ldr	r3, [pc, #96]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800884a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008852:	4b15      	ldr	r3, [pc, #84]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008858:	4a13      	ldr	r2, [pc, #76]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 800885a:	f043 0310 	orr.w	r3, r3, #16
 800885e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008862:	4b11      	ldr	r3, [pc, #68]	@ (80088a8 <HAL_SPI_MspInit+0x28c>)
 8008864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	60bb      	str	r3, [r7, #8]
 800886e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8008870:	2364      	movs	r3, #100	@ 0x64
 8008872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008876:	2302      	movs	r3, #2
 8008878:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800887c:	2300      	movs	r3, #0
 800887e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008882:	2300      	movs	r3, #0
 8008884:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8008888:	2305      	movs	r3, #5
 800888a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800888e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8008892:	4619      	mov	r1, r3
 8008894:	480a      	ldr	r0, [pc, #40]	@ (80088c0 <HAL_SPI_MspInit+0x2a4>)
 8008896:	f000 fd4d 	bl	8009334 <HAL_GPIO_Init>
}
 800889a:	bf00      	nop
 800889c:	37f8      	adds	r7, #248	@ 0xf8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	40013000 	.word	0x40013000
 80088a8:	58024400 	.word	0x58024400
 80088ac:	58020400 	.word	0x58020400
 80088b0:	58020000 	.word	0x58020000
 80088b4:	40003800 	.word	0x40003800
 80088b8:	58020800 	.word	0x58020800
 80088bc:	40013400 	.word	0x40013400
 80088c0:	58021000 	.word	0x58021000

080088c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b0ba      	sub	sp, #232	@ 0xe8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	605a      	str	r2, [r3, #4]
 80088d6:	609a      	str	r2, [r3, #8]
 80088d8:	60da      	str	r2, [r3, #12]
 80088da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80088dc:	f107 0318 	add.w	r3, r7, #24
 80088e0:	22b8      	movs	r2, #184	@ 0xb8
 80088e2:	2100      	movs	r1, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f00b ffcd 	bl	8014884 <memset>
  if(huart->Instance==UART8)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a39      	ldr	r2, [pc, #228]	@ (80089d4 <HAL_UART_MspInit+0x110>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d16a      	bne.n	80089ca <HAL_UART_MspInit+0x106>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80088f4:	f04f 0202 	mov.w	r2, #2
 80088f8:	f04f 0300 	mov.w	r3, #0
 80088fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008906:	f107 0318 	add.w	r3, r7, #24
 800890a:	4618      	mov	r0, r3
 800890c:	f002 fc74 	bl	800b1f8 <HAL_RCCEx_PeriphCLKConfig>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8008916:	f7ff fcc9 	bl	80082ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800891a:	4b2f      	ldr	r3, [pc, #188]	@ (80089d8 <HAL_UART_MspInit+0x114>)
 800891c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008920:	4a2d      	ldr	r2, [pc, #180]	@ (80089d8 <HAL_UART_MspInit+0x114>)
 8008922:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008926:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800892a:	4b2b      	ldr	r3, [pc, #172]	@ (80089d8 <HAL_UART_MspInit+0x114>)
 800892c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008938:	4b27      	ldr	r3, [pc, #156]	@ (80089d8 <HAL_UART_MspInit+0x114>)
 800893a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800893e:	4a26      	ldr	r2, [pc, #152]	@ (80089d8 <HAL_UART_MspInit+0x114>)
 8008940:	f043 0310 	orr.w	r3, r3, #16
 8008944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008948:	4b23      	ldr	r3, [pc, #140]	@ (80089d8 <HAL_UART_MspInit+0x114>)
 800894a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800894e:	f003 0310 	and.w	r3, r3, #16
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008956:	4b20      	ldr	r3, [pc, #128]	@ (80089d8 <HAL_UART_MspInit+0x114>)
 8008958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800895c:	4a1e      	ldr	r2, [pc, #120]	@ (80089d8 <HAL_UART_MspInit+0x114>)
 800895e:	f043 0308 	orr.w	r3, r3, #8
 8008962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008966:	4b1c      	ldr	r3, [pc, #112]	@ (80089d8 <HAL_UART_MspInit+0x114>)
 8008968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800896c:	f003 0308 	and.w	r3, r3, #8
 8008970:	60fb      	str	r3, [r7, #12]
 8008972:	68fb      	ldr	r3, [r7, #12]
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    PD15     ------> UART8_RTS
    PD14     ------> UART8_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8008974:	2303      	movs	r3, #3
 8008976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800897a:	2302      	movs	r3, #2
 800897c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008980:	2300      	movs	r3, #0
 8008982:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008986:	2300      	movs	r3, #0
 8008988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800898c:	2308      	movs	r3, #8
 800898e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008992:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008996:	4619      	mov	r1, r3
 8008998:	4810      	ldr	r0, [pc, #64]	@ (80089dc <HAL_UART_MspInit+0x118>)
 800899a:	f000 fccb 	bl	8009334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 800899e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80089a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089a6:	2302      	movs	r3, #2
 80089a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ac:	2300      	movs	r3, #0
 80089ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80089b8:	2308      	movs	r3, #8
 80089ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80089be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80089c2:	4619      	mov	r1, r3
 80089c4:	4806      	ldr	r0, [pc, #24]	@ (80089e0 <HAL_UART_MspInit+0x11c>)
 80089c6:	f000 fcb5 	bl	8009334 <HAL_GPIO_Init>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 80089ca:	bf00      	nop
 80089cc:	37e8      	adds	r7, #232	@ 0xe8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40007c00 	.word	0x40007c00
 80089d8:	58024400 	.word	0x58024400
 80089dc:	58021000 	.word	0x58021000
 80089e0:	58020c00 	.word	0x58020c00

080089e4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b0b8      	sub	sp, #224	@ 0xe0
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089ec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	605a      	str	r2, [r3, #4]
 80089f6:	609a      	str	r2, [r3, #8]
 80089f8:	60da      	str	r2, [r3, #12]
 80089fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80089fc:	f107 0310 	add.w	r3, r7, #16
 8008a00:	22b8      	movs	r2, #184	@ 0xb8
 8008a02:	2100      	movs	r1, #0
 8008a04:	4618      	mov	r0, r3
 8008a06:	f00b ff3d 	bl	8014884 <memset>
  if(husart->Instance==USART1)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a27      	ldr	r2, [pc, #156]	@ (8008aac <HAL_USART_MspInit+0xc8>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d146      	bne.n	8008aa2 <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008a14:	f04f 0201 	mov.w	r2, #1
 8008a18:	f04f 0300 	mov.w	r3, #0
 8008a1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8008a20:	2300      	movs	r3, #0
 8008a22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a26:	f107 0310 	add.w	r3, r7, #16
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f002 fbe4 	bl	800b1f8 <HAL_RCCEx_PeriphCLKConfig>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8008a36:	f7ff fc39 	bl	80082ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ab0 <HAL_USART_MspInit+0xcc>)
 8008a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a40:	4a1b      	ldr	r2, [pc, #108]	@ (8008ab0 <HAL_USART_MspInit+0xcc>)
 8008a42:	f043 0310 	orr.w	r3, r3, #16
 8008a46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008a4a:	4b19      	ldr	r3, [pc, #100]	@ (8008ab0 <HAL_USART_MspInit+0xcc>)
 8008a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a50:	f003 0310 	and.w	r3, r3, #16
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a58:	4b15      	ldr	r3, [pc, #84]	@ (8008ab0 <HAL_USART_MspInit+0xcc>)
 8008a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a5e:	4a14      	ldr	r2, [pc, #80]	@ (8008ab0 <HAL_USART_MspInit+0xcc>)
 8008a60:	f043 0301 	orr.w	r3, r3, #1
 8008a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008a68:	4b11      	ldr	r3, [pc, #68]	@ (8008ab0 <HAL_USART_MspInit+0xcc>)
 8008a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	60bb      	str	r3, [r7, #8]
 8008a74:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 8008a76:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8008a7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008a90:	2307      	movs	r3, #7
 8008a92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a96:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4805      	ldr	r0, [pc, #20]	@ (8008ab4 <HAL_USART_MspInit+0xd0>)
 8008a9e:	f000 fc49 	bl	8009334 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8008aa2:	bf00      	nop
 8008aa4:	37e0      	adds	r7, #224	@ 0xe0
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	40011000 	.word	0x40011000
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	58020000 	.word	0x58020000

08008ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008abc:	bf00      	nop
 8008abe:	e7fd      	b.n	8008abc <NMI_Handler+0x4>

08008ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <HardFault_Handler+0x4>

08008ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008acc:	bf00      	nop
 8008ace:	e7fd      	b.n	8008acc <MemManage_Handler+0x4>

08008ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ad4:	bf00      	nop
 8008ad6:	e7fd      	b.n	8008ad4 <BusFault_Handler+0x4>

08008ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008adc:	bf00      	nop
 8008ade:	e7fd      	b.n	8008adc <UsageFault_Handler+0x4>

08008ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ae4:	bf00      	nop
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008aee:	b480      	push	{r7}
 8008af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008af2:	bf00      	nop
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b00:	bf00      	nop
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b0e:	f000 fa71 	bl	8008ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b12:	bf00      	nop
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008b16:	b480      	push	{r7}
 8008b18:	af00      	add	r7, sp, #0
  return 1;
 8008b1a:	2301      	movs	r3, #1
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <_kill>:

int _kill(int pid, int sig)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b082      	sub	sp, #8
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008b30:	f00b fefa 	bl	8014928 <__errno>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2216      	movs	r2, #22
 8008b38:	601a      	str	r2, [r3, #0]
  return -1;
 8008b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <_exit>:

void _exit (int status)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff ffe7 	bl	8008b26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008b58:	bf00      	nop
 8008b5a:	e7fd      	b.n	8008b58 <_exit+0x12>

08008b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	e00a      	b.n	8008b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008b6e:	f3af 8000 	nop.w
 8008b72:	4601      	mov	r1, r0
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	60ba      	str	r2, [r7, #8]
 8008b7a:	b2ca      	uxtb	r2, r1
 8008b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	3301      	adds	r3, #1
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	dbf0      	blt.n	8008b6e <_read+0x12>
  }

  return len;
 8008b8c:	687b      	ldr	r3, [r7, #4]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008bbe:	605a      	str	r2, [r3, #4]
  return 0;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <_isatty>:

int _isatty(int file)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008bd6:	2301      	movs	r3, #1
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
	...

08008c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008c08:	4a14      	ldr	r2, [pc, #80]	@ (8008c5c <_sbrk+0x5c>)
 8008c0a:	4b15      	ldr	r3, [pc, #84]	@ (8008c60 <_sbrk+0x60>)
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008c14:	4b13      	ldr	r3, [pc, #76]	@ (8008c64 <_sbrk+0x64>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008c1c:	4b11      	ldr	r3, [pc, #68]	@ (8008c64 <_sbrk+0x64>)
 8008c1e:	4a12      	ldr	r2, [pc, #72]	@ (8008c68 <_sbrk+0x68>)
 8008c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008c22:	4b10      	ldr	r3, [pc, #64]	@ (8008c64 <_sbrk+0x64>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4413      	add	r3, r2
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d207      	bcs.n	8008c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008c30:	f00b fe7a 	bl	8014928 <__errno>
 8008c34:	4603      	mov	r3, r0
 8008c36:	220c      	movs	r2, #12
 8008c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3e:	e009      	b.n	8008c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008c40:	4b08      	ldr	r3, [pc, #32]	@ (8008c64 <_sbrk+0x64>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008c46:	4b07      	ldr	r3, [pc, #28]	@ (8008c64 <_sbrk+0x64>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	4a05      	ldr	r2, [pc, #20]	@ (8008c64 <_sbrk+0x64>)
 8008c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008c52:	68fb      	ldr	r3, [r7, #12]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	24050000 	.word	0x24050000
 8008c60:	00000400 	.word	0x00000400
 8008c64:	24001848 	.word	0x24001848
 8008c68:	24001b38 	.word	0x24001b38

08008c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008c70:	4b32      	ldr	r3, [pc, #200]	@ (8008d3c <SystemInit+0xd0>)
 8008c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c76:	4a31      	ldr	r2, [pc, #196]	@ (8008d3c <SystemInit+0xd0>)
 8008c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008c80:	4b2f      	ldr	r3, [pc, #188]	@ (8008d40 <SystemInit+0xd4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 030f 	and.w	r3, r3, #15
 8008c88:	2b06      	cmp	r3, #6
 8008c8a:	d807      	bhi.n	8008c9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8008d40 <SystemInit+0xd4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f023 030f 	bic.w	r3, r3, #15
 8008c94:	4a2a      	ldr	r2, [pc, #168]	@ (8008d40 <SystemInit+0xd4>)
 8008c96:	f043 0307 	orr.w	r3, r3, #7
 8008c9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008c9c:	4b29      	ldr	r3, [pc, #164]	@ (8008d44 <SystemInit+0xd8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a28      	ldr	r2, [pc, #160]	@ (8008d44 <SystemInit+0xd8>)
 8008ca2:	f043 0301 	orr.w	r3, r3, #1
 8008ca6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008ca8:	4b26      	ldr	r3, [pc, #152]	@ (8008d44 <SystemInit+0xd8>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008cae:	4b25      	ldr	r3, [pc, #148]	@ (8008d44 <SystemInit+0xd8>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4924      	ldr	r1, [pc, #144]	@ (8008d44 <SystemInit+0xd8>)
 8008cb4:	4b24      	ldr	r3, [pc, #144]	@ (8008d48 <SystemInit+0xdc>)
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008cba:	4b21      	ldr	r3, [pc, #132]	@ (8008d40 <SystemInit+0xd4>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0308 	and.w	r3, r3, #8
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d007      	beq.n	8008cd6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8008d40 <SystemInit+0xd4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f023 030f 	bic.w	r3, r3, #15
 8008cce:	4a1c      	ldr	r2, [pc, #112]	@ (8008d40 <SystemInit+0xd4>)
 8008cd0:	f043 0307 	orr.w	r3, r3, #7
 8008cd4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8008d44 <SystemInit+0xd8>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008cdc:	4b19      	ldr	r3, [pc, #100]	@ (8008d44 <SystemInit+0xd8>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008ce2:	4b18      	ldr	r3, [pc, #96]	@ (8008d44 <SystemInit+0xd8>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008ce8:	4b16      	ldr	r3, [pc, #88]	@ (8008d44 <SystemInit+0xd8>)
 8008cea:	4a18      	ldr	r2, [pc, #96]	@ (8008d4c <SystemInit+0xe0>)
 8008cec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008cee:	4b15      	ldr	r3, [pc, #84]	@ (8008d44 <SystemInit+0xd8>)
 8008cf0:	4a17      	ldr	r2, [pc, #92]	@ (8008d50 <SystemInit+0xe4>)
 8008cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008cf4:	4b13      	ldr	r3, [pc, #76]	@ (8008d44 <SystemInit+0xd8>)
 8008cf6:	4a17      	ldr	r2, [pc, #92]	@ (8008d54 <SystemInit+0xe8>)
 8008cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008cfa:	4b12      	ldr	r3, [pc, #72]	@ (8008d44 <SystemInit+0xd8>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008d00:	4b10      	ldr	r3, [pc, #64]	@ (8008d44 <SystemInit+0xd8>)
 8008d02:	4a14      	ldr	r2, [pc, #80]	@ (8008d54 <SystemInit+0xe8>)
 8008d04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008d06:	4b0f      	ldr	r3, [pc, #60]	@ (8008d44 <SystemInit+0xd8>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d44 <SystemInit+0xd8>)
 8008d0e:	4a11      	ldr	r2, [pc, #68]	@ (8008d54 <SystemInit+0xe8>)
 8008d10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008d12:	4b0c      	ldr	r3, [pc, #48]	@ (8008d44 <SystemInit+0xd8>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008d18:	4b0a      	ldr	r3, [pc, #40]	@ (8008d44 <SystemInit+0xd8>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a09      	ldr	r2, [pc, #36]	@ (8008d44 <SystemInit+0xd8>)
 8008d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008d24:	4b07      	ldr	r3, [pc, #28]	@ (8008d44 <SystemInit+0xd8>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d58 <SystemInit+0xec>)
 8008d2c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008d30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008d32:	bf00      	nop
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	e000ed00 	.word	0xe000ed00
 8008d40:	52002000 	.word	0x52002000
 8008d44:	58024400 	.word	0x58024400
 8008d48:	eaf6ed7f 	.word	0xeaf6ed7f
 8008d4c:	02020200 	.word	0x02020200
 8008d50:	01ff0000 	.word	0x01ff0000
 8008d54:	01010280 	.word	0x01010280
 8008d58:	52004000 	.word	0x52004000

08008d5c <SensorManager_Init>:
	"BNO055",
	"BME680",
	"MS5607",
};

telemetry_init_status SensorManager_Init(void) {
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
	printf("Sensors Initialization routine started. \n");
 8008d62:	4821      	ldr	r0, [pc, #132]	@ (8008de8 <SensorManager_Init+0x8c>)
 8008d64:	f00b fc8e 	bl	8014684 <puts>

    size_t num_sensors = sizeof(init_functions) / sizeof(init_functions[0]);
 8008d68:	2304      	movs	r3, #4
 8008d6a:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8008d74:	2300      	movs	r3, #0
 8008d76:	60bb      	str	r3, [r7, #8]
 8008d78:	e01a      	b.n	8008db0 <SensorManager_Init+0x54>
        int8_t status = init_functions[i]();
 8008d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8008dec <SensorManager_Init+0x90>)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d82:	4798      	blx	r3
 8008d84:	4603      	mov	r3, r0
 8008d86:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 8008d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <SensorManager_Init+0x4a>
            printf("%s initialization failed.\n", sensor_names[i]);
 8008d90:	4a17      	ldr	r2, [pc, #92]	@ (8008df0 <SensorManager_Init+0x94>)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4816      	ldr	r0, [pc, #88]	@ (8008df4 <SensorManager_Init+0x98>)
 8008d9c:	f00b fc0a 	bl	80145b4 <iprintf>
            all_success = false;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73fb      	strb	r3, [r7, #15]
 8008da4:	e001      	b.n	8008daa <SensorManager_Init+0x4e>
        } else {
//        	printf("Success\n");
            any_success = true;
 8008da6:	2301      	movs	r3, #1
 8008da8:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	3301      	adds	r3, #1
 8008dae:	60bb      	str	r3, [r7, #8]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d3e0      	bcc.n	8008d7a <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d004      	beq.n	8008dc8 <SensorManager_Init+0x6c>
        printf("All sensors initialized successfully.\n");
 8008dbe:	480e      	ldr	r0, [pc, #56]	@ (8008df8 <SensorManager_Init+0x9c>)
 8008dc0:	f00b fc60 	bl	8014684 <puts>
        return TELEMETRY_INIT_SUCCESS;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e00b      	b.n	8008de0 <SensorManager_Init+0x84>
    } else if (any_success) {
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <SensorManager_Init+0x7c>
        printf("Partial initialization success.\n");
 8008dce:	480b      	ldr	r0, [pc, #44]	@ (8008dfc <SensorManager_Init+0xa0>)
 8008dd0:	f00b fc58 	bl	8014684 <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e003      	b.n	8008de0 <SensorManager_Init+0x84>
    } else {
        printf("All sensors initialization failed.\n");
 8008dd8:	4809      	ldr	r0, [pc, #36]	@ (8008e00 <SensorManager_Init+0xa4>)
 8008dda:	f00b fc53 	bl	8014684 <puts>
        return TELEMETRY_INIT_FAILURE;
 8008dde:	2302      	movs	r3, #2
    }
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	08018110 	.word	0x08018110
 8008dec:	24000160 	.word	0x24000160
 8008df0:	24000170 	.word	0x24000170
 8008df4:	0801813c 	.word	0x0801813c
 8008df8:	08018158 	.word	0x08018158
 8008dfc:	08018180 	.word	0x08018180
 8008e00:	080181a0 	.word	0x080181a0

08008e04 <SensorManager_UpdateData>:

void SensorManager_UpdateData(TelemetryData *data) {
 8008e04:	b590      	push	{r4, r7, lr}
 8008e06:	b0c1      	sub	sp, #260	@ 0x104
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    // Update data from each sensor
//	telemetry.bmi323_data = bmi323_data_poll();
	telemetry.bno055_data = bno_read_fusion_data();
 8008e0e:	4c0a      	ldr	r4, [pc, #40]	@ (8008e38 <SensorManager_UpdateData+0x34>)
 8008e10:	463b      	mov	r3, r7
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fac4 	bl	80073a0 <bno_read_fusion_data>
 8008e18:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8008e1c:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8008e20:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8008e24:	4611      	mov	r1, r2
 8008e26:	22f8      	movs	r2, #248	@ 0xf8
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f00b fdaa 	bl	8014982 <memcpy>
//    telemetry.ms5607_data = MS5607_ReadData();
//    ASM330LHH_ReadData(&data->asm330lhh_data);
//    GPS_ReadData(&data->gps_data);
//    LIS2MDLTR_ReadData(&data->lis2mdltr_data);

}
 8008e2e:	bf00      	nop
 8008e30:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd90      	pop	{r4, r7, pc}
 8008e38:	24001850 	.word	0x24001850

08008e3c <delay_us_func>:

void delay_us_func(uint32_t period)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8008e44:	e008      	b.n	8008e58 <delay_us_func+0x1c>
	{
		for(i = 0; i < 96; i++)
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	e002      	b.n	8008e52 <delay_us_func+0x16>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b5f      	cmp	r3, #95	@ 0x5f
 8008e56:	d9f9      	bls.n	8008e4c <delay_us_func+0x10>
	while(period--)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	1e5a      	subs	r2, r3, #1
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f1      	bne.n	8008e46 <delay_us_func+0xa>
		{
			;
		}
	}
}
 8008e62:	bf00      	nop
 8008e64:	bf00      	nop
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <TestTelemetry>:

void TestTelemetry(){
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1000 ; i++){
 8008e76:	2300      	movs	r3, #0
 8008e78:	607b      	str	r3, [r7, #4]
 8008e7a:	e00f      	b.n	8008e9c <TestTelemetry+0x2c>

	// Sensor Data Read
	SensorManager_UpdateData(&telemetry);
 8008e7c:	480c      	ldr	r0, [pc, #48]	@ (8008eb0 <TestTelemetry+0x40>)
 8008e7e:	f7ff ffc1 	bl	8008e04 <SensorManager_UpdateData>

	// Sensor Data Print
//	bmi323_print_sensor_data(&telemetry.bmi323_data);
	bno055_print_fusion_data(&telemetry.bno055_data);
 8008e82:	480c      	ldr	r0, [pc, #48]	@ (8008eb4 <TestTelemetry+0x44>)
 8008e84:	f7fe fbf2 	bl	800766c <bno055_print_fusion_data>
//	ms5607_print_barometer_data(&telemetry.ms5607_data);
//	bme680_print_barometer_data(&telemetry.bme680_data);

	printf("// --------------------------------------------- // \n");
 8008e88:	480b      	ldr	r0, [pc, #44]	@ (8008eb8 <TestTelemetry+0x48>)
 8008e8a:	f00b fbfb 	bl	8014684 <puts>

//    HAL_Delay(150);
    delay_us_func(50000);
 8008e8e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008e92:	f7ff ffd3 	bl	8008e3c <delay_us_func>
	for(int i = 0; i < 1000 ; i++){
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	607b      	str	r3, [r7, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ea2:	dbeb      	blt.n	8008e7c <TestTelemetry+0xc>
    	}
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	24001850 	.word	0x24001850
 8008eb4:	24001890 	.word	0x24001890
 8008eb8:	080181c4 	.word	0x080181c4

08008ebc <Reset_Handler>:
 8008ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008ef4 <LoopFillZerobss+0xe>
 8008ec0:	f7ff fed4 	bl	8008c6c <SystemInit>
 8008ec4:	480c      	ldr	r0, [pc, #48]	@ (8008ef8 <LoopFillZerobss+0x12>)
 8008ec6:	490d      	ldr	r1, [pc, #52]	@ (8008efc <LoopFillZerobss+0x16>)
 8008ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8008f00 <LoopFillZerobss+0x1a>)
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e002      	b.n	8008ed4 <LoopCopyDataInit>

08008ece <CopyDataInit>:
 8008ece:	58d4      	ldr	r4, [r2, r3]
 8008ed0:	50c4      	str	r4, [r0, r3]
 8008ed2:	3304      	adds	r3, #4

08008ed4 <LoopCopyDataInit>:
 8008ed4:	18c4      	adds	r4, r0, r3
 8008ed6:	428c      	cmp	r4, r1
 8008ed8:	d3f9      	bcc.n	8008ece <CopyDataInit>
 8008eda:	4a0a      	ldr	r2, [pc, #40]	@ (8008f04 <LoopFillZerobss+0x1e>)
 8008edc:	4c0a      	ldr	r4, [pc, #40]	@ (8008f08 <LoopFillZerobss+0x22>)
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e001      	b.n	8008ee6 <LoopFillZerobss>

08008ee2 <FillZerobss>:
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	3204      	adds	r2, #4

08008ee6 <LoopFillZerobss>:
 8008ee6:	42a2      	cmp	r2, r4
 8008ee8:	d3fb      	bcc.n	8008ee2 <FillZerobss>
 8008eea:	f00b fd23 	bl	8014934 <__libc_init_array>
 8008eee:	f7fe fd80 	bl	80079f2 <main>
 8008ef2:	4770      	bx	lr
 8008ef4:	24050000 	.word	0x24050000
 8008ef8:	24000000 	.word	0x24000000
 8008efc:	24000350 	.word	0x24000350
 8008f00:	08018698 	.word	0x08018698
 8008f04:	24000350 	.word	0x24000350
 8008f08:	24001b34 	.word	0x24001b34

08008f0c <ADC3_IRQHandler>:
 8008f0c:	e7fe      	b.n	8008f0c <ADC3_IRQHandler>
	...

08008f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f16:	2003      	movs	r0, #3
 8008f18:	f000 f962 	bl	80091e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f1c:	f001 ff96 	bl	800ae4c <HAL_RCC_GetSysClockFreq>
 8008f20:	4602      	mov	r2, r0
 8008f22:	4b15      	ldr	r3, [pc, #84]	@ (8008f78 <HAL_Init+0x68>)
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	f003 030f 	and.w	r3, r3, #15
 8008f2c:	4913      	ldr	r1, [pc, #76]	@ (8008f7c <HAL_Init+0x6c>)
 8008f2e:	5ccb      	ldrb	r3, [r1, r3]
 8008f30:	f003 031f 	and.w	r3, r3, #31
 8008f34:	fa22 f303 	lsr.w	r3, r2, r3
 8008f38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f78 <HAL_Init+0x68>)
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	f003 030f 	and.w	r3, r3, #15
 8008f42:	4a0e      	ldr	r2, [pc, #56]	@ (8008f7c <HAL_Init+0x6c>)
 8008f44:	5cd3      	ldrb	r3, [r2, r3]
 8008f46:	f003 031f 	and.w	r3, r3, #31
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f50:	4a0b      	ldr	r2, [pc, #44]	@ (8008f80 <HAL_Init+0x70>)
 8008f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f54:	4a0b      	ldr	r2, [pc, #44]	@ (8008f84 <HAL_Init+0x74>)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	f000 f814 	bl	8008f88 <HAL_InitTick>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e002      	b.n	8008f70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008f6a:	f7ff f9a5 	bl	80082b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	58024400 	.word	0x58024400
 8008f7c:	080181fc 	.word	0x080181fc
 8008f80:	2400015c 	.word	0x2400015c
 8008f84:	24000158 	.word	0x24000158

08008f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008f90:	4b15      	ldr	r3, [pc, #84]	@ (8008fe8 <HAL_InitTick+0x60>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e021      	b.n	8008fe0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008f9c:	4b13      	ldr	r3, [pc, #76]	@ (8008fec <HAL_InitTick+0x64>)
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	4b11      	ldr	r3, [pc, #68]	@ (8008fe8 <HAL_InitTick+0x60>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 f939 	bl	800922a <HAL_SYSTICK_Config>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e00e      	b.n	8008fe0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b0f      	cmp	r3, #15
 8008fc6:	d80a      	bhi.n	8008fde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008fc8:	2200      	movs	r2, #0
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd0:	f000 f911 	bl	80091f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008fd4:	4a06      	ldr	r2, [pc, #24]	@ (8008ff0 <HAL_InitTick+0x68>)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e000      	b.n	8008fe0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	24000184 	.word	0x24000184
 8008fec:	24000158 	.word	0x24000158
 8008ff0:	24000180 	.word	0x24000180

08008ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008ff8:	4b06      	ldr	r3, [pc, #24]	@ (8009014 <HAL_IncTick+0x20>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	4b06      	ldr	r3, [pc, #24]	@ (8009018 <HAL_IncTick+0x24>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4413      	add	r3, r2
 8009004:	4a04      	ldr	r2, [pc, #16]	@ (8009018 <HAL_IncTick+0x24>)
 8009006:	6013      	str	r3, [r2, #0]
}
 8009008:	bf00      	nop
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	24000184 	.word	0x24000184
 8009018:	240019d0 	.word	0x240019d0

0800901c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
  return uwTick;
 8009020:	4b03      	ldr	r3, [pc, #12]	@ (8009030 <HAL_GetTick+0x14>)
 8009022:	681b      	ldr	r3, [r3, #0]
}
 8009024:	4618      	mov	r0, r3
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	240019d0 	.word	0x240019d0

08009034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800903c:	f7ff ffee 	bl	800901c <HAL_GetTick>
 8009040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904c:	d005      	beq.n	800905a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800904e:	4b0a      	ldr	r3, [pc, #40]	@ (8009078 <HAL_Delay+0x44>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4413      	add	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800905a:	bf00      	nop
 800905c:	f7ff ffde 	bl	800901c <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	429a      	cmp	r2, r3
 800906a:	d8f7      	bhi.n	800905c <HAL_Delay+0x28>
  {
  }
}
 800906c:	bf00      	nop
 800906e:	bf00      	nop
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	24000184 	.word	0x24000184

0800907c <__NVIC_SetPriorityGrouping>:
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800908c:	4b0b      	ldr	r3, [pc, #44]	@ (80090bc <__NVIC_SetPriorityGrouping+0x40>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009098:	4013      	ands	r3, r2
 800909a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80090a4:	4b06      	ldr	r3, [pc, #24]	@ (80090c0 <__NVIC_SetPriorityGrouping+0x44>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090aa:	4a04      	ldr	r2, [pc, #16]	@ (80090bc <__NVIC_SetPriorityGrouping+0x40>)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	60d3      	str	r3, [r2, #12]
}
 80090b0:	bf00      	nop
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	e000ed00 	.word	0xe000ed00
 80090c0:	05fa0000 	.word	0x05fa0000

080090c4 <__NVIC_GetPriorityGrouping>:
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090c8:	4b04      	ldr	r3, [pc, #16]	@ (80090dc <__NVIC_GetPriorityGrouping+0x18>)
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	0a1b      	lsrs	r3, r3, #8
 80090ce:	f003 0307 	and.w	r3, r3, #7
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	e000ed00 	.word	0xe000ed00

080090e0 <__NVIC_SetPriority>:
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80090ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	db0a      	blt.n	800910a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	490c      	ldr	r1, [pc, #48]	@ (800912c <__NVIC_SetPriority+0x4c>)
 80090fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090fe:	0112      	lsls	r2, r2, #4
 8009100:	b2d2      	uxtb	r2, r2
 8009102:	440b      	add	r3, r1
 8009104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009108:	e00a      	b.n	8009120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	b2da      	uxtb	r2, r3
 800910e:	4908      	ldr	r1, [pc, #32]	@ (8009130 <__NVIC_SetPriority+0x50>)
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	f003 030f 	and.w	r3, r3, #15
 8009116:	3b04      	subs	r3, #4
 8009118:	0112      	lsls	r2, r2, #4
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	440b      	add	r3, r1
 800911e:	761a      	strb	r2, [r3, #24]
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	e000e100 	.word	0xe000e100
 8009130:	e000ed00 	.word	0xe000ed00

08009134 <NVIC_EncodePriority>:
{
 8009134:	b480      	push	{r7}
 8009136:	b089      	sub	sp, #36	@ 0x24
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f003 0307 	and.w	r3, r3, #7
 8009146:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	f1c3 0307 	rsb	r3, r3, #7
 800914e:	2b04      	cmp	r3, #4
 8009150:	bf28      	it	cs
 8009152:	2304      	movcs	r3, #4
 8009154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	3304      	adds	r3, #4
 800915a:	2b06      	cmp	r3, #6
 800915c:	d902      	bls.n	8009164 <NVIC_EncodePriority+0x30>
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	3b03      	subs	r3, #3
 8009162:	e000      	b.n	8009166 <NVIC_EncodePriority+0x32>
 8009164:	2300      	movs	r3, #0
 8009166:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009168:	f04f 32ff 	mov.w	r2, #4294967295
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	fa02 f303 	lsl.w	r3, r2, r3
 8009172:	43da      	mvns	r2, r3
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	401a      	ands	r2, r3
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800917c:	f04f 31ff 	mov.w	r1, #4294967295
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	fa01 f303 	lsl.w	r3, r1, r3
 8009186:	43d9      	mvns	r1, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800918c:	4313      	orrs	r3, r2
}
 800918e:	4618      	mov	r0, r3
 8009190:	3724      	adds	r7, #36	@ 0x24
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
	...

0800919c <SysTick_Config>:
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091ac:	d301      	bcc.n	80091b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80091ae:	2301      	movs	r3, #1
 80091b0:	e00f      	b.n	80091d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80091b2:	4a0a      	ldr	r2, [pc, #40]	@ (80091dc <SysTick_Config+0x40>)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80091ba:	210f      	movs	r1, #15
 80091bc:	f04f 30ff 	mov.w	r0, #4294967295
 80091c0:	f7ff ff8e 	bl	80090e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80091c4:	4b05      	ldr	r3, [pc, #20]	@ (80091dc <SysTick_Config+0x40>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80091ca:	4b04      	ldr	r3, [pc, #16]	@ (80091dc <SysTick_Config+0x40>)
 80091cc:	2207      	movs	r2, #7
 80091ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	e000e010 	.word	0xe000e010

080091e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7ff ff47 	bl	800907c <__NVIC_SetPriorityGrouping>
}
 80091ee:	bf00      	nop
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b086      	sub	sp, #24
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	4603      	mov	r3, r0
 80091fe:	60b9      	str	r1, [r7, #8]
 8009200:	607a      	str	r2, [r7, #4]
 8009202:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009204:	f7ff ff5e 	bl	80090c4 <__NVIC_GetPriorityGrouping>
 8009208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	6978      	ldr	r0, [r7, #20]
 8009210:	f7ff ff90 	bl	8009134 <NVIC_EncodePriority>
 8009214:	4602      	mov	r2, r0
 8009216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800921a:	4611      	mov	r1, r2
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff ff5f 	bl	80090e0 <__NVIC_SetPriority>
}
 8009222:	bf00      	nop
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff ffb2 	bl	800919c <SysTick_Config>
 8009238:	4603      	mov	r3, r0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8009248:	f3bf 8f5f 	dmb	sy
}
 800924c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800924e:	4b07      	ldr	r3, [pc, #28]	@ (800926c <HAL_MPU_Disable+0x28>)
 8009250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009252:	4a06      	ldr	r2, [pc, #24]	@ (800926c <HAL_MPU_Disable+0x28>)
 8009254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009258:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800925a:	4b05      	ldr	r3, [pc, #20]	@ (8009270 <HAL_MPU_Disable+0x2c>)
 800925c:	2200      	movs	r2, #0
 800925e:	605a      	str	r2, [r3, #4]
}
 8009260:	bf00      	nop
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	e000ed00 	.word	0xe000ed00
 8009270:	e000ed90 	.word	0xe000ed90

08009274 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800927c:	4a0b      	ldr	r2, [pc, #44]	@ (80092ac <HAL_MPU_Enable+0x38>)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f043 0301 	orr.w	r3, r3, #1
 8009284:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8009286:	4b0a      	ldr	r3, [pc, #40]	@ (80092b0 <HAL_MPU_Enable+0x3c>)
 8009288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800928a:	4a09      	ldr	r2, [pc, #36]	@ (80092b0 <HAL_MPU_Enable+0x3c>)
 800928c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009290:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8009292:	f3bf 8f4f 	dsb	sy
}
 8009296:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009298:	f3bf 8f6f 	isb	sy
}
 800929c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	e000ed90 	.word	0xe000ed90
 80092b0:	e000ed00 	.word	0xe000ed00

080092b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	785a      	ldrb	r2, [r3, #1]
 80092c0:	4b1b      	ldr	r3, [pc, #108]	@ (8009330 <HAL_MPU_ConfigRegion+0x7c>)
 80092c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80092c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009330 <HAL_MPU_ConfigRegion+0x7c>)
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	4a19      	ldr	r2, [pc, #100]	@ (8009330 <HAL_MPU_ConfigRegion+0x7c>)
 80092ca:	f023 0301 	bic.w	r3, r3, #1
 80092ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80092d0:	4a17      	ldr	r2, [pc, #92]	@ (8009330 <HAL_MPU_ConfigRegion+0x7c>)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	7b1b      	ldrb	r3, [r3, #12]
 80092dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	7adb      	ldrb	r3, [r3, #11]
 80092e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80092e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7a9b      	ldrb	r3, [r3, #10]
 80092ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80092ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	7b5b      	ldrb	r3, [r3, #13]
 80092f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80092f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	7b9b      	ldrb	r3, [r3, #14]
 80092fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80092fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	7bdb      	ldrb	r3, [r3, #15]
 8009302:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009304:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	7a5b      	ldrb	r3, [r3, #9]
 800930a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800930c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7a1b      	ldrb	r3, [r3, #8]
 8009312:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009314:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	7812      	ldrb	r2, [r2, #0]
 800931a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800931c:	4a04      	ldr	r2, [pc, #16]	@ (8009330 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800931e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009320:	6113      	str	r3, [r2, #16]
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	e000ed90 	.word	0xe000ed90

08009334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009334:	b480      	push	{r7}
 8009336:	b089      	sub	sp, #36	@ 0x24
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800933e:	2300      	movs	r3, #0
 8009340:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009342:	4b86      	ldr	r3, [pc, #536]	@ (800955c <HAL_GPIO_Init+0x228>)
 8009344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009346:	e18c      	b.n	8009662 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	2101      	movs	r1, #1
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	fa01 f303 	lsl.w	r3, r1, r3
 8009354:	4013      	ands	r3, r2
 8009356:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 817e 	beq.w	800965c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	2b01      	cmp	r3, #1
 800936a:	d005      	beq.n	8009378 <HAL_GPIO_Init+0x44>
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f003 0303 	and.w	r3, r3, #3
 8009374:	2b02      	cmp	r3, #2
 8009376:	d130      	bne.n	80093da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	2203      	movs	r2, #3
 8009384:	fa02 f303 	lsl.w	r3, r2, r3
 8009388:	43db      	mvns	r3, r3
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	4013      	ands	r3, r2
 800938e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	005b      	lsls	r3, r3, #1
 8009398:	fa02 f303 	lsl.w	r3, r2, r3
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	4313      	orrs	r3, r2
 80093a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80093ae:	2201      	movs	r2, #1
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	fa02 f303 	lsl.w	r3, r2, r3
 80093b6:	43db      	mvns	r3, r3
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	4013      	ands	r3, r2
 80093bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	091b      	lsrs	r3, r3, #4
 80093c4:	f003 0201 	and.w	r2, r3, #1
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	fa02 f303 	lsl.w	r3, r2, r3
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f003 0303 	and.w	r3, r3, #3
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d017      	beq.n	8009416 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	2203      	movs	r2, #3
 80093f2:	fa02 f303 	lsl.w	r3, r2, r3
 80093f6:	43db      	mvns	r3, r3
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	4013      	ands	r3, r2
 80093fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	fa02 f303 	lsl.w	r3, r2, r3
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	4313      	orrs	r3, r2
 800940e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	2b02      	cmp	r3, #2
 8009420:	d123      	bne.n	800946a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	08da      	lsrs	r2, r3, #3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3208      	adds	r2, #8
 800942a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	220f      	movs	r2, #15
 800943a:	fa02 f303 	lsl.w	r3, r2, r3
 800943e:	43db      	mvns	r3, r3
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	4013      	ands	r3, r2
 8009444:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	691a      	ldr	r2, [r3, #16]
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	fa02 f303 	lsl.w	r3, r2, r3
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	4313      	orrs	r3, r2
 800945a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	08da      	lsrs	r2, r3, #3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3208      	adds	r2, #8
 8009464:	69b9      	ldr	r1, [r7, #24]
 8009466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	005b      	lsls	r3, r3, #1
 8009474:	2203      	movs	r2, #3
 8009476:	fa02 f303 	lsl.w	r3, r2, r3
 800947a:	43db      	mvns	r3, r3
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	4013      	ands	r3, r2
 8009480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f003 0203 	and.w	r2, r3, #3
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	4313      	orrs	r3, r2
 8009496:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 80d8 	beq.w	800965c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094ac:	4b2c      	ldr	r3, [pc, #176]	@ (8009560 <HAL_GPIO_Init+0x22c>)
 80094ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094b2:	4a2b      	ldr	r2, [pc, #172]	@ (8009560 <HAL_GPIO_Init+0x22c>)
 80094b4:	f043 0302 	orr.w	r3, r3, #2
 80094b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80094bc:	4b28      	ldr	r3, [pc, #160]	@ (8009560 <HAL_GPIO_Init+0x22c>)
 80094be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80094ca:	4a26      	ldr	r2, [pc, #152]	@ (8009564 <HAL_GPIO_Init+0x230>)
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	089b      	lsrs	r3, r3, #2
 80094d0:	3302      	adds	r3, #2
 80094d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	220f      	movs	r2, #15
 80094e2:	fa02 f303 	lsl.w	r3, r2, r3
 80094e6:	43db      	mvns	r3, r3
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	4013      	ands	r3, r2
 80094ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009568 <HAL_GPIO_Init+0x234>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d04a      	beq.n	800958c <HAL_GPIO_Init+0x258>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a1c      	ldr	r2, [pc, #112]	@ (800956c <HAL_GPIO_Init+0x238>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d02b      	beq.n	8009556 <HAL_GPIO_Init+0x222>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a1b      	ldr	r2, [pc, #108]	@ (8009570 <HAL_GPIO_Init+0x23c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d025      	beq.n	8009552 <HAL_GPIO_Init+0x21e>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a1a      	ldr	r2, [pc, #104]	@ (8009574 <HAL_GPIO_Init+0x240>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d01f      	beq.n	800954e <HAL_GPIO_Init+0x21a>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a19      	ldr	r2, [pc, #100]	@ (8009578 <HAL_GPIO_Init+0x244>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d019      	beq.n	800954a <HAL_GPIO_Init+0x216>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a18      	ldr	r2, [pc, #96]	@ (800957c <HAL_GPIO_Init+0x248>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d013      	beq.n	8009546 <HAL_GPIO_Init+0x212>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a17      	ldr	r2, [pc, #92]	@ (8009580 <HAL_GPIO_Init+0x24c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00d      	beq.n	8009542 <HAL_GPIO_Init+0x20e>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a16      	ldr	r2, [pc, #88]	@ (8009584 <HAL_GPIO_Init+0x250>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d007      	beq.n	800953e <HAL_GPIO_Init+0x20a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a15      	ldr	r2, [pc, #84]	@ (8009588 <HAL_GPIO_Init+0x254>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d101      	bne.n	800953a <HAL_GPIO_Init+0x206>
 8009536:	2309      	movs	r3, #9
 8009538:	e029      	b.n	800958e <HAL_GPIO_Init+0x25a>
 800953a:	230a      	movs	r3, #10
 800953c:	e027      	b.n	800958e <HAL_GPIO_Init+0x25a>
 800953e:	2307      	movs	r3, #7
 8009540:	e025      	b.n	800958e <HAL_GPIO_Init+0x25a>
 8009542:	2306      	movs	r3, #6
 8009544:	e023      	b.n	800958e <HAL_GPIO_Init+0x25a>
 8009546:	2305      	movs	r3, #5
 8009548:	e021      	b.n	800958e <HAL_GPIO_Init+0x25a>
 800954a:	2304      	movs	r3, #4
 800954c:	e01f      	b.n	800958e <HAL_GPIO_Init+0x25a>
 800954e:	2303      	movs	r3, #3
 8009550:	e01d      	b.n	800958e <HAL_GPIO_Init+0x25a>
 8009552:	2302      	movs	r3, #2
 8009554:	e01b      	b.n	800958e <HAL_GPIO_Init+0x25a>
 8009556:	2301      	movs	r3, #1
 8009558:	e019      	b.n	800958e <HAL_GPIO_Init+0x25a>
 800955a:	bf00      	nop
 800955c:	58000080 	.word	0x58000080
 8009560:	58024400 	.word	0x58024400
 8009564:	58000400 	.word	0x58000400
 8009568:	58020000 	.word	0x58020000
 800956c:	58020400 	.word	0x58020400
 8009570:	58020800 	.word	0x58020800
 8009574:	58020c00 	.word	0x58020c00
 8009578:	58021000 	.word	0x58021000
 800957c:	58021400 	.word	0x58021400
 8009580:	58021800 	.word	0x58021800
 8009584:	58021c00 	.word	0x58021c00
 8009588:	58022400 	.word	0x58022400
 800958c:	2300      	movs	r3, #0
 800958e:	69fa      	ldr	r2, [r7, #28]
 8009590:	f002 0203 	and.w	r2, r2, #3
 8009594:	0092      	lsls	r2, r2, #2
 8009596:	4093      	lsls	r3, r2
 8009598:	69ba      	ldr	r2, [r7, #24]
 800959a:	4313      	orrs	r3, r2
 800959c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800959e:	4938      	ldr	r1, [pc, #224]	@ (8009680 <HAL_GPIO_Init+0x34c>)
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	089b      	lsrs	r3, r3, #2
 80095a4:	3302      	adds	r3, #2
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80095ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	43db      	mvns	r3, r3
 80095b8:	69ba      	ldr	r2, [r7, #24]
 80095ba:	4013      	ands	r3, r2
 80095bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80095d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80095da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	43db      	mvns	r3, r3
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	4013      	ands	r3, r2
 80095ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	43db      	mvns	r3, r3
 8009612:	69ba      	ldr	r2, [r7, #24]
 8009614:	4013      	ands	r3, r2
 8009616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	4313      	orrs	r3, r2
 800962a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	43db      	mvns	r3, r3
 800963c:	69ba      	ldr	r2, [r7, #24]
 800963e:	4013      	ands	r3, r2
 8009640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	4313      	orrs	r3, r2
 8009654:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	3301      	adds	r3, #1
 8009660:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	fa22 f303 	lsr.w	r3, r2, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	f47f ae6b 	bne.w	8009348 <HAL_GPIO_Init+0x14>
  }
}
 8009672:	bf00      	nop
 8009674:	bf00      	nop
 8009676:	3724      	adds	r7, #36	@ 0x24
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	58000400 	.word	0x58000400

08009684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	887b      	ldrh	r3, [r7, #2]
 8009696:	4013      	ands	r3, r2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800969c:	2301      	movs	r3, #1
 800969e:	73fb      	strb	r3, [r7, #15]
 80096a0:	e001      	b.n	80096a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	460b      	mov	r3, r1
 80096be:	807b      	strh	r3, [r7, #2]
 80096c0:	4613      	mov	r3, r2
 80096c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80096c4:	787b      	ldrb	r3, [r7, #1]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096ca:	887a      	ldrh	r2, [r7, #2]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80096d0:	e003      	b.n	80096da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80096d2:	887b      	ldrh	r3, [r7, #2]
 80096d4:	041a      	lsls	r2, r3, #16
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	619a      	str	r2, [r3, #24]
}
 80096da:	bf00      	nop
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
	...

080096e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e08b      	b.n	8009812 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7fe fdec 	bl	80082ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2224      	movs	r2, #36	@ 0x24
 8009718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 0201 	bic.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009738:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689a      	ldr	r2, [r3, #8]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009748:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d107      	bne.n	8009762 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800975e:	609a      	str	r2, [r3, #8]
 8009760:	e006      	b.n	8009770 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	689a      	ldr	r2, [r3, #8]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800976e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d108      	bne.n	800978a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009786:	605a      	str	r2, [r3, #4]
 8009788:	e007      	b.n	800979a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009798:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6859      	ldr	r1, [r3, #4]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	4b1d      	ldr	r3, [pc, #116]	@ (800981c <HAL_I2C_Init+0x134>)
 80097a6:	430b      	orrs	r3, r1
 80097a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68da      	ldr	r2, [r3, #12]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	430a      	orrs	r2, r1
 80097d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	69d9      	ldr	r1, [r3, #28]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a1a      	ldr	r2, [r3, #32]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	430a      	orrs	r2, r1
 80097e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0201 	orr.w	r2, r2, #1
 80097f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2220      	movs	r2, #32
 80097fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	02008000 	.word	0x02008000

08009820 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af02      	add	r7, sp, #8
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	607a      	str	r2, [r7, #4]
 800982a:	461a      	mov	r2, r3
 800982c:	460b      	mov	r3, r1
 800982e:	817b      	strh	r3, [r7, #10]
 8009830:	4613      	mov	r3, r2
 8009832:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b20      	cmp	r3, #32
 800983e:	f040 80fd 	bne.w	8009a3c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009848:	2b01      	cmp	r3, #1
 800984a:	d101      	bne.n	8009850 <HAL_I2C_Master_Transmit+0x30>
 800984c:	2302      	movs	r3, #2
 800984e:	e0f6      	b.n	8009a3e <HAL_I2C_Master_Transmit+0x21e>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009858:	f7ff fbe0 	bl	800901c <HAL_GetTick>
 800985c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	2319      	movs	r3, #25
 8009864:	2201      	movs	r2, #1
 8009866:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fa0a 	bl	8009c84 <I2C_WaitOnFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e0e1      	b.n	8009a3e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2221      	movs	r2, #33	@ 0x21
 800987e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2210      	movs	r2, #16
 8009886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	893a      	ldrh	r2, [r7, #8]
 800989a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	2bff      	cmp	r3, #255	@ 0xff
 80098aa:	d906      	bls.n	80098ba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	22ff      	movs	r2, #255	@ 0xff
 80098b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80098b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	e007      	b.n	80098ca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098be:	b29a      	uxth	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80098c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80098c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d024      	beq.n	800991c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d6:	781a      	ldrb	r2, [r3, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	3b01      	subs	r3, #1
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098fa:	3b01      	subs	r3, #1
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009906:	b2db      	uxtb	r3, r3
 8009908:	3301      	adds	r3, #1
 800990a:	b2da      	uxtb	r2, r3
 800990c:	8979      	ldrh	r1, [r7, #10]
 800990e:	4b4e      	ldr	r3, [pc, #312]	@ (8009a48 <HAL_I2C_Master_Transmit+0x228>)
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 fc05 	bl	800a124 <I2C_TransferConfig>
 800991a:	e066      	b.n	80099ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009920:	b2da      	uxtb	r2, r3
 8009922:	8979      	ldrh	r1, [r7, #10]
 8009924:	4b48      	ldr	r3, [pc, #288]	@ (8009a48 <HAL_I2C_Master_Transmit+0x228>)
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f000 fbfa 	bl	800a124 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009930:	e05b      	b.n	80099ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	6a39      	ldr	r1, [r7, #32]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 f9fd 	bl	8009d36 <I2C_WaitOnTXISFlagUntilTimeout>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e07b      	b.n	8009a3e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994a:	781a      	ldrb	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009960:	b29b      	uxth	r3, r3
 8009962:	3b01      	subs	r3, #1
 8009964:	b29a      	uxth	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800996e:	3b01      	subs	r3, #1
 8009970:	b29a      	uxth	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800997a:	b29b      	uxth	r3, r3
 800997c:	2b00      	cmp	r3, #0
 800997e:	d034      	beq.n	80099ea <HAL_I2C_Master_Transmit+0x1ca>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009984:	2b00      	cmp	r3, #0
 8009986:	d130      	bne.n	80099ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	2200      	movs	r2, #0
 8009990:	2180      	movs	r1, #128	@ 0x80
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f976 	bl	8009c84 <I2C_WaitOnFlagUntilTimeout>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e04d      	b.n	8009a3e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	2bff      	cmp	r3, #255	@ 0xff
 80099aa:	d90e      	bls.n	80099ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	22ff      	movs	r2, #255	@ 0xff
 80099b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	8979      	ldrh	r1, [r7, #10]
 80099ba:	2300      	movs	r3, #0
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 fbae 	bl	800a124 <I2C_TransferConfig>
 80099c8:	e00f      	b.n	80099ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	8979      	ldrh	r1, [r7, #10]
 80099dc:	2300      	movs	r3, #0
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 fb9d 	bl	800a124 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d19e      	bne.n	8009932 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	6a39      	ldr	r1, [r7, #32]
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 f9e3 	bl	8009dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e01a      	b.n	8009a3e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6859      	ldr	r1, [r3, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a4c <HAL_I2C_Master_Transmit+0x22c>)
 8009a1c:	400b      	ands	r3, r1
 8009a1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e000      	b.n	8009a3e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009a3c:	2302      	movs	r3, #2
  }
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	80002000 	.word	0x80002000
 8009a4c:	fe00e800 	.word	0xfe00e800

08009a50 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af02      	add	r7, sp, #8
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	817b      	strh	r3, [r7, #10]
 8009a60:	4613      	mov	r3, r2
 8009a62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	f040 80db 	bne.w	8009c28 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d101      	bne.n	8009a80 <HAL_I2C_Master_Receive+0x30>
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e0d4      	b.n	8009c2a <HAL_I2C_Master_Receive+0x1da>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a88:	f7ff fac8 	bl	800901c <HAL_GetTick>
 8009a8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	2319      	movs	r3, #25
 8009a94:	2201      	movs	r2, #1
 8009a96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 f8f2 	bl	8009c84 <I2C_WaitOnFlagUntilTimeout>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e0bf      	b.n	8009c2a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2222      	movs	r2, #34	@ 0x22
 8009aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2210      	movs	r2, #16
 8009ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	893a      	ldrh	r2, [r7, #8]
 8009aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	2bff      	cmp	r3, #255	@ 0xff
 8009ada:	d90e      	bls.n	8009afa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	22ff      	movs	r2, #255	@ 0xff
 8009ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	8979      	ldrh	r1, [r7, #10]
 8009aea:	4b52      	ldr	r3, [pc, #328]	@ (8009c34 <HAL_I2C_Master_Receive+0x1e4>)
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 fb16 	bl	800a124 <I2C_TransferConfig>
 8009af8:	e06d      	b.n	8009bd6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	8979      	ldrh	r1, [r7, #10]
 8009b0c:	4b49      	ldr	r3, [pc, #292]	@ (8009c34 <HAL_I2C_Master_Receive+0x1e4>)
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 fb05 	bl	800a124 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009b1a:	e05c      	b.n	8009bd6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	6a39      	ldr	r1, [r7, #32]
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 f993 	bl	8009e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e07c      	b.n	8009c2a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3a:	b2d2      	uxtb	r2, r2
 8009b3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b42:	1c5a      	adds	r2, r3, #1
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d034      	beq.n	8009bd6 <HAL_I2C_Master_Receive+0x186>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d130      	bne.n	8009bd6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2180      	movs	r1, #128	@ 0x80
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 f880 	bl	8009c84 <I2C_WaitOnFlagUntilTimeout>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e04d      	b.n	8009c2a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2bff      	cmp	r3, #255	@ 0xff
 8009b96:	d90e      	bls.n	8009bb6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	22ff      	movs	r2, #255	@ 0xff
 8009b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	8979      	ldrh	r1, [r7, #10]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f000 fab8 	bl	800a124 <I2C_TransferConfig>
 8009bb4:	e00f      	b.n	8009bd6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	8979      	ldrh	r1, [r7, #10]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 faa7 	bl	800a124 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d19d      	bne.n	8009b1c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	6a39      	ldr	r1, [r7, #32]
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f000 f8ed 	bl	8009dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e01a      	b.n	8009c2a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2220      	movs	r2, #32
 8009bfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6859      	ldr	r1, [r3, #4]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	4b0c      	ldr	r3, [pc, #48]	@ (8009c38 <HAL_I2C_Master_Receive+0x1e8>)
 8009c08:	400b      	ands	r3, r1
 8009c0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2220      	movs	r2, #32
 8009c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	e000      	b.n	8009c2a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009c28:	2302      	movs	r3, #2
  }
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3718      	adds	r7, #24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	80002400 	.word	0x80002400
 8009c38:	fe00e800 	.word	0xfe00e800

08009c3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d103      	bne.n	8009c5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2200      	movs	r2, #0
 8009c58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d007      	beq.n	8009c78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	699a      	ldr	r2, [r3, #24]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f042 0201 	orr.w	r2, r2, #1
 8009c76:	619a      	str	r2, [r3, #24]
  }
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	603b      	str	r3, [r7, #0]
 8009c90:	4613      	mov	r3, r2
 8009c92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c94:	e03b      	b.n	8009d0e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f000 f962 	bl	8009f64 <I2C_IsErrorOccurred>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e041      	b.n	8009d2e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb0:	d02d      	beq.n	8009d0e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cb2:	f7ff f9b3 	bl	800901c <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d302      	bcc.n	8009cc8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d122      	bne.n	8009d0e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	699a      	ldr	r2, [r3, #24]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	bf0c      	ite	eq
 8009cd8:	2301      	moveq	r3, #1
 8009cda:	2300      	movne	r3, #0
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	461a      	mov	r2, r3
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d113      	bne.n	8009d0e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cea:	f043 0220 	orr.w	r2, r3, #32
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e00f      	b.n	8009d2e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	699a      	ldr	r2, [r3, #24]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	4013      	ands	r3, r2
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	bf0c      	ite	eq
 8009d1e:	2301      	moveq	r3, #1
 8009d20:	2300      	movne	r3, #0
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	461a      	mov	r2, r3
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d0b4      	beq.n	8009c96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	60f8      	str	r0, [r7, #12]
 8009d3e:	60b9      	str	r1, [r7, #8]
 8009d40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d42:	e033      	b.n	8009dac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	68b9      	ldr	r1, [r7, #8]
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f000 f90b 	bl	8009f64 <I2C_IsErrorOccurred>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e031      	b.n	8009dbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5e:	d025      	beq.n	8009dac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d60:	f7ff f95c 	bl	800901c <HAL_GetTick>
 8009d64:	4602      	mov	r2, r0
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d302      	bcc.n	8009d76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d11a      	bne.n	8009dac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d013      	beq.n	8009dac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d88:	f043 0220 	orr.w	r2, r3, #32
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2220      	movs	r2, #32
 8009d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e007      	b.n	8009dbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d1c4      	bne.n	8009d44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dd0:	e02f      	b.n	8009e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	68b9      	ldr	r1, [r7, #8]
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 f8c4 	bl	8009f64 <I2C_IsErrorOccurred>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e02d      	b.n	8009e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009de6:	f7ff f919 	bl	800901c <HAL_GetTick>
 8009dea:	4602      	mov	r2, r0
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d302      	bcc.n	8009dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d11a      	bne.n	8009e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b20      	cmp	r3, #32
 8009e08:	d013      	beq.n	8009e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e0e:	f043 0220 	orr.w	r2, r3, #32
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e007      	b.n	8009e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	f003 0320 	and.w	r3, r3, #32
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	d1c8      	bne.n	8009dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009e5c:	e071      	b.n	8009f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	68b9      	ldr	r1, [r7, #8]
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 f87e 	bl	8009f64 <I2C_IsErrorOccurred>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f003 0320 	and.w	r3, r3, #32
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d13b      	bne.n	8009ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d138      	bne.n	8009ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d105      	bne.n	8009ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	f003 0310 	and.w	r3, r3, #16
 8009eaa:	2b10      	cmp	r3, #16
 8009eac:	d121      	bne.n	8009ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2210      	movs	r2, #16
 8009eb4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2204      	movs	r2, #4
 8009eba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6859      	ldr	r1, [r3, #4]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4b24      	ldr	r3, [pc, #144]	@ (8009f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009ed0:	400b      	ands	r3, r1
 8009ed2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	75fb      	strb	r3, [r7, #23]
 8009ef0:	e002      	b.n	8009ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009ef8:	f7ff f890 	bl	800901c <HAL_GetTick>
 8009efc:	4602      	mov	r2, r0
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d302      	bcc.n	8009f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d119      	bne.n	8009f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d116      	bne.n	8009f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	f003 0304 	and.w	r3, r3, #4
 8009f1e:	2b04      	cmp	r3, #4
 8009f20:	d00f      	beq.n	8009f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f26:	f043 0220 	orr.w	r2, r3, #32
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	d002      	beq.n	8009f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d083      	beq.n	8009e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	fe00e800 	.word	0xfe00e800

08009f64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b08a      	sub	sp, #40	@ 0x28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	f003 0310 	and.w	r3, r3, #16
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d068      	beq.n	800a062 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2210      	movs	r2, #16
 8009f96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009f98:	e049      	b.n	800a02e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa0:	d045      	beq.n	800a02e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009fa2:	f7ff f83b 	bl	800901c <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d302      	bcc.n	8009fb8 <I2C_IsErrorOccurred+0x54>
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d13a      	bne.n	800a02e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009fca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fda:	d121      	bne.n	800a020 <I2C_IsErrorOccurred+0xbc>
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fe2:	d01d      	beq.n	800a020 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009fe4:	7cfb      	ldrb	r3, [r7, #19]
 8009fe6:	2b20      	cmp	r3, #32
 8009fe8:	d01a      	beq.n	800a020 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ff8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009ffa:	f7ff f80f 	bl	800901c <HAL_GetTick>
 8009ffe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a000:	e00e      	b.n	800a020 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a002:	f7ff f80b 	bl	800901c <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	2b19      	cmp	r3, #25
 800a00e:	d907      	bls.n	800a020 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	f043 0320 	orr.w	r3, r3, #32
 800a016:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a01e:	e006      	b.n	800a02e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	f003 0320 	and.w	r3, r3, #32
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d1e9      	bne.n	800a002 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	f003 0320 	and.w	r3, r3, #32
 800a038:	2b20      	cmp	r3, #32
 800a03a:	d003      	beq.n	800a044 <I2C_IsErrorOccurred+0xe0>
 800a03c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0aa      	beq.n	8009f9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d103      	bne.n	800a054 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2220      	movs	r2, #32
 800a052:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	f043 0304 	orr.w	r3, r3, #4
 800a05a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00b      	beq.n	800a08c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	f043 0301 	orr.w	r3, r3, #1
 800a07a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a084:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00b      	beq.n	800a0ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	f043 0308 	orr.w	r3, r3, #8
 800a09c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a0a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	f043 0302 	orr.w	r3, r3, #2
 800a0be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01c      	beq.n	800a112 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7ff fdaf 	bl	8009c3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	6859      	ldr	r1, [r3, #4]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	4b0d      	ldr	r3, [pc, #52]	@ (800a120 <I2C_IsErrorOccurred+0x1bc>)
 800a0ea:	400b      	ands	r3, r1
 800a0ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2220      	movs	r2, #32
 800a0fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a112:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a116:	4618      	mov	r0, r3
 800a118:	3728      	adds	r7, #40	@ 0x28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	fe00e800 	.word	0xfe00e800

0800a124 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	607b      	str	r3, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	817b      	strh	r3, [r7, #10]
 800a132:	4613      	mov	r3, r2
 800a134:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a136:	897b      	ldrh	r3, [r7, #10]
 800a138:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a13c:	7a7b      	ldrb	r3, [r7, #9]
 800a13e:	041b      	lsls	r3, r3, #16
 800a140:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a144:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a14a:	6a3b      	ldr	r3, [r7, #32]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a152:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	0d5b      	lsrs	r3, r3, #21
 800a15e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a162:	4b08      	ldr	r3, [pc, #32]	@ (800a184 <I2C_TransferConfig+0x60>)
 800a164:	430b      	orrs	r3, r1
 800a166:	43db      	mvns	r3, r3
 800a168:	ea02 0103 	and.w	r1, r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	430a      	orrs	r2, r1
 800a174:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a176:	bf00      	nop
 800a178:	371c      	adds	r7, #28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	03ff63ff 	.word	0x03ff63ff

0800a188 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b20      	cmp	r3, #32
 800a19c:	d138      	bne.n	800a210 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d101      	bne.n	800a1ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	e032      	b.n	800a212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2224      	movs	r2, #36	@ 0x24
 800a1b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f022 0201 	bic.w	r2, r2, #1
 800a1ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a1da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6819      	ldr	r1, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f042 0201 	orr.w	r2, r2, #1
 800a1fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2220      	movs	r2, #32
 800a200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	e000      	b.n	800a212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a210:	2302      	movs	r3, #2
  }
}
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a21e:	b480      	push	{r7}
 800a220:	b085      	sub	sp, #20
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b20      	cmp	r3, #32
 800a232:	d139      	bne.n	800a2a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d101      	bne.n	800a242 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a23e:	2302      	movs	r3, #2
 800a240:	e033      	b.n	800a2aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2224      	movs	r2, #36	@ 0x24
 800a24e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f022 0201 	bic.w	r2, r2, #1
 800a260:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a270:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	021b      	lsls	r3, r3, #8
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f042 0201 	orr.w	r2, r2, #1
 800a292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2220      	movs	r2, #32
 800a298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e000      	b.n	800a2aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a2a8:	2302      	movs	r3, #2
  }
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
	...

0800a2b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a2c0:	4b19      	ldr	r3, [pc, #100]	@ (800a328 <HAL_PWREx_ConfigSupply+0x70>)
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f003 0304 	and.w	r3, r3, #4
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	d00a      	beq.n	800a2e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a2cc:	4b16      	ldr	r3, [pc, #88]	@ (800a328 <HAL_PWREx_ConfigSupply+0x70>)
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f003 0307 	and.w	r3, r3, #7
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d001      	beq.n	800a2de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e01f      	b.n	800a31e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e01d      	b.n	800a31e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a2e2:	4b11      	ldr	r3, [pc, #68]	@ (800a328 <HAL_PWREx_ConfigSupply+0x70>)
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	f023 0207 	bic.w	r2, r3, #7
 800a2ea:	490f      	ldr	r1, [pc, #60]	@ (800a328 <HAL_PWREx_ConfigSupply+0x70>)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a2f2:	f7fe fe93 	bl	800901c <HAL_GetTick>
 800a2f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a2f8:	e009      	b.n	800a30e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a2fa:	f7fe fe8f 	bl	800901c <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a308:	d901      	bls.n	800a30e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e007      	b.n	800a31e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a30e:	4b06      	ldr	r3, [pc, #24]	@ (800a328 <HAL_PWREx_ConfigSupply+0x70>)
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a31a:	d1ee      	bne.n	800a2fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	58024800 	.word	0x58024800

0800a32c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08c      	sub	sp, #48	@ 0x30
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e3c8      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 8087 	beq.w	800a45a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a34c:	4b88      	ldr	r3, [pc, #544]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a356:	4b86      	ldr	r3, [pc, #536]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35e:	2b10      	cmp	r3, #16
 800a360:	d007      	beq.n	800a372 <HAL_RCC_OscConfig+0x46>
 800a362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a364:	2b18      	cmp	r3, #24
 800a366:	d110      	bne.n	800a38a <HAL_RCC_OscConfig+0x5e>
 800a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36a:	f003 0303 	and.w	r3, r3, #3
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d10b      	bne.n	800a38a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a372:	4b7f      	ldr	r3, [pc, #508]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d06c      	beq.n	800a458 <HAL_RCC_OscConfig+0x12c>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d168      	bne.n	800a458 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e3a2      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a392:	d106      	bne.n	800a3a2 <HAL_RCC_OscConfig+0x76>
 800a394:	4b76      	ldr	r3, [pc, #472]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a75      	ldr	r2, [pc, #468]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a39a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	e02e      	b.n	800a400 <HAL_RCC_OscConfig+0xd4>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10c      	bne.n	800a3c4 <HAL_RCC_OscConfig+0x98>
 800a3aa:	4b71      	ldr	r3, [pc, #452]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a70      	ldr	r2, [pc, #448]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	4b6e      	ldr	r3, [pc, #440]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a6d      	ldr	r2, [pc, #436]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	e01d      	b.n	800a400 <HAL_RCC_OscConfig+0xd4>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3cc:	d10c      	bne.n	800a3e8 <HAL_RCC_OscConfig+0xbc>
 800a3ce:	4b68      	ldr	r3, [pc, #416]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a67      	ldr	r2, [pc, #412]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	4b65      	ldr	r3, [pc, #404]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a64      	ldr	r2, [pc, #400]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3e4:	6013      	str	r3, [r2, #0]
 800a3e6:	e00b      	b.n	800a400 <HAL_RCC_OscConfig+0xd4>
 800a3e8:	4b61      	ldr	r3, [pc, #388]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a60      	ldr	r2, [pc, #384]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	4b5e      	ldr	r3, [pc, #376]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a5d      	ldr	r2, [pc, #372]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a3fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d013      	beq.n	800a430 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a408:	f7fe fe08 	bl	800901c <HAL_GetTick>
 800a40c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a40e:	e008      	b.n	800a422 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a410:	f7fe fe04 	bl	800901c <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b64      	cmp	r3, #100	@ 0x64
 800a41c:	d901      	bls.n	800a422 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e356      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a422:	4b53      	ldr	r3, [pc, #332]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0f0      	beq.n	800a410 <HAL_RCC_OscConfig+0xe4>
 800a42e:	e014      	b.n	800a45a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a430:	f7fe fdf4 	bl	800901c <HAL_GetTick>
 800a434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a436:	e008      	b.n	800a44a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a438:	f7fe fdf0 	bl	800901c <HAL_GetTick>
 800a43c:	4602      	mov	r2, r0
 800a43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	2b64      	cmp	r3, #100	@ 0x64
 800a444:	d901      	bls.n	800a44a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e342      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a44a:	4b49      	ldr	r3, [pc, #292]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1f0      	bne.n	800a438 <HAL_RCC_OscConfig+0x10c>
 800a456:	e000      	b.n	800a45a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 0302 	and.w	r3, r3, #2
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 808c 	beq.w	800a580 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a468:	4b41      	ldr	r3, [pc, #260]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a470:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a472:	4b3f      	ldr	r3, [pc, #252]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a476:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d007      	beq.n	800a48e <HAL_RCC_OscConfig+0x162>
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	2b18      	cmp	r3, #24
 800a482:	d137      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x1c8>
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f003 0303 	and.w	r3, r3, #3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d132      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a48e:	4b38      	ldr	r3, [pc, #224]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0304 	and.w	r3, r3, #4
 800a496:	2b00      	cmp	r3, #0
 800a498:	d005      	beq.n	800a4a6 <HAL_RCC_OscConfig+0x17a>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d101      	bne.n	800a4a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e314      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a4a6:	4b32      	ldr	r3, [pc, #200]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f023 0219 	bic.w	r2, r3, #25
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	492f      	ldr	r1, [pc, #188]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4b8:	f7fe fdb0 	bl	800901c <HAL_GetTick>
 800a4bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4be:	e008      	b.n	800a4d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4c0:	f7fe fdac 	bl	800901c <HAL_GetTick>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d901      	bls.n	800a4d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	e2fe      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4d2:	4b27      	ldr	r3, [pc, #156]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0304 	and.w	r3, r3, #4
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0f0      	beq.n	800a4c0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4de:	4b24      	ldr	r3, [pc, #144]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	061b      	lsls	r3, r3, #24
 800a4ec:	4920      	ldr	r1, [pc, #128]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4f2:	e045      	b.n	800a580 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d026      	beq.n	800a54a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a4fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f023 0219 	bic.w	r2, r3, #25
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	4919      	ldr	r1, [pc, #100]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a50a:	4313      	orrs	r3, r2
 800a50c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a50e:	f7fe fd85 	bl	800901c <HAL_GetTick>
 800a512:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a514:	e008      	b.n	800a528 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a516:	f7fe fd81 	bl	800901c <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	2b02      	cmp	r3, #2
 800a522:	d901      	bls.n	800a528 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	e2d3      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a528:	4b11      	ldr	r3, [pc, #68]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0f0      	beq.n	800a516 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a534:	4b0e      	ldr	r3, [pc, #56]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	061b      	lsls	r3, r3, #24
 800a542:	490b      	ldr	r1, [pc, #44]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a544:	4313      	orrs	r3, r2
 800a546:	604b      	str	r3, [r1, #4]
 800a548:	e01a      	b.n	800a580 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a54a:	4b09      	ldr	r3, [pc, #36]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a08      	ldr	r2, [pc, #32]	@ (800a570 <HAL_RCC_OscConfig+0x244>)
 800a550:	f023 0301 	bic.w	r3, r3, #1
 800a554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a556:	f7fe fd61 	bl	800901c <HAL_GetTick>
 800a55a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a55c:	e00a      	b.n	800a574 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a55e:	f7fe fd5d 	bl	800901c <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d903      	bls.n	800a574 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e2af      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
 800a570:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a574:	4b96      	ldr	r3, [pc, #600]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1ee      	bne.n	800a55e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 0310 	and.w	r3, r3, #16
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d06a      	beq.n	800a662 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a58c:	4b90      	ldr	r3, [pc, #576]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a594:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a596:	4b8e      	ldr	r3, [pc, #568]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a59a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	2b08      	cmp	r3, #8
 800a5a0:	d007      	beq.n	800a5b2 <HAL_RCC_OscConfig+0x286>
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b18      	cmp	r3, #24
 800a5a6:	d11b      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x2b4>
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	f003 0303 	and.w	r3, r3, #3
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d116      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5b2:	4b87      	ldr	r3, [pc, #540]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d005      	beq.n	800a5ca <HAL_RCC_OscConfig+0x29e>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	69db      	ldr	r3, [r3, #28]
 800a5c2:	2b80      	cmp	r3, #128	@ 0x80
 800a5c4:	d001      	beq.n	800a5ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e282      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5ca:	4b81      	ldr	r3, [pc, #516]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	061b      	lsls	r3, r3, #24
 800a5d8:	497d      	ldr	r1, [pc, #500]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5de:	e040      	b.n	800a662 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	69db      	ldr	r3, [r3, #28]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d023      	beq.n	800a630 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a5e8:	4b79      	ldr	r3, [pc, #484]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a78      	ldr	r2, [pc, #480]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a5ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5f4:	f7fe fd12 	bl	800901c <HAL_GetTick>
 800a5f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5fa:	e008      	b.n	800a60e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a5fc:	f7fe fd0e 	bl	800901c <HAL_GetTick>
 800a600:	4602      	mov	r2, r0
 800a602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	2b02      	cmp	r3, #2
 800a608:	d901      	bls.n	800a60e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e260      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a60e:	4b70      	ldr	r3, [pc, #448]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0f0      	beq.n	800a5fc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a61a:	4b6d      	ldr	r3, [pc, #436]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	061b      	lsls	r3, r3, #24
 800a628:	4969      	ldr	r1, [pc, #420]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60cb      	str	r3, [r1, #12]
 800a62e:	e018      	b.n	800a662 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a630:	4b67      	ldr	r3, [pc, #412]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a66      	ldr	r2, [pc, #408]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a63a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a63c:	f7fe fcee 	bl	800901c <HAL_GetTick>
 800a640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a642:	e008      	b.n	800a656 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a644:	f7fe fcea 	bl	800901c <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d901      	bls.n	800a656 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e23c      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a656:	4b5e      	ldr	r3, [pc, #376]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1f0      	bne.n	800a644 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 0308 	and.w	r3, r3, #8
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d036      	beq.n	800a6dc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d019      	beq.n	800a6aa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a676:	4b56      	ldr	r3, [pc, #344]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a67a:	4a55      	ldr	r2, [pc, #340]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a67c:	f043 0301 	orr.w	r3, r3, #1
 800a680:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a682:	f7fe fccb 	bl	800901c <HAL_GetTick>
 800a686:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a688:	e008      	b.n	800a69c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a68a:	f7fe fcc7 	bl	800901c <HAL_GetTick>
 800a68e:	4602      	mov	r2, r0
 800a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	2b02      	cmp	r3, #2
 800a696:	d901      	bls.n	800a69c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e219      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a69c:	4b4c      	ldr	r3, [pc, #304]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a69e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d0f0      	beq.n	800a68a <HAL_RCC_OscConfig+0x35e>
 800a6a8:	e018      	b.n	800a6dc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6aa:	4b49      	ldr	r3, [pc, #292]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a6ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ae:	4a48      	ldr	r2, [pc, #288]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a6b0:	f023 0301 	bic.w	r3, r3, #1
 800a6b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6b6:	f7fe fcb1 	bl	800901c <HAL_GetTick>
 800a6ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a6bc:	e008      	b.n	800a6d0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6be:	f7fe fcad 	bl	800901c <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d901      	bls.n	800a6d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e1ff      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a6d0:	4b3f      	ldr	r3, [pc, #252]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a6d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6d4:	f003 0302 	and.w	r3, r3, #2
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1f0      	bne.n	800a6be <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d036      	beq.n	800a756 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d019      	beq.n	800a724 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a6f0:	4b37      	ldr	r3, [pc, #220]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a36      	ldr	r2, [pc, #216]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a6f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a6fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a6fc:	f7fe fc8e 	bl	800901c <HAL_GetTick>
 800a700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a702:	e008      	b.n	800a716 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a704:	f7fe fc8a 	bl	800901c <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d901      	bls.n	800a716 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	e1dc      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a716:	4b2e      	ldr	r3, [pc, #184]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d0f0      	beq.n	800a704 <HAL_RCC_OscConfig+0x3d8>
 800a722:	e018      	b.n	800a756 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a724:	4b2a      	ldr	r3, [pc, #168]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a29      	ldr	r2, [pc, #164]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a72a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a72e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a730:	f7fe fc74 	bl	800901c <HAL_GetTick>
 800a734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a736:	e008      	b.n	800a74a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a738:	f7fe fc70 	bl	800901c <HAL_GetTick>
 800a73c:	4602      	mov	r2, r0
 800a73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	2b02      	cmp	r3, #2
 800a744:	d901      	bls.n	800a74a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	e1c2      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a74a:	4b21      	ldr	r3, [pc, #132]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1f0      	bne.n	800a738 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f000 8086 	beq.w	800a870 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a764:	4b1b      	ldr	r3, [pc, #108]	@ (800a7d4 <HAL_RCC_OscConfig+0x4a8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a1a      	ldr	r2, [pc, #104]	@ (800a7d4 <HAL_RCC_OscConfig+0x4a8>)
 800a76a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a76e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a770:	f7fe fc54 	bl	800901c <HAL_GetTick>
 800a774:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a776:	e008      	b.n	800a78a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a778:	f7fe fc50 	bl	800901c <HAL_GetTick>
 800a77c:	4602      	mov	r2, r0
 800a77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	2b64      	cmp	r3, #100	@ 0x64
 800a784:	d901      	bls.n	800a78a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e1a2      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a78a:	4b12      	ldr	r3, [pc, #72]	@ (800a7d4 <HAL_RCC_OscConfig+0x4a8>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0f0      	beq.n	800a778 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d106      	bne.n	800a7ac <HAL_RCC_OscConfig+0x480>
 800a79e:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a7a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7a2:	4a0b      	ldr	r2, [pc, #44]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a7a4:	f043 0301 	orr.w	r3, r3, #1
 800a7a8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7aa:	e032      	b.n	800a812 <HAL_RCC_OscConfig+0x4e6>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d111      	bne.n	800a7d8 <HAL_RCC_OscConfig+0x4ac>
 800a7b4:	4b06      	ldr	r3, [pc, #24]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a7b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7b8:	4a05      	ldr	r2, [pc, #20]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a7ba:	f023 0301 	bic.w	r3, r3, #1
 800a7be:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7c0:	4b03      	ldr	r3, [pc, #12]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a7c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7c4:	4a02      	ldr	r2, [pc, #8]	@ (800a7d0 <HAL_RCC_OscConfig+0x4a4>)
 800a7c6:	f023 0304 	bic.w	r3, r3, #4
 800a7ca:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7cc:	e021      	b.n	800a812 <HAL_RCC_OscConfig+0x4e6>
 800a7ce:	bf00      	nop
 800a7d0:	58024400 	.word	0x58024400
 800a7d4:	58024800 	.word	0x58024800
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	2b05      	cmp	r3, #5
 800a7de:	d10c      	bne.n	800a7fa <HAL_RCC_OscConfig+0x4ce>
 800a7e0:	4b83      	ldr	r3, [pc, #524]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a7e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7e4:	4a82      	ldr	r2, [pc, #520]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a7e6:	f043 0304 	orr.w	r3, r3, #4
 800a7ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7ec:	4b80      	ldr	r3, [pc, #512]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a7ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7f0:	4a7f      	ldr	r2, [pc, #508]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a7f2:	f043 0301 	orr.w	r3, r3, #1
 800a7f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7f8:	e00b      	b.n	800a812 <HAL_RCC_OscConfig+0x4e6>
 800a7fa:	4b7d      	ldr	r3, [pc, #500]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a7fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7fe:	4a7c      	ldr	r2, [pc, #496]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a800:	f023 0301 	bic.w	r3, r3, #1
 800a804:	6713      	str	r3, [r2, #112]	@ 0x70
 800a806:	4b7a      	ldr	r3, [pc, #488]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a80a:	4a79      	ldr	r2, [pc, #484]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a80c:	f023 0304 	bic.w	r3, r3, #4
 800a810:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d015      	beq.n	800a846 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a81a:	f7fe fbff 	bl	800901c <HAL_GetTick>
 800a81e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a820:	e00a      	b.n	800a838 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a822:	f7fe fbfb 	bl	800901c <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a830:	4293      	cmp	r3, r2
 800a832:	d901      	bls.n	800a838 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e14b      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a838:	4b6d      	ldr	r3, [pc, #436]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a83a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d0ee      	beq.n	800a822 <HAL_RCC_OscConfig+0x4f6>
 800a844:	e014      	b.n	800a870 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a846:	f7fe fbe9 	bl	800901c <HAL_GetTick>
 800a84a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a84c:	e00a      	b.n	800a864 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a84e:	f7fe fbe5 	bl	800901c <HAL_GetTick>
 800a852:	4602      	mov	r2, r0
 800a854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d901      	bls.n	800a864 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e135      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a864:	4b62      	ldr	r3, [pc, #392]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a868:	f003 0302 	and.w	r3, r3, #2
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1ee      	bne.n	800a84e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 812a 	beq.w	800aace <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a87a:	4b5d      	ldr	r3, [pc, #372]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a882:	2b18      	cmp	r3, #24
 800a884:	f000 80ba 	beq.w	800a9fc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	f040 8095 	bne.w	800a9bc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a892:	4b57      	ldr	r3, [pc, #348]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a56      	ldr	r2, [pc, #344]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a89c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a89e:	f7fe fbbd 	bl	800901c <HAL_GetTick>
 800a8a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8a4:	e008      	b.n	800a8b8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8a6:	f7fe fbb9 	bl	800901c <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d901      	bls.n	800a8b8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e10b      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8b8:	4b4d      	ldr	r3, [pc, #308]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1f0      	bne.n	800a8a6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a8c4:	4b4a      	ldr	r3, [pc, #296]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a8c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8c8:	4b4a      	ldr	r3, [pc, #296]	@ (800a9f4 <HAL_RCC_OscConfig+0x6c8>)
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a8d4:	0112      	lsls	r2, r2, #4
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	4945      	ldr	r1, [pc, #276]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	628b      	str	r3, [r1, #40]	@ 0x28
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	025b      	lsls	r3, r3, #9
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	041b      	lsls	r3, r3, #16
 800a8fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a900:	431a      	orrs	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a906:	3b01      	subs	r3, #1
 800a908:	061b      	lsls	r3, r3, #24
 800a90a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a90e:	4938      	ldr	r1, [pc, #224]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a910:	4313      	orrs	r3, r2
 800a912:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a914:	4b36      	ldr	r3, [pc, #216]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a918:	4a35      	ldr	r2, [pc, #212]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a91a:	f023 0301 	bic.w	r3, r3, #1
 800a91e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a920:	4b33      	ldr	r3, [pc, #204]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a924:	4b34      	ldr	r3, [pc, #208]	@ (800a9f8 <HAL_RCC_OscConfig+0x6cc>)
 800a926:	4013      	ands	r3, r2
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a92c:	00d2      	lsls	r2, r2, #3
 800a92e:	4930      	ldr	r1, [pc, #192]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a930:	4313      	orrs	r3, r2
 800a932:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a934:	4b2e      	ldr	r3, [pc, #184]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a938:	f023 020c 	bic.w	r2, r3, #12
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a940:	492b      	ldr	r1, [pc, #172]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a942:	4313      	orrs	r3, r2
 800a944:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a946:	4b2a      	ldr	r3, [pc, #168]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94a:	f023 0202 	bic.w	r2, r3, #2
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a952:	4927      	ldr	r1, [pc, #156]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a954:	4313      	orrs	r3, r2
 800a956:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a958:	4b25      	ldr	r3, [pc, #148]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a95c:	4a24      	ldr	r2, [pc, #144]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a95e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a964:	4b22      	ldr	r3, [pc, #136]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a968:	4a21      	ldr	r2, [pc, #132]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a96a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a96e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a970:	4b1f      	ldr	r3, [pc, #124]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a974:	4a1e      	ldr	r2, [pc, #120]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a976:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a97a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a97c:	4b1c      	ldr	r3, [pc, #112]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a97e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a980:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a982:	f043 0301 	orr.w	r3, r3, #1
 800a986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a988:	4b19      	ldr	r3, [pc, #100]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a18      	ldr	r2, [pc, #96]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a98e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a994:	f7fe fb42 	bl	800901c <HAL_GetTick>
 800a998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a99a:	e008      	b.n	800a9ae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a99c:	f7fe fb3e 	bl	800901c <HAL_GetTick>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d901      	bls.n	800a9ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e090      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9ae:	4b10      	ldr	r3, [pc, #64]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d0f0      	beq.n	800a99c <HAL_RCC_OscConfig+0x670>
 800a9ba:	e088      	b.n	800aace <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a0b      	ldr	r2, [pc, #44]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a9c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c8:	f7fe fb28 	bl	800901c <HAL_GetTick>
 800a9cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9ce:	e008      	b.n	800a9e2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9d0:	f7fe fb24 	bl	800901c <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d901      	bls.n	800a9e2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e076      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9e2:	4b03      	ldr	r3, [pc, #12]	@ (800a9f0 <HAL_RCC_OscConfig+0x6c4>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1f0      	bne.n	800a9d0 <HAL_RCC_OscConfig+0x6a4>
 800a9ee:	e06e      	b.n	800aace <HAL_RCC_OscConfig+0x7a2>
 800a9f0:	58024400 	.word	0x58024400
 800a9f4:	fffffc0c 	.word	0xfffffc0c
 800a9f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a9fc:	4b36      	ldr	r3, [pc, #216]	@ (800aad8 <HAL_RCC_OscConfig+0x7ac>)
 800a9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aa02:	4b35      	ldr	r3, [pc, #212]	@ (800aad8 <HAL_RCC_OscConfig+0x7ac>)
 800aa04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d031      	beq.n	800aa74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	f003 0203 	and.w	r2, r3, #3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d12a      	bne.n	800aa74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	091b      	lsrs	r3, r3, #4
 800aa22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d122      	bne.n	800aa74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d11a      	bne.n	800aa74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	0a5b      	lsrs	r3, r3, #9
 800aa42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d111      	bne.n	800aa74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	0c1b      	lsrs	r3, r3, #16
 800aa54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d108      	bne.n	800aa74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	0e1b      	lsrs	r3, r3, #24
 800aa66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d001      	beq.n	800aa78 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e02b      	b.n	800aad0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800aa78:	4b17      	ldr	r3, [pc, #92]	@ (800aad8 <HAL_RCC_OscConfig+0x7ac>)
 800aa7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa7c:	08db      	lsrs	r3, r3, #3
 800aa7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d01f      	beq.n	800aace <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800aa8e:	4b12      	ldr	r3, [pc, #72]	@ (800aad8 <HAL_RCC_OscConfig+0x7ac>)
 800aa90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa92:	4a11      	ldr	r2, [pc, #68]	@ (800aad8 <HAL_RCC_OscConfig+0x7ac>)
 800aa94:	f023 0301 	bic.w	r3, r3, #1
 800aa98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aa9a:	f7fe fabf 	bl	800901c <HAL_GetTick>
 800aa9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800aaa0:	bf00      	nop
 800aaa2:	f7fe fabb 	bl	800901c <HAL_GetTick>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d0f9      	beq.n	800aaa2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aaae:	4b0a      	ldr	r3, [pc, #40]	@ (800aad8 <HAL_RCC_OscConfig+0x7ac>)
 800aab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aab2:	4b0a      	ldr	r3, [pc, #40]	@ (800aadc <HAL_RCC_OscConfig+0x7b0>)
 800aab4:	4013      	ands	r3, r2
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aaba:	00d2      	lsls	r2, r2, #3
 800aabc:	4906      	ldr	r1, [pc, #24]	@ (800aad8 <HAL_RCC_OscConfig+0x7ac>)
 800aabe:	4313      	orrs	r3, r2
 800aac0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aac2:	4b05      	ldr	r3, [pc, #20]	@ (800aad8 <HAL_RCC_OscConfig+0x7ac>)
 800aac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac6:	4a04      	ldr	r2, [pc, #16]	@ (800aad8 <HAL_RCC_OscConfig+0x7ac>)
 800aac8:	f043 0301 	orr.w	r3, r3, #1
 800aacc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3730      	adds	r7, #48	@ 0x30
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	58024400 	.word	0x58024400
 800aadc:	ffff0007 	.word	0xffff0007

0800aae0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e19c      	b.n	800ae2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aaf4:	4b8a      	ldr	r3, [pc, #552]	@ (800ad20 <HAL_RCC_ClockConfig+0x240>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 030f 	and.w	r3, r3, #15
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d910      	bls.n	800ab24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab02:	4b87      	ldr	r3, [pc, #540]	@ (800ad20 <HAL_RCC_ClockConfig+0x240>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f023 020f 	bic.w	r2, r3, #15
 800ab0a:	4985      	ldr	r1, [pc, #532]	@ (800ad20 <HAL_RCC_ClockConfig+0x240>)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab12:	4b83      	ldr	r3, [pc, #524]	@ (800ad20 <HAL_RCC_ClockConfig+0x240>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 030f 	and.w	r3, r3, #15
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d001      	beq.n	800ab24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	e184      	b.n	800ae2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 0304 	and.w	r3, r3, #4
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d010      	beq.n	800ab52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	691a      	ldr	r2, [r3, #16]
 800ab34:	4b7b      	ldr	r3, [pc, #492]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d908      	bls.n	800ab52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab40:	4b78      	ldr	r3, [pc, #480]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	4975      	ldr	r1, [pc, #468]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0308 	and.w	r3, r3, #8
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d010      	beq.n	800ab80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	695a      	ldr	r2, [r3, #20]
 800ab62:	4b70      	ldr	r3, [pc, #448]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d908      	bls.n	800ab80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab6e:	4b6d      	ldr	r3, [pc, #436]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	496a      	ldr	r1, [pc, #424]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0310 	and.w	r3, r3, #16
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d010      	beq.n	800abae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	699a      	ldr	r2, [r3, #24]
 800ab90:	4b64      	ldr	r3, [pc, #400]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d908      	bls.n	800abae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab9c:	4b61      	ldr	r3, [pc, #388]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ab9e:	69db      	ldr	r3, [r3, #28]
 800aba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	495e      	ldr	r1, [pc, #376]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0320 	and.w	r3, r3, #32
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d010      	beq.n	800abdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	69da      	ldr	r2, [r3, #28]
 800abbe:	4b59      	ldr	r3, [pc, #356]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d908      	bls.n	800abdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800abca:	4b56      	ldr	r3, [pc, #344]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	4953      	ldr	r1, [pc, #332]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800abd8:	4313      	orrs	r3, r2
 800abda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0302 	and.w	r3, r3, #2
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d010      	beq.n	800ac0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68da      	ldr	r2, [r3, #12]
 800abec:	4b4d      	ldr	r3, [pc, #308]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	f003 030f 	and.w	r3, r3, #15
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d908      	bls.n	800ac0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abf8:	4b4a      	ldr	r3, [pc, #296]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	f023 020f 	bic.w	r2, r3, #15
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	4947      	ldr	r1, [pc, #284]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ac06:	4313      	orrs	r3, r2
 800ac08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d055      	beq.n	800acc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ac16:	4b43      	ldr	r3, [pc, #268]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	4940      	ldr	r1, [pc, #256]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ac24:	4313      	orrs	r3, r2
 800ac26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d107      	bne.n	800ac40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac30:	4b3c      	ldr	r3, [pc, #240]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d121      	bne.n	800ac80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e0f6      	b.n	800ae2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	d107      	bne.n	800ac58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac48:	4b36      	ldr	r3, [pc, #216]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d115      	bne.n	800ac80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e0ea      	b.n	800ae2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d107      	bne.n	800ac70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac60:	4b30      	ldr	r3, [pc, #192]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d109      	bne.n	800ac80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e0de      	b.n	800ae2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac70:	4b2c      	ldr	r3, [pc, #176]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e0d6      	b.n	800ae2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac80:	4b28      	ldr	r3, [pc, #160]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	f023 0207 	bic.w	r2, r3, #7
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	4925      	ldr	r1, [pc, #148]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac92:	f7fe f9c3 	bl	800901c <HAL_GetTick>
 800ac96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac98:	e00a      	b.n	800acb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac9a:	f7fe f9bf 	bl	800901c <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d901      	bls.n	800acb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e0be      	b.n	800ae2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acb0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d1eb      	bne.n	800ac9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0302 	and.w	r3, r3, #2
 800acca:	2b00      	cmp	r3, #0
 800accc:	d010      	beq.n	800acf0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68da      	ldr	r2, [r3, #12]
 800acd2:	4b14      	ldr	r3, [pc, #80]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	f003 030f 	and.w	r3, r3, #15
 800acda:	429a      	cmp	r2, r3
 800acdc:	d208      	bcs.n	800acf0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acde:	4b11      	ldr	r3, [pc, #68]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	f023 020f 	bic.w	r2, r3, #15
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	490e      	ldr	r1, [pc, #56]	@ (800ad24 <HAL_RCC_ClockConfig+0x244>)
 800acec:	4313      	orrs	r3, r2
 800acee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800acf0:	4b0b      	ldr	r3, [pc, #44]	@ (800ad20 <HAL_RCC_ClockConfig+0x240>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 030f 	and.w	r3, r3, #15
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d214      	bcs.n	800ad28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acfe:	4b08      	ldr	r3, [pc, #32]	@ (800ad20 <HAL_RCC_ClockConfig+0x240>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f023 020f 	bic.w	r2, r3, #15
 800ad06:	4906      	ldr	r1, [pc, #24]	@ (800ad20 <HAL_RCC_ClockConfig+0x240>)
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad0e:	4b04      	ldr	r3, [pc, #16]	@ (800ad20 <HAL_RCC_ClockConfig+0x240>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 030f 	and.w	r3, r3, #15
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d005      	beq.n	800ad28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e086      	b.n	800ae2e <HAL_RCC_ClockConfig+0x34e>
 800ad20:	52002000 	.word	0x52002000
 800ad24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d010      	beq.n	800ad56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	691a      	ldr	r2, [r3, #16]
 800ad38:	4b3f      	ldr	r3, [pc, #252]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d208      	bcs.n	800ad56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ad44:	4b3c      	ldr	r3, [pc, #240]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	4939      	ldr	r1, [pc, #228]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 0308 	and.w	r3, r3, #8
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d010      	beq.n	800ad84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	695a      	ldr	r2, [r3, #20]
 800ad66:	4b34      	ldr	r3, [pc, #208]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d208      	bcs.n	800ad84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad72:	4b31      	ldr	r3, [pc, #196]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800ad74:	69db      	ldr	r3, [r3, #28]
 800ad76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	492e      	ldr	r1, [pc, #184]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800ad80:	4313      	orrs	r3, r2
 800ad82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0310 	and.w	r3, r3, #16
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d010      	beq.n	800adb2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	699a      	ldr	r2, [r3, #24]
 800ad94:	4b28      	ldr	r3, [pc, #160]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d208      	bcs.n	800adb2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ada0:	4b25      	ldr	r3, [pc, #148]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	699b      	ldr	r3, [r3, #24]
 800adac:	4922      	ldr	r1, [pc, #136]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800adae:	4313      	orrs	r3, r2
 800adb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0320 	and.w	r3, r3, #32
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d010      	beq.n	800ade0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	69da      	ldr	r2, [r3, #28]
 800adc2:	4b1d      	ldr	r3, [pc, #116]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800adca:	429a      	cmp	r2, r3
 800adcc:	d208      	bcs.n	800ade0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800adce:	4b1a      	ldr	r3, [pc, #104]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	69db      	ldr	r3, [r3, #28]
 800adda:	4917      	ldr	r1, [pc, #92]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800addc:	4313      	orrs	r3, r2
 800adde:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ade0:	f000 f834 	bl	800ae4c <HAL_RCC_GetSysClockFreq>
 800ade4:	4602      	mov	r2, r0
 800ade6:	4b14      	ldr	r3, [pc, #80]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	0a1b      	lsrs	r3, r3, #8
 800adec:	f003 030f 	and.w	r3, r3, #15
 800adf0:	4912      	ldr	r1, [pc, #72]	@ (800ae3c <HAL_RCC_ClockConfig+0x35c>)
 800adf2:	5ccb      	ldrb	r3, [r1, r3]
 800adf4:	f003 031f 	and.w	r3, r3, #31
 800adf8:	fa22 f303 	lsr.w	r3, r2, r3
 800adfc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800adfe:	4b0e      	ldr	r3, [pc, #56]	@ (800ae38 <HAL_RCC_ClockConfig+0x358>)
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	f003 030f 	and.w	r3, r3, #15
 800ae06:	4a0d      	ldr	r2, [pc, #52]	@ (800ae3c <HAL_RCC_ClockConfig+0x35c>)
 800ae08:	5cd3      	ldrb	r3, [r2, r3]
 800ae0a:	f003 031f 	and.w	r3, r3, #31
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	fa22 f303 	lsr.w	r3, r2, r3
 800ae14:	4a0a      	ldr	r2, [pc, #40]	@ (800ae40 <HAL_RCC_ClockConfig+0x360>)
 800ae16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae18:	4a0a      	ldr	r2, [pc, #40]	@ (800ae44 <HAL_RCC_ClockConfig+0x364>)
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ae1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae48 <HAL_RCC_ClockConfig+0x368>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fe f8b0 	bl	8008f88 <HAL_InitTick>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	58024400 	.word	0x58024400
 800ae3c:	080181fc 	.word	0x080181fc
 800ae40:	2400015c 	.word	0x2400015c
 800ae44:	24000158 	.word	0x24000158
 800ae48:	24000180 	.word	0x24000180

0800ae4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b089      	sub	sp, #36	@ 0x24
 800ae50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae52:	4bb3      	ldr	r3, [pc, #716]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae5a:	2b18      	cmp	r3, #24
 800ae5c:	f200 8155 	bhi.w	800b10a <HAL_RCC_GetSysClockFreq+0x2be>
 800ae60:	a201      	add	r2, pc, #4	@ (adr r2, 800ae68 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ae62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae66:	bf00      	nop
 800ae68:	0800aecd 	.word	0x0800aecd
 800ae6c:	0800b10b 	.word	0x0800b10b
 800ae70:	0800b10b 	.word	0x0800b10b
 800ae74:	0800b10b 	.word	0x0800b10b
 800ae78:	0800b10b 	.word	0x0800b10b
 800ae7c:	0800b10b 	.word	0x0800b10b
 800ae80:	0800b10b 	.word	0x0800b10b
 800ae84:	0800b10b 	.word	0x0800b10b
 800ae88:	0800aef3 	.word	0x0800aef3
 800ae8c:	0800b10b 	.word	0x0800b10b
 800ae90:	0800b10b 	.word	0x0800b10b
 800ae94:	0800b10b 	.word	0x0800b10b
 800ae98:	0800b10b 	.word	0x0800b10b
 800ae9c:	0800b10b 	.word	0x0800b10b
 800aea0:	0800b10b 	.word	0x0800b10b
 800aea4:	0800b10b 	.word	0x0800b10b
 800aea8:	0800aef9 	.word	0x0800aef9
 800aeac:	0800b10b 	.word	0x0800b10b
 800aeb0:	0800b10b 	.word	0x0800b10b
 800aeb4:	0800b10b 	.word	0x0800b10b
 800aeb8:	0800b10b 	.word	0x0800b10b
 800aebc:	0800b10b 	.word	0x0800b10b
 800aec0:	0800b10b 	.word	0x0800b10b
 800aec4:	0800b10b 	.word	0x0800b10b
 800aec8:	0800aeff 	.word	0x0800aeff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aecc:	4b94      	ldr	r3, [pc, #592]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 0320 	and.w	r3, r3, #32
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d009      	beq.n	800aeec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aed8:	4b91      	ldr	r3, [pc, #580]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	08db      	lsrs	r3, r3, #3
 800aede:	f003 0303 	and.w	r3, r3, #3
 800aee2:	4a90      	ldr	r2, [pc, #576]	@ (800b124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aee4:	fa22 f303 	lsr.w	r3, r2, r3
 800aee8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aeea:	e111      	b.n	800b110 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aeec:	4b8d      	ldr	r3, [pc, #564]	@ (800b124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aeee:	61bb      	str	r3, [r7, #24]
      break;
 800aef0:	e10e      	b.n	800b110 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aef2:	4b8d      	ldr	r3, [pc, #564]	@ (800b128 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aef4:	61bb      	str	r3, [r7, #24]
      break;
 800aef6:	e10b      	b.n	800b110 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aef8:	4b8c      	ldr	r3, [pc, #560]	@ (800b12c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aefa:	61bb      	str	r3, [r7, #24]
      break;
 800aefc:	e108      	b.n	800b110 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aefe:	4b88      	ldr	r3, [pc, #544]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af02:	f003 0303 	and.w	r3, r3, #3
 800af06:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800af08:	4b85      	ldr	r3, [pc, #532]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af0c:	091b      	lsrs	r3, r3, #4
 800af0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af12:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800af14:	4b82      	ldr	r3, [pc, #520]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af1e:	4b80      	ldr	r3, [pc, #512]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af22:	08db      	lsrs	r3, r3, #3
 800af24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	fb02 f303 	mul.w	r3, r2, r3
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af36:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 80e1 	beq.w	800b104 <HAL_RCC_GetSysClockFreq+0x2b8>
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b02      	cmp	r3, #2
 800af46:	f000 8083 	beq.w	800b050 <HAL_RCC_GetSysClockFreq+0x204>
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	f200 80a1 	bhi.w	800b094 <HAL_RCC_GetSysClockFreq+0x248>
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <HAL_RCC_GetSysClockFreq+0x114>
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d056      	beq.n	800b00c <HAL_RCC_GetSysClockFreq+0x1c0>
 800af5e:	e099      	b.n	800b094 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af60:	4b6f      	ldr	r3, [pc, #444]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0320 	and.w	r3, r3, #32
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d02d      	beq.n	800afc8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af6c:	4b6c      	ldr	r3, [pc, #432]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	08db      	lsrs	r3, r3, #3
 800af72:	f003 0303 	and.w	r3, r3, #3
 800af76:	4a6b      	ldr	r2, [pc, #428]	@ (800b124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af78:	fa22 f303 	lsr.w	r3, r2, r3
 800af7c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	ee07 3a90 	vmov	s15, r3
 800af84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	ee07 3a90 	vmov	s15, r3
 800af8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af96:	4b62      	ldr	r3, [pc, #392]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa6:	ed97 6a02 	vldr	s12, [r7, #8]
 800afaa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800afae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800afc6:	e087      	b.n	800b0d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b134 <HAL_RCC_GetSysClockFreq+0x2e8>
 800afd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afda:	4b51      	ldr	r3, [pc, #324]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afea:	ed97 6a02 	vldr	s12, [r7, #8]
 800afee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800affa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800affe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b00a:	e065      	b.n	800b0d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	ee07 3a90 	vmov	s15, r3
 800b012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b016:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b138 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b01a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b01e:	4b40      	ldr	r3, [pc, #256]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b02e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b032:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b03a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b03e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b04a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b04e:	e043      	b.n	800b0d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	ee07 3a90 	vmov	s15, r3
 800b056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b13c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b062:	4b2f      	ldr	r3, [pc, #188]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b072:	ed97 6a02 	vldr	s12, [r7, #8]
 800b076:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b092:	e021      	b.n	800b0d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b138 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a6:	4b1e      	ldr	r3, [pc, #120]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ae:	ee07 3a90 	vmov	s15, r3
 800b0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b0d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b0d8:	4b11      	ldr	r3, [pc, #68]	@ (800b120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0dc:	0a5b      	lsrs	r3, r3, #9
 800b0de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	ee07 3a90 	vmov	s15, r3
 800b0ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b0f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0fc:	ee17 3a90 	vmov	r3, s15
 800b100:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b102:	e005      	b.n	800b110 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b104:	2300      	movs	r3, #0
 800b106:	61bb      	str	r3, [r7, #24]
      break;
 800b108:	e002      	b.n	800b110 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b10a:	4b07      	ldr	r3, [pc, #28]	@ (800b128 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b10c:	61bb      	str	r3, [r7, #24]
      break;
 800b10e:	bf00      	nop
  }

  return sysclockfreq;
 800b110:	69bb      	ldr	r3, [r7, #24]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3724      	adds	r7, #36	@ 0x24
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	58024400 	.word	0x58024400
 800b124:	03d09000 	.word	0x03d09000
 800b128:	003d0900 	.word	0x003d0900
 800b12c:	02dc6c00 	.word	0x02dc6c00
 800b130:	46000000 	.word	0x46000000
 800b134:	4c742400 	.word	0x4c742400
 800b138:	4a742400 	.word	0x4a742400
 800b13c:	4c371b00 	.word	0x4c371b00

0800b140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b146:	f7ff fe81 	bl	800ae4c <HAL_RCC_GetSysClockFreq>
 800b14a:	4602      	mov	r2, r0
 800b14c:	4b10      	ldr	r3, [pc, #64]	@ (800b190 <HAL_RCC_GetHCLKFreq+0x50>)
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	0a1b      	lsrs	r3, r3, #8
 800b152:	f003 030f 	and.w	r3, r3, #15
 800b156:	490f      	ldr	r1, [pc, #60]	@ (800b194 <HAL_RCC_GetHCLKFreq+0x54>)
 800b158:	5ccb      	ldrb	r3, [r1, r3]
 800b15a:	f003 031f 	and.w	r3, r3, #31
 800b15e:	fa22 f303 	lsr.w	r3, r2, r3
 800b162:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b164:	4b0a      	ldr	r3, [pc, #40]	@ (800b190 <HAL_RCC_GetHCLKFreq+0x50>)
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	f003 030f 	and.w	r3, r3, #15
 800b16c:	4a09      	ldr	r2, [pc, #36]	@ (800b194 <HAL_RCC_GetHCLKFreq+0x54>)
 800b16e:	5cd3      	ldrb	r3, [r2, r3]
 800b170:	f003 031f 	and.w	r3, r3, #31
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	fa22 f303 	lsr.w	r3, r2, r3
 800b17a:	4a07      	ldr	r2, [pc, #28]	@ (800b198 <HAL_RCC_GetHCLKFreq+0x58>)
 800b17c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b17e:	4a07      	ldr	r2, [pc, #28]	@ (800b19c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b184:	4b04      	ldr	r3, [pc, #16]	@ (800b198 <HAL_RCC_GetHCLKFreq+0x58>)
 800b186:	681b      	ldr	r3, [r3, #0]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	58024400 	.word	0x58024400
 800b194:	080181fc 	.word	0x080181fc
 800b198:	2400015c 	.word	0x2400015c
 800b19c:	24000158 	.word	0x24000158

0800b1a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b1a4:	f7ff ffcc 	bl	800b140 <HAL_RCC_GetHCLKFreq>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	4b06      	ldr	r3, [pc, #24]	@ (800b1c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b1ac:	69db      	ldr	r3, [r3, #28]
 800b1ae:	091b      	lsrs	r3, r3, #4
 800b1b0:	f003 0307 	and.w	r3, r3, #7
 800b1b4:	4904      	ldr	r1, [pc, #16]	@ (800b1c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b1b6:	5ccb      	ldrb	r3, [r1, r3]
 800b1b8:	f003 031f 	and.w	r3, r3, #31
 800b1bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	58024400 	.word	0x58024400
 800b1c8:	080181fc 	.word	0x080181fc

0800b1cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b1d0:	f7ff ffb6 	bl	800b140 <HAL_RCC_GetHCLKFreq>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	4b06      	ldr	r3, [pc, #24]	@ (800b1f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	0a1b      	lsrs	r3, r3, #8
 800b1dc:	f003 0307 	and.w	r3, r3, #7
 800b1e0:	4904      	ldr	r1, [pc, #16]	@ (800b1f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b1e2:	5ccb      	ldrb	r3, [r1, r3]
 800b1e4:	f003 031f 	and.w	r3, r3, #31
 800b1e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	58024400 	.word	0x58024400
 800b1f4:	080181fc 	.word	0x080181fc

0800b1f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b1f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1fc:	b0c6      	sub	sp, #280	@ 0x118
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b204:	2300      	movs	r3, #0
 800b206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b20a:	2300      	movs	r3, #0
 800b20c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b218:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b21c:	2500      	movs	r5, #0
 800b21e:	ea54 0305 	orrs.w	r3, r4, r5
 800b222:	d049      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b22a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b22e:	d02f      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b230:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b234:	d828      	bhi.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b236:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b23a:	d01a      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b23c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b240:	d822      	bhi.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b24a:	d007      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b24c:	e01c      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b24e:	4bab      	ldr	r3, [pc, #684]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b252:	4aaa      	ldr	r2, [pc, #680]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b25a:	e01a      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b260:	3308      	adds	r3, #8
 800b262:	2102      	movs	r1, #2
 800b264:	4618      	mov	r0, r3
 800b266:	f002 fa49 	bl	800d6fc <RCCEx_PLL2_Config>
 800b26a:	4603      	mov	r3, r0
 800b26c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b270:	e00f      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b276:	3328      	adds	r3, #40	@ 0x28
 800b278:	2102      	movs	r1, #2
 800b27a:	4618      	mov	r0, r3
 800b27c:	f002 faf0 	bl	800d860 <RCCEx_PLL3_Config>
 800b280:	4603      	mov	r3, r0
 800b282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b286:	e004      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b28e:	e000      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10a      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b29a:	4b98      	ldr	r3, [pc, #608]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b29c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b29e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2a8:	4a94      	ldr	r2, [pc, #592]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b2aa:	430b      	orrs	r3, r1
 800b2ac:	6513      	str	r3, [r2, #80]	@ 0x50
 800b2ae:	e003      	b.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b2c4:	f04f 0900 	mov.w	r9, #0
 800b2c8:	ea58 0309 	orrs.w	r3, r8, r9
 800b2cc:	d047      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	d82a      	bhi.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b2d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2de:	bf00      	nop
 800b2e0:	0800b2f5 	.word	0x0800b2f5
 800b2e4:	0800b303 	.word	0x0800b303
 800b2e8:	0800b319 	.word	0x0800b319
 800b2ec:	0800b337 	.word	0x0800b337
 800b2f0:	0800b337 	.word	0x0800b337
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2f4:	4b81      	ldr	r3, [pc, #516]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f8:	4a80      	ldr	r2, [pc, #512]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b2fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b300:	e01a      	b.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b306:	3308      	adds	r3, #8
 800b308:	2100      	movs	r1, #0
 800b30a:	4618      	mov	r0, r3
 800b30c:	f002 f9f6 	bl	800d6fc <RCCEx_PLL2_Config>
 800b310:	4603      	mov	r3, r0
 800b312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b316:	e00f      	b.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b31c:	3328      	adds	r3, #40	@ 0x28
 800b31e:	2100      	movs	r1, #0
 800b320:	4618      	mov	r0, r3
 800b322:	f002 fa9d 	bl	800d860 <RCCEx_PLL3_Config>
 800b326:	4603      	mov	r3, r0
 800b328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b32c:	e004      	b.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b334:	e000      	b.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b336:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b340:	4b6e      	ldr	r3, [pc, #440]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b344:	f023 0107 	bic.w	r1, r3, #7
 800b348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b34c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b34e:	4a6b      	ldr	r2, [pc, #428]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b350:	430b      	orrs	r3, r1
 800b352:	6513      	str	r3, [r2, #80]	@ 0x50
 800b354:	e003      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b356:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b35a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800b36a:	f04f 0b00 	mov.w	fp, #0
 800b36e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b372:	d05b      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b378:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b37c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b380:	d03b      	beq.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b382:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b386:	d834      	bhi.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b388:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b38c:	d037      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b38e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b392:	d82e      	bhi.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b394:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b398:	d033      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b39a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b39e:	d828      	bhi.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b3a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3a4:	d01a      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b3a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3aa:	d822      	bhi.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d003      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b3b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3b4:	d007      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b3b6:	e01c      	b.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3b8:	4b50      	ldr	r3, [pc, #320]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3bc:	4a4f      	ldr	r2, [pc, #316]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3c4:	e01e      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f002 f994 	bl	800d6fc <RCCEx_PLL2_Config>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b3da:	e013      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3e0:	3328      	adds	r3, #40	@ 0x28
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f002 fa3b 	bl	800d860 <RCCEx_PLL3_Config>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3f0:	e008      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b3f8:	e004      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b3fa:	bf00      	nop
 800b3fc:	e002      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b3fe:	bf00      	nop
 800b400:	e000      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b402:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10b      	bne.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b40c:	4b3b      	ldr	r3, [pc, #236]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b40e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b410:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b41c:	4a37      	ldr	r2, [pc, #220]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b41e:	430b      	orrs	r3, r1
 800b420:	6593      	str	r3, [r2, #88]	@ 0x58
 800b422:	e003      	b.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b438:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b43c:	2300      	movs	r3, #0
 800b43e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b442:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b446:	460b      	mov	r3, r1
 800b448:	4313      	orrs	r3, r2
 800b44a:	d05d      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b450:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b454:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b458:	d03b      	beq.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b45a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b45e:	d834      	bhi.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b460:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b464:	d037      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b466:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b46a:	d82e      	bhi.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b46c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b470:	d033      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b472:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b476:	d828      	bhi.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b478:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b47c:	d01a      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b47e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b482:	d822      	bhi.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b484:	2b00      	cmp	r3, #0
 800b486:	d003      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b48c:	d007      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b48e:	e01c      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b490:	4b1a      	ldr	r3, [pc, #104]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b494:	4a19      	ldr	r2, [pc, #100]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b49a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b49c:	e01e      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f002 f928 	bl	800d6fc <RCCEx_PLL2_Config>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b4b2:	e013      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4b8:	3328      	adds	r3, #40	@ 0x28
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f002 f9cf 	bl	800d860 <RCCEx_PLL3_Config>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4c8:	e008      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b4d0:	e004      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b4d2:	bf00      	nop
 800b4d4:	e002      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b4d6:	bf00      	nop
 800b4d8:	e000      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b4da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10d      	bne.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b4e4:	4b05      	ldr	r3, [pc, #20]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b4f4:	4a01      	ldr	r2, [pc, #4]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4f6:	430b      	orrs	r3, r1
 800b4f8:	6593      	str	r3, [r2, #88]	@ 0x58
 800b4fa:	e005      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b4fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b514:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b518:	2300      	movs	r3, #0
 800b51a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b51e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b522:	460b      	mov	r3, r1
 800b524:	4313      	orrs	r3, r2
 800b526:	d03a      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b52c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b52e:	2b30      	cmp	r3, #48	@ 0x30
 800b530:	d01f      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b532:	2b30      	cmp	r3, #48	@ 0x30
 800b534:	d819      	bhi.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b536:	2b20      	cmp	r3, #32
 800b538:	d00c      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b53a:	2b20      	cmp	r3, #32
 800b53c:	d815      	bhi.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d019      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b542:	2b10      	cmp	r3, #16
 800b544:	d111      	bne.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b546:	4baa      	ldr	r3, [pc, #680]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54a:	4aa9      	ldr	r2, [pc, #676]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b54c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b552:	e011      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b558:	3308      	adds	r3, #8
 800b55a:	2102      	movs	r1, #2
 800b55c:	4618      	mov	r0, r3
 800b55e:	f002 f8cd 	bl	800d6fc <RCCEx_PLL2_Config>
 800b562:	4603      	mov	r3, r0
 800b564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b568:	e006      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b570:	e002      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b572:	bf00      	nop
 800b574:	e000      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b576:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10a      	bne.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b580:	4b9b      	ldr	r3, [pc, #620]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b584:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b58c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b58e:	4a98      	ldr	r2, [pc, #608]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b590:	430b      	orrs	r3, r1
 800b592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b594:	e003      	b.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b59a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b5aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b5b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	d051      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5c8:	d035      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b5ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5ce:	d82e      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b5d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b5d4:	d031      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b5d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b5da:	d828      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b5dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5e0:	d01a      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b5e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5e6:	d822      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b5ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5f0:	d007      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b5f2:	e01c      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5f4:	4b7e      	ldr	r3, [pc, #504]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f8:	4a7d      	ldr	r2, [pc, #500]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b5fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b600:	e01c      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b606:	3308      	adds	r3, #8
 800b608:	2100      	movs	r1, #0
 800b60a:	4618      	mov	r0, r3
 800b60c:	f002 f876 	bl	800d6fc <RCCEx_PLL2_Config>
 800b610:	4603      	mov	r3, r0
 800b612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b616:	e011      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b61c:	3328      	adds	r3, #40	@ 0x28
 800b61e:	2100      	movs	r1, #0
 800b620:	4618      	mov	r0, r3
 800b622:	f002 f91d 	bl	800d860 <RCCEx_PLL3_Config>
 800b626:	4603      	mov	r3, r0
 800b628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b62c:	e006      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b634:	e002      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b636:	bf00      	nop
 800b638:	e000      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b63a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b63c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10a      	bne.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b644:	4b6a      	ldr	r3, [pc, #424]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b648:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b652:	4a67      	ldr	r2, [pc, #412]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b654:	430b      	orrs	r3, r1
 800b656:	6513      	str	r3, [r2, #80]	@ 0x50
 800b658:	e003      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b65a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b65e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b66e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b672:	2300      	movs	r3, #0
 800b674:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b678:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b67c:	460b      	mov	r3, r1
 800b67e:	4313      	orrs	r3, r2
 800b680:	d053      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b68c:	d033      	beq.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b68e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b692:	d82c      	bhi.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b694:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b698:	d02f      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b69a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b69e:	d826      	bhi.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b6a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b6a4:	d02b      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b6a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b6aa:	d820      	bhi.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b6ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6b0:	d012      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b6b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6b6:	d81a      	bhi.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d022      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b6bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6c0:	d115      	bne.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f002 f816 	bl	800d6fc <RCCEx_PLL2_Config>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b6d6:	e015      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6dc:	3328      	adds	r3, #40	@ 0x28
 800b6de:	2101      	movs	r1, #1
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f002 f8bd 	bl	800d860 <RCCEx_PLL3_Config>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b6ec:	e00a      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b6f4:	e006      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b6f6:	bf00      	nop
 800b6f8:	e004      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b6fa:	bf00      	nop
 800b6fc:	e002      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b6fe:	bf00      	nop
 800b700:	e000      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b702:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b704:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b70c:	4b38      	ldr	r3, [pc, #224]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b70e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b710:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b71a:	4a35      	ldr	r2, [pc, #212]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b71c:	430b      	orrs	r3, r1
 800b71e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b720:	e003      	b.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b722:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b726:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b736:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b73a:	2300      	movs	r3, #0
 800b73c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b740:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b744:	460b      	mov	r3, r1
 800b746:	4313      	orrs	r3, r2
 800b748:	d058      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b74e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b756:	d033      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b75c:	d82c      	bhi.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b762:	d02f      	beq.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b768:	d826      	bhi.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b76a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b76e:	d02b      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b770:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b774:	d820      	bhi.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b77a:	d012      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b77c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b780:	d81a      	bhi.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b782:	2b00      	cmp	r3, #0
 800b784:	d022      	beq.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b78a:	d115      	bne.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b790:	3308      	adds	r3, #8
 800b792:	2101      	movs	r1, #1
 800b794:	4618      	mov	r0, r3
 800b796:	f001 ffb1 	bl	800d6fc <RCCEx_PLL2_Config>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b7a0:	e015      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7a6:	3328      	adds	r3, #40	@ 0x28
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f002 f858 	bl	800d860 <RCCEx_PLL3_Config>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b7b6:	e00a      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b7be:	e006      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b7c0:	bf00      	nop
 800b7c2:	e004      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b7c4:	bf00      	nop
 800b7c6:	e002      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b7c8:	bf00      	nop
 800b7ca:	e000      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10e      	bne.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b7d6:	4b06      	ldr	r3, [pc, #24]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b7e6:	4a02      	ldr	r2, [pc, #8]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7e8:	430b      	orrs	r3, r1
 800b7ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800b7ec:	e006      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b7ee:	bf00      	nop
 800b7f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b80c:	2300      	movs	r3, #0
 800b80e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b812:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b816:	460b      	mov	r3, r1
 800b818:	4313      	orrs	r3, r2
 800b81a:	d037      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b826:	d00e      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b82c:	d816      	bhi.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d018      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b836:	d111      	bne.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b838:	4bc4      	ldr	r3, [pc, #784]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b83c:	4ac3      	ldr	r2, [pc, #780]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b83e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b844:	e00f      	b.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b84a:	3308      	adds	r3, #8
 800b84c:	2101      	movs	r1, #1
 800b84e:	4618      	mov	r0, r3
 800b850:	f001 ff54 	bl	800d6fc <RCCEx_PLL2_Config>
 800b854:	4603      	mov	r3, r0
 800b856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b85a:	e004      	b.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b862:	e000      	b.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b864:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10a      	bne.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b86e:	4bb7      	ldr	r3, [pc, #732]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b872:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b87a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b87c:	4ab3      	ldr	r2, [pc, #716]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b87e:	430b      	orrs	r3, r1
 800b880:	6513      	str	r3, [r2, #80]	@ 0x50
 800b882:	e003      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b884:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b888:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b894:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b898:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b89c:	2300      	movs	r3, #0
 800b89e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b8a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	d039      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	d81c      	bhi.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b8b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b8bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8bc:	0800b8f9 	.word	0x0800b8f9
 800b8c0:	0800b8cd 	.word	0x0800b8cd
 800b8c4:	0800b8db 	.word	0x0800b8db
 800b8c8:	0800b8f9 	.word	0x0800b8f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8cc:	4b9f      	ldr	r3, [pc, #636]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d0:	4a9e      	ldr	r2, [pc, #632]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b8d8:	e00f      	b.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8de:	3308      	adds	r3, #8
 800b8e0:	2102      	movs	r1, #2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f001 ff0a 	bl	800d6fc <RCCEx_PLL2_Config>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b8ee:	e004      	b.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b8f6:	e000      	b.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10a      	bne.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b902:	4b92      	ldr	r3, [pc, #584]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b906:	f023 0103 	bic.w	r1, r3, #3
 800b90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b90e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b910:	4a8e      	ldr	r2, [pc, #568]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b912:	430b      	orrs	r3, r1
 800b914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b916:	e003      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b918:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b91c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b92c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b930:	2300      	movs	r3, #0
 800b932:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b936:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4313      	orrs	r3, r2
 800b93e:	f000 8099 	beq.w	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b942:	4b83      	ldr	r3, [pc, #524]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a82      	ldr	r2, [pc, #520]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b94c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b94e:	f7fd fb65 	bl	800901c <HAL_GetTick>
 800b952:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b956:	e00b      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b958:	f7fd fb60 	bl	800901c <HAL_GetTick>
 800b95c:	4602      	mov	r2, r0
 800b95e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	2b64      	cmp	r3, #100	@ 0x64
 800b966:	d903      	bls.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b968:	2303      	movs	r3, #3
 800b96a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b96e:	e005      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b970:	4b77      	ldr	r3, [pc, #476]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d0ed      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b97c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b980:	2b00      	cmp	r3, #0
 800b982:	d173      	bne.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b984:	4b71      	ldr	r3, [pc, #452]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b986:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b98c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b990:	4053      	eors	r3, r2
 800b992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b996:	2b00      	cmp	r3, #0
 800b998:	d015      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b99a:	4b6c      	ldr	r3, [pc, #432]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b99c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b99e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b9a6:	4b69      	ldr	r3, [pc, #420]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9aa:	4a68      	ldr	r2, [pc, #416]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b9b2:	4b66      	ldr	r3, [pc, #408]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9b6:	4a65      	ldr	r2, [pc, #404]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b9be:	4a63      	ldr	r2, [pc, #396]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b9ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9d2:	d118      	bne.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9d4:	f7fd fb22 	bl	800901c <HAL_GetTick>
 800b9d8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9dc:	e00d      	b.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9de:	f7fd fb1d 	bl	800901c <HAL_GetTick>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b9e8:	1ad2      	subs	r2, r2, r3
 800b9ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d903      	bls.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800b9f8:	e005      	b.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9fa:	4b54      	ldr	r3, [pc, #336]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9fe:	f003 0302 	and.w	r3, r3, #2
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d0eb      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ba06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d129      	bne.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ba16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba1e:	d10e      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ba20:	4b4a      	ldr	r3, [pc, #296]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ba28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ba30:	091a      	lsrs	r2, r3, #4
 800ba32:	4b48      	ldr	r3, [pc, #288]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ba34:	4013      	ands	r3, r2
 800ba36:	4a45      	ldr	r2, [pc, #276]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	6113      	str	r3, [r2, #16]
 800ba3c:	e005      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ba3e:	4b43      	ldr	r3, [pc, #268]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	4a42      	ldr	r2, [pc, #264]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ba48:	6113      	str	r3, [r2, #16]
 800ba4a:	4b40      	ldr	r3, [pc, #256]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba4c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ba4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ba56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba5a:	4a3c      	ldr	r2, [pc, #240]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba5c:	430b      	orrs	r3, r1
 800ba5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ba60:	e008      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ba62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ba6a:	e003      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ba74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	f002 0301 	and.w	r3, r2, #1
 800ba80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ba84:	2300      	movs	r3, #0
 800ba86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ba8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ba8e:	460b      	mov	r3, r1
 800ba90:	4313      	orrs	r3, r2
 800ba92:	f000 808f 	beq.w	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ba96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba9c:	2b28      	cmp	r3, #40	@ 0x28
 800ba9e:	d871      	bhi.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800baa0:	a201      	add	r2, pc, #4	@ (adr r2, 800baa8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800baa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa6:	bf00      	nop
 800baa8:	0800bb8d 	.word	0x0800bb8d
 800baac:	0800bb85 	.word	0x0800bb85
 800bab0:	0800bb85 	.word	0x0800bb85
 800bab4:	0800bb85 	.word	0x0800bb85
 800bab8:	0800bb85 	.word	0x0800bb85
 800babc:	0800bb85 	.word	0x0800bb85
 800bac0:	0800bb85 	.word	0x0800bb85
 800bac4:	0800bb85 	.word	0x0800bb85
 800bac8:	0800bb59 	.word	0x0800bb59
 800bacc:	0800bb85 	.word	0x0800bb85
 800bad0:	0800bb85 	.word	0x0800bb85
 800bad4:	0800bb85 	.word	0x0800bb85
 800bad8:	0800bb85 	.word	0x0800bb85
 800badc:	0800bb85 	.word	0x0800bb85
 800bae0:	0800bb85 	.word	0x0800bb85
 800bae4:	0800bb85 	.word	0x0800bb85
 800bae8:	0800bb6f 	.word	0x0800bb6f
 800baec:	0800bb85 	.word	0x0800bb85
 800baf0:	0800bb85 	.word	0x0800bb85
 800baf4:	0800bb85 	.word	0x0800bb85
 800baf8:	0800bb85 	.word	0x0800bb85
 800bafc:	0800bb85 	.word	0x0800bb85
 800bb00:	0800bb85 	.word	0x0800bb85
 800bb04:	0800bb85 	.word	0x0800bb85
 800bb08:	0800bb8d 	.word	0x0800bb8d
 800bb0c:	0800bb85 	.word	0x0800bb85
 800bb10:	0800bb85 	.word	0x0800bb85
 800bb14:	0800bb85 	.word	0x0800bb85
 800bb18:	0800bb85 	.word	0x0800bb85
 800bb1c:	0800bb85 	.word	0x0800bb85
 800bb20:	0800bb85 	.word	0x0800bb85
 800bb24:	0800bb85 	.word	0x0800bb85
 800bb28:	0800bb8d 	.word	0x0800bb8d
 800bb2c:	0800bb85 	.word	0x0800bb85
 800bb30:	0800bb85 	.word	0x0800bb85
 800bb34:	0800bb85 	.word	0x0800bb85
 800bb38:	0800bb85 	.word	0x0800bb85
 800bb3c:	0800bb85 	.word	0x0800bb85
 800bb40:	0800bb85 	.word	0x0800bb85
 800bb44:	0800bb85 	.word	0x0800bb85
 800bb48:	0800bb8d 	.word	0x0800bb8d
 800bb4c:	58024400 	.word	0x58024400
 800bb50:	58024800 	.word	0x58024800
 800bb54:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb5c:	3308      	adds	r3, #8
 800bb5e:	2101      	movs	r1, #1
 800bb60:	4618      	mov	r0, r3
 800bb62:	f001 fdcb 	bl	800d6fc <RCCEx_PLL2_Config>
 800bb66:	4603      	mov	r3, r0
 800bb68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bb6c:	e00f      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb72:	3328      	adds	r3, #40	@ 0x28
 800bb74:	2101      	movs	r1, #1
 800bb76:	4618      	mov	r0, r3
 800bb78:	f001 fe72 	bl	800d860 <RCCEx_PLL3_Config>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bb82:	e004      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb8a:	e000      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bb8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10a      	bne.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bb96:	4bbf      	ldr	r3, [pc, #764]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bb98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bb9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bba4:	4abb      	ldr	r2, [pc, #748]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bba6:	430b      	orrs	r3, r1
 800bba8:	6553      	str	r3, [r2, #84]	@ 0x54
 800bbaa:	e003      	b.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f002 0302 	and.w	r3, r2, #2
 800bbc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bbca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	d041      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbda:	2b05      	cmp	r3, #5
 800bbdc:	d824      	bhi.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800bbde:	a201      	add	r2, pc, #4	@ (adr r2, 800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800bbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe4:	0800bc31 	.word	0x0800bc31
 800bbe8:	0800bbfd 	.word	0x0800bbfd
 800bbec:	0800bc13 	.word	0x0800bc13
 800bbf0:	0800bc31 	.word	0x0800bc31
 800bbf4:	0800bc31 	.word	0x0800bc31
 800bbf8:	0800bc31 	.word	0x0800bc31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc00:	3308      	adds	r3, #8
 800bc02:	2101      	movs	r1, #1
 800bc04:	4618      	mov	r0, r3
 800bc06:	f001 fd79 	bl	800d6fc <RCCEx_PLL2_Config>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bc10:	e00f      	b.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc16:	3328      	adds	r3, #40	@ 0x28
 800bc18:	2101      	movs	r1, #1
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f001 fe20 	bl	800d860 <RCCEx_PLL3_Config>
 800bc20:	4603      	mov	r3, r0
 800bc22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bc26:	e004      	b.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc2e:	e000      	b.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800bc30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10a      	bne.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bc3a:	4b96      	ldr	r3, [pc, #600]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bc3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc3e:	f023 0107 	bic.w	r1, r3, #7
 800bc42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc48:	4a92      	ldr	r2, [pc, #584]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bc4a:	430b      	orrs	r3, r1
 800bc4c:	6553      	str	r3, [r2, #84]	@ 0x54
 800bc4e:	e003      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f002 0304 	and.w	r3, r2, #4
 800bc64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bc68:	2300      	movs	r3, #0
 800bc6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc6e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bc72:	460b      	mov	r3, r1
 800bc74:	4313      	orrs	r3, r2
 800bc76:	d044      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc80:	2b05      	cmp	r3, #5
 800bc82:	d825      	bhi.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800bc84:	a201      	add	r2, pc, #4	@ (adr r2, 800bc8c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800bc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8a:	bf00      	nop
 800bc8c:	0800bcd9 	.word	0x0800bcd9
 800bc90:	0800bca5 	.word	0x0800bca5
 800bc94:	0800bcbb 	.word	0x0800bcbb
 800bc98:	0800bcd9 	.word	0x0800bcd9
 800bc9c:	0800bcd9 	.word	0x0800bcd9
 800bca0:	0800bcd9 	.word	0x0800bcd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bca8:	3308      	adds	r3, #8
 800bcaa:	2101      	movs	r1, #1
 800bcac:	4618      	mov	r0, r3
 800bcae:	f001 fd25 	bl	800d6fc <RCCEx_PLL2_Config>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bcb8:	e00f      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcbe:	3328      	adds	r3, #40	@ 0x28
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f001 fdcc 	bl	800d860 <RCCEx_PLL3_Config>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bcce:	e004      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bcd6:	e000      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800bcd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10b      	bne.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bce2:	4b6c      	ldr	r3, [pc, #432]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bce6:	f023 0107 	bic.w	r1, r3, #7
 800bcea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcf2:	4a68      	ldr	r2, [pc, #416]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bcf4:	430b      	orrs	r3, r1
 800bcf6:	6593      	str	r3, [r2, #88]	@ 0x58
 800bcf8:	e003      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0a:	f002 0320 	and.w	r3, r2, #32
 800bd0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bd12:	2300      	movs	r3, #0
 800bd14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bd18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	d055      	beq.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bd22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd2e:	d033      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800bd30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd34:	d82c      	bhi.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bd36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd3a:	d02f      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800bd3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd40:	d826      	bhi.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bd42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd46:	d02b      	beq.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800bd48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd4c:	d820      	bhi.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bd4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd52:	d012      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800bd54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd58:	d81a      	bhi.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d022      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800bd5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd62:	d115      	bne.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd68:	3308      	adds	r3, #8
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f001 fcc5 	bl	800d6fc <RCCEx_PLL2_Config>
 800bd72:	4603      	mov	r3, r0
 800bd74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bd78:	e015      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd7e:	3328      	adds	r3, #40	@ 0x28
 800bd80:	2102      	movs	r1, #2
 800bd82:	4618      	mov	r0, r3
 800bd84:	f001 fd6c 	bl	800d860 <RCCEx_PLL3_Config>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bd8e:	e00a      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd96:	e006      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bd98:	bf00      	nop
 800bd9a:	e004      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bd9c:	bf00      	nop
 800bd9e:	e002      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bda0:	bf00      	nop
 800bda2:	e000      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bda4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bda6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10b      	bne.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bdae:	4b39      	ldr	r3, [pc, #228]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bdb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bdb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bdbe:	4a35      	ldr	r2, [pc, #212]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bdc0:	430b      	orrs	r3, r1
 800bdc2:	6553      	str	r3, [r2, #84]	@ 0x54
 800bdc4:	e003      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bdce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800bdda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bdde:	2300      	movs	r3, #0
 800bde0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bde4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800bde8:	460b      	mov	r3, r1
 800bdea:	4313      	orrs	r3, r2
 800bdec:	d058      	beq.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bdee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bdf6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800bdfa:	d033      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800bdfc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800be00:	d82c      	bhi.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800be02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be06:	d02f      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800be08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be0c:	d826      	bhi.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800be0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800be12:	d02b      	beq.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800be14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800be18:	d820      	bhi.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800be1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be1e:	d012      	beq.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800be20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be24:	d81a      	bhi.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800be26:	2b00      	cmp	r3, #0
 800be28:	d022      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800be2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be2e:	d115      	bne.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be34:	3308      	adds	r3, #8
 800be36:	2100      	movs	r1, #0
 800be38:	4618      	mov	r0, r3
 800be3a:	f001 fc5f 	bl	800d6fc <RCCEx_PLL2_Config>
 800be3e:	4603      	mov	r3, r0
 800be40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800be44:	e015      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be4a:	3328      	adds	r3, #40	@ 0x28
 800be4c:	2102      	movs	r1, #2
 800be4e:	4618      	mov	r0, r3
 800be50:	f001 fd06 	bl	800d860 <RCCEx_PLL3_Config>
 800be54:	4603      	mov	r3, r0
 800be56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800be5a:	e00a      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be62:	e006      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800be64:	bf00      	nop
 800be66:	e004      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800be68:	bf00      	nop
 800be6a:	e002      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800be6c:	bf00      	nop
 800be6e:	e000      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800be70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10e      	bne.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800be7a:	4b06      	ldr	r3, [pc, #24]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800be82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800be8a:	4a02      	ldr	r2, [pc, #8]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be8c:	430b      	orrs	r3, r1
 800be8e:	6593      	str	r3, [r2, #88]	@ 0x58
 800be90:	e006      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800be92:	bf00      	nop
 800be94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800beac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800beb0:	2300      	movs	r3, #0
 800beb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800beb6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800beba:	460b      	mov	r3, r1
 800bebc:	4313      	orrs	r3, r2
 800bebe:	d055      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bec8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800becc:	d033      	beq.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800bece:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bed2:	d82c      	bhi.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bed8:	d02f      	beq.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800beda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bede:	d826      	bhi.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bee0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bee4:	d02b      	beq.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800bee6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800beea:	d820      	bhi.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800beec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bef0:	d012      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800bef2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bef6:	d81a      	bhi.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d022      	beq.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800befc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf00:	d115      	bne.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf06:	3308      	adds	r3, #8
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f001 fbf6 	bl	800d6fc <RCCEx_PLL2_Config>
 800bf10:	4603      	mov	r3, r0
 800bf12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bf16:	e015      	b.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf1c:	3328      	adds	r3, #40	@ 0x28
 800bf1e:	2102      	movs	r1, #2
 800bf20:	4618      	mov	r0, r3
 800bf22:	f001 fc9d 	bl	800d860 <RCCEx_PLL3_Config>
 800bf26:	4603      	mov	r3, r0
 800bf28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bf2c:	e00a      	b.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf34:	e006      	b.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bf36:	bf00      	nop
 800bf38:	e004      	b.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bf3a:	bf00      	nop
 800bf3c:	e002      	b.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bf3e:	bf00      	nop
 800bf40:	e000      	b.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bf42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d10b      	bne.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bf4c:	4ba0      	ldr	r3, [pc, #640]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bf4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf50:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800bf54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bf5c:	4a9c      	ldr	r2, [pc, #624]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bf5e:	430b      	orrs	r3, r1
 800bf60:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf62:	e003      	b.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800bf6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	f002 0308 	and.w	r3, r2, #8
 800bf78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bf82:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800bf86:	460b      	mov	r3, r1
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	d01e      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800bf8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf98:	d10c      	bne.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf9e:	3328      	adds	r3, #40	@ 0x28
 800bfa0:	2102      	movs	r1, #2
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f001 fc5c 	bl	800d860 <RCCEx_PLL3_Config>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800bfb4:	4b86      	ldr	r3, [pc, #536]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bfb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfb8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bfbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfc4:	4a82      	ldr	r2, [pc, #520]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bfc6:	430b      	orrs	r3, r1
 800bfc8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bfca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd2:	f002 0310 	and.w	r3, r2, #16
 800bfd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bfe0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	d01e      	beq.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bfea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bff6:	d10c      	bne.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bffc:	3328      	adds	r3, #40	@ 0x28
 800bffe:	2102      	movs	r1, #2
 800c000:	4618      	mov	r0, r3
 800c002:	f001 fc2d 	bl	800d860 <RCCEx_PLL3_Config>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c012:	4b6f      	ldr	r3, [pc, #444]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c016:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c01e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c022:	4a6b      	ldr	r2, [pc, #428]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c024:	430b      	orrs	r3, r1
 800c026:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c034:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c036:	2300      	movs	r3, #0
 800c038:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c03a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c03e:	460b      	mov	r3, r1
 800c040:	4313      	orrs	r3, r2
 800c042:	d03e      	beq.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c048:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c04c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c050:	d022      	beq.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c056:	d81b      	bhi.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d003      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c05c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c060:	d00b      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c062:	e015      	b.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c068:	3308      	adds	r3, #8
 800c06a:	2100      	movs	r1, #0
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 fb45 	bl	800d6fc <RCCEx_PLL2_Config>
 800c072:	4603      	mov	r3, r0
 800c074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c078:	e00f      	b.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c07e:	3328      	adds	r3, #40	@ 0x28
 800c080:	2102      	movs	r1, #2
 800c082:	4618      	mov	r0, r3
 800c084:	f001 fbec 	bl	800d860 <RCCEx_PLL3_Config>
 800c088:	4603      	mov	r3, r0
 800c08a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c08e:	e004      	b.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c096:	e000      	b.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c09a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10b      	bne.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c0a2:	4b4b      	ldr	r3, [pc, #300]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c0a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c0b2:	4a47      	ldr	r2, [pc, #284]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c0b4:	430b      	orrs	r3, r1
 800c0b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0b8:	e003      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c0ce:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	677b      	str	r3, [r7, #116]	@ 0x74
 800c0d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	d03b      	beq.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c0ea:	d01f      	beq.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c0ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c0f0:	d818      	bhi.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c0f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0f6:	d003      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c0f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c0fc:	d007      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c0fe:	e011      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c100:	4b33      	ldr	r3, [pc, #204]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c104:	4a32      	ldr	r2, [pc, #200]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c10a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c10c:	e00f      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c112:	3328      	adds	r3, #40	@ 0x28
 800c114:	2101      	movs	r1, #1
 800c116:	4618      	mov	r0, r3
 800c118:	f001 fba2 	bl	800d860 <RCCEx_PLL3_Config>
 800c11c:	4603      	mov	r3, r0
 800c11e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c122:	e004      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c12a:	e000      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c12c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c12e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10b      	bne.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c136:	4b26      	ldr	r3, [pc, #152]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c13a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c146:	4a22      	ldr	r2, [pc, #136]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c148:	430b      	orrs	r3, r1
 800c14a:	6553      	str	r3, [r2, #84]	@ 0x54
 800c14c:	e003      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c14e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c152:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c162:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c164:	2300      	movs	r3, #0
 800c166:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c168:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c16c:	460b      	mov	r3, r1
 800c16e:	4313      	orrs	r3, r2
 800c170:	d034      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d003      	beq.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c17c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c180:	d007      	beq.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c182:	e011      	b.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c184:	4b12      	ldr	r3, [pc, #72]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c188:	4a11      	ldr	r2, [pc, #68]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c18a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c18e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c190:	e00e      	b.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c196:	3308      	adds	r3, #8
 800c198:	2102      	movs	r1, #2
 800c19a:	4618      	mov	r0, r3
 800c19c:	f001 faae 	bl	800d6fc <RCCEx_PLL2_Config>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c1a6:	e003      	b.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10d      	bne.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c1b8:	4b05      	ldr	r3, [pc, #20]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c1ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1c6:	4a02      	ldr	r2, [pc, #8]	@ (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c1c8:	430b      	orrs	r3, r1
 800c1ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c1cc:	e006      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c1ce:	bf00      	nop
 800c1d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c1e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	667b      	str	r3, [r7, #100]	@ 0x64
 800c1ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	d00c      	beq.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1fc:	3328      	adds	r3, #40	@ 0x28
 800c1fe:	2102      	movs	r1, #2
 800c200:	4618      	mov	r0, r3
 800c202:	f001 fb2d 	bl	800d860 <RCCEx_PLL3_Config>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d002      	beq.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c21e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c220:	2300      	movs	r3, #0
 800c222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c224:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c228:	460b      	mov	r3, r1
 800c22a:	4313      	orrs	r3, r2
 800c22c:	d036      	beq.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c232:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c238:	d018      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c23a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c23e:	d811      	bhi.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c244:	d014      	beq.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c24a:	d80b      	bhi.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d011      	beq.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c254:	d106      	bne.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c256:	4bb7      	ldr	r3, [pc, #732]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25a:	4ab6      	ldr	r2, [pc, #728]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c25c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c260:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c262:	e008      	b.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c26a:	e004      	b.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c26c:	bf00      	nop
 800c26e:	e002      	b.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c270:	bf00      	nop
 800c272:	e000      	b.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c274:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c276:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10a      	bne.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c27e:	4bad      	ldr	r3, [pc, #692]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c282:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c28a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c28c:	4aa9      	ldr	r2, [pc, #676]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c28e:	430b      	orrs	r3, r1
 800c290:	6553      	str	r3, [r2, #84]	@ 0x54
 800c292:	e003      	b.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c294:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c298:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c2a8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	657b      	str	r3, [r7, #84]	@ 0x54
 800c2ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	d009      	beq.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c2b8:	4b9e      	ldr	r3, [pc, #632]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c2ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2c6:	4a9b      	ldr	r2, [pc, #620]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c2c8:	430b      	orrs	r3, r1
 800c2ca:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c2d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2da:	2300      	movs	r3, #0
 800c2dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	d009      	beq.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c2e8:	4b92      	ldr	r3, [pc, #584]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c2ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2ec:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2f6:	4a8f      	ldr	r2, [pc, #572]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c2f8:	430b      	orrs	r3, r1
 800c2fa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c308:	643b      	str	r3, [r7, #64]	@ 0x40
 800c30a:	2300      	movs	r3, #0
 800c30c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c30e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c312:	460b      	mov	r3, r1
 800c314:	4313      	orrs	r3, r2
 800c316:	d00e      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c318:	4b86      	ldr	r3, [pc, #536]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	4a85      	ldr	r2, [pc, #532]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c31e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c322:	6113      	str	r3, [r2, #16]
 800c324:	4b83      	ldr	r3, [pc, #524]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c326:	6919      	ldr	r1, [r3, #16]
 800c328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c32c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c330:	4a80      	ldr	r2, [pc, #512]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c332:	430b      	orrs	r3, r1
 800c334:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c342:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c344:	2300      	movs	r3, #0
 800c346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c348:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c34c:	460b      	mov	r3, r1
 800c34e:	4313      	orrs	r3, r2
 800c350:	d009      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c352:	4b78      	ldr	r3, [pc, #480]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c356:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c35e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c360:	4a74      	ldr	r2, [pc, #464]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c362:	430b      	orrs	r3, r1
 800c364:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c372:	633b      	str	r3, [r7, #48]	@ 0x30
 800c374:	2300      	movs	r3, #0
 800c376:	637b      	str	r3, [r7, #52]	@ 0x34
 800c378:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c37c:	460b      	mov	r3, r1
 800c37e:	4313      	orrs	r3, r2
 800c380:	d00a      	beq.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c382:	4b6c      	ldr	r3, [pc, #432]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c386:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c392:	4a68      	ldr	r2, [pc, #416]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c394:	430b      	orrs	r3, r1
 800c396:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c3a4:	f003 0301 	and.w	r3, r3, #1
 800c3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	d011      	beq.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b8:	3308      	adds	r3, #8
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f001 f99d 	bl	800d6fc <RCCEx_PLL2_Config>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c3c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d003      	beq.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	6239      	str	r1, [r7, #32]
 800c3e4:	f003 0302 	and.w	r3, r3, #2
 800c3e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	d011      	beq.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f8:	3308      	adds	r3, #8
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f001 f97d 	bl	800d6fc <RCCEx_PLL2_Config>
 800c402:	4603      	mov	r3, r0
 800c404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d003      	beq.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c414:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c420:	2100      	movs	r1, #0
 800c422:	61b9      	str	r1, [r7, #24]
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	61fb      	str	r3, [r7, #28]
 800c42a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c42e:	460b      	mov	r3, r1
 800c430:	4313      	orrs	r3, r2
 800c432:	d011      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c438:	3308      	adds	r3, #8
 800c43a:	2102      	movs	r1, #2
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 f95d 	bl	800d6fc <RCCEx_PLL2_Config>
 800c442:	4603      	mov	r3, r0
 800c444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d003      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c450:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c454:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	2100      	movs	r1, #0
 800c462:	6139      	str	r1, [r7, #16]
 800c464:	f003 0308 	and.w	r3, r3, #8
 800c468:	617b      	str	r3, [r7, #20]
 800c46a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c46e:	460b      	mov	r3, r1
 800c470:	4313      	orrs	r3, r2
 800c472:	d011      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c478:	3328      	adds	r3, #40	@ 0x28
 800c47a:	2100      	movs	r1, #0
 800c47c:	4618      	mov	r0, r3
 800c47e:	f001 f9ef 	bl	800d860 <RCCEx_PLL3_Config>
 800c482:	4603      	mov	r3, r0
 800c484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800c488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c494:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	60b9      	str	r1, [r7, #8]
 800c4a4:	f003 0310 	and.w	r3, r3, #16
 800c4a8:	60fb      	str	r3, [r7, #12]
 800c4aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	d011      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b8:	3328      	adds	r3, #40	@ 0x28
 800c4ba:	2101      	movs	r1, #1
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f001 f9cf 	bl	800d860 <RCCEx_PLL3_Config>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c4c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d003      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	6039      	str	r1, [r7, #0]
 800c4e4:	f003 0320 	and.w	r3, r3, #32
 800c4e8:	607b      	str	r3, [r7, #4]
 800c4ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	d011      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4f8:	3328      	adds	r3, #40	@ 0x28
 800c4fa:	2102      	movs	r1, #2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 f9af 	bl	800d860 <RCCEx_PLL3_Config>
 800c502:	4603      	mov	r3, r0
 800c504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d003      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800c518:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	e000      	b.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c524:	2301      	movs	r3, #1
}
 800c526:	4618      	mov	r0, r3
 800c528:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c52c:	46bd      	mov	sp, r7
 800c52e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c532:	bf00      	nop
 800c534:	58024400 	.word	0x58024400

0800c538 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b090      	sub	sp, #64	@ 0x40
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c542:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c546:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c54a:	430b      	orrs	r3, r1
 800c54c:	f040 8094 	bne.w	800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c550:	4b9b      	ldr	r3, [pc, #620]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c554:	f003 0307 	and.w	r3, r3, #7
 800c558:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55c:	2b04      	cmp	r3, #4
 800c55e:	f200 8087 	bhi.w	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c562:	a201      	add	r2, pc, #4	@ (adr r2, 800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c568:	0800c57d 	.word	0x0800c57d
 800c56c:	0800c5a5 	.word	0x0800c5a5
 800c570:	0800c5cd 	.word	0x0800c5cd
 800c574:	0800c669 	.word	0x0800c669
 800c578:	0800c5f5 	.word	0x0800c5f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c57c:	4b90      	ldr	r3, [pc, #576]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c584:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c588:	d108      	bne.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c58a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c58e:	4618      	mov	r0, r3
 800c590:	f000 ff62 	bl	800d458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c598:	f000 bc93 	b.w	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5a0:	f000 bc8f 	b.w	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5a4:	4b86      	ldr	r3, [pc, #536]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c5b0:	d108      	bne.n	800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5b2:	f107 0318 	add.w	r3, r7, #24
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 fca6 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5c0:	f000 bc7f 	b.w	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5c8:	f000 bc7b 	b.w	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5cc:	4b7c      	ldr	r3, [pc, #496]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c5d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5d8:	d108      	bne.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5da:	f107 030c 	add.w	r3, r7, #12
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 fde6 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5e8:	f000 bc6b 	b.w	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5f0:	f000 bc67 	b.w	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5f4:	4b72      	ldr	r3, [pc, #456]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c5f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c5fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5fe:	4b70      	ldr	r3, [pc, #448]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f003 0304 	and.w	r3, r3, #4
 800c606:	2b04      	cmp	r3, #4
 800c608:	d10c      	bne.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d109      	bne.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c610:	4b6b      	ldr	r3, [pc, #428]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	08db      	lsrs	r3, r3, #3
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	4a6a      	ldr	r2, [pc, #424]	@ (800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c61c:	fa22 f303 	lsr.w	r3, r2, r3
 800c620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c622:	e01f      	b.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c624:	4b66      	ldr	r3, [pc, #408]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c62c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c630:	d106      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c638:	d102      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c63a:	4b63      	ldr	r3, [pc, #396]	@ (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c63e:	e011      	b.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c640:	4b5f      	ldr	r3, [pc, #380]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c64c:	d106      	bne.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c654:	d102      	bne.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c656:	4b5d      	ldr	r3, [pc, #372]	@ (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c65a:	e003      	b.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c65c:	2300      	movs	r3, #0
 800c65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c660:	f000 bc2f 	b.w	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c664:	f000 bc2d 	b.w	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c668:	4b59      	ldr	r3, [pc, #356]	@ (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c66c:	f000 bc29 	b.w	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c674:	f000 bc25 	b.w	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c67c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c680:	430b      	orrs	r3, r1
 800c682:	f040 80a7 	bne.w	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c686:	4b4e      	ldr	r3, [pc, #312]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c68a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c68e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c692:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c696:	d054      	beq.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c69e:	f200 808b 	bhi.w	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c6a8:	f000 8083 	beq.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c6b2:	f200 8081 	bhi.w	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6bc:	d02f      	beq.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6c4:	d878      	bhi.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d004      	beq.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6d2:	d012      	beq.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c6d4:	e070      	b.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6d6:	4b3a      	ldr	r3, [pc, #232]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c6de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c6e2:	d107      	bne.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 feb5 	bl	800d458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6f2:	e3e6      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6f8:	e3e3      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6fa:	4b31      	ldr	r3, [pc, #196]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c706:	d107      	bne.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c708:	f107 0318 	add.w	r3, r7, #24
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 fbfb 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c716:	e3d4      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c718:	2300      	movs	r3, #0
 800c71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c71c:	e3d1      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c71e:	4b28      	ldr	r3, [pc, #160]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c72a:	d107      	bne.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c72c:	f107 030c 	add.w	r3, r7, #12
 800c730:	4618      	mov	r0, r3
 800c732:	f000 fd3d 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c73a:	e3c2      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c740:	e3bf      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c742:	4b1f      	ldr	r3, [pc, #124]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c746:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c74a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c74c:	4b1c      	ldr	r3, [pc, #112]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f003 0304 	and.w	r3, r3, #4
 800c754:	2b04      	cmp	r3, #4
 800c756:	d10c      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d109      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c75e:	4b18      	ldr	r3, [pc, #96]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	08db      	lsrs	r3, r3, #3
 800c764:	f003 0303 	and.w	r3, r3, #3
 800c768:	4a16      	ldr	r2, [pc, #88]	@ (800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c76a:	fa22 f303 	lsr.w	r3, r2, r3
 800c76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c770:	e01e      	b.n	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c772:	4b13      	ldr	r3, [pc, #76]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c77a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c77e:	d106      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c786:	d102      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c788:	4b0f      	ldr	r3, [pc, #60]	@ (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c78c:	e010      	b.n	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c78e:	4b0c      	ldr	r3, [pc, #48]	@ (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c79a:	d106      	bne.n	800c7aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c79e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7a2:	d102      	bne.n	800c7aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7a4:	4b09      	ldr	r3, [pc, #36]	@ (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7a8:	e002      	b.n	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c7ae:	e388      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c7b0:	e387      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c7b2:	4b07      	ldr	r3, [pc, #28]	@ (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7b6:	e384      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7bc:	e381      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c7be:	bf00      	nop
 800c7c0:	58024400 	.word	0x58024400
 800c7c4:	03d09000 	.word	0x03d09000
 800c7c8:	003d0900 	.word	0x003d0900
 800c7cc:	02dc6c00 	.word	0x02dc6c00
 800c7d0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c7d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7d8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c7dc:	430b      	orrs	r3, r1
 800c7de:	f040 809c 	bne.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c7e2:	4b9e      	ldr	r3, [pc, #632]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c7e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7e6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c7ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c7f2:	d054      	beq.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c7fa:	f200 808b 	bhi.w	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c800:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c804:	f000 8083 	beq.w	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c80e:	f200 8081 	bhi.w	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c814:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c818:	d02f      	beq.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c820:	d878      	bhi.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c824:	2b00      	cmp	r3, #0
 800c826:	d004      	beq.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c82e:	d012      	beq.n	800c856 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c830:	e070      	b.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c832:	4b8a      	ldr	r3, [pc, #552]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c83a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c83e:	d107      	bne.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c844:	4618      	mov	r0, r3
 800c846:	f000 fe07 	bl	800d458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c84e:	e338      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c850:	2300      	movs	r3, #0
 800c852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c854:	e335      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c856:	4b81      	ldr	r3, [pc, #516]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c85e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c862:	d107      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c864:	f107 0318 	add.w	r3, r7, #24
 800c868:	4618      	mov	r0, r3
 800c86a:	f000 fb4d 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c872:	e326      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c878:	e323      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c87a:	4b78      	ldr	r3, [pc, #480]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c886:	d107      	bne.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c888:	f107 030c 	add.w	r3, r7, #12
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 fc8f 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c896:	e314      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c89c:	e311      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c89e:	4b6f      	ldr	r3, [pc, #444]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c8a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c8a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8a8:	4b6c      	ldr	r3, [pc, #432]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0304 	and.w	r3, r3, #4
 800c8b0:	2b04      	cmp	r3, #4
 800c8b2:	d10c      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d109      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8ba:	4b68      	ldr	r3, [pc, #416]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	08db      	lsrs	r3, r3, #3
 800c8c0:	f003 0303 	and.w	r3, r3, #3
 800c8c4:	4a66      	ldr	r2, [pc, #408]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c8c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8cc:	e01e      	b.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8ce:	4b63      	ldr	r3, [pc, #396]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8da:	d106      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8e2:	d102      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8e4:	4b5f      	ldr	r3, [pc, #380]	@ (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8e8:	e010      	b.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8ea:	4b5c      	ldr	r3, [pc, #368]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8f6:	d106      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8fe:	d102      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c900:	4b59      	ldr	r3, [pc, #356]	@ (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c904:	e002      	b.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c90a:	e2da      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c90c:	e2d9      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c90e:	4b57      	ldr	r3, [pc, #348]	@ (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c912:	e2d6      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c914:	2300      	movs	r3, #0
 800c916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c918:	e2d3      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c91a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c91e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c922:	430b      	orrs	r3, r1
 800c924:	f040 80a7 	bne.w	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c928:	4b4c      	ldr	r3, [pc, #304]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c92a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c92c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c930:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c938:	d055      	beq.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c940:	f200 8096 	bhi.w	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c946:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c94a:	f000 8084 	beq.w	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c950:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c954:	f200 808c 	bhi.w	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c95a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c95e:	d030      	beq.n	800c9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c966:	f200 8083 	bhi.w	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d004      	beq.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c976:	d012      	beq.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c978:	e07a      	b.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c97a:	4b38      	ldr	r3, [pc, #224]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c982:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c986:	d107      	bne.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 fd63 	bl	800d458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c996:	e294      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c99c:	e291      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c99e:	4b2f      	ldr	r3, [pc, #188]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9aa:	d107      	bne.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9ac:	f107 0318 	add.w	r3, r7, #24
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 faa9 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ba:	e282      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c0:	e27f      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9c2:	4b26      	ldr	r3, [pc, #152]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c9ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9ce:	d107      	bne.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9d0:	f107 030c 	add.w	r3, r7, #12
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 fbeb 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9de:	e270      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9e4:	e26d      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9e6:	4b1d      	ldr	r3, [pc, #116]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c9ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9f0:	4b1a      	ldr	r3, [pc, #104]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f003 0304 	and.w	r3, r3, #4
 800c9f8:	2b04      	cmp	r3, #4
 800c9fa:	d10c      	bne.n	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d109      	bne.n	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca02:	4b16      	ldr	r3, [pc, #88]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	08db      	lsrs	r3, r3, #3
 800ca08:	f003 0303 	and.w	r3, r3, #3
 800ca0c:	4a14      	ldr	r2, [pc, #80]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ca0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca14:	e01e      	b.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca16:	4b11      	ldr	r3, [pc, #68]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca22:	d106      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ca24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca2a:	d102      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ca2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca30:	e010      	b.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca32:	4b0a      	ldr	r3, [pc, #40]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca3e:	d106      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ca40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca46:	d102      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca48:	4b07      	ldr	r3, [pc, #28]	@ (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca4c:	e002      	b.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ca52:	e236      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca54:	e235      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca56:	4b05      	ldr	r3, [pc, #20]	@ (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ca58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca5a:	e232      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca5c:	58024400 	.word	0x58024400
 800ca60:	03d09000 	.word	0x03d09000
 800ca64:	003d0900 	.word	0x003d0900
 800ca68:	02dc6c00 	.word	0x02dc6c00
 800ca6c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ca70:	2300      	movs	r3, #0
 800ca72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca74:	e225      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ca76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca7a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ca7e:	430b      	orrs	r3, r1
 800ca80:	f040 8085 	bne.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ca84:	4b9c      	ldr	r3, [pc, #624]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ca86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca88:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ca8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca94:	d06b      	beq.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ca96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca9c:	d874      	bhi.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800caa4:	d056      	beq.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800caa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800caac:	d86c      	bhi.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800caae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cab4:	d03b      	beq.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800cab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cabc:	d864      	bhi.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cac4:	d021      	beq.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cacc:	d85c      	bhi.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d004      	beq.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cada:	d004      	beq.n	800cae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cadc:	e054      	b.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cade:	f7fe fb5f 	bl	800b1a0 <HAL_RCC_GetPCLK1Freq>
 800cae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cae4:	e1ed      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cae6:	4b84      	ldr	r3, [pc, #528]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800caee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800caf2:	d107      	bne.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caf4:	f107 0318 	add.w	r3, r7, #24
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 fa05 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb02:	e1de      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb04:	2300      	movs	r3, #0
 800cb06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb08:	e1db      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb0a:	4b7b      	ldr	r3, [pc, #492]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb16:	d107      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb18:	f107 030c 	add.w	r3, r7, #12
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 fb47 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb26:	e1cc      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb2c:	e1c9      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb2e:	4b72      	ldr	r3, [pc, #456]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0304 	and.w	r3, r3, #4
 800cb36:	2b04      	cmp	r3, #4
 800cb38:	d109      	bne.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb3a:	4b6f      	ldr	r3, [pc, #444]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	08db      	lsrs	r3, r3, #3
 800cb40:	f003 0303 	and.w	r3, r3, #3
 800cb44:	4a6d      	ldr	r2, [pc, #436]	@ (800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cb46:	fa22 f303 	lsr.w	r3, r2, r3
 800cb4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4c:	e1b9      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb52:	e1b6      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cb54:	4b68      	ldr	r3, [pc, #416]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb60:	d102      	bne.n	800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cb62:	4b67      	ldr	r3, [pc, #412]	@ (800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cb64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb66:	e1ac      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb6c:	e1a9      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb6e:	4b62      	ldr	r3, [pc, #392]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb7a:	d102      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cb7c:	4b61      	ldr	r3, [pc, #388]	@ (800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb80:	e19f      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb86:	e19c      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb8c:	e199      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cb8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb92:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800cb96:	430b      	orrs	r3, r1
 800cb98:	d173      	bne.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cb9a:	4b57      	ldr	r3, [pc, #348]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cb9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cba2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbaa:	d02f      	beq.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbb2:	d863      	bhi.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d004      	beq.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbc0:	d012      	beq.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cbc2:	e05b      	b.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbc4:	4b4c      	ldr	r3, [pc, #304]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cbcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cbd0:	d107      	bne.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbd2:	f107 0318 	add.w	r3, r7, #24
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 f996 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbe0:	e16f      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbe6:	e16c      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbe8:	4b43      	ldr	r3, [pc, #268]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cbf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbf4:	d107      	bne.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbf6:	f107 030c 	add.w	r3, r7, #12
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 fad8 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc04:	e15d      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc0a:	e15a      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc0c:	4b3a      	ldr	r3, [pc, #232]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cc14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc16:	4b38      	ldr	r3, [pc, #224]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f003 0304 	and.w	r3, r3, #4
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	d10c      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800cc22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d109      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc28:	4b33      	ldr	r3, [pc, #204]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	08db      	lsrs	r3, r3, #3
 800cc2e:	f003 0303 	and.w	r3, r3, #3
 800cc32:	4a32      	ldr	r2, [pc, #200]	@ (800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cc34:	fa22 f303 	lsr.w	r3, r2, r3
 800cc38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc3a:	e01e      	b.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc3c:	4b2e      	ldr	r3, [pc, #184]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc48:	d106      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800cc4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc50:	d102      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc52:	4b2b      	ldr	r3, [pc, #172]	@ (800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cc54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc56:	e010      	b.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc58:	4b27      	ldr	r3, [pc, #156]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc64:	d106      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800cc66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc6c:	d102      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc6e:	4b25      	ldr	r3, [pc, #148]	@ (800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cc70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc72:	e002      	b.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc74:	2300      	movs	r3, #0
 800cc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cc78:	e123      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cc7a:	e122      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc80:	e11f      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cc82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc86:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cc8a:	430b      	orrs	r3, r1
 800cc8c:	d13c      	bne.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cc8e:	4b1a      	ldr	r3, [pc, #104]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc96:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d004      	beq.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cca4:	d012      	beq.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800cca6:	e023      	b.n	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cca8:	4b13      	ldr	r3, [pc, #76]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ccb4:	d107      	bne.n	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 fbcc 	bl	800d458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc4:	e0fd      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccca:	e0fa      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cccc:	4b0a      	ldr	r3, [pc, #40]	@ (800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ccd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ccd8:	d107      	bne.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccda:	f107 0318 	add.w	r3, r7, #24
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 f912 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cce4:	6a3b      	ldr	r3, [r7, #32]
 800cce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce8:	e0eb      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccee:	e0e8      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccf4:	e0e5      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ccf6:	bf00      	nop
 800ccf8:	58024400 	.word	0x58024400
 800ccfc:	03d09000 	.word	0x03d09000
 800cd00:	003d0900 	.word	0x003d0900
 800cd04:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cd08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd0c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800cd10:	430b      	orrs	r3, r1
 800cd12:	f040 8085 	bne.w	800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cd16:	4b6d      	ldr	r3, [pc, #436]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cd18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd1a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800cd1e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd26:	d06b      	beq.n	800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800cd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd2e:	d874      	bhi.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd36:	d056      	beq.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800cd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd3e:	d86c      	bhi.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cd46:	d03b      	beq.n	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800cd48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cd4e:	d864      	bhi.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd56:	d021      	beq.n	800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800cd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd5e:	d85c      	bhi.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d004      	beq.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800cd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd6c:	d004      	beq.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800cd6e:	e054      	b.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cd70:	f000 f8b4 	bl	800cedc <HAL_RCCEx_GetD3PCLK1Freq>
 800cd74:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd76:	e0a4      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd78:	4b54      	ldr	r3, [pc, #336]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd84:	d107      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd86:	f107 0318 	add.w	r3, r7, #24
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f000 f8bc 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd94:	e095      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd9a:	e092      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd9c:	4b4b      	ldr	r3, [pc, #300]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cda4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cda8:	d107      	bne.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdaa:	f107 030c 	add.w	r3, r7, #12
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 f9fe 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb8:	e083      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdbe:	e080      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cdc0:	4b42      	ldr	r3, [pc, #264]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0304 	and.w	r3, r3, #4
 800cdc8:	2b04      	cmp	r3, #4
 800cdca:	d109      	bne.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdcc:	4b3f      	ldr	r3, [pc, #252]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	08db      	lsrs	r3, r3, #3
 800cdd2:	f003 0303 	and.w	r3, r3, #3
 800cdd6:	4a3e      	ldr	r2, [pc, #248]	@ (800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800cdd8:	fa22 f303 	lsr.w	r3, r2, r3
 800cddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdde:	e070      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cde0:	2300      	movs	r3, #0
 800cde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cde4:	e06d      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cde6:	4b39      	ldr	r3, [pc, #228]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdf2:	d102      	bne.n	800cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800cdf4:	4b37      	ldr	r3, [pc, #220]	@ (800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cdf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdf8:	e063      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdfe:	e060      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce00:	4b32      	ldr	r3, [pc, #200]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce0c:	d102      	bne.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800ce0e:	4b32      	ldr	r3, [pc, #200]	@ (800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ce10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce12:	e056      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce18:	e053      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce1e:	e050      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ce20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce24:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ce28:	430b      	orrs	r3, r1
 800ce2a:	d148      	bne.n	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ce2c:	4b27      	ldr	r3, [pc, #156]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ce34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ce36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce3c:	d02a      	beq.n	800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce44:	d838      	bhi.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ce46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d004      	beq.n	800ce56 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce52:	d00d      	beq.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ce54:	e030      	b.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce56:	4b1d      	ldr	r3, [pc, #116]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce62:	d102      	bne.n	800ce6a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ce64:	4b1c      	ldr	r3, [pc, #112]	@ (800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ce66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce68:	e02b      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce6e:	e028      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce70:	4b16      	ldr	r3, [pc, #88]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce7c:	d107      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 fae8 	bl	800d458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce8c:	e019      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce92:	e016      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce94:	4b0d      	ldr	r3, [pc, #52]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cea0:	d107      	bne.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cea2:	f107 0318 	add.w	r3, r7, #24
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 f82e 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceb0:	e007      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceb6:	e004      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cebc:	e001      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800cebe:	2300      	movs	r3, #0
 800cec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800cec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3740      	adds	r7, #64	@ 0x40
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	58024400 	.word	0x58024400
 800ced0:	03d09000 	.word	0x03d09000
 800ced4:	003d0900 	.word	0x003d0900
 800ced8:	02dc6c00 	.word	0x02dc6c00

0800cedc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cee0:	f7fe f92e 	bl	800b140 <HAL_RCC_GetHCLKFreq>
 800cee4:	4602      	mov	r2, r0
 800cee6:	4b06      	ldr	r3, [pc, #24]	@ (800cf00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	091b      	lsrs	r3, r3, #4
 800ceec:	f003 0307 	and.w	r3, r3, #7
 800cef0:	4904      	ldr	r1, [pc, #16]	@ (800cf04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cef2:	5ccb      	ldrb	r3, [r1, r3]
 800cef4:	f003 031f 	and.w	r3, r3, #31
 800cef8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	58024400 	.word	0x58024400
 800cf04:	080181fc 	.word	0x080181fc

0800cf08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b089      	sub	sp, #36	@ 0x24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf10:	4ba1      	ldr	r3, [pc, #644]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf14:	f003 0303 	and.w	r3, r3, #3
 800cf18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cf1a:	4b9f      	ldr	r3, [pc, #636]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf1e:	0b1b      	lsrs	r3, r3, #12
 800cf20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cf26:	4b9c      	ldr	r3, [pc, #624]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2a:	091b      	lsrs	r3, r3, #4
 800cf2c:	f003 0301 	and.w	r3, r3, #1
 800cf30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cf32:	4b99      	ldr	r3, [pc, #612]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf36:	08db      	lsrs	r3, r3, #3
 800cf38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	fb02 f303 	mul.w	r3, r2, r3
 800cf42:	ee07 3a90 	vmov	s15, r3
 800cf46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f000 8111 	beq.w	800d178 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	f000 8083 	beq.w	800d064 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	f200 80a1 	bhi.w	800d0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d003      	beq.n	800cf74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d056      	beq.n	800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cf72:	e099      	b.n	800d0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf74:	4b88      	ldr	r3, [pc, #544]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 0320 	and.w	r3, r3, #32
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d02d      	beq.n	800cfdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf80:	4b85      	ldr	r3, [pc, #532]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	08db      	lsrs	r3, r3, #3
 800cf86:	f003 0303 	and.w	r3, r3, #3
 800cf8a:	4a84      	ldr	r2, [pc, #528]	@ (800d19c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cf8c:	fa22 f303 	lsr.w	r3, r2, r3
 800cf90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	ee07 3a90 	vmov	s15, r3
 800cf98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	ee07 3a90 	vmov	s15, r3
 800cfa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfaa:	4b7b      	ldr	r3, [pc, #492]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb2:	ee07 3a90 	vmov	s15, r3
 800cfb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfba:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfda:	e087      	b.n	800d0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	ee07 3a90 	vmov	s15, r3
 800cfe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cfea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfee:	4b6a      	ldr	r3, [pc, #424]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff6:	ee07 3a90 	vmov	s15, r3
 800cffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cffe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d002:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d00e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d01a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d01e:	e065      	b.n	800d0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	ee07 3a90 	vmov	s15, r3
 800d026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d02a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d032:	4b59      	ldr	r3, [pc, #356]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d03a:	ee07 3a90 	vmov	s15, r3
 800d03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d042:	ed97 6a03 	vldr	s12, [r7, #12]
 800d046:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d05e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d062:	e043      	b.n	800d0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	ee07 3a90 	vmov	s15, r3
 800d06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d06e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d076:	4b48      	ldr	r3, [pc, #288]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d07e:	ee07 3a90 	vmov	s15, r3
 800d082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d086:	ed97 6a03 	vldr	s12, [r7, #12]
 800d08a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0a6:	e021      	b.n	800d0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	ee07 3a90 	vmov	s15, r3
 800d0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ba:	4b37      	ldr	r3, [pc, #220]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c2:	ee07 3a90 	vmov	s15, r3
 800d0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d0ec:	4b2a      	ldr	r3, [pc, #168]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0f0:	0a5b      	lsrs	r3, r3, #9
 800d0f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0f6:	ee07 3a90 	vmov	s15, r3
 800d0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d102:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d106:	edd7 6a07 	vldr	s13, [r7, #28]
 800d10a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d10e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d112:	ee17 2a90 	vmov	r2, s15
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d11a:	4b1f      	ldr	r3, [pc, #124]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d11e:	0c1b      	lsrs	r3, r3, #16
 800d120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d124:	ee07 3a90 	vmov	s15, r3
 800d128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d12c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d130:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d134:	edd7 6a07 	vldr	s13, [r7, #28]
 800d138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d13c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d140:	ee17 2a90 	vmov	r2, s15
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d148:	4b13      	ldr	r3, [pc, #76]	@ (800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d14c:	0e1b      	lsrs	r3, r3, #24
 800d14e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d152:	ee07 3a90 	vmov	s15, r3
 800d156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d15e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d162:	edd7 6a07 	vldr	s13, [r7, #28]
 800d166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d16a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d16e:	ee17 2a90 	vmov	r2, s15
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d176:	e008      	b.n	800d18a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	609a      	str	r2, [r3, #8]
}
 800d18a:	bf00      	nop
 800d18c:	3724      	adds	r7, #36	@ 0x24
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	58024400 	.word	0x58024400
 800d19c:	03d09000 	.word	0x03d09000
 800d1a0:	46000000 	.word	0x46000000
 800d1a4:	4c742400 	.word	0x4c742400
 800d1a8:	4a742400 	.word	0x4a742400
 800d1ac:	4c371b00 	.word	0x4c371b00

0800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b089      	sub	sp, #36	@ 0x24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1b8:	4ba1      	ldr	r3, [pc, #644]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1bc:	f003 0303 	and.w	r3, r3, #3
 800d1c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d1c2:	4b9f      	ldr	r3, [pc, #636]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1c6:	0d1b      	lsrs	r3, r3, #20
 800d1c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d1cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d1ce:	4b9c      	ldr	r3, [pc, #624]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d2:	0a1b      	lsrs	r3, r3, #8
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d1da:	4b99      	ldr	r3, [pc, #612]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1de:	08db      	lsrs	r3, r3, #3
 800d1e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	fb02 f303 	mul.w	r3, r2, r3
 800d1ea:	ee07 3a90 	vmov	s15, r3
 800d1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	f000 8111 	beq.w	800d420 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	2b02      	cmp	r3, #2
 800d202:	f000 8083 	beq.w	800d30c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	2b02      	cmp	r3, #2
 800d20a:	f200 80a1 	bhi.w	800d350 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d003      	beq.n	800d21c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d056      	beq.n	800d2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d21a:	e099      	b.n	800d350 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d21c:	4b88      	ldr	r3, [pc, #544]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 0320 	and.w	r3, r3, #32
 800d224:	2b00      	cmp	r3, #0
 800d226:	d02d      	beq.n	800d284 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d228:	4b85      	ldr	r3, [pc, #532]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	08db      	lsrs	r3, r3, #3
 800d22e:	f003 0303 	and.w	r3, r3, #3
 800d232:	4a84      	ldr	r2, [pc, #528]	@ (800d444 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d234:	fa22 f303 	lsr.w	r3, r2, r3
 800d238:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	ee07 3a90 	vmov	s15, r3
 800d240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	ee07 3a90 	vmov	s15, r3
 800d24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d252:	4b7b      	ldr	r3, [pc, #492]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d25a:	ee07 3a90 	vmov	s15, r3
 800d25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d262:	ed97 6a03 	vldr	s12, [r7, #12]
 800d266:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d27e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d282:	e087      	b.n	800d394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	ee07 3a90 	vmov	s15, r3
 800d28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d28e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d44c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d296:	4b6a      	ldr	r3, [pc, #424]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d29e:	ee07 3a90 	vmov	s15, r3
 800d2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2c6:	e065      	b.n	800d394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	ee07 3a90 	vmov	s15, r3
 800d2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2da:	4b59      	ldr	r3, [pc, #356]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2e2:	ee07 3a90 	vmov	s15, r3
 800d2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d30a:	e043      	b.n	800d394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	ee07 3a90 	vmov	s15, r3
 800d312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d316:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d31e:	4b48      	ldr	r3, [pc, #288]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d326:	ee07 3a90 	vmov	s15, r3
 800d32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d332:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d33e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d34a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d34e:	e021      	b.n	800d394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	ee07 3a90 	vmov	s15, r3
 800d356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d35a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d362:	4b37      	ldr	r3, [pc, #220]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d36a:	ee07 3a90 	vmov	s15, r3
 800d36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d372:	ed97 6a03 	vldr	s12, [r7, #12]
 800d376:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d38e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d392:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d394:	4b2a      	ldr	r3, [pc, #168]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d398:	0a5b      	lsrs	r3, r3, #9
 800d39a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d39e:	ee07 3a90 	vmov	s15, r3
 800d3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d3aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3ba:	ee17 2a90 	vmov	r2, s15
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d3c2:	4b1f      	ldr	r3, [pc, #124]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3c6:	0c1b      	lsrs	r3, r3, #16
 800d3c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3cc:	ee07 3a90 	vmov	s15, r3
 800d3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d3d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3e8:	ee17 2a90 	vmov	r2, s15
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d3f0:	4b13      	ldr	r3, [pc, #76]	@ (800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f4:	0e1b      	lsrs	r3, r3, #24
 800d3f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3fa:	ee07 3a90 	vmov	s15, r3
 800d3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d40a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d40e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d416:	ee17 2a90 	vmov	r2, s15
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d41e:	e008      	b.n	800d432 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	609a      	str	r2, [r3, #8]
}
 800d432:	bf00      	nop
 800d434:	3724      	adds	r7, #36	@ 0x24
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	58024400 	.word	0x58024400
 800d444:	03d09000 	.word	0x03d09000
 800d448:	46000000 	.word	0x46000000
 800d44c:	4c742400 	.word	0x4c742400
 800d450:	4a742400 	.word	0x4a742400
 800d454:	4c371b00 	.word	0x4c371b00

0800d458 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d458:	b480      	push	{r7}
 800d45a:	b089      	sub	sp, #36	@ 0x24
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d460:	4ba0      	ldr	r3, [pc, #640]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d464:	f003 0303 	and.w	r3, r3, #3
 800d468:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d46a:	4b9e      	ldr	r3, [pc, #632]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d46e:	091b      	lsrs	r3, r3, #4
 800d470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d474:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d476:	4b9b      	ldr	r3, [pc, #620]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d47a:	f003 0301 	and.w	r3, r3, #1
 800d47e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d480:	4b98      	ldr	r3, [pc, #608]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d484:	08db      	lsrs	r3, r3, #3
 800d486:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d48a:	693a      	ldr	r2, [r7, #16]
 800d48c:	fb02 f303 	mul.w	r3, r2, r3
 800d490:	ee07 3a90 	vmov	s15, r3
 800d494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d498:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f000 8111 	beq.w	800d6c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	f000 8083 	beq.w	800d5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	f200 80a1 	bhi.w	800d5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d056      	beq.n	800d56e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d4c0:	e099      	b.n	800d5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4c2:	4b88      	ldr	r3, [pc, #544]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f003 0320 	and.w	r3, r3, #32
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d02d      	beq.n	800d52a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4ce:	4b85      	ldr	r3, [pc, #532]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	08db      	lsrs	r3, r3, #3
 800d4d4:	f003 0303 	and.w	r3, r3, #3
 800d4d8:	4a83      	ldr	r2, [pc, #524]	@ (800d6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d4da:	fa22 f303 	lsr.w	r3, r2, r3
 800d4de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	ee07 3a90 	vmov	s15, r3
 800d4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	ee07 3a90 	vmov	s15, r3
 800d4f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4f8:	4b7a      	ldr	r3, [pc, #488]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d500:	ee07 3a90 	vmov	s15, r3
 800d504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d508:	ed97 6a03 	vldr	s12, [r7, #12]
 800d50c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d518:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d51c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d520:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d524:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d528:	e087      	b.n	800d63a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	ee07 3a90 	vmov	s15, r3
 800d530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d534:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d53c:	4b69      	ldr	r3, [pc, #420]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d544:	ee07 3a90 	vmov	s15, r3
 800d548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d54c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d550:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d55c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d564:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d56c:	e065      	b.n	800d63a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	ee07 3a90 	vmov	s15, r3
 800d574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d578:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d57c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d580:	4b58      	ldr	r3, [pc, #352]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d588:	ee07 3a90 	vmov	s15, r3
 800d58c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d590:	ed97 6a03 	vldr	s12, [r7, #12]
 800d594:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d59c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5b0:	e043      	b.n	800d63a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	ee07 3a90 	vmov	s15, r3
 800d5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5bc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d5c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5c4:	4b47      	ldr	r3, [pc, #284]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5cc:	ee07 3a90 	vmov	s15, r3
 800d5d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5d8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5f4:	e021      	b.n	800d63a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	ee07 3a90 	vmov	s15, r3
 800d5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d600:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d608:	4b36      	ldr	r3, [pc, #216]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d60a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d610:	ee07 3a90 	vmov	s15, r3
 800d614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d618:	ed97 6a03 	vldr	s12, [r7, #12]
 800d61c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d62c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d630:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d634:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d638:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d63a:	4b2a      	ldr	r3, [pc, #168]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d63e:	0a5b      	lsrs	r3, r3, #9
 800d640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d644:	ee07 3a90 	vmov	s15, r3
 800d648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d64c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d650:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d654:	edd7 6a07 	vldr	s13, [r7, #28]
 800d658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d65c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d660:	ee17 2a90 	vmov	r2, s15
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d668:	4b1e      	ldr	r3, [pc, #120]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d66a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d66c:	0c1b      	lsrs	r3, r3, #16
 800d66e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d672:	ee07 3a90 	vmov	s15, r3
 800d676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d67a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d67e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d682:	edd7 6a07 	vldr	s13, [r7, #28]
 800d686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d68e:	ee17 2a90 	vmov	r2, s15
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d696:	4b13      	ldr	r3, [pc, #76]	@ (800d6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d69a:	0e1b      	lsrs	r3, r3, #24
 800d69c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6a0:	ee07 3a90 	vmov	s15, r3
 800d6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d6ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6bc:	ee17 2a90 	vmov	r2, s15
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d6c4:	e008      	b.n	800d6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	609a      	str	r2, [r3, #8]
}
 800d6d8:	bf00      	nop
 800d6da:	3724      	adds	r7, #36	@ 0x24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr
 800d6e4:	58024400 	.word	0x58024400
 800d6e8:	03d09000 	.word	0x03d09000
 800d6ec:	46000000 	.word	0x46000000
 800d6f0:	4c742400 	.word	0x4c742400
 800d6f4:	4a742400 	.word	0x4a742400
 800d6f8:	4c371b00 	.word	0x4c371b00

0800d6fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d70a:	4b53      	ldr	r3, [pc, #332]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d70e:	f003 0303 	and.w	r3, r3, #3
 800d712:	2b03      	cmp	r3, #3
 800d714:	d101      	bne.n	800d71a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e099      	b.n	800d84e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d71a:	4b4f      	ldr	r3, [pc, #316]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a4e      	ldr	r2, [pc, #312]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d720:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d726:	f7fb fc79 	bl	800901c <HAL_GetTick>
 800d72a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d72c:	e008      	b.n	800d740 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d72e:	f7fb fc75 	bl	800901c <HAL_GetTick>
 800d732:	4602      	mov	r2, r0
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d901      	bls.n	800d740 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d73c:	2303      	movs	r3, #3
 800d73e:	e086      	b.n	800d84e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d740:	4b45      	ldr	r3, [pc, #276]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1f0      	bne.n	800d72e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d74c:	4b42      	ldr	r3, [pc, #264]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d74e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d750:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	031b      	lsls	r3, r3, #12
 800d75a:	493f      	ldr	r1, [pc, #252]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d75c:	4313      	orrs	r3, r2
 800d75e:	628b      	str	r3, [r1, #40]	@ 0x28
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	3b01      	subs	r3, #1
 800d766:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	3b01      	subs	r3, #1
 800d770:	025b      	lsls	r3, r3, #9
 800d772:	b29b      	uxth	r3, r3
 800d774:	431a      	orrs	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	3b01      	subs	r3, #1
 800d77c:	041b      	lsls	r3, r3, #16
 800d77e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d782:	431a      	orrs	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	691b      	ldr	r3, [r3, #16]
 800d788:	3b01      	subs	r3, #1
 800d78a:	061b      	lsls	r3, r3, #24
 800d78c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d790:	4931      	ldr	r1, [pc, #196]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d792:	4313      	orrs	r3, r2
 800d794:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d796:	4b30      	ldr	r3, [pc, #192]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d79a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	695b      	ldr	r3, [r3, #20]
 800d7a2:	492d      	ldr	r1, [pc, #180]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d7a8:	4b2b      	ldr	r3, [pc, #172]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ac:	f023 0220 	bic.w	r2, r3, #32
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	699b      	ldr	r3, [r3, #24]
 800d7b4:	4928      	ldr	r1, [pc, #160]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d7ba:	4b27      	ldr	r3, [pc, #156]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7be:	4a26      	ldr	r2, [pc, #152]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7c0:	f023 0310 	bic.w	r3, r3, #16
 800d7c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d7c6:	4b24      	ldr	r3, [pc, #144]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d7ca:	4b24      	ldr	r3, [pc, #144]	@ (800d85c <RCCEx_PLL2_Config+0x160>)
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	69d2      	ldr	r2, [r2, #28]
 800d7d2:	00d2      	lsls	r2, r2, #3
 800d7d4:	4920      	ldr	r1, [pc, #128]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d7da:	4b1f      	ldr	r3, [pc, #124]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7de:	4a1e      	ldr	r2, [pc, #120]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7e0:	f043 0310 	orr.w	r3, r3, #16
 800d7e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d106      	bne.n	800d7fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d7ec:	4b1a      	ldr	r3, [pc, #104]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f0:	4a19      	ldr	r2, [pc, #100]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d7f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d7f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d7f8:	e00f      	b.n	800d81a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d106      	bne.n	800d80e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d800:	4b15      	ldr	r3, [pc, #84]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d804:	4a14      	ldr	r2, [pc, #80]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d80a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d80c:	e005      	b.n	800d81a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d80e:	4b12      	ldr	r3, [pc, #72]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d812:	4a11      	ldr	r2, [pc, #68]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d814:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d818:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d81a:	4b0f      	ldr	r3, [pc, #60]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4a0e      	ldr	r2, [pc, #56]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d820:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d826:	f7fb fbf9 	bl	800901c <HAL_GetTick>
 800d82a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d82c:	e008      	b.n	800d840 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d82e:	f7fb fbf5 	bl	800901c <HAL_GetTick>
 800d832:	4602      	mov	r2, r0
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	2b02      	cmp	r3, #2
 800d83a:	d901      	bls.n	800d840 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d83c:	2303      	movs	r3, #3
 800d83e:	e006      	b.n	800d84e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d840:	4b05      	ldr	r3, [pc, #20]	@ (800d858 <RCCEx_PLL2_Config+0x15c>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d0f0      	beq.n	800d82e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	58024400 	.word	0x58024400
 800d85c:	ffff0007 	.word	0xffff0007

0800d860 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d86e:	4b53      	ldr	r3, [pc, #332]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d872:	f003 0303 	and.w	r3, r3, #3
 800d876:	2b03      	cmp	r3, #3
 800d878:	d101      	bne.n	800d87e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d87a:	2301      	movs	r3, #1
 800d87c:	e099      	b.n	800d9b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d87e:	4b4f      	ldr	r3, [pc, #316]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a4e      	ldr	r2, [pc, #312]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d88a:	f7fb fbc7 	bl	800901c <HAL_GetTick>
 800d88e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d890:	e008      	b.n	800d8a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d892:	f7fb fbc3 	bl	800901c <HAL_GetTick>
 800d896:	4602      	mov	r2, r0
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	1ad3      	subs	r3, r2, r3
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d901      	bls.n	800d8a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	e086      	b.n	800d9b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8a4:	4b45      	ldr	r3, [pc, #276]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1f0      	bne.n	800d892 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d8b0:	4b42      	ldr	r3, [pc, #264]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	051b      	lsls	r3, r3, #20
 800d8be:	493f      	ldr	r1, [pc, #252]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	628b      	str	r3, [r1, #40]	@ 0x28
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	025b      	lsls	r3, r3, #9
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	431a      	orrs	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	041b      	lsls	r3, r3, #16
 800d8e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d8e6:	431a      	orrs	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	061b      	lsls	r3, r3, #24
 800d8f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d8f4:	4931      	ldr	r1, [pc, #196]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d8fa:	4b30      	ldr	r3, [pc, #192]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	492d      	ldr	r1, [pc, #180]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d908:	4313      	orrs	r3, r2
 800d90a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d90c:	4b2b      	ldr	r3, [pc, #172]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d910:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	699b      	ldr	r3, [r3, #24]
 800d918:	4928      	ldr	r1, [pc, #160]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d91a:	4313      	orrs	r3, r2
 800d91c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d91e:	4b27      	ldr	r3, [pc, #156]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d922:	4a26      	ldr	r2, [pc, #152]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d928:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d92a:	4b24      	ldr	r3, [pc, #144]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d92c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d92e:	4b24      	ldr	r3, [pc, #144]	@ (800d9c0 <RCCEx_PLL3_Config+0x160>)
 800d930:	4013      	ands	r3, r2
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	69d2      	ldr	r2, [r2, #28]
 800d936:	00d2      	lsls	r2, r2, #3
 800d938:	4920      	ldr	r1, [pc, #128]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d93a:	4313      	orrs	r3, r2
 800d93c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d93e:	4b1f      	ldr	r3, [pc, #124]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d942:	4a1e      	ldr	r2, [pc, #120]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d948:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d106      	bne.n	800d95e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d950:	4b1a      	ldr	r3, [pc, #104]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d954:	4a19      	ldr	r2, [pc, #100]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d956:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d95a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d95c:	e00f      	b.n	800d97e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d106      	bne.n	800d972 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d964:	4b15      	ldr	r3, [pc, #84]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d968:	4a14      	ldr	r2, [pc, #80]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d96a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d96e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d970:	e005      	b.n	800d97e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d972:	4b12      	ldr	r3, [pc, #72]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d976:	4a11      	ldr	r2, [pc, #68]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d978:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d97c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d97e:	4b0f      	ldr	r3, [pc, #60]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a0e      	ldr	r2, [pc, #56]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d98a:	f7fb fb47 	bl	800901c <HAL_GetTick>
 800d98e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d990:	e008      	b.n	800d9a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d992:	f7fb fb43 	bl	800901c <HAL_GetTick>
 800d996:	4602      	mov	r2, r0
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d901      	bls.n	800d9a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d9a0:	2303      	movs	r3, #3
 800d9a2:	e006      	b.n	800d9b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9a4:	4b05      	ldr	r3, [pc, #20]	@ (800d9bc <RCCEx_PLL3_Config+0x15c>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d0f0      	beq.n	800d992 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	58024400 	.word	0x58024400
 800d9c0:	ffff0007 	.word	0xffff0007

0800d9c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08a      	sub	sp, #40	@ 0x28
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e075      	b.n	800dac2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d105      	bne.n	800d9ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7fa fd89 	bl	8008500 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2204      	movs	r2, #4
 800d9f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 f868 	bl	800dacc <HAL_SD_InitCard>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	e05d      	b.n	800dac2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800da06:	f107 0308 	add.w	r3, r7, #8
 800da0a:	4619      	mov	r1, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fdb5 	bl	800e57c <HAL_SD_GetCardStatus>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d001      	beq.n	800da1c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800da18:	2301      	movs	r3, #1
 800da1a:	e052      	b.n	800dac2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800da1c:	7e3b      	ldrb	r3, [r7, #24]
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800da22:	7e7b      	ldrb	r3, [r7, #25]
 800da24:	b2db      	uxtb	r3, r3
 800da26:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d10a      	bne.n	800da46 <HAL_SD_Init+0x82>
 800da30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da32:	2b00      	cmp	r3, #0
 800da34:	d102      	bne.n	800da3c <HAL_SD_Init+0x78>
 800da36:	6a3b      	ldr	r3, [r7, #32]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d004      	beq.n	800da46 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da42:	659a      	str	r2, [r3, #88]	@ 0x58
 800da44:	e00b      	b.n	800da5e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d104      	bne.n	800da58 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800da54:	659a      	str	r2, [r3, #88]	@ 0x58
 800da56:	e002      	b.n	800da5e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2200      	movs	r2, #0
 800da5c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	4619      	mov	r1, r3
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 fe73 	bl	800e750 <HAL_SD_ConfigWideBusOperation>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	e026      	b.n	800dac2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800da74:	f7fb fad2 	bl	800901c <HAL_GetTick>
 800da78:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800da7a:	e011      	b.n	800daa0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da7c:	f7fb face 	bl	800901c <HAL_GetTick>
 800da80:	4602      	mov	r2, r0
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da8a:	d109      	bne.n	800daa0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800da92:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800da9c:	2303      	movs	r3, #3
 800da9e:	e010      	b.n	800dac2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 ff67 	bl	800e974 <HAL_SD_GetCardState>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b04      	cmp	r3, #4
 800daaa:	d1e7      	bne.n	800da7c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2200      	movs	r2, #0
 800dab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3728      	adds	r7, #40	@ 0x28
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
	...

0800dacc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dacc:	b590      	push	{r4, r7, lr}
 800dace:	b08d      	sub	sp, #52	@ 0x34
 800dad0:	af02      	add	r7, sp, #8
 800dad2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800dad4:	2300      	movs	r3, #0
 800dad6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800dad8:	2300      	movs	r3, #0
 800dada:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800dadc:	2300      	movs	r3, #0
 800dade:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800dae0:	2300      	movs	r3, #0
 800dae2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dae4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800dae8:	f04f 0100 	mov.w	r1, #0
 800daec:	f7fe fd24 	bl	800c538 <HAL_RCCEx_GetPeriphCLKFreq>
 800daf0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800daf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d109      	bne.n	800db0c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800db06:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800db08:	2301      	movs	r3, #1
 800db0a:	e070      	b.n	800dbee <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800db0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0e:	0a1b      	lsrs	r3, r3, #8
 800db10:	4a39      	ldr	r2, [pc, #228]	@ (800dbf8 <HAL_SD_InitCard+0x12c>)
 800db12:	fba2 2303 	umull	r2, r3, r2, r3
 800db16:	091b      	lsrs	r3, r3, #4
 800db18:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681c      	ldr	r4, [r3, #0]
 800db1e:	466a      	mov	r2, sp
 800db20:	f107 0318 	add.w	r3, r7, #24
 800db24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800db28:	e882 0003 	stmia.w	r2, {r0, r1}
 800db2c:	f107 030c 	add.w	r3, r7, #12
 800db30:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db32:	4620      	mov	r0, r4
 800db34:	f004 fe76 	bl	8012824 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f004 feb9 	bl	80128b4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d005      	beq.n	800db54 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	005b      	lsls	r3, r3, #1
 800db4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db52:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800db54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db56:	2b00      	cmp	r3, #0
 800db58:	d007      	beq.n	800db6a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800db5a:	4a28      	ldr	r2, [pc, #160]	@ (800dbfc <HAL_SD_InitCard+0x130>)
 800db5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db62:	3301      	adds	r3, #1
 800db64:	4618      	mov	r0, r3
 800db66:	f7fb fa65 	bl	8009034 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fff0 	bl	800eb50 <SD_PowerON>
 800db70:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00b      	beq.n	800db90 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db84:	6a3b      	ldr	r3, [r7, #32]
 800db86:	431a      	orrs	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800db8c:	2301      	movs	r3, #1
 800db8e:	e02e      	b.n	800dbee <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 ff0f 	bl	800e9b4 <SD_InitCard>
 800db96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db98:	6a3b      	ldr	r3, [r7, #32]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00b      	beq.n	800dbb6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2201      	movs	r2, #1
 800dba2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	431a      	orrs	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e01b      	b.n	800dbee <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f004 ff0e 	bl	80129e0 <SDMMC_CmdBlockLength>
 800dbc4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbc6:	6a3b      	ldr	r3, [r7, #32]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00f      	beq.n	800dbec <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a0b      	ldr	r2, [pc, #44]	@ (800dc00 <HAL_SD_InitCard+0x134>)
 800dbd2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbd8:	6a3b      	ldr	r3, [r7, #32]
 800dbda:	431a      	orrs	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e000      	b.n	800dbee <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	372c      	adds	r7, #44	@ 0x2c
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd90      	pop	{r4, r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	014f8b59 	.word	0x014f8b59
 800dbfc:	00012110 	.word	0x00012110
 800dc00:	1fe00fff 	.word	0x1fe00fff

0800dc04 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b092      	sub	sp, #72	@ 0x48
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc12:	f7fb fa03 	bl	800901c <HAL_GetTick>
 800dc16:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d107      	bne.n	800dc36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc2a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e167      	b.n	800df06 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	f040 815a 	bne.w	800def8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dc4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	441a      	add	r2, r3
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d907      	bls.n	800dc68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc5c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800dc64:	2301      	movs	r3, #1
 800dc66:	e14e      	b.n	800df06 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2203      	movs	r2, #3
 800dc6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2200      	movs	r2, #0
 800dc76:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d002      	beq.n	800dc86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800dc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc82:	025b      	lsls	r3, r3, #9
 800dc84:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc86:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	025b      	lsls	r3, r3, #9
 800dc90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800dc92:	2390      	movs	r3, #144	@ 0x90
 800dc94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dc96:	2302      	movs	r3, #2
 800dc98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f107 0214 	add.w	r2, r7, #20
 800dcaa:	4611      	mov	r1, r2
 800dcac:	4618      	mov	r0, r3
 800dcae:	f004 fe6b 	bl	8012988 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68da      	ldr	r2, [r3, #12]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dcc0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d90a      	bls.n	800dcde <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2202      	movs	r2, #2
 800dccc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f004 fec9 	bl	8012a6c <SDMMC_CmdReadMultiBlock>
 800dcda:	6478      	str	r0, [r7, #68]	@ 0x44
 800dcdc:	e009      	b.n	800dcf2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2201      	movs	r2, #1
 800dce2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dcea:	4618      	mov	r0, r3
 800dcec:	f004 fe9b 	bl	8012a26 <SDMMC_CmdReadSingleBlock>
 800dcf0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800dcf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d012      	beq.n	800dd1e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a84      	ldr	r2, [pc, #528]	@ (800df10 <HAL_SD_ReadBlocks+0x30c>)
 800dcfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd06:	431a      	orrs	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2200      	movs	r2, #0
 800dd18:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	e0f3      	b.n	800df06 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800dd22:	e058      	b.n	800ddd6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d033      	beq.n	800dd9a <HAL_SD_ReadBlocks+0x196>
 800dd32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd34:	2b1f      	cmp	r3, #31
 800dd36:	d930      	bls.n	800dd9a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800dd38:	2300      	movs	r3, #0
 800dd3a:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd3c:	e027      	b.n	800dd8e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f004 fd98 	bl	8012878 <SDMMC_ReadFIFO>
 800dd48:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800dd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800dd52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd54:	3301      	adds	r3, #1
 800dd56:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800dd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd5a:	0a1b      	lsrs	r3, r3, #8
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800dd62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd64:	3301      	adds	r3, #1
 800dd66:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800dd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd6a:	0c1b      	lsrs	r3, r3, #16
 800dd6c:	b2da      	uxtb	r2, r3
 800dd6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800dd72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd74:	3301      	adds	r3, #1
 800dd76:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800dd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7a:	0e1b      	lsrs	r3, r3, #24
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd80:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800dd82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd84:	3301      	adds	r3, #1
 800dd86:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800dd88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd90:	2b07      	cmp	r3, #7
 800dd92:	d9d4      	bls.n	800dd3e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800dd94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd96:	3b20      	subs	r3, #32
 800dd98:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800dd9a:	f7fb f93f 	bl	800901c <HAL_GetTick>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d902      	bls.n	800ddb0 <HAL_SD_ReadBlocks+0x1ac>
 800ddaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d112      	bne.n	800ddd6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a56      	ldr	r2, [pc, #344]	@ (800df10 <HAL_SD_ReadBlocks+0x30c>)
 800ddb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddbc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800ddd2:	2303      	movs	r3, #3
 800ddd4:	e097      	b.n	800df06 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dddc:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d09f      	beq.n	800dd24 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68da      	ldr	r2, [r3, #12]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ddf2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d022      	beq.n	800de48 <HAL_SD_ReadBlocks+0x244>
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	2b01      	cmp	r3, #1
 800de06:	d91f      	bls.n	800de48 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de0c:	2b03      	cmp	r3, #3
 800de0e:	d01b      	beq.n	800de48 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4618      	mov	r0, r3
 800de16:	f004 fe93 	bl	8012b40 <SDMMC_CmdStopTransfer>
 800de1a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800de1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d012      	beq.n	800de48 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a3a      	ldr	r2, [pc, #232]	@ (800df10 <HAL_SD_ReadBlocks+0x30c>)
 800de28:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de30:	431a      	orrs	r2, r3
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2201      	movs	r2, #1
 800de3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800de44:	2301      	movs	r3, #1
 800de46:	e05e      	b.n	800df06 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de4e:	f003 0308 	and.w	r3, r3, #8
 800de52:	2b00      	cmp	r3, #0
 800de54:	d012      	beq.n	800de7c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4a2d      	ldr	r2, [pc, #180]	@ (800df10 <HAL_SD_ReadBlocks+0x30c>)
 800de5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de62:	f043 0208 	orr.w	r2, r3, #8
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2201      	movs	r2, #1
 800de6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800de78:	2301      	movs	r3, #1
 800de7a:	e044      	b.n	800df06 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de82:	f003 0302 	and.w	r3, r3, #2
 800de86:	2b00      	cmp	r3, #0
 800de88:	d012      	beq.n	800deb0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4a20      	ldr	r2, [pc, #128]	@ (800df10 <HAL_SD_ReadBlocks+0x30c>)
 800de90:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de96:	f043 0202 	orr.w	r2, r3, #2
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800deac:	2301      	movs	r3, #1
 800deae:	e02a      	b.n	800df06 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deb6:	f003 0320 	and.w	r3, r3, #32
 800deba:	2b00      	cmp	r3, #0
 800debc:	d012      	beq.n	800dee4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4a13      	ldr	r2, [pc, #76]	@ (800df10 <HAL_SD_ReadBlocks+0x30c>)
 800dec4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deca:	f043 0220 	orr.w	r2, r3, #32
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2201      	movs	r2, #1
 800ded6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e010      	b.n	800df06 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a0a      	ldr	r2, [pc, #40]	@ (800df14 <HAL_SD_ReadBlocks+0x310>)
 800deea:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2201      	movs	r2, #1
 800def0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	e006      	b.n	800df06 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800defc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800df04:	2301      	movs	r3, #1
  }
}
 800df06:	4618      	mov	r0, r3
 800df08:	3748      	adds	r7, #72	@ 0x48
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	1fe00fff 	.word	0x1fe00fff
 800df14:	18000f3a 	.word	0x18000f3a

0800df18 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b092      	sub	sp, #72	@ 0x48
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
 800df24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800df26:	f7fb f879 	bl	800901c <HAL_GetTick>
 800df2a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d107      	bne.n	800df4a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df3e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800df46:	2301      	movs	r3, #1
 800df48:	e16b      	b.n	800e222 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b01      	cmp	r3, #1
 800df54:	f040 815e 	bne.w	800e214 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2200      	movs	r2, #0
 800df5c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800df5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	441a      	add	r2, r3
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df68:	429a      	cmp	r2, r3
 800df6a:	d907      	bls.n	800df7c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df70:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800df78:	2301      	movs	r3, #1
 800df7a:	e152      	b.n	800e222 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2203      	movs	r2, #3
 800df80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	2200      	movs	r2, #0
 800df8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df90:	2b01      	cmp	r3, #1
 800df92:	d002      	beq.n	800df9a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800df94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df96:	025b      	lsls	r3, r3, #9
 800df98:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800df9a:	f04f 33ff 	mov.w	r3, #4294967295
 800df9e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	025b      	lsls	r3, r3, #9
 800dfa4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800dfa6:	2390      	movs	r3, #144	@ 0x90
 800dfa8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f107 0218 	add.w	r2, r7, #24
 800dfbe:	4611      	mov	r1, r2
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f004 fce1 	bl	8012988 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	68da      	ldr	r2, [r3, #12]
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dfd4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d90a      	bls.n	800dff2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2220      	movs	r2, #32
 800dfe0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f004 fd85 	bl	8012af8 <SDMMC_CmdWriteMultiBlock>
 800dfee:	6478      	str	r0, [r7, #68]	@ 0x44
 800dff0:	e009      	b.n	800e006 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2210      	movs	r2, #16
 800dff6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dffe:	4618      	mov	r0, r3
 800e000:	f004 fd57 	bl	8012ab2 <SDMMC_CmdWriteSingleBlock>
 800e004:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d012      	beq.n	800e032 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a86      	ldr	r2, [pc, #536]	@ (800e22c <HAL_SD_WriteBlocks+0x314>)
 800e012:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e01a:	431a      	orrs	r2, r3
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e02e:	2301      	movs	r3, #1
 800e030:	e0f7      	b.n	800e222 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800e036:	e05c      	b.n	800e0f2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e03e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e042:	2b00      	cmp	r3, #0
 800e044:	d037      	beq.n	800e0b6 <HAL_SD_WriteBlocks+0x19e>
 800e046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e048:	2b1f      	cmp	r3, #31
 800e04a:	d934      	bls.n	800e0b6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800e04c:	2300      	movs	r3, #0
 800e04e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e050:	e02b      	b.n	800e0aa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800e052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e05a:	3301      	adds	r3, #1
 800e05c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800e05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	021a      	lsls	r2, r3, #8
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	4313      	orrs	r3, r2
 800e068:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e06c:	3301      	adds	r3, #1
 800e06e:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800e070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	041a      	lsls	r2, r3, #16
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	4313      	orrs	r3, r2
 800e07a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e07e:	3301      	adds	r3, #1
 800e080:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	061a      	lsls	r2, r3, #24
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e090:	3301      	adds	r3, #1
 800e092:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f107 0214 	add.w	r2, r7, #20
 800e09c:	4611      	mov	r1, r2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f004 fbf7 	bl	8012892 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800e0a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0ac:	2b07      	cmp	r3, #7
 800e0ae:	d9d0      	bls.n	800e052 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800e0b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0b2:	3b20      	subs	r3, #32
 800e0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e0b6:	f7fa ffb1 	bl	800901c <HAL_GetTick>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d902      	bls.n	800e0cc <HAL_SD_WriteBlocks+0x1b4>
 800e0c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d112      	bne.n	800e0f2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a56      	ldr	r2, [pc, #344]	@ (800e22c <HAL_SD_WriteBlocks+0x314>)
 800e0d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0da:	431a      	orrs	r2, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800e0ee:	2303      	movs	r3, #3
 800e0f0:	e097      	b.n	800e222 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0f8:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d09b      	beq.n	800e038 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68da      	ldr	r2, [r3, #12]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e10e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d022      	beq.n	800e164 <HAL_SD_WriteBlocks+0x24c>
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	2b01      	cmp	r3, #1
 800e122:	d91f      	bls.n	800e164 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d01b      	beq.n	800e164 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4618      	mov	r0, r3
 800e132:	f004 fd05 	bl	8012b40 <SDMMC_CmdStopTransfer>
 800e136:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800e138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d012      	beq.n	800e164 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4a3a      	ldr	r2, [pc, #232]	@ (800e22c <HAL_SD_WriteBlocks+0x314>)
 800e144:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e14a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e14c:	431a      	orrs	r2, r3
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2201      	movs	r2, #1
 800e156:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800e160:	2301      	movs	r3, #1
 800e162:	e05e      	b.n	800e222 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e16a:	f003 0308 	and.w	r3, r3, #8
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d012      	beq.n	800e198 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a2d      	ldr	r2, [pc, #180]	@ (800e22c <HAL_SD_WriteBlocks+0x314>)
 800e178:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e17e:	f043 0208 	orr.w	r2, r3, #8
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2201      	movs	r2, #1
 800e18a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2200      	movs	r2, #0
 800e192:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e194:	2301      	movs	r3, #1
 800e196:	e044      	b.n	800e222 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e19e:	f003 0302 	and.w	r3, r3, #2
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d012      	beq.n	800e1cc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a20      	ldr	r2, [pc, #128]	@ (800e22c <HAL_SD_WriteBlocks+0x314>)
 800e1ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1b2:	f043 0202 	orr.w	r2, r3, #2
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	e02a      	b.n	800e222 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1d2:	f003 0310 	and.w	r3, r3, #16
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d012      	beq.n	800e200 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	4a13      	ldr	r2, [pc, #76]	@ (800e22c <HAL_SD_WriteBlocks+0x314>)
 800e1e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1e6:	f043 0210 	orr.w	r2, r3, #16
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e010      	b.n	800e222 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a0a      	ldr	r2, [pc, #40]	@ (800e230 <HAL_SD_WriteBlocks+0x318>)
 800e206:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800e210:	2300      	movs	r3, #0
 800e212:	e006      	b.n	800e222 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e218:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
  }
}
 800e222:	4618      	mov	r0, r3
 800e224:	3748      	adds	r7, #72	@ 0x48
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	1fe00fff 	.word	0x1fe00fff
 800e230:	18000f3a 	.word	0x18000f3a

0800e234 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e242:	0f9b      	lsrs	r3, r3, #30
 800e244:	b2da      	uxtb	r2, r3
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e24e:	0e9b      	lsrs	r3, r3, #26
 800e250:	b2db      	uxtb	r3, r3
 800e252:	f003 030f 	and.w	r3, r3, #15
 800e256:	b2da      	uxtb	r2, r3
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e260:	0e1b      	lsrs	r3, r3, #24
 800e262:	b2db      	uxtb	r3, r3
 800e264:	f003 0303 	and.w	r3, r3, #3
 800e268:	b2da      	uxtb	r2, r3
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e272:	0c1b      	lsrs	r3, r3, #16
 800e274:	b2da      	uxtb	r2, r3
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e27e:	0a1b      	lsrs	r3, r3, #8
 800e280:	b2da      	uxtb	r2, r3
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e294:	0d1b      	lsrs	r3, r3, #20
 800e296:	b29a      	uxth	r2, r3
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2a0:	0c1b      	lsrs	r3, r3, #16
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	f003 030f 	and.w	r3, r3, #15
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2b2:	0bdb      	lsrs	r3, r3, #15
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	f003 0301 	and.w	r3, r3, #1
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2c4:	0b9b      	lsrs	r3, r3, #14
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	f003 0301 	and.w	r3, r3, #1
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2d6:	0b5b      	lsrs	r3, r3, #13
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	f003 0301 	and.w	r3, r3, #1
 800e2de:	b2da      	uxtb	r2, r3
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2e8:	0b1b      	lsrs	r3, r3, #12
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	f003 0301 	and.w	r3, r3, #1
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e300:	2b00      	cmp	r3, #0
 800e302:	d163      	bne.n	800e3cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e308:	009a      	lsls	r2, r3, #2
 800e30a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800e30e:	4013      	ands	r3, r2
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800e314:	0f92      	lsrs	r2, r2, #30
 800e316:	431a      	orrs	r2, r3
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e320:	0edb      	lsrs	r3, r3, #27
 800e322:	b2db      	uxtb	r3, r3
 800e324:	f003 0307 	and.w	r3, r3, #7
 800e328:	b2da      	uxtb	r2, r3
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e332:	0e1b      	lsrs	r3, r3, #24
 800e334:	b2db      	uxtb	r3, r3
 800e336:	f003 0307 	and.w	r3, r3, #7
 800e33a:	b2da      	uxtb	r2, r3
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e344:	0d5b      	lsrs	r3, r3, #21
 800e346:	b2db      	uxtb	r3, r3
 800e348:	f003 0307 	and.w	r3, r3, #7
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e356:	0c9b      	lsrs	r3, r3, #18
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	f003 0307 	and.w	r3, r3, #7
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e368:	0bdb      	lsrs	r3, r3, #15
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	f003 0307 	and.w	r3, r3, #7
 800e370:	b2da      	uxtb	r2, r3
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	691b      	ldr	r3, [r3, #16]
 800e37a:	1c5a      	adds	r2, r3, #1
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	7e1b      	ldrb	r3, [r3, #24]
 800e384:	b2db      	uxtb	r3, r3
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	3302      	adds	r3, #2
 800e38c:	2201      	movs	r2, #1
 800e38e:	fa02 f303 	lsl.w	r3, r2, r3
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e396:	fb03 f202 	mul.w	r2, r3, r2
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	7a1b      	ldrb	r3, [r3, #8]
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	f003 030f 	and.w	r3, r3, #15
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	409a      	lsls	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800e3b8:	0a52      	lsrs	r2, r2, #9
 800e3ba:	fb03 f202 	mul.w	r2, r3, r2
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3c8:	655a      	str	r2, [r3, #84]	@ 0x54
 800e3ca:	e031      	b.n	800e430 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d11d      	bne.n	800e410 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e3d8:	041b      	lsls	r3, r3, #16
 800e3da:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3e2:	0c1b      	lsrs	r3, r3, #16
 800e3e4:	431a      	orrs	r2, r3
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	029a      	lsls	r2, r3, #10
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e404:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	655a      	str	r2, [r3, #84]	@ 0x54
 800e40e:	e00f      	b.n	800e430 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a58      	ldr	r2, [pc, #352]	@ (800e578 <HAL_SD_GetCardCSD+0x344>)
 800e416:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e41c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2201      	movs	r2, #1
 800e428:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800e42c:	2301      	movs	r3, #1
 800e42e:	e09d      	b.n	800e56c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e434:	0b9b      	lsrs	r3, r3, #14
 800e436:	b2db      	uxtb	r3, r3
 800e438:	f003 0301 	and.w	r3, r3, #1
 800e43c:	b2da      	uxtb	r2, r3
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e446:	09db      	lsrs	r3, r3, #7
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e44e:	b2da      	uxtb	r2, r3
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e468:	0fdb      	lsrs	r3, r3, #31
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e474:	0f5b      	lsrs	r3, r3, #29
 800e476:	b2db      	uxtb	r3, r3
 800e478:	f003 0303 	and.w	r3, r3, #3
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e486:	0e9b      	lsrs	r3, r3, #26
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	f003 0307 	and.w	r3, r3, #7
 800e48e:	b2da      	uxtb	r2, r3
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e498:	0d9b      	lsrs	r3, r3, #22
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	f003 030f 	and.w	r3, r3, #15
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4aa:	0d5b      	lsrs	r3, r3, #21
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	f003 0301 	and.w	r3, r3, #1
 800e4b2:	b2da      	uxtb	r2, r3
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4c6:	0c1b      	lsrs	r3, r3, #16
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	f003 0301 	and.w	r3, r3, #1
 800e4ce:	b2da      	uxtb	r2, r3
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4da:	0bdb      	lsrs	r3, r3, #15
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	f003 0301 	and.w	r3, r3, #1
 800e4e2:	b2da      	uxtb	r2, r3
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4ee:	0b9b      	lsrs	r3, r3, #14
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	f003 0301 	and.w	r3, r3, #1
 800e4f6:	b2da      	uxtb	r2, r3
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e502:	0b5b      	lsrs	r3, r3, #13
 800e504:	b2db      	uxtb	r3, r3
 800e506:	f003 0301 	and.w	r3, r3, #1
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e516:	0b1b      	lsrs	r3, r3, #12
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	f003 0301 	and.w	r3, r3, #1
 800e51e:	b2da      	uxtb	r2, r3
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e52a:	0a9b      	lsrs	r3, r3, #10
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	f003 0303 	and.w	r3, r3, #3
 800e532:	b2da      	uxtb	r2, r3
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e53e:	0a1b      	lsrs	r3, r3, #8
 800e540:	b2db      	uxtb	r3, r3
 800e542:	f003 0303 	and.w	r3, r3, #3
 800e546:	b2da      	uxtb	r2, r3
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e552:	085b      	lsrs	r3, r3, #1
 800e554:	b2db      	uxtb	r3, r3
 800e556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e55a:	b2da      	uxtb	r2, r3
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	2201      	movs	r2, #1
 800e566:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr
 800e578:	1fe00fff 	.word	0x1fe00fff

0800e57c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b094      	sub	sp, #80	@ 0x50
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e592:	b2db      	uxtb	r3, r3
 800e594:	2b03      	cmp	r3, #3
 800e596:	d101      	bne.n	800e59c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e598:	2301      	movs	r3, #1
 800e59a:	e0a7      	b.n	800e6ec <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e59c:	f107 0308 	add.w	r3, r7, #8
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 fb62 	bl	800ec6c <SD_SendSDStatus>
 800e5a8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d011      	beq.n	800e5d4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a4f      	ldr	r2, [pc, #316]	@ (800e6f4 <HAL_SD_GetCardStatus+0x178>)
 800e5b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5be:	431a      	orrs	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e5d2:	e070      	b.n	800e6b6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	099b      	lsrs	r3, r3, #6
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	f003 0303 	and.w	r3, r3, #3
 800e5de:	b2da      	uxtb	r2, r3
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	095b      	lsrs	r3, r3, #5
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	f003 0301 	and.w	r3, r3, #1
 800e5ee:	b2da      	uxtb	r2, r3
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	0a1b      	lsrs	r3, r3, #8
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	0e1b      	lsrs	r3, r3, #24
 800e604:	b29b      	uxth	r3, r3
 800e606:	4313      	orrs	r3, r2
 800e608:	b29a      	uxth	r2, r3
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	061a      	lsls	r2, r3, #24
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	021b      	lsls	r3, r3, #8
 800e616:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e61a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	0a1b      	lsrs	r3, r3, #8
 800e620:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e624:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	0e1b      	lsrs	r3, r3, #24
 800e62a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	b2da      	uxtb	r2, r3
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	0a1b      	lsrs	r3, r3, #8
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	0d1b      	lsrs	r3, r3, #20
 800e646:	b2db      	uxtb	r3, r3
 800e648:	f003 030f 	and.w	r3, r3, #15
 800e64c:	b2da      	uxtb	r2, r3
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	0c1b      	lsrs	r3, r3, #16
 800e656:	b29b      	uxth	r3, r3
 800e658:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e65c:	b29a      	uxth	r2, r3
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	b29b      	uxth	r3, r3
 800e662:	b2db      	uxtb	r3, r3
 800e664:	b29b      	uxth	r3, r3
 800e666:	4313      	orrs	r3, r2
 800e668:	b29a      	uxth	r2, r3
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	0a9b      	lsrs	r3, r3, #10
 800e672:	b2db      	uxtb	r3, r3
 800e674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	0a1b      	lsrs	r3, r3, #8
 800e682:	b2db      	uxtb	r3, r3
 800e684:	f003 0303 	and.w	r3, r3, #3
 800e688:	b2da      	uxtb	r2, r3
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	091b      	lsrs	r3, r3, #4
 800e692:	b2db      	uxtb	r3, r3
 800e694:	f003 030f 	and.w	r3, r3, #15
 800e698:	b2da      	uxtb	r2, r3
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	f003 030f 	and.w	r3, r3, #15
 800e6a6:	b2da      	uxtb	r2, r3
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	0e1b      	lsrs	r3, r3, #24
 800e6b0:	b2da      	uxtb	r2, r3
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f004 f98e 	bl	80129e0 <SDMMC_CmdBlockLength>
 800e6c4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00d      	beq.n	800e6e8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a08      	ldr	r2, [pc, #32]	@ (800e6f4 <HAL_SD_GetCardStatus+0x178>)
 800e6d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6d8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800e6e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3750      	adds	r7, #80	@ 0x50
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	1fe00fff 	.word	0x1fe00fff

0800e6f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e742:	2300      	movs	r3, #0
}
 800e744:	4618      	mov	r0, r3
 800e746:	370c      	adds	r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e750:	b590      	push	{r4, r7, lr}
 800e752:	b08d      	sub	sp, #52	@ 0x34
 800e754:	af02      	add	r7, sp, #8
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e75a:	2300      	movs	r3, #0
 800e75c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2203      	movs	r2, #3
 800e764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e76c:	2b03      	cmp	r3, #3
 800e76e:	d02e      	beq.n	800e7ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e776:	d106      	bne.n	800e786 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e77c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	635a      	str	r2, [r3, #52]	@ 0x34
 800e784:	e029      	b.n	800e7da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e78c:	d10a      	bne.n	800e7a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fb64 	bl	800ee5c <SD_WideBus_Enable>
 800e794:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e79a:	6a3b      	ldr	r3, [r7, #32]
 800e79c:	431a      	orrs	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	635a      	str	r2, [r3, #52]	@ 0x34
 800e7a2:	e01a      	b.n	800e7da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10a      	bne.n	800e7c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 fba1 	bl	800eef2 <SD_WideBus_Disable>
 800e7b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e7b6:	6a3b      	ldr	r3, [r7, #32]
 800e7b8:	431a      	orrs	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	635a      	str	r2, [r3, #52]	@ 0x34
 800e7be:	e00c      	b.n	800e7da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	635a      	str	r2, [r3, #52]	@ 0x34
 800e7cc:	e005      	b.n	800e7da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7d2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d007      	beq.n	800e7f2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a5f      	ldr	r2, [pc, #380]	@ (800e964 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e7e8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e7f0:	e096      	b.n	800e920 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e7f2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e7f6:	f04f 0100 	mov.w	r1, #0
 800e7fa:	f7fd fe9d 	bl	800c538 <HAL_RCCEx_GetPeriphCLKFreq>
 800e7fe:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	2b00      	cmp	r3, #0
 800e804:	f000 8083 	beq.w	800e90e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	691b      	ldr	r3, [r3, #16]
 800e81c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	695a      	ldr	r2, [r3, #20]
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	4950      	ldr	r1, [pc, #320]	@ (800e968 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e826:	fba1 1303 	umull	r1, r3, r1, r3
 800e82a:	0e1b      	lsrs	r3, r3, #24
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d303      	bcc.n	800e838 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	695b      	ldr	r3, [r3, #20]
 800e834:	61bb      	str	r3, [r7, #24]
 800e836:	e05a      	b.n	800e8ee <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e83c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e840:	d103      	bne.n	800e84a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	695b      	ldr	r3, [r3, #20]
 800e846:	61bb      	str	r3, [r7, #24]
 800e848:	e051      	b.n	800e8ee <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e84e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e852:	d126      	bne.n	800e8a2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	695b      	ldr	r3, [r3, #20]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d10e      	bne.n	800e87a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	4a43      	ldr	r2, [pc, #268]	@ (800e96c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d906      	bls.n	800e872 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	4a40      	ldr	r2, [pc, #256]	@ (800e968 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e868:	fba2 2303 	umull	r2, r3, r2, r3
 800e86c:	0e5b      	lsrs	r3, r3, #25
 800e86e:	61bb      	str	r3, [r7, #24]
 800e870:	e03d      	b.n	800e8ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	695b      	ldr	r3, [r3, #20]
 800e876:	61bb      	str	r3, [r7, #24]
 800e878:	e039      	b.n	800e8ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	695b      	ldr	r3, [r3, #20]
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	69fa      	ldr	r2, [r7, #28]
 800e882:	fbb2 f3f3 	udiv	r3, r2, r3
 800e886:	4a39      	ldr	r2, [pc, #228]	@ (800e96c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d906      	bls.n	800e89a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	4a36      	ldr	r2, [pc, #216]	@ (800e968 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e890:	fba2 2303 	umull	r2, r3, r2, r3
 800e894:	0e5b      	lsrs	r3, r3, #25
 800e896:	61bb      	str	r3, [r7, #24]
 800e898:	e029      	b.n	800e8ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	695b      	ldr	r3, [r3, #20]
 800e89e:	61bb      	str	r3, [r7, #24]
 800e8a0:	e025      	b.n	800e8ee <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	695b      	ldr	r3, [r3, #20]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d10e      	bne.n	800e8c8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	4a30      	ldr	r2, [pc, #192]	@ (800e970 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d906      	bls.n	800e8c0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	4a2c      	ldr	r2, [pc, #176]	@ (800e968 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e8ba:	0e1b      	lsrs	r3, r3, #24
 800e8bc:	61bb      	str	r3, [r7, #24]
 800e8be:	e016      	b.n	800e8ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	695b      	ldr	r3, [r3, #20]
 800e8c4:	61bb      	str	r3, [r7, #24]
 800e8c6:	e012      	b.n	800e8ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	695b      	ldr	r3, [r3, #20]
 800e8cc:	005b      	lsls	r3, r3, #1
 800e8ce:	69fa      	ldr	r2, [r7, #28]
 800e8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8d4:	4a26      	ldr	r2, [pc, #152]	@ (800e970 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d906      	bls.n	800e8e8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	4a22      	ldr	r2, [pc, #136]	@ (800e968 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e8de:	fba2 2303 	umull	r2, r3, r2, r3
 800e8e2:	0e1b      	lsrs	r3, r3, #24
 800e8e4:	61bb      	str	r3, [r7, #24]
 800e8e6:	e002      	b.n	800e8ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	695b      	ldr	r3, [r3, #20]
 800e8ec:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681c      	ldr	r4, [r3, #0]
 800e8f2:	466a      	mov	r2, sp
 800e8f4:	f107 0314 	add.w	r3, r7, #20
 800e8f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e8fc:	e882 0003 	stmia.w	r2, {r0, r1}
 800e900:	f107 0308 	add.w	r3, r7, #8
 800e904:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e906:	4620      	mov	r0, r4
 800e908:	f003 ff8c 	bl	8012824 <SDMMC_Init>
 800e90c:	e008      	b.n	800e920 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e912:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800e91a:	2301      	movs	r3, #1
 800e91c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e928:	4618      	mov	r0, r3
 800e92a:	f004 f859 	bl	80129e0 <SDMMC_CmdBlockLength>
 800e92e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e930:	6a3b      	ldr	r3, [r7, #32]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00c      	beq.n	800e950 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4a0a      	ldr	r2, [pc, #40]	@ (800e964 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e93c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e942:	6a3b      	ldr	r3, [r7, #32]
 800e944:	431a      	orrs	r2, r3
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800e94a:	2301      	movs	r3, #1
 800e94c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800e958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	372c      	adds	r7, #44	@ 0x2c
 800e960:	46bd      	mov	sp, r7
 800e962:	bd90      	pop	{r4, r7, pc}
 800e964:	1fe00fff 	.word	0x1fe00fff
 800e968:	55e63b89 	.word	0x55e63b89
 800e96c:	02faf080 	.word	0x02faf080
 800e970:	017d7840 	.word	0x017d7840

0800e974 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e980:	f107 030c 	add.w	r3, r7, #12
 800e984:	4619      	mov	r1, r3
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f000 fa40 	bl	800ee0c <SD_SendStatus>
 800e98c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d005      	beq.n	800e9a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	431a      	orrs	r2, r3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	0a5b      	lsrs	r3, r3, #9
 800e9a4:	f003 030f 	and.w	r3, r3, #15
 800e9a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e9aa:	693b      	ldr	r3, [r7, #16]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3718      	adds	r7, #24
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b090      	sub	sp, #64	@ 0x40
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e9c0:	f7fa fb2c 	bl	800901c <HAL_GetTick>
 800e9c4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f003 ff83 	bl	80128d6 <SDMMC_GetPowerState>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d102      	bne.n	800e9dc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e9d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800e9da:	e0b5      	b.n	800eb48 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9e0:	2b03      	cmp	r3, #3
 800e9e2:	d02e      	beq.n	800ea42 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f004 f9ce 	bl	8012d8a <SDMMC_CmdSendCID>
 800e9ee:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d001      	beq.n	800e9fa <SD_InitCard+0x46>
    {
      return errorstate;
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9f8:	e0a6      	b.n	800eb48 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2100      	movs	r1, #0
 800ea00:	4618      	mov	r0, r3
 800ea02:	f003 ffae 	bl	8012962 <SDMMC_GetResponse>
 800ea06:	4602      	mov	r2, r0
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2104      	movs	r1, #4
 800ea12:	4618      	mov	r0, r3
 800ea14:	f003 ffa5 	bl	8012962 <SDMMC_GetResponse>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	2108      	movs	r1, #8
 800ea24:	4618      	mov	r0, r3
 800ea26:	f003 ff9c 	bl	8012962 <SDMMC_GetResponse>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	210c      	movs	r1, #12
 800ea36:	4618      	mov	r0, r3
 800ea38:	f003 ff93 	bl	8012962 <SDMMC_GetResponse>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea46:	2b03      	cmp	r3, #3
 800ea48:	d01d      	beq.n	800ea86 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ea4a:	e019      	b.n	800ea80 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f107 020a 	add.w	r2, r7, #10
 800ea54:	4611      	mov	r1, r2
 800ea56:	4618      	mov	r0, r3
 800ea58:	f004 f9d6 	bl	8012e08 <SDMMC_CmdSetRelAdd>
 800ea5c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ea5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ea64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea66:	e06f      	b.n	800eb48 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ea68:	f7fa fad8 	bl	800901c <HAL_GetTick>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d902      	bls.n	800ea80 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ea7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ea7e:	e063      	b.n	800eb48 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ea80:	897b      	ldrh	r3, [r7, #10]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d0e2      	beq.n	800ea4c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea8a:	2b03      	cmp	r3, #3
 800ea8c:	d036      	beq.n	800eafc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ea8e:	897b      	ldrh	r3, [r7, #10]
 800ea90:	461a      	mov	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea9e:	041b      	lsls	r3, r3, #16
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	f004 f990 	bl	8012dc8 <SDMMC_CmdSendCSD>
 800eaa8:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800eaaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <SD_InitCard+0x100>
    {
      return errorstate;
 800eab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eab2:	e049      	b.n	800eb48 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2100      	movs	r1, #0
 800eaba:	4618      	mov	r0, r3
 800eabc:	f003 ff51 	bl	8012962 <SDMMC_GetResponse>
 800eac0:	4602      	mov	r2, r0
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2104      	movs	r1, #4
 800eacc:	4618      	mov	r0, r3
 800eace:	f003 ff48 	bl	8012962 <SDMMC_GetResponse>
 800ead2:	4602      	mov	r2, r0
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2108      	movs	r1, #8
 800eade:	4618      	mov	r0, r3
 800eae0:	f003 ff3f 	bl	8012962 <SDMMC_GetResponse>
 800eae4:	4602      	mov	r2, r0
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	210c      	movs	r1, #12
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f003 ff36 	bl	8012962 <SDMMC_GetResponse>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2104      	movs	r1, #4
 800eb02:	4618      	mov	r0, r3
 800eb04:	f003 ff2d 	bl	8012962 <SDMMC_GetResponse>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	0d1a      	lsrs	r2, r3, #20
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800eb10:	f107 030c 	add.w	r3, r7, #12
 800eb14:	4619      	mov	r1, r3
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f7ff fb8c 	bl	800e234 <HAL_SD_GetCardCSD>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d002      	beq.n	800eb28 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb22:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800eb26:	e00f      	b.n	800eb48 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb30:	041b      	lsls	r3, r3, #16
 800eb32:	4619      	mov	r1, r3
 800eb34:	4610      	mov	r0, r2
 800eb36:	f004 f83f 	bl	8012bb8 <SDMMC_CmdSelDesel>
 800eb3a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d001      	beq.n	800eb46 <SD_InitCard+0x192>
  {
    return errorstate;
 800eb42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb44:	e000      	b.n	800eb48 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3740      	adds	r7, #64	@ 0x40
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b086      	sub	sp, #24
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800eb60:	2300      	movs	r3, #0
 800eb62:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f004 f848 	bl	8012bfe <SDMMC_CmdGoIdleState>
 800eb6e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <SD_PowerON+0x2a>
  {
    return errorstate;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	e072      	b.n	800ec60 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f004 f85b 	bl	8012c3a <SDMMC_CmdOperCond>
 800eb84:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb8c:	d10d      	bne.n	800ebaa <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f004 f830 	bl	8012bfe <SDMMC_CmdGoIdleState>
 800eb9e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d004      	beq.n	800ebb0 <SD_PowerON+0x60>
    {
      return errorstate;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	e05a      	b.n	800ec60 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2201      	movs	r2, #1
 800ebae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d137      	bne.n	800ec28 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f004 f85b 	bl	8012c7a <SDMMC_CmdAppCommand>
 800ebc4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d02d      	beq.n	800ec28 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ebcc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ebd0:	e046      	b.n	800ec60 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f004 f84e 	bl	8012c7a <SDMMC_CmdAppCommand>
 800ebde:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d001      	beq.n	800ebea <SD_PowerON+0x9a>
    {
      return errorstate;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	e03a      	b.n	800ec60 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	491e      	ldr	r1, [pc, #120]	@ (800ec68 <SD_PowerON+0x118>)
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f004 f865 	bl	8012cc0 <SDMMC_CmdAppOperCommand>
 800ebf6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d002      	beq.n	800ec04 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ebfe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ec02:	e02d      	b.n	800ec60 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2100      	movs	r1, #0
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f003 fea9 	bl	8012962 <SDMMC_GetResponse>
 800ec10:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	0fdb      	lsrs	r3, r3, #31
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d101      	bne.n	800ec1e <SD_PowerON+0xce>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e000      	b.n	800ec20 <SD_PowerON+0xd0>
 800ec1e:	2300      	movs	r3, #0
 800ec20:	613b      	str	r3, [r7, #16]

    count++;
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	3301      	adds	r3, #1
 800ec26:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d802      	bhi.n	800ec38 <SD_PowerON+0xe8>
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d0cc      	beq.n	800ebd2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d902      	bls.n	800ec48 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ec42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ec46:	e00b      	b.n	800ec60 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ec5e:	2300      	movs	r3, #0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3718      	adds	r7, #24
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	c1100000 	.word	0xc1100000

0800ec6c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b08c      	sub	sp, #48	@ 0x30
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ec76:	f7fa f9d1 	bl	800901c <HAL_GetTick>
 800ec7a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2100      	movs	r1, #0
 800ec86:	4618      	mov	r0, r3
 800ec88:	f003 fe6b 	bl	8012962 <SDMMC_GetResponse>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ec96:	d102      	bne.n	800ec9e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ec98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ec9c:	e0b0      	b.n	800ee00 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2140      	movs	r1, #64	@ 0x40
 800eca4:	4618      	mov	r0, r3
 800eca6:	f003 fe9b 	bl	80129e0 <SDMMC_CmdBlockLength>
 800ecaa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ecac:	6a3b      	ldr	r3, [r7, #32]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d005      	beq.n	800ecbe <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ecba:	6a3b      	ldr	r3, [r7, #32]
 800ecbc:	e0a0      	b.n	800ee00 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecc6:	041b      	lsls	r3, r3, #16
 800ecc8:	4619      	mov	r1, r3
 800ecca:	4610      	mov	r0, r2
 800eccc:	f003 ffd5 	bl	8012c7a <SDMMC_CmdAppCommand>
 800ecd0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ecd2:	6a3b      	ldr	r3, [r7, #32]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d005      	beq.n	800ece4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ece0:	6a3b      	ldr	r3, [r7, #32]
 800ece2:	e08d      	b.n	800ee00 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ece4:	f04f 33ff 	mov.w	r3, #4294967295
 800ece8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ecea:	2340      	movs	r3, #64	@ 0x40
 800ecec:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ecee:	2360      	movs	r3, #96	@ 0x60
 800ecf0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ecf2:	2302      	movs	r3, #2
 800ecf4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f107 0208 	add.w	r2, r7, #8
 800ed06:	4611      	mov	r1, r2
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f003 fe3d 	bl	8012988 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f004 f8bd 	bl	8012e92 <SDMMC_CmdStatusRegister>
 800ed18:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed1a:	6a3b      	ldr	r3, [r7, #32]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d02b      	beq.n	800ed78 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ed28:	6a3b      	ldr	r3, [r7, #32]
 800ed2a:	e069      	b.n	800ee00 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d013      	beq.n	800ed62 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed3e:	e00d      	b.n	800ed5c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4618      	mov	r0, r3
 800ed46:	f003 fd97 	bl	8012878 <SDMMC_ReadFIFO>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed4e:	601a      	str	r2, [r3, #0]
        pData++;
 800ed50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed52:	3304      	adds	r3, #4
 800ed54:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800ed56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed58:	3301      	adds	r3, #1
 800ed5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5e:	2b07      	cmp	r3, #7
 800ed60:	d9ee      	bls.n	800ed40 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ed62:	f7fa f95b 	bl	800901c <HAL_GetTick>
 800ed66:	4602      	mov	r2, r0
 800ed68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6a:	1ad3      	subs	r3, r2, r3
 800ed6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed70:	d102      	bne.n	800ed78 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ed72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed76:	e043      	b.n	800ee00 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed7e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d0d2      	beq.n	800ed2c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed8c:	f003 0308 	and.w	r3, r3, #8
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ed94:	2308      	movs	r3, #8
 800ed96:	e033      	b.n	800ee00 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed9e:	f003 0302 	and.w	r3, r3, #2
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d001      	beq.n	800edaa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eda6:	2302      	movs	r3, #2
 800eda8:	e02a      	b.n	800ee00 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb0:	f003 0320 	and.w	r3, r3, #32
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d017      	beq.n	800ede8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800edb8:	2320      	movs	r3, #32
 800edba:	e021      	b.n	800ee00 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f003 fd59 	bl	8012878 <SDMMC_ReadFIFO>
 800edc6:	4602      	mov	r2, r0
 800edc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edca:	601a      	str	r2, [r3, #0]
    pData++;
 800edcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edce:	3304      	adds	r3, #4
 800edd0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800edd2:	f7fa f923 	bl	800901c <HAL_GetTick>
 800edd6:	4602      	mov	r2, r0
 800edd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edda:	1ad3      	subs	r3, r2, r3
 800eddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede0:	d102      	bne.n	800ede8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ede2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ede6:	e00b      	b.n	800ee00 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1e2      	bne.n	800edbc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a03      	ldr	r2, [pc, #12]	@ (800ee08 <SD_SendSDStatus+0x19c>)
 800edfc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3730      	adds	r7, #48	@ 0x30
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	18000f3a 	.word	0x18000f3a

0800ee0c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d102      	bne.n	800ee22 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ee1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ee20:	e018      	b.n	800ee54 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee2a:	041b      	lsls	r3, r3, #16
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	4610      	mov	r0, r2
 800ee30:	f004 f80c 	bl	8012e4c <SDMMC_CmdSendStatus>
 800ee34:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d001      	beq.n	800ee40 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	e009      	b.n	800ee54 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2100      	movs	r1, #0
 800ee46:	4618      	mov	r0, r3
 800ee48:	f003 fd8b 	bl	8012962 <SDMMC_GetResponse>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3710      	adds	r7, #16
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ee64:	2300      	movs	r3, #0
 800ee66:	60fb      	str	r3, [r7, #12]
 800ee68:	2300      	movs	r3, #0
 800ee6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2100      	movs	r1, #0
 800ee72:	4618      	mov	r0, r3
 800ee74:	f003 fd75 	bl	8012962 <SDMMC_GetResponse>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee82:	d102      	bne.n	800ee8a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ee84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ee88:	e02f      	b.n	800eeea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ee8a:	f107 030c 	add.w	r3, r7, #12
 800ee8e:	4619      	mov	r1, r3
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 f879 	bl	800ef88 <SD_FindSCR>
 800ee96:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	e023      	b.n	800eeea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d01c      	beq.n	800eee6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eeb4:	041b      	lsls	r3, r3, #16
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	4610      	mov	r0, r2
 800eeba:	f003 fede 	bl	8012c7a <SDMMC_CmdAppCommand>
 800eebe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d001      	beq.n	800eeca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	e00f      	b.n	800eeea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2102      	movs	r1, #2
 800eed0:	4618      	mov	r0, r3
 800eed2:	f003 ff15 	bl	8012d00 <SDMMC_CmdBusWidth>
 800eed6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d001      	beq.n	800eee2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	e003      	b.n	800eeea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eee2:	2300      	movs	r3, #0
 800eee4:	e001      	b.n	800eeea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eee6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3718      	adds	r7, #24
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b086      	sub	sp, #24
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eefa:	2300      	movs	r3, #0
 800eefc:	60fb      	str	r3, [r7, #12]
 800eefe:	2300      	movs	r3, #0
 800ef00:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2100      	movs	r1, #0
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f003 fd2a 	bl	8012962 <SDMMC_GetResponse>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef18:	d102      	bne.n	800ef20 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ef1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ef1e:	e02f      	b.n	800ef80 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ef20:	f107 030c 	add.w	r3, r7, #12
 800ef24:	4619      	mov	r1, r3
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 f82e 	bl	800ef88 <SD_FindSCR>
 800ef2c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d001      	beq.n	800ef38 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	e023      	b.n	800ef80 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d01c      	beq.n	800ef7c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef4a:	041b      	lsls	r3, r3, #16
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	4610      	mov	r0, r2
 800ef50:	f003 fe93 	bl	8012c7a <SDMMC_CmdAppCommand>
 800ef54:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d001      	beq.n	800ef60 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	e00f      	b.n	800ef80 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2100      	movs	r1, #0
 800ef66:	4618      	mov	r0, r3
 800ef68:	f003 feca 	bl	8012d00 <SDMMC_CmdBusWidth>
 800ef6c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d001      	beq.n	800ef78 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	e003      	b.n	800ef80 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	e001      	b.n	800ef80 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ef7c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3718      	adds	r7, #24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b08e      	sub	sp, #56	@ 0x38
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ef92:	f7fa f843 	bl	800901c <HAL_GetTick>
 800ef96:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	60bb      	str	r3, [r7, #8]
 800efa0:	2300      	movs	r3, #0
 800efa2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2108      	movs	r1, #8
 800efae:	4618      	mov	r0, r3
 800efb0:	f003 fd16 	bl	80129e0 <SDMMC_CmdBlockLength>
 800efb4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800efb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d001      	beq.n	800efc0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800efbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efbe:	e0ad      	b.n	800f11c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efc8:	041b      	lsls	r3, r3, #16
 800efca:	4619      	mov	r1, r3
 800efcc:	4610      	mov	r0, r2
 800efce:	f003 fe54 	bl	8012c7a <SDMMC_CmdAppCommand>
 800efd2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800efd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d001      	beq.n	800efde <SD_FindSCR+0x56>
  {
    return errorstate;
 800efda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efdc:	e09e      	b.n	800f11c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800efde:	f04f 33ff 	mov.w	r3, #4294967295
 800efe2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800efe4:	2308      	movs	r3, #8
 800efe6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800efe8:	2330      	movs	r3, #48	@ 0x30
 800efea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800efec:	2302      	movs	r3, #2
 800efee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eff0:	2300      	movs	r3, #0
 800eff2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eff4:	2301      	movs	r3, #1
 800eff6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f107 0210 	add.w	r2, r7, #16
 800f000:	4611      	mov	r1, r2
 800f002:	4618      	mov	r0, r3
 800f004:	f003 fcc0 	bl	8012988 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f003 fe9a 	bl	8012d46 <SDMMC_CmdSendSCR>
 800f012:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f016:	2b00      	cmp	r3, #0
 800f018:	d027      	beq.n	800f06a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f01c:	e07e      	b.n	800f11c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f024:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d113      	bne.n	800f054 <SD_FindSCR+0xcc>
 800f02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d110      	bne.n	800f054 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4618      	mov	r0, r3
 800f038:	f003 fc1e 	bl	8012878 <SDMMC_ReadFIFO>
 800f03c:	4603      	mov	r3, r0
 800f03e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4618      	mov	r0, r3
 800f046:	f003 fc17 	bl	8012878 <SDMMC_ReadFIFO>
 800f04a:	4603      	mov	r3, r0
 800f04c:	60fb      	str	r3, [r7, #12]
      index++;
 800f04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f050:	3301      	adds	r3, #1
 800f052:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f054:	f7f9 ffe2 	bl	800901c <HAL_GetTick>
 800f058:	4602      	mov	r2, r0
 800f05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f05c:	1ad3      	subs	r3, r2, r3
 800f05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f062:	d102      	bne.n	800f06a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f064:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f068:	e058      	b.n	800f11c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f070:	f240 532a 	movw	r3, #1322	@ 0x52a
 800f074:	4013      	ands	r3, r2
 800f076:	2b00      	cmp	r3, #0
 800f078:	d0d1      	beq.n	800f01e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f080:	f003 0308 	and.w	r3, r3, #8
 800f084:	2b00      	cmp	r3, #0
 800f086:	d005      	beq.n	800f094 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2208      	movs	r2, #8
 800f08e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f090:	2308      	movs	r3, #8
 800f092:	e043      	b.n	800f11c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f09a:	f003 0302 	and.w	r3, r3, #2
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d005      	beq.n	800f0ae <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2202      	movs	r2, #2
 800f0a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f0aa:	2302      	movs	r3, #2
 800f0ac:	e036      	b.n	800f11c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0b4:	f003 0320 	and.w	r3, r3, #32
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d005      	beq.n	800f0c8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2220      	movs	r2, #32
 800f0c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f0c4:	2320      	movs	r3, #32
 800f0c6:	e029      	b.n	800f11c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a15      	ldr	r2, [pc, #84]	@ (800f124 <SD_FindSCR+0x19c>)
 800f0ce:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	061a      	lsls	r2, r3, #24
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	021b      	lsls	r3, r3, #8
 800f0d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f0dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	0a1b      	lsrs	r3, r3, #8
 800f0e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f0e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	0e1b      	lsrs	r3, r3, #24
 800f0ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f0:	601a      	str	r2, [r3, #0]
    scr++;
 800f0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f4:	3304      	adds	r3, #4
 800f0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	061a      	lsls	r2, r3, #24
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	021b      	lsls	r3, r3, #8
 800f100:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f104:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	0a1b      	lsrs	r3, r3, #8
 800f10a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f10e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	0e1b      	lsrs	r3, r3, #24
 800f114:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f118:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f11a:	2300      	movs	r3, #0
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3738      	adds	r7, #56	@ 0x38
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	18000f3a 	.word	0x18000f3a

0800f128 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d101      	bne.n	800f13a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f136:	2301      	movs	r3, #1
 800f138:	e10f      	b.n	800f35a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4a87      	ldr	r2, [pc, #540]	@ (800f364 <HAL_SPI_Init+0x23c>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d00f      	beq.n	800f16a <HAL_SPI_Init+0x42>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	4a86      	ldr	r2, [pc, #536]	@ (800f368 <HAL_SPI_Init+0x240>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d00a      	beq.n	800f16a <HAL_SPI_Init+0x42>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a84      	ldr	r2, [pc, #528]	@ (800f36c <HAL_SPI_Init+0x244>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d005      	beq.n	800f16a <HAL_SPI_Init+0x42>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	2b0f      	cmp	r3, #15
 800f164:	d901      	bls.n	800f16a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f166:	2301      	movs	r3, #1
 800f168:	e0f7      	b.n	800f35a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f001 f968 	bl	8010440 <SPI_GetPacketSize>
 800f170:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4a7b      	ldr	r2, [pc, #492]	@ (800f364 <HAL_SPI_Init+0x23c>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d00c      	beq.n	800f196 <HAL_SPI_Init+0x6e>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a79      	ldr	r2, [pc, #484]	@ (800f368 <HAL_SPI_Init+0x240>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d007      	beq.n	800f196 <HAL_SPI_Init+0x6e>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a78      	ldr	r2, [pc, #480]	@ (800f36c <HAL_SPI_Init+0x244>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d002      	beq.n	800f196 <HAL_SPI_Init+0x6e>
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2b08      	cmp	r3, #8
 800f194:	d811      	bhi.n	800f1ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f19a:	4a72      	ldr	r2, [pc, #456]	@ (800f364 <HAL_SPI_Init+0x23c>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d009      	beq.n	800f1b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4a70      	ldr	r2, [pc, #448]	@ (800f368 <HAL_SPI_Init+0x240>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d004      	beq.n	800f1b4 <HAL_SPI_Init+0x8c>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	4a6f      	ldr	r2, [pc, #444]	@ (800f36c <HAL_SPI_Init+0x244>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d104      	bne.n	800f1be <HAL_SPI_Init+0x96>
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2b10      	cmp	r3, #16
 800f1b8:	d901      	bls.n	800f1be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	e0cd      	b.n	800f35a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7f9 fa22 	bl	800861c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2202      	movs	r2, #2
 800f1dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f022 0201 	bic.w	r2, r2, #1
 800f1ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800f1fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	699b      	ldr	r3, [r3, #24]
 800f200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f204:	d119      	bne.n	800f23a <HAL_SPI_Init+0x112>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f20e:	d103      	bne.n	800f218 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f214:	2b00      	cmp	r3, #0
 800f216:	d008      	beq.n	800f22a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d10c      	bne.n	800f23a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f224:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f228:	d107      	bne.n	800f23a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f238:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00f      	beq.n	800f266 <HAL_SPI_Init+0x13e>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	2b06      	cmp	r3, #6
 800f24c:	d90b      	bls.n	800f266 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	430a      	orrs	r2, r1
 800f262:	601a      	str	r2, [r3, #0]
 800f264:	e007      	b.n	800f276 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f274:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	69da      	ldr	r2, [r3, #28]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f27e:	431a      	orrs	r2, r3
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	431a      	orrs	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f288:	ea42 0103 	orr.w	r1, r2, r3
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	68da      	ldr	r2, [r3, #12]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	430a      	orrs	r2, r1
 800f296:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2a0:	431a      	orrs	r2, r3
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2a6:	431a      	orrs	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	699b      	ldr	r3, [r3, #24]
 800f2ac:	431a      	orrs	r2, r3
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	691b      	ldr	r3, [r3, #16]
 800f2b2:	431a      	orrs	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	695b      	ldr	r3, [r3, #20]
 800f2b8:	431a      	orrs	r2, r3
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6a1b      	ldr	r3, [r3, #32]
 800f2be:	431a      	orrs	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	431a      	orrs	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2ca:	431a      	orrs	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	431a      	orrs	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f2d6:	ea42 0103 	orr.w	r1, r2, r3
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	430a      	orrs	r2, r1
 800f2e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d113      	bne.n	800f316 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f300:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	689b      	ldr	r3, [r3, #8]
 800f308:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f314:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f022 0201 	bic.w	r2, r2, #1
 800f324:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00a      	beq.n	800f348 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	430a      	orrs	r2, r1
 800f346:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f358:	2300      	movs	r3, #0
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3710      	adds	r7, #16
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
 800f362:	bf00      	nop
 800f364:	40013000 	.word	0x40013000
 800f368:	40003800 	.word	0x40003800
 800f36c:	40003c00 	.word	0x40003c00

0800f370 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b088      	sub	sp, #32
 800f374:	af02      	add	r7, sp, #8
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	603b      	str	r3, [r7, #0]
 800f37c:	4613      	mov	r3, r2
 800f37e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	3320      	adds	r3, #32
 800f386:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f388:	f7f9 fe48 	bl	800901c <HAL_GetTick>
 800f38c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f394:	b2db      	uxtb	r3, r3
 800f396:	2b01      	cmp	r3, #1
 800f398:	d001      	beq.n	800f39e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800f39a:	2302      	movs	r3, #2
 800f39c:	e1d1      	b.n	800f742 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d002      	beq.n	800f3aa <HAL_SPI_Transmit+0x3a>
 800f3a4:	88fb      	ldrh	r3, [r7, #6]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d101      	bne.n	800f3ae <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e1c9      	b.n	800f742 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d101      	bne.n	800f3bc <HAL_SPI_Transmit+0x4c>
 800f3b8:	2302      	movs	r3, #2
 800f3ba:	e1c2      	b.n	800f742 <HAL_SPI_Transmit+0x3d2>
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2203      	movs	r2, #3
 800f3c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	68ba      	ldr	r2, [r7, #8]
 800f3d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	88fa      	ldrh	r2, [r7, #6]
 800f3de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	88fa      	ldrh	r2, [r7, #6]
 800f3e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2200      	movs	r2, #0
 800f404:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f414:	d108      	bne.n	800f428 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f424:	601a      	str	r2, [r3, #0]
 800f426:	e009      	b.n	800f43c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f43a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	685a      	ldr	r2, [r3, #4]
 800f442:	4b96      	ldr	r3, [pc, #600]	@ (800f69c <HAL_SPI_Transmit+0x32c>)
 800f444:	4013      	ands	r3, r2
 800f446:	88f9      	ldrh	r1, [r7, #6]
 800f448:	68fa      	ldr	r2, [r7, #12]
 800f44a:	6812      	ldr	r2, [r2, #0]
 800f44c:	430b      	orrs	r3, r1
 800f44e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f042 0201 	orr.w	r2, r2, #1
 800f45e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f468:	d107      	bne.n	800f47a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f478:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	2b0f      	cmp	r3, #15
 800f480:	d947      	bls.n	800f512 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f482:	e03f      	b.n	800f504 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	695b      	ldr	r3, [r3, #20]
 800f48a:	f003 0302 	and.w	r3, r3, #2
 800f48e:	2b02      	cmp	r3, #2
 800f490:	d114      	bne.n	800f4bc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	6812      	ldr	r2, [r2, #0]
 800f49c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f4a2:	1d1a      	adds	r2, r3, #4
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f4ba:	e023      	b.n	800f504 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4bc:	f7f9 fdae 	bl	800901c <HAL_GetTick>
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	1ad3      	subs	r3, r2, r3
 800f4c6:	683a      	ldr	r2, [r7, #0]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d803      	bhi.n	800f4d4 <HAL_SPI_Transmit+0x164>
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d2:	d102      	bne.n	800f4da <HAL_SPI_Transmit+0x16a>
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d114      	bne.n	800f504 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f000 fee2 	bl	80102a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f500:	2303      	movs	r3, #3
 800f502:	e11e      	b.n	800f742 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d1b9      	bne.n	800f484 <HAL_SPI_Transmit+0x114>
 800f510:	e0f1      	b.n	800f6f6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	2b07      	cmp	r3, #7
 800f518:	f240 80e6 	bls.w	800f6e8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f51c:	e05d      	b.n	800f5da <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	695b      	ldr	r3, [r3, #20]
 800f524:	f003 0302 	and.w	r3, r3, #2
 800f528:	2b02      	cmp	r3, #2
 800f52a:	d132      	bne.n	800f592 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f532:	b29b      	uxth	r3, r3
 800f534:	2b01      	cmp	r3, #1
 800f536:	d918      	bls.n	800f56a <HAL_SPI_Transmit+0x1fa>
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d014      	beq.n	800f56a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	6812      	ldr	r2, [r2, #0]
 800f54a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f550:	1d1a      	adds	r2, r3, #4
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	3b02      	subs	r3, #2
 800f560:	b29a      	uxth	r2, r3
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f568:	e037      	b.n	800f5da <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f56e:	881a      	ldrh	r2, [r3, #0]
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f578:	1c9a      	adds	r2, r3, #2
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f584:	b29b      	uxth	r3, r3
 800f586:	3b01      	subs	r3, #1
 800f588:	b29a      	uxth	r2, r3
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f590:	e023      	b.n	800f5da <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f592:	f7f9 fd43 	bl	800901c <HAL_GetTick>
 800f596:	4602      	mov	r2, r0
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	1ad3      	subs	r3, r2, r3
 800f59c:	683a      	ldr	r2, [r7, #0]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d803      	bhi.n	800f5aa <HAL_SPI_Transmit+0x23a>
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5a8:	d102      	bne.n	800f5b0 <HAL_SPI_Transmit+0x240>
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d114      	bne.n	800f5da <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f5b0:	68f8      	ldr	r0, [r7, #12]
 800f5b2:	f000 fe77 	bl	80102a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f5bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	e0b3      	b.n	800f742 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d19b      	bne.n	800f51e <HAL_SPI_Transmit+0x1ae>
 800f5e6:	e086      	b.n	800f6f6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	695b      	ldr	r3, [r3, #20]
 800f5ee:	f003 0302 	and.w	r3, r3, #2
 800f5f2:	2b02      	cmp	r3, #2
 800f5f4:	d154      	bne.n	800f6a0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	2b03      	cmp	r3, #3
 800f600:	d918      	bls.n	800f634 <HAL_SPI_Transmit+0x2c4>
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f606:	2b40      	cmp	r3, #64	@ 0x40
 800f608:	d914      	bls.n	800f634 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	6812      	ldr	r2, [r2, #0]
 800f614:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f61a:	1d1a      	adds	r2, r3, #4
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f626:	b29b      	uxth	r3, r3
 800f628:	3b04      	subs	r3, #4
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f632:	e059      	b.n	800f6e8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d917      	bls.n	800f670 <HAL_SPI_Transmit+0x300>
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f644:	2b00      	cmp	r3, #0
 800f646:	d013      	beq.n	800f670 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f64c:	881a      	ldrh	r2, [r3, #0]
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f656:	1c9a      	adds	r2, r3, #2
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f662:	b29b      	uxth	r3, r3
 800f664:	3b02      	subs	r3, #2
 800f666:	b29a      	uxth	r2, r3
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f66e:	e03b      	b.n	800f6e8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	3320      	adds	r3, #32
 800f67a:	7812      	ldrb	r2, [r2, #0]
 800f67c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f682:	1c5a      	adds	r2, r3, #1
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f68e:	b29b      	uxth	r3, r3
 800f690:	3b01      	subs	r3, #1
 800f692:	b29a      	uxth	r2, r3
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f69a:	e025      	b.n	800f6e8 <HAL_SPI_Transmit+0x378>
 800f69c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f6a0:	f7f9 fcbc 	bl	800901c <HAL_GetTick>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	1ad3      	subs	r3, r2, r3
 800f6aa:	683a      	ldr	r2, [r7, #0]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d803      	bhi.n	800f6b8 <HAL_SPI_Transmit+0x348>
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b6:	d102      	bne.n	800f6be <HAL_SPI_Transmit+0x34e>
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d114      	bne.n	800f6e8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f000 fdf0 	bl	80102a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f6e4:	2303      	movs	r3, #3
 800f6e6:	e02c      	b.n	800f742 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f6ee:	b29b      	uxth	r3, r3
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f47f af79 	bne.w	800f5e8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	2108      	movs	r1, #8
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f000 fe6f 	bl	80103e4 <SPI_WaitOnFlagUntilTimeout>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d007      	beq.n	800f71c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f712:	f043 0220 	orr.w	r2, r3, #32
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f71c:	68f8      	ldr	r0, [r7, #12]
 800f71e:	f000 fdc1 	bl	80102a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2201      	movs	r2, #1
 800f726:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2200      	movs	r2, #0
 800f72e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d001      	beq.n	800f740 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800f73c:	2301      	movs	r3, #1
 800f73e:	e000      	b.n	800f742 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800f740:	2300      	movs	r3, #0
  }
}
 800f742:	4618      	mov	r0, r3
 800f744:	3718      	adds	r7, #24
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop

0800f74c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b088      	sub	sp, #32
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	603b      	str	r3, [r7, #0]
 800f758:	4613      	mov	r3, r2
 800f75a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f760:	095b      	lsrs	r3, r3, #5
 800f762:	b29b      	uxth	r3, r3
 800f764:	3301      	adds	r3, #1
 800f766:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	3330      	adds	r3, #48	@ 0x30
 800f76e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f770:	f7f9 fc54 	bl	800901c <HAL_GetTick>
 800f774:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d001      	beq.n	800f786 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800f782:	2302      	movs	r3, #2
 800f784:	e250      	b.n	800fc28 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d002      	beq.n	800f792 <HAL_SPI_Receive+0x46>
 800f78c:	88fb      	ldrh	r3, [r7, #6]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d101      	bne.n	800f796 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800f792:	2301      	movs	r3, #1
 800f794:	e248      	b.n	800fc28 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d101      	bne.n	800f7a4 <HAL_SPI_Receive+0x58>
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	e241      	b.n	800fc28 <HAL_SPI_Receive+0x4dc>
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2204      	movs	r2, #4
 800f7b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	68ba      	ldr	r2, [r7, #8]
 800f7c0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	88fa      	ldrh	r2, [r7, #6]
 800f7c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	88fa      	ldrh	r2, [r7, #6]
 800f7ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	689b      	ldr	r3, [r3, #8]
 800f7f8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f7fc:	d108      	bne.n	800f810 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f80c:	601a      	str	r2, [r3, #0]
 800f80e:	e009      	b.n	800f824 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800f822:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	685a      	ldr	r2, [r3, #4]
 800f82a:	4b95      	ldr	r3, [pc, #596]	@ (800fa80 <HAL_SPI_Receive+0x334>)
 800f82c:	4013      	ands	r3, r2
 800f82e:	88f9      	ldrh	r1, [r7, #6]
 800f830:	68fa      	ldr	r2, [r7, #12]
 800f832:	6812      	ldr	r2, [r2, #0]
 800f834:	430b      	orrs	r3, r1
 800f836:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f042 0201 	orr.w	r2, r2, #1
 800f846:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f850:	d107      	bne.n	800f862 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f860:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	2b0f      	cmp	r3, #15
 800f868:	d96c      	bls.n	800f944 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f86a:	e064      	b.n	800f936 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	695b      	ldr	r3, [r3, #20]
 800f872:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	695b      	ldr	r3, [r3, #20]
 800f87a:	f003 0301 	and.w	r3, r3, #1
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d114      	bne.n	800f8ac <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f88a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f88c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f892:	1d1a      	adds	r2, r3, #4
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	b29a      	uxth	r2, r3
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f8aa:	e044      	b.n	800f936 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	8bfa      	ldrh	r2, [r7, #30]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d919      	bls.n	800f8ee <HAL_SPI_Receive+0x1a2>
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d014      	beq.n	800f8ee <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f8ce:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8d4:	1d1a      	adds	r2, r3, #4
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	b29a      	uxth	r2, r3
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f8ec:	e023      	b.n	800f936 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f8ee:	f7f9 fb95 	bl	800901c <HAL_GetTick>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	683a      	ldr	r2, [r7, #0]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d803      	bhi.n	800f906 <HAL_SPI_Receive+0x1ba>
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f904:	d102      	bne.n	800f90c <HAL_SPI_Receive+0x1c0>
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d114      	bne.n	800f936 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f90c:	68f8      	ldr	r0, [r7, #12]
 800f90e:	f000 fcc9 	bl	80102a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f918:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2201      	movs	r2, #1
 800f926:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2200      	movs	r2, #0
 800f92e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f932:	2303      	movs	r3, #3
 800f934:	e178      	b.n	800fc28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d194      	bne.n	800f86c <HAL_SPI_Receive+0x120>
 800f942:	e15e      	b.n	800fc02 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	2b07      	cmp	r3, #7
 800f94a:	f240 8153 	bls.w	800fbf4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f94e:	e08f      	b.n	800fa70 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	695b      	ldr	r3, [r3, #20]
 800f956:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	695b      	ldr	r3, [r3, #20]
 800f95e:	f003 0301 	and.w	r3, r3, #1
 800f962:	2b01      	cmp	r3, #1
 800f964:	d114      	bne.n	800f990 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f96a:	69ba      	ldr	r2, [r7, #24]
 800f96c:	8812      	ldrh	r2, [r2, #0]
 800f96e:	b292      	uxth	r2, r2
 800f970:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f976:	1c9a      	adds	r2, r3, #2
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f982:	b29b      	uxth	r3, r3
 800f984:	3b01      	subs	r3, #1
 800f986:	b29a      	uxth	r2, r3
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f98e:	e06f      	b.n	800fa70 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f996:	b29b      	uxth	r3, r3
 800f998:	8bfa      	ldrh	r2, [r7, #30]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d924      	bls.n	800f9e8 <HAL_SPI_Receive+0x29c>
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d01f      	beq.n	800f9e8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9ac:	69ba      	ldr	r2, [r7, #24]
 800f9ae:	8812      	ldrh	r2, [r2, #0]
 800f9b0:	b292      	uxth	r2, r2
 800f9b2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9b8:	1c9a      	adds	r2, r3, #2
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9c2:	69ba      	ldr	r2, [r7, #24]
 800f9c4:	8812      	ldrh	r2, [r2, #0]
 800f9c6:	b292      	uxth	r2, r2
 800f9c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9ce:	1c9a      	adds	r2, r3, #2
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	3b02      	subs	r3, #2
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f9e6:	e043      	b.n	800fa70 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d119      	bne.n	800fa28 <HAL_SPI_Receive+0x2dc>
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d014      	beq.n	800fa28 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa02:	69ba      	ldr	r2, [r7, #24]
 800fa04:	8812      	ldrh	r2, [r2, #0]
 800fa06:	b292      	uxth	r2, r2
 800fa08:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa0e:	1c9a      	adds	r2, r3, #2
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	3b01      	subs	r3, #1
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fa26:	e023      	b.n	800fa70 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa28:	f7f9 faf8 	bl	800901c <HAL_GetTick>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	1ad3      	subs	r3, r2, r3
 800fa32:	683a      	ldr	r2, [r7, #0]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d803      	bhi.n	800fa40 <HAL_SPI_Receive+0x2f4>
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa3e:	d102      	bne.n	800fa46 <HAL_SPI_Receive+0x2fa>
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d114      	bne.n	800fa70 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fa46:	68f8      	ldr	r0, [r7, #12]
 800fa48:	f000 fc2c 	bl	80102a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2200      	movs	r2, #0
 800fa68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800fa6c:	2303      	movs	r3, #3
 800fa6e:	e0db      	b.n	800fc28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	f47f af69 	bne.w	800f950 <HAL_SPI_Receive+0x204>
 800fa7e:	e0c0      	b.n	800fc02 <HAL_SPI_Receive+0x4b6>
 800fa80:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	695b      	ldr	r3, [r3, #20]
 800fa8a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	695b      	ldr	r3, [r3, #20]
 800fa92:	f003 0301 	and.w	r3, r3, #1
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d117      	bne.n	800faca <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800faa6:	7812      	ldrb	r2, [r2, #0]
 800faa8:	b2d2      	uxtb	r2, r2
 800faaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	3b01      	subs	r3, #1
 800fac0:	b29a      	uxth	r2, r3
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fac8:	e094      	b.n	800fbf4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	8bfa      	ldrh	r2, [r7, #30]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d946      	bls.n	800fb66 <HAL_SPI_Receive+0x41a>
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d041      	beq.n	800fb66 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800faee:	7812      	ldrb	r2, [r2, #0]
 800faf0:	b2d2      	uxtb	r2, r2
 800faf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800faf8:	1c5a      	adds	r2, r3, #1
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb0a:	7812      	ldrb	r2, [r2, #0]
 800fb0c:	b2d2      	uxtb	r2, r2
 800fb0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb14:	1c5a      	adds	r2, r3, #1
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb26:	7812      	ldrb	r2, [r2, #0]
 800fb28:	b2d2      	uxtb	r2, r2
 800fb2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb30:	1c5a      	adds	r2, r3, #1
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb42:	7812      	ldrb	r2, [r2, #0]
 800fb44:	b2d2      	uxtb	r2, r2
 800fb46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb4c:	1c5a      	adds	r2, r3, #1
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	3b04      	subs	r3, #4
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fb64:	e046      	b.n	800fbf4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	2b03      	cmp	r3, #3
 800fb70:	d81c      	bhi.n	800fbac <HAL_SPI_Receive+0x460>
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d017      	beq.n	800fbac <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb88:	7812      	ldrb	r2, [r2, #0]
 800fb8a:	b2d2      	uxtb	r2, r2
 800fb8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb92:	1c5a      	adds	r2, r3, #1
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	3b01      	subs	r3, #1
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fbaa:	e023      	b.n	800fbf4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fbac:	f7f9 fa36 	bl	800901c <HAL_GetTick>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d803      	bhi.n	800fbc4 <HAL_SPI_Receive+0x478>
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbc2:	d102      	bne.n	800fbca <HAL_SPI_Receive+0x47e>
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d114      	bne.n	800fbf4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f000 fb6a 	bl	80102a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fbd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2200      	movs	r2, #0
 800fbec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800fbf0:	2303      	movs	r3, #3
 800fbf2:	e019      	b.n	800fc28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f47f af41 	bne.w	800fa84 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fc02:	68f8      	ldr	r0, [r7, #12]
 800fc04:	f000 fb4e 	bl	80102a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2200      	movs	r2, #0
 800fc14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d001      	beq.n	800fc26 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800fc22:	2301      	movs	r3, #1
 800fc24:	e000      	b.n	800fc28 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800fc26:	2300      	movs	r3, #0
  }
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3720      	adds	r7, #32
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b08e      	sub	sp, #56	@ 0x38
 800fc34:	af02      	add	r7, sp, #8
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
 800fc3c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	3320      	adds	r3, #32
 800fc44:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	3330      	adds	r3, #48	@ 0x30
 800fc4c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc52:	095b      	lsrs	r3, r3, #5
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	3301      	adds	r3, #1
 800fc58:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fc5a:	f7f9 f9df 	bl	800901c <HAL_GetTick>
 800fc5e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800fc60:	887b      	ldrh	r3, [r7, #2]
 800fc62:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800fc64:	887b      	ldrh	r3, [r7, #2]
 800fc66:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d001      	beq.n	800fc78 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800fc74:	2302      	movs	r3, #2
 800fc76:	e310      	b.n	801029a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d005      	beq.n	800fc8a <HAL_SPI_TransmitReceive+0x5a>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d002      	beq.n	800fc8a <HAL_SPI_TransmitReceive+0x5a>
 800fc84:	887b      	ldrh	r3, [r7, #2]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d101      	bne.n	800fc8e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e305      	b.n	801029a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d101      	bne.n	800fc9c <HAL_SPI_TransmitReceive+0x6c>
 800fc98:	2302      	movs	r3, #2
 800fc9a:	e2fe      	b.n	801029a <HAL_SPI_TransmitReceive+0x66a>
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2205      	movs	r2, #5
 800fca8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	887a      	ldrh	r2, [r7, #2]
 800fcbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	887a      	ldrh	r2, [r7, #2]
 800fcc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	68ba      	ldr	r2, [r7, #8]
 800fcce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	887a      	ldrh	r2, [r7, #2]
 800fcd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	887a      	ldrh	r2, [r7, #2]
 800fcdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2200      	movs	r2, #0
 800fce4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2200      	movs	r2, #0
 800fcea:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	68da      	ldr	r2, [r3, #12]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800fcfa:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4a70      	ldr	r2, [pc, #448]	@ (800fec4 <HAL_SPI_TransmitReceive+0x294>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d009      	beq.n	800fd1a <HAL_SPI_TransmitReceive+0xea>
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a6f      	ldr	r2, [pc, #444]	@ (800fec8 <HAL_SPI_TransmitReceive+0x298>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d004      	beq.n	800fd1a <HAL_SPI_TransmitReceive+0xea>
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a6d      	ldr	r2, [pc, #436]	@ (800fecc <HAL_SPI_TransmitReceive+0x29c>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d102      	bne.n	800fd20 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800fd1a:	2310      	movs	r3, #16
 800fd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fd1e:	e001      	b.n	800fd24 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800fd20:	2308      	movs	r3, #8
 800fd22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	685a      	ldr	r2, [r3, #4]
 800fd2a:	4b69      	ldr	r3, [pc, #420]	@ (800fed0 <HAL_SPI_TransmitReceive+0x2a0>)
 800fd2c:	4013      	ands	r3, r2
 800fd2e:	8879      	ldrh	r1, [r7, #2]
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	6812      	ldr	r2, [r2, #0]
 800fd34:	430b      	orrs	r3, r1
 800fd36:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f042 0201 	orr.w	r2, r2, #1
 800fd46:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fd50:	d107      	bne.n	800fd62 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fd60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	2b0f      	cmp	r3, #15
 800fd68:	f240 80a2 	bls.w	800feb0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800fd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd6e:	089b      	lsrs	r3, r3, #2
 800fd70:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fd72:	e094      	b.n	800fe9e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	695b      	ldr	r3, [r3, #20]
 800fd7a:	f003 0302 	and.w	r3, r3, #2
 800fd7e:	2b02      	cmp	r3, #2
 800fd80:	d120      	bne.n	800fdc4 <HAL_SPI_TransmitReceive+0x194>
 800fd82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d01d      	beq.n	800fdc4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fd88:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fd8a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd8e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d217      	bcs.n	800fdc4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	6812      	ldr	r2, [r2, #0]
 800fd9e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fda4:	1d1a      	adds	r2, r3, #4
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fdc2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	695b      	ldr	r3, [r3, #20]
 800fdca:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fdcc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d065      	beq.n	800fe9e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	695b      	ldr	r3, [r3, #20]
 800fdd8:	f003 0301 	and.w	r3, r3, #1
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d118      	bne.n	800fe12 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fde8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fdea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdf0:	1d1a      	adds	r2, r3, #4
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	3b01      	subs	r3, #1
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe0e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fe10:	e045      	b.n	800fe9e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fe12:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fe14:	8bfb      	ldrh	r3, [r7, #30]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d21d      	bcs.n	800fe56 <HAL_SPI_TransmitReceive+0x226>
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d018      	beq.n	800fe56 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681a      	ldr	r2, [r3, #0]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fe2e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe34:	1d1a      	adds	r2, r3, #4
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	3b01      	subs	r3, #1
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe52:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fe54:	e023      	b.n	800fe9e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe56:	f7f9 f8e1 	bl	800901c <HAL_GetTick>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	69bb      	ldr	r3, [r7, #24]
 800fe5e:	1ad3      	subs	r3, r2, r3
 800fe60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d803      	bhi.n	800fe6e <HAL_SPI_TransmitReceive+0x23e>
 800fe66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe6c:	d102      	bne.n	800fe74 <HAL_SPI_TransmitReceive+0x244>
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d114      	bne.n	800fe9e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f000 fa15 	bl	80102a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	2200      	movs	r2, #0
 800fe96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800fe9a:	2303      	movs	r3, #3
 800fe9c:	e1fd      	b.n	801029a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fe9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f47f af67 	bne.w	800fd74 <HAL_SPI_TransmitReceive+0x144>
 800fea6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	f47f af63 	bne.w	800fd74 <HAL_SPI_TransmitReceive+0x144>
 800feae:	e1ce      	b.n	801024e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	2b07      	cmp	r3, #7
 800feb6:	f240 81c2 	bls.w	801023e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800feba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800febc:	085b      	lsrs	r3, r3, #1
 800febe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fec0:	e0c9      	b.n	8010056 <HAL_SPI_TransmitReceive+0x426>
 800fec2:	bf00      	nop
 800fec4:	40013000 	.word	0x40013000
 800fec8:	40003800 	.word	0x40003800
 800fecc:	40003c00 	.word	0x40003c00
 800fed0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	695b      	ldr	r3, [r3, #20]
 800feda:	f003 0302 	and.w	r3, r3, #2
 800fede:	2b02      	cmp	r3, #2
 800fee0:	d11f      	bne.n	800ff22 <HAL_SPI_TransmitReceive+0x2f2>
 800fee2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d01c      	beq.n	800ff22 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fee8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800feea:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800feec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feee:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d216      	bcs.n	800ff22 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fef8:	881a      	ldrh	r2, [r3, #0]
 800fefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fefc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff02:	1c9a      	adds	r2, r3, #2
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	3b01      	subs	r3, #1
 800ff12:	b29a      	uxth	r2, r3
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ff20:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	695b      	ldr	r3, [r3, #20]
 800ff28:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ff2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f000 8092 	beq.w	8010056 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	695b      	ldr	r3, [r3, #20]
 800ff38:	f003 0301 	and.w	r3, r3, #1
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d118      	bne.n	800ff72 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff44:	6a3a      	ldr	r2, [r7, #32]
 800ff46:	8812      	ldrh	r2, [r2, #0]
 800ff48:	b292      	uxth	r2, r2
 800ff4a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff50:	1c9a      	adds	r2, r3, #2
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	3b01      	subs	r3, #1
 800ff60:	b29a      	uxth	r2, r3
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ff6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ff70:	e071      	b.n	8010056 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ff72:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ff74:	8bfb      	ldrh	r3, [r7, #30]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d228      	bcs.n	800ffcc <HAL_SPI_TransmitReceive+0x39c>
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d023      	beq.n	800ffcc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff88:	6a3a      	ldr	r2, [r7, #32]
 800ff8a:	8812      	ldrh	r2, [r2, #0]
 800ff8c:	b292      	uxth	r2, r2
 800ff8e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff94:	1c9a      	adds	r2, r3, #2
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff9e:	6a3a      	ldr	r2, [r7, #32]
 800ffa0:	8812      	ldrh	r2, [r2, #0]
 800ffa2:	b292      	uxth	r2, r2
 800ffa4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ffaa:	1c9a      	adds	r2, r3, #2
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	3b02      	subs	r3, #2
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ffc8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ffca:	e044      	b.n	8010056 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ffcc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d11d      	bne.n	801000e <HAL_SPI_TransmitReceive+0x3de>
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d018      	beq.n	801000e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ffe0:	6a3a      	ldr	r2, [r7, #32]
 800ffe2:	8812      	ldrh	r2, [r2, #0]
 800ffe4:	b292      	uxth	r2, r2
 800ffe6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ffec:	1c9a      	adds	r2, r3, #2
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	3b01      	subs	r3, #1
 800fffc:	b29a      	uxth	r2, r3
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801000a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801000c:	e023      	b.n	8010056 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801000e:	f7f9 f805 	bl	800901c <HAL_GetTick>
 8010012:	4602      	mov	r2, r0
 8010014:	69bb      	ldr	r3, [r7, #24]
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801001a:	429a      	cmp	r2, r3
 801001c:	d803      	bhi.n	8010026 <HAL_SPI_TransmitReceive+0x3f6>
 801001e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010024:	d102      	bne.n	801002c <HAL_SPI_TransmitReceive+0x3fc>
 8010026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010028:	2b00      	cmp	r3, #0
 801002a:	d114      	bne.n	8010056 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f000 f939 	bl	80102a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010038:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2201      	movs	r2, #1
 8010046:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2200      	movs	r2, #0
 801004e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8010052:	2303      	movs	r3, #3
 8010054:	e121      	b.n	801029a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010056:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010058:	2b00      	cmp	r3, #0
 801005a:	f47f af3b 	bne.w	800fed4 <HAL_SPI_TransmitReceive+0x2a4>
 801005e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010060:	2b00      	cmp	r3, #0
 8010062:	f47f af37 	bne.w	800fed4 <HAL_SPI_TransmitReceive+0x2a4>
 8010066:	e0f2      	b.n	801024e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	695b      	ldr	r3, [r3, #20]
 801006e:	f003 0302 	and.w	r3, r3, #2
 8010072:	2b02      	cmp	r3, #2
 8010074:	d121      	bne.n	80100ba <HAL_SPI_TransmitReceive+0x48a>
 8010076:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010078:	2b00      	cmp	r3, #0
 801007a:	d01e      	beq.n	80100ba <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801007c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801007e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010082:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010084:	429a      	cmp	r2, r3
 8010086:	d218      	bcs.n	80100ba <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	3320      	adds	r3, #32
 8010092:	7812      	ldrb	r2, [r2, #0]
 8010094:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801009a:	1c5a      	adds	r2, r3, #1
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80100a6:	b29b      	uxth	r3, r3
 80100a8:	3b01      	subs	r3, #1
 80100aa:	b29a      	uxth	r2, r3
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80100b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	695b      	ldr	r3, [r3, #20]
 80100c0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80100c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	f000 80ba 	beq.w	801023e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	695b      	ldr	r3, [r3, #20]
 80100d0:	f003 0301 	and.w	r3, r3, #1
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d11b      	bne.n	8010110 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100e4:	7812      	ldrb	r2, [r2, #0]
 80100e6:	b2d2      	uxtb	r2, r2
 80100e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100ee:	1c5a      	adds	r2, r3, #1
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	3b01      	subs	r3, #1
 80100fe:	b29a      	uxth	r2, r3
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801010c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801010e:	e096      	b.n	801023e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010110:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010112:	8bfb      	ldrh	r3, [r7, #30]
 8010114:	429a      	cmp	r2, r3
 8010116:	d24a      	bcs.n	80101ae <HAL_SPI_TransmitReceive+0x57e>
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801011e:	2b00      	cmp	r3, #0
 8010120:	d045      	beq.n	80101ae <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801012e:	7812      	ldrb	r2, [r2, #0]
 8010130:	b2d2      	uxtb	r2, r2
 8010132:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010138:	1c5a      	adds	r2, r3, #1
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801014a:	7812      	ldrb	r2, [r2, #0]
 801014c:	b2d2      	uxtb	r2, r2
 801014e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010154:	1c5a      	adds	r2, r3, #1
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010166:	7812      	ldrb	r2, [r2, #0]
 8010168:	b2d2      	uxtb	r2, r2
 801016a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010170:	1c5a      	adds	r2, r3, #1
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010182:	7812      	ldrb	r2, [r2, #0]
 8010184:	b2d2      	uxtb	r2, r2
 8010186:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801018c:	1c5a      	adds	r2, r3, #1
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010198:	b29b      	uxth	r3, r3
 801019a:	3b04      	subs	r3, #4
 801019c:	b29a      	uxth	r2, r3
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80101aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80101ac:	e047      	b.n	801023e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80101ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80101b0:	2b03      	cmp	r3, #3
 80101b2:	d820      	bhi.n	80101f6 <HAL_SPI_TransmitReceive+0x5c6>
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d01b      	beq.n	80101f6 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80101ca:	7812      	ldrb	r2, [r2, #0]
 80101cc:	b2d2      	uxtb	r2, r2
 80101ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80101d4:	1c5a      	adds	r2, r3, #1
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	3b01      	subs	r3, #1
 80101e4:	b29a      	uxth	r2, r3
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80101f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80101f4:	e023      	b.n	801023e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101f6:	f7f8 ff11 	bl	800901c <HAL_GetTick>
 80101fa:	4602      	mov	r2, r0
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	1ad3      	subs	r3, r2, r3
 8010200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010202:	429a      	cmp	r2, r3
 8010204:	d803      	bhi.n	801020e <HAL_SPI_TransmitReceive+0x5de>
 8010206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801020c:	d102      	bne.n	8010214 <HAL_SPI_TransmitReceive+0x5e4>
 801020e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010210:	2b00      	cmp	r3, #0
 8010212:	d114      	bne.n	801023e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8010214:	68f8      	ldr	r0, [r7, #12]
 8010216:	f000 f845 	bl	80102a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010220:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2201      	movs	r2, #1
 801022e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2200      	movs	r2, #0
 8010236:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801023a:	2303      	movs	r3, #3
 801023c:	e02d      	b.n	801029a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801023e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010240:	2b00      	cmp	r3, #0
 8010242:	f47f af11 	bne.w	8010068 <HAL_SPI_TransmitReceive+0x438>
 8010246:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010248:	2b00      	cmp	r3, #0
 801024a:	f47f af0d 	bne.w	8010068 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	9300      	str	r3, [sp, #0]
 8010252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010254:	2200      	movs	r2, #0
 8010256:	2108      	movs	r1, #8
 8010258:	68f8      	ldr	r0, [r7, #12]
 801025a:	f000 f8c3 	bl	80103e4 <SPI_WaitOnFlagUntilTimeout>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d007      	beq.n	8010274 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801026a:	f043 0220 	orr.w	r2, r3, #32
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010274:	68f8      	ldr	r0, [r7, #12]
 8010276:	f000 f815 	bl	80102a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2201      	movs	r2, #1
 801027e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2200      	movs	r2, #0
 8010286:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010290:	2b00      	cmp	r3, #0
 8010292:	d001      	beq.n	8010298 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8010294:	2301      	movs	r3, #1
 8010296:	e000      	b.n	801029a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8010298:	2300      	movs	r3, #0
  }
}
 801029a:	4618      	mov	r0, r3
 801029c:	3730      	adds	r7, #48	@ 0x30
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop

080102a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b085      	sub	sp, #20
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	695b      	ldr	r3, [r3, #20]
 80102b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	699a      	ldr	r2, [r3, #24]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	f042 0208 	orr.w	r2, r2, #8
 80102c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	699a      	ldr	r2, [r3, #24]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f042 0210 	orr.w	r2, r2, #16
 80102d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f022 0201 	bic.w	r2, r2, #1
 80102e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	6919      	ldr	r1, [r3, #16]
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	4b3c      	ldr	r3, [pc, #240]	@ (80103e0 <SPI_CloseTransfer+0x13c>)
 80102f0:	400b      	ands	r3, r1
 80102f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	689a      	ldr	r2, [r3, #8]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010302:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b04      	cmp	r3, #4
 801030e:	d014      	beq.n	801033a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f003 0320 	and.w	r3, r3, #32
 8010316:	2b00      	cmp	r3, #0
 8010318:	d00f      	beq.n	801033a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010320:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	699a      	ldr	r2, [r3, #24]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f042 0220 	orr.w	r2, r2, #32
 8010338:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010340:	b2db      	uxtb	r3, r3
 8010342:	2b03      	cmp	r3, #3
 8010344:	d014      	beq.n	8010370 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801034c:	2b00      	cmp	r3, #0
 801034e:	d00f      	beq.n	8010370 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010356:	f043 0204 	orr.w	r2, r3, #4
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	699a      	ldr	r2, [r3, #24]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801036e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010376:	2b00      	cmp	r3, #0
 8010378:	d00f      	beq.n	801039a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010380:	f043 0201 	orr.w	r2, r3, #1
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	699a      	ldr	r2, [r3, #24]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010398:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00f      	beq.n	80103c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80103aa:	f043 0208 	orr.w	r2, r3, #8
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	699a      	ldr	r2, [r3, #24]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80103c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80103d4:	bf00      	nop
 80103d6:	3714      	adds	r7, #20
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr
 80103e0:	fffffc90 	.word	0xfffffc90

080103e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	60b9      	str	r1, [r7, #8]
 80103ee:	603b      	str	r3, [r7, #0]
 80103f0:	4613      	mov	r3, r2
 80103f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80103f4:	e010      	b.n	8010418 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103f6:	f7f8 fe11 	bl	800901c <HAL_GetTick>
 80103fa:	4602      	mov	r2, r0
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	1ad3      	subs	r3, r2, r3
 8010400:	683a      	ldr	r2, [r7, #0]
 8010402:	429a      	cmp	r2, r3
 8010404:	d803      	bhi.n	801040e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	f1b3 3fff 	cmp.w	r3, #4294967295
 801040c:	d102      	bne.n	8010414 <SPI_WaitOnFlagUntilTimeout+0x30>
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d101      	bne.n	8010418 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010414:	2303      	movs	r3, #3
 8010416:	e00f      	b.n	8010438 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	695a      	ldr	r2, [r3, #20]
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	4013      	ands	r3, r2
 8010422:	68ba      	ldr	r2, [r7, #8]
 8010424:	429a      	cmp	r2, r3
 8010426:	bf0c      	ite	eq
 8010428:	2301      	moveq	r3, #1
 801042a:	2300      	movne	r3, #0
 801042c:	b2db      	uxtb	r3, r3
 801042e:	461a      	mov	r2, r3
 8010430:	79fb      	ldrb	r3, [r7, #7]
 8010432:	429a      	cmp	r2, r3
 8010434:	d0df      	beq.n	80103f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010436:	2300      	movs	r3, #0
}
 8010438:	4618      	mov	r0, r3
 801043a:	3710      	adds	r7, #16
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801044c:	095b      	lsrs	r3, r3, #5
 801044e:	3301      	adds	r3, #1
 8010450:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	3301      	adds	r3, #1
 8010458:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	3307      	adds	r3, #7
 801045e:	08db      	lsrs	r3, r3, #3
 8010460:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	68fa      	ldr	r2, [r7, #12]
 8010466:	fb02 f303 	mul.w	r3, r2, r3
}
 801046a:	4618      	mov	r0, r3
 801046c:	3714      	adds	r7, #20
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr

08010476 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010476:	b580      	push	{r7, lr}
 8010478:	b082      	sub	sp, #8
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d101      	bne.n	8010488 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010484:	2301      	movs	r3, #1
 8010486:	e042      	b.n	801050e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801048e:	2b00      	cmp	r3, #0
 8010490:	d106      	bne.n	80104a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7f8 fa12 	bl	80088c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2224      	movs	r2, #36	@ 0x24
 80104a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f022 0201 	bic.w	r2, r2, #1
 80104b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d002      	beq.n	80104c6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 fe95 	bl	80111f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 f826 	bl	8010518 <UART_SetConfig>
 80104cc:	4603      	mov	r3, r0
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d101      	bne.n	80104d6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80104d2:	2301      	movs	r3, #1
 80104d4:	e01b      	b.n	801050e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	685a      	ldr	r2, [r3, #4]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80104e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	689a      	ldr	r2, [r3, #8]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80104f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f042 0201 	orr.w	r2, r2, #1
 8010504:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 ff14 	bl	8011334 <UART_CheckIdleState>
 801050c:	4603      	mov	r3, r0
}
 801050e:	4618      	mov	r0, r3
 8010510:	3708      	adds	r7, #8
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
	...

08010518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801051c:	b092      	sub	sp, #72	@ 0x48
 801051e:	af00      	add	r7, sp, #0
 8010520:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010522:	2300      	movs	r3, #0
 8010524:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	689a      	ldr	r2, [r3, #8]
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	431a      	orrs	r2, r3
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	695b      	ldr	r3, [r3, #20]
 8010536:	431a      	orrs	r2, r3
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	69db      	ldr	r3, [r3, #28]
 801053c:	4313      	orrs	r3, r2
 801053e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	4bbe      	ldr	r3, [pc, #760]	@ (8010840 <UART_SetConfig+0x328>)
 8010548:	4013      	ands	r3, r2
 801054a:	697a      	ldr	r2, [r7, #20]
 801054c:	6812      	ldr	r2, [r2, #0]
 801054e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010550:	430b      	orrs	r3, r1
 8010552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	68da      	ldr	r2, [r3, #12]
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	430a      	orrs	r2, r1
 8010568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	699b      	ldr	r3, [r3, #24]
 801056e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	4ab3      	ldr	r2, [pc, #716]	@ (8010844 <UART_SetConfig+0x32c>)
 8010576:	4293      	cmp	r3, r2
 8010578:	d004      	beq.n	8010584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	6a1b      	ldr	r3, [r3, #32]
 801057e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010580:	4313      	orrs	r3, r2
 8010582:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	689a      	ldr	r2, [r3, #8]
 801058a:	4baf      	ldr	r3, [pc, #700]	@ (8010848 <UART_SetConfig+0x330>)
 801058c:	4013      	ands	r3, r2
 801058e:	697a      	ldr	r2, [r7, #20]
 8010590:	6812      	ldr	r2, [r2, #0]
 8010592:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010594:	430b      	orrs	r3, r1
 8010596:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801059e:	f023 010f 	bic.w	r1, r3, #15
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	430a      	orrs	r2, r1
 80105ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	4aa6      	ldr	r2, [pc, #664]	@ (801084c <UART_SetConfig+0x334>)
 80105b4:	4293      	cmp	r3, r2
 80105b6:	d177      	bne.n	80106a8 <UART_SetConfig+0x190>
 80105b8:	4ba5      	ldr	r3, [pc, #660]	@ (8010850 <UART_SetConfig+0x338>)
 80105ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80105c0:	2b28      	cmp	r3, #40	@ 0x28
 80105c2:	d86d      	bhi.n	80106a0 <UART_SetConfig+0x188>
 80105c4:	a201      	add	r2, pc, #4	@ (adr r2, 80105cc <UART_SetConfig+0xb4>)
 80105c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ca:	bf00      	nop
 80105cc:	08010671 	.word	0x08010671
 80105d0:	080106a1 	.word	0x080106a1
 80105d4:	080106a1 	.word	0x080106a1
 80105d8:	080106a1 	.word	0x080106a1
 80105dc:	080106a1 	.word	0x080106a1
 80105e0:	080106a1 	.word	0x080106a1
 80105e4:	080106a1 	.word	0x080106a1
 80105e8:	080106a1 	.word	0x080106a1
 80105ec:	08010679 	.word	0x08010679
 80105f0:	080106a1 	.word	0x080106a1
 80105f4:	080106a1 	.word	0x080106a1
 80105f8:	080106a1 	.word	0x080106a1
 80105fc:	080106a1 	.word	0x080106a1
 8010600:	080106a1 	.word	0x080106a1
 8010604:	080106a1 	.word	0x080106a1
 8010608:	080106a1 	.word	0x080106a1
 801060c:	08010681 	.word	0x08010681
 8010610:	080106a1 	.word	0x080106a1
 8010614:	080106a1 	.word	0x080106a1
 8010618:	080106a1 	.word	0x080106a1
 801061c:	080106a1 	.word	0x080106a1
 8010620:	080106a1 	.word	0x080106a1
 8010624:	080106a1 	.word	0x080106a1
 8010628:	080106a1 	.word	0x080106a1
 801062c:	08010689 	.word	0x08010689
 8010630:	080106a1 	.word	0x080106a1
 8010634:	080106a1 	.word	0x080106a1
 8010638:	080106a1 	.word	0x080106a1
 801063c:	080106a1 	.word	0x080106a1
 8010640:	080106a1 	.word	0x080106a1
 8010644:	080106a1 	.word	0x080106a1
 8010648:	080106a1 	.word	0x080106a1
 801064c:	08010691 	.word	0x08010691
 8010650:	080106a1 	.word	0x080106a1
 8010654:	080106a1 	.word	0x080106a1
 8010658:	080106a1 	.word	0x080106a1
 801065c:	080106a1 	.word	0x080106a1
 8010660:	080106a1 	.word	0x080106a1
 8010664:	080106a1 	.word	0x080106a1
 8010668:	080106a1 	.word	0x080106a1
 801066c:	08010699 	.word	0x08010699
 8010670:	2301      	movs	r3, #1
 8010672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010676:	e326      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010678:	2304      	movs	r3, #4
 801067a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801067e:	e322      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010680:	2308      	movs	r3, #8
 8010682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010686:	e31e      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010688:	2310      	movs	r3, #16
 801068a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801068e:	e31a      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010690:	2320      	movs	r3, #32
 8010692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010696:	e316      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010698:	2340      	movs	r3, #64	@ 0x40
 801069a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801069e:	e312      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80106a0:	2380      	movs	r3, #128	@ 0x80
 80106a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106a6:	e30e      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4a69      	ldr	r2, [pc, #420]	@ (8010854 <UART_SetConfig+0x33c>)
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d130      	bne.n	8010714 <UART_SetConfig+0x1fc>
 80106b2:	4b67      	ldr	r3, [pc, #412]	@ (8010850 <UART_SetConfig+0x338>)
 80106b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106b6:	f003 0307 	and.w	r3, r3, #7
 80106ba:	2b05      	cmp	r3, #5
 80106bc:	d826      	bhi.n	801070c <UART_SetConfig+0x1f4>
 80106be:	a201      	add	r2, pc, #4	@ (adr r2, 80106c4 <UART_SetConfig+0x1ac>)
 80106c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106c4:	080106dd 	.word	0x080106dd
 80106c8:	080106e5 	.word	0x080106e5
 80106cc:	080106ed 	.word	0x080106ed
 80106d0:	080106f5 	.word	0x080106f5
 80106d4:	080106fd 	.word	0x080106fd
 80106d8:	08010705 	.word	0x08010705
 80106dc:	2300      	movs	r3, #0
 80106de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106e2:	e2f0      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80106e4:	2304      	movs	r3, #4
 80106e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ea:	e2ec      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80106ec:	2308      	movs	r3, #8
 80106ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106f2:	e2e8      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80106f4:	2310      	movs	r3, #16
 80106f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106fa:	e2e4      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80106fc:	2320      	movs	r3, #32
 80106fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010702:	e2e0      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010704:	2340      	movs	r3, #64	@ 0x40
 8010706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801070a:	e2dc      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 801070c:	2380      	movs	r3, #128	@ 0x80
 801070e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010712:	e2d8      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4a4f      	ldr	r2, [pc, #316]	@ (8010858 <UART_SetConfig+0x340>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d130      	bne.n	8010780 <UART_SetConfig+0x268>
 801071e:	4b4c      	ldr	r3, [pc, #304]	@ (8010850 <UART_SetConfig+0x338>)
 8010720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010722:	f003 0307 	and.w	r3, r3, #7
 8010726:	2b05      	cmp	r3, #5
 8010728:	d826      	bhi.n	8010778 <UART_SetConfig+0x260>
 801072a:	a201      	add	r2, pc, #4	@ (adr r2, 8010730 <UART_SetConfig+0x218>)
 801072c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010730:	08010749 	.word	0x08010749
 8010734:	08010751 	.word	0x08010751
 8010738:	08010759 	.word	0x08010759
 801073c:	08010761 	.word	0x08010761
 8010740:	08010769 	.word	0x08010769
 8010744:	08010771 	.word	0x08010771
 8010748:	2300      	movs	r3, #0
 801074a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801074e:	e2ba      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010750:	2304      	movs	r3, #4
 8010752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010756:	e2b6      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010758:	2308      	movs	r3, #8
 801075a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801075e:	e2b2      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010760:	2310      	movs	r3, #16
 8010762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010766:	e2ae      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010768:	2320      	movs	r3, #32
 801076a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801076e:	e2aa      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010770:	2340      	movs	r3, #64	@ 0x40
 8010772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010776:	e2a6      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010778:	2380      	movs	r3, #128	@ 0x80
 801077a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801077e:	e2a2      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a35      	ldr	r2, [pc, #212]	@ (801085c <UART_SetConfig+0x344>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d130      	bne.n	80107ec <UART_SetConfig+0x2d4>
 801078a:	4b31      	ldr	r3, [pc, #196]	@ (8010850 <UART_SetConfig+0x338>)
 801078c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801078e:	f003 0307 	and.w	r3, r3, #7
 8010792:	2b05      	cmp	r3, #5
 8010794:	d826      	bhi.n	80107e4 <UART_SetConfig+0x2cc>
 8010796:	a201      	add	r2, pc, #4	@ (adr r2, 801079c <UART_SetConfig+0x284>)
 8010798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801079c:	080107b5 	.word	0x080107b5
 80107a0:	080107bd 	.word	0x080107bd
 80107a4:	080107c5 	.word	0x080107c5
 80107a8:	080107cd 	.word	0x080107cd
 80107ac:	080107d5 	.word	0x080107d5
 80107b0:	080107dd 	.word	0x080107dd
 80107b4:	2300      	movs	r3, #0
 80107b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ba:	e284      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80107bc:	2304      	movs	r3, #4
 80107be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107c2:	e280      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80107c4:	2308      	movs	r3, #8
 80107c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ca:	e27c      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80107cc:	2310      	movs	r3, #16
 80107ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107d2:	e278      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80107d4:	2320      	movs	r3, #32
 80107d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107da:	e274      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80107dc:	2340      	movs	r3, #64	@ 0x40
 80107de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107e2:	e270      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80107e4:	2380      	movs	r3, #128	@ 0x80
 80107e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ea:	e26c      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4a1b      	ldr	r2, [pc, #108]	@ (8010860 <UART_SetConfig+0x348>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d142      	bne.n	801087c <UART_SetConfig+0x364>
 80107f6:	4b16      	ldr	r3, [pc, #88]	@ (8010850 <UART_SetConfig+0x338>)
 80107f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107fa:	f003 0307 	and.w	r3, r3, #7
 80107fe:	2b05      	cmp	r3, #5
 8010800:	d838      	bhi.n	8010874 <UART_SetConfig+0x35c>
 8010802:	a201      	add	r2, pc, #4	@ (adr r2, 8010808 <UART_SetConfig+0x2f0>)
 8010804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010808:	08010821 	.word	0x08010821
 801080c:	08010829 	.word	0x08010829
 8010810:	08010831 	.word	0x08010831
 8010814:	08010839 	.word	0x08010839
 8010818:	08010865 	.word	0x08010865
 801081c:	0801086d 	.word	0x0801086d
 8010820:	2300      	movs	r3, #0
 8010822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010826:	e24e      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010828:	2304      	movs	r3, #4
 801082a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801082e:	e24a      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010830:	2308      	movs	r3, #8
 8010832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010836:	e246      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010838:	2310      	movs	r3, #16
 801083a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801083e:	e242      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010840:	cfff69f3 	.word	0xcfff69f3
 8010844:	58000c00 	.word	0x58000c00
 8010848:	11fff4ff 	.word	0x11fff4ff
 801084c:	40011000 	.word	0x40011000
 8010850:	58024400 	.word	0x58024400
 8010854:	40004400 	.word	0x40004400
 8010858:	40004800 	.word	0x40004800
 801085c:	40004c00 	.word	0x40004c00
 8010860:	40005000 	.word	0x40005000
 8010864:	2320      	movs	r3, #32
 8010866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801086a:	e22c      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 801086c:	2340      	movs	r3, #64	@ 0x40
 801086e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010872:	e228      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010874:	2380      	movs	r3, #128	@ 0x80
 8010876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801087a:	e224      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	4ab1      	ldr	r2, [pc, #708]	@ (8010b48 <UART_SetConfig+0x630>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d176      	bne.n	8010974 <UART_SetConfig+0x45c>
 8010886:	4bb1      	ldr	r3, [pc, #708]	@ (8010b4c <UART_SetConfig+0x634>)
 8010888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801088a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801088e:	2b28      	cmp	r3, #40	@ 0x28
 8010890:	d86c      	bhi.n	801096c <UART_SetConfig+0x454>
 8010892:	a201      	add	r2, pc, #4	@ (adr r2, 8010898 <UART_SetConfig+0x380>)
 8010894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010898:	0801093d 	.word	0x0801093d
 801089c:	0801096d 	.word	0x0801096d
 80108a0:	0801096d 	.word	0x0801096d
 80108a4:	0801096d 	.word	0x0801096d
 80108a8:	0801096d 	.word	0x0801096d
 80108ac:	0801096d 	.word	0x0801096d
 80108b0:	0801096d 	.word	0x0801096d
 80108b4:	0801096d 	.word	0x0801096d
 80108b8:	08010945 	.word	0x08010945
 80108bc:	0801096d 	.word	0x0801096d
 80108c0:	0801096d 	.word	0x0801096d
 80108c4:	0801096d 	.word	0x0801096d
 80108c8:	0801096d 	.word	0x0801096d
 80108cc:	0801096d 	.word	0x0801096d
 80108d0:	0801096d 	.word	0x0801096d
 80108d4:	0801096d 	.word	0x0801096d
 80108d8:	0801094d 	.word	0x0801094d
 80108dc:	0801096d 	.word	0x0801096d
 80108e0:	0801096d 	.word	0x0801096d
 80108e4:	0801096d 	.word	0x0801096d
 80108e8:	0801096d 	.word	0x0801096d
 80108ec:	0801096d 	.word	0x0801096d
 80108f0:	0801096d 	.word	0x0801096d
 80108f4:	0801096d 	.word	0x0801096d
 80108f8:	08010955 	.word	0x08010955
 80108fc:	0801096d 	.word	0x0801096d
 8010900:	0801096d 	.word	0x0801096d
 8010904:	0801096d 	.word	0x0801096d
 8010908:	0801096d 	.word	0x0801096d
 801090c:	0801096d 	.word	0x0801096d
 8010910:	0801096d 	.word	0x0801096d
 8010914:	0801096d 	.word	0x0801096d
 8010918:	0801095d 	.word	0x0801095d
 801091c:	0801096d 	.word	0x0801096d
 8010920:	0801096d 	.word	0x0801096d
 8010924:	0801096d 	.word	0x0801096d
 8010928:	0801096d 	.word	0x0801096d
 801092c:	0801096d 	.word	0x0801096d
 8010930:	0801096d 	.word	0x0801096d
 8010934:	0801096d 	.word	0x0801096d
 8010938:	08010965 	.word	0x08010965
 801093c:	2301      	movs	r3, #1
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010942:	e1c0      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010944:	2304      	movs	r3, #4
 8010946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801094a:	e1bc      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 801094c:	2308      	movs	r3, #8
 801094e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010952:	e1b8      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010954:	2310      	movs	r3, #16
 8010956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801095a:	e1b4      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 801095c:	2320      	movs	r3, #32
 801095e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010962:	e1b0      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010964:	2340      	movs	r3, #64	@ 0x40
 8010966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801096a:	e1ac      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 801096c:	2380      	movs	r3, #128	@ 0x80
 801096e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010972:	e1a8      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4a75      	ldr	r2, [pc, #468]	@ (8010b50 <UART_SetConfig+0x638>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d130      	bne.n	80109e0 <UART_SetConfig+0x4c8>
 801097e:	4b73      	ldr	r3, [pc, #460]	@ (8010b4c <UART_SetConfig+0x634>)
 8010980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010982:	f003 0307 	and.w	r3, r3, #7
 8010986:	2b05      	cmp	r3, #5
 8010988:	d826      	bhi.n	80109d8 <UART_SetConfig+0x4c0>
 801098a:	a201      	add	r2, pc, #4	@ (adr r2, 8010990 <UART_SetConfig+0x478>)
 801098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010990:	080109a9 	.word	0x080109a9
 8010994:	080109b1 	.word	0x080109b1
 8010998:	080109b9 	.word	0x080109b9
 801099c:	080109c1 	.word	0x080109c1
 80109a0:	080109c9 	.word	0x080109c9
 80109a4:	080109d1 	.word	0x080109d1
 80109a8:	2300      	movs	r3, #0
 80109aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ae:	e18a      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80109b0:	2304      	movs	r3, #4
 80109b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109b6:	e186      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80109b8:	2308      	movs	r3, #8
 80109ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109be:	e182      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80109c0:	2310      	movs	r3, #16
 80109c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109c6:	e17e      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80109c8:	2320      	movs	r3, #32
 80109ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ce:	e17a      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80109d0:	2340      	movs	r3, #64	@ 0x40
 80109d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109d6:	e176      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80109d8:	2380      	movs	r3, #128	@ 0x80
 80109da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109de:	e172      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a5b      	ldr	r2, [pc, #364]	@ (8010b54 <UART_SetConfig+0x63c>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d130      	bne.n	8010a4c <UART_SetConfig+0x534>
 80109ea:	4b58      	ldr	r3, [pc, #352]	@ (8010b4c <UART_SetConfig+0x634>)
 80109ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109ee:	f003 0307 	and.w	r3, r3, #7
 80109f2:	2b05      	cmp	r3, #5
 80109f4:	d826      	bhi.n	8010a44 <UART_SetConfig+0x52c>
 80109f6:	a201      	add	r2, pc, #4	@ (adr r2, 80109fc <UART_SetConfig+0x4e4>)
 80109f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109fc:	08010a15 	.word	0x08010a15
 8010a00:	08010a1d 	.word	0x08010a1d
 8010a04:	08010a25 	.word	0x08010a25
 8010a08:	08010a2d 	.word	0x08010a2d
 8010a0c:	08010a35 	.word	0x08010a35
 8010a10:	08010a3d 	.word	0x08010a3d
 8010a14:	2300      	movs	r3, #0
 8010a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a1a:	e154      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010a1c:	2304      	movs	r3, #4
 8010a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a22:	e150      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010a24:	2308      	movs	r3, #8
 8010a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a2a:	e14c      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010a2c:	2310      	movs	r3, #16
 8010a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a32:	e148      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010a34:	2320      	movs	r3, #32
 8010a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a3a:	e144      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010a3c:	2340      	movs	r3, #64	@ 0x40
 8010a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a42:	e140      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010a44:	2380      	movs	r3, #128	@ 0x80
 8010a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a4a:	e13c      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a41      	ldr	r2, [pc, #260]	@ (8010b58 <UART_SetConfig+0x640>)
 8010a52:	4293      	cmp	r3, r2
 8010a54:	f040 8082 	bne.w	8010b5c <UART_SetConfig+0x644>
 8010a58:	4b3c      	ldr	r3, [pc, #240]	@ (8010b4c <UART_SetConfig+0x634>)
 8010a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010a60:	2b28      	cmp	r3, #40	@ 0x28
 8010a62:	d86d      	bhi.n	8010b40 <UART_SetConfig+0x628>
 8010a64:	a201      	add	r2, pc, #4	@ (adr r2, 8010a6c <UART_SetConfig+0x554>)
 8010a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a6a:	bf00      	nop
 8010a6c:	08010b11 	.word	0x08010b11
 8010a70:	08010b41 	.word	0x08010b41
 8010a74:	08010b41 	.word	0x08010b41
 8010a78:	08010b41 	.word	0x08010b41
 8010a7c:	08010b41 	.word	0x08010b41
 8010a80:	08010b41 	.word	0x08010b41
 8010a84:	08010b41 	.word	0x08010b41
 8010a88:	08010b41 	.word	0x08010b41
 8010a8c:	08010b19 	.word	0x08010b19
 8010a90:	08010b41 	.word	0x08010b41
 8010a94:	08010b41 	.word	0x08010b41
 8010a98:	08010b41 	.word	0x08010b41
 8010a9c:	08010b41 	.word	0x08010b41
 8010aa0:	08010b41 	.word	0x08010b41
 8010aa4:	08010b41 	.word	0x08010b41
 8010aa8:	08010b41 	.word	0x08010b41
 8010aac:	08010b21 	.word	0x08010b21
 8010ab0:	08010b41 	.word	0x08010b41
 8010ab4:	08010b41 	.word	0x08010b41
 8010ab8:	08010b41 	.word	0x08010b41
 8010abc:	08010b41 	.word	0x08010b41
 8010ac0:	08010b41 	.word	0x08010b41
 8010ac4:	08010b41 	.word	0x08010b41
 8010ac8:	08010b41 	.word	0x08010b41
 8010acc:	08010b29 	.word	0x08010b29
 8010ad0:	08010b41 	.word	0x08010b41
 8010ad4:	08010b41 	.word	0x08010b41
 8010ad8:	08010b41 	.word	0x08010b41
 8010adc:	08010b41 	.word	0x08010b41
 8010ae0:	08010b41 	.word	0x08010b41
 8010ae4:	08010b41 	.word	0x08010b41
 8010ae8:	08010b41 	.word	0x08010b41
 8010aec:	08010b31 	.word	0x08010b31
 8010af0:	08010b41 	.word	0x08010b41
 8010af4:	08010b41 	.word	0x08010b41
 8010af8:	08010b41 	.word	0x08010b41
 8010afc:	08010b41 	.word	0x08010b41
 8010b00:	08010b41 	.word	0x08010b41
 8010b04:	08010b41 	.word	0x08010b41
 8010b08:	08010b41 	.word	0x08010b41
 8010b0c:	08010b39 	.word	0x08010b39
 8010b10:	2301      	movs	r3, #1
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b16:	e0d6      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010b18:	2304      	movs	r3, #4
 8010b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b1e:	e0d2      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010b20:	2308      	movs	r3, #8
 8010b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b26:	e0ce      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010b28:	2310      	movs	r3, #16
 8010b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b2e:	e0ca      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010b30:	2320      	movs	r3, #32
 8010b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b36:	e0c6      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010b38:	2340      	movs	r3, #64	@ 0x40
 8010b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b3e:	e0c2      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010b40:	2380      	movs	r3, #128	@ 0x80
 8010b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b46:	e0be      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010b48:	40011400 	.word	0x40011400
 8010b4c:	58024400 	.word	0x58024400
 8010b50:	40007800 	.word	0x40007800
 8010b54:	40007c00 	.word	0x40007c00
 8010b58:	40011800 	.word	0x40011800
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4aad      	ldr	r2, [pc, #692]	@ (8010e18 <UART_SetConfig+0x900>)
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d176      	bne.n	8010c54 <UART_SetConfig+0x73c>
 8010b66:	4bad      	ldr	r3, [pc, #692]	@ (8010e1c <UART_SetConfig+0x904>)
 8010b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010b6e:	2b28      	cmp	r3, #40	@ 0x28
 8010b70:	d86c      	bhi.n	8010c4c <UART_SetConfig+0x734>
 8010b72:	a201      	add	r2, pc, #4	@ (adr r2, 8010b78 <UART_SetConfig+0x660>)
 8010b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b78:	08010c1d 	.word	0x08010c1d
 8010b7c:	08010c4d 	.word	0x08010c4d
 8010b80:	08010c4d 	.word	0x08010c4d
 8010b84:	08010c4d 	.word	0x08010c4d
 8010b88:	08010c4d 	.word	0x08010c4d
 8010b8c:	08010c4d 	.word	0x08010c4d
 8010b90:	08010c4d 	.word	0x08010c4d
 8010b94:	08010c4d 	.word	0x08010c4d
 8010b98:	08010c25 	.word	0x08010c25
 8010b9c:	08010c4d 	.word	0x08010c4d
 8010ba0:	08010c4d 	.word	0x08010c4d
 8010ba4:	08010c4d 	.word	0x08010c4d
 8010ba8:	08010c4d 	.word	0x08010c4d
 8010bac:	08010c4d 	.word	0x08010c4d
 8010bb0:	08010c4d 	.word	0x08010c4d
 8010bb4:	08010c4d 	.word	0x08010c4d
 8010bb8:	08010c2d 	.word	0x08010c2d
 8010bbc:	08010c4d 	.word	0x08010c4d
 8010bc0:	08010c4d 	.word	0x08010c4d
 8010bc4:	08010c4d 	.word	0x08010c4d
 8010bc8:	08010c4d 	.word	0x08010c4d
 8010bcc:	08010c4d 	.word	0x08010c4d
 8010bd0:	08010c4d 	.word	0x08010c4d
 8010bd4:	08010c4d 	.word	0x08010c4d
 8010bd8:	08010c35 	.word	0x08010c35
 8010bdc:	08010c4d 	.word	0x08010c4d
 8010be0:	08010c4d 	.word	0x08010c4d
 8010be4:	08010c4d 	.word	0x08010c4d
 8010be8:	08010c4d 	.word	0x08010c4d
 8010bec:	08010c4d 	.word	0x08010c4d
 8010bf0:	08010c4d 	.word	0x08010c4d
 8010bf4:	08010c4d 	.word	0x08010c4d
 8010bf8:	08010c3d 	.word	0x08010c3d
 8010bfc:	08010c4d 	.word	0x08010c4d
 8010c00:	08010c4d 	.word	0x08010c4d
 8010c04:	08010c4d 	.word	0x08010c4d
 8010c08:	08010c4d 	.word	0x08010c4d
 8010c0c:	08010c4d 	.word	0x08010c4d
 8010c10:	08010c4d 	.word	0x08010c4d
 8010c14:	08010c4d 	.word	0x08010c4d
 8010c18:	08010c45 	.word	0x08010c45
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c22:	e050      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010c24:	2304      	movs	r3, #4
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c2a:	e04c      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010c2c:	2308      	movs	r3, #8
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c32:	e048      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010c34:	2310      	movs	r3, #16
 8010c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c3a:	e044      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010c3c:	2320      	movs	r3, #32
 8010c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c42:	e040      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010c44:	2340      	movs	r3, #64	@ 0x40
 8010c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c4a:	e03c      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010c4c:	2380      	movs	r3, #128	@ 0x80
 8010c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c52:	e038      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4a71      	ldr	r2, [pc, #452]	@ (8010e20 <UART_SetConfig+0x908>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d130      	bne.n	8010cc0 <UART_SetConfig+0x7a8>
 8010c5e:	4b6f      	ldr	r3, [pc, #444]	@ (8010e1c <UART_SetConfig+0x904>)
 8010c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c62:	f003 0307 	and.w	r3, r3, #7
 8010c66:	2b05      	cmp	r3, #5
 8010c68:	d826      	bhi.n	8010cb8 <UART_SetConfig+0x7a0>
 8010c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8010c70 <UART_SetConfig+0x758>)
 8010c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c70:	08010c89 	.word	0x08010c89
 8010c74:	08010c91 	.word	0x08010c91
 8010c78:	08010c99 	.word	0x08010c99
 8010c7c:	08010ca1 	.word	0x08010ca1
 8010c80:	08010ca9 	.word	0x08010ca9
 8010c84:	08010cb1 	.word	0x08010cb1
 8010c88:	2302      	movs	r3, #2
 8010c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c8e:	e01a      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010c90:	2304      	movs	r3, #4
 8010c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c96:	e016      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010c98:	2308      	movs	r3, #8
 8010c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c9e:	e012      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010ca0:	2310      	movs	r3, #16
 8010ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ca6:	e00e      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010ca8:	2320      	movs	r3, #32
 8010caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cae:	e00a      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010cb0:	2340      	movs	r3, #64	@ 0x40
 8010cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cb6:	e006      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010cb8:	2380      	movs	r3, #128	@ 0x80
 8010cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cbe:	e002      	b.n	8010cc6 <UART_SetConfig+0x7ae>
 8010cc0:	2380      	movs	r3, #128	@ 0x80
 8010cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	4a55      	ldr	r2, [pc, #340]	@ (8010e20 <UART_SetConfig+0x908>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	f040 80f8 	bne.w	8010ec2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010cd2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010cd6:	2b20      	cmp	r3, #32
 8010cd8:	dc46      	bgt.n	8010d68 <UART_SetConfig+0x850>
 8010cda:	2b02      	cmp	r3, #2
 8010cdc:	db75      	blt.n	8010dca <UART_SetConfig+0x8b2>
 8010cde:	3b02      	subs	r3, #2
 8010ce0:	2b1e      	cmp	r3, #30
 8010ce2:	d872      	bhi.n	8010dca <UART_SetConfig+0x8b2>
 8010ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8010cec <UART_SetConfig+0x7d4>)
 8010ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cea:	bf00      	nop
 8010cec:	08010d6f 	.word	0x08010d6f
 8010cf0:	08010dcb 	.word	0x08010dcb
 8010cf4:	08010d77 	.word	0x08010d77
 8010cf8:	08010dcb 	.word	0x08010dcb
 8010cfc:	08010dcb 	.word	0x08010dcb
 8010d00:	08010dcb 	.word	0x08010dcb
 8010d04:	08010d87 	.word	0x08010d87
 8010d08:	08010dcb 	.word	0x08010dcb
 8010d0c:	08010dcb 	.word	0x08010dcb
 8010d10:	08010dcb 	.word	0x08010dcb
 8010d14:	08010dcb 	.word	0x08010dcb
 8010d18:	08010dcb 	.word	0x08010dcb
 8010d1c:	08010dcb 	.word	0x08010dcb
 8010d20:	08010dcb 	.word	0x08010dcb
 8010d24:	08010d97 	.word	0x08010d97
 8010d28:	08010dcb 	.word	0x08010dcb
 8010d2c:	08010dcb 	.word	0x08010dcb
 8010d30:	08010dcb 	.word	0x08010dcb
 8010d34:	08010dcb 	.word	0x08010dcb
 8010d38:	08010dcb 	.word	0x08010dcb
 8010d3c:	08010dcb 	.word	0x08010dcb
 8010d40:	08010dcb 	.word	0x08010dcb
 8010d44:	08010dcb 	.word	0x08010dcb
 8010d48:	08010dcb 	.word	0x08010dcb
 8010d4c:	08010dcb 	.word	0x08010dcb
 8010d50:	08010dcb 	.word	0x08010dcb
 8010d54:	08010dcb 	.word	0x08010dcb
 8010d58:	08010dcb 	.word	0x08010dcb
 8010d5c:	08010dcb 	.word	0x08010dcb
 8010d60:	08010dcb 	.word	0x08010dcb
 8010d64:	08010dbd 	.word	0x08010dbd
 8010d68:	2b40      	cmp	r3, #64	@ 0x40
 8010d6a:	d02a      	beq.n	8010dc2 <UART_SetConfig+0x8aa>
 8010d6c:	e02d      	b.n	8010dca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010d6e:	f7fc f8b5 	bl	800cedc <HAL_RCCEx_GetD3PCLK1Freq>
 8010d72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010d74:	e02f      	b.n	8010dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fc f8c4 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d84:	e027      	b.n	8010dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d86:	f107 0318 	add.w	r3, r7, #24
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fc fa10 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d94:	e01f      	b.n	8010dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d96:	4b21      	ldr	r3, [pc, #132]	@ (8010e1c <UART_SetConfig+0x904>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f003 0320 	and.w	r3, r3, #32
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d009      	beq.n	8010db6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010da2:	4b1e      	ldr	r3, [pc, #120]	@ (8010e1c <UART_SetConfig+0x904>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	08db      	lsrs	r3, r3, #3
 8010da8:	f003 0303 	and.w	r3, r3, #3
 8010dac:	4a1d      	ldr	r2, [pc, #116]	@ (8010e24 <UART_SetConfig+0x90c>)
 8010dae:	fa22 f303 	lsr.w	r3, r2, r3
 8010db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010db4:	e00f      	b.n	8010dd6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010db6:	4b1b      	ldr	r3, [pc, #108]	@ (8010e24 <UART_SetConfig+0x90c>)
 8010db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010dba:	e00c      	b.n	8010dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8010e28 <UART_SetConfig+0x910>)
 8010dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010dc0:	e009      	b.n	8010dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010dc8:	e005      	b.n	8010dd6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	f000 81ee 	beq.w	80111ba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010de2:	4a12      	ldr	r2, [pc, #72]	@ (8010e2c <UART_SetConfig+0x914>)
 8010de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010de8:	461a      	mov	r2, r3
 8010dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8010df0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	685a      	ldr	r2, [r3, #4]
 8010df6:	4613      	mov	r3, r2
 8010df8:	005b      	lsls	r3, r3, #1
 8010dfa:	4413      	add	r3, r2
 8010dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d305      	bcc.n	8010e0e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d910      	bls.n	8010e30 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010e0e:	2301      	movs	r3, #1
 8010e10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010e14:	e1d1      	b.n	80111ba <UART_SetConfig+0xca2>
 8010e16:	bf00      	nop
 8010e18:	40011c00 	.word	0x40011c00
 8010e1c:	58024400 	.word	0x58024400
 8010e20:	58000c00 	.word	0x58000c00
 8010e24:	03d09000 	.word	0x03d09000
 8010e28:	003d0900 	.word	0x003d0900
 8010e2c:	0801820c 	.word	0x0801820c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e32:	2200      	movs	r2, #0
 8010e34:	60bb      	str	r3, [r7, #8]
 8010e36:	60fa      	str	r2, [r7, #12]
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e3c:	4ac0      	ldr	r2, [pc, #768]	@ (8011140 <UART_SetConfig+0xc28>)
 8010e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	2200      	movs	r2, #0
 8010e46:	603b      	str	r3, [r7, #0]
 8010e48:	607a      	str	r2, [r7, #4]
 8010e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010e52:	f7ef fc71 	bl	8000738 <__aeabi_uldivmod>
 8010e56:	4602      	mov	r2, r0
 8010e58:	460b      	mov	r3, r1
 8010e5a:	4610      	mov	r0, r2
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	f04f 0200 	mov.w	r2, #0
 8010e62:	f04f 0300 	mov.w	r3, #0
 8010e66:	020b      	lsls	r3, r1, #8
 8010e68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010e6c:	0202      	lsls	r2, r0, #8
 8010e6e:	6979      	ldr	r1, [r7, #20]
 8010e70:	6849      	ldr	r1, [r1, #4]
 8010e72:	0849      	lsrs	r1, r1, #1
 8010e74:	2000      	movs	r0, #0
 8010e76:	460c      	mov	r4, r1
 8010e78:	4605      	mov	r5, r0
 8010e7a:	eb12 0804 	adds.w	r8, r2, r4
 8010e7e:	eb43 0905 	adc.w	r9, r3, r5
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	2200      	movs	r2, #0
 8010e88:	469a      	mov	sl, r3
 8010e8a:	4693      	mov	fp, r2
 8010e8c:	4652      	mov	r2, sl
 8010e8e:	465b      	mov	r3, fp
 8010e90:	4640      	mov	r0, r8
 8010e92:	4649      	mov	r1, r9
 8010e94:	f7ef fc50 	bl	8000738 <__aeabi_uldivmod>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010ea6:	d308      	bcc.n	8010eba <UART_SetConfig+0x9a2>
 8010ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010eae:	d204      	bcs.n	8010eba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010eb6:	60da      	str	r2, [r3, #12]
 8010eb8:	e17f      	b.n	80111ba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010eba:	2301      	movs	r3, #1
 8010ebc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010ec0:	e17b      	b.n	80111ba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	69db      	ldr	r3, [r3, #28]
 8010ec6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010eca:	f040 80bd 	bne.w	8011048 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010ece:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010ed2:	2b20      	cmp	r3, #32
 8010ed4:	dc48      	bgt.n	8010f68 <UART_SetConfig+0xa50>
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	db7b      	blt.n	8010fd2 <UART_SetConfig+0xaba>
 8010eda:	2b20      	cmp	r3, #32
 8010edc:	d879      	bhi.n	8010fd2 <UART_SetConfig+0xaba>
 8010ede:	a201      	add	r2, pc, #4	@ (adr r2, 8010ee4 <UART_SetConfig+0x9cc>)
 8010ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ee4:	08010f6f 	.word	0x08010f6f
 8010ee8:	08010f77 	.word	0x08010f77
 8010eec:	08010fd3 	.word	0x08010fd3
 8010ef0:	08010fd3 	.word	0x08010fd3
 8010ef4:	08010f7f 	.word	0x08010f7f
 8010ef8:	08010fd3 	.word	0x08010fd3
 8010efc:	08010fd3 	.word	0x08010fd3
 8010f00:	08010fd3 	.word	0x08010fd3
 8010f04:	08010f8f 	.word	0x08010f8f
 8010f08:	08010fd3 	.word	0x08010fd3
 8010f0c:	08010fd3 	.word	0x08010fd3
 8010f10:	08010fd3 	.word	0x08010fd3
 8010f14:	08010fd3 	.word	0x08010fd3
 8010f18:	08010fd3 	.word	0x08010fd3
 8010f1c:	08010fd3 	.word	0x08010fd3
 8010f20:	08010fd3 	.word	0x08010fd3
 8010f24:	08010f9f 	.word	0x08010f9f
 8010f28:	08010fd3 	.word	0x08010fd3
 8010f2c:	08010fd3 	.word	0x08010fd3
 8010f30:	08010fd3 	.word	0x08010fd3
 8010f34:	08010fd3 	.word	0x08010fd3
 8010f38:	08010fd3 	.word	0x08010fd3
 8010f3c:	08010fd3 	.word	0x08010fd3
 8010f40:	08010fd3 	.word	0x08010fd3
 8010f44:	08010fd3 	.word	0x08010fd3
 8010f48:	08010fd3 	.word	0x08010fd3
 8010f4c:	08010fd3 	.word	0x08010fd3
 8010f50:	08010fd3 	.word	0x08010fd3
 8010f54:	08010fd3 	.word	0x08010fd3
 8010f58:	08010fd3 	.word	0x08010fd3
 8010f5c:	08010fd3 	.word	0x08010fd3
 8010f60:	08010fd3 	.word	0x08010fd3
 8010f64:	08010fc5 	.word	0x08010fc5
 8010f68:	2b40      	cmp	r3, #64	@ 0x40
 8010f6a:	d02e      	beq.n	8010fca <UART_SetConfig+0xab2>
 8010f6c:	e031      	b.n	8010fd2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010f6e:	f7fa f917 	bl	800b1a0 <HAL_RCC_GetPCLK1Freq>
 8010f72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010f74:	e033      	b.n	8010fde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010f76:	f7fa f929 	bl	800b1cc <HAL_RCC_GetPCLK2Freq>
 8010f7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010f7c:	e02f      	b.n	8010fde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fb ffc0 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f8c:	e027      	b.n	8010fde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f8e:	f107 0318 	add.w	r3, r7, #24
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fc f90c 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f98:	69fb      	ldr	r3, [r7, #28]
 8010f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f9c:	e01f      	b.n	8010fde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f9e:	4b69      	ldr	r3, [pc, #420]	@ (8011144 <UART_SetConfig+0xc2c>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f003 0320 	and.w	r3, r3, #32
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d009      	beq.n	8010fbe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010faa:	4b66      	ldr	r3, [pc, #408]	@ (8011144 <UART_SetConfig+0xc2c>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	08db      	lsrs	r3, r3, #3
 8010fb0:	f003 0303 	and.w	r3, r3, #3
 8010fb4:	4a64      	ldr	r2, [pc, #400]	@ (8011148 <UART_SetConfig+0xc30>)
 8010fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8010fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010fbc:	e00f      	b.n	8010fde <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010fbe:	4b62      	ldr	r3, [pc, #392]	@ (8011148 <UART_SetConfig+0xc30>)
 8010fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010fc2:	e00c      	b.n	8010fde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010fc4:	4b61      	ldr	r3, [pc, #388]	@ (801114c <UART_SetConfig+0xc34>)
 8010fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010fc8:	e009      	b.n	8010fde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010fd0:	e005      	b.n	8010fde <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010fdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	f000 80ea 	beq.w	80111ba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fea:	4a55      	ldr	r2, [pc, #340]	@ (8011140 <UART_SetConfig+0xc28>)
 8010fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ff4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ff8:	005a      	lsls	r2, r3, #1
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	085b      	lsrs	r3, r3, #1
 8011000:	441a      	add	r2, r3
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	fbb2 f3f3 	udiv	r3, r2, r3
 801100a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801100c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801100e:	2b0f      	cmp	r3, #15
 8011010:	d916      	bls.n	8011040 <UART_SetConfig+0xb28>
 8011012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011018:	d212      	bcs.n	8011040 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801101a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801101c:	b29b      	uxth	r3, r3
 801101e:	f023 030f 	bic.w	r3, r3, #15
 8011022:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011026:	085b      	lsrs	r3, r3, #1
 8011028:	b29b      	uxth	r3, r3
 801102a:	f003 0307 	and.w	r3, r3, #7
 801102e:	b29a      	uxth	r2, r3
 8011030:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011032:	4313      	orrs	r3, r2
 8011034:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801103c:	60da      	str	r2, [r3, #12]
 801103e:	e0bc      	b.n	80111ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011040:	2301      	movs	r3, #1
 8011042:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011046:	e0b8      	b.n	80111ba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011048:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801104c:	2b20      	cmp	r3, #32
 801104e:	dc4b      	bgt.n	80110e8 <UART_SetConfig+0xbd0>
 8011050:	2b00      	cmp	r3, #0
 8011052:	f2c0 8087 	blt.w	8011164 <UART_SetConfig+0xc4c>
 8011056:	2b20      	cmp	r3, #32
 8011058:	f200 8084 	bhi.w	8011164 <UART_SetConfig+0xc4c>
 801105c:	a201      	add	r2, pc, #4	@ (adr r2, 8011064 <UART_SetConfig+0xb4c>)
 801105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011062:	bf00      	nop
 8011064:	080110ef 	.word	0x080110ef
 8011068:	080110f7 	.word	0x080110f7
 801106c:	08011165 	.word	0x08011165
 8011070:	08011165 	.word	0x08011165
 8011074:	080110ff 	.word	0x080110ff
 8011078:	08011165 	.word	0x08011165
 801107c:	08011165 	.word	0x08011165
 8011080:	08011165 	.word	0x08011165
 8011084:	0801110f 	.word	0x0801110f
 8011088:	08011165 	.word	0x08011165
 801108c:	08011165 	.word	0x08011165
 8011090:	08011165 	.word	0x08011165
 8011094:	08011165 	.word	0x08011165
 8011098:	08011165 	.word	0x08011165
 801109c:	08011165 	.word	0x08011165
 80110a0:	08011165 	.word	0x08011165
 80110a4:	0801111f 	.word	0x0801111f
 80110a8:	08011165 	.word	0x08011165
 80110ac:	08011165 	.word	0x08011165
 80110b0:	08011165 	.word	0x08011165
 80110b4:	08011165 	.word	0x08011165
 80110b8:	08011165 	.word	0x08011165
 80110bc:	08011165 	.word	0x08011165
 80110c0:	08011165 	.word	0x08011165
 80110c4:	08011165 	.word	0x08011165
 80110c8:	08011165 	.word	0x08011165
 80110cc:	08011165 	.word	0x08011165
 80110d0:	08011165 	.word	0x08011165
 80110d4:	08011165 	.word	0x08011165
 80110d8:	08011165 	.word	0x08011165
 80110dc:	08011165 	.word	0x08011165
 80110e0:	08011165 	.word	0x08011165
 80110e4:	08011157 	.word	0x08011157
 80110e8:	2b40      	cmp	r3, #64	@ 0x40
 80110ea:	d037      	beq.n	801115c <UART_SetConfig+0xc44>
 80110ec:	e03a      	b.n	8011164 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80110ee:	f7fa f857 	bl	800b1a0 <HAL_RCC_GetPCLK1Freq>
 80110f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80110f4:	e03c      	b.n	8011170 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80110f6:	f7fa f869 	bl	800b1cc <HAL_RCC_GetPCLK2Freq>
 80110fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80110fc:	e038      	b.n	8011170 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011102:	4618      	mov	r0, r3
 8011104:	f7fb ff00 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801110a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801110c:	e030      	b.n	8011170 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801110e:	f107 0318 	add.w	r3, r7, #24
 8011112:	4618      	mov	r0, r3
 8011114:	f7fc f84c 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801111c:	e028      	b.n	8011170 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801111e:	4b09      	ldr	r3, [pc, #36]	@ (8011144 <UART_SetConfig+0xc2c>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f003 0320 	and.w	r3, r3, #32
 8011126:	2b00      	cmp	r3, #0
 8011128:	d012      	beq.n	8011150 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801112a:	4b06      	ldr	r3, [pc, #24]	@ (8011144 <UART_SetConfig+0xc2c>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	08db      	lsrs	r3, r3, #3
 8011130:	f003 0303 	and.w	r3, r3, #3
 8011134:	4a04      	ldr	r2, [pc, #16]	@ (8011148 <UART_SetConfig+0xc30>)
 8011136:	fa22 f303 	lsr.w	r3, r2, r3
 801113a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801113c:	e018      	b.n	8011170 <UART_SetConfig+0xc58>
 801113e:	bf00      	nop
 8011140:	0801820c 	.word	0x0801820c
 8011144:	58024400 	.word	0x58024400
 8011148:	03d09000 	.word	0x03d09000
 801114c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011150:	4b24      	ldr	r3, [pc, #144]	@ (80111e4 <UART_SetConfig+0xccc>)
 8011152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011154:	e00c      	b.n	8011170 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011156:	4b24      	ldr	r3, [pc, #144]	@ (80111e8 <UART_SetConfig+0xcd0>)
 8011158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801115a:	e009      	b.n	8011170 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801115c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011162:	e005      	b.n	8011170 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011164:	2300      	movs	r3, #0
 8011166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011168:	2301      	movs	r3, #1
 801116a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801116e:	bf00      	nop
    }

    if (pclk != 0U)
 8011170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011172:	2b00      	cmp	r3, #0
 8011174:	d021      	beq.n	80111ba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801117a:	4a1c      	ldr	r2, [pc, #112]	@ (80111ec <UART_SetConfig+0xcd4>)
 801117c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011180:	461a      	mov	r2, r3
 8011182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011184:	fbb3 f2f2 	udiv	r2, r3, r2
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	085b      	lsrs	r3, r3, #1
 801118e:	441a      	add	r2, r3
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	fbb2 f3f3 	udiv	r3, r2, r3
 8011198:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801119a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801119c:	2b0f      	cmp	r3, #15
 801119e:	d909      	bls.n	80111b4 <UART_SetConfig+0xc9c>
 80111a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111a6:	d205      	bcs.n	80111b4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80111a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111aa:	b29a      	uxth	r2, r3
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	60da      	str	r2, [r3, #12]
 80111b2:	e002      	b.n	80111ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80111b4:	2301      	movs	r3, #1
 80111b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	2201      	movs	r2, #1
 80111be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	2201      	movs	r2, #1
 80111c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	2200      	movs	r2, #0
 80111ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	2200      	movs	r2, #0
 80111d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80111d6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3748      	adds	r7, #72	@ 0x48
 80111de:	46bd      	mov	sp, r7
 80111e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80111e4:	03d09000 	.word	0x03d09000
 80111e8:	003d0900 	.word	0x003d0900
 80111ec:	0801820c 	.word	0x0801820c

080111f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b083      	sub	sp, #12
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111fc:	f003 0308 	and.w	r3, r3, #8
 8011200:	2b00      	cmp	r3, #0
 8011202:	d00a      	beq.n	801121a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	430a      	orrs	r2, r1
 8011218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801121e:	f003 0301 	and.w	r3, r3, #1
 8011222:	2b00      	cmp	r3, #0
 8011224:	d00a      	beq.n	801123c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	430a      	orrs	r2, r1
 801123a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011240:	f003 0302 	and.w	r3, r3, #2
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00a      	beq.n	801125e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	430a      	orrs	r2, r1
 801125c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011262:	f003 0304 	and.w	r3, r3, #4
 8011266:	2b00      	cmp	r3, #0
 8011268:	d00a      	beq.n	8011280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	430a      	orrs	r2, r1
 801127e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011284:	f003 0310 	and.w	r3, r3, #16
 8011288:	2b00      	cmp	r3, #0
 801128a:	d00a      	beq.n	80112a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	689b      	ldr	r3, [r3, #8]
 8011292:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	430a      	orrs	r2, r1
 80112a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112a6:	f003 0320 	and.w	r3, r3, #32
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00a      	beq.n	80112c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	689b      	ldr	r3, [r3, #8]
 80112b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	430a      	orrs	r2, r1
 80112c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d01a      	beq.n	8011306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	430a      	orrs	r2, r1
 80112e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80112ee:	d10a      	bne.n	8011306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	430a      	orrs	r2, r1
 8011304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801130a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801130e:	2b00      	cmp	r3, #0
 8011310:	d00a      	beq.n	8011328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	430a      	orrs	r2, r1
 8011326:	605a      	str	r2, [r3, #4]
  }
}
 8011328:	bf00      	nop
 801132a:	370c      	adds	r7, #12
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr

08011334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b098      	sub	sp, #96	@ 0x60
 8011338:	af02      	add	r7, sp, #8
 801133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011344:	f7f7 fe6a 	bl	800901c <HAL_GetTick>
 8011348:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f003 0308 	and.w	r3, r3, #8
 8011354:	2b08      	cmp	r3, #8
 8011356:	d12f      	bne.n	80113b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011358:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011360:	2200      	movs	r2, #0
 8011362:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f000 f88e 	bl	8011488 <UART_WaitOnFlagUntilTimeout>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d022      	beq.n	80113b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801137a:	e853 3f00 	ldrex	r3, [r3]
 801137e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011386:	653b      	str	r3, [r7, #80]	@ 0x50
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	461a      	mov	r2, r3
 801138e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011390:	647b      	str	r3, [r7, #68]	@ 0x44
 8011392:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011394:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011398:	e841 2300 	strex	r3, r2, [r1]
 801139c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801139e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d1e6      	bne.n	8011372 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2220      	movs	r2, #32
 80113a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80113b4:	2303      	movs	r3, #3
 80113b6:	e063      	b.n	8011480 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f003 0304 	and.w	r3, r3, #4
 80113c2:	2b04      	cmp	r3, #4
 80113c4:	d149      	bne.n	801145a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80113c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80113ca:	9300      	str	r3, [sp, #0]
 80113cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113ce:	2200      	movs	r2, #0
 80113d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f000 f857 	bl	8011488 <UART_WaitOnFlagUntilTimeout>
 80113da:	4603      	mov	r3, r0
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d03c      	beq.n	801145a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113e8:	e853 3f00 	ldrex	r3, [r3]
 80113ec:	623b      	str	r3, [r7, #32]
   return(result);
 80113ee:	6a3b      	ldr	r3, [r7, #32]
 80113f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80113f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	461a      	mov	r2, r3
 80113fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8011400:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011406:	e841 2300 	strex	r3, r2, [r1]
 801140a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801140c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801140e:	2b00      	cmp	r3, #0
 8011410:	d1e6      	bne.n	80113e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	3308      	adds	r3, #8
 8011418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	e853 3f00 	ldrex	r3, [r3]
 8011420:	60fb      	str	r3, [r7, #12]
   return(result);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f023 0301 	bic.w	r3, r3, #1
 8011428:	64bb      	str	r3, [r7, #72]	@ 0x48
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	3308      	adds	r3, #8
 8011430:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011432:	61fa      	str	r2, [r7, #28]
 8011434:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011436:	69b9      	ldr	r1, [r7, #24]
 8011438:	69fa      	ldr	r2, [r7, #28]
 801143a:	e841 2300 	strex	r3, r2, [r1]
 801143e:	617b      	str	r3, [r7, #20]
   return(result);
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1e5      	bne.n	8011412 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2220      	movs	r2, #32
 801144a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2200      	movs	r2, #0
 8011452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011456:	2303      	movs	r3, #3
 8011458:	e012      	b.n	8011480 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2220      	movs	r2, #32
 801145e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2220      	movs	r2, #32
 8011466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2200      	movs	r2, #0
 8011474:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2200      	movs	r2, #0
 801147a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801147e:	2300      	movs	r3, #0
}
 8011480:	4618      	mov	r0, r3
 8011482:	3758      	adds	r7, #88	@ 0x58
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	60b9      	str	r1, [r7, #8]
 8011492:	603b      	str	r3, [r7, #0]
 8011494:	4613      	mov	r3, r2
 8011496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011498:	e04f      	b.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114a0:	d04b      	beq.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114a2:	f7f7 fdbb 	bl	800901c <HAL_GetTick>
 80114a6:	4602      	mov	r2, r0
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	1ad3      	subs	r3, r2, r3
 80114ac:	69ba      	ldr	r2, [r7, #24]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d302      	bcc.n	80114b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d101      	bne.n	80114bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80114b8:	2303      	movs	r3, #3
 80114ba:	e04e      	b.n	801155a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f003 0304 	and.w	r3, r3, #4
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d037      	beq.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	2b80      	cmp	r3, #128	@ 0x80
 80114ce:	d034      	beq.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	2b40      	cmp	r3, #64	@ 0x40
 80114d4:	d031      	beq.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	69db      	ldr	r3, [r3, #28]
 80114dc:	f003 0308 	and.w	r3, r3, #8
 80114e0:	2b08      	cmp	r3, #8
 80114e2:	d110      	bne.n	8011506 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	2208      	movs	r2, #8
 80114ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f000 f839 	bl	8011564 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2208      	movs	r2, #8
 80114f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2200      	movs	r2, #0
 80114fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011502:	2301      	movs	r3, #1
 8011504:	e029      	b.n	801155a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	69db      	ldr	r3, [r3, #28]
 801150c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011514:	d111      	bne.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801151e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f000 f81f 	bl	8011564 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2220      	movs	r2, #32
 801152a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2200      	movs	r2, #0
 8011532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011536:	2303      	movs	r3, #3
 8011538:	e00f      	b.n	801155a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	69da      	ldr	r2, [r3, #28]
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	4013      	ands	r3, r2
 8011544:	68ba      	ldr	r2, [r7, #8]
 8011546:	429a      	cmp	r2, r3
 8011548:	bf0c      	ite	eq
 801154a:	2301      	moveq	r3, #1
 801154c:	2300      	movne	r3, #0
 801154e:	b2db      	uxtb	r3, r3
 8011550:	461a      	mov	r2, r3
 8011552:	79fb      	ldrb	r3, [r7, #7]
 8011554:	429a      	cmp	r2, r3
 8011556:	d0a0      	beq.n	801149a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011558:	2300      	movs	r3, #0
}
 801155a:	4618      	mov	r0, r3
 801155c:	3710      	adds	r7, #16
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
	...

08011564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011564:	b480      	push	{r7}
 8011566:	b095      	sub	sp, #84	@ 0x54
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011574:	e853 3f00 	ldrex	r3, [r3]
 8011578:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801157a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801157c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011580:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	461a      	mov	r2, r3
 8011588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801158a:	643b      	str	r3, [r7, #64]	@ 0x40
 801158c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801158e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011592:	e841 2300 	strex	r3, r2, [r1]
 8011596:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801159a:	2b00      	cmp	r3, #0
 801159c:	d1e6      	bne.n	801156c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	3308      	adds	r3, #8
 80115a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115a6:	6a3b      	ldr	r3, [r7, #32]
 80115a8:	e853 3f00 	ldrex	r3, [r3]
 80115ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80115ae:	69fa      	ldr	r2, [r7, #28]
 80115b0:	4b1e      	ldr	r3, [pc, #120]	@ (801162c <UART_EndRxTransfer+0xc8>)
 80115b2:	4013      	ands	r3, r2
 80115b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	3308      	adds	r3, #8
 80115bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80115c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80115c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80115c6:	e841 2300 	strex	r3, r2, [r1]
 80115ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80115cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1e5      	bne.n	801159e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115d6:	2b01      	cmp	r3, #1
 80115d8:	d118      	bne.n	801160c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	e853 3f00 	ldrex	r3, [r3]
 80115e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	f023 0310 	bic.w	r3, r3, #16
 80115ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	461a      	mov	r2, r3
 80115f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115f8:	61bb      	str	r3, [r7, #24]
 80115fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115fc:	6979      	ldr	r1, [r7, #20]
 80115fe:	69ba      	ldr	r2, [r7, #24]
 8011600:	e841 2300 	strex	r3, r2, [r1]
 8011604:	613b      	str	r3, [r7, #16]
   return(result);
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d1e6      	bne.n	80115da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2220      	movs	r2, #32
 8011610:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2200      	movs	r2, #0
 8011618:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2200      	movs	r2, #0
 801161e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011620:	bf00      	nop
 8011622:	3754      	adds	r7, #84	@ 0x54
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr
 801162c:	effffffe 	.word	0xeffffffe

08011630 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011630:	b480      	push	{r7}
 8011632:	b085      	sub	sp, #20
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801163e:	2b01      	cmp	r3, #1
 8011640:	d101      	bne.n	8011646 <HAL_UARTEx_DisableFifoMode+0x16>
 8011642:	2302      	movs	r3, #2
 8011644:	e027      	b.n	8011696 <HAL_UARTEx_DisableFifoMode+0x66>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2201      	movs	r2, #1
 801164a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2224      	movs	r2, #36	@ 0x24
 8011652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f022 0201 	bic.w	r2, r2, #1
 801166c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011674:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2200      	movs	r2, #0
 801167a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	68fa      	ldr	r2, [r7, #12]
 8011682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2220      	movs	r2, #32
 8011688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011694:	2300      	movs	r3, #0
}
 8011696:	4618      	mov	r0, r3
 8011698:	3714      	adds	r7, #20
 801169a:	46bd      	mov	sp, r7
 801169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a0:	4770      	bx	lr

080116a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80116a2:	b580      	push	{r7, lr}
 80116a4:	b084      	sub	sp, #16
 80116a6:	af00      	add	r7, sp, #0
 80116a8:	6078      	str	r0, [r7, #4]
 80116aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d101      	bne.n	80116ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80116b6:	2302      	movs	r3, #2
 80116b8:	e02d      	b.n	8011716 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2201      	movs	r2, #1
 80116be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2224      	movs	r2, #36	@ 0x24
 80116c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	681a      	ldr	r2, [r3, #0]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f022 0201 	bic.w	r2, r2, #1
 80116e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	689b      	ldr	r3, [r3, #8]
 80116e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	683a      	ldr	r2, [r7, #0]
 80116f2:	430a      	orrs	r2, r1
 80116f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f000 f850 	bl	801179c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	68fa      	ldr	r2, [r7, #12]
 8011702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2220      	movs	r2, #32
 8011708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2200      	movs	r2, #0
 8011710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011714:	2300      	movs	r3, #0
}
 8011716:	4618      	mov	r0, r3
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}

0801171e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801171e:	b580      	push	{r7, lr}
 8011720:	b084      	sub	sp, #16
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
 8011726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801172e:	2b01      	cmp	r3, #1
 8011730:	d101      	bne.n	8011736 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011732:	2302      	movs	r3, #2
 8011734:	e02d      	b.n	8011792 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2201      	movs	r2, #1
 801173a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2224      	movs	r2, #36	@ 0x24
 8011742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f022 0201 	bic.w	r2, r2, #1
 801175c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	689b      	ldr	r3, [r3, #8]
 8011764:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	683a      	ldr	r2, [r7, #0]
 801176e:	430a      	orrs	r2, r1
 8011770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f000 f812 	bl	801179c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	68fa      	ldr	r2, [r7, #12]
 801177e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2220      	movs	r2, #32
 8011784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2200      	movs	r2, #0
 801178c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011790:	2300      	movs	r3, #0
}
 8011792:	4618      	mov	r0, r3
 8011794:	3710      	adds	r7, #16
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
	...

0801179c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801179c:	b480      	push	{r7}
 801179e:	b085      	sub	sp, #20
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d108      	bne.n	80117be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2201      	movs	r2, #1
 80117b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2201      	movs	r2, #1
 80117b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80117bc:	e031      	b.n	8011822 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80117be:	2310      	movs	r3, #16
 80117c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80117c2:	2310      	movs	r3, #16
 80117c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	689b      	ldr	r3, [r3, #8]
 80117cc:	0e5b      	lsrs	r3, r3, #25
 80117ce:	b2db      	uxtb	r3, r3
 80117d0:	f003 0307 	and.w	r3, r3, #7
 80117d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	689b      	ldr	r3, [r3, #8]
 80117dc:	0f5b      	lsrs	r3, r3, #29
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	f003 0307 	and.w	r3, r3, #7
 80117e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80117e6:	7bbb      	ldrb	r3, [r7, #14]
 80117e8:	7b3a      	ldrb	r2, [r7, #12]
 80117ea:	4911      	ldr	r1, [pc, #68]	@ (8011830 <UARTEx_SetNbDataToProcess+0x94>)
 80117ec:	5c8a      	ldrb	r2, [r1, r2]
 80117ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80117f2:	7b3a      	ldrb	r2, [r7, #12]
 80117f4:	490f      	ldr	r1, [pc, #60]	@ (8011834 <UARTEx_SetNbDataToProcess+0x98>)
 80117f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80117f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011804:	7bfb      	ldrb	r3, [r7, #15]
 8011806:	7b7a      	ldrb	r2, [r7, #13]
 8011808:	4909      	ldr	r1, [pc, #36]	@ (8011830 <UARTEx_SetNbDataToProcess+0x94>)
 801180a:	5c8a      	ldrb	r2, [r1, r2]
 801180c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011810:	7b7a      	ldrb	r2, [r7, #13]
 8011812:	4908      	ldr	r1, [pc, #32]	@ (8011834 <UARTEx_SetNbDataToProcess+0x98>)
 8011814:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011816:	fb93 f3f2 	sdiv	r3, r3, r2
 801181a:	b29a      	uxth	r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011822:	bf00      	nop
 8011824:	3714      	adds	r7, #20
 8011826:	46bd      	mov	sp, r7
 8011828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182c:	4770      	bx	lr
 801182e:	bf00      	nop
 8011830:	08018224 	.word	0x08018224
 8011834:	0801822c 	.word	0x0801822c

08011838 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d101      	bne.n	801184a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8011846:	2301      	movs	r3, #1
 8011848:	e03c      	b.n	80118c4 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8011850:	b2db      	uxtb	r3, r3
 8011852:	2b00      	cmp	r3, #0
 8011854:	d106      	bne.n	8011864 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2200      	movs	r2, #0
 801185a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f7f7 f8c0 	bl	80089e4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2202      	movs	r2, #2
 8011868:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	681a      	ldr	r2, [r3, #0]
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	f022 0201 	bic.w	r2, r2, #1
 801187a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f000 f85b 	bl	8011938 <USART_SetConfig>
 8011882:	4603      	mov	r3, r0
 8011884:	2b01      	cmp	r3, #1
 8011886:	d101      	bne.n	801188c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8011888:	2301      	movs	r3, #1
 801188a:	e01b      	b.n	80118c4 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	685a      	ldr	r2, [r3, #4]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801189a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	689a      	ldr	r2, [r3, #8]
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80118aa:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	f042 0201 	orr.w	r2, r2, #1
 80118ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 fddd 	bl	801247c <USART_CheckIdleState>
 80118c2:	4603      	mov	r3, r0
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3708      	adds	r7, #8
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}

080118cc <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	603b      	str	r3, [r7, #0]
 80118d8:	4613      	mov	r3, r2
 80118da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80118dc:	e018      	b.n	8011910 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80118de:	69bb      	ldr	r3, [r7, #24]
 80118e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118e4:	d014      	beq.n	8011910 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80118e6:	f7f7 fb99 	bl	800901c <HAL_GetTick>
 80118ea:	4602      	mov	r2, r0
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	69ba      	ldr	r2, [r7, #24]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d302      	bcc.n	80118fc <USART_WaitOnFlagUntilTimeout+0x30>
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d109      	bne.n	8011910 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2201      	movs	r2, #1
 8011900:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2200      	movs	r2, #0
 8011908:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 801190c:	2303      	movs	r3, #3
 801190e:	e00f      	b.n	8011930 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	69da      	ldr	r2, [r3, #28]
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	4013      	ands	r3, r2
 801191a:	68ba      	ldr	r2, [r7, #8]
 801191c:	429a      	cmp	r2, r3
 801191e:	bf0c      	ite	eq
 8011920:	2301      	moveq	r3, #1
 8011922:	2300      	movne	r3, #0
 8011924:	b2db      	uxtb	r3, r3
 8011926:	461a      	mov	r2, r3
 8011928:	79fb      	ldrb	r3, [r7, #7]
 801192a:	429a      	cmp	r2, r3
 801192c:	d0d7      	beq.n	80118de <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801192e:	2300      	movs	r3, #0
}
 8011930:	4618      	mov	r0, r3
 8011932:	3710      	adds	r7, #16
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b08e      	sub	sp, #56	@ 0x38
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8011940:	2300      	movs	r3, #0
 8011942:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8011946:	2300      	movs	r3, #0
 8011948:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	689a      	ldr	r2, [r3, #8]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	691b      	ldr	r3, [r3, #16]
 8011952:	431a      	orrs	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	695b      	ldr	r3, [r3, #20]
 8011958:	4313      	orrs	r3, r2
 801195a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801195e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	4bc9      	ldr	r3, [pc, #804]	@ (8011c8c <USART_SetConfig+0x354>)
 8011968:	4013      	ands	r3, r2
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	6812      	ldr	r2, [r2, #0]
 801196e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011970:	430b      	orrs	r3, r1
 8011972:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8011974:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6a1b      	ldr	r3, [r3, #32]
 801197e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011980:	4313      	orrs	r3, r2
 8011982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	699a      	ldr	r2, [r3, #24]
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	69db      	ldr	r3, [r3, #28]
 801198c:	4313      	orrs	r3, r2
 801198e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011990:	4313      	orrs	r3, r2
 8011992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801199a:	4313      	orrs	r3, r2
 801199c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	685a      	ldr	r2, [r3, #4]
 80119a4:	4bba      	ldr	r3, [pc, #744]	@ (8011c90 <USART_SetConfig+0x358>)
 80119a6:	4013      	ands	r3, r2
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	6812      	ldr	r2, [r2, #0]
 80119ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80119ae:	430b      	orrs	r3, r1
 80119b0:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119b8:	f023 010f 	bic.w	r1, r3, #15
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	430a      	orrs	r2, r1
 80119c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4ab1      	ldr	r2, [pc, #708]	@ (8011c94 <USART_SetConfig+0x35c>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d176      	bne.n	8011ac0 <USART_SetConfig+0x188>
 80119d2:	4bb1      	ldr	r3, [pc, #708]	@ (8011c98 <USART_SetConfig+0x360>)
 80119d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80119d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80119da:	2b28      	cmp	r3, #40	@ 0x28
 80119dc:	d86c      	bhi.n	8011ab8 <USART_SetConfig+0x180>
 80119de:	a201      	add	r2, pc, #4	@ (adr r2, 80119e4 <USART_SetConfig+0xac>)
 80119e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119e4:	08011a89 	.word	0x08011a89
 80119e8:	08011ab9 	.word	0x08011ab9
 80119ec:	08011ab9 	.word	0x08011ab9
 80119f0:	08011ab9 	.word	0x08011ab9
 80119f4:	08011ab9 	.word	0x08011ab9
 80119f8:	08011ab9 	.word	0x08011ab9
 80119fc:	08011ab9 	.word	0x08011ab9
 8011a00:	08011ab9 	.word	0x08011ab9
 8011a04:	08011a91 	.word	0x08011a91
 8011a08:	08011ab9 	.word	0x08011ab9
 8011a0c:	08011ab9 	.word	0x08011ab9
 8011a10:	08011ab9 	.word	0x08011ab9
 8011a14:	08011ab9 	.word	0x08011ab9
 8011a18:	08011ab9 	.word	0x08011ab9
 8011a1c:	08011ab9 	.word	0x08011ab9
 8011a20:	08011ab9 	.word	0x08011ab9
 8011a24:	08011a99 	.word	0x08011a99
 8011a28:	08011ab9 	.word	0x08011ab9
 8011a2c:	08011ab9 	.word	0x08011ab9
 8011a30:	08011ab9 	.word	0x08011ab9
 8011a34:	08011ab9 	.word	0x08011ab9
 8011a38:	08011ab9 	.word	0x08011ab9
 8011a3c:	08011ab9 	.word	0x08011ab9
 8011a40:	08011ab9 	.word	0x08011ab9
 8011a44:	08011aa1 	.word	0x08011aa1
 8011a48:	08011ab9 	.word	0x08011ab9
 8011a4c:	08011ab9 	.word	0x08011ab9
 8011a50:	08011ab9 	.word	0x08011ab9
 8011a54:	08011ab9 	.word	0x08011ab9
 8011a58:	08011ab9 	.word	0x08011ab9
 8011a5c:	08011ab9 	.word	0x08011ab9
 8011a60:	08011ab9 	.word	0x08011ab9
 8011a64:	08011aa9 	.word	0x08011aa9
 8011a68:	08011ab9 	.word	0x08011ab9
 8011a6c:	08011ab9 	.word	0x08011ab9
 8011a70:	08011ab9 	.word	0x08011ab9
 8011a74:	08011ab9 	.word	0x08011ab9
 8011a78:	08011ab9 	.word	0x08011ab9
 8011a7c:	08011ab9 	.word	0x08011ab9
 8011a80:	08011ab9 	.word	0x08011ab9
 8011a84:	08011ab1 	.word	0x08011ab1
 8011a88:	2301      	movs	r3, #1
 8011a8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011a8e:	e18e      	b.n	8011dae <USART_SetConfig+0x476>
 8011a90:	2302      	movs	r3, #2
 8011a92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011a96:	e18a      	b.n	8011dae <USART_SetConfig+0x476>
 8011a98:	2304      	movs	r3, #4
 8011a9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011a9e:	e186      	b.n	8011dae <USART_SetConfig+0x476>
 8011aa0:	2308      	movs	r3, #8
 8011aa2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011aa6:	e182      	b.n	8011dae <USART_SetConfig+0x476>
 8011aa8:	2310      	movs	r3, #16
 8011aaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011aae:	e17e      	b.n	8011dae <USART_SetConfig+0x476>
 8011ab0:	2320      	movs	r3, #32
 8011ab2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011ab6:	e17a      	b.n	8011dae <USART_SetConfig+0x476>
 8011ab8:	2340      	movs	r3, #64	@ 0x40
 8011aba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011abe:	e176      	b.n	8011dae <USART_SetConfig+0x476>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	4a75      	ldr	r2, [pc, #468]	@ (8011c9c <USART_SetConfig+0x364>)
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d130      	bne.n	8011b2c <USART_SetConfig+0x1f4>
 8011aca:	4b73      	ldr	r3, [pc, #460]	@ (8011c98 <USART_SetConfig+0x360>)
 8011acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ace:	f003 0307 	and.w	r3, r3, #7
 8011ad2:	2b05      	cmp	r3, #5
 8011ad4:	d826      	bhi.n	8011b24 <USART_SetConfig+0x1ec>
 8011ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8011adc <USART_SetConfig+0x1a4>)
 8011ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011adc:	08011af5 	.word	0x08011af5
 8011ae0:	08011afd 	.word	0x08011afd
 8011ae4:	08011b05 	.word	0x08011b05
 8011ae8:	08011b0d 	.word	0x08011b0d
 8011aec:	08011b15 	.word	0x08011b15
 8011af0:	08011b1d 	.word	0x08011b1d
 8011af4:	2300      	movs	r3, #0
 8011af6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011afa:	e158      	b.n	8011dae <USART_SetConfig+0x476>
 8011afc:	2302      	movs	r3, #2
 8011afe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b02:	e154      	b.n	8011dae <USART_SetConfig+0x476>
 8011b04:	2304      	movs	r3, #4
 8011b06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b0a:	e150      	b.n	8011dae <USART_SetConfig+0x476>
 8011b0c:	2308      	movs	r3, #8
 8011b0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b12:	e14c      	b.n	8011dae <USART_SetConfig+0x476>
 8011b14:	2310      	movs	r3, #16
 8011b16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b1a:	e148      	b.n	8011dae <USART_SetConfig+0x476>
 8011b1c:	2320      	movs	r3, #32
 8011b1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b22:	e144      	b.n	8011dae <USART_SetConfig+0x476>
 8011b24:	2340      	movs	r3, #64	@ 0x40
 8011b26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b2a:	e140      	b.n	8011dae <USART_SetConfig+0x476>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4a5b      	ldr	r2, [pc, #364]	@ (8011ca0 <USART_SetConfig+0x368>)
 8011b32:	4293      	cmp	r3, r2
 8011b34:	d130      	bne.n	8011b98 <USART_SetConfig+0x260>
 8011b36:	4b58      	ldr	r3, [pc, #352]	@ (8011c98 <USART_SetConfig+0x360>)
 8011b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b3a:	f003 0307 	and.w	r3, r3, #7
 8011b3e:	2b05      	cmp	r3, #5
 8011b40:	d826      	bhi.n	8011b90 <USART_SetConfig+0x258>
 8011b42:	a201      	add	r2, pc, #4	@ (adr r2, 8011b48 <USART_SetConfig+0x210>)
 8011b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b48:	08011b61 	.word	0x08011b61
 8011b4c:	08011b69 	.word	0x08011b69
 8011b50:	08011b71 	.word	0x08011b71
 8011b54:	08011b79 	.word	0x08011b79
 8011b58:	08011b81 	.word	0x08011b81
 8011b5c:	08011b89 	.word	0x08011b89
 8011b60:	2300      	movs	r3, #0
 8011b62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b66:	e122      	b.n	8011dae <USART_SetConfig+0x476>
 8011b68:	2302      	movs	r3, #2
 8011b6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b6e:	e11e      	b.n	8011dae <USART_SetConfig+0x476>
 8011b70:	2304      	movs	r3, #4
 8011b72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b76:	e11a      	b.n	8011dae <USART_SetConfig+0x476>
 8011b78:	2308      	movs	r3, #8
 8011b7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b7e:	e116      	b.n	8011dae <USART_SetConfig+0x476>
 8011b80:	2310      	movs	r3, #16
 8011b82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b86:	e112      	b.n	8011dae <USART_SetConfig+0x476>
 8011b88:	2320      	movs	r3, #32
 8011b8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b8e:	e10e      	b.n	8011dae <USART_SetConfig+0x476>
 8011b90:	2340      	movs	r3, #64	@ 0x40
 8011b92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011b96:	e10a      	b.n	8011dae <USART_SetConfig+0x476>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	4a41      	ldr	r2, [pc, #260]	@ (8011ca4 <USART_SetConfig+0x36c>)
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	f040 8086 	bne.w	8011cb0 <USART_SetConfig+0x378>
 8011ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8011c98 <USART_SetConfig+0x360>)
 8011ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011bac:	2b28      	cmp	r3, #40	@ 0x28
 8011bae:	d87b      	bhi.n	8011ca8 <USART_SetConfig+0x370>
 8011bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8011bb8 <USART_SetConfig+0x280>)
 8011bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bb6:	bf00      	nop
 8011bb8:	08011c5d 	.word	0x08011c5d
 8011bbc:	08011ca9 	.word	0x08011ca9
 8011bc0:	08011ca9 	.word	0x08011ca9
 8011bc4:	08011ca9 	.word	0x08011ca9
 8011bc8:	08011ca9 	.word	0x08011ca9
 8011bcc:	08011ca9 	.word	0x08011ca9
 8011bd0:	08011ca9 	.word	0x08011ca9
 8011bd4:	08011ca9 	.word	0x08011ca9
 8011bd8:	08011c65 	.word	0x08011c65
 8011bdc:	08011ca9 	.word	0x08011ca9
 8011be0:	08011ca9 	.word	0x08011ca9
 8011be4:	08011ca9 	.word	0x08011ca9
 8011be8:	08011ca9 	.word	0x08011ca9
 8011bec:	08011ca9 	.word	0x08011ca9
 8011bf0:	08011ca9 	.word	0x08011ca9
 8011bf4:	08011ca9 	.word	0x08011ca9
 8011bf8:	08011c6d 	.word	0x08011c6d
 8011bfc:	08011ca9 	.word	0x08011ca9
 8011c00:	08011ca9 	.word	0x08011ca9
 8011c04:	08011ca9 	.word	0x08011ca9
 8011c08:	08011ca9 	.word	0x08011ca9
 8011c0c:	08011ca9 	.word	0x08011ca9
 8011c10:	08011ca9 	.word	0x08011ca9
 8011c14:	08011ca9 	.word	0x08011ca9
 8011c18:	08011c75 	.word	0x08011c75
 8011c1c:	08011ca9 	.word	0x08011ca9
 8011c20:	08011ca9 	.word	0x08011ca9
 8011c24:	08011ca9 	.word	0x08011ca9
 8011c28:	08011ca9 	.word	0x08011ca9
 8011c2c:	08011ca9 	.word	0x08011ca9
 8011c30:	08011ca9 	.word	0x08011ca9
 8011c34:	08011ca9 	.word	0x08011ca9
 8011c38:	08011c7d 	.word	0x08011c7d
 8011c3c:	08011ca9 	.word	0x08011ca9
 8011c40:	08011ca9 	.word	0x08011ca9
 8011c44:	08011ca9 	.word	0x08011ca9
 8011c48:	08011ca9 	.word	0x08011ca9
 8011c4c:	08011ca9 	.word	0x08011ca9
 8011c50:	08011ca9 	.word	0x08011ca9
 8011c54:	08011ca9 	.word	0x08011ca9
 8011c58:	08011c85 	.word	0x08011c85
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011c62:	e0a4      	b.n	8011dae <USART_SetConfig+0x476>
 8011c64:	2302      	movs	r3, #2
 8011c66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011c6a:	e0a0      	b.n	8011dae <USART_SetConfig+0x476>
 8011c6c:	2304      	movs	r3, #4
 8011c6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011c72:	e09c      	b.n	8011dae <USART_SetConfig+0x476>
 8011c74:	2308      	movs	r3, #8
 8011c76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011c7a:	e098      	b.n	8011dae <USART_SetConfig+0x476>
 8011c7c:	2310      	movs	r3, #16
 8011c7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011c82:	e094      	b.n	8011dae <USART_SetConfig+0x476>
 8011c84:	2320      	movs	r3, #32
 8011c86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011c8a:	e090      	b.n	8011dae <USART_SetConfig+0x476>
 8011c8c:	cfff69f3 	.word	0xcfff69f3
 8011c90:	ffffc0f6 	.word	0xffffc0f6
 8011c94:	40011000 	.word	0x40011000
 8011c98:	58024400 	.word	0x58024400
 8011c9c:	40004400 	.word	0x40004400
 8011ca0:	40004800 	.word	0x40004800
 8011ca4:	40011400 	.word	0x40011400
 8011ca8:	2340      	movs	r3, #64	@ 0x40
 8011caa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011cae:	e07e      	b.n	8011dae <USART_SetConfig+0x476>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4ab5      	ldr	r2, [pc, #724]	@ (8011f8c <USART_SetConfig+0x654>)
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	d176      	bne.n	8011da8 <USART_SetConfig+0x470>
 8011cba:	4bb5      	ldr	r3, [pc, #724]	@ (8011f90 <USART_SetConfig+0x658>)
 8011cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011cbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011cc2:	2b28      	cmp	r3, #40	@ 0x28
 8011cc4:	d86c      	bhi.n	8011da0 <USART_SetConfig+0x468>
 8011cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8011ccc <USART_SetConfig+0x394>)
 8011cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ccc:	08011d71 	.word	0x08011d71
 8011cd0:	08011da1 	.word	0x08011da1
 8011cd4:	08011da1 	.word	0x08011da1
 8011cd8:	08011da1 	.word	0x08011da1
 8011cdc:	08011da1 	.word	0x08011da1
 8011ce0:	08011da1 	.word	0x08011da1
 8011ce4:	08011da1 	.word	0x08011da1
 8011ce8:	08011da1 	.word	0x08011da1
 8011cec:	08011d79 	.word	0x08011d79
 8011cf0:	08011da1 	.word	0x08011da1
 8011cf4:	08011da1 	.word	0x08011da1
 8011cf8:	08011da1 	.word	0x08011da1
 8011cfc:	08011da1 	.word	0x08011da1
 8011d00:	08011da1 	.word	0x08011da1
 8011d04:	08011da1 	.word	0x08011da1
 8011d08:	08011da1 	.word	0x08011da1
 8011d0c:	08011d81 	.word	0x08011d81
 8011d10:	08011da1 	.word	0x08011da1
 8011d14:	08011da1 	.word	0x08011da1
 8011d18:	08011da1 	.word	0x08011da1
 8011d1c:	08011da1 	.word	0x08011da1
 8011d20:	08011da1 	.word	0x08011da1
 8011d24:	08011da1 	.word	0x08011da1
 8011d28:	08011da1 	.word	0x08011da1
 8011d2c:	08011d89 	.word	0x08011d89
 8011d30:	08011da1 	.word	0x08011da1
 8011d34:	08011da1 	.word	0x08011da1
 8011d38:	08011da1 	.word	0x08011da1
 8011d3c:	08011da1 	.word	0x08011da1
 8011d40:	08011da1 	.word	0x08011da1
 8011d44:	08011da1 	.word	0x08011da1
 8011d48:	08011da1 	.word	0x08011da1
 8011d4c:	08011d91 	.word	0x08011d91
 8011d50:	08011da1 	.word	0x08011da1
 8011d54:	08011da1 	.word	0x08011da1
 8011d58:	08011da1 	.word	0x08011da1
 8011d5c:	08011da1 	.word	0x08011da1
 8011d60:	08011da1 	.word	0x08011da1
 8011d64:	08011da1 	.word	0x08011da1
 8011d68:	08011da1 	.word	0x08011da1
 8011d6c:	08011d99 	.word	0x08011d99
 8011d70:	2301      	movs	r3, #1
 8011d72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011d76:	e01a      	b.n	8011dae <USART_SetConfig+0x476>
 8011d78:	2302      	movs	r3, #2
 8011d7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011d7e:	e016      	b.n	8011dae <USART_SetConfig+0x476>
 8011d80:	2304      	movs	r3, #4
 8011d82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011d86:	e012      	b.n	8011dae <USART_SetConfig+0x476>
 8011d88:	2308      	movs	r3, #8
 8011d8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011d8e:	e00e      	b.n	8011dae <USART_SetConfig+0x476>
 8011d90:	2310      	movs	r3, #16
 8011d92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011d96:	e00a      	b.n	8011dae <USART_SetConfig+0x476>
 8011d98:	2320      	movs	r3, #32
 8011d9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011d9e:	e006      	b.n	8011dae <USART_SetConfig+0x476>
 8011da0:	2340      	movs	r3, #64	@ 0x40
 8011da2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011da6:	e002      	b.n	8011dae <USART_SetConfig+0x476>
 8011da8:	2340      	movs	r3, #64	@ 0x40
 8011daa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 8011dae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011db2:	2b20      	cmp	r3, #32
 8011db4:	f200 832f 	bhi.w	8012416 <USART_SetConfig+0xade>
 8011db8:	a201      	add	r2, pc, #4	@ (adr r2, 8011dc0 <USART_SetConfig+0x488>)
 8011dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dbe:	bf00      	nop
 8011dc0:	08011e45 	.word	0x08011e45
 8011dc4:	08011efb 	.word	0x08011efb
 8011dc8:	08011fbb 	.word	0x08011fbb
 8011dcc:	08012417 	.word	0x08012417
 8011dd0:	08012075 	.word	0x08012075
 8011dd4:	08012417 	.word	0x08012417
 8011dd8:	08012417 	.word	0x08012417
 8011ddc:	08012417 	.word	0x08012417
 8011de0:	0801212f 	.word	0x0801212f
 8011de4:	08012417 	.word	0x08012417
 8011de8:	08012417 	.word	0x08012417
 8011dec:	08012417 	.word	0x08012417
 8011df0:	08012417 	.word	0x08012417
 8011df4:	08012417 	.word	0x08012417
 8011df8:	08012417 	.word	0x08012417
 8011dfc:	08012417 	.word	0x08012417
 8011e00:	080122a7 	.word	0x080122a7
 8011e04:	08012417 	.word	0x08012417
 8011e08:	08012417 	.word	0x08012417
 8011e0c:	08012417 	.word	0x08012417
 8011e10:	08012417 	.word	0x08012417
 8011e14:	08012417 	.word	0x08012417
 8011e18:	08012417 	.word	0x08012417
 8011e1c:	08012417 	.word	0x08012417
 8011e20:	08012417 	.word	0x08012417
 8011e24:	08012417 	.word	0x08012417
 8011e28:	08012417 	.word	0x08012417
 8011e2c:	08012417 	.word	0x08012417
 8011e30:	08012417 	.word	0x08012417
 8011e34:	08012417 	.word	0x08012417
 8011e38:	08012417 	.word	0x08012417
 8011e3c:	08012417 	.word	0x08012417
 8011e40:	08012365 	.word	0x08012365
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8011e44:	f7f9 f9ac 	bl	800b1a0 <HAL_RCC_GetPCLK1Freq>
 8011e48:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d044      	beq.n	8011edc <USART_SetConfig+0x5a4>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d03e      	beq.n	8011ed8 <USART_SetConfig+0x5a0>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e5e:	2b02      	cmp	r3, #2
 8011e60:	d038      	beq.n	8011ed4 <USART_SetConfig+0x59c>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e66:	2b03      	cmp	r3, #3
 8011e68:	d032      	beq.n	8011ed0 <USART_SetConfig+0x598>
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e6e:	2b04      	cmp	r3, #4
 8011e70:	d02c      	beq.n	8011ecc <USART_SetConfig+0x594>
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e76:	2b05      	cmp	r3, #5
 8011e78:	d026      	beq.n	8011ec8 <USART_SetConfig+0x590>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e7e:	2b06      	cmp	r3, #6
 8011e80:	d020      	beq.n	8011ec4 <USART_SetConfig+0x58c>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e86:	2b07      	cmp	r3, #7
 8011e88:	d01a      	beq.n	8011ec0 <USART_SetConfig+0x588>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e8e:	2b08      	cmp	r3, #8
 8011e90:	d014      	beq.n	8011ebc <USART_SetConfig+0x584>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e96:	2b09      	cmp	r3, #9
 8011e98:	d00e      	beq.n	8011eb8 <USART_SetConfig+0x580>
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e9e:	2b0a      	cmp	r3, #10
 8011ea0:	d008      	beq.n	8011eb4 <USART_SetConfig+0x57c>
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ea6:	2b0b      	cmp	r3, #11
 8011ea8:	d102      	bne.n	8011eb0 <USART_SetConfig+0x578>
 8011eaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011eae:	e016      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	e014      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011eb4:	2380      	movs	r3, #128	@ 0x80
 8011eb6:	e012      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011eb8:	2340      	movs	r3, #64	@ 0x40
 8011eba:	e010      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011ebc:	2320      	movs	r3, #32
 8011ebe:	e00e      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011ec0:	2310      	movs	r3, #16
 8011ec2:	e00c      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011ec4:	230c      	movs	r3, #12
 8011ec6:	e00a      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011ec8:	230a      	movs	r3, #10
 8011eca:	e008      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011ecc:	2308      	movs	r3, #8
 8011ece:	e006      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011ed0:	2306      	movs	r3, #6
 8011ed2:	e004      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011ed4:	2304      	movs	r3, #4
 8011ed6:	e002      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011ed8:	2302      	movs	r3, #2
 8011eda:	e000      	b.n	8011ede <USART_SetConfig+0x5a6>
 8011edc:	2301      	movs	r3, #1
 8011ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ee4:	005a      	lsls	r2, r3, #1
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	085b      	lsrs	r3, r3, #1
 8011eec:	441a      	add	r2, r3
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ef6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011ef8:	e291      	b.n	801241e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8011efa:	f7f9 f967 	bl	800b1cc <HAL_RCC_GetPCLK2Freq>
 8011efe:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d049      	beq.n	8011f9c <USART_SetConfig+0x664>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d043      	beq.n	8011f98 <USART_SetConfig+0x660>
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f14:	2b02      	cmp	r3, #2
 8011f16:	d03d      	beq.n	8011f94 <USART_SetConfig+0x65c>
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f1c:	2b03      	cmp	r3, #3
 8011f1e:	d032      	beq.n	8011f86 <USART_SetConfig+0x64e>
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f24:	2b04      	cmp	r3, #4
 8011f26:	d02c      	beq.n	8011f82 <USART_SetConfig+0x64a>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f2c:	2b05      	cmp	r3, #5
 8011f2e:	d026      	beq.n	8011f7e <USART_SetConfig+0x646>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f34:	2b06      	cmp	r3, #6
 8011f36:	d020      	beq.n	8011f7a <USART_SetConfig+0x642>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f3c:	2b07      	cmp	r3, #7
 8011f3e:	d01a      	beq.n	8011f76 <USART_SetConfig+0x63e>
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f44:	2b08      	cmp	r3, #8
 8011f46:	d014      	beq.n	8011f72 <USART_SetConfig+0x63a>
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f4c:	2b09      	cmp	r3, #9
 8011f4e:	d00e      	beq.n	8011f6e <USART_SetConfig+0x636>
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f54:	2b0a      	cmp	r3, #10
 8011f56:	d008      	beq.n	8011f6a <USART_SetConfig+0x632>
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f5c:	2b0b      	cmp	r3, #11
 8011f5e:	d102      	bne.n	8011f66 <USART_SetConfig+0x62e>
 8011f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011f64:	e01b      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f66:	2301      	movs	r3, #1
 8011f68:	e019      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f6a:	2380      	movs	r3, #128	@ 0x80
 8011f6c:	e017      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f6e:	2340      	movs	r3, #64	@ 0x40
 8011f70:	e015      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f72:	2320      	movs	r3, #32
 8011f74:	e013      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f76:	2310      	movs	r3, #16
 8011f78:	e011      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f7a:	230c      	movs	r3, #12
 8011f7c:	e00f      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f7e:	230a      	movs	r3, #10
 8011f80:	e00d      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f82:	2308      	movs	r3, #8
 8011f84:	e00b      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f86:	2306      	movs	r3, #6
 8011f88:	e009      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f8a:	bf00      	nop
 8011f8c:	40011c00 	.word	0x40011c00
 8011f90:	58024400 	.word	0x58024400
 8011f94:	2304      	movs	r3, #4
 8011f96:	e002      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f98:	2302      	movs	r3, #2
 8011f9a:	e000      	b.n	8011f9e <USART_SetConfig+0x666>
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011fa4:	005a      	lsls	r2, r3, #1
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	085b      	lsrs	r3, r3, #1
 8011fac:	441a      	add	r2, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011fb6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011fb8:	e231      	b.n	801241e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011fba:	f107 0318 	add.w	r3, r7, #24
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fa ffa2 	bl	800cf08 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8011fc4:	69fa      	ldr	r2, [r7, #28]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d044      	beq.n	8012058 <USART_SetConfig+0x720>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d03e      	beq.n	8012054 <USART_SetConfig+0x71c>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fda:	2b02      	cmp	r3, #2
 8011fdc:	d038      	beq.n	8012050 <USART_SetConfig+0x718>
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fe2:	2b03      	cmp	r3, #3
 8011fe4:	d032      	beq.n	801204c <USART_SetConfig+0x714>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fea:	2b04      	cmp	r3, #4
 8011fec:	d02c      	beq.n	8012048 <USART_SetConfig+0x710>
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ff2:	2b05      	cmp	r3, #5
 8011ff4:	d026      	beq.n	8012044 <USART_SetConfig+0x70c>
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ffa:	2b06      	cmp	r3, #6
 8011ffc:	d020      	beq.n	8012040 <USART_SetConfig+0x708>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012002:	2b07      	cmp	r3, #7
 8012004:	d01a      	beq.n	801203c <USART_SetConfig+0x704>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801200a:	2b08      	cmp	r3, #8
 801200c:	d014      	beq.n	8012038 <USART_SetConfig+0x700>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012012:	2b09      	cmp	r3, #9
 8012014:	d00e      	beq.n	8012034 <USART_SetConfig+0x6fc>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801201a:	2b0a      	cmp	r3, #10
 801201c:	d008      	beq.n	8012030 <USART_SetConfig+0x6f8>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012022:	2b0b      	cmp	r3, #11
 8012024:	d102      	bne.n	801202c <USART_SetConfig+0x6f4>
 8012026:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801202a:	e016      	b.n	801205a <USART_SetConfig+0x722>
 801202c:	2301      	movs	r3, #1
 801202e:	e014      	b.n	801205a <USART_SetConfig+0x722>
 8012030:	2380      	movs	r3, #128	@ 0x80
 8012032:	e012      	b.n	801205a <USART_SetConfig+0x722>
 8012034:	2340      	movs	r3, #64	@ 0x40
 8012036:	e010      	b.n	801205a <USART_SetConfig+0x722>
 8012038:	2320      	movs	r3, #32
 801203a:	e00e      	b.n	801205a <USART_SetConfig+0x722>
 801203c:	2310      	movs	r3, #16
 801203e:	e00c      	b.n	801205a <USART_SetConfig+0x722>
 8012040:	230c      	movs	r3, #12
 8012042:	e00a      	b.n	801205a <USART_SetConfig+0x722>
 8012044:	230a      	movs	r3, #10
 8012046:	e008      	b.n	801205a <USART_SetConfig+0x722>
 8012048:	2308      	movs	r3, #8
 801204a:	e006      	b.n	801205a <USART_SetConfig+0x722>
 801204c:	2306      	movs	r3, #6
 801204e:	e004      	b.n	801205a <USART_SetConfig+0x722>
 8012050:	2304      	movs	r3, #4
 8012052:	e002      	b.n	801205a <USART_SetConfig+0x722>
 8012054:	2302      	movs	r3, #2
 8012056:	e000      	b.n	801205a <USART_SetConfig+0x722>
 8012058:	2301      	movs	r3, #1
 801205a:	fbb2 f3f3 	udiv	r3, r2, r3
 801205e:	005a      	lsls	r2, r3, #1
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	085b      	lsrs	r3, r3, #1
 8012066:	441a      	add	r2, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	685b      	ldr	r3, [r3, #4]
 801206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012070:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8012072:	e1d4      	b.n	801241e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012074:	f107 030c 	add.w	r3, r7, #12
 8012078:	4618      	mov	r0, r3
 801207a:	f7fb f899 	bl	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 801207e:	693a      	ldr	r2, [r7, #16]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012084:	2b00      	cmp	r3, #0
 8012086:	d044      	beq.n	8012112 <USART_SetConfig+0x7da>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801208c:	2b01      	cmp	r3, #1
 801208e:	d03e      	beq.n	801210e <USART_SetConfig+0x7d6>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012094:	2b02      	cmp	r3, #2
 8012096:	d038      	beq.n	801210a <USART_SetConfig+0x7d2>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801209c:	2b03      	cmp	r3, #3
 801209e:	d032      	beq.n	8012106 <USART_SetConfig+0x7ce>
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120a4:	2b04      	cmp	r3, #4
 80120a6:	d02c      	beq.n	8012102 <USART_SetConfig+0x7ca>
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120ac:	2b05      	cmp	r3, #5
 80120ae:	d026      	beq.n	80120fe <USART_SetConfig+0x7c6>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120b4:	2b06      	cmp	r3, #6
 80120b6:	d020      	beq.n	80120fa <USART_SetConfig+0x7c2>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120bc:	2b07      	cmp	r3, #7
 80120be:	d01a      	beq.n	80120f6 <USART_SetConfig+0x7be>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120c4:	2b08      	cmp	r3, #8
 80120c6:	d014      	beq.n	80120f2 <USART_SetConfig+0x7ba>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120cc:	2b09      	cmp	r3, #9
 80120ce:	d00e      	beq.n	80120ee <USART_SetConfig+0x7b6>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d4:	2b0a      	cmp	r3, #10
 80120d6:	d008      	beq.n	80120ea <USART_SetConfig+0x7b2>
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120dc:	2b0b      	cmp	r3, #11
 80120de:	d102      	bne.n	80120e6 <USART_SetConfig+0x7ae>
 80120e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80120e4:	e016      	b.n	8012114 <USART_SetConfig+0x7dc>
 80120e6:	2301      	movs	r3, #1
 80120e8:	e014      	b.n	8012114 <USART_SetConfig+0x7dc>
 80120ea:	2380      	movs	r3, #128	@ 0x80
 80120ec:	e012      	b.n	8012114 <USART_SetConfig+0x7dc>
 80120ee:	2340      	movs	r3, #64	@ 0x40
 80120f0:	e010      	b.n	8012114 <USART_SetConfig+0x7dc>
 80120f2:	2320      	movs	r3, #32
 80120f4:	e00e      	b.n	8012114 <USART_SetConfig+0x7dc>
 80120f6:	2310      	movs	r3, #16
 80120f8:	e00c      	b.n	8012114 <USART_SetConfig+0x7dc>
 80120fa:	230c      	movs	r3, #12
 80120fc:	e00a      	b.n	8012114 <USART_SetConfig+0x7dc>
 80120fe:	230a      	movs	r3, #10
 8012100:	e008      	b.n	8012114 <USART_SetConfig+0x7dc>
 8012102:	2308      	movs	r3, #8
 8012104:	e006      	b.n	8012114 <USART_SetConfig+0x7dc>
 8012106:	2306      	movs	r3, #6
 8012108:	e004      	b.n	8012114 <USART_SetConfig+0x7dc>
 801210a:	2304      	movs	r3, #4
 801210c:	e002      	b.n	8012114 <USART_SetConfig+0x7dc>
 801210e:	2302      	movs	r3, #2
 8012110:	e000      	b.n	8012114 <USART_SetConfig+0x7dc>
 8012112:	2301      	movs	r3, #1
 8012114:	fbb2 f3f3 	udiv	r3, r2, r3
 8012118:	005a      	lsls	r2, r3, #1
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	085b      	lsrs	r3, r3, #1
 8012120:	441a      	add	r2, r3
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	fbb2 f3f3 	udiv	r3, r2, r3
 801212a:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 801212c:	e177      	b.n	801241e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801212e:	4b8a      	ldr	r3, [pc, #552]	@ (8012358 <USART_SetConfig+0xa20>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	f003 0320 	and.w	r3, r3, #32
 8012136:	2b00      	cmp	r3, #0
 8012138:	d05d      	beq.n	80121f6 <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 801213a:	4b87      	ldr	r3, [pc, #540]	@ (8012358 <USART_SetConfig+0xa20>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	08db      	lsrs	r3, r3, #3
 8012140:	f003 0303 	and.w	r3, r3, #3
 8012144:	4a85      	ldr	r2, [pc, #532]	@ (801235c <USART_SetConfig+0xa24>)
 8012146:	40da      	lsrs	r2, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801214c:	2b00      	cmp	r3, #0
 801214e:	d044      	beq.n	80121da <USART_SetConfig+0x8a2>
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012154:	2b01      	cmp	r3, #1
 8012156:	d03e      	beq.n	80121d6 <USART_SetConfig+0x89e>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801215c:	2b02      	cmp	r3, #2
 801215e:	d038      	beq.n	80121d2 <USART_SetConfig+0x89a>
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012164:	2b03      	cmp	r3, #3
 8012166:	d032      	beq.n	80121ce <USART_SetConfig+0x896>
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801216c:	2b04      	cmp	r3, #4
 801216e:	d02c      	beq.n	80121ca <USART_SetConfig+0x892>
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012174:	2b05      	cmp	r3, #5
 8012176:	d026      	beq.n	80121c6 <USART_SetConfig+0x88e>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801217c:	2b06      	cmp	r3, #6
 801217e:	d020      	beq.n	80121c2 <USART_SetConfig+0x88a>
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012184:	2b07      	cmp	r3, #7
 8012186:	d01a      	beq.n	80121be <USART_SetConfig+0x886>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801218c:	2b08      	cmp	r3, #8
 801218e:	d014      	beq.n	80121ba <USART_SetConfig+0x882>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012194:	2b09      	cmp	r3, #9
 8012196:	d00e      	beq.n	80121b6 <USART_SetConfig+0x87e>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801219c:	2b0a      	cmp	r3, #10
 801219e:	d008      	beq.n	80121b2 <USART_SetConfig+0x87a>
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121a4:	2b0b      	cmp	r3, #11
 80121a6:	d102      	bne.n	80121ae <USART_SetConfig+0x876>
 80121a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80121ac:	e016      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121ae:	2301      	movs	r3, #1
 80121b0:	e014      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121b2:	2380      	movs	r3, #128	@ 0x80
 80121b4:	e012      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121b6:	2340      	movs	r3, #64	@ 0x40
 80121b8:	e010      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121ba:	2320      	movs	r3, #32
 80121bc:	e00e      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121be:	2310      	movs	r3, #16
 80121c0:	e00c      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121c2:	230c      	movs	r3, #12
 80121c4:	e00a      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121c6:	230a      	movs	r3, #10
 80121c8:	e008      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121ca:	2308      	movs	r3, #8
 80121cc:	e006      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121ce:	2306      	movs	r3, #6
 80121d0:	e004      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121d2:	2304      	movs	r3, #4
 80121d4:	e002      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121d6:	2302      	movs	r3, #2
 80121d8:	e000      	b.n	80121dc <USART_SetConfig+0x8a4>
 80121da:	2301      	movs	r3, #1
 80121dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80121e0:	005a      	lsls	r2, r3, #1
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	085b      	lsrs	r3, r3, #1
 80121e8:	441a      	add	r2, r3
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80121f2:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 80121f4:	e113      	b.n	801241e <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d044      	beq.n	8012288 <USART_SetConfig+0x950>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012202:	2b01      	cmp	r3, #1
 8012204:	d03e      	beq.n	8012284 <USART_SetConfig+0x94c>
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801220a:	2b02      	cmp	r3, #2
 801220c:	d038      	beq.n	8012280 <USART_SetConfig+0x948>
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012212:	2b03      	cmp	r3, #3
 8012214:	d032      	beq.n	801227c <USART_SetConfig+0x944>
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801221a:	2b04      	cmp	r3, #4
 801221c:	d02c      	beq.n	8012278 <USART_SetConfig+0x940>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012222:	2b05      	cmp	r3, #5
 8012224:	d026      	beq.n	8012274 <USART_SetConfig+0x93c>
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801222a:	2b06      	cmp	r3, #6
 801222c:	d020      	beq.n	8012270 <USART_SetConfig+0x938>
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012232:	2b07      	cmp	r3, #7
 8012234:	d01a      	beq.n	801226c <USART_SetConfig+0x934>
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801223a:	2b08      	cmp	r3, #8
 801223c:	d014      	beq.n	8012268 <USART_SetConfig+0x930>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012242:	2b09      	cmp	r3, #9
 8012244:	d00e      	beq.n	8012264 <USART_SetConfig+0x92c>
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801224a:	2b0a      	cmp	r3, #10
 801224c:	d008      	beq.n	8012260 <USART_SetConfig+0x928>
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012252:	2b0b      	cmp	r3, #11
 8012254:	d102      	bne.n	801225c <USART_SetConfig+0x924>
 8012256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801225a:	e016      	b.n	801228a <USART_SetConfig+0x952>
 801225c:	2301      	movs	r3, #1
 801225e:	e014      	b.n	801228a <USART_SetConfig+0x952>
 8012260:	2380      	movs	r3, #128	@ 0x80
 8012262:	e012      	b.n	801228a <USART_SetConfig+0x952>
 8012264:	2340      	movs	r3, #64	@ 0x40
 8012266:	e010      	b.n	801228a <USART_SetConfig+0x952>
 8012268:	2320      	movs	r3, #32
 801226a:	e00e      	b.n	801228a <USART_SetConfig+0x952>
 801226c:	2310      	movs	r3, #16
 801226e:	e00c      	b.n	801228a <USART_SetConfig+0x952>
 8012270:	230c      	movs	r3, #12
 8012272:	e00a      	b.n	801228a <USART_SetConfig+0x952>
 8012274:	230a      	movs	r3, #10
 8012276:	e008      	b.n	801228a <USART_SetConfig+0x952>
 8012278:	2308      	movs	r3, #8
 801227a:	e006      	b.n	801228a <USART_SetConfig+0x952>
 801227c:	2306      	movs	r3, #6
 801227e:	e004      	b.n	801228a <USART_SetConfig+0x952>
 8012280:	2304      	movs	r3, #4
 8012282:	e002      	b.n	801228a <USART_SetConfig+0x952>
 8012284:	2302      	movs	r3, #2
 8012286:	e000      	b.n	801228a <USART_SetConfig+0x952>
 8012288:	2301      	movs	r3, #1
 801228a:	4a34      	ldr	r2, [pc, #208]	@ (801235c <USART_SetConfig+0xa24>)
 801228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012290:	005a      	lsls	r2, r3, #1
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	685b      	ldr	r3, [r3, #4]
 8012296:	085b      	lsrs	r3, r3, #1
 8012298:	441a      	add	r2, r3
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80122a2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80122a4:	e0bb      	b.n	801241e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d044      	beq.n	8012338 <USART_SetConfig+0xa00>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	d03e      	beq.n	8012334 <USART_SetConfig+0x9fc>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	d038      	beq.n	8012330 <USART_SetConfig+0x9f8>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122c2:	2b03      	cmp	r3, #3
 80122c4:	d032      	beq.n	801232c <USART_SetConfig+0x9f4>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122ca:	2b04      	cmp	r3, #4
 80122cc:	d02c      	beq.n	8012328 <USART_SetConfig+0x9f0>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122d2:	2b05      	cmp	r3, #5
 80122d4:	d026      	beq.n	8012324 <USART_SetConfig+0x9ec>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122da:	2b06      	cmp	r3, #6
 80122dc:	d020      	beq.n	8012320 <USART_SetConfig+0x9e8>
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122e2:	2b07      	cmp	r3, #7
 80122e4:	d01a      	beq.n	801231c <USART_SetConfig+0x9e4>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122ea:	2b08      	cmp	r3, #8
 80122ec:	d014      	beq.n	8012318 <USART_SetConfig+0x9e0>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122f2:	2b09      	cmp	r3, #9
 80122f4:	d00e      	beq.n	8012314 <USART_SetConfig+0x9dc>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122fa:	2b0a      	cmp	r3, #10
 80122fc:	d008      	beq.n	8012310 <USART_SetConfig+0x9d8>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012302:	2b0b      	cmp	r3, #11
 8012304:	d102      	bne.n	801230c <USART_SetConfig+0x9d4>
 8012306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801230a:	e016      	b.n	801233a <USART_SetConfig+0xa02>
 801230c:	2301      	movs	r3, #1
 801230e:	e014      	b.n	801233a <USART_SetConfig+0xa02>
 8012310:	2380      	movs	r3, #128	@ 0x80
 8012312:	e012      	b.n	801233a <USART_SetConfig+0xa02>
 8012314:	2340      	movs	r3, #64	@ 0x40
 8012316:	e010      	b.n	801233a <USART_SetConfig+0xa02>
 8012318:	2320      	movs	r3, #32
 801231a:	e00e      	b.n	801233a <USART_SetConfig+0xa02>
 801231c:	2310      	movs	r3, #16
 801231e:	e00c      	b.n	801233a <USART_SetConfig+0xa02>
 8012320:	230c      	movs	r3, #12
 8012322:	e00a      	b.n	801233a <USART_SetConfig+0xa02>
 8012324:	230a      	movs	r3, #10
 8012326:	e008      	b.n	801233a <USART_SetConfig+0xa02>
 8012328:	2308      	movs	r3, #8
 801232a:	e006      	b.n	801233a <USART_SetConfig+0xa02>
 801232c:	2306      	movs	r3, #6
 801232e:	e004      	b.n	801233a <USART_SetConfig+0xa02>
 8012330:	2304      	movs	r3, #4
 8012332:	e002      	b.n	801233a <USART_SetConfig+0xa02>
 8012334:	2302      	movs	r3, #2
 8012336:	e000      	b.n	801233a <USART_SetConfig+0xa02>
 8012338:	2301      	movs	r3, #1
 801233a:	4a09      	ldr	r2, [pc, #36]	@ (8012360 <USART_SetConfig+0xa28>)
 801233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012340:	005a      	lsls	r2, r3, #1
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	085b      	lsrs	r3, r3, #1
 8012348:	441a      	add	r2, r3
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012352:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8012354:	e063      	b.n	801241e <USART_SetConfig+0xae6>
 8012356:	bf00      	nop
 8012358:	58024400 	.word	0x58024400
 801235c:	03d09000 	.word	0x03d09000
 8012360:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012368:	2b00      	cmp	r3, #0
 801236a:	d044      	beq.n	80123f6 <USART_SetConfig+0xabe>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012370:	2b01      	cmp	r3, #1
 8012372:	d03e      	beq.n	80123f2 <USART_SetConfig+0xaba>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012378:	2b02      	cmp	r3, #2
 801237a:	d038      	beq.n	80123ee <USART_SetConfig+0xab6>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012380:	2b03      	cmp	r3, #3
 8012382:	d032      	beq.n	80123ea <USART_SetConfig+0xab2>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012388:	2b04      	cmp	r3, #4
 801238a:	d02c      	beq.n	80123e6 <USART_SetConfig+0xaae>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012390:	2b05      	cmp	r3, #5
 8012392:	d026      	beq.n	80123e2 <USART_SetConfig+0xaaa>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012398:	2b06      	cmp	r3, #6
 801239a:	d020      	beq.n	80123de <USART_SetConfig+0xaa6>
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123a0:	2b07      	cmp	r3, #7
 80123a2:	d01a      	beq.n	80123da <USART_SetConfig+0xaa2>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123a8:	2b08      	cmp	r3, #8
 80123aa:	d014      	beq.n	80123d6 <USART_SetConfig+0xa9e>
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123b0:	2b09      	cmp	r3, #9
 80123b2:	d00e      	beq.n	80123d2 <USART_SetConfig+0xa9a>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123b8:	2b0a      	cmp	r3, #10
 80123ba:	d008      	beq.n	80123ce <USART_SetConfig+0xa96>
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123c0:	2b0b      	cmp	r3, #11
 80123c2:	d102      	bne.n	80123ca <USART_SetConfig+0xa92>
 80123c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80123c8:	e016      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123ca:	2301      	movs	r3, #1
 80123cc:	e014      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123ce:	2380      	movs	r3, #128	@ 0x80
 80123d0:	e012      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123d2:	2340      	movs	r3, #64	@ 0x40
 80123d4:	e010      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123d6:	2320      	movs	r3, #32
 80123d8:	e00e      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123da:	2310      	movs	r3, #16
 80123dc:	e00c      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123de:	230c      	movs	r3, #12
 80123e0:	e00a      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123e2:	230a      	movs	r3, #10
 80123e4:	e008      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123e6:	2308      	movs	r3, #8
 80123e8:	e006      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123ea:	2306      	movs	r3, #6
 80123ec:	e004      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123ee:	2304      	movs	r3, #4
 80123f0:	e002      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123f2:	2302      	movs	r3, #2
 80123f4:	e000      	b.n	80123f8 <USART_SetConfig+0xac0>
 80123f6:	2301      	movs	r3, #1
 80123f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80123fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012400:	005a      	lsls	r2, r3, #1
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	685b      	ldr	r3, [r3, #4]
 8012406:	085b      	lsrs	r3, r3, #1
 8012408:	441a      	add	r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012412:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8012414:	e003      	b.n	801241e <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 8012416:	2301      	movs	r3, #1
 8012418:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 801241c:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 801241e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012420:	2b0f      	cmp	r3, #15
 8012422:	d916      	bls.n	8012452 <USART_SetConfig+0xb1a>
 8012424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801242a:	d212      	bcs.n	8012452 <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801242c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801242e:	b29b      	uxth	r3, r3
 8012430:	f023 030f 	bic.w	r3, r3, #15
 8012434:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012438:	085b      	lsrs	r3, r3, #1
 801243a:	b29b      	uxth	r3, r3
 801243c:	f003 0307 	and.w	r3, r3, #7
 8012440:	b29a      	uxth	r2, r3
 8012442:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012444:	4313      	orrs	r3, r2
 8012446:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801244e:	60da      	str	r2, [r3, #12]
 8012450:	e002      	b.n	8012458 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 8012452:	2301      	movs	r3, #1
 8012454:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2201      	movs	r2, #1
 801245c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2201      	movs	r2, #1
 8012462:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2200      	movs	r2, #0
 8012468:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2200      	movs	r2, #0
 801246e:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8012470:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 8012474:	4618      	mov	r0, r3
 8012476:	3738      	adds	r7, #56	@ 0x38
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b086      	sub	sp, #24
 8012480:	af02      	add	r7, sp, #8
 8012482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801248a:	f7f6 fdc7 	bl	800901c <HAL_GetTick>
 801248e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	f003 0308 	and.w	r3, r3, #8
 801249a:	2b08      	cmp	r3, #8
 801249c:	d10e      	bne.n	80124bc <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801249e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80124a2:	9300      	str	r3, [sp, #0]
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2200      	movs	r2, #0
 80124a8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7ff fa0d 	bl	80118cc <USART_WaitOnFlagUntilTimeout>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d001      	beq.n	80124bc <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80124b8:	2303      	movs	r3, #3
 80124ba:	e01e      	b.n	80124fa <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f003 0304 	and.w	r3, r3, #4
 80124c6:	2b04      	cmp	r3, #4
 80124c8:	d10e      	bne.n	80124e8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80124ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80124ce:	9300      	str	r3, [sp, #0]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2200      	movs	r2, #0
 80124d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f7ff f9f7 	bl	80118cc <USART_WaitOnFlagUntilTimeout>
 80124de:	4603      	mov	r3, r0
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d001      	beq.n	80124e8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80124e4:	2303      	movs	r3, #3
 80124e6:	e008      	b.n	80124fa <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2201      	movs	r2, #1
 80124ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2200      	movs	r2, #0
 80124f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80124f8:	2300      	movs	r3, #0
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3710      	adds	r7, #16
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}

08012502 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 8012502:	b480      	push	{r7}
 8012504:	b085      	sub	sp, #20
 8012506:	af00      	add	r7, sp, #0
 8012508:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012510:	2b01      	cmp	r3, #1
 8012512:	d101      	bne.n	8012518 <HAL_USARTEx_EnableSlaveMode+0x16>
 8012514:	2302      	movs	r3, #2
 8012516:	e043      	b.n	80125a0 <HAL_USARTEx_EnableSlaveMode+0x9e>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2201      	movs	r2, #1
 801251c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2202      	movs	r2, #2
 8012524:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	f022 0201 	bic.w	r2, r2, #1
 801253e:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	685a      	ldr	r2, [r3, #4]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801254e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	689a      	ldr	r2, [r3, #8]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801255e:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	685a      	ldr	r2, [r3, #4]
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	f042 0201 	orr.w	r2, r2, #1
 801256e:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	68fa      	ldr	r2, [r7, #12]
 8012576:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2201      	movs	r2, #1
 801257c:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2201      	movs	r2, #1
 8012582:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	f042 0201 	orr.w	r2, r2, #1
 8012594:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2200      	movs	r2, #0
 801259a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 801259e:	2300      	movs	r3, #0
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	3714      	adds	r7, #20
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr

080125ac <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b085      	sub	sp, #20
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d101      	bne.n	80125c4 <HAL_USARTEx_ConfigNSS+0x18>
 80125c0:	2302      	movs	r3, #2
 80125c2:	e02a      	b.n	801261a <HAL_USARTEx_ConfigNSS+0x6e>
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2201      	movs	r2, #1
 80125c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2202      	movs	r2, #2
 80125d0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f022 0201 	bic.w	r2, r2, #1
 80125ea:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	f023 0108 	bic.w	r1, r3, #8
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	683a      	ldr	r2, [r7, #0]
 80125fc:	430a      	orrs	r2, r1
 80125fe:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	68fa      	ldr	r2, [r7, #12]
 8012606:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2201      	movs	r2, #1
 801260c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2200      	movs	r2, #0
 8012614:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012618:	2300      	movs	r3, #0
}
 801261a:	4618      	mov	r0, r3
 801261c:	3714      	adds	r7, #20
 801261e:	46bd      	mov	sp, r7
 8012620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012624:	4770      	bx	lr

08012626 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8012626:	b480      	push	{r7}
 8012628:	b085      	sub	sp, #20
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012634:	2b01      	cmp	r3, #1
 8012636:	d101      	bne.n	801263c <HAL_USARTEx_DisableFifoMode+0x16>
 8012638:	2302      	movs	r3, #2
 801263a:	e027      	b.n	801268c <HAL_USARTEx_DisableFifoMode+0x66>
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2201      	movs	r2, #1
 8012640:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2202      	movs	r2, #2
 8012648:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	681a      	ldr	r2, [r3, #0]
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	f022 0201 	bic.w	r2, r2, #1
 8012662:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801266a:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2200      	movs	r2, #0
 8012670:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2201      	movs	r2, #1
 801267e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2200      	movs	r2, #0
 8012686:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 801268a:	2300      	movs	r3, #0
}
 801268c:	4618      	mov	r0, r3
 801268e:	3714      	adds	r7, #20
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr

08012698 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80126a8:	2b01      	cmp	r3, #1
 80126aa:	d101      	bne.n	80126b0 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80126ac:	2302      	movs	r3, #2
 80126ae:	e02d      	b.n	801270c <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2201      	movs	r2, #1
 80126b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2202      	movs	r2, #2
 80126bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	f022 0201 	bic.w	r2, r2, #1
 80126d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	689b      	ldr	r3, [r3, #8]
 80126de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	683a      	ldr	r2, [r7, #0]
 80126e8:	430a      	orrs	r2, r1
 80126ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f000 f84f 	bl	8012790 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2201      	movs	r2, #1
 80126fe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2200      	movs	r2, #0
 8012706:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 801270a:	2300      	movs	r3, #0
}
 801270c:	4618      	mov	r0, r3
 801270e:	3710      	adds	r7, #16
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b084      	sub	sp, #16
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012724:	2b01      	cmp	r3, #1
 8012726:	d101      	bne.n	801272c <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8012728:	2302      	movs	r3, #2
 801272a:	e02d      	b.n	8012788 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2201      	movs	r2, #1
 8012730:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2202      	movs	r2, #2
 8012738:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	681a      	ldr	r2, [r3, #0]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	f022 0201 	bic.w	r2, r2, #1
 8012752:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	689b      	ldr	r3, [r3, #8]
 801275a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	683a      	ldr	r2, [r7, #0]
 8012764:	430a      	orrs	r2, r1
 8012766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f000 f811 	bl	8012790 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	68fa      	ldr	r2, [r7, #12]
 8012774:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2201      	movs	r2, #1
 801277a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2200      	movs	r2, #0
 8012782:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012786:	2300      	movs	r3, #0
}
 8012788:	4618      	mov	r0, r3
 801278a:	3710      	adds	r7, #16
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8012790:	b480      	push	{r7}
 8012792:	b085      	sub	sp, #20
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801279c:	2b00      	cmp	r3, #0
 801279e:	d106      	bne.n	80127ae <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2201      	movs	r2, #1
 80127a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2201      	movs	r2, #1
 80127aa:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80127ac:	e02f      	b.n	801280e <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80127ae:	2310      	movs	r3, #16
 80127b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80127b2:	2310      	movs	r3, #16
 80127b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80127bc:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	f003 0307 	and.w	r3, r3, #7
 80127c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80127cc:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	f003 0307 	and.w	r3, r3, #7
 80127d4:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80127d6:	7bbb      	ldrb	r3, [r7, #14]
 80127d8:	7b3a      	ldrb	r2, [r7, #12]
 80127da:	4910      	ldr	r1, [pc, #64]	@ (801281c <USARTEx_SetNbDataToProcess+0x8c>)
 80127dc:	5c8a      	ldrb	r2, [r1, r2]
 80127de:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 80127e2:	7b3a      	ldrb	r2, [r7, #12]
 80127e4:	490e      	ldr	r1, [pc, #56]	@ (8012820 <USARTEx_SetNbDataToProcess+0x90>)
 80127e6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80127e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80127ec:	b29a      	uxth	r2, r3
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80127f2:	7bfb      	ldrb	r3, [r7, #15]
 80127f4:	7b7a      	ldrb	r2, [r7, #13]
 80127f6:	4909      	ldr	r1, [pc, #36]	@ (801281c <USARTEx_SetNbDataToProcess+0x8c>)
 80127f8:	5c8a      	ldrb	r2, [r1, r2]
 80127fa:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80127fe:	7b7a      	ldrb	r2, [r7, #13]
 8012800:	4907      	ldr	r1, [pc, #28]	@ (8012820 <USARTEx_SetNbDataToProcess+0x90>)
 8012802:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012804:	fb93 f3f2 	sdiv	r3, r3, r2
 8012808:	b29a      	uxth	r2, r3
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 801280e:	bf00      	nop
 8012810:	3714      	adds	r7, #20
 8012812:	46bd      	mov	sp, r7
 8012814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012818:	4770      	bx	lr
 801281a:	bf00      	nop
 801281c:	08018234 	.word	0x08018234
 8012820:	0801823c 	.word	0x0801823c

08012824 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012824:	b084      	sub	sp, #16
 8012826:	b480      	push	{r7}
 8012828:	b085      	sub	sp, #20
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
 801282e:	f107 001c 	add.w	r0, r7, #28
 8012832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012836:	2300      	movs	r3, #0
 8012838:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801283a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801283c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801283e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8012842:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8012846:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801284a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801284c:	68fa      	ldr	r2, [r7, #12]
 801284e:	4313      	orrs	r3, r2
 8012850:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	685a      	ldr	r2, [r3, #4]
 8012856:	4b07      	ldr	r3, [pc, #28]	@ (8012874 <SDMMC_Init+0x50>)
 8012858:	4013      	ands	r3, r2
 801285a:	68fa      	ldr	r2, [r7, #12]
 801285c:	431a      	orrs	r2, r3
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012862:	2300      	movs	r3, #0
}
 8012864:	4618      	mov	r0, r3
 8012866:	3714      	adds	r7, #20
 8012868:	46bd      	mov	sp, r7
 801286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286e:	b004      	add	sp, #16
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop
 8012874:	ffc02c00 	.word	0xffc02c00

08012878 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012878:	b480      	push	{r7}
 801287a:	b083      	sub	sp, #12
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8012886:	4618      	mov	r0, r3
 8012888:	370c      	adds	r7, #12
 801288a:	46bd      	mov	sp, r7
 801288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012890:	4770      	bx	lr

08012892 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012892:	b480      	push	{r7}
 8012894:	b083      	sub	sp, #12
 8012896:	af00      	add	r7, sp, #0
 8012898:	6078      	str	r0, [r7, #4]
 801289a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80128a6:	2300      	movs	r3, #0
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	370c      	adds	r7, #12
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr

080128b4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	f043 0203 	orr.w	r2, r3, #3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80128c8:	2300      	movs	r3, #0
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	370c      	adds	r7, #12
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr

080128d6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80128d6:	b480      	push	{r7}
 80128d8:	b083      	sub	sp, #12
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	f003 0303 	and.w	r3, r3, #3
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	370c      	adds	r7, #12
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr
	...

080128f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80128f4:	b480      	push	{r7}
 80128f6:	b085      	sub	sp, #20
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80128fe:	2300      	movs	r3, #0
 8012900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012912:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012918:	431a      	orrs	r2, r3
                       Command->CPSM);
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801291e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012920:	68fa      	ldr	r2, [r7, #12]
 8012922:	4313      	orrs	r3, r2
 8012924:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	68da      	ldr	r2, [r3, #12]
 801292a:	4b06      	ldr	r3, [pc, #24]	@ (8012944 <SDMMC_SendCommand+0x50>)
 801292c:	4013      	ands	r3, r2
 801292e:	68fa      	ldr	r2, [r7, #12]
 8012930:	431a      	orrs	r2, r3
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012936:	2300      	movs	r3, #0
}
 8012938:	4618      	mov	r0, r3
 801293a:	3714      	adds	r7, #20
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr
 8012944:	fffee0c0 	.word	0xfffee0c0

08012948 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012948:	b480      	push	{r7}
 801294a:	b083      	sub	sp, #12
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	691b      	ldr	r3, [r3, #16]
 8012954:	b2db      	uxtb	r3, r3
}
 8012956:	4618      	mov	r0, r3
 8012958:	370c      	adds	r7, #12
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr

08012962 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012962:	b480      	push	{r7}
 8012964:	b085      	sub	sp, #20
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
 801296a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	3314      	adds	r3, #20
 8012970:	461a      	mov	r2, r3
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	4413      	add	r3, r2
 8012976:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
}
 801297c:	4618      	mov	r0, r3
 801297e:	3714      	adds	r7, #20
 8012980:	46bd      	mov	sp, r7
 8012982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012986:	4770      	bx	lr

08012988 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012988:	b480      	push	{r7}
 801298a:	b085      	sub	sp, #20
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012992:	2300      	movs	r3, #0
 8012994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	681a      	ldr	r2, [r3, #0]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	685a      	ldr	r2, [r3, #4]
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80129ae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80129b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80129ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80129bc:	68fa      	ldr	r2, [r7, #12]
 80129be:	4313      	orrs	r3, r2
 80129c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	431a      	orrs	r2, r3
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80129d2:	2300      	movs	r3, #0

}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3714      	adds	r7, #20
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr

080129e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b088      	sub	sp, #32
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80129ee:	2310      	movs	r3, #16
 80129f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80129f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129f8:	2300      	movs	r3, #0
 80129fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012a00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a02:	f107 0308 	add.w	r3, r7, #8
 8012a06:	4619      	mov	r1, r3
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f7ff ff73 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012a12:	2110      	movs	r1, #16
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f000 fa5f 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a1c:	69fb      	ldr	r3, [r7, #28]
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3720      	adds	r7, #32
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b088      	sub	sp, #32
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
 8012a2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012a34:	2311      	movs	r3, #17
 8012a36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012a3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012a46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a48:	f107 0308 	add.w	r3, r7, #8
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f7ff ff50 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012a58:	2111      	movs	r1, #17
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f000 fa3c 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a62:	69fb      	ldr	r3, [r7, #28]
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3720      	adds	r7, #32
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b088      	sub	sp, #32
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012a7a:	2312      	movs	r3, #18
 8012a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012a82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a84:	2300      	movs	r3, #0
 8012a86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012a8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a8e:	f107 0308 	add.w	r3, r7, #8
 8012a92:	4619      	mov	r1, r3
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f7ff ff2d 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012a9e:	2112      	movs	r1, #18
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f000 fa19 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012aa8:	69fb      	ldr	r3, [r7, #28]
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3720      	adds	r7, #32
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}

08012ab2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012ab2:	b580      	push	{r7, lr}
 8012ab4:	b088      	sub	sp, #32
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	6078      	str	r0, [r7, #4]
 8012aba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012ac0:	2318      	movs	r3, #24
 8012ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012aca:	2300      	movs	r3, #0
 8012acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012ad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ad4:	f107 0308 	add.w	r3, r7, #8
 8012ad8:	4619      	mov	r1, r3
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f7ff ff0a 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012ae4:	2118      	movs	r1, #24
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f000 f9f6 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012aee:	69fb      	ldr	r3, [r7, #28]
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3720      	adds	r7, #32
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b088      	sub	sp, #32
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012b06:	2319      	movs	r3, #25
 8012b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b10:	2300      	movs	r3, #0
 8012b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012b18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b1a:	f107 0308 	add.w	r3, r7, #8
 8012b1e:	4619      	mov	r1, r3
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7ff fee7 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012b2a:	2119      	movs	r1, #25
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f000 f9d3 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b34:	69fb      	ldr	r3, [r7, #28]
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3720      	adds	r7, #32
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
	...

08012b40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b088      	sub	sp, #32
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012b48:	2300      	movs	r3, #0
 8012b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012b4c:	230c      	movs	r3, #12
 8012b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b56:	2300      	movs	r3, #0
 8012b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012b5e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	68db      	ldr	r3, [r3, #12]
 8012b64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	68db      	ldr	r3, [r3, #12]
 8012b70:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b78:	f107 0308 	add.w	r3, r7, #8
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f7ff feb8 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012b84:	4a0b      	ldr	r2, [pc, #44]	@ (8012bb4 <SDMMC_CmdStopTransfer+0x74>)
 8012b86:	210c      	movs	r1, #12
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f000 f9a5 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012b8e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012ba2:	d101      	bne.n	8012ba8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012ba8:	69fb      	ldr	r3, [r7, #28]
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3720      	adds	r7, #32
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	05f5e100 	.word	0x05f5e100

08012bb8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b088      	sub	sp, #32
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012bc6:	2307      	movs	r3, #7
 8012bc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012bd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bda:	f107 0308 	add.w	r3, r7, #8
 8012bde:	4619      	mov	r1, r3
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f7ff fe87 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012bea:	2107      	movs	r1, #7
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f000 f973 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012bf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bf4:	69fb      	ldr	r3, [r7, #28]
}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	3720      	adds	r7, #32
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}

08012bfe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012bfe:	b580      	push	{r7, lr}
 8012c00:	b088      	sub	sp, #32
 8012c02:	af00      	add	r7, sp, #0
 8012c04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012c06:	2300      	movs	r3, #0
 8012c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c12:	2300      	movs	r3, #0
 8012c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012c1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c1c:	f107 0308 	add.w	r3, r7, #8
 8012c20:	4619      	mov	r1, r3
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f7ff fe66 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f000 fb97 	bl	801335c <SDMMC_GetCmdError>
 8012c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c30:	69fb      	ldr	r3, [r7, #28]
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3720      	adds	r7, #32
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012c3a:	b580      	push	{r7, lr}
 8012c3c:	b088      	sub	sp, #32
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012c42:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8012c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012c48:	2308      	movs	r3, #8
 8012c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c52:	2300      	movs	r3, #0
 8012c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012c5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c5c:	f107 0308 	add.w	r3, r7, #8
 8012c60:	4619      	mov	r1, r3
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f7ff fe46 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f000 fb29 	bl	80132c0 <SDMMC_GetCmdResp7>
 8012c6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c70:	69fb      	ldr	r3, [r7, #28]
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3720      	adds	r7, #32
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}

08012c7a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	b088      	sub	sp, #32
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
 8012c82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012c88:	2337      	movs	r3, #55	@ 0x37
 8012c8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c92:	2300      	movs	r3, #0
 8012c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012c9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c9c:	f107 0308 	add.w	r3, r7, #8
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f7ff fe26 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012cac:	2137      	movs	r1, #55	@ 0x37
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f000 f912 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cb6:	69fb      	ldr	r3, [r7, #28]
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3720      	adds	r7, #32
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}

08012cc0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b088      	sub	sp, #32
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012cce:	2329      	movs	r3, #41	@ 0x29
 8012cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012cd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012ce0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ce2:	f107 0308 	add.w	r3, r7, #8
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f7ff fe03 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f000 fa2e 	bl	8013150 <SDMMC_GetCmdResp3>
 8012cf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cf6:	69fb      	ldr	r3, [r7, #28]
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3720      	adds	r7, #32
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b088      	sub	sp, #32
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012d0e:	2306      	movs	r3, #6
 8012d10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d18:	2300      	movs	r3, #0
 8012d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d22:	f107 0308 	add.w	r3, r7, #8
 8012d26:	4619      	mov	r1, r3
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff fde3 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012d32:	2106      	movs	r1, #6
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f000 f8cf 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d3c:	69fb      	ldr	r3, [r7, #28]
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3720      	adds	r7, #32
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}

08012d46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012d46:	b580      	push	{r7, lr}
 8012d48:	b088      	sub	sp, #32
 8012d4a:	af00      	add	r7, sp, #0
 8012d4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012d52:	2333      	movs	r3, #51	@ 0x33
 8012d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d66:	f107 0308 	add.w	r3, r7, #8
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f7ff fdc1 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012d76:	2133      	movs	r1, #51	@ 0x33
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f000 f8ad 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d80:	69fb      	ldr	r3, [r7, #28]
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	3720      	adds	r7, #32
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}

08012d8a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012d8a:	b580      	push	{r7, lr}
 8012d8c:	b088      	sub	sp, #32
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012d92:	2300      	movs	r3, #0
 8012d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012d96:	2302      	movs	r3, #2
 8012d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012d9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8012d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012da0:	2300      	movs	r3, #0
 8012da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012da4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012da8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012daa:	f107 0308 	add.w	r3, r7, #8
 8012dae:	4619      	mov	r1, r3
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f7ff fd9f 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f000 f980 	bl	80130bc <SDMMC_GetCmdResp2>
 8012dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012dbe:	69fb      	ldr	r3, [r7, #28]
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3720      	adds	r7, #32
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b088      	sub	sp, #32
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012dd6:	2309      	movs	r3, #9
 8012dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012dda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8012dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012de0:	2300      	movs	r3, #0
 8012de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012de8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012dea:	f107 0308 	add.w	r3, r7, #8
 8012dee:	4619      	mov	r1, r3
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f7ff fd7f 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f000 f960 	bl	80130bc <SDMMC_GetCmdResp2>
 8012dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012dfe:	69fb      	ldr	r3, [r7, #28]
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3720      	adds	r7, #32
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b088      	sub	sp, #32
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012e12:	2300      	movs	r3, #0
 8012e14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012e16:	2303      	movs	r3, #3
 8012e18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e20:	2300      	movs	r3, #0
 8012e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e2a:	f107 0308 	add.w	r3, r7, #8
 8012e2e:	4619      	mov	r1, r3
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f7ff fd5f 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012e36:	683a      	ldr	r2, [r7, #0]
 8012e38:	2103      	movs	r1, #3
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f000 f9c8 	bl	80131d0 <SDMMC_GetCmdResp6>
 8012e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e42:	69fb      	ldr	r3, [r7, #28]
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3720      	adds	r7, #32
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b088      	sub	sp, #32
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012e5a:	230d      	movs	r3, #13
 8012e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e64:	2300      	movs	r3, #0
 8012e66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e6e:	f107 0308 	add.w	r3, r7, #8
 8012e72:	4619      	mov	r1, r3
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f7ff fd3d 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012e7e:	210d      	movs	r1, #13
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f000 f829 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012e86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e88:	69fb      	ldr	r3, [r7, #28]
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3720      	adds	r7, #32
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}

08012e92 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012e92:	b580      	push	{r7, lr}
 8012e94:	b088      	sub	sp, #32
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012e9e:	230d      	movs	r3, #13
 8012ea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ea2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012ea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012eb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012eb2:	f107 0308 	add.w	r3, r7, #8
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7ff fd1b 	bl	80128f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012ec2:	210d      	movs	r1, #13
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f000 f807 	bl	8012ed8 <SDMMC_GetCmdResp1>
 8012eca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ecc:	69fb      	ldr	r3, [r7, #28]
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3720      	adds	r7, #32
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
	...

08012ed8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b088      	sub	sp, #32
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	460b      	mov	r3, r1
 8012ee2:	607a      	str	r2, [r7, #4]
 8012ee4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012ee6:	4b70      	ldr	r3, [pc, #448]	@ (80130a8 <SDMMC_GetCmdResp1+0x1d0>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4a70      	ldr	r2, [pc, #448]	@ (80130ac <SDMMC_GetCmdResp1+0x1d4>)
 8012eec:	fba2 2303 	umull	r2, r3, r2, r3
 8012ef0:	0a5a      	lsrs	r2, r3, #9
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	fb02 f303 	mul.w	r3, r2, r3
 8012ef8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012efa:	69fb      	ldr	r3, [r7, #28]
 8012efc:	1e5a      	subs	r2, r3, #1
 8012efe:	61fa      	str	r2, [r7, #28]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d102      	bne.n	8012f0a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012f04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012f08:	e0c9      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f0e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012f10:	69ba      	ldr	r2, [r7, #24]
 8012f12:	4b67      	ldr	r3, [pc, #412]	@ (80130b0 <SDMMC_GetCmdResp1+0x1d8>)
 8012f14:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d0ef      	beq.n	8012efa <SDMMC_GetCmdResp1+0x22>
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d1ea      	bne.n	8012efa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f28:	f003 0304 	and.w	r3, r3, #4
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d004      	beq.n	8012f3a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	2204      	movs	r2, #4
 8012f34:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012f36:	2304      	movs	r3, #4
 8012f38:	e0b1      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f3e:	f003 0301 	and.w	r3, r3, #1
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d004      	beq.n	8012f50 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	2201      	movs	r2, #1
 8012f4a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e0a6      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	4a58      	ldr	r2, [pc, #352]	@ (80130b4 <SDMMC_GetCmdResp1+0x1dc>)
 8012f54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012f56:	68f8      	ldr	r0, [r7, #12]
 8012f58:	f7ff fcf6 	bl	8012948 <SDMMC_GetCommandResponse>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	461a      	mov	r2, r3
 8012f60:	7afb      	ldrb	r3, [r7, #11]
 8012f62:	4293      	cmp	r3, r2
 8012f64:	d001      	beq.n	8012f6a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f66:	2301      	movs	r3, #1
 8012f68:	e099      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	68f8      	ldr	r0, [r7, #12]
 8012f6e:	f7ff fcf8 	bl	8012962 <SDMMC_GetResponse>
 8012f72:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012f74:	697a      	ldr	r2, [r7, #20]
 8012f76:	4b50      	ldr	r3, [pc, #320]	@ (80130b8 <SDMMC_GetCmdResp1+0x1e0>)
 8012f78:	4013      	ands	r3, r2
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d101      	bne.n	8012f82 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	e08d      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	da02      	bge.n	8012f8e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012f88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012f8c:	e087      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d001      	beq.n	8012f9c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012f98:	2340      	movs	r3, #64	@ 0x40
 8012f9a:	e080      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012f9c:	697b      	ldr	r3, [r7, #20]
 8012f9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d001      	beq.n	8012faa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012fa6:	2380      	movs	r3, #128	@ 0x80
 8012fa8:	e079      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d002      	beq.n	8012fba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012fb8:	e071      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d002      	beq.n	8012fca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012fc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012fc8:	e069      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d002      	beq.n	8012fda <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012fd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012fd8:	e061      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d002      	beq.n	8012fea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012fe4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012fe8:	e059      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d002      	beq.n	8012ffa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012ff8:	e051      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013000:	2b00      	cmp	r3, #0
 8013002:	d002      	beq.n	801300a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013004:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013008:	e049      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8013010:	2b00      	cmp	r3, #0
 8013012:	d002      	beq.n	801301a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013014:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8013018:	e041      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013020:	2b00      	cmp	r3, #0
 8013022:	d002      	beq.n	801302a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013024:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013028:	e039      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013030:	2b00      	cmp	r3, #0
 8013032:	d002      	beq.n	801303a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013034:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8013038:	e031      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013040:	2b00      	cmp	r3, #0
 8013042:	d002      	beq.n	801304a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013044:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8013048:	e029      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013050:	2b00      	cmp	r3, #0
 8013052:	d002      	beq.n	801305a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013054:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013058:	e021      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013060:	2b00      	cmp	r3, #0
 8013062:	d002      	beq.n	801306a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013064:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013068:	e019      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013070:	2b00      	cmp	r3, #0
 8013072:	d002      	beq.n	801307a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013074:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8013078:	e011      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013080:	2b00      	cmp	r3, #0
 8013082:	d002      	beq.n	801308a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013084:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8013088:	e009      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	f003 0308 	and.w	r3, r3, #8
 8013090:	2b00      	cmp	r3, #0
 8013092:	d002      	beq.n	801309a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013094:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8013098:	e001      	b.n	801309e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801309a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3720      	adds	r7, #32
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	24000158 	.word	0x24000158
 80130ac:	10624dd3 	.word	0x10624dd3
 80130b0:	00200045 	.word	0x00200045
 80130b4:	002000c5 	.word	0x002000c5
 80130b8:	fdffe008 	.word	0xfdffe008

080130bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80130bc:	b480      	push	{r7}
 80130be:	b085      	sub	sp, #20
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80130c4:	4b1f      	ldr	r3, [pc, #124]	@ (8013144 <SDMMC_GetCmdResp2+0x88>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	4a1f      	ldr	r2, [pc, #124]	@ (8013148 <SDMMC_GetCmdResp2+0x8c>)
 80130ca:	fba2 2303 	umull	r2, r3, r2, r3
 80130ce:	0a5b      	lsrs	r3, r3, #9
 80130d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80130d4:	fb02 f303 	mul.w	r3, r2, r3
 80130d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	1e5a      	subs	r2, r3, #1
 80130de:	60fa      	str	r2, [r7, #12]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d102      	bne.n	80130ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80130e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80130e8:	e026      	b.n	8013138 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80130ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d0ef      	beq.n	80130da <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013100:	2b00      	cmp	r3, #0
 8013102:	d1ea      	bne.n	80130da <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013108:	f003 0304 	and.w	r3, r3, #4
 801310c:	2b00      	cmp	r3, #0
 801310e:	d004      	beq.n	801311a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2204      	movs	r2, #4
 8013114:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013116:	2304      	movs	r3, #4
 8013118:	e00e      	b.n	8013138 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801311e:	f003 0301 	and.w	r3, r3, #1
 8013122:	2b00      	cmp	r3, #0
 8013124:	d004      	beq.n	8013130 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2201      	movs	r2, #1
 801312a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801312c:	2301      	movs	r3, #1
 801312e:	e003      	b.n	8013138 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	4a06      	ldr	r2, [pc, #24]	@ (801314c <SDMMC_GetCmdResp2+0x90>)
 8013134:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013136:	2300      	movs	r3, #0
}
 8013138:	4618      	mov	r0, r3
 801313a:	3714      	adds	r7, #20
 801313c:	46bd      	mov	sp, r7
 801313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013142:	4770      	bx	lr
 8013144:	24000158 	.word	0x24000158
 8013148:	10624dd3 	.word	0x10624dd3
 801314c:	002000c5 	.word	0x002000c5

08013150 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013150:	b480      	push	{r7}
 8013152:	b085      	sub	sp, #20
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013158:	4b1a      	ldr	r3, [pc, #104]	@ (80131c4 <SDMMC_GetCmdResp3+0x74>)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	4a1a      	ldr	r2, [pc, #104]	@ (80131c8 <SDMMC_GetCmdResp3+0x78>)
 801315e:	fba2 2303 	umull	r2, r3, r2, r3
 8013162:	0a5b      	lsrs	r3, r3, #9
 8013164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013168:	fb02 f303 	mul.w	r3, r2, r3
 801316c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	1e5a      	subs	r2, r3, #1
 8013172:	60fa      	str	r2, [r7, #12]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d102      	bne.n	801317e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013178:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801317c:	e01b      	b.n	80131b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013182:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801318a:	2b00      	cmp	r3, #0
 801318c:	d0ef      	beq.n	801316e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013194:	2b00      	cmp	r3, #0
 8013196:	d1ea      	bne.n	801316e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801319c:	f003 0304 	and.w	r3, r3, #4
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d004      	beq.n	80131ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2204      	movs	r2, #4
 80131a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80131aa:	2304      	movs	r3, #4
 80131ac:	e003      	b.n	80131b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	4a06      	ldr	r2, [pc, #24]	@ (80131cc <SDMMC_GetCmdResp3+0x7c>)
 80131b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80131b4:	2300      	movs	r3, #0
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	3714      	adds	r7, #20
 80131ba:	46bd      	mov	sp, r7
 80131bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c0:	4770      	bx	lr
 80131c2:	bf00      	nop
 80131c4:	24000158 	.word	0x24000158
 80131c8:	10624dd3 	.word	0x10624dd3
 80131cc:	002000c5 	.word	0x002000c5

080131d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b088      	sub	sp, #32
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	460b      	mov	r3, r1
 80131da:	607a      	str	r2, [r7, #4]
 80131dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80131de:	4b35      	ldr	r3, [pc, #212]	@ (80132b4 <SDMMC_GetCmdResp6+0xe4>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	4a35      	ldr	r2, [pc, #212]	@ (80132b8 <SDMMC_GetCmdResp6+0xe8>)
 80131e4:	fba2 2303 	umull	r2, r3, r2, r3
 80131e8:	0a5b      	lsrs	r3, r3, #9
 80131ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80131ee:	fb02 f303 	mul.w	r3, r2, r3
 80131f2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80131f4:	69fb      	ldr	r3, [r7, #28]
 80131f6:	1e5a      	subs	r2, r3, #1
 80131f8:	61fa      	str	r2, [r7, #28]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d102      	bne.n	8013204 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80131fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013202:	e052      	b.n	80132aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013208:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801320a:	69bb      	ldr	r3, [r7, #24]
 801320c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013210:	2b00      	cmp	r3, #0
 8013212:	d0ef      	beq.n	80131f4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801321a:	2b00      	cmp	r3, #0
 801321c:	d1ea      	bne.n	80131f4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013222:	f003 0304 	and.w	r3, r3, #4
 8013226:	2b00      	cmp	r3, #0
 8013228:	d004      	beq.n	8013234 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	2204      	movs	r2, #4
 801322e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013230:	2304      	movs	r3, #4
 8013232:	e03a      	b.n	80132aa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013238:	f003 0301 	and.w	r3, r3, #1
 801323c:	2b00      	cmp	r3, #0
 801323e:	d004      	beq.n	801324a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	2201      	movs	r2, #1
 8013244:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013246:	2301      	movs	r3, #1
 8013248:	e02f      	b.n	80132aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801324a:	68f8      	ldr	r0, [r7, #12]
 801324c:	f7ff fb7c 	bl	8012948 <SDMMC_GetCommandResponse>
 8013250:	4603      	mov	r3, r0
 8013252:	461a      	mov	r2, r3
 8013254:	7afb      	ldrb	r3, [r7, #11]
 8013256:	4293      	cmp	r3, r2
 8013258:	d001      	beq.n	801325e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801325a:	2301      	movs	r3, #1
 801325c:	e025      	b.n	80132aa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	4a16      	ldr	r2, [pc, #88]	@ (80132bc <SDMMC_GetCmdResp6+0xec>)
 8013262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013264:	2100      	movs	r1, #0
 8013266:	68f8      	ldr	r0, [r7, #12]
 8013268:	f7ff fb7b 	bl	8012962 <SDMMC_GetResponse>
 801326c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8013274:	2b00      	cmp	r3, #0
 8013276:	d106      	bne.n	8013286 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	0c1b      	lsrs	r3, r3, #16
 801327c:	b29a      	uxth	r2, r3
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013282:	2300      	movs	r3, #0
 8013284:	e011      	b.n	80132aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801328c:	2b00      	cmp	r3, #0
 801328e:	d002      	beq.n	8013296 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013290:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013294:	e009      	b.n	80132aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801329c:	2b00      	cmp	r3, #0
 801329e:	d002      	beq.n	80132a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80132a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80132a4:	e001      	b.n	80132aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80132a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3720      	adds	r7, #32
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	bf00      	nop
 80132b4:	24000158 	.word	0x24000158
 80132b8:	10624dd3 	.word	0x10624dd3
 80132bc:	002000c5 	.word	0x002000c5

080132c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80132c0:	b480      	push	{r7}
 80132c2:	b085      	sub	sp, #20
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80132c8:	4b22      	ldr	r3, [pc, #136]	@ (8013354 <SDMMC_GetCmdResp7+0x94>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	4a22      	ldr	r2, [pc, #136]	@ (8013358 <SDMMC_GetCmdResp7+0x98>)
 80132ce:	fba2 2303 	umull	r2, r3, r2, r3
 80132d2:	0a5b      	lsrs	r3, r3, #9
 80132d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80132d8:	fb02 f303 	mul.w	r3, r2, r3
 80132dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	1e5a      	subs	r2, r3, #1
 80132e2:	60fa      	str	r2, [r7, #12]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d102      	bne.n	80132ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80132e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80132ec:	e02c      	b.n	8013348 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80132f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d0ef      	beq.n	80132de <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013304:	2b00      	cmp	r3, #0
 8013306:	d1ea      	bne.n	80132de <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801330c:	f003 0304 	and.w	r3, r3, #4
 8013310:	2b00      	cmp	r3, #0
 8013312:	d004      	beq.n	801331e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2204      	movs	r2, #4
 8013318:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801331a:	2304      	movs	r3, #4
 801331c:	e014      	b.n	8013348 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013322:	f003 0301 	and.w	r3, r3, #1
 8013326:	2b00      	cmp	r3, #0
 8013328:	d004      	beq.n	8013334 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	2201      	movs	r2, #1
 801332e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013330:	2301      	movs	r3, #1
 8013332:	e009      	b.n	8013348 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801333c:	2b00      	cmp	r3, #0
 801333e:	d002      	beq.n	8013346 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2240      	movs	r2, #64	@ 0x40
 8013344:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013346:	2300      	movs	r3, #0

}
 8013348:	4618      	mov	r0, r3
 801334a:	3714      	adds	r7, #20
 801334c:	46bd      	mov	sp, r7
 801334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013352:	4770      	bx	lr
 8013354:	24000158 	.word	0x24000158
 8013358:	10624dd3 	.word	0x10624dd3

0801335c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801335c:	b480      	push	{r7}
 801335e:	b085      	sub	sp, #20
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013364:	4b11      	ldr	r3, [pc, #68]	@ (80133ac <SDMMC_GetCmdError+0x50>)
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	4a11      	ldr	r2, [pc, #68]	@ (80133b0 <SDMMC_GetCmdError+0x54>)
 801336a:	fba2 2303 	umull	r2, r3, r2, r3
 801336e:	0a5b      	lsrs	r3, r3, #9
 8013370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013374:	fb02 f303 	mul.w	r3, r2, r3
 8013378:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	1e5a      	subs	r2, r3, #1
 801337e:	60fa      	str	r2, [r7, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d102      	bne.n	801338a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013384:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013388:	e009      	b.n	801339e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801338e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013392:	2b00      	cmp	r3, #0
 8013394:	d0f1      	beq.n	801337a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	4a06      	ldr	r2, [pc, #24]	@ (80133b4 <SDMMC_GetCmdError+0x58>)
 801339a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801339c:	2300      	movs	r3, #0
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3714      	adds	r7, #20
 80133a2:	46bd      	mov	sp, r7
 80133a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a8:	4770      	bx	lr
 80133aa:	bf00      	nop
 80133ac:	24000158 	.word	0x24000158
 80133b0:	10624dd3 	.word	0x10624dd3
 80133b4:	002000c5 	.word	0x002000c5

080133b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80133bc:	4904      	ldr	r1, [pc, #16]	@ (80133d0 <MX_FATFS_Init+0x18>)
 80133be:	4805      	ldr	r0, [pc, #20]	@ (80133d4 <MX_FATFS_Init+0x1c>)
 80133c0:	f000 f9e4 	bl	801378c <FATFS_LinkDriver>
 80133c4:	4603      	mov	r3, r0
 80133c6:	461a      	mov	r2, r3
 80133c8:	4b03      	ldr	r3, [pc, #12]	@ (80133d8 <MX_FATFS_Init+0x20>)
 80133ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80133cc:	bf00      	nop
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	240019d8 	.word	0x240019d8
 80133d4:	08018244 	.word	0x08018244
 80133d8:	240019d4 	.word	0x240019d4

080133dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80133e2:	2300      	movs	r3, #0
 80133e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80133e6:	f000 f879 	bl	80134dc <BSP_SD_IsDetected>
 80133ea:	4603      	mov	r3, r0
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d001      	beq.n	80133f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80133f0:	2302      	movs	r3, #2
 80133f2:	e012      	b.n	801341a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80133f4:	480b      	ldr	r0, [pc, #44]	@ (8013424 <BSP_SD_Init+0x48>)
 80133f6:	f7fa fae5 	bl	800d9c4 <HAL_SD_Init>
 80133fa:	4603      	mov	r3, r0
 80133fc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80133fe:	79fb      	ldrb	r3, [r7, #7]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d109      	bne.n	8013418 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013404:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8013408:	4806      	ldr	r0, [pc, #24]	@ (8013424 <BSP_SD_Init+0x48>)
 801340a:	f7fb f9a1 	bl	800e750 <HAL_SD_ConfigWideBusOperation>
 801340e:	4603      	mov	r3, r0
 8013410:	2b00      	cmp	r3, #0
 8013412:	d001      	beq.n	8013418 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013414:	2301      	movs	r3, #1
 8013416:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013418:	79fb      	ldrb	r3, [r7, #7]
}
 801341a:	4618      	mov	r0, r3
 801341c:	3708      	adds	r7, #8
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	24001540 	.word	0x24001540

08013428 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b088      	sub	sp, #32
 801342c:	af02      	add	r7, sp, #8
 801342e:	60f8      	str	r0, [r7, #12]
 8013430:	60b9      	str	r1, [r7, #8]
 8013432:	607a      	str	r2, [r7, #4]
 8013434:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013436:	2300      	movs	r3, #0
 8013438:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	9300      	str	r3, [sp, #0]
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	68ba      	ldr	r2, [r7, #8]
 8013442:	68f9      	ldr	r1, [r7, #12]
 8013444:	4806      	ldr	r0, [pc, #24]	@ (8013460 <BSP_SD_ReadBlocks+0x38>)
 8013446:	f7fa fbdd 	bl	800dc04 <HAL_SD_ReadBlocks>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d001      	beq.n	8013454 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013450:	2301      	movs	r3, #1
 8013452:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013454:	7dfb      	ldrb	r3, [r7, #23]
}
 8013456:	4618      	mov	r0, r3
 8013458:	3718      	adds	r7, #24
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	24001540 	.word	0x24001540

08013464 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b088      	sub	sp, #32
 8013468:	af02      	add	r7, sp, #8
 801346a:	60f8      	str	r0, [r7, #12]
 801346c:	60b9      	str	r1, [r7, #8]
 801346e:	607a      	str	r2, [r7, #4]
 8013470:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013472:	2300      	movs	r3, #0
 8013474:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	9300      	str	r3, [sp, #0]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	68f9      	ldr	r1, [r7, #12]
 8013480:	4806      	ldr	r0, [pc, #24]	@ (801349c <BSP_SD_WriteBlocks+0x38>)
 8013482:	f7fa fd49 	bl	800df18 <HAL_SD_WriteBlocks>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d001      	beq.n	8013490 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801348c:	2301      	movs	r3, #1
 801348e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013490:	7dfb      	ldrb	r3, [r7, #23]
}
 8013492:	4618      	mov	r0, r3
 8013494:	3718      	adds	r7, #24
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
 801349a:	bf00      	nop
 801349c:	24001540 	.word	0x24001540

080134a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80134a4:	4805      	ldr	r0, [pc, #20]	@ (80134bc <BSP_SD_GetCardState+0x1c>)
 80134a6:	f7fb fa65 	bl	800e974 <HAL_SD_GetCardState>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b04      	cmp	r3, #4
 80134ae:	bf14      	ite	ne
 80134b0:	2301      	movne	r3, #1
 80134b2:	2300      	moveq	r3, #0
 80134b4:	b2db      	uxtb	r3, r3
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop
 80134bc:	24001540 	.word	0x24001540

080134c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80134c8:	6879      	ldr	r1, [r7, #4]
 80134ca:	4803      	ldr	r0, [pc, #12]	@ (80134d8 <BSP_SD_GetCardInfo+0x18>)
 80134cc:	f7fb f914 	bl	800e6f8 <HAL_SD_GetCardInfo>
}
 80134d0:	bf00      	nop
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	24001540 	.word	0x24001540

080134dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80134e2:	2301      	movs	r3, #1
 80134e4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80134e6:	f000 f80b 	bl	8013500 <BSP_PlatformIsDetected>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d101      	bne.n	80134f4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80134f0:	2300      	movs	r3, #0
 80134f2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80134f4:	79fb      	ldrb	r3, [r7, #7]
 80134f6:	b2db      	uxtb	r3, r3
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	3708      	adds	r7, #8
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}

08013500 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013500:	b580      	push	{r7, lr}
 8013502:	b082      	sub	sp, #8
 8013504:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013506:	2301      	movs	r3, #1
 8013508:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801350a:	2180      	movs	r1, #128	@ 0x80
 801350c:	4806      	ldr	r0, [pc, #24]	@ (8013528 <BSP_PlatformIsDetected+0x28>)
 801350e:	f7f6 f8b9 	bl	8009684 <HAL_GPIO_ReadPin>
 8013512:	4603      	mov	r3, r0
 8013514:	2b00      	cmp	r3, #0
 8013516:	d001      	beq.n	801351c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8013518:	2300      	movs	r3, #0
 801351a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801351c:	79fb      	ldrb	r3, [r7, #7]
}
 801351e:	4618      	mov	r0, r3
 8013520:	3708      	adds	r7, #8
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}
 8013526:	bf00      	nop
 8013528:	58020800 	.word	0x58020800

0801352c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	4603      	mov	r3, r0
 8013534:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013536:	4b0b      	ldr	r3, [pc, #44]	@ (8013564 <SD_CheckStatus+0x38>)
 8013538:	2201      	movs	r2, #1
 801353a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801353c:	f7ff ffb0 	bl	80134a0 <BSP_SD_GetCardState>
 8013540:	4603      	mov	r3, r0
 8013542:	2b00      	cmp	r3, #0
 8013544:	d107      	bne.n	8013556 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013546:	4b07      	ldr	r3, [pc, #28]	@ (8013564 <SD_CheckStatus+0x38>)
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	b2db      	uxtb	r3, r3
 801354c:	f023 0301 	bic.w	r3, r3, #1
 8013550:	b2da      	uxtb	r2, r3
 8013552:	4b04      	ldr	r3, [pc, #16]	@ (8013564 <SD_CheckStatus+0x38>)
 8013554:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013556:	4b03      	ldr	r3, [pc, #12]	@ (8013564 <SD_CheckStatus+0x38>)
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	b2db      	uxtb	r3, r3
}
 801355c:	4618      	mov	r0, r3
 801355e:	3708      	adds	r7, #8
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	24000185 	.word	0x24000185

08013568 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
 801356e:	4603      	mov	r3, r0
 8013570:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8013572:	4b0b      	ldr	r3, [pc, #44]	@ (80135a0 <SD_initialize+0x38>)
 8013574:	2201      	movs	r2, #1
 8013576:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013578:	f7ff ff30 	bl	80133dc <BSP_SD_Init>
 801357c:	4603      	mov	r3, r0
 801357e:	2b00      	cmp	r3, #0
 8013580:	d107      	bne.n	8013592 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8013582:	79fb      	ldrb	r3, [r7, #7]
 8013584:	4618      	mov	r0, r3
 8013586:	f7ff ffd1 	bl	801352c <SD_CheckStatus>
 801358a:	4603      	mov	r3, r0
 801358c:	461a      	mov	r2, r3
 801358e:	4b04      	ldr	r3, [pc, #16]	@ (80135a0 <SD_initialize+0x38>)
 8013590:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013592:	4b03      	ldr	r3, [pc, #12]	@ (80135a0 <SD_initialize+0x38>)
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	b2db      	uxtb	r3, r3
}
 8013598:	4618      	mov	r0, r3
 801359a:	3708      	adds	r7, #8
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	24000185 	.word	0x24000185

080135a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b082      	sub	sp, #8
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	4603      	mov	r3, r0
 80135ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80135ae:	79fb      	ldrb	r3, [r7, #7]
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ff ffbb 	bl	801352c <SD_CheckStatus>
 80135b6:	4603      	mov	r3, r0
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b086      	sub	sp, #24
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60b9      	str	r1, [r7, #8]
 80135c8:	607a      	str	r2, [r7, #4]
 80135ca:	603b      	str	r3, [r7, #0]
 80135cc:	4603      	mov	r3, r0
 80135ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80135d0:	2301      	movs	r3, #1
 80135d2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80135d4:	f04f 33ff 	mov.w	r3, #4294967295
 80135d8:	683a      	ldr	r2, [r7, #0]
 80135da:	6879      	ldr	r1, [r7, #4]
 80135dc:	68b8      	ldr	r0, [r7, #8]
 80135de:	f7ff ff23 	bl	8013428 <BSP_SD_ReadBlocks>
 80135e2:	4603      	mov	r3, r0
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d107      	bne.n	80135f8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80135e8:	bf00      	nop
 80135ea:	f7ff ff59 	bl	80134a0 <BSP_SD_GetCardState>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d1fa      	bne.n	80135ea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80135f4:	2300      	movs	r3, #0
 80135f6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80135f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3718      	adds	r7, #24
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}

08013602 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013602:	b580      	push	{r7, lr}
 8013604:	b086      	sub	sp, #24
 8013606:	af00      	add	r7, sp, #0
 8013608:	60b9      	str	r1, [r7, #8]
 801360a:	607a      	str	r2, [r7, #4]
 801360c:	603b      	str	r3, [r7, #0]
 801360e:	4603      	mov	r3, r0
 8013610:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013612:	2301      	movs	r3, #1
 8013614:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8013616:	f04f 33ff 	mov.w	r3, #4294967295
 801361a:	683a      	ldr	r2, [r7, #0]
 801361c:	6879      	ldr	r1, [r7, #4]
 801361e:	68b8      	ldr	r0, [r7, #8]
 8013620:	f7ff ff20 	bl	8013464 <BSP_SD_WriteBlocks>
 8013624:	4603      	mov	r3, r0
 8013626:	2b00      	cmp	r3, #0
 8013628:	d107      	bne.n	801363a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 801362a:	bf00      	nop
 801362c:	f7ff ff38 	bl	80134a0 <BSP_SD_GetCardState>
 8013630:	4603      	mov	r3, r0
 8013632:	2b00      	cmp	r3, #0
 8013634:	d1fa      	bne.n	801362c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8013636:	2300      	movs	r3, #0
 8013638:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801363a:	7dfb      	ldrb	r3, [r7, #23]
}
 801363c:	4618      	mov	r0, r3
 801363e:	3718      	adds	r7, #24
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}

08013644 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b08c      	sub	sp, #48	@ 0x30
 8013648:	af00      	add	r7, sp, #0
 801364a:	4603      	mov	r3, r0
 801364c:	603a      	str	r2, [r7, #0]
 801364e:	71fb      	strb	r3, [r7, #7]
 8013650:	460b      	mov	r3, r1
 8013652:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013654:	2301      	movs	r3, #1
 8013656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801365a:	4b25      	ldr	r3, [pc, #148]	@ (80136f0 <SD_ioctl+0xac>)
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	b2db      	uxtb	r3, r3
 8013660:	f003 0301 	and.w	r3, r3, #1
 8013664:	2b00      	cmp	r3, #0
 8013666:	d001      	beq.n	801366c <SD_ioctl+0x28>
 8013668:	2303      	movs	r3, #3
 801366a:	e03c      	b.n	80136e6 <SD_ioctl+0xa2>

  switch (cmd)
 801366c:	79bb      	ldrb	r3, [r7, #6]
 801366e:	2b03      	cmp	r3, #3
 8013670:	d834      	bhi.n	80136dc <SD_ioctl+0x98>
 8013672:	a201      	add	r2, pc, #4	@ (adr r2, 8013678 <SD_ioctl+0x34>)
 8013674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013678:	08013689 	.word	0x08013689
 801367c:	08013691 	.word	0x08013691
 8013680:	080136a9 	.word	0x080136a9
 8013684:	080136c3 	.word	0x080136c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013688:	2300      	movs	r3, #0
 801368a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801368e:	e028      	b.n	80136e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013690:	f107 0308 	add.w	r3, r7, #8
 8013694:	4618      	mov	r0, r3
 8013696:	f7ff ff13 	bl	80134c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801369a:	6a3a      	ldr	r2, [r7, #32]
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80136a0:	2300      	movs	r3, #0
 80136a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80136a6:	e01c      	b.n	80136e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80136a8:	f107 0308 	add.w	r3, r7, #8
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7ff ff07 	bl	80134c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80136b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136b4:	b29a      	uxth	r2, r3
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80136ba:	2300      	movs	r3, #0
 80136bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80136c0:	e00f      	b.n	80136e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80136c2:	f107 0308 	add.w	r3, r7, #8
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7ff fefa 	bl	80134c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80136cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ce:	0a5a      	lsrs	r2, r3, #9
 80136d0:	683b      	ldr	r3, [r7, #0]
 80136d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80136d4:	2300      	movs	r3, #0
 80136d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80136da:	e002      	b.n	80136e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80136dc:	2304      	movs	r3, #4
 80136de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80136e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	3730      	adds	r7, #48	@ 0x30
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	24000185 	.word	0x24000185

080136f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80136f4:	b480      	push	{r7}
 80136f6:	b087      	sub	sp, #28
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	60b9      	str	r1, [r7, #8]
 80136fe:	4613      	mov	r3, r2
 8013700:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013702:	2301      	movs	r3, #1
 8013704:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013706:	2300      	movs	r3, #0
 8013708:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801370a:	4b1f      	ldr	r3, [pc, #124]	@ (8013788 <FATFS_LinkDriverEx+0x94>)
 801370c:	7a5b      	ldrb	r3, [r3, #9]
 801370e:	b2db      	uxtb	r3, r3
 8013710:	2b00      	cmp	r3, #0
 8013712:	d131      	bne.n	8013778 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013714:	4b1c      	ldr	r3, [pc, #112]	@ (8013788 <FATFS_LinkDriverEx+0x94>)
 8013716:	7a5b      	ldrb	r3, [r3, #9]
 8013718:	b2db      	uxtb	r3, r3
 801371a:	461a      	mov	r2, r3
 801371c:	4b1a      	ldr	r3, [pc, #104]	@ (8013788 <FATFS_LinkDriverEx+0x94>)
 801371e:	2100      	movs	r1, #0
 8013720:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013722:	4b19      	ldr	r3, [pc, #100]	@ (8013788 <FATFS_LinkDriverEx+0x94>)
 8013724:	7a5b      	ldrb	r3, [r3, #9]
 8013726:	b2db      	uxtb	r3, r3
 8013728:	4a17      	ldr	r2, [pc, #92]	@ (8013788 <FATFS_LinkDriverEx+0x94>)
 801372a:	009b      	lsls	r3, r3, #2
 801372c:	4413      	add	r3, r2
 801372e:	68fa      	ldr	r2, [r7, #12]
 8013730:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013732:	4b15      	ldr	r3, [pc, #84]	@ (8013788 <FATFS_LinkDriverEx+0x94>)
 8013734:	7a5b      	ldrb	r3, [r3, #9]
 8013736:	b2db      	uxtb	r3, r3
 8013738:	461a      	mov	r2, r3
 801373a:	4b13      	ldr	r3, [pc, #76]	@ (8013788 <FATFS_LinkDriverEx+0x94>)
 801373c:	4413      	add	r3, r2
 801373e:	79fa      	ldrb	r2, [r7, #7]
 8013740:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013742:	4b11      	ldr	r3, [pc, #68]	@ (8013788 <FATFS_LinkDriverEx+0x94>)
 8013744:	7a5b      	ldrb	r3, [r3, #9]
 8013746:	b2db      	uxtb	r3, r3
 8013748:	1c5a      	adds	r2, r3, #1
 801374a:	b2d1      	uxtb	r1, r2
 801374c:	4a0e      	ldr	r2, [pc, #56]	@ (8013788 <FATFS_LinkDriverEx+0x94>)
 801374e:	7251      	strb	r1, [r2, #9]
 8013750:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013752:	7dbb      	ldrb	r3, [r7, #22]
 8013754:	3330      	adds	r3, #48	@ 0x30
 8013756:	b2da      	uxtb	r2, r3
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	3301      	adds	r3, #1
 8013760:	223a      	movs	r2, #58	@ 0x3a
 8013762:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	3302      	adds	r3, #2
 8013768:	222f      	movs	r2, #47	@ 0x2f
 801376a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	3303      	adds	r3, #3
 8013770:	2200      	movs	r2, #0
 8013772:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013774:	2300      	movs	r3, #0
 8013776:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013778:	7dfb      	ldrb	r3, [r7, #23]
}
 801377a:	4618      	mov	r0, r3
 801377c:	371c      	adds	r7, #28
 801377e:	46bd      	mov	sp, r7
 8013780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013784:	4770      	bx	lr
 8013786:	bf00      	nop
 8013788:	240019dc 	.word	0x240019dc

0801378c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013796:	2200      	movs	r2, #0
 8013798:	6839      	ldr	r1, [r7, #0]
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f7ff ffaa 	bl	80136f4 <FATFS_LinkDriverEx>
 80137a0:	4603      	mov	r3, r0
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3708      	adds	r7, #8
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}

080137aa <__cvt>:
 80137aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137ac:	ed2d 8b02 	vpush	{d8}
 80137b0:	eeb0 8b40 	vmov.f64	d8, d0
 80137b4:	b085      	sub	sp, #20
 80137b6:	4617      	mov	r7, r2
 80137b8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80137ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80137bc:	ee18 2a90 	vmov	r2, s17
 80137c0:	f025 0520 	bic.w	r5, r5, #32
 80137c4:	2a00      	cmp	r2, #0
 80137c6:	bfb6      	itet	lt
 80137c8:	222d      	movlt	r2, #45	@ 0x2d
 80137ca:	2200      	movge	r2, #0
 80137cc:	eeb1 8b40 	vneglt.f64	d8, d0
 80137d0:	2d46      	cmp	r5, #70	@ 0x46
 80137d2:	460c      	mov	r4, r1
 80137d4:	701a      	strb	r2, [r3, #0]
 80137d6:	d004      	beq.n	80137e2 <__cvt+0x38>
 80137d8:	2d45      	cmp	r5, #69	@ 0x45
 80137da:	d100      	bne.n	80137de <__cvt+0x34>
 80137dc:	3401      	adds	r4, #1
 80137de:	2102      	movs	r1, #2
 80137e0:	e000      	b.n	80137e4 <__cvt+0x3a>
 80137e2:	2103      	movs	r1, #3
 80137e4:	ab03      	add	r3, sp, #12
 80137e6:	9301      	str	r3, [sp, #4]
 80137e8:	ab02      	add	r3, sp, #8
 80137ea:	9300      	str	r3, [sp, #0]
 80137ec:	4622      	mov	r2, r4
 80137ee:	4633      	mov	r3, r6
 80137f0:	eeb0 0b48 	vmov.f64	d0, d8
 80137f4:	f001 f964 	bl	8014ac0 <_dtoa_r>
 80137f8:	2d47      	cmp	r5, #71	@ 0x47
 80137fa:	d114      	bne.n	8013826 <__cvt+0x7c>
 80137fc:	07fb      	lsls	r3, r7, #31
 80137fe:	d50a      	bpl.n	8013816 <__cvt+0x6c>
 8013800:	1902      	adds	r2, r0, r4
 8013802:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801380a:	bf08      	it	eq
 801380c:	9203      	streq	r2, [sp, #12]
 801380e:	2130      	movs	r1, #48	@ 0x30
 8013810:	9b03      	ldr	r3, [sp, #12]
 8013812:	4293      	cmp	r3, r2
 8013814:	d319      	bcc.n	801384a <__cvt+0xa0>
 8013816:	9b03      	ldr	r3, [sp, #12]
 8013818:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801381a:	1a1b      	subs	r3, r3, r0
 801381c:	6013      	str	r3, [r2, #0]
 801381e:	b005      	add	sp, #20
 8013820:	ecbd 8b02 	vpop	{d8}
 8013824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013826:	2d46      	cmp	r5, #70	@ 0x46
 8013828:	eb00 0204 	add.w	r2, r0, r4
 801382c:	d1e9      	bne.n	8013802 <__cvt+0x58>
 801382e:	7803      	ldrb	r3, [r0, #0]
 8013830:	2b30      	cmp	r3, #48	@ 0x30
 8013832:	d107      	bne.n	8013844 <__cvt+0x9a>
 8013834:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801383c:	bf1c      	itt	ne
 801383e:	f1c4 0401 	rsbne	r4, r4, #1
 8013842:	6034      	strne	r4, [r6, #0]
 8013844:	6833      	ldr	r3, [r6, #0]
 8013846:	441a      	add	r2, r3
 8013848:	e7db      	b.n	8013802 <__cvt+0x58>
 801384a:	1c5c      	adds	r4, r3, #1
 801384c:	9403      	str	r4, [sp, #12]
 801384e:	7019      	strb	r1, [r3, #0]
 8013850:	e7de      	b.n	8013810 <__cvt+0x66>

08013852 <__exponent>:
 8013852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013854:	2900      	cmp	r1, #0
 8013856:	bfba      	itte	lt
 8013858:	4249      	neglt	r1, r1
 801385a:	232d      	movlt	r3, #45	@ 0x2d
 801385c:	232b      	movge	r3, #43	@ 0x2b
 801385e:	2909      	cmp	r1, #9
 8013860:	7002      	strb	r2, [r0, #0]
 8013862:	7043      	strb	r3, [r0, #1]
 8013864:	dd29      	ble.n	80138ba <__exponent+0x68>
 8013866:	f10d 0307 	add.w	r3, sp, #7
 801386a:	461d      	mov	r5, r3
 801386c:	270a      	movs	r7, #10
 801386e:	461a      	mov	r2, r3
 8013870:	fbb1 f6f7 	udiv	r6, r1, r7
 8013874:	fb07 1416 	mls	r4, r7, r6, r1
 8013878:	3430      	adds	r4, #48	@ 0x30
 801387a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801387e:	460c      	mov	r4, r1
 8013880:	2c63      	cmp	r4, #99	@ 0x63
 8013882:	f103 33ff 	add.w	r3, r3, #4294967295
 8013886:	4631      	mov	r1, r6
 8013888:	dcf1      	bgt.n	801386e <__exponent+0x1c>
 801388a:	3130      	adds	r1, #48	@ 0x30
 801388c:	1e94      	subs	r4, r2, #2
 801388e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013892:	1c41      	adds	r1, r0, #1
 8013894:	4623      	mov	r3, r4
 8013896:	42ab      	cmp	r3, r5
 8013898:	d30a      	bcc.n	80138b0 <__exponent+0x5e>
 801389a:	f10d 0309 	add.w	r3, sp, #9
 801389e:	1a9b      	subs	r3, r3, r2
 80138a0:	42ac      	cmp	r4, r5
 80138a2:	bf88      	it	hi
 80138a4:	2300      	movhi	r3, #0
 80138a6:	3302      	adds	r3, #2
 80138a8:	4403      	add	r3, r0
 80138aa:	1a18      	subs	r0, r3, r0
 80138ac:	b003      	add	sp, #12
 80138ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80138b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80138b8:	e7ed      	b.n	8013896 <__exponent+0x44>
 80138ba:	2330      	movs	r3, #48	@ 0x30
 80138bc:	3130      	adds	r1, #48	@ 0x30
 80138be:	7083      	strb	r3, [r0, #2]
 80138c0:	70c1      	strb	r1, [r0, #3]
 80138c2:	1d03      	adds	r3, r0, #4
 80138c4:	e7f1      	b.n	80138aa <__exponent+0x58>
	...

080138c8 <_printf_float>:
 80138c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138cc:	b08d      	sub	sp, #52	@ 0x34
 80138ce:	460c      	mov	r4, r1
 80138d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80138d4:	4616      	mov	r6, r2
 80138d6:	461f      	mov	r7, r3
 80138d8:	4605      	mov	r5, r0
 80138da:	f000 ffdb 	bl	8014894 <_localeconv_r>
 80138de:	f8d0 b000 	ldr.w	fp, [r0]
 80138e2:	4658      	mov	r0, fp
 80138e4:	f7ec fd64 	bl	80003b0 <strlen>
 80138e8:	2300      	movs	r3, #0
 80138ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80138ec:	f8d8 3000 	ldr.w	r3, [r8]
 80138f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80138f4:	6822      	ldr	r2, [r4, #0]
 80138f6:	9005      	str	r0, [sp, #20]
 80138f8:	3307      	adds	r3, #7
 80138fa:	f023 0307 	bic.w	r3, r3, #7
 80138fe:	f103 0108 	add.w	r1, r3, #8
 8013902:	f8c8 1000 	str.w	r1, [r8]
 8013906:	ed93 0b00 	vldr	d0, [r3]
 801390a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8013b68 <_printf_float+0x2a0>
 801390e:	eeb0 7bc0 	vabs.f64	d7, d0
 8013912:	eeb4 7b46 	vcmp.f64	d7, d6
 8013916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801391a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801391e:	dd24      	ble.n	801396a <_printf_float+0xa2>
 8013920:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013928:	d502      	bpl.n	8013930 <_printf_float+0x68>
 801392a:	232d      	movs	r3, #45	@ 0x2d
 801392c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013930:	498f      	ldr	r1, [pc, #572]	@ (8013b70 <_printf_float+0x2a8>)
 8013932:	4b90      	ldr	r3, [pc, #576]	@ (8013b74 <_printf_float+0x2ac>)
 8013934:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8013938:	bf94      	ite	ls
 801393a:	4688      	movls	r8, r1
 801393c:	4698      	movhi	r8, r3
 801393e:	f022 0204 	bic.w	r2, r2, #4
 8013942:	2303      	movs	r3, #3
 8013944:	6123      	str	r3, [r4, #16]
 8013946:	6022      	str	r2, [r4, #0]
 8013948:	f04f 0a00 	mov.w	sl, #0
 801394c:	9700      	str	r7, [sp, #0]
 801394e:	4633      	mov	r3, r6
 8013950:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013952:	4621      	mov	r1, r4
 8013954:	4628      	mov	r0, r5
 8013956:	f000 f9d1 	bl	8013cfc <_printf_common>
 801395a:	3001      	adds	r0, #1
 801395c:	f040 8089 	bne.w	8013a72 <_printf_float+0x1aa>
 8013960:	f04f 30ff 	mov.w	r0, #4294967295
 8013964:	b00d      	add	sp, #52	@ 0x34
 8013966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801396a:	eeb4 0b40 	vcmp.f64	d0, d0
 801396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013972:	d709      	bvc.n	8013988 <_printf_float+0xc0>
 8013974:	ee10 3a90 	vmov	r3, s1
 8013978:	2b00      	cmp	r3, #0
 801397a:	bfbc      	itt	lt
 801397c:	232d      	movlt	r3, #45	@ 0x2d
 801397e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013982:	497d      	ldr	r1, [pc, #500]	@ (8013b78 <_printf_float+0x2b0>)
 8013984:	4b7d      	ldr	r3, [pc, #500]	@ (8013b7c <_printf_float+0x2b4>)
 8013986:	e7d5      	b.n	8013934 <_printf_float+0x6c>
 8013988:	6863      	ldr	r3, [r4, #4]
 801398a:	1c59      	adds	r1, r3, #1
 801398c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8013990:	d139      	bne.n	8013a06 <_printf_float+0x13e>
 8013992:	2306      	movs	r3, #6
 8013994:	6063      	str	r3, [r4, #4]
 8013996:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801399a:	2300      	movs	r3, #0
 801399c:	6022      	str	r2, [r4, #0]
 801399e:	9303      	str	r3, [sp, #12]
 80139a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80139a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80139a6:	ab09      	add	r3, sp, #36	@ 0x24
 80139a8:	9300      	str	r3, [sp, #0]
 80139aa:	6861      	ldr	r1, [r4, #4]
 80139ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80139b0:	4628      	mov	r0, r5
 80139b2:	f7ff fefa 	bl	80137aa <__cvt>
 80139b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80139ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80139bc:	4680      	mov	r8, r0
 80139be:	d129      	bne.n	8013a14 <_printf_float+0x14c>
 80139c0:	1cc8      	adds	r0, r1, #3
 80139c2:	db02      	blt.n	80139ca <_printf_float+0x102>
 80139c4:	6863      	ldr	r3, [r4, #4]
 80139c6:	4299      	cmp	r1, r3
 80139c8:	dd41      	ble.n	8013a4e <_printf_float+0x186>
 80139ca:	f1a9 0902 	sub.w	r9, r9, #2
 80139ce:	fa5f f989 	uxtb.w	r9, r9
 80139d2:	3901      	subs	r1, #1
 80139d4:	464a      	mov	r2, r9
 80139d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80139da:	9109      	str	r1, [sp, #36]	@ 0x24
 80139dc:	f7ff ff39 	bl	8013852 <__exponent>
 80139e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80139e2:	1813      	adds	r3, r2, r0
 80139e4:	2a01      	cmp	r2, #1
 80139e6:	4682      	mov	sl, r0
 80139e8:	6123      	str	r3, [r4, #16]
 80139ea:	dc02      	bgt.n	80139f2 <_printf_float+0x12a>
 80139ec:	6822      	ldr	r2, [r4, #0]
 80139ee:	07d2      	lsls	r2, r2, #31
 80139f0:	d501      	bpl.n	80139f6 <_printf_float+0x12e>
 80139f2:	3301      	adds	r3, #1
 80139f4:	6123      	str	r3, [r4, #16]
 80139f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d0a6      	beq.n	801394c <_printf_float+0x84>
 80139fe:	232d      	movs	r3, #45	@ 0x2d
 8013a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a04:	e7a2      	b.n	801394c <_printf_float+0x84>
 8013a06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013a0a:	d1c4      	bne.n	8013996 <_printf_float+0xce>
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d1c2      	bne.n	8013996 <_printf_float+0xce>
 8013a10:	2301      	movs	r3, #1
 8013a12:	e7bf      	b.n	8013994 <_printf_float+0xcc>
 8013a14:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013a18:	d9db      	bls.n	80139d2 <_printf_float+0x10a>
 8013a1a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8013a1e:	d118      	bne.n	8013a52 <_printf_float+0x18a>
 8013a20:	2900      	cmp	r1, #0
 8013a22:	6863      	ldr	r3, [r4, #4]
 8013a24:	dd0b      	ble.n	8013a3e <_printf_float+0x176>
 8013a26:	6121      	str	r1, [r4, #16]
 8013a28:	b913      	cbnz	r3, 8013a30 <_printf_float+0x168>
 8013a2a:	6822      	ldr	r2, [r4, #0]
 8013a2c:	07d0      	lsls	r0, r2, #31
 8013a2e:	d502      	bpl.n	8013a36 <_printf_float+0x16e>
 8013a30:	3301      	adds	r3, #1
 8013a32:	440b      	add	r3, r1
 8013a34:	6123      	str	r3, [r4, #16]
 8013a36:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013a38:	f04f 0a00 	mov.w	sl, #0
 8013a3c:	e7db      	b.n	80139f6 <_printf_float+0x12e>
 8013a3e:	b913      	cbnz	r3, 8013a46 <_printf_float+0x17e>
 8013a40:	6822      	ldr	r2, [r4, #0]
 8013a42:	07d2      	lsls	r2, r2, #31
 8013a44:	d501      	bpl.n	8013a4a <_printf_float+0x182>
 8013a46:	3302      	adds	r3, #2
 8013a48:	e7f4      	b.n	8013a34 <_printf_float+0x16c>
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	e7f2      	b.n	8013a34 <_printf_float+0x16c>
 8013a4e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8013a52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a54:	4299      	cmp	r1, r3
 8013a56:	db05      	blt.n	8013a64 <_printf_float+0x19c>
 8013a58:	6823      	ldr	r3, [r4, #0]
 8013a5a:	6121      	str	r1, [r4, #16]
 8013a5c:	07d8      	lsls	r0, r3, #31
 8013a5e:	d5ea      	bpl.n	8013a36 <_printf_float+0x16e>
 8013a60:	1c4b      	adds	r3, r1, #1
 8013a62:	e7e7      	b.n	8013a34 <_printf_float+0x16c>
 8013a64:	2900      	cmp	r1, #0
 8013a66:	bfd4      	ite	le
 8013a68:	f1c1 0202 	rsble	r2, r1, #2
 8013a6c:	2201      	movgt	r2, #1
 8013a6e:	4413      	add	r3, r2
 8013a70:	e7e0      	b.n	8013a34 <_printf_float+0x16c>
 8013a72:	6823      	ldr	r3, [r4, #0]
 8013a74:	055a      	lsls	r2, r3, #21
 8013a76:	d407      	bmi.n	8013a88 <_printf_float+0x1c0>
 8013a78:	6923      	ldr	r3, [r4, #16]
 8013a7a:	4642      	mov	r2, r8
 8013a7c:	4631      	mov	r1, r6
 8013a7e:	4628      	mov	r0, r5
 8013a80:	47b8      	blx	r7
 8013a82:	3001      	adds	r0, #1
 8013a84:	d12a      	bne.n	8013adc <_printf_float+0x214>
 8013a86:	e76b      	b.n	8013960 <_printf_float+0x98>
 8013a88:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013a8c:	f240 80e0 	bls.w	8013c50 <_printf_float+0x388>
 8013a90:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013a94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a9c:	d133      	bne.n	8013b06 <_printf_float+0x23e>
 8013a9e:	4a38      	ldr	r2, [pc, #224]	@ (8013b80 <_printf_float+0x2b8>)
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	4631      	mov	r1, r6
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	47b8      	blx	r7
 8013aa8:	3001      	adds	r0, #1
 8013aaa:	f43f af59 	beq.w	8013960 <_printf_float+0x98>
 8013aae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013ab2:	4543      	cmp	r3, r8
 8013ab4:	db02      	blt.n	8013abc <_printf_float+0x1f4>
 8013ab6:	6823      	ldr	r3, [r4, #0]
 8013ab8:	07d8      	lsls	r0, r3, #31
 8013aba:	d50f      	bpl.n	8013adc <_printf_float+0x214>
 8013abc:	9b05      	ldr	r3, [sp, #20]
 8013abe:	465a      	mov	r2, fp
 8013ac0:	4631      	mov	r1, r6
 8013ac2:	4628      	mov	r0, r5
 8013ac4:	47b8      	blx	r7
 8013ac6:	3001      	adds	r0, #1
 8013ac8:	f43f af4a 	beq.w	8013960 <_printf_float+0x98>
 8013acc:	f04f 0900 	mov.w	r9, #0
 8013ad0:	f108 38ff 	add.w	r8, r8, #4294967295
 8013ad4:	f104 0a1a 	add.w	sl, r4, #26
 8013ad8:	45c8      	cmp	r8, r9
 8013ada:	dc09      	bgt.n	8013af0 <_printf_float+0x228>
 8013adc:	6823      	ldr	r3, [r4, #0]
 8013ade:	079b      	lsls	r3, r3, #30
 8013ae0:	f100 8107 	bmi.w	8013cf2 <_printf_float+0x42a>
 8013ae4:	68e0      	ldr	r0, [r4, #12]
 8013ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ae8:	4298      	cmp	r0, r3
 8013aea:	bfb8      	it	lt
 8013aec:	4618      	movlt	r0, r3
 8013aee:	e739      	b.n	8013964 <_printf_float+0x9c>
 8013af0:	2301      	movs	r3, #1
 8013af2:	4652      	mov	r2, sl
 8013af4:	4631      	mov	r1, r6
 8013af6:	4628      	mov	r0, r5
 8013af8:	47b8      	blx	r7
 8013afa:	3001      	adds	r0, #1
 8013afc:	f43f af30 	beq.w	8013960 <_printf_float+0x98>
 8013b00:	f109 0901 	add.w	r9, r9, #1
 8013b04:	e7e8      	b.n	8013ad8 <_printf_float+0x210>
 8013b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	dc3b      	bgt.n	8013b84 <_printf_float+0x2bc>
 8013b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8013b80 <_printf_float+0x2b8>)
 8013b0e:	2301      	movs	r3, #1
 8013b10:	4631      	mov	r1, r6
 8013b12:	4628      	mov	r0, r5
 8013b14:	47b8      	blx	r7
 8013b16:	3001      	adds	r0, #1
 8013b18:	f43f af22 	beq.w	8013960 <_printf_float+0x98>
 8013b1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013b20:	ea59 0303 	orrs.w	r3, r9, r3
 8013b24:	d102      	bne.n	8013b2c <_printf_float+0x264>
 8013b26:	6823      	ldr	r3, [r4, #0]
 8013b28:	07d9      	lsls	r1, r3, #31
 8013b2a:	d5d7      	bpl.n	8013adc <_printf_float+0x214>
 8013b2c:	9b05      	ldr	r3, [sp, #20]
 8013b2e:	465a      	mov	r2, fp
 8013b30:	4631      	mov	r1, r6
 8013b32:	4628      	mov	r0, r5
 8013b34:	47b8      	blx	r7
 8013b36:	3001      	adds	r0, #1
 8013b38:	f43f af12 	beq.w	8013960 <_printf_float+0x98>
 8013b3c:	f04f 0a00 	mov.w	sl, #0
 8013b40:	f104 0b1a 	add.w	fp, r4, #26
 8013b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b46:	425b      	negs	r3, r3
 8013b48:	4553      	cmp	r3, sl
 8013b4a:	dc01      	bgt.n	8013b50 <_printf_float+0x288>
 8013b4c:	464b      	mov	r3, r9
 8013b4e:	e794      	b.n	8013a7a <_printf_float+0x1b2>
 8013b50:	2301      	movs	r3, #1
 8013b52:	465a      	mov	r2, fp
 8013b54:	4631      	mov	r1, r6
 8013b56:	4628      	mov	r0, r5
 8013b58:	47b8      	blx	r7
 8013b5a:	3001      	adds	r0, #1
 8013b5c:	f43f af00 	beq.w	8013960 <_printf_float+0x98>
 8013b60:	f10a 0a01 	add.w	sl, sl, #1
 8013b64:	e7ee      	b.n	8013b44 <_printf_float+0x27c>
 8013b66:	bf00      	nop
 8013b68:	ffffffff 	.word	0xffffffff
 8013b6c:	7fefffff 	.word	0x7fefffff
 8013b70:	08018258 	.word	0x08018258
 8013b74:	0801825c 	.word	0x0801825c
 8013b78:	08018260 	.word	0x08018260
 8013b7c:	08018264 	.word	0x08018264
 8013b80:	08018268 	.word	0x08018268
 8013b84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013b86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013b8a:	4553      	cmp	r3, sl
 8013b8c:	bfa8      	it	ge
 8013b8e:	4653      	movge	r3, sl
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	4699      	mov	r9, r3
 8013b94:	dc37      	bgt.n	8013c06 <_printf_float+0x33e>
 8013b96:	2300      	movs	r3, #0
 8013b98:	9307      	str	r3, [sp, #28]
 8013b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013b9e:	f104 021a 	add.w	r2, r4, #26
 8013ba2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013ba4:	9907      	ldr	r1, [sp, #28]
 8013ba6:	9306      	str	r3, [sp, #24]
 8013ba8:	eba3 0309 	sub.w	r3, r3, r9
 8013bac:	428b      	cmp	r3, r1
 8013bae:	dc31      	bgt.n	8013c14 <_printf_float+0x34c>
 8013bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bb2:	459a      	cmp	sl, r3
 8013bb4:	dc3b      	bgt.n	8013c2e <_printf_float+0x366>
 8013bb6:	6823      	ldr	r3, [r4, #0]
 8013bb8:	07da      	lsls	r2, r3, #31
 8013bba:	d438      	bmi.n	8013c2e <_printf_float+0x366>
 8013bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bbe:	ebaa 0903 	sub.w	r9, sl, r3
 8013bc2:	9b06      	ldr	r3, [sp, #24]
 8013bc4:	ebaa 0303 	sub.w	r3, sl, r3
 8013bc8:	4599      	cmp	r9, r3
 8013bca:	bfa8      	it	ge
 8013bcc:	4699      	movge	r9, r3
 8013bce:	f1b9 0f00 	cmp.w	r9, #0
 8013bd2:	dc34      	bgt.n	8013c3e <_printf_float+0x376>
 8013bd4:	f04f 0800 	mov.w	r8, #0
 8013bd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013bdc:	f104 0b1a 	add.w	fp, r4, #26
 8013be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013be2:	ebaa 0303 	sub.w	r3, sl, r3
 8013be6:	eba3 0309 	sub.w	r3, r3, r9
 8013bea:	4543      	cmp	r3, r8
 8013bec:	f77f af76 	ble.w	8013adc <_printf_float+0x214>
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	465a      	mov	r2, fp
 8013bf4:	4631      	mov	r1, r6
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	47b8      	blx	r7
 8013bfa:	3001      	adds	r0, #1
 8013bfc:	f43f aeb0 	beq.w	8013960 <_printf_float+0x98>
 8013c00:	f108 0801 	add.w	r8, r8, #1
 8013c04:	e7ec      	b.n	8013be0 <_printf_float+0x318>
 8013c06:	4642      	mov	r2, r8
 8013c08:	4631      	mov	r1, r6
 8013c0a:	4628      	mov	r0, r5
 8013c0c:	47b8      	blx	r7
 8013c0e:	3001      	adds	r0, #1
 8013c10:	d1c1      	bne.n	8013b96 <_printf_float+0x2ce>
 8013c12:	e6a5      	b.n	8013960 <_printf_float+0x98>
 8013c14:	2301      	movs	r3, #1
 8013c16:	4631      	mov	r1, r6
 8013c18:	4628      	mov	r0, r5
 8013c1a:	9206      	str	r2, [sp, #24]
 8013c1c:	47b8      	blx	r7
 8013c1e:	3001      	adds	r0, #1
 8013c20:	f43f ae9e 	beq.w	8013960 <_printf_float+0x98>
 8013c24:	9b07      	ldr	r3, [sp, #28]
 8013c26:	9a06      	ldr	r2, [sp, #24]
 8013c28:	3301      	adds	r3, #1
 8013c2a:	9307      	str	r3, [sp, #28]
 8013c2c:	e7b9      	b.n	8013ba2 <_printf_float+0x2da>
 8013c2e:	9b05      	ldr	r3, [sp, #20]
 8013c30:	465a      	mov	r2, fp
 8013c32:	4631      	mov	r1, r6
 8013c34:	4628      	mov	r0, r5
 8013c36:	47b8      	blx	r7
 8013c38:	3001      	adds	r0, #1
 8013c3a:	d1bf      	bne.n	8013bbc <_printf_float+0x2f4>
 8013c3c:	e690      	b.n	8013960 <_printf_float+0x98>
 8013c3e:	9a06      	ldr	r2, [sp, #24]
 8013c40:	464b      	mov	r3, r9
 8013c42:	4442      	add	r2, r8
 8013c44:	4631      	mov	r1, r6
 8013c46:	4628      	mov	r0, r5
 8013c48:	47b8      	blx	r7
 8013c4a:	3001      	adds	r0, #1
 8013c4c:	d1c2      	bne.n	8013bd4 <_printf_float+0x30c>
 8013c4e:	e687      	b.n	8013960 <_printf_float+0x98>
 8013c50:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8013c54:	f1b9 0f01 	cmp.w	r9, #1
 8013c58:	dc01      	bgt.n	8013c5e <_printf_float+0x396>
 8013c5a:	07db      	lsls	r3, r3, #31
 8013c5c:	d536      	bpl.n	8013ccc <_printf_float+0x404>
 8013c5e:	2301      	movs	r3, #1
 8013c60:	4642      	mov	r2, r8
 8013c62:	4631      	mov	r1, r6
 8013c64:	4628      	mov	r0, r5
 8013c66:	47b8      	blx	r7
 8013c68:	3001      	adds	r0, #1
 8013c6a:	f43f ae79 	beq.w	8013960 <_printf_float+0x98>
 8013c6e:	9b05      	ldr	r3, [sp, #20]
 8013c70:	465a      	mov	r2, fp
 8013c72:	4631      	mov	r1, r6
 8013c74:	4628      	mov	r0, r5
 8013c76:	47b8      	blx	r7
 8013c78:	3001      	adds	r0, #1
 8013c7a:	f43f ae71 	beq.w	8013960 <_printf_float+0x98>
 8013c7e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013c82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c8a:	f109 39ff 	add.w	r9, r9, #4294967295
 8013c8e:	d018      	beq.n	8013cc2 <_printf_float+0x3fa>
 8013c90:	464b      	mov	r3, r9
 8013c92:	f108 0201 	add.w	r2, r8, #1
 8013c96:	4631      	mov	r1, r6
 8013c98:	4628      	mov	r0, r5
 8013c9a:	47b8      	blx	r7
 8013c9c:	3001      	adds	r0, #1
 8013c9e:	d10c      	bne.n	8013cba <_printf_float+0x3f2>
 8013ca0:	e65e      	b.n	8013960 <_printf_float+0x98>
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	465a      	mov	r2, fp
 8013ca6:	4631      	mov	r1, r6
 8013ca8:	4628      	mov	r0, r5
 8013caa:	47b8      	blx	r7
 8013cac:	3001      	adds	r0, #1
 8013cae:	f43f ae57 	beq.w	8013960 <_printf_float+0x98>
 8013cb2:	f108 0801 	add.w	r8, r8, #1
 8013cb6:	45c8      	cmp	r8, r9
 8013cb8:	dbf3      	blt.n	8013ca2 <_printf_float+0x3da>
 8013cba:	4653      	mov	r3, sl
 8013cbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013cc0:	e6dc      	b.n	8013a7c <_printf_float+0x1b4>
 8013cc2:	f04f 0800 	mov.w	r8, #0
 8013cc6:	f104 0b1a 	add.w	fp, r4, #26
 8013cca:	e7f4      	b.n	8013cb6 <_printf_float+0x3ee>
 8013ccc:	2301      	movs	r3, #1
 8013cce:	4642      	mov	r2, r8
 8013cd0:	e7e1      	b.n	8013c96 <_printf_float+0x3ce>
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	464a      	mov	r2, r9
 8013cd6:	4631      	mov	r1, r6
 8013cd8:	4628      	mov	r0, r5
 8013cda:	47b8      	blx	r7
 8013cdc:	3001      	adds	r0, #1
 8013cde:	f43f ae3f 	beq.w	8013960 <_printf_float+0x98>
 8013ce2:	f108 0801 	add.w	r8, r8, #1
 8013ce6:	68e3      	ldr	r3, [r4, #12]
 8013ce8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013cea:	1a5b      	subs	r3, r3, r1
 8013cec:	4543      	cmp	r3, r8
 8013cee:	dcf0      	bgt.n	8013cd2 <_printf_float+0x40a>
 8013cf0:	e6f8      	b.n	8013ae4 <_printf_float+0x21c>
 8013cf2:	f04f 0800 	mov.w	r8, #0
 8013cf6:	f104 0919 	add.w	r9, r4, #25
 8013cfa:	e7f4      	b.n	8013ce6 <_printf_float+0x41e>

08013cfc <_printf_common>:
 8013cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d00:	4616      	mov	r6, r2
 8013d02:	4698      	mov	r8, r3
 8013d04:	688a      	ldr	r2, [r1, #8]
 8013d06:	690b      	ldr	r3, [r1, #16]
 8013d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	bfb8      	it	lt
 8013d10:	4613      	movlt	r3, r2
 8013d12:	6033      	str	r3, [r6, #0]
 8013d14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013d18:	4607      	mov	r7, r0
 8013d1a:	460c      	mov	r4, r1
 8013d1c:	b10a      	cbz	r2, 8013d22 <_printf_common+0x26>
 8013d1e:	3301      	adds	r3, #1
 8013d20:	6033      	str	r3, [r6, #0]
 8013d22:	6823      	ldr	r3, [r4, #0]
 8013d24:	0699      	lsls	r1, r3, #26
 8013d26:	bf42      	ittt	mi
 8013d28:	6833      	ldrmi	r3, [r6, #0]
 8013d2a:	3302      	addmi	r3, #2
 8013d2c:	6033      	strmi	r3, [r6, #0]
 8013d2e:	6825      	ldr	r5, [r4, #0]
 8013d30:	f015 0506 	ands.w	r5, r5, #6
 8013d34:	d106      	bne.n	8013d44 <_printf_common+0x48>
 8013d36:	f104 0a19 	add.w	sl, r4, #25
 8013d3a:	68e3      	ldr	r3, [r4, #12]
 8013d3c:	6832      	ldr	r2, [r6, #0]
 8013d3e:	1a9b      	subs	r3, r3, r2
 8013d40:	42ab      	cmp	r3, r5
 8013d42:	dc26      	bgt.n	8013d92 <_printf_common+0x96>
 8013d44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013d48:	6822      	ldr	r2, [r4, #0]
 8013d4a:	3b00      	subs	r3, #0
 8013d4c:	bf18      	it	ne
 8013d4e:	2301      	movne	r3, #1
 8013d50:	0692      	lsls	r2, r2, #26
 8013d52:	d42b      	bmi.n	8013dac <_printf_common+0xb0>
 8013d54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013d58:	4641      	mov	r1, r8
 8013d5a:	4638      	mov	r0, r7
 8013d5c:	47c8      	blx	r9
 8013d5e:	3001      	adds	r0, #1
 8013d60:	d01e      	beq.n	8013da0 <_printf_common+0xa4>
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	6922      	ldr	r2, [r4, #16]
 8013d66:	f003 0306 	and.w	r3, r3, #6
 8013d6a:	2b04      	cmp	r3, #4
 8013d6c:	bf02      	ittt	eq
 8013d6e:	68e5      	ldreq	r5, [r4, #12]
 8013d70:	6833      	ldreq	r3, [r6, #0]
 8013d72:	1aed      	subeq	r5, r5, r3
 8013d74:	68a3      	ldr	r3, [r4, #8]
 8013d76:	bf0c      	ite	eq
 8013d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d7c:	2500      	movne	r5, #0
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	bfc4      	itt	gt
 8013d82:	1a9b      	subgt	r3, r3, r2
 8013d84:	18ed      	addgt	r5, r5, r3
 8013d86:	2600      	movs	r6, #0
 8013d88:	341a      	adds	r4, #26
 8013d8a:	42b5      	cmp	r5, r6
 8013d8c:	d11a      	bne.n	8013dc4 <_printf_common+0xc8>
 8013d8e:	2000      	movs	r0, #0
 8013d90:	e008      	b.n	8013da4 <_printf_common+0xa8>
 8013d92:	2301      	movs	r3, #1
 8013d94:	4652      	mov	r2, sl
 8013d96:	4641      	mov	r1, r8
 8013d98:	4638      	mov	r0, r7
 8013d9a:	47c8      	blx	r9
 8013d9c:	3001      	adds	r0, #1
 8013d9e:	d103      	bne.n	8013da8 <_printf_common+0xac>
 8013da0:	f04f 30ff 	mov.w	r0, #4294967295
 8013da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da8:	3501      	adds	r5, #1
 8013daa:	e7c6      	b.n	8013d3a <_printf_common+0x3e>
 8013dac:	18e1      	adds	r1, r4, r3
 8013dae:	1c5a      	adds	r2, r3, #1
 8013db0:	2030      	movs	r0, #48	@ 0x30
 8013db2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013db6:	4422      	add	r2, r4
 8013db8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013dbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013dc0:	3302      	adds	r3, #2
 8013dc2:	e7c7      	b.n	8013d54 <_printf_common+0x58>
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	4622      	mov	r2, r4
 8013dc8:	4641      	mov	r1, r8
 8013dca:	4638      	mov	r0, r7
 8013dcc:	47c8      	blx	r9
 8013dce:	3001      	adds	r0, #1
 8013dd0:	d0e6      	beq.n	8013da0 <_printf_common+0xa4>
 8013dd2:	3601      	adds	r6, #1
 8013dd4:	e7d9      	b.n	8013d8a <_printf_common+0x8e>
	...

08013dd8 <_printf_i>:
 8013dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ddc:	7e0f      	ldrb	r7, [r1, #24]
 8013dde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013de0:	2f78      	cmp	r7, #120	@ 0x78
 8013de2:	4691      	mov	r9, r2
 8013de4:	4680      	mov	r8, r0
 8013de6:	460c      	mov	r4, r1
 8013de8:	469a      	mov	sl, r3
 8013dea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013dee:	d807      	bhi.n	8013e00 <_printf_i+0x28>
 8013df0:	2f62      	cmp	r7, #98	@ 0x62
 8013df2:	d80a      	bhi.n	8013e0a <_printf_i+0x32>
 8013df4:	2f00      	cmp	r7, #0
 8013df6:	f000 80d2 	beq.w	8013f9e <_printf_i+0x1c6>
 8013dfa:	2f58      	cmp	r7, #88	@ 0x58
 8013dfc:	f000 80b9 	beq.w	8013f72 <_printf_i+0x19a>
 8013e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013e04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013e08:	e03a      	b.n	8013e80 <_printf_i+0xa8>
 8013e0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013e0e:	2b15      	cmp	r3, #21
 8013e10:	d8f6      	bhi.n	8013e00 <_printf_i+0x28>
 8013e12:	a101      	add	r1, pc, #4	@ (adr r1, 8013e18 <_printf_i+0x40>)
 8013e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e18:	08013e71 	.word	0x08013e71
 8013e1c:	08013e85 	.word	0x08013e85
 8013e20:	08013e01 	.word	0x08013e01
 8013e24:	08013e01 	.word	0x08013e01
 8013e28:	08013e01 	.word	0x08013e01
 8013e2c:	08013e01 	.word	0x08013e01
 8013e30:	08013e85 	.word	0x08013e85
 8013e34:	08013e01 	.word	0x08013e01
 8013e38:	08013e01 	.word	0x08013e01
 8013e3c:	08013e01 	.word	0x08013e01
 8013e40:	08013e01 	.word	0x08013e01
 8013e44:	08013f85 	.word	0x08013f85
 8013e48:	08013eaf 	.word	0x08013eaf
 8013e4c:	08013f3f 	.word	0x08013f3f
 8013e50:	08013e01 	.word	0x08013e01
 8013e54:	08013e01 	.word	0x08013e01
 8013e58:	08013fa7 	.word	0x08013fa7
 8013e5c:	08013e01 	.word	0x08013e01
 8013e60:	08013eaf 	.word	0x08013eaf
 8013e64:	08013e01 	.word	0x08013e01
 8013e68:	08013e01 	.word	0x08013e01
 8013e6c:	08013f47 	.word	0x08013f47
 8013e70:	6833      	ldr	r3, [r6, #0]
 8013e72:	1d1a      	adds	r2, r3, #4
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	6032      	str	r2, [r6, #0]
 8013e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013e7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013e80:	2301      	movs	r3, #1
 8013e82:	e09d      	b.n	8013fc0 <_printf_i+0x1e8>
 8013e84:	6833      	ldr	r3, [r6, #0]
 8013e86:	6820      	ldr	r0, [r4, #0]
 8013e88:	1d19      	adds	r1, r3, #4
 8013e8a:	6031      	str	r1, [r6, #0]
 8013e8c:	0606      	lsls	r6, r0, #24
 8013e8e:	d501      	bpl.n	8013e94 <_printf_i+0xbc>
 8013e90:	681d      	ldr	r5, [r3, #0]
 8013e92:	e003      	b.n	8013e9c <_printf_i+0xc4>
 8013e94:	0645      	lsls	r5, r0, #25
 8013e96:	d5fb      	bpl.n	8013e90 <_printf_i+0xb8>
 8013e98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013e9c:	2d00      	cmp	r5, #0
 8013e9e:	da03      	bge.n	8013ea8 <_printf_i+0xd0>
 8013ea0:	232d      	movs	r3, #45	@ 0x2d
 8013ea2:	426d      	negs	r5, r5
 8013ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013ea8:	4859      	ldr	r0, [pc, #356]	@ (8014010 <_printf_i+0x238>)
 8013eaa:	230a      	movs	r3, #10
 8013eac:	e011      	b.n	8013ed2 <_printf_i+0xfa>
 8013eae:	6821      	ldr	r1, [r4, #0]
 8013eb0:	6833      	ldr	r3, [r6, #0]
 8013eb2:	0608      	lsls	r0, r1, #24
 8013eb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013eb8:	d402      	bmi.n	8013ec0 <_printf_i+0xe8>
 8013eba:	0649      	lsls	r1, r1, #25
 8013ebc:	bf48      	it	mi
 8013ebe:	b2ad      	uxthmi	r5, r5
 8013ec0:	2f6f      	cmp	r7, #111	@ 0x6f
 8013ec2:	4853      	ldr	r0, [pc, #332]	@ (8014010 <_printf_i+0x238>)
 8013ec4:	6033      	str	r3, [r6, #0]
 8013ec6:	bf14      	ite	ne
 8013ec8:	230a      	movne	r3, #10
 8013eca:	2308      	moveq	r3, #8
 8013ecc:	2100      	movs	r1, #0
 8013ece:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013ed2:	6866      	ldr	r6, [r4, #4]
 8013ed4:	60a6      	str	r6, [r4, #8]
 8013ed6:	2e00      	cmp	r6, #0
 8013ed8:	bfa2      	ittt	ge
 8013eda:	6821      	ldrge	r1, [r4, #0]
 8013edc:	f021 0104 	bicge.w	r1, r1, #4
 8013ee0:	6021      	strge	r1, [r4, #0]
 8013ee2:	b90d      	cbnz	r5, 8013ee8 <_printf_i+0x110>
 8013ee4:	2e00      	cmp	r6, #0
 8013ee6:	d04b      	beq.n	8013f80 <_printf_i+0x1a8>
 8013ee8:	4616      	mov	r6, r2
 8013eea:	fbb5 f1f3 	udiv	r1, r5, r3
 8013eee:	fb03 5711 	mls	r7, r3, r1, r5
 8013ef2:	5dc7      	ldrb	r7, [r0, r7]
 8013ef4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013ef8:	462f      	mov	r7, r5
 8013efa:	42bb      	cmp	r3, r7
 8013efc:	460d      	mov	r5, r1
 8013efe:	d9f4      	bls.n	8013eea <_printf_i+0x112>
 8013f00:	2b08      	cmp	r3, #8
 8013f02:	d10b      	bne.n	8013f1c <_printf_i+0x144>
 8013f04:	6823      	ldr	r3, [r4, #0]
 8013f06:	07df      	lsls	r7, r3, #31
 8013f08:	d508      	bpl.n	8013f1c <_printf_i+0x144>
 8013f0a:	6923      	ldr	r3, [r4, #16]
 8013f0c:	6861      	ldr	r1, [r4, #4]
 8013f0e:	4299      	cmp	r1, r3
 8013f10:	bfde      	ittt	le
 8013f12:	2330      	movle	r3, #48	@ 0x30
 8013f14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013f18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013f1c:	1b92      	subs	r2, r2, r6
 8013f1e:	6122      	str	r2, [r4, #16]
 8013f20:	f8cd a000 	str.w	sl, [sp]
 8013f24:	464b      	mov	r3, r9
 8013f26:	aa03      	add	r2, sp, #12
 8013f28:	4621      	mov	r1, r4
 8013f2a:	4640      	mov	r0, r8
 8013f2c:	f7ff fee6 	bl	8013cfc <_printf_common>
 8013f30:	3001      	adds	r0, #1
 8013f32:	d14a      	bne.n	8013fca <_printf_i+0x1f2>
 8013f34:	f04f 30ff 	mov.w	r0, #4294967295
 8013f38:	b004      	add	sp, #16
 8013f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f3e:	6823      	ldr	r3, [r4, #0]
 8013f40:	f043 0320 	orr.w	r3, r3, #32
 8013f44:	6023      	str	r3, [r4, #0]
 8013f46:	4833      	ldr	r0, [pc, #204]	@ (8014014 <_printf_i+0x23c>)
 8013f48:	2778      	movs	r7, #120	@ 0x78
 8013f4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013f4e:	6823      	ldr	r3, [r4, #0]
 8013f50:	6831      	ldr	r1, [r6, #0]
 8013f52:	061f      	lsls	r7, r3, #24
 8013f54:	f851 5b04 	ldr.w	r5, [r1], #4
 8013f58:	d402      	bmi.n	8013f60 <_printf_i+0x188>
 8013f5a:	065f      	lsls	r7, r3, #25
 8013f5c:	bf48      	it	mi
 8013f5e:	b2ad      	uxthmi	r5, r5
 8013f60:	6031      	str	r1, [r6, #0]
 8013f62:	07d9      	lsls	r1, r3, #31
 8013f64:	bf44      	itt	mi
 8013f66:	f043 0320 	orrmi.w	r3, r3, #32
 8013f6a:	6023      	strmi	r3, [r4, #0]
 8013f6c:	b11d      	cbz	r5, 8013f76 <_printf_i+0x19e>
 8013f6e:	2310      	movs	r3, #16
 8013f70:	e7ac      	b.n	8013ecc <_printf_i+0xf4>
 8013f72:	4827      	ldr	r0, [pc, #156]	@ (8014010 <_printf_i+0x238>)
 8013f74:	e7e9      	b.n	8013f4a <_printf_i+0x172>
 8013f76:	6823      	ldr	r3, [r4, #0]
 8013f78:	f023 0320 	bic.w	r3, r3, #32
 8013f7c:	6023      	str	r3, [r4, #0]
 8013f7e:	e7f6      	b.n	8013f6e <_printf_i+0x196>
 8013f80:	4616      	mov	r6, r2
 8013f82:	e7bd      	b.n	8013f00 <_printf_i+0x128>
 8013f84:	6833      	ldr	r3, [r6, #0]
 8013f86:	6825      	ldr	r5, [r4, #0]
 8013f88:	6961      	ldr	r1, [r4, #20]
 8013f8a:	1d18      	adds	r0, r3, #4
 8013f8c:	6030      	str	r0, [r6, #0]
 8013f8e:	062e      	lsls	r6, r5, #24
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	d501      	bpl.n	8013f98 <_printf_i+0x1c0>
 8013f94:	6019      	str	r1, [r3, #0]
 8013f96:	e002      	b.n	8013f9e <_printf_i+0x1c6>
 8013f98:	0668      	lsls	r0, r5, #25
 8013f9a:	d5fb      	bpl.n	8013f94 <_printf_i+0x1bc>
 8013f9c:	8019      	strh	r1, [r3, #0]
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	6123      	str	r3, [r4, #16]
 8013fa2:	4616      	mov	r6, r2
 8013fa4:	e7bc      	b.n	8013f20 <_printf_i+0x148>
 8013fa6:	6833      	ldr	r3, [r6, #0]
 8013fa8:	1d1a      	adds	r2, r3, #4
 8013faa:	6032      	str	r2, [r6, #0]
 8013fac:	681e      	ldr	r6, [r3, #0]
 8013fae:	6862      	ldr	r2, [r4, #4]
 8013fb0:	2100      	movs	r1, #0
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	f7ec f9ac 	bl	8000310 <memchr>
 8013fb8:	b108      	cbz	r0, 8013fbe <_printf_i+0x1e6>
 8013fba:	1b80      	subs	r0, r0, r6
 8013fbc:	6060      	str	r0, [r4, #4]
 8013fbe:	6863      	ldr	r3, [r4, #4]
 8013fc0:	6123      	str	r3, [r4, #16]
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013fc8:	e7aa      	b.n	8013f20 <_printf_i+0x148>
 8013fca:	6923      	ldr	r3, [r4, #16]
 8013fcc:	4632      	mov	r2, r6
 8013fce:	4649      	mov	r1, r9
 8013fd0:	4640      	mov	r0, r8
 8013fd2:	47d0      	blx	sl
 8013fd4:	3001      	adds	r0, #1
 8013fd6:	d0ad      	beq.n	8013f34 <_printf_i+0x15c>
 8013fd8:	6823      	ldr	r3, [r4, #0]
 8013fda:	079b      	lsls	r3, r3, #30
 8013fdc:	d413      	bmi.n	8014006 <_printf_i+0x22e>
 8013fde:	68e0      	ldr	r0, [r4, #12]
 8013fe0:	9b03      	ldr	r3, [sp, #12]
 8013fe2:	4298      	cmp	r0, r3
 8013fe4:	bfb8      	it	lt
 8013fe6:	4618      	movlt	r0, r3
 8013fe8:	e7a6      	b.n	8013f38 <_printf_i+0x160>
 8013fea:	2301      	movs	r3, #1
 8013fec:	4632      	mov	r2, r6
 8013fee:	4649      	mov	r1, r9
 8013ff0:	4640      	mov	r0, r8
 8013ff2:	47d0      	blx	sl
 8013ff4:	3001      	adds	r0, #1
 8013ff6:	d09d      	beq.n	8013f34 <_printf_i+0x15c>
 8013ff8:	3501      	adds	r5, #1
 8013ffa:	68e3      	ldr	r3, [r4, #12]
 8013ffc:	9903      	ldr	r1, [sp, #12]
 8013ffe:	1a5b      	subs	r3, r3, r1
 8014000:	42ab      	cmp	r3, r5
 8014002:	dcf2      	bgt.n	8013fea <_printf_i+0x212>
 8014004:	e7eb      	b.n	8013fde <_printf_i+0x206>
 8014006:	2500      	movs	r5, #0
 8014008:	f104 0619 	add.w	r6, r4, #25
 801400c:	e7f5      	b.n	8013ffa <_printf_i+0x222>
 801400e:	bf00      	nop
 8014010:	0801826a 	.word	0x0801826a
 8014014:	0801827b 	.word	0x0801827b

08014018 <_scanf_float>:
 8014018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801401c:	b087      	sub	sp, #28
 801401e:	4617      	mov	r7, r2
 8014020:	9303      	str	r3, [sp, #12]
 8014022:	688b      	ldr	r3, [r1, #8]
 8014024:	1e5a      	subs	r2, r3, #1
 8014026:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801402a:	bf81      	itttt	hi
 801402c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014030:	eb03 0b05 	addhi.w	fp, r3, r5
 8014034:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014038:	608b      	strhi	r3, [r1, #8]
 801403a:	680b      	ldr	r3, [r1, #0]
 801403c:	460a      	mov	r2, r1
 801403e:	f04f 0500 	mov.w	r5, #0
 8014042:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014046:	f842 3b1c 	str.w	r3, [r2], #28
 801404a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801404e:	4680      	mov	r8, r0
 8014050:	460c      	mov	r4, r1
 8014052:	bf98      	it	ls
 8014054:	f04f 0b00 	movls.w	fp, #0
 8014058:	9201      	str	r2, [sp, #4]
 801405a:	4616      	mov	r6, r2
 801405c:	46aa      	mov	sl, r5
 801405e:	46a9      	mov	r9, r5
 8014060:	9502      	str	r5, [sp, #8]
 8014062:	68a2      	ldr	r2, [r4, #8]
 8014064:	b152      	cbz	r2, 801407c <_scanf_float+0x64>
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	781b      	ldrb	r3, [r3, #0]
 801406a:	2b4e      	cmp	r3, #78	@ 0x4e
 801406c:	d864      	bhi.n	8014138 <_scanf_float+0x120>
 801406e:	2b40      	cmp	r3, #64	@ 0x40
 8014070:	d83c      	bhi.n	80140ec <_scanf_float+0xd4>
 8014072:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014076:	b2c8      	uxtb	r0, r1
 8014078:	280e      	cmp	r0, #14
 801407a:	d93a      	bls.n	80140f2 <_scanf_float+0xda>
 801407c:	f1b9 0f00 	cmp.w	r9, #0
 8014080:	d003      	beq.n	801408a <_scanf_float+0x72>
 8014082:	6823      	ldr	r3, [r4, #0]
 8014084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014088:	6023      	str	r3, [r4, #0]
 801408a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801408e:	f1ba 0f01 	cmp.w	sl, #1
 8014092:	f200 8117 	bhi.w	80142c4 <_scanf_float+0x2ac>
 8014096:	9b01      	ldr	r3, [sp, #4]
 8014098:	429e      	cmp	r6, r3
 801409a:	f200 8108 	bhi.w	80142ae <_scanf_float+0x296>
 801409e:	2001      	movs	r0, #1
 80140a0:	b007      	add	sp, #28
 80140a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80140aa:	2a0d      	cmp	r2, #13
 80140ac:	d8e6      	bhi.n	801407c <_scanf_float+0x64>
 80140ae:	a101      	add	r1, pc, #4	@ (adr r1, 80140b4 <_scanf_float+0x9c>)
 80140b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80140b4:	080141fb 	.word	0x080141fb
 80140b8:	0801407d 	.word	0x0801407d
 80140bc:	0801407d 	.word	0x0801407d
 80140c0:	0801407d 	.word	0x0801407d
 80140c4:	0801425b 	.word	0x0801425b
 80140c8:	08014233 	.word	0x08014233
 80140cc:	0801407d 	.word	0x0801407d
 80140d0:	0801407d 	.word	0x0801407d
 80140d4:	08014209 	.word	0x08014209
 80140d8:	0801407d 	.word	0x0801407d
 80140dc:	0801407d 	.word	0x0801407d
 80140e0:	0801407d 	.word	0x0801407d
 80140e4:	0801407d 	.word	0x0801407d
 80140e8:	080141c1 	.word	0x080141c1
 80140ec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80140f0:	e7db      	b.n	80140aa <_scanf_float+0x92>
 80140f2:	290e      	cmp	r1, #14
 80140f4:	d8c2      	bhi.n	801407c <_scanf_float+0x64>
 80140f6:	a001      	add	r0, pc, #4	@ (adr r0, 80140fc <_scanf_float+0xe4>)
 80140f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80140fc:	080141b1 	.word	0x080141b1
 8014100:	0801407d 	.word	0x0801407d
 8014104:	080141b1 	.word	0x080141b1
 8014108:	08014247 	.word	0x08014247
 801410c:	0801407d 	.word	0x0801407d
 8014110:	08014159 	.word	0x08014159
 8014114:	08014197 	.word	0x08014197
 8014118:	08014197 	.word	0x08014197
 801411c:	08014197 	.word	0x08014197
 8014120:	08014197 	.word	0x08014197
 8014124:	08014197 	.word	0x08014197
 8014128:	08014197 	.word	0x08014197
 801412c:	08014197 	.word	0x08014197
 8014130:	08014197 	.word	0x08014197
 8014134:	08014197 	.word	0x08014197
 8014138:	2b6e      	cmp	r3, #110	@ 0x6e
 801413a:	d809      	bhi.n	8014150 <_scanf_float+0x138>
 801413c:	2b60      	cmp	r3, #96	@ 0x60
 801413e:	d8b2      	bhi.n	80140a6 <_scanf_float+0x8e>
 8014140:	2b54      	cmp	r3, #84	@ 0x54
 8014142:	d07b      	beq.n	801423c <_scanf_float+0x224>
 8014144:	2b59      	cmp	r3, #89	@ 0x59
 8014146:	d199      	bne.n	801407c <_scanf_float+0x64>
 8014148:	2d07      	cmp	r5, #7
 801414a:	d197      	bne.n	801407c <_scanf_float+0x64>
 801414c:	2508      	movs	r5, #8
 801414e:	e02c      	b.n	80141aa <_scanf_float+0x192>
 8014150:	2b74      	cmp	r3, #116	@ 0x74
 8014152:	d073      	beq.n	801423c <_scanf_float+0x224>
 8014154:	2b79      	cmp	r3, #121	@ 0x79
 8014156:	e7f6      	b.n	8014146 <_scanf_float+0x12e>
 8014158:	6821      	ldr	r1, [r4, #0]
 801415a:	05c8      	lsls	r0, r1, #23
 801415c:	d51b      	bpl.n	8014196 <_scanf_float+0x17e>
 801415e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014162:	6021      	str	r1, [r4, #0]
 8014164:	f109 0901 	add.w	r9, r9, #1
 8014168:	f1bb 0f00 	cmp.w	fp, #0
 801416c:	d003      	beq.n	8014176 <_scanf_float+0x15e>
 801416e:	3201      	adds	r2, #1
 8014170:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014174:	60a2      	str	r2, [r4, #8]
 8014176:	68a3      	ldr	r3, [r4, #8]
 8014178:	3b01      	subs	r3, #1
 801417a:	60a3      	str	r3, [r4, #8]
 801417c:	6923      	ldr	r3, [r4, #16]
 801417e:	3301      	adds	r3, #1
 8014180:	6123      	str	r3, [r4, #16]
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	3b01      	subs	r3, #1
 8014186:	2b00      	cmp	r3, #0
 8014188:	607b      	str	r3, [r7, #4]
 801418a:	f340 8087 	ble.w	801429c <_scanf_float+0x284>
 801418e:	683b      	ldr	r3, [r7, #0]
 8014190:	3301      	adds	r3, #1
 8014192:	603b      	str	r3, [r7, #0]
 8014194:	e765      	b.n	8014062 <_scanf_float+0x4a>
 8014196:	eb1a 0105 	adds.w	r1, sl, r5
 801419a:	f47f af6f 	bne.w	801407c <_scanf_float+0x64>
 801419e:	6822      	ldr	r2, [r4, #0]
 80141a0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80141a4:	6022      	str	r2, [r4, #0]
 80141a6:	460d      	mov	r5, r1
 80141a8:	468a      	mov	sl, r1
 80141aa:	f806 3b01 	strb.w	r3, [r6], #1
 80141ae:	e7e2      	b.n	8014176 <_scanf_float+0x15e>
 80141b0:	6822      	ldr	r2, [r4, #0]
 80141b2:	0610      	lsls	r0, r2, #24
 80141b4:	f57f af62 	bpl.w	801407c <_scanf_float+0x64>
 80141b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80141bc:	6022      	str	r2, [r4, #0]
 80141be:	e7f4      	b.n	80141aa <_scanf_float+0x192>
 80141c0:	f1ba 0f00 	cmp.w	sl, #0
 80141c4:	d10e      	bne.n	80141e4 <_scanf_float+0x1cc>
 80141c6:	f1b9 0f00 	cmp.w	r9, #0
 80141ca:	d10e      	bne.n	80141ea <_scanf_float+0x1d2>
 80141cc:	6822      	ldr	r2, [r4, #0]
 80141ce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80141d2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80141d6:	d108      	bne.n	80141ea <_scanf_float+0x1d2>
 80141d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80141dc:	6022      	str	r2, [r4, #0]
 80141de:	f04f 0a01 	mov.w	sl, #1
 80141e2:	e7e2      	b.n	80141aa <_scanf_float+0x192>
 80141e4:	f1ba 0f02 	cmp.w	sl, #2
 80141e8:	d055      	beq.n	8014296 <_scanf_float+0x27e>
 80141ea:	2d01      	cmp	r5, #1
 80141ec:	d002      	beq.n	80141f4 <_scanf_float+0x1dc>
 80141ee:	2d04      	cmp	r5, #4
 80141f0:	f47f af44 	bne.w	801407c <_scanf_float+0x64>
 80141f4:	3501      	adds	r5, #1
 80141f6:	b2ed      	uxtb	r5, r5
 80141f8:	e7d7      	b.n	80141aa <_scanf_float+0x192>
 80141fa:	f1ba 0f01 	cmp.w	sl, #1
 80141fe:	f47f af3d 	bne.w	801407c <_scanf_float+0x64>
 8014202:	f04f 0a02 	mov.w	sl, #2
 8014206:	e7d0      	b.n	80141aa <_scanf_float+0x192>
 8014208:	b97d      	cbnz	r5, 801422a <_scanf_float+0x212>
 801420a:	f1b9 0f00 	cmp.w	r9, #0
 801420e:	f47f af38 	bne.w	8014082 <_scanf_float+0x6a>
 8014212:	6822      	ldr	r2, [r4, #0]
 8014214:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014218:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801421c:	f040 8101 	bne.w	8014422 <_scanf_float+0x40a>
 8014220:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014224:	6022      	str	r2, [r4, #0]
 8014226:	2501      	movs	r5, #1
 8014228:	e7bf      	b.n	80141aa <_scanf_float+0x192>
 801422a:	2d03      	cmp	r5, #3
 801422c:	d0e2      	beq.n	80141f4 <_scanf_float+0x1dc>
 801422e:	2d05      	cmp	r5, #5
 8014230:	e7de      	b.n	80141f0 <_scanf_float+0x1d8>
 8014232:	2d02      	cmp	r5, #2
 8014234:	f47f af22 	bne.w	801407c <_scanf_float+0x64>
 8014238:	2503      	movs	r5, #3
 801423a:	e7b6      	b.n	80141aa <_scanf_float+0x192>
 801423c:	2d06      	cmp	r5, #6
 801423e:	f47f af1d 	bne.w	801407c <_scanf_float+0x64>
 8014242:	2507      	movs	r5, #7
 8014244:	e7b1      	b.n	80141aa <_scanf_float+0x192>
 8014246:	6822      	ldr	r2, [r4, #0]
 8014248:	0591      	lsls	r1, r2, #22
 801424a:	f57f af17 	bpl.w	801407c <_scanf_float+0x64>
 801424e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014252:	6022      	str	r2, [r4, #0]
 8014254:	f8cd 9008 	str.w	r9, [sp, #8]
 8014258:	e7a7      	b.n	80141aa <_scanf_float+0x192>
 801425a:	6822      	ldr	r2, [r4, #0]
 801425c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014260:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014264:	d006      	beq.n	8014274 <_scanf_float+0x25c>
 8014266:	0550      	lsls	r0, r2, #21
 8014268:	f57f af08 	bpl.w	801407c <_scanf_float+0x64>
 801426c:	f1b9 0f00 	cmp.w	r9, #0
 8014270:	f000 80d7 	beq.w	8014422 <_scanf_float+0x40a>
 8014274:	0591      	lsls	r1, r2, #22
 8014276:	bf58      	it	pl
 8014278:	9902      	ldrpl	r1, [sp, #8]
 801427a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801427e:	bf58      	it	pl
 8014280:	eba9 0101 	subpl.w	r1, r9, r1
 8014284:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014288:	bf58      	it	pl
 801428a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801428e:	6022      	str	r2, [r4, #0]
 8014290:	f04f 0900 	mov.w	r9, #0
 8014294:	e789      	b.n	80141aa <_scanf_float+0x192>
 8014296:	f04f 0a03 	mov.w	sl, #3
 801429a:	e786      	b.n	80141aa <_scanf_float+0x192>
 801429c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80142a0:	4639      	mov	r1, r7
 80142a2:	4640      	mov	r0, r8
 80142a4:	4798      	blx	r3
 80142a6:	2800      	cmp	r0, #0
 80142a8:	f43f aedb 	beq.w	8014062 <_scanf_float+0x4a>
 80142ac:	e6e6      	b.n	801407c <_scanf_float+0x64>
 80142ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80142b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80142b6:	463a      	mov	r2, r7
 80142b8:	4640      	mov	r0, r8
 80142ba:	4798      	blx	r3
 80142bc:	6923      	ldr	r3, [r4, #16]
 80142be:	3b01      	subs	r3, #1
 80142c0:	6123      	str	r3, [r4, #16]
 80142c2:	e6e8      	b.n	8014096 <_scanf_float+0x7e>
 80142c4:	1e6b      	subs	r3, r5, #1
 80142c6:	2b06      	cmp	r3, #6
 80142c8:	d824      	bhi.n	8014314 <_scanf_float+0x2fc>
 80142ca:	2d02      	cmp	r5, #2
 80142cc:	d836      	bhi.n	801433c <_scanf_float+0x324>
 80142ce:	9b01      	ldr	r3, [sp, #4]
 80142d0:	429e      	cmp	r6, r3
 80142d2:	f67f aee4 	bls.w	801409e <_scanf_float+0x86>
 80142d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80142da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80142de:	463a      	mov	r2, r7
 80142e0:	4640      	mov	r0, r8
 80142e2:	4798      	blx	r3
 80142e4:	6923      	ldr	r3, [r4, #16]
 80142e6:	3b01      	subs	r3, #1
 80142e8:	6123      	str	r3, [r4, #16]
 80142ea:	e7f0      	b.n	80142ce <_scanf_float+0x2b6>
 80142ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80142f0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80142f4:	463a      	mov	r2, r7
 80142f6:	4640      	mov	r0, r8
 80142f8:	4798      	blx	r3
 80142fa:	6923      	ldr	r3, [r4, #16]
 80142fc:	3b01      	subs	r3, #1
 80142fe:	6123      	str	r3, [r4, #16]
 8014300:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014304:	fa5f fa8a 	uxtb.w	sl, sl
 8014308:	f1ba 0f02 	cmp.w	sl, #2
 801430c:	d1ee      	bne.n	80142ec <_scanf_float+0x2d4>
 801430e:	3d03      	subs	r5, #3
 8014310:	b2ed      	uxtb	r5, r5
 8014312:	1b76      	subs	r6, r6, r5
 8014314:	6823      	ldr	r3, [r4, #0]
 8014316:	05da      	lsls	r2, r3, #23
 8014318:	d530      	bpl.n	801437c <_scanf_float+0x364>
 801431a:	055b      	lsls	r3, r3, #21
 801431c:	d511      	bpl.n	8014342 <_scanf_float+0x32a>
 801431e:	9b01      	ldr	r3, [sp, #4]
 8014320:	429e      	cmp	r6, r3
 8014322:	f67f aebc 	bls.w	801409e <_scanf_float+0x86>
 8014326:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801432a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801432e:	463a      	mov	r2, r7
 8014330:	4640      	mov	r0, r8
 8014332:	4798      	blx	r3
 8014334:	6923      	ldr	r3, [r4, #16]
 8014336:	3b01      	subs	r3, #1
 8014338:	6123      	str	r3, [r4, #16]
 801433a:	e7f0      	b.n	801431e <_scanf_float+0x306>
 801433c:	46aa      	mov	sl, r5
 801433e:	46b3      	mov	fp, r6
 8014340:	e7de      	b.n	8014300 <_scanf_float+0x2e8>
 8014342:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014346:	6923      	ldr	r3, [r4, #16]
 8014348:	2965      	cmp	r1, #101	@ 0x65
 801434a:	f103 33ff 	add.w	r3, r3, #4294967295
 801434e:	f106 35ff 	add.w	r5, r6, #4294967295
 8014352:	6123      	str	r3, [r4, #16]
 8014354:	d00c      	beq.n	8014370 <_scanf_float+0x358>
 8014356:	2945      	cmp	r1, #69	@ 0x45
 8014358:	d00a      	beq.n	8014370 <_scanf_float+0x358>
 801435a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801435e:	463a      	mov	r2, r7
 8014360:	4640      	mov	r0, r8
 8014362:	4798      	blx	r3
 8014364:	6923      	ldr	r3, [r4, #16]
 8014366:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801436a:	3b01      	subs	r3, #1
 801436c:	1eb5      	subs	r5, r6, #2
 801436e:	6123      	str	r3, [r4, #16]
 8014370:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014374:	463a      	mov	r2, r7
 8014376:	4640      	mov	r0, r8
 8014378:	4798      	blx	r3
 801437a:	462e      	mov	r6, r5
 801437c:	6822      	ldr	r2, [r4, #0]
 801437e:	f012 0210 	ands.w	r2, r2, #16
 8014382:	d001      	beq.n	8014388 <_scanf_float+0x370>
 8014384:	2000      	movs	r0, #0
 8014386:	e68b      	b.n	80140a0 <_scanf_float+0x88>
 8014388:	7032      	strb	r2, [r6, #0]
 801438a:	6823      	ldr	r3, [r4, #0]
 801438c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014394:	d11a      	bne.n	80143cc <_scanf_float+0x3b4>
 8014396:	9b02      	ldr	r3, [sp, #8]
 8014398:	454b      	cmp	r3, r9
 801439a:	eba3 0209 	sub.w	r2, r3, r9
 801439e:	d121      	bne.n	80143e4 <_scanf_float+0x3cc>
 80143a0:	9901      	ldr	r1, [sp, #4]
 80143a2:	2200      	movs	r2, #0
 80143a4:	4640      	mov	r0, r8
 80143a6:	f002 fc41 	bl	8016c2c <_strtod_r>
 80143aa:	9b03      	ldr	r3, [sp, #12]
 80143ac:	6821      	ldr	r1, [r4, #0]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f011 0f02 	tst.w	r1, #2
 80143b4:	f103 0204 	add.w	r2, r3, #4
 80143b8:	d01f      	beq.n	80143fa <_scanf_float+0x3e2>
 80143ba:	9903      	ldr	r1, [sp, #12]
 80143bc:	600a      	str	r2, [r1, #0]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	ed83 0b00 	vstr	d0, [r3]
 80143c4:	68e3      	ldr	r3, [r4, #12]
 80143c6:	3301      	adds	r3, #1
 80143c8:	60e3      	str	r3, [r4, #12]
 80143ca:	e7db      	b.n	8014384 <_scanf_float+0x36c>
 80143cc:	9b04      	ldr	r3, [sp, #16]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d0e6      	beq.n	80143a0 <_scanf_float+0x388>
 80143d2:	9905      	ldr	r1, [sp, #20]
 80143d4:	230a      	movs	r3, #10
 80143d6:	3101      	adds	r1, #1
 80143d8:	4640      	mov	r0, r8
 80143da:	f002 fca7 	bl	8016d2c <_strtol_r>
 80143de:	9b04      	ldr	r3, [sp, #16]
 80143e0:	9e05      	ldr	r6, [sp, #20]
 80143e2:	1ac2      	subs	r2, r0, r3
 80143e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80143e8:	429e      	cmp	r6, r3
 80143ea:	bf28      	it	cs
 80143ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80143f0:	490d      	ldr	r1, [pc, #52]	@ (8014428 <_scanf_float+0x410>)
 80143f2:	4630      	mov	r0, r6
 80143f4:	f000 f94e 	bl	8014694 <siprintf>
 80143f8:	e7d2      	b.n	80143a0 <_scanf_float+0x388>
 80143fa:	f011 0f04 	tst.w	r1, #4
 80143fe:	9903      	ldr	r1, [sp, #12]
 8014400:	600a      	str	r2, [r1, #0]
 8014402:	d1dc      	bne.n	80143be <_scanf_float+0x3a6>
 8014404:	eeb4 0b40 	vcmp.f64	d0, d0
 8014408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440c:	681d      	ldr	r5, [r3, #0]
 801440e:	d705      	bvc.n	801441c <_scanf_float+0x404>
 8014410:	4806      	ldr	r0, [pc, #24]	@ (801442c <_scanf_float+0x414>)
 8014412:	f000 fac5 	bl	80149a0 <nanf>
 8014416:	ed85 0a00 	vstr	s0, [r5]
 801441a:	e7d3      	b.n	80143c4 <_scanf_float+0x3ac>
 801441c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014420:	e7f9      	b.n	8014416 <_scanf_float+0x3fe>
 8014422:	f04f 0900 	mov.w	r9, #0
 8014426:	e630      	b.n	801408a <_scanf_float+0x72>
 8014428:	0801828c 	.word	0x0801828c
 801442c:	08018625 	.word	0x08018625

08014430 <std>:
 8014430:	2300      	movs	r3, #0
 8014432:	b510      	push	{r4, lr}
 8014434:	4604      	mov	r4, r0
 8014436:	e9c0 3300 	strd	r3, r3, [r0]
 801443a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801443e:	6083      	str	r3, [r0, #8]
 8014440:	8181      	strh	r1, [r0, #12]
 8014442:	6643      	str	r3, [r0, #100]	@ 0x64
 8014444:	81c2      	strh	r2, [r0, #14]
 8014446:	6183      	str	r3, [r0, #24]
 8014448:	4619      	mov	r1, r3
 801444a:	2208      	movs	r2, #8
 801444c:	305c      	adds	r0, #92	@ 0x5c
 801444e:	f000 fa19 	bl	8014884 <memset>
 8014452:	4b0d      	ldr	r3, [pc, #52]	@ (8014488 <std+0x58>)
 8014454:	6263      	str	r3, [r4, #36]	@ 0x24
 8014456:	4b0d      	ldr	r3, [pc, #52]	@ (801448c <std+0x5c>)
 8014458:	62a3      	str	r3, [r4, #40]	@ 0x28
 801445a:	4b0d      	ldr	r3, [pc, #52]	@ (8014490 <std+0x60>)
 801445c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801445e:	4b0d      	ldr	r3, [pc, #52]	@ (8014494 <std+0x64>)
 8014460:	6323      	str	r3, [r4, #48]	@ 0x30
 8014462:	4b0d      	ldr	r3, [pc, #52]	@ (8014498 <std+0x68>)
 8014464:	6224      	str	r4, [r4, #32]
 8014466:	429c      	cmp	r4, r3
 8014468:	d006      	beq.n	8014478 <std+0x48>
 801446a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801446e:	4294      	cmp	r4, r2
 8014470:	d002      	beq.n	8014478 <std+0x48>
 8014472:	33d0      	adds	r3, #208	@ 0xd0
 8014474:	429c      	cmp	r4, r3
 8014476:	d105      	bne.n	8014484 <std+0x54>
 8014478:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801447c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014480:	f000 ba7c 	b.w	801497c <__retarget_lock_init_recursive>
 8014484:	bd10      	pop	{r4, pc}
 8014486:	bf00      	nop
 8014488:	080146d5 	.word	0x080146d5
 801448c:	080146f7 	.word	0x080146f7
 8014490:	0801472f 	.word	0x0801472f
 8014494:	08014753 	.word	0x08014753
 8014498:	240019e8 	.word	0x240019e8

0801449c <stdio_exit_handler>:
 801449c:	4a02      	ldr	r2, [pc, #8]	@ (80144a8 <stdio_exit_handler+0xc>)
 801449e:	4903      	ldr	r1, [pc, #12]	@ (80144ac <stdio_exit_handler+0x10>)
 80144a0:	4803      	ldr	r0, [pc, #12]	@ (80144b0 <stdio_exit_handler+0x14>)
 80144a2:	f000 b869 	b.w	8014578 <_fwalk_sglue>
 80144a6:	bf00      	nop
 80144a8:	24000188 	.word	0x24000188
 80144ac:	0801736d 	.word	0x0801736d
 80144b0:	24000198 	.word	0x24000198

080144b4 <cleanup_stdio>:
 80144b4:	6841      	ldr	r1, [r0, #4]
 80144b6:	4b0c      	ldr	r3, [pc, #48]	@ (80144e8 <cleanup_stdio+0x34>)
 80144b8:	4299      	cmp	r1, r3
 80144ba:	b510      	push	{r4, lr}
 80144bc:	4604      	mov	r4, r0
 80144be:	d001      	beq.n	80144c4 <cleanup_stdio+0x10>
 80144c0:	f002 ff54 	bl	801736c <_fflush_r>
 80144c4:	68a1      	ldr	r1, [r4, #8]
 80144c6:	4b09      	ldr	r3, [pc, #36]	@ (80144ec <cleanup_stdio+0x38>)
 80144c8:	4299      	cmp	r1, r3
 80144ca:	d002      	beq.n	80144d2 <cleanup_stdio+0x1e>
 80144cc:	4620      	mov	r0, r4
 80144ce:	f002 ff4d 	bl	801736c <_fflush_r>
 80144d2:	68e1      	ldr	r1, [r4, #12]
 80144d4:	4b06      	ldr	r3, [pc, #24]	@ (80144f0 <cleanup_stdio+0x3c>)
 80144d6:	4299      	cmp	r1, r3
 80144d8:	d004      	beq.n	80144e4 <cleanup_stdio+0x30>
 80144da:	4620      	mov	r0, r4
 80144dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144e0:	f002 bf44 	b.w	801736c <_fflush_r>
 80144e4:	bd10      	pop	{r4, pc}
 80144e6:	bf00      	nop
 80144e8:	240019e8 	.word	0x240019e8
 80144ec:	24001a50 	.word	0x24001a50
 80144f0:	24001ab8 	.word	0x24001ab8

080144f4 <global_stdio_init.part.0>:
 80144f4:	b510      	push	{r4, lr}
 80144f6:	4b0b      	ldr	r3, [pc, #44]	@ (8014524 <global_stdio_init.part.0+0x30>)
 80144f8:	4c0b      	ldr	r4, [pc, #44]	@ (8014528 <global_stdio_init.part.0+0x34>)
 80144fa:	4a0c      	ldr	r2, [pc, #48]	@ (801452c <global_stdio_init.part.0+0x38>)
 80144fc:	601a      	str	r2, [r3, #0]
 80144fe:	4620      	mov	r0, r4
 8014500:	2200      	movs	r2, #0
 8014502:	2104      	movs	r1, #4
 8014504:	f7ff ff94 	bl	8014430 <std>
 8014508:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801450c:	2201      	movs	r2, #1
 801450e:	2109      	movs	r1, #9
 8014510:	f7ff ff8e 	bl	8014430 <std>
 8014514:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014518:	2202      	movs	r2, #2
 801451a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801451e:	2112      	movs	r1, #18
 8014520:	f7ff bf86 	b.w	8014430 <std>
 8014524:	24001b20 	.word	0x24001b20
 8014528:	240019e8 	.word	0x240019e8
 801452c:	0801449d 	.word	0x0801449d

08014530 <__sfp_lock_acquire>:
 8014530:	4801      	ldr	r0, [pc, #4]	@ (8014538 <__sfp_lock_acquire+0x8>)
 8014532:	f000 ba24 	b.w	801497e <__retarget_lock_acquire_recursive>
 8014536:	bf00      	nop
 8014538:	24001b29 	.word	0x24001b29

0801453c <__sfp_lock_release>:
 801453c:	4801      	ldr	r0, [pc, #4]	@ (8014544 <__sfp_lock_release+0x8>)
 801453e:	f000 ba1f 	b.w	8014980 <__retarget_lock_release_recursive>
 8014542:	bf00      	nop
 8014544:	24001b29 	.word	0x24001b29

08014548 <__sinit>:
 8014548:	b510      	push	{r4, lr}
 801454a:	4604      	mov	r4, r0
 801454c:	f7ff fff0 	bl	8014530 <__sfp_lock_acquire>
 8014550:	6a23      	ldr	r3, [r4, #32]
 8014552:	b11b      	cbz	r3, 801455c <__sinit+0x14>
 8014554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014558:	f7ff bff0 	b.w	801453c <__sfp_lock_release>
 801455c:	4b04      	ldr	r3, [pc, #16]	@ (8014570 <__sinit+0x28>)
 801455e:	6223      	str	r3, [r4, #32]
 8014560:	4b04      	ldr	r3, [pc, #16]	@ (8014574 <__sinit+0x2c>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d1f5      	bne.n	8014554 <__sinit+0xc>
 8014568:	f7ff ffc4 	bl	80144f4 <global_stdio_init.part.0>
 801456c:	e7f2      	b.n	8014554 <__sinit+0xc>
 801456e:	bf00      	nop
 8014570:	080144b5 	.word	0x080144b5
 8014574:	24001b20 	.word	0x24001b20

08014578 <_fwalk_sglue>:
 8014578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801457c:	4607      	mov	r7, r0
 801457e:	4688      	mov	r8, r1
 8014580:	4614      	mov	r4, r2
 8014582:	2600      	movs	r6, #0
 8014584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014588:	f1b9 0901 	subs.w	r9, r9, #1
 801458c:	d505      	bpl.n	801459a <_fwalk_sglue+0x22>
 801458e:	6824      	ldr	r4, [r4, #0]
 8014590:	2c00      	cmp	r4, #0
 8014592:	d1f7      	bne.n	8014584 <_fwalk_sglue+0xc>
 8014594:	4630      	mov	r0, r6
 8014596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801459a:	89ab      	ldrh	r3, [r5, #12]
 801459c:	2b01      	cmp	r3, #1
 801459e:	d907      	bls.n	80145b0 <_fwalk_sglue+0x38>
 80145a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80145a4:	3301      	adds	r3, #1
 80145a6:	d003      	beq.n	80145b0 <_fwalk_sglue+0x38>
 80145a8:	4629      	mov	r1, r5
 80145aa:	4638      	mov	r0, r7
 80145ac:	47c0      	blx	r8
 80145ae:	4306      	orrs	r6, r0
 80145b0:	3568      	adds	r5, #104	@ 0x68
 80145b2:	e7e9      	b.n	8014588 <_fwalk_sglue+0x10>

080145b4 <iprintf>:
 80145b4:	b40f      	push	{r0, r1, r2, r3}
 80145b6:	b507      	push	{r0, r1, r2, lr}
 80145b8:	4906      	ldr	r1, [pc, #24]	@ (80145d4 <iprintf+0x20>)
 80145ba:	ab04      	add	r3, sp, #16
 80145bc:	6808      	ldr	r0, [r1, #0]
 80145be:	f853 2b04 	ldr.w	r2, [r3], #4
 80145c2:	6881      	ldr	r1, [r0, #8]
 80145c4:	9301      	str	r3, [sp, #4]
 80145c6:	f002 fd35 	bl	8017034 <_vfiprintf_r>
 80145ca:	b003      	add	sp, #12
 80145cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80145d0:	b004      	add	sp, #16
 80145d2:	4770      	bx	lr
 80145d4:	24000194 	.word	0x24000194

080145d8 <_puts_r>:
 80145d8:	6a03      	ldr	r3, [r0, #32]
 80145da:	b570      	push	{r4, r5, r6, lr}
 80145dc:	6884      	ldr	r4, [r0, #8]
 80145de:	4605      	mov	r5, r0
 80145e0:	460e      	mov	r6, r1
 80145e2:	b90b      	cbnz	r3, 80145e8 <_puts_r+0x10>
 80145e4:	f7ff ffb0 	bl	8014548 <__sinit>
 80145e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80145ea:	07db      	lsls	r3, r3, #31
 80145ec:	d405      	bmi.n	80145fa <_puts_r+0x22>
 80145ee:	89a3      	ldrh	r3, [r4, #12]
 80145f0:	0598      	lsls	r0, r3, #22
 80145f2:	d402      	bmi.n	80145fa <_puts_r+0x22>
 80145f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145f6:	f000 f9c2 	bl	801497e <__retarget_lock_acquire_recursive>
 80145fa:	89a3      	ldrh	r3, [r4, #12]
 80145fc:	0719      	lsls	r1, r3, #28
 80145fe:	d502      	bpl.n	8014606 <_puts_r+0x2e>
 8014600:	6923      	ldr	r3, [r4, #16]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d135      	bne.n	8014672 <_puts_r+0x9a>
 8014606:	4621      	mov	r1, r4
 8014608:	4628      	mov	r0, r5
 801460a:	f000 f8e5 	bl	80147d8 <__swsetup_r>
 801460e:	b380      	cbz	r0, 8014672 <_puts_r+0x9a>
 8014610:	f04f 35ff 	mov.w	r5, #4294967295
 8014614:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014616:	07da      	lsls	r2, r3, #31
 8014618:	d405      	bmi.n	8014626 <_puts_r+0x4e>
 801461a:	89a3      	ldrh	r3, [r4, #12]
 801461c:	059b      	lsls	r3, r3, #22
 801461e:	d402      	bmi.n	8014626 <_puts_r+0x4e>
 8014620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014622:	f000 f9ad 	bl	8014980 <__retarget_lock_release_recursive>
 8014626:	4628      	mov	r0, r5
 8014628:	bd70      	pop	{r4, r5, r6, pc}
 801462a:	2b00      	cmp	r3, #0
 801462c:	da04      	bge.n	8014638 <_puts_r+0x60>
 801462e:	69a2      	ldr	r2, [r4, #24]
 8014630:	429a      	cmp	r2, r3
 8014632:	dc17      	bgt.n	8014664 <_puts_r+0x8c>
 8014634:	290a      	cmp	r1, #10
 8014636:	d015      	beq.n	8014664 <_puts_r+0x8c>
 8014638:	6823      	ldr	r3, [r4, #0]
 801463a:	1c5a      	adds	r2, r3, #1
 801463c:	6022      	str	r2, [r4, #0]
 801463e:	7019      	strb	r1, [r3, #0]
 8014640:	68a3      	ldr	r3, [r4, #8]
 8014642:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014646:	3b01      	subs	r3, #1
 8014648:	60a3      	str	r3, [r4, #8]
 801464a:	2900      	cmp	r1, #0
 801464c:	d1ed      	bne.n	801462a <_puts_r+0x52>
 801464e:	2b00      	cmp	r3, #0
 8014650:	da11      	bge.n	8014676 <_puts_r+0x9e>
 8014652:	4622      	mov	r2, r4
 8014654:	210a      	movs	r1, #10
 8014656:	4628      	mov	r0, r5
 8014658:	f000 f87f 	bl	801475a <__swbuf_r>
 801465c:	3001      	adds	r0, #1
 801465e:	d0d7      	beq.n	8014610 <_puts_r+0x38>
 8014660:	250a      	movs	r5, #10
 8014662:	e7d7      	b.n	8014614 <_puts_r+0x3c>
 8014664:	4622      	mov	r2, r4
 8014666:	4628      	mov	r0, r5
 8014668:	f000 f877 	bl	801475a <__swbuf_r>
 801466c:	3001      	adds	r0, #1
 801466e:	d1e7      	bne.n	8014640 <_puts_r+0x68>
 8014670:	e7ce      	b.n	8014610 <_puts_r+0x38>
 8014672:	3e01      	subs	r6, #1
 8014674:	e7e4      	b.n	8014640 <_puts_r+0x68>
 8014676:	6823      	ldr	r3, [r4, #0]
 8014678:	1c5a      	adds	r2, r3, #1
 801467a:	6022      	str	r2, [r4, #0]
 801467c:	220a      	movs	r2, #10
 801467e:	701a      	strb	r2, [r3, #0]
 8014680:	e7ee      	b.n	8014660 <_puts_r+0x88>
	...

08014684 <puts>:
 8014684:	4b02      	ldr	r3, [pc, #8]	@ (8014690 <puts+0xc>)
 8014686:	4601      	mov	r1, r0
 8014688:	6818      	ldr	r0, [r3, #0]
 801468a:	f7ff bfa5 	b.w	80145d8 <_puts_r>
 801468e:	bf00      	nop
 8014690:	24000194 	.word	0x24000194

08014694 <siprintf>:
 8014694:	b40e      	push	{r1, r2, r3}
 8014696:	b500      	push	{lr}
 8014698:	b09c      	sub	sp, #112	@ 0x70
 801469a:	ab1d      	add	r3, sp, #116	@ 0x74
 801469c:	9002      	str	r0, [sp, #8]
 801469e:	9006      	str	r0, [sp, #24]
 80146a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80146a4:	4809      	ldr	r0, [pc, #36]	@ (80146cc <siprintf+0x38>)
 80146a6:	9107      	str	r1, [sp, #28]
 80146a8:	9104      	str	r1, [sp, #16]
 80146aa:	4909      	ldr	r1, [pc, #36]	@ (80146d0 <siprintf+0x3c>)
 80146ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80146b0:	9105      	str	r1, [sp, #20]
 80146b2:	6800      	ldr	r0, [r0, #0]
 80146b4:	9301      	str	r3, [sp, #4]
 80146b6:	a902      	add	r1, sp, #8
 80146b8:	f002 fb96 	bl	8016de8 <_svfiprintf_r>
 80146bc:	9b02      	ldr	r3, [sp, #8]
 80146be:	2200      	movs	r2, #0
 80146c0:	701a      	strb	r2, [r3, #0]
 80146c2:	b01c      	add	sp, #112	@ 0x70
 80146c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80146c8:	b003      	add	sp, #12
 80146ca:	4770      	bx	lr
 80146cc:	24000194 	.word	0x24000194
 80146d0:	ffff0208 	.word	0xffff0208

080146d4 <__sread>:
 80146d4:	b510      	push	{r4, lr}
 80146d6:	460c      	mov	r4, r1
 80146d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146dc:	f000 f900 	bl	80148e0 <_read_r>
 80146e0:	2800      	cmp	r0, #0
 80146e2:	bfab      	itete	ge
 80146e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80146e6:	89a3      	ldrhlt	r3, [r4, #12]
 80146e8:	181b      	addge	r3, r3, r0
 80146ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80146ee:	bfac      	ite	ge
 80146f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80146f2:	81a3      	strhlt	r3, [r4, #12]
 80146f4:	bd10      	pop	{r4, pc}

080146f6 <__swrite>:
 80146f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146fa:	461f      	mov	r7, r3
 80146fc:	898b      	ldrh	r3, [r1, #12]
 80146fe:	05db      	lsls	r3, r3, #23
 8014700:	4605      	mov	r5, r0
 8014702:	460c      	mov	r4, r1
 8014704:	4616      	mov	r6, r2
 8014706:	d505      	bpl.n	8014714 <__swrite+0x1e>
 8014708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801470c:	2302      	movs	r3, #2
 801470e:	2200      	movs	r2, #0
 8014710:	f000 f8d4 	bl	80148bc <_lseek_r>
 8014714:	89a3      	ldrh	r3, [r4, #12]
 8014716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801471a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801471e:	81a3      	strh	r3, [r4, #12]
 8014720:	4632      	mov	r2, r6
 8014722:	463b      	mov	r3, r7
 8014724:	4628      	mov	r0, r5
 8014726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801472a:	f000 b8eb 	b.w	8014904 <_write_r>

0801472e <__sseek>:
 801472e:	b510      	push	{r4, lr}
 8014730:	460c      	mov	r4, r1
 8014732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014736:	f000 f8c1 	bl	80148bc <_lseek_r>
 801473a:	1c43      	adds	r3, r0, #1
 801473c:	89a3      	ldrh	r3, [r4, #12]
 801473e:	bf15      	itete	ne
 8014740:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014742:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014746:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801474a:	81a3      	strheq	r3, [r4, #12]
 801474c:	bf18      	it	ne
 801474e:	81a3      	strhne	r3, [r4, #12]
 8014750:	bd10      	pop	{r4, pc}

08014752 <__sclose>:
 8014752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014756:	f000 b8a1 	b.w	801489c <_close_r>

0801475a <__swbuf_r>:
 801475a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801475c:	460e      	mov	r6, r1
 801475e:	4614      	mov	r4, r2
 8014760:	4605      	mov	r5, r0
 8014762:	b118      	cbz	r0, 801476c <__swbuf_r+0x12>
 8014764:	6a03      	ldr	r3, [r0, #32]
 8014766:	b90b      	cbnz	r3, 801476c <__swbuf_r+0x12>
 8014768:	f7ff feee 	bl	8014548 <__sinit>
 801476c:	69a3      	ldr	r3, [r4, #24]
 801476e:	60a3      	str	r3, [r4, #8]
 8014770:	89a3      	ldrh	r3, [r4, #12]
 8014772:	071a      	lsls	r2, r3, #28
 8014774:	d501      	bpl.n	801477a <__swbuf_r+0x20>
 8014776:	6923      	ldr	r3, [r4, #16]
 8014778:	b943      	cbnz	r3, 801478c <__swbuf_r+0x32>
 801477a:	4621      	mov	r1, r4
 801477c:	4628      	mov	r0, r5
 801477e:	f000 f82b 	bl	80147d8 <__swsetup_r>
 8014782:	b118      	cbz	r0, 801478c <__swbuf_r+0x32>
 8014784:	f04f 37ff 	mov.w	r7, #4294967295
 8014788:	4638      	mov	r0, r7
 801478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801478c:	6823      	ldr	r3, [r4, #0]
 801478e:	6922      	ldr	r2, [r4, #16]
 8014790:	1a98      	subs	r0, r3, r2
 8014792:	6963      	ldr	r3, [r4, #20]
 8014794:	b2f6      	uxtb	r6, r6
 8014796:	4283      	cmp	r3, r0
 8014798:	4637      	mov	r7, r6
 801479a:	dc05      	bgt.n	80147a8 <__swbuf_r+0x4e>
 801479c:	4621      	mov	r1, r4
 801479e:	4628      	mov	r0, r5
 80147a0:	f002 fde4 	bl	801736c <_fflush_r>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	d1ed      	bne.n	8014784 <__swbuf_r+0x2a>
 80147a8:	68a3      	ldr	r3, [r4, #8]
 80147aa:	3b01      	subs	r3, #1
 80147ac:	60a3      	str	r3, [r4, #8]
 80147ae:	6823      	ldr	r3, [r4, #0]
 80147b0:	1c5a      	adds	r2, r3, #1
 80147b2:	6022      	str	r2, [r4, #0]
 80147b4:	701e      	strb	r6, [r3, #0]
 80147b6:	6962      	ldr	r2, [r4, #20]
 80147b8:	1c43      	adds	r3, r0, #1
 80147ba:	429a      	cmp	r2, r3
 80147bc:	d004      	beq.n	80147c8 <__swbuf_r+0x6e>
 80147be:	89a3      	ldrh	r3, [r4, #12]
 80147c0:	07db      	lsls	r3, r3, #31
 80147c2:	d5e1      	bpl.n	8014788 <__swbuf_r+0x2e>
 80147c4:	2e0a      	cmp	r6, #10
 80147c6:	d1df      	bne.n	8014788 <__swbuf_r+0x2e>
 80147c8:	4621      	mov	r1, r4
 80147ca:	4628      	mov	r0, r5
 80147cc:	f002 fdce 	bl	801736c <_fflush_r>
 80147d0:	2800      	cmp	r0, #0
 80147d2:	d0d9      	beq.n	8014788 <__swbuf_r+0x2e>
 80147d4:	e7d6      	b.n	8014784 <__swbuf_r+0x2a>
	...

080147d8 <__swsetup_r>:
 80147d8:	b538      	push	{r3, r4, r5, lr}
 80147da:	4b29      	ldr	r3, [pc, #164]	@ (8014880 <__swsetup_r+0xa8>)
 80147dc:	4605      	mov	r5, r0
 80147de:	6818      	ldr	r0, [r3, #0]
 80147e0:	460c      	mov	r4, r1
 80147e2:	b118      	cbz	r0, 80147ec <__swsetup_r+0x14>
 80147e4:	6a03      	ldr	r3, [r0, #32]
 80147e6:	b90b      	cbnz	r3, 80147ec <__swsetup_r+0x14>
 80147e8:	f7ff feae 	bl	8014548 <__sinit>
 80147ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147f0:	0719      	lsls	r1, r3, #28
 80147f2:	d422      	bmi.n	801483a <__swsetup_r+0x62>
 80147f4:	06da      	lsls	r2, r3, #27
 80147f6:	d407      	bmi.n	8014808 <__swsetup_r+0x30>
 80147f8:	2209      	movs	r2, #9
 80147fa:	602a      	str	r2, [r5, #0]
 80147fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014800:	81a3      	strh	r3, [r4, #12]
 8014802:	f04f 30ff 	mov.w	r0, #4294967295
 8014806:	e033      	b.n	8014870 <__swsetup_r+0x98>
 8014808:	0758      	lsls	r0, r3, #29
 801480a:	d512      	bpl.n	8014832 <__swsetup_r+0x5a>
 801480c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801480e:	b141      	cbz	r1, 8014822 <__swsetup_r+0x4a>
 8014810:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014814:	4299      	cmp	r1, r3
 8014816:	d002      	beq.n	801481e <__swsetup_r+0x46>
 8014818:	4628      	mov	r0, r5
 801481a:	f000 fea7 	bl	801556c <_free_r>
 801481e:	2300      	movs	r3, #0
 8014820:	6363      	str	r3, [r4, #52]	@ 0x34
 8014822:	89a3      	ldrh	r3, [r4, #12]
 8014824:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014828:	81a3      	strh	r3, [r4, #12]
 801482a:	2300      	movs	r3, #0
 801482c:	6063      	str	r3, [r4, #4]
 801482e:	6923      	ldr	r3, [r4, #16]
 8014830:	6023      	str	r3, [r4, #0]
 8014832:	89a3      	ldrh	r3, [r4, #12]
 8014834:	f043 0308 	orr.w	r3, r3, #8
 8014838:	81a3      	strh	r3, [r4, #12]
 801483a:	6923      	ldr	r3, [r4, #16]
 801483c:	b94b      	cbnz	r3, 8014852 <__swsetup_r+0x7a>
 801483e:	89a3      	ldrh	r3, [r4, #12]
 8014840:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014848:	d003      	beq.n	8014852 <__swsetup_r+0x7a>
 801484a:	4621      	mov	r1, r4
 801484c:	4628      	mov	r0, r5
 801484e:	f002 fddb 	bl	8017408 <__smakebuf_r>
 8014852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014856:	f013 0201 	ands.w	r2, r3, #1
 801485a:	d00a      	beq.n	8014872 <__swsetup_r+0x9a>
 801485c:	2200      	movs	r2, #0
 801485e:	60a2      	str	r2, [r4, #8]
 8014860:	6962      	ldr	r2, [r4, #20]
 8014862:	4252      	negs	r2, r2
 8014864:	61a2      	str	r2, [r4, #24]
 8014866:	6922      	ldr	r2, [r4, #16]
 8014868:	b942      	cbnz	r2, 801487c <__swsetup_r+0xa4>
 801486a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801486e:	d1c5      	bne.n	80147fc <__swsetup_r+0x24>
 8014870:	bd38      	pop	{r3, r4, r5, pc}
 8014872:	0799      	lsls	r1, r3, #30
 8014874:	bf58      	it	pl
 8014876:	6962      	ldrpl	r2, [r4, #20]
 8014878:	60a2      	str	r2, [r4, #8]
 801487a:	e7f4      	b.n	8014866 <__swsetup_r+0x8e>
 801487c:	2000      	movs	r0, #0
 801487e:	e7f7      	b.n	8014870 <__swsetup_r+0x98>
 8014880:	24000194 	.word	0x24000194

08014884 <memset>:
 8014884:	4402      	add	r2, r0
 8014886:	4603      	mov	r3, r0
 8014888:	4293      	cmp	r3, r2
 801488a:	d100      	bne.n	801488e <memset+0xa>
 801488c:	4770      	bx	lr
 801488e:	f803 1b01 	strb.w	r1, [r3], #1
 8014892:	e7f9      	b.n	8014888 <memset+0x4>

08014894 <_localeconv_r>:
 8014894:	4800      	ldr	r0, [pc, #0]	@ (8014898 <_localeconv_r+0x4>)
 8014896:	4770      	bx	lr
 8014898:	240002d4 	.word	0x240002d4

0801489c <_close_r>:
 801489c:	b538      	push	{r3, r4, r5, lr}
 801489e:	4d06      	ldr	r5, [pc, #24]	@ (80148b8 <_close_r+0x1c>)
 80148a0:	2300      	movs	r3, #0
 80148a2:	4604      	mov	r4, r0
 80148a4:	4608      	mov	r0, r1
 80148a6:	602b      	str	r3, [r5, #0]
 80148a8:	f7f4 f975 	bl	8008b96 <_close>
 80148ac:	1c43      	adds	r3, r0, #1
 80148ae:	d102      	bne.n	80148b6 <_close_r+0x1a>
 80148b0:	682b      	ldr	r3, [r5, #0]
 80148b2:	b103      	cbz	r3, 80148b6 <_close_r+0x1a>
 80148b4:	6023      	str	r3, [r4, #0]
 80148b6:	bd38      	pop	{r3, r4, r5, pc}
 80148b8:	24001b24 	.word	0x24001b24

080148bc <_lseek_r>:
 80148bc:	b538      	push	{r3, r4, r5, lr}
 80148be:	4d07      	ldr	r5, [pc, #28]	@ (80148dc <_lseek_r+0x20>)
 80148c0:	4604      	mov	r4, r0
 80148c2:	4608      	mov	r0, r1
 80148c4:	4611      	mov	r1, r2
 80148c6:	2200      	movs	r2, #0
 80148c8:	602a      	str	r2, [r5, #0]
 80148ca:	461a      	mov	r2, r3
 80148cc:	f7f4 f98a 	bl	8008be4 <_lseek>
 80148d0:	1c43      	adds	r3, r0, #1
 80148d2:	d102      	bne.n	80148da <_lseek_r+0x1e>
 80148d4:	682b      	ldr	r3, [r5, #0]
 80148d6:	b103      	cbz	r3, 80148da <_lseek_r+0x1e>
 80148d8:	6023      	str	r3, [r4, #0]
 80148da:	bd38      	pop	{r3, r4, r5, pc}
 80148dc:	24001b24 	.word	0x24001b24

080148e0 <_read_r>:
 80148e0:	b538      	push	{r3, r4, r5, lr}
 80148e2:	4d07      	ldr	r5, [pc, #28]	@ (8014900 <_read_r+0x20>)
 80148e4:	4604      	mov	r4, r0
 80148e6:	4608      	mov	r0, r1
 80148e8:	4611      	mov	r1, r2
 80148ea:	2200      	movs	r2, #0
 80148ec:	602a      	str	r2, [r5, #0]
 80148ee:	461a      	mov	r2, r3
 80148f0:	f7f4 f934 	bl	8008b5c <_read>
 80148f4:	1c43      	adds	r3, r0, #1
 80148f6:	d102      	bne.n	80148fe <_read_r+0x1e>
 80148f8:	682b      	ldr	r3, [r5, #0]
 80148fa:	b103      	cbz	r3, 80148fe <_read_r+0x1e>
 80148fc:	6023      	str	r3, [r4, #0]
 80148fe:	bd38      	pop	{r3, r4, r5, pc}
 8014900:	24001b24 	.word	0x24001b24

08014904 <_write_r>:
 8014904:	b538      	push	{r3, r4, r5, lr}
 8014906:	4d07      	ldr	r5, [pc, #28]	@ (8014924 <_write_r+0x20>)
 8014908:	4604      	mov	r4, r0
 801490a:	4608      	mov	r0, r1
 801490c:	4611      	mov	r1, r2
 801490e:	2200      	movs	r2, #0
 8014910:	602a      	str	r2, [r5, #0]
 8014912:	461a      	mov	r2, r3
 8014914:	f7f3 f84f 	bl	80079b6 <_write>
 8014918:	1c43      	adds	r3, r0, #1
 801491a:	d102      	bne.n	8014922 <_write_r+0x1e>
 801491c:	682b      	ldr	r3, [r5, #0]
 801491e:	b103      	cbz	r3, 8014922 <_write_r+0x1e>
 8014920:	6023      	str	r3, [r4, #0]
 8014922:	bd38      	pop	{r3, r4, r5, pc}
 8014924:	24001b24 	.word	0x24001b24

08014928 <__errno>:
 8014928:	4b01      	ldr	r3, [pc, #4]	@ (8014930 <__errno+0x8>)
 801492a:	6818      	ldr	r0, [r3, #0]
 801492c:	4770      	bx	lr
 801492e:	bf00      	nop
 8014930:	24000194 	.word	0x24000194

08014934 <__libc_init_array>:
 8014934:	b570      	push	{r4, r5, r6, lr}
 8014936:	4d0d      	ldr	r5, [pc, #52]	@ (801496c <__libc_init_array+0x38>)
 8014938:	4c0d      	ldr	r4, [pc, #52]	@ (8014970 <__libc_init_array+0x3c>)
 801493a:	1b64      	subs	r4, r4, r5
 801493c:	10a4      	asrs	r4, r4, #2
 801493e:	2600      	movs	r6, #0
 8014940:	42a6      	cmp	r6, r4
 8014942:	d109      	bne.n	8014958 <__libc_init_array+0x24>
 8014944:	4d0b      	ldr	r5, [pc, #44]	@ (8014974 <__libc_init_array+0x40>)
 8014946:	4c0c      	ldr	r4, [pc, #48]	@ (8014978 <__libc_init_array+0x44>)
 8014948:	f003 fa20 	bl	8017d8c <_init>
 801494c:	1b64      	subs	r4, r4, r5
 801494e:	10a4      	asrs	r4, r4, #2
 8014950:	2600      	movs	r6, #0
 8014952:	42a6      	cmp	r6, r4
 8014954:	d105      	bne.n	8014962 <__libc_init_array+0x2e>
 8014956:	bd70      	pop	{r4, r5, r6, pc}
 8014958:	f855 3b04 	ldr.w	r3, [r5], #4
 801495c:	4798      	blx	r3
 801495e:	3601      	adds	r6, #1
 8014960:	e7ee      	b.n	8014940 <__libc_init_array+0xc>
 8014962:	f855 3b04 	ldr.w	r3, [r5], #4
 8014966:	4798      	blx	r3
 8014968:	3601      	adds	r6, #1
 801496a:	e7f2      	b.n	8014952 <__libc_init_array+0x1e>
 801496c:	08018690 	.word	0x08018690
 8014970:	08018690 	.word	0x08018690
 8014974:	08018690 	.word	0x08018690
 8014978:	08018694 	.word	0x08018694

0801497c <__retarget_lock_init_recursive>:
 801497c:	4770      	bx	lr

0801497e <__retarget_lock_acquire_recursive>:
 801497e:	4770      	bx	lr

08014980 <__retarget_lock_release_recursive>:
 8014980:	4770      	bx	lr

08014982 <memcpy>:
 8014982:	440a      	add	r2, r1
 8014984:	4291      	cmp	r1, r2
 8014986:	f100 33ff 	add.w	r3, r0, #4294967295
 801498a:	d100      	bne.n	801498e <memcpy+0xc>
 801498c:	4770      	bx	lr
 801498e:	b510      	push	{r4, lr}
 8014990:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014998:	4291      	cmp	r1, r2
 801499a:	d1f9      	bne.n	8014990 <memcpy+0xe>
 801499c:	bd10      	pop	{r4, pc}
	...

080149a0 <nanf>:
 80149a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80149a8 <nanf+0x8>
 80149a4:	4770      	bx	lr
 80149a6:	bf00      	nop
 80149a8:	7fc00000 	.word	0x7fc00000

080149ac <quorem>:
 80149ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149b0:	6903      	ldr	r3, [r0, #16]
 80149b2:	690c      	ldr	r4, [r1, #16]
 80149b4:	42a3      	cmp	r3, r4
 80149b6:	4607      	mov	r7, r0
 80149b8:	db7e      	blt.n	8014ab8 <quorem+0x10c>
 80149ba:	3c01      	subs	r4, #1
 80149bc:	f101 0814 	add.w	r8, r1, #20
 80149c0:	00a3      	lsls	r3, r4, #2
 80149c2:	f100 0514 	add.w	r5, r0, #20
 80149c6:	9300      	str	r3, [sp, #0]
 80149c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80149cc:	9301      	str	r3, [sp, #4]
 80149ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80149d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80149d6:	3301      	adds	r3, #1
 80149d8:	429a      	cmp	r2, r3
 80149da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80149de:	fbb2 f6f3 	udiv	r6, r2, r3
 80149e2:	d32e      	bcc.n	8014a42 <quorem+0x96>
 80149e4:	f04f 0a00 	mov.w	sl, #0
 80149e8:	46c4      	mov	ip, r8
 80149ea:	46ae      	mov	lr, r5
 80149ec:	46d3      	mov	fp, sl
 80149ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80149f2:	b298      	uxth	r0, r3
 80149f4:	fb06 a000 	mla	r0, r6, r0, sl
 80149f8:	0c02      	lsrs	r2, r0, #16
 80149fa:	0c1b      	lsrs	r3, r3, #16
 80149fc:	fb06 2303 	mla	r3, r6, r3, r2
 8014a00:	f8de 2000 	ldr.w	r2, [lr]
 8014a04:	b280      	uxth	r0, r0
 8014a06:	b292      	uxth	r2, r2
 8014a08:	1a12      	subs	r2, r2, r0
 8014a0a:	445a      	add	r2, fp
 8014a0c:	f8de 0000 	ldr.w	r0, [lr]
 8014a10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014a1a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014a1e:	b292      	uxth	r2, r2
 8014a20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014a24:	45e1      	cmp	r9, ip
 8014a26:	f84e 2b04 	str.w	r2, [lr], #4
 8014a2a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014a2e:	d2de      	bcs.n	80149ee <quorem+0x42>
 8014a30:	9b00      	ldr	r3, [sp, #0]
 8014a32:	58eb      	ldr	r3, [r5, r3]
 8014a34:	b92b      	cbnz	r3, 8014a42 <quorem+0x96>
 8014a36:	9b01      	ldr	r3, [sp, #4]
 8014a38:	3b04      	subs	r3, #4
 8014a3a:	429d      	cmp	r5, r3
 8014a3c:	461a      	mov	r2, r3
 8014a3e:	d32f      	bcc.n	8014aa0 <quorem+0xf4>
 8014a40:	613c      	str	r4, [r7, #16]
 8014a42:	4638      	mov	r0, r7
 8014a44:	f001 f956 	bl	8015cf4 <__mcmp>
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	db25      	blt.n	8014a98 <quorem+0xec>
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	2000      	movs	r0, #0
 8014a50:	f858 2b04 	ldr.w	r2, [r8], #4
 8014a54:	f8d1 c000 	ldr.w	ip, [r1]
 8014a58:	fa1f fe82 	uxth.w	lr, r2
 8014a5c:	fa1f f38c 	uxth.w	r3, ip
 8014a60:	eba3 030e 	sub.w	r3, r3, lr
 8014a64:	4403      	add	r3, r0
 8014a66:	0c12      	lsrs	r2, r2, #16
 8014a68:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014a6c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014a70:	b29b      	uxth	r3, r3
 8014a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a76:	45c1      	cmp	r9, r8
 8014a78:	f841 3b04 	str.w	r3, [r1], #4
 8014a7c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014a80:	d2e6      	bcs.n	8014a50 <quorem+0xa4>
 8014a82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014a86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014a8a:	b922      	cbnz	r2, 8014a96 <quorem+0xea>
 8014a8c:	3b04      	subs	r3, #4
 8014a8e:	429d      	cmp	r5, r3
 8014a90:	461a      	mov	r2, r3
 8014a92:	d30b      	bcc.n	8014aac <quorem+0x100>
 8014a94:	613c      	str	r4, [r7, #16]
 8014a96:	3601      	adds	r6, #1
 8014a98:	4630      	mov	r0, r6
 8014a9a:	b003      	add	sp, #12
 8014a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa0:	6812      	ldr	r2, [r2, #0]
 8014aa2:	3b04      	subs	r3, #4
 8014aa4:	2a00      	cmp	r2, #0
 8014aa6:	d1cb      	bne.n	8014a40 <quorem+0x94>
 8014aa8:	3c01      	subs	r4, #1
 8014aaa:	e7c6      	b.n	8014a3a <quorem+0x8e>
 8014aac:	6812      	ldr	r2, [r2, #0]
 8014aae:	3b04      	subs	r3, #4
 8014ab0:	2a00      	cmp	r2, #0
 8014ab2:	d1ef      	bne.n	8014a94 <quorem+0xe8>
 8014ab4:	3c01      	subs	r4, #1
 8014ab6:	e7ea      	b.n	8014a8e <quorem+0xe2>
 8014ab8:	2000      	movs	r0, #0
 8014aba:	e7ee      	b.n	8014a9a <quorem+0xee>
 8014abc:	0000      	movs	r0, r0
	...

08014ac0 <_dtoa_r>:
 8014ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac4:	ed2d 8b02 	vpush	{d8}
 8014ac8:	69c7      	ldr	r7, [r0, #28]
 8014aca:	b091      	sub	sp, #68	@ 0x44
 8014acc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014ad0:	ec55 4b10 	vmov	r4, r5, d0
 8014ad4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014ad6:	9107      	str	r1, [sp, #28]
 8014ad8:	4681      	mov	r9, r0
 8014ada:	9209      	str	r2, [sp, #36]	@ 0x24
 8014adc:	930d      	str	r3, [sp, #52]	@ 0x34
 8014ade:	b97f      	cbnz	r7, 8014b00 <_dtoa_r+0x40>
 8014ae0:	2010      	movs	r0, #16
 8014ae2:	f000 fd8d 	bl	8015600 <malloc>
 8014ae6:	4602      	mov	r2, r0
 8014ae8:	f8c9 001c 	str.w	r0, [r9, #28]
 8014aec:	b920      	cbnz	r0, 8014af8 <_dtoa_r+0x38>
 8014aee:	4ba0      	ldr	r3, [pc, #640]	@ (8014d70 <_dtoa_r+0x2b0>)
 8014af0:	21ef      	movs	r1, #239	@ 0xef
 8014af2:	48a0      	ldr	r0, [pc, #640]	@ (8014d74 <_dtoa_r+0x2b4>)
 8014af4:	f002 fd2c 	bl	8017550 <__assert_func>
 8014af8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014afc:	6007      	str	r7, [r0, #0]
 8014afe:	60c7      	str	r7, [r0, #12]
 8014b00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014b04:	6819      	ldr	r1, [r3, #0]
 8014b06:	b159      	cbz	r1, 8014b20 <_dtoa_r+0x60>
 8014b08:	685a      	ldr	r2, [r3, #4]
 8014b0a:	604a      	str	r2, [r1, #4]
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	4093      	lsls	r3, r2
 8014b10:	608b      	str	r3, [r1, #8]
 8014b12:	4648      	mov	r0, r9
 8014b14:	f000 fe6a 	bl	80157ec <_Bfree>
 8014b18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	601a      	str	r2, [r3, #0]
 8014b20:	1e2b      	subs	r3, r5, #0
 8014b22:	bfbb      	ittet	lt
 8014b24:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014b28:	9303      	strlt	r3, [sp, #12]
 8014b2a:	2300      	movge	r3, #0
 8014b2c:	2201      	movlt	r2, #1
 8014b2e:	bfac      	ite	ge
 8014b30:	6033      	strge	r3, [r6, #0]
 8014b32:	6032      	strlt	r2, [r6, #0]
 8014b34:	4b90      	ldr	r3, [pc, #576]	@ (8014d78 <_dtoa_r+0x2b8>)
 8014b36:	9e03      	ldr	r6, [sp, #12]
 8014b38:	43b3      	bics	r3, r6
 8014b3a:	d110      	bne.n	8014b5e <_dtoa_r+0x9e>
 8014b3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014b3e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014b42:	6013      	str	r3, [r2, #0]
 8014b44:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014b48:	4323      	orrs	r3, r4
 8014b4a:	f000 84de 	beq.w	801550a <_dtoa_r+0xa4a>
 8014b4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014b50:	4f8a      	ldr	r7, [pc, #552]	@ (8014d7c <_dtoa_r+0x2bc>)
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	f000 84e0 	beq.w	8015518 <_dtoa_r+0xa58>
 8014b58:	1cfb      	adds	r3, r7, #3
 8014b5a:	f000 bcdb 	b.w	8015514 <_dtoa_r+0xa54>
 8014b5e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014b62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b6a:	d10a      	bne.n	8014b82 <_dtoa_r+0xc2>
 8014b6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014b6e:	2301      	movs	r3, #1
 8014b70:	6013      	str	r3, [r2, #0]
 8014b72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014b74:	b113      	cbz	r3, 8014b7c <_dtoa_r+0xbc>
 8014b76:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014b78:	4b81      	ldr	r3, [pc, #516]	@ (8014d80 <_dtoa_r+0x2c0>)
 8014b7a:	6013      	str	r3, [r2, #0]
 8014b7c:	4f81      	ldr	r7, [pc, #516]	@ (8014d84 <_dtoa_r+0x2c4>)
 8014b7e:	f000 bccb 	b.w	8015518 <_dtoa_r+0xa58>
 8014b82:	aa0e      	add	r2, sp, #56	@ 0x38
 8014b84:	a90f      	add	r1, sp, #60	@ 0x3c
 8014b86:	4648      	mov	r0, r9
 8014b88:	eeb0 0b48 	vmov.f64	d0, d8
 8014b8c:	f001 f9d2 	bl	8015f34 <__d2b>
 8014b90:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8014b94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b96:	9001      	str	r0, [sp, #4]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d045      	beq.n	8014c28 <_dtoa_r+0x168>
 8014b9c:	eeb0 7b48 	vmov.f64	d7, d8
 8014ba0:	ee18 1a90 	vmov	r1, s17
 8014ba4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014ba8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014bac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014bb0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014bb4:	2500      	movs	r5, #0
 8014bb6:	ee07 1a90 	vmov	s15, r1
 8014bba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014bbe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014d58 <_dtoa_r+0x298>
 8014bc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014bc6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8014d60 <_dtoa_r+0x2a0>
 8014bca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014bce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014d68 <_dtoa_r+0x2a8>
 8014bd2:	ee07 3a90 	vmov	s15, r3
 8014bd6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014bda:	eeb0 7b46 	vmov.f64	d7, d6
 8014bde:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014be2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014be6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bee:	ee16 8a90 	vmov	r8, s13
 8014bf2:	d508      	bpl.n	8014c06 <_dtoa_r+0x146>
 8014bf4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014bf8:	eeb4 6b47 	vcmp.f64	d6, d7
 8014bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c00:	bf18      	it	ne
 8014c02:	f108 38ff 	addne.w	r8, r8, #4294967295
 8014c06:	f1b8 0f16 	cmp.w	r8, #22
 8014c0a:	d82b      	bhi.n	8014c64 <_dtoa_r+0x1a4>
 8014c0c:	495e      	ldr	r1, [pc, #376]	@ (8014d88 <_dtoa_r+0x2c8>)
 8014c0e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8014c12:	ed91 7b00 	vldr	d7, [r1]
 8014c16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c1e:	d501      	bpl.n	8014c24 <_dtoa_r+0x164>
 8014c20:	f108 38ff 	add.w	r8, r8, #4294967295
 8014c24:	2100      	movs	r1, #0
 8014c26:	e01e      	b.n	8014c66 <_dtoa_r+0x1a6>
 8014c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c2a:	4413      	add	r3, r2
 8014c2c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8014c30:	2920      	cmp	r1, #32
 8014c32:	bfc1      	itttt	gt
 8014c34:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8014c38:	408e      	lslgt	r6, r1
 8014c3a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8014c3e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8014c42:	bfd6      	itet	le
 8014c44:	f1c1 0120 	rsble	r1, r1, #32
 8014c48:	4331      	orrgt	r1, r6
 8014c4a:	fa04 f101 	lslle.w	r1, r4, r1
 8014c4e:	ee07 1a90 	vmov	s15, r1
 8014c52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014c56:	3b01      	subs	r3, #1
 8014c58:	ee17 1a90 	vmov	r1, s15
 8014c5c:	2501      	movs	r5, #1
 8014c5e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8014c62:	e7a8      	b.n	8014bb6 <_dtoa_r+0xf6>
 8014c64:	2101      	movs	r1, #1
 8014c66:	1ad2      	subs	r2, r2, r3
 8014c68:	1e53      	subs	r3, r2, #1
 8014c6a:	9306      	str	r3, [sp, #24]
 8014c6c:	bf45      	ittet	mi
 8014c6e:	f1c2 0301 	rsbmi	r3, r2, #1
 8014c72:	9305      	strmi	r3, [sp, #20]
 8014c74:	2300      	movpl	r3, #0
 8014c76:	2300      	movmi	r3, #0
 8014c78:	bf4c      	ite	mi
 8014c7a:	9306      	strmi	r3, [sp, #24]
 8014c7c:	9305      	strpl	r3, [sp, #20]
 8014c7e:	f1b8 0f00 	cmp.w	r8, #0
 8014c82:	910c      	str	r1, [sp, #48]	@ 0x30
 8014c84:	db18      	blt.n	8014cb8 <_dtoa_r+0x1f8>
 8014c86:	9b06      	ldr	r3, [sp, #24]
 8014c88:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8014c8c:	4443      	add	r3, r8
 8014c8e:	9306      	str	r3, [sp, #24]
 8014c90:	2300      	movs	r3, #0
 8014c92:	9a07      	ldr	r2, [sp, #28]
 8014c94:	2a09      	cmp	r2, #9
 8014c96:	d849      	bhi.n	8014d2c <_dtoa_r+0x26c>
 8014c98:	2a05      	cmp	r2, #5
 8014c9a:	bfc4      	itt	gt
 8014c9c:	3a04      	subgt	r2, #4
 8014c9e:	9207      	strgt	r2, [sp, #28]
 8014ca0:	9a07      	ldr	r2, [sp, #28]
 8014ca2:	f1a2 0202 	sub.w	r2, r2, #2
 8014ca6:	bfcc      	ite	gt
 8014ca8:	2400      	movgt	r4, #0
 8014caa:	2401      	movle	r4, #1
 8014cac:	2a03      	cmp	r2, #3
 8014cae:	d848      	bhi.n	8014d42 <_dtoa_r+0x282>
 8014cb0:	e8df f002 	tbb	[pc, r2]
 8014cb4:	3a2c2e0b 	.word	0x3a2c2e0b
 8014cb8:	9b05      	ldr	r3, [sp, #20]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	eba3 0308 	sub.w	r3, r3, r8
 8014cc0:	9305      	str	r3, [sp, #20]
 8014cc2:	920a      	str	r2, [sp, #40]	@ 0x28
 8014cc4:	f1c8 0300 	rsb	r3, r8, #0
 8014cc8:	e7e3      	b.n	8014c92 <_dtoa_r+0x1d2>
 8014cca:	2200      	movs	r2, #0
 8014ccc:	9208      	str	r2, [sp, #32]
 8014cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014cd0:	2a00      	cmp	r2, #0
 8014cd2:	dc39      	bgt.n	8014d48 <_dtoa_r+0x288>
 8014cd4:	f04f 0b01 	mov.w	fp, #1
 8014cd8:	46da      	mov	sl, fp
 8014cda:	465a      	mov	r2, fp
 8014cdc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014ce0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8014ce4:	2100      	movs	r1, #0
 8014ce6:	2004      	movs	r0, #4
 8014ce8:	f100 0614 	add.w	r6, r0, #20
 8014cec:	4296      	cmp	r6, r2
 8014cee:	d930      	bls.n	8014d52 <_dtoa_r+0x292>
 8014cf0:	6079      	str	r1, [r7, #4]
 8014cf2:	4648      	mov	r0, r9
 8014cf4:	9304      	str	r3, [sp, #16]
 8014cf6:	f000 fd39 	bl	801576c <_Balloc>
 8014cfa:	9b04      	ldr	r3, [sp, #16]
 8014cfc:	4607      	mov	r7, r0
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	d146      	bne.n	8014d90 <_dtoa_r+0x2d0>
 8014d02:	4b22      	ldr	r3, [pc, #136]	@ (8014d8c <_dtoa_r+0x2cc>)
 8014d04:	4602      	mov	r2, r0
 8014d06:	f240 11af 	movw	r1, #431	@ 0x1af
 8014d0a:	e6f2      	b.n	8014af2 <_dtoa_r+0x32>
 8014d0c:	2201      	movs	r2, #1
 8014d0e:	e7dd      	b.n	8014ccc <_dtoa_r+0x20c>
 8014d10:	2200      	movs	r2, #0
 8014d12:	9208      	str	r2, [sp, #32]
 8014d14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d16:	eb08 0b02 	add.w	fp, r8, r2
 8014d1a:	f10b 0a01 	add.w	sl, fp, #1
 8014d1e:	4652      	mov	r2, sl
 8014d20:	2a01      	cmp	r2, #1
 8014d22:	bfb8      	it	lt
 8014d24:	2201      	movlt	r2, #1
 8014d26:	e7db      	b.n	8014ce0 <_dtoa_r+0x220>
 8014d28:	2201      	movs	r2, #1
 8014d2a:	e7f2      	b.n	8014d12 <_dtoa_r+0x252>
 8014d2c:	2401      	movs	r4, #1
 8014d2e:	2200      	movs	r2, #0
 8014d30:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8014d34:	f04f 3bff 	mov.w	fp, #4294967295
 8014d38:	2100      	movs	r1, #0
 8014d3a:	46da      	mov	sl, fp
 8014d3c:	2212      	movs	r2, #18
 8014d3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8014d40:	e7ce      	b.n	8014ce0 <_dtoa_r+0x220>
 8014d42:	2201      	movs	r2, #1
 8014d44:	9208      	str	r2, [sp, #32]
 8014d46:	e7f5      	b.n	8014d34 <_dtoa_r+0x274>
 8014d48:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8014d4c:	46da      	mov	sl, fp
 8014d4e:	465a      	mov	r2, fp
 8014d50:	e7c6      	b.n	8014ce0 <_dtoa_r+0x220>
 8014d52:	3101      	adds	r1, #1
 8014d54:	0040      	lsls	r0, r0, #1
 8014d56:	e7c7      	b.n	8014ce8 <_dtoa_r+0x228>
 8014d58:	636f4361 	.word	0x636f4361
 8014d5c:	3fd287a7 	.word	0x3fd287a7
 8014d60:	8b60c8b3 	.word	0x8b60c8b3
 8014d64:	3fc68a28 	.word	0x3fc68a28
 8014d68:	509f79fb 	.word	0x509f79fb
 8014d6c:	3fd34413 	.word	0x3fd34413
 8014d70:	0801829e 	.word	0x0801829e
 8014d74:	080182b5 	.word	0x080182b5
 8014d78:	7ff00000 	.word	0x7ff00000
 8014d7c:	0801829a 	.word	0x0801829a
 8014d80:	08018269 	.word	0x08018269
 8014d84:	08018268 	.word	0x08018268
 8014d88:	080183b0 	.word	0x080183b0
 8014d8c:	0801830d 	.word	0x0801830d
 8014d90:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8014d94:	f1ba 0f0e 	cmp.w	sl, #14
 8014d98:	6010      	str	r0, [r2, #0]
 8014d9a:	d86f      	bhi.n	8014e7c <_dtoa_r+0x3bc>
 8014d9c:	2c00      	cmp	r4, #0
 8014d9e:	d06d      	beq.n	8014e7c <_dtoa_r+0x3bc>
 8014da0:	f1b8 0f00 	cmp.w	r8, #0
 8014da4:	f340 80c2 	ble.w	8014f2c <_dtoa_r+0x46c>
 8014da8:	4aca      	ldr	r2, [pc, #808]	@ (80150d4 <_dtoa_r+0x614>)
 8014daa:	f008 010f 	and.w	r1, r8, #15
 8014dae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014db2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8014db6:	ed92 7b00 	vldr	d7, [r2]
 8014dba:	ea4f 1128 	mov.w	r1, r8, asr #4
 8014dbe:	f000 80a9 	beq.w	8014f14 <_dtoa_r+0x454>
 8014dc2:	4ac5      	ldr	r2, [pc, #788]	@ (80150d8 <_dtoa_r+0x618>)
 8014dc4:	ed92 6b08 	vldr	d6, [r2, #32]
 8014dc8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014dcc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014dd0:	f001 010f 	and.w	r1, r1, #15
 8014dd4:	2203      	movs	r2, #3
 8014dd6:	48c0      	ldr	r0, [pc, #768]	@ (80150d8 <_dtoa_r+0x618>)
 8014dd8:	2900      	cmp	r1, #0
 8014dda:	f040 809d 	bne.w	8014f18 <_dtoa_r+0x458>
 8014dde:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014de2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014de6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014dea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014dec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014df0:	2900      	cmp	r1, #0
 8014df2:	f000 80c1 	beq.w	8014f78 <_dtoa_r+0x4b8>
 8014df6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014dfa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e02:	f140 80b9 	bpl.w	8014f78 <_dtoa_r+0x4b8>
 8014e06:	f1ba 0f00 	cmp.w	sl, #0
 8014e0a:	f000 80b5 	beq.w	8014f78 <_dtoa_r+0x4b8>
 8014e0e:	f1bb 0f00 	cmp.w	fp, #0
 8014e12:	dd31      	ble.n	8014e78 <_dtoa_r+0x3b8>
 8014e14:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8014e18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014e1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014e20:	f108 31ff 	add.w	r1, r8, #4294967295
 8014e24:	9104      	str	r1, [sp, #16]
 8014e26:	3201      	adds	r2, #1
 8014e28:	465c      	mov	r4, fp
 8014e2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014e2e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8014e32:	ee07 2a90 	vmov	s15, r2
 8014e36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014e3a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014e3e:	ee15 2a90 	vmov	r2, s11
 8014e42:	ec51 0b15 	vmov	r0, r1, d5
 8014e46:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8014e4a:	2c00      	cmp	r4, #0
 8014e4c:	f040 8098 	bne.w	8014f80 <_dtoa_r+0x4c0>
 8014e50:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014e54:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014e58:	ec41 0b17 	vmov	d7, r0, r1
 8014e5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e64:	f300 8261 	bgt.w	801532a <_dtoa_r+0x86a>
 8014e68:	eeb1 7b47 	vneg.f64	d7, d7
 8014e6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e74:	f100 80f5 	bmi.w	8015062 <_dtoa_r+0x5a2>
 8014e78:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014e7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014e7e:	2a00      	cmp	r2, #0
 8014e80:	f2c0 812c 	blt.w	80150dc <_dtoa_r+0x61c>
 8014e84:	f1b8 0f0e 	cmp.w	r8, #14
 8014e88:	f300 8128 	bgt.w	80150dc <_dtoa_r+0x61c>
 8014e8c:	4b91      	ldr	r3, [pc, #580]	@ (80150d4 <_dtoa_r+0x614>)
 8014e8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014e92:	ed93 6b00 	vldr	d6, [r3]
 8014e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	da03      	bge.n	8014ea4 <_dtoa_r+0x3e4>
 8014e9c:	f1ba 0f00 	cmp.w	sl, #0
 8014ea0:	f340 80d2 	ble.w	8015048 <_dtoa_r+0x588>
 8014ea4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8014ea8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014eac:	463e      	mov	r6, r7
 8014eae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014eb2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014eb6:	ee15 3a10 	vmov	r3, s10
 8014eba:	3330      	adds	r3, #48	@ 0x30
 8014ebc:	f806 3b01 	strb.w	r3, [r6], #1
 8014ec0:	1bf3      	subs	r3, r6, r7
 8014ec2:	459a      	cmp	sl, r3
 8014ec4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014ec8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014ecc:	f040 80f8 	bne.w	80150c0 <_dtoa_r+0x600>
 8014ed0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014ed4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014edc:	f300 80dd 	bgt.w	801509a <_dtoa_r+0x5da>
 8014ee0:	eeb4 7b46 	vcmp.f64	d7, d6
 8014ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ee8:	d104      	bne.n	8014ef4 <_dtoa_r+0x434>
 8014eea:	ee15 3a10 	vmov	r3, s10
 8014eee:	07db      	lsls	r3, r3, #31
 8014ef0:	f100 80d3 	bmi.w	801509a <_dtoa_r+0x5da>
 8014ef4:	9901      	ldr	r1, [sp, #4]
 8014ef6:	4648      	mov	r0, r9
 8014ef8:	f000 fc78 	bl	80157ec <_Bfree>
 8014efc:	2300      	movs	r3, #0
 8014efe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014f00:	7033      	strb	r3, [r6, #0]
 8014f02:	f108 0301 	add.w	r3, r8, #1
 8014f06:	6013      	str	r3, [r2, #0]
 8014f08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	f000 8304 	beq.w	8015518 <_dtoa_r+0xa58>
 8014f10:	601e      	str	r6, [r3, #0]
 8014f12:	e301      	b.n	8015518 <_dtoa_r+0xa58>
 8014f14:	2202      	movs	r2, #2
 8014f16:	e75e      	b.n	8014dd6 <_dtoa_r+0x316>
 8014f18:	07cc      	lsls	r4, r1, #31
 8014f1a:	d504      	bpl.n	8014f26 <_dtoa_r+0x466>
 8014f1c:	ed90 6b00 	vldr	d6, [r0]
 8014f20:	3201      	adds	r2, #1
 8014f22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014f26:	1049      	asrs	r1, r1, #1
 8014f28:	3008      	adds	r0, #8
 8014f2a:	e755      	b.n	8014dd8 <_dtoa_r+0x318>
 8014f2c:	d022      	beq.n	8014f74 <_dtoa_r+0x4b4>
 8014f2e:	f1c8 0100 	rsb	r1, r8, #0
 8014f32:	4a68      	ldr	r2, [pc, #416]	@ (80150d4 <_dtoa_r+0x614>)
 8014f34:	f001 000f 	and.w	r0, r1, #15
 8014f38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014f3c:	ed92 7b00 	vldr	d7, [r2]
 8014f40:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014f44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014f48:	4863      	ldr	r0, [pc, #396]	@ (80150d8 <_dtoa_r+0x618>)
 8014f4a:	1109      	asrs	r1, r1, #4
 8014f4c:	2400      	movs	r4, #0
 8014f4e:	2202      	movs	r2, #2
 8014f50:	b929      	cbnz	r1, 8014f5e <_dtoa_r+0x49e>
 8014f52:	2c00      	cmp	r4, #0
 8014f54:	f43f af49 	beq.w	8014dea <_dtoa_r+0x32a>
 8014f58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014f5c:	e745      	b.n	8014dea <_dtoa_r+0x32a>
 8014f5e:	07ce      	lsls	r6, r1, #31
 8014f60:	d505      	bpl.n	8014f6e <_dtoa_r+0x4ae>
 8014f62:	ed90 6b00 	vldr	d6, [r0]
 8014f66:	3201      	adds	r2, #1
 8014f68:	2401      	movs	r4, #1
 8014f6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014f6e:	1049      	asrs	r1, r1, #1
 8014f70:	3008      	adds	r0, #8
 8014f72:	e7ed      	b.n	8014f50 <_dtoa_r+0x490>
 8014f74:	2202      	movs	r2, #2
 8014f76:	e738      	b.n	8014dea <_dtoa_r+0x32a>
 8014f78:	f8cd 8010 	str.w	r8, [sp, #16]
 8014f7c:	4654      	mov	r4, sl
 8014f7e:	e754      	b.n	8014e2a <_dtoa_r+0x36a>
 8014f80:	4a54      	ldr	r2, [pc, #336]	@ (80150d4 <_dtoa_r+0x614>)
 8014f82:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8014f86:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014f8a:	9a08      	ldr	r2, [sp, #32]
 8014f8c:	ec41 0b17 	vmov	d7, r0, r1
 8014f90:	443c      	add	r4, r7
 8014f92:	b34a      	cbz	r2, 8014fe8 <_dtoa_r+0x528>
 8014f94:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8014f98:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8014f9c:	463e      	mov	r6, r7
 8014f9e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014fa2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014fa6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014faa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014fae:	ee14 2a90 	vmov	r2, s9
 8014fb2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014fb6:	3230      	adds	r2, #48	@ 0x30
 8014fb8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014fbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fc4:	f806 2b01 	strb.w	r2, [r6], #1
 8014fc8:	d438      	bmi.n	801503c <_dtoa_r+0x57c>
 8014fca:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014fce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd6:	d462      	bmi.n	801509e <_dtoa_r+0x5de>
 8014fd8:	42a6      	cmp	r6, r4
 8014fda:	f43f af4d 	beq.w	8014e78 <_dtoa_r+0x3b8>
 8014fde:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014fe2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014fe6:	e7e0      	b.n	8014faa <_dtoa_r+0x4ea>
 8014fe8:	4621      	mov	r1, r4
 8014fea:	463e      	mov	r6, r7
 8014fec:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014ff0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014ff4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014ff8:	ee14 2a90 	vmov	r2, s9
 8014ffc:	3230      	adds	r2, #48	@ 0x30
 8014ffe:	f806 2b01 	strb.w	r2, [r6], #1
 8015002:	42a6      	cmp	r6, r4
 8015004:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015008:	ee36 6b45 	vsub.f64	d6, d6, d5
 801500c:	d119      	bne.n	8015042 <_dtoa_r+0x582>
 801500e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8015012:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015016:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801501a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801501e:	dc3e      	bgt.n	801509e <_dtoa_r+0x5de>
 8015020:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015024:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801502c:	f57f af24 	bpl.w	8014e78 <_dtoa_r+0x3b8>
 8015030:	460e      	mov	r6, r1
 8015032:	3901      	subs	r1, #1
 8015034:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015038:	2b30      	cmp	r3, #48	@ 0x30
 801503a:	d0f9      	beq.n	8015030 <_dtoa_r+0x570>
 801503c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015040:	e758      	b.n	8014ef4 <_dtoa_r+0x434>
 8015042:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015046:	e7d5      	b.n	8014ff4 <_dtoa_r+0x534>
 8015048:	d10b      	bne.n	8015062 <_dtoa_r+0x5a2>
 801504a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801504e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015052:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015056:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801505a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801505e:	f2c0 8161 	blt.w	8015324 <_dtoa_r+0x864>
 8015062:	2400      	movs	r4, #0
 8015064:	4625      	mov	r5, r4
 8015066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015068:	43db      	mvns	r3, r3
 801506a:	9304      	str	r3, [sp, #16]
 801506c:	463e      	mov	r6, r7
 801506e:	f04f 0800 	mov.w	r8, #0
 8015072:	4621      	mov	r1, r4
 8015074:	4648      	mov	r0, r9
 8015076:	f000 fbb9 	bl	80157ec <_Bfree>
 801507a:	2d00      	cmp	r5, #0
 801507c:	d0de      	beq.n	801503c <_dtoa_r+0x57c>
 801507e:	f1b8 0f00 	cmp.w	r8, #0
 8015082:	d005      	beq.n	8015090 <_dtoa_r+0x5d0>
 8015084:	45a8      	cmp	r8, r5
 8015086:	d003      	beq.n	8015090 <_dtoa_r+0x5d0>
 8015088:	4641      	mov	r1, r8
 801508a:	4648      	mov	r0, r9
 801508c:	f000 fbae 	bl	80157ec <_Bfree>
 8015090:	4629      	mov	r1, r5
 8015092:	4648      	mov	r0, r9
 8015094:	f000 fbaa 	bl	80157ec <_Bfree>
 8015098:	e7d0      	b.n	801503c <_dtoa_r+0x57c>
 801509a:	f8cd 8010 	str.w	r8, [sp, #16]
 801509e:	4633      	mov	r3, r6
 80150a0:	461e      	mov	r6, r3
 80150a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80150a6:	2a39      	cmp	r2, #57	@ 0x39
 80150a8:	d106      	bne.n	80150b8 <_dtoa_r+0x5f8>
 80150aa:	429f      	cmp	r7, r3
 80150ac:	d1f8      	bne.n	80150a0 <_dtoa_r+0x5e0>
 80150ae:	9a04      	ldr	r2, [sp, #16]
 80150b0:	3201      	adds	r2, #1
 80150b2:	9204      	str	r2, [sp, #16]
 80150b4:	2230      	movs	r2, #48	@ 0x30
 80150b6:	703a      	strb	r2, [r7, #0]
 80150b8:	781a      	ldrb	r2, [r3, #0]
 80150ba:	3201      	adds	r2, #1
 80150bc:	701a      	strb	r2, [r3, #0]
 80150be:	e7bd      	b.n	801503c <_dtoa_r+0x57c>
 80150c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80150c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80150c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150cc:	f47f aeef 	bne.w	8014eae <_dtoa_r+0x3ee>
 80150d0:	e710      	b.n	8014ef4 <_dtoa_r+0x434>
 80150d2:	bf00      	nop
 80150d4:	080183b0 	.word	0x080183b0
 80150d8:	08018388 	.word	0x08018388
 80150dc:	9908      	ldr	r1, [sp, #32]
 80150de:	2900      	cmp	r1, #0
 80150e0:	f000 80e3 	beq.w	80152aa <_dtoa_r+0x7ea>
 80150e4:	9907      	ldr	r1, [sp, #28]
 80150e6:	2901      	cmp	r1, #1
 80150e8:	f300 80c8 	bgt.w	801527c <_dtoa_r+0x7bc>
 80150ec:	2d00      	cmp	r5, #0
 80150ee:	f000 80c1 	beq.w	8015274 <_dtoa_r+0x7b4>
 80150f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80150f6:	9e05      	ldr	r6, [sp, #20]
 80150f8:	461c      	mov	r4, r3
 80150fa:	9304      	str	r3, [sp, #16]
 80150fc:	9b05      	ldr	r3, [sp, #20]
 80150fe:	4413      	add	r3, r2
 8015100:	9305      	str	r3, [sp, #20]
 8015102:	9b06      	ldr	r3, [sp, #24]
 8015104:	2101      	movs	r1, #1
 8015106:	4413      	add	r3, r2
 8015108:	4648      	mov	r0, r9
 801510a:	9306      	str	r3, [sp, #24]
 801510c:	f000 fc6c 	bl	80159e8 <__i2b>
 8015110:	9b04      	ldr	r3, [sp, #16]
 8015112:	4605      	mov	r5, r0
 8015114:	b166      	cbz	r6, 8015130 <_dtoa_r+0x670>
 8015116:	9a06      	ldr	r2, [sp, #24]
 8015118:	2a00      	cmp	r2, #0
 801511a:	dd09      	ble.n	8015130 <_dtoa_r+0x670>
 801511c:	42b2      	cmp	r2, r6
 801511e:	9905      	ldr	r1, [sp, #20]
 8015120:	bfa8      	it	ge
 8015122:	4632      	movge	r2, r6
 8015124:	1a89      	subs	r1, r1, r2
 8015126:	9105      	str	r1, [sp, #20]
 8015128:	9906      	ldr	r1, [sp, #24]
 801512a:	1ab6      	subs	r6, r6, r2
 801512c:	1a8a      	subs	r2, r1, r2
 801512e:	9206      	str	r2, [sp, #24]
 8015130:	b1fb      	cbz	r3, 8015172 <_dtoa_r+0x6b2>
 8015132:	9a08      	ldr	r2, [sp, #32]
 8015134:	2a00      	cmp	r2, #0
 8015136:	f000 80bc 	beq.w	80152b2 <_dtoa_r+0x7f2>
 801513a:	b19c      	cbz	r4, 8015164 <_dtoa_r+0x6a4>
 801513c:	4629      	mov	r1, r5
 801513e:	4622      	mov	r2, r4
 8015140:	4648      	mov	r0, r9
 8015142:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015144:	f000 fd10 	bl	8015b68 <__pow5mult>
 8015148:	9a01      	ldr	r2, [sp, #4]
 801514a:	4601      	mov	r1, r0
 801514c:	4605      	mov	r5, r0
 801514e:	4648      	mov	r0, r9
 8015150:	f000 fc60 	bl	8015a14 <__multiply>
 8015154:	9901      	ldr	r1, [sp, #4]
 8015156:	9004      	str	r0, [sp, #16]
 8015158:	4648      	mov	r0, r9
 801515a:	f000 fb47 	bl	80157ec <_Bfree>
 801515e:	9a04      	ldr	r2, [sp, #16]
 8015160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015162:	9201      	str	r2, [sp, #4]
 8015164:	1b1a      	subs	r2, r3, r4
 8015166:	d004      	beq.n	8015172 <_dtoa_r+0x6b2>
 8015168:	9901      	ldr	r1, [sp, #4]
 801516a:	4648      	mov	r0, r9
 801516c:	f000 fcfc 	bl	8015b68 <__pow5mult>
 8015170:	9001      	str	r0, [sp, #4]
 8015172:	2101      	movs	r1, #1
 8015174:	4648      	mov	r0, r9
 8015176:	f000 fc37 	bl	80159e8 <__i2b>
 801517a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801517c:	4604      	mov	r4, r0
 801517e:	2b00      	cmp	r3, #0
 8015180:	f000 81d0 	beq.w	8015524 <_dtoa_r+0xa64>
 8015184:	461a      	mov	r2, r3
 8015186:	4601      	mov	r1, r0
 8015188:	4648      	mov	r0, r9
 801518a:	f000 fced 	bl	8015b68 <__pow5mult>
 801518e:	9b07      	ldr	r3, [sp, #28]
 8015190:	2b01      	cmp	r3, #1
 8015192:	4604      	mov	r4, r0
 8015194:	f300 8095 	bgt.w	80152c2 <_dtoa_r+0x802>
 8015198:	9b02      	ldr	r3, [sp, #8]
 801519a:	2b00      	cmp	r3, #0
 801519c:	f040 808b 	bne.w	80152b6 <_dtoa_r+0x7f6>
 80151a0:	9b03      	ldr	r3, [sp, #12]
 80151a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80151a6:	2a00      	cmp	r2, #0
 80151a8:	f040 8087 	bne.w	80152ba <_dtoa_r+0x7fa>
 80151ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80151b0:	0d12      	lsrs	r2, r2, #20
 80151b2:	0512      	lsls	r2, r2, #20
 80151b4:	2a00      	cmp	r2, #0
 80151b6:	f000 8082 	beq.w	80152be <_dtoa_r+0x7fe>
 80151ba:	9b05      	ldr	r3, [sp, #20]
 80151bc:	3301      	adds	r3, #1
 80151be:	9305      	str	r3, [sp, #20]
 80151c0:	9b06      	ldr	r3, [sp, #24]
 80151c2:	3301      	adds	r3, #1
 80151c4:	9306      	str	r3, [sp, #24]
 80151c6:	2301      	movs	r3, #1
 80151c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80151ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	f000 81af 	beq.w	8015530 <_dtoa_r+0xa70>
 80151d2:	6922      	ldr	r2, [r4, #16]
 80151d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80151d8:	6910      	ldr	r0, [r2, #16]
 80151da:	f000 fbb9 	bl	8015950 <__hi0bits>
 80151de:	f1c0 0020 	rsb	r0, r0, #32
 80151e2:	9b06      	ldr	r3, [sp, #24]
 80151e4:	4418      	add	r0, r3
 80151e6:	f010 001f 	ands.w	r0, r0, #31
 80151ea:	d076      	beq.n	80152da <_dtoa_r+0x81a>
 80151ec:	f1c0 0220 	rsb	r2, r0, #32
 80151f0:	2a04      	cmp	r2, #4
 80151f2:	dd69      	ble.n	80152c8 <_dtoa_r+0x808>
 80151f4:	9b05      	ldr	r3, [sp, #20]
 80151f6:	f1c0 001c 	rsb	r0, r0, #28
 80151fa:	4403      	add	r3, r0
 80151fc:	9305      	str	r3, [sp, #20]
 80151fe:	9b06      	ldr	r3, [sp, #24]
 8015200:	4406      	add	r6, r0
 8015202:	4403      	add	r3, r0
 8015204:	9306      	str	r3, [sp, #24]
 8015206:	9b05      	ldr	r3, [sp, #20]
 8015208:	2b00      	cmp	r3, #0
 801520a:	dd05      	ble.n	8015218 <_dtoa_r+0x758>
 801520c:	9901      	ldr	r1, [sp, #4]
 801520e:	461a      	mov	r2, r3
 8015210:	4648      	mov	r0, r9
 8015212:	f000 fd03 	bl	8015c1c <__lshift>
 8015216:	9001      	str	r0, [sp, #4]
 8015218:	9b06      	ldr	r3, [sp, #24]
 801521a:	2b00      	cmp	r3, #0
 801521c:	dd05      	ble.n	801522a <_dtoa_r+0x76a>
 801521e:	4621      	mov	r1, r4
 8015220:	461a      	mov	r2, r3
 8015222:	4648      	mov	r0, r9
 8015224:	f000 fcfa 	bl	8015c1c <__lshift>
 8015228:	4604      	mov	r4, r0
 801522a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801522c:	2b00      	cmp	r3, #0
 801522e:	d056      	beq.n	80152de <_dtoa_r+0x81e>
 8015230:	9801      	ldr	r0, [sp, #4]
 8015232:	4621      	mov	r1, r4
 8015234:	f000 fd5e 	bl	8015cf4 <__mcmp>
 8015238:	2800      	cmp	r0, #0
 801523a:	da50      	bge.n	80152de <_dtoa_r+0x81e>
 801523c:	f108 33ff 	add.w	r3, r8, #4294967295
 8015240:	9304      	str	r3, [sp, #16]
 8015242:	9901      	ldr	r1, [sp, #4]
 8015244:	2300      	movs	r3, #0
 8015246:	220a      	movs	r2, #10
 8015248:	4648      	mov	r0, r9
 801524a:	f000 faf1 	bl	8015830 <__multadd>
 801524e:	9b08      	ldr	r3, [sp, #32]
 8015250:	9001      	str	r0, [sp, #4]
 8015252:	2b00      	cmp	r3, #0
 8015254:	f000 816e 	beq.w	8015534 <_dtoa_r+0xa74>
 8015258:	4629      	mov	r1, r5
 801525a:	2300      	movs	r3, #0
 801525c:	220a      	movs	r2, #10
 801525e:	4648      	mov	r0, r9
 8015260:	f000 fae6 	bl	8015830 <__multadd>
 8015264:	f1bb 0f00 	cmp.w	fp, #0
 8015268:	4605      	mov	r5, r0
 801526a:	dc64      	bgt.n	8015336 <_dtoa_r+0x876>
 801526c:	9b07      	ldr	r3, [sp, #28]
 801526e:	2b02      	cmp	r3, #2
 8015270:	dc3e      	bgt.n	80152f0 <_dtoa_r+0x830>
 8015272:	e060      	b.n	8015336 <_dtoa_r+0x876>
 8015274:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015276:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801527a:	e73c      	b.n	80150f6 <_dtoa_r+0x636>
 801527c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8015280:	42a3      	cmp	r3, r4
 8015282:	bfbf      	itttt	lt
 8015284:	1ae2      	sublt	r2, r4, r3
 8015286:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015288:	189b      	addlt	r3, r3, r2
 801528a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801528c:	bfae      	itee	ge
 801528e:	1b1c      	subge	r4, r3, r4
 8015290:	4623      	movlt	r3, r4
 8015292:	2400      	movlt	r4, #0
 8015294:	f1ba 0f00 	cmp.w	sl, #0
 8015298:	bfb5      	itete	lt
 801529a:	9a05      	ldrlt	r2, [sp, #20]
 801529c:	9e05      	ldrge	r6, [sp, #20]
 801529e:	eba2 060a 	sublt.w	r6, r2, sl
 80152a2:	4652      	movge	r2, sl
 80152a4:	bfb8      	it	lt
 80152a6:	2200      	movlt	r2, #0
 80152a8:	e727      	b.n	80150fa <_dtoa_r+0x63a>
 80152aa:	9e05      	ldr	r6, [sp, #20]
 80152ac:	9d08      	ldr	r5, [sp, #32]
 80152ae:	461c      	mov	r4, r3
 80152b0:	e730      	b.n	8015114 <_dtoa_r+0x654>
 80152b2:	461a      	mov	r2, r3
 80152b4:	e758      	b.n	8015168 <_dtoa_r+0x6a8>
 80152b6:	2300      	movs	r3, #0
 80152b8:	e786      	b.n	80151c8 <_dtoa_r+0x708>
 80152ba:	9b02      	ldr	r3, [sp, #8]
 80152bc:	e784      	b.n	80151c8 <_dtoa_r+0x708>
 80152be:	920b      	str	r2, [sp, #44]	@ 0x2c
 80152c0:	e783      	b.n	80151ca <_dtoa_r+0x70a>
 80152c2:	2300      	movs	r3, #0
 80152c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80152c6:	e784      	b.n	80151d2 <_dtoa_r+0x712>
 80152c8:	d09d      	beq.n	8015206 <_dtoa_r+0x746>
 80152ca:	9b05      	ldr	r3, [sp, #20]
 80152cc:	321c      	adds	r2, #28
 80152ce:	4413      	add	r3, r2
 80152d0:	9305      	str	r3, [sp, #20]
 80152d2:	9b06      	ldr	r3, [sp, #24]
 80152d4:	4416      	add	r6, r2
 80152d6:	4413      	add	r3, r2
 80152d8:	e794      	b.n	8015204 <_dtoa_r+0x744>
 80152da:	4602      	mov	r2, r0
 80152dc:	e7f5      	b.n	80152ca <_dtoa_r+0x80a>
 80152de:	f1ba 0f00 	cmp.w	sl, #0
 80152e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80152e6:	46d3      	mov	fp, sl
 80152e8:	dc21      	bgt.n	801532e <_dtoa_r+0x86e>
 80152ea:	9b07      	ldr	r3, [sp, #28]
 80152ec:	2b02      	cmp	r3, #2
 80152ee:	dd1e      	ble.n	801532e <_dtoa_r+0x86e>
 80152f0:	f1bb 0f00 	cmp.w	fp, #0
 80152f4:	f47f aeb7 	bne.w	8015066 <_dtoa_r+0x5a6>
 80152f8:	4621      	mov	r1, r4
 80152fa:	465b      	mov	r3, fp
 80152fc:	2205      	movs	r2, #5
 80152fe:	4648      	mov	r0, r9
 8015300:	f000 fa96 	bl	8015830 <__multadd>
 8015304:	4601      	mov	r1, r0
 8015306:	4604      	mov	r4, r0
 8015308:	9801      	ldr	r0, [sp, #4]
 801530a:	f000 fcf3 	bl	8015cf4 <__mcmp>
 801530e:	2800      	cmp	r0, #0
 8015310:	f77f aea9 	ble.w	8015066 <_dtoa_r+0x5a6>
 8015314:	463e      	mov	r6, r7
 8015316:	2331      	movs	r3, #49	@ 0x31
 8015318:	f806 3b01 	strb.w	r3, [r6], #1
 801531c:	9b04      	ldr	r3, [sp, #16]
 801531e:	3301      	adds	r3, #1
 8015320:	9304      	str	r3, [sp, #16]
 8015322:	e6a4      	b.n	801506e <_dtoa_r+0x5ae>
 8015324:	f8cd 8010 	str.w	r8, [sp, #16]
 8015328:	4654      	mov	r4, sl
 801532a:	4625      	mov	r5, r4
 801532c:	e7f2      	b.n	8015314 <_dtoa_r+0x854>
 801532e:	9b08      	ldr	r3, [sp, #32]
 8015330:	2b00      	cmp	r3, #0
 8015332:	f000 8103 	beq.w	801553c <_dtoa_r+0xa7c>
 8015336:	2e00      	cmp	r6, #0
 8015338:	dd05      	ble.n	8015346 <_dtoa_r+0x886>
 801533a:	4629      	mov	r1, r5
 801533c:	4632      	mov	r2, r6
 801533e:	4648      	mov	r0, r9
 8015340:	f000 fc6c 	bl	8015c1c <__lshift>
 8015344:	4605      	mov	r5, r0
 8015346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015348:	2b00      	cmp	r3, #0
 801534a:	d058      	beq.n	80153fe <_dtoa_r+0x93e>
 801534c:	6869      	ldr	r1, [r5, #4]
 801534e:	4648      	mov	r0, r9
 8015350:	f000 fa0c 	bl	801576c <_Balloc>
 8015354:	4606      	mov	r6, r0
 8015356:	b928      	cbnz	r0, 8015364 <_dtoa_r+0x8a4>
 8015358:	4b82      	ldr	r3, [pc, #520]	@ (8015564 <_dtoa_r+0xaa4>)
 801535a:	4602      	mov	r2, r0
 801535c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015360:	f7ff bbc7 	b.w	8014af2 <_dtoa_r+0x32>
 8015364:	692a      	ldr	r2, [r5, #16]
 8015366:	3202      	adds	r2, #2
 8015368:	0092      	lsls	r2, r2, #2
 801536a:	f105 010c 	add.w	r1, r5, #12
 801536e:	300c      	adds	r0, #12
 8015370:	f7ff fb07 	bl	8014982 <memcpy>
 8015374:	2201      	movs	r2, #1
 8015376:	4631      	mov	r1, r6
 8015378:	4648      	mov	r0, r9
 801537a:	f000 fc4f 	bl	8015c1c <__lshift>
 801537e:	1c7b      	adds	r3, r7, #1
 8015380:	9305      	str	r3, [sp, #20]
 8015382:	eb07 030b 	add.w	r3, r7, fp
 8015386:	9309      	str	r3, [sp, #36]	@ 0x24
 8015388:	9b02      	ldr	r3, [sp, #8]
 801538a:	f003 0301 	and.w	r3, r3, #1
 801538e:	46a8      	mov	r8, r5
 8015390:	9308      	str	r3, [sp, #32]
 8015392:	4605      	mov	r5, r0
 8015394:	9b05      	ldr	r3, [sp, #20]
 8015396:	9801      	ldr	r0, [sp, #4]
 8015398:	4621      	mov	r1, r4
 801539a:	f103 3bff 	add.w	fp, r3, #4294967295
 801539e:	f7ff fb05 	bl	80149ac <quorem>
 80153a2:	4641      	mov	r1, r8
 80153a4:	9002      	str	r0, [sp, #8]
 80153a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80153aa:	9801      	ldr	r0, [sp, #4]
 80153ac:	f000 fca2 	bl	8015cf4 <__mcmp>
 80153b0:	462a      	mov	r2, r5
 80153b2:	9006      	str	r0, [sp, #24]
 80153b4:	4621      	mov	r1, r4
 80153b6:	4648      	mov	r0, r9
 80153b8:	f000 fcb8 	bl	8015d2c <__mdiff>
 80153bc:	68c2      	ldr	r2, [r0, #12]
 80153be:	4606      	mov	r6, r0
 80153c0:	b9fa      	cbnz	r2, 8015402 <_dtoa_r+0x942>
 80153c2:	4601      	mov	r1, r0
 80153c4:	9801      	ldr	r0, [sp, #4]
 80153c6:	f000 fc95 	bl	8015cf4 <__mcmp>
 80153ca:	4602      	mov	r2, r0
 80153cc:	4631      	mov	r1, r6
 80153ce:	4648      	mov	r0, r9
 80153d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80153d2:	f000 fa0b 	bl	80157ec <_Bfree>
 80153d6:	9b07      	ldr	r3, [sp, #28]
 80153d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80153da:	9e05      	ldr	r6, [sp, #20]
 80153dc:	ea43 0102 	orr.w	r1, r3, r2
 80153e0:	9b08      	ldr	r3, [sp, #32]
 80153e2:	4319      	orrs	r1, r3
 80153e4:	d10f      	bne.n	8015406 <_dtoa_r+0x946>
 80153e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80153ea:	d028      	beq.n	801543e <_dtoa_r+0x97e>
 80153ec:	9b06      	ldr	r3, [sp, #24]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	dd02      	ble.n	80153f8 <_dtoa_r+0x938>
 80153f2:	9b02      	ldr	r3, [sp, #8]
 80153f4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80153f8:	f88b a000 	strb.w	sl, [fp]
 80153fc:	e639      	b.n	8015072 <_dtoa_r+0x5b2>
 80153fe:	4628      	mov	r0, r5
 8015400:	e7bd      	b.n	801537e <_dtoa_r+0x8be>
 8015402:	2201      	movs	r2, #1
 8015404:	e7e2      	b.n	80153cc <_dtoa_r+0x90c>
 8015406:	9b06      	ldr	r3, [sp, #24]
 8015408:	2b00      	cmp	r3, #0
 801540a:	db04      	blt.n	8015416 <_dtoa_r+0x956>
 801540c:	9907      	ldr	r1, [sp, #28]
 801540e:	430b      	orrs	r3, r1
 8015410:	9908      	ldr	r1, [sp, #32]
 8015412:	430b      	orrs	r3, r1
 8015414:	d120      	bne.n	8015458 <_dtoa_r+0x998>
 8015416:	2a00      	cmp	r2, #0
 8015418:	ddee      	ble.n	80153f8 <_dtoa_r+0x938>
 801541a:	9901      	ldr	r1, [sp, #4]
 801541c:	2201      	movs	r2, #1
 801541e:	4648      	mov	r0, r9
 8015420:	f000 fbfc 	bl	8015c1c <__lshift>
 8015424:	4621      	mov	r1, r4
 8015426:	9001      	str	r0, [sp, #4]
 8015428:	f000 fc64 	bl	8015cf4 <__mcmp>
 801542c:	2800      	cmp	r0, #0
 801542e:	dc03      	bgt.n	8015438 <_dtoa_r+0x978>
 8015430:	d1e2      	bne.n	80153f8 <_dtoa_r+0x938>
 8015432:	f01a 0f01 	tst.w	sl, #1
 8015436:	d0df      	beq.n	80153f8 <_dtoa_r+0x938>
 8015438:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801543c:	d1d9      	bne.n	80153f2 <_dtoa_r+0x932>
 801543e:	2339      	movs	r3, #57	@ 0x39
 8015440:	f88b 3000 	strb.w	r3, [fp]
 8015444:	4633      	mov	r3, r6
 8015446:	461e      	mov	r6, r3
 8015448:	3b01      	subs	r3, #1
 801544a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801544e:	2a39      	cmp	r2, #57	@ 0x39
 8015450:	d053      	beq.n	80154fa <_dtoa_r+0xa3a>
 8015452:	3201      	adds	r2, #1
 8015454:	701a      	strb	r2, [r3, #0]
 8015456:	e60c      	b.n	8015072 <_dtoa_r+0x5b2>
 8015458:	2a00      	cmp	r2, #0
 801545a:	dd07      	ble.n	801546c <_dtoa_r+0x9ac>
 801545c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015460:	d0ed      	beq.n	801543e <_dtoa_r+0x97e>
 8015462:	f10a 0301 	add.w	r3, sl, #1
 8015466:	f88b 3000 	strb.w	r3, [fp]
 801546a:	e602      	b.n	8015072 <_dtoa_r+0x5b2>
 801546c:	9b05      	ldr	r3, [sp, #20]
 801546e:	9a05      	ldr	r2, [sp, #20]
 8015470:	f803 ac01 	strb.w	sl, [r3, #-1]
 8015474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015476:	4293      	cmp	r3, r2
 8015478:	d029      	beq.n	80154ce <_dtoa_r+0xa0e>
 801547a:	9901      	ldr	r1, [sp, #4]
 801547c:	2300      	movs	r3, #0
 801547e:	220a      	movs	r2, #10
 8015480:	4648      	mov	r0, r9
 8015482:	f000 f9d5 	bl	8015830 <__multadd>
 8015486:	45a8      	cmp	r8, r5
 8015488:	9001      	str	r0, [sp, #4]
 801548a:	f04f 0300 	mov.w	r3, #0
 801548e:	f04f 020a 	mov.w	r2, #10
 8015492:	4641      	mov	r1, r8
 8015494:	4648      	mov	r0, r9
 8015496:	d107      	bne.n	80154a8 <_dtoa_r+0x9e8>
 8015498:	f000 f9ca 	bl	8015830 <__multadd>
 801549c:	4680      	mov	r8, r0
 801549e:	4605      	mov	r5, r0
 80154a0:	9b05      	ldr	r3, [sp, #20]
 80154a2:	3301      	adds	r3, #1
 80154a4:	9305      	str	r3, [sp, #20]
 80154a6:	e775      	b.n	8015394 <_dtoa_r+0x8d4>
 80154a8:	f000 f9c2 	bl	8015830 <__multadd>
 80154ac:	4629      	mov	r1, r5
 80154ae:	4680      	mov	r8, r0
 80154b0:	2300      	movs	r3, #0
 80154b2:	220a      	movs	r2, #10
 80154b4:	4648      	mov	r0, r9
 80154b6:	f000 f9bb 	bl	8015830 <__multadd>
 80154ba:	4605      	mov	r5, r0
 80154bc:	e7f0      	b.n	80154a0 <_dtoa_r+0x9e0>
 80154be:	f1bb 0f00 	cmp.w	fp, #0
 80154c2:	bfcc      	ite	gt
 80154c4:	465e      	movgt	r6, fp
 80154c6:	2601      	movle	r6, #1
 80154c8:	443e      	add	r6, r7
 80154ca:	f04f 0800 	mov.w	r8, #0
 80154ce:	9901      	ldr	r1, [sp, #4]
 80154d0:	2201      	movs	r2, #1
 80154d2:	4648      	mov	r0, r9
 80154d4:	f000 fba2 	bl	8015c1c <__lshift>
 80154d8:	4621      	mov	r1, r4
 80154da:	9001      	str	r0, [sp, #4]
 80154dc:	f000 fc0a 	bl	8015cf4 <__mcmp>
 80154e0:	2800      	cmp	r0, #0
 80154e2:	dcaf      	bgt.n	8015444 <_dtoa_r+0x984>
 80154e4:	d102      	bne.n	80154ec <_dtoa_r+0xa2c>
 80154e6:	f01a 0f01 	tst.w	sl, #1
 80154ea:	d1ab      	bne.n	8015444 <_dtoa_r+0x984>
 80154ec:	4633      	mov	r3, r6
 80154ee:	461e      	mov	r6, r3
 80154f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80154f4:	2a30      	cmp	r2, #48	@ 0x30
 80154f6:	d0fa      	beq.n	80154ee <_dtoa_r+0xa2e>
 80154f8:	e5bb      	b.n	8015072 <_dtoa_r+0x5b2>
 80154fa:	429f      	cmp	r7, r3
 80154fc:	d1a3      	bne.n	8015446 <_dtoa_r+0x986>
 80154fe:	9b04      	ldr	r3, [sp, #16]
 8015500:	3301      	adds	r3, #1
 8015502:	9304      	str	r3, [sp, #16]
 8015504:	2331      	movs	r3, #49	@ 0x31
 8015506:	703b      	strb	r3, [r7, #0]
 8015508:	e5b3      	b.n	8015072 <_dtoa_r+0x5b2>
 801550a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801550c:	4f16      	ldr	r7, [pc, #88]	@ (8015568 <_dtoa_r+0xaa8>)
 801550e:	b11b      	cbz	r3, 8015518 <_dtoa_r+0xa58>
 8015510:	f107 0308 	add.w	r3, r7, #8
 8015514:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8015516:	6013      	str	r3, [r2, #0]
 8015518:	4638      	mov	r0, r7
 801551a:	b011      	add	sp, #68	@ 0x44
 801551c:	ecbd 8b02 	vpop	{d8}
 8015520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015524:	9b07      	ldr	r3, [sp, #28]
 8015526:	2b01      	cmp	r3, #1
 8015528:	f77f ae36 	ble.w	8015198 <_dtoa_r+0x6d8>
 801552c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801552e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015530:	2001      	movs	r0, #1
 8015532:	e656      	b.n	80151e2 <_dtoa_r+0x722>
 8015534:	f1bb 0f00 	cmp.w	fp, #0
 8015538:	f77f aed7 	ble.w	80152ea <_dtoa_r+0x82a>
 801553c:	463e      	mov	r6, r7
 801553e:	9801      	ldr	r0, [sp, #4]
 8015540:	4621      	mov	r1, r4
 8015542:	f7ff fa33 	bl	80149ac <quorem>
 8015546:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801554a:	f806 ab01 	strb.w	sl, [r6], #1
 801554e:	1bf2      	subs	r2, r6, r7
 8015550:	4593      	cmp	fp, r2
 8015552:	ddb4      	ble.n	80154be <_dtoa_r+0x9fe>
 8015554:	9901      	ldr	r1, [sp, #4]
 8015556:	2300      	movs	r3, #0
 8015558:	220a      	movs	r2, #10
 801555a:	4648      	mov	r0, r9
 801555c:	f000 f968 	bl	8015830 <__multadd>
 8015560:	9001      	str	r0, [sp, #4]
 8015562:	e7ec      	b.n	801553e <_dtoa_r+0xa7e>
 8015564:	0801830d 	.word	0x0801830d
 8015568:	08018291 	.word	0x08018291

0801556c <_free_r>:
 801556c:	b538      	push	{r3, r4, r5, lr}
 801556e:	4605      	mov	r5, r0
 8015570:	2900      	cmp	r1, #0
 8015572:	d041      	beq.n	80155f8 <_free_r+0x8c>
 8015574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015578:	1f0c      	subs	r4, r1, #4
 801557a:	2b00      	cmp	r3, #0
 801557c:	bfb8      	it	lt
 801557e:	18e4      	addlt	r4, r4, r3
 8015580:	f000 f8e8 	bl	8015754 <__malloc_lock>
 8015584:	4a1d      	ldr	r2, [pc, #116]	@ (80155fc <_free_r+0x90>)
 8015586:	6813      	ldr	r3, [r2, #0]
 8015588:	b933      	cbnz	r3, 8015598 <_free_r+0x2c>
 801558a:	6063      	str	r3, [r4, #4]
 801558c:	6014      	str	r4, [r2, #0]
 801558e:	4628      	mov	r0, r5
 8015590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015594:	f000 b8e4 	b.w	8015760 <__malloc_unlock>
 8015598:	42a3      	cmp	r3, r4
 801559a:	d908      	bls.n	80155ae <_free_r+0x42>
 801559c:	6820      	ldr	r0, [r4, #0]
 801559e:	1821      	adds	r1, r4, r0
 80155a0:	428b      	cmp	r3, r1
 80155a2:	bf01      	itttt	eq
 80155a4:	6819      	ldreq	r1, [r3, #0]
 80155a6:	685b      	ldreq	r3, [r3, #4]
 80155a8:	1809      	addeq	r1, r1, r0
 80155aa:	6021      	streq	r1, [r4, #0]
 80155ac:	e7ed      	b.n	801558a <_free_r+0x1e>
 80155ae:	461a      	mov	r2, r3
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	b10b      	cbz	r3, 80155b8 <_free_r+0x4c>
 80155b4:	42a3      	cmp	r3, r4
 80155b6:	d9fa      	bls.n	80155ae <_free_r+0x42>
 80155b8:	6811      	ldr	r1, [r2, #0]
 80155ba:	1850      	adds	r0, r2, r1
 80155bc:	42a0      	cmp	r0, r4
 80155be:	d10b      	bne.n	80155d8 <_free_r+0x6c>
 80155c0:	6820      	ldr	r0, [r4, #0]
 80155c2:	4401      	add	r1, r0
 80155c4:	1850      	adds	r0, r2, r1
 80155c6:	4283      	cmp	r3, r0
 80155c8:	6011      	str	r1, [r2, #0]
 80155ca:	d1e0      	bne.n	801558e <_free_r+0x22>
 80155cc:	6818      	ldr	r0, [r3, #0]
 80155ce:	685b      	ldr	r3, [r3, #4]
 80155d0:	6053      	str	r3, [r2, #4]
 80155d2:	4408      	add	r0, r1
 80155d4:	6010      	str	r0, [r2, #0]
 80155d6:	e7da      	b.n	801558e <_free_r+0x22>
 80155d8:	d902      	bls.n	80155e0 <_free_r+0x74>
 80155da:	230c      	movs	r3, #12
 80155dc:	602b      	str	r3, [r5, #0]
 80155de:	e7d6      	b.n	801558e <_free_r+0x22>
 80155e0:	6820      	ldr	r0, [r4, #0]
 80155e2:	1821      	adds	r1, r4, r0
 80155e4:	428b      	cmp	r3, r1
 80155e6:	bf04      	itt	eq
 80155e8:	6819      	ldreq	r1, [r3, #0]
 80155ea:	685b      	ldreq	r3, [r3, #4]
 80155ec:	6063      	str	r3, [r4, #4]
 80155ee:	bf04      	itt	eq
 80155f0:	1809      	addeq	r1, r1, r0
 80155f2:	6021      	streq	r1, [r4, #0]
 80155f4:	6054      	str	r4, [r2, #4]
 80155f6:	e7ca      	b.n	801558e <_free_r+0x22>
 80155f8:	bd38      	pop	{r3, r4, r5, pc}
 80155fa:	bf00      	nop
 80155fc:	24001b30 	.word	0x24001b30

08015600 <malloc>:
 8015600:	4b02      	ldr	r3, [pc, #8]	@ (801560c <malloc+0xc>)
 8015602:	4601      	mov	r1, r0
 8015604:	6818      	ldr	r0, [r3, #0]
 8015606:	f000 b825 	b.w	8015654 <_malloc_r>
 801560a:	bf00      	nop
 801560c:	24000194 	.word	0x24000194

08015610 <sbrk_aligned>:
 8015610:	b570      	push	{r4, r5, r6, lr}
 8015612:	4e0f      	ldr	r6, [pc, #60]	@ (8015650 <sbrk_aligned+0x40>)
 8015614:	460c      	mov	r4, r1
 8015616:	6831      	ldr	r1, [r6, #0]
 8015618:	4605      	mov	r5, r0
 801561a:	b911      	cbnz	r1, 8015622 <sbrk_aligned+0x12>
 801561c:	f001 ff7e 	bl	801751c <_sbrk_r>
 8015620:	6030      	str	r0, [r6, #0]
 8015622:	4621      	mov	r1, r4
 8015624:	4628      	mov	r0, r5
 8015626:	f001 ff79 	bl	801751c <_sbrk_r>
 801562a:	1c43      	adds	r3, r0, #1
 801562c:	d103      	bne.n	8015636 <sbrk_aligned+0x26>
 801562e:	f04f 34ff 	mov.w	r4, #4294967295
 8015632:	4620      	mov	r0, r4
 8015634:	bd70      	pop	{r4, r5, r6, pc}
 8015636:	1cc4      	adds	r4, r0, #3
 8015638:	f024 0403 	bic.w	r4, r4, #3
 801563c:	42a0      	cmp	r0, r4
 801563e:	d0f8      	beq.n	8015632 <sbrk_aligned+0x22>
 8015640:	1a21      	subs	r1, r4, r0
 8015642:	4628      	mov	r0, r5
 8015644:	f001 ff6a 	bl	801751c <_sbrk_r>
 8015648:	3001      	adds	r0, #1
 801564a:	d1f2      	bne.n	8015632 <sbrk_aligned+0x22>
 801564c:	e7ef      	b.n	801562e <sbrk_aligned+0x1e>
 801564e:	bf00      	nop
 8015650:	24001b2c 	.word	0x24001b2c

08015654 <_malloc_r>:
 8015654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015658:	1ccd      	adds	r5, r1, #3
 801565a:	f025 0503 	bic.w	r5, r5, #3
 801565e:	3508      	adds	r5, #8
 8015660:	2d0c      	cmp	r5, #12
 8015662:	bf38      	it	cc
 8015664:	250c      	movcc	r5, #12
 8015666:	2d00      	cmp	r5, #0
 8015668:	4606      	mov	r6, r0
 801566a:	db01      	blt.n	8015670 <_malloc_r+0x1c>
 801566c:	42a9      	cmp	r1, r5
 801566e:	d904      	bls.n	801567a <_malloc_r+0x26>
 8015670:	230c      	movs	r3, #12
 8015672:	6033      	str	r3, [r6, #0]
 8015674:	2000      	movs	r0, #0
 8015676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801567a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015750 <_malloc_r+0xfc>
 801567e:	f000 f869 	bl	8015754 <__malloc_lock>
 8015682:	f8d8 3000 	ldr.w	r3, [r8]
 8015686:	461c      	mov	r4, r3
 8015688:	bb44      	cbnz	r4, 80156dc <_malloc_r+0x88>
 801568a:	4629      	mov	r1, r5
 801568c:	4630      	mov	r0, r6
 801568e:	f7ff ffbf 	bl	8015610 <sbrk_aligned>
 8015692:	1c43      	adds	r3, r0, #1
 8015694:	4604      	mov	r4, r0
 8015696:	d158      	bne.n	801574a <_malloc_r+0xf6>
 8015698:	f8d8 4000 	ldr.w	r4, [r8]
 801569c:	4627      	mov	r7, r4
 801569e:	2f00      	cmp	r7, #0
 80156a0:	d143      	bne.n	801572a <_malloc_r+0xd6>
 80156a2:	2c00      	cmp	r4, #0
 80156a4:	d04b      	beq.n	801573e <_malloc_r+0xea>
 80156a6:	6823      	ldr	r3, [r4, #0]
 80156a8:	4639      	mov	r1, r7
 80156aa:	4630      	mov	r0, r6
 80156ac:	eb04 0903 	add.w	r9, r4, r3
 80156b0:	f001 ff34 	bl	801751c <_sbrk_r>
 80156b4:	4581      	cmp	r9, r0
 80156b6:	d142      	bne.n	801573e <_malloc_r+0xea>
 80156b8:	6821      	ldr	r1, [r4, #0]
 80156ba:	1a6d      	subs	r5, r5, r1
 80156bc:	4629      	mov	r1, r5
 80156be:	4630      	mov	r0, r6
 80156c0:	f7ff ffa6 	bl	8015610 <sbrk_aligned>
 80156c4:	3001      	adds	r0, #1
 80156c6:	d03a      	beq.n	801573e <_malloc_r+0xea>
 80156c8:	6823      	ldr	r3, [r4, #0]
 80156ca:	442b      	add	r3, r5
 80156cc:	6023      	str	r3, [r4, #0]
 80156ce:	f8d8 3000 	ldr.w	r3, [r8]
 80156d2:	685a      	ldr	r2, [r3, #4]
 80156d4:	bb62      	cbnz	r2, 8015730 <_malloc_r+0xdc>
 80156d6:	f8c8 7000 	str.w	r7, [r8]
 80156da:	e00f      	b.n	80156fc <_malloc_r+0xa8>
 80156dc:	6822      	ldr	r2, [r4, #0]
 80156de:	1b52      	subs	r2, r2, r5
 80156e0:	d420      	bmi.n	8015724 <_malloc_r+0xd0>
 80156e2:	2a0b      	cmp	r2, #11
 80156e4:	d917      	bls.n	8015716 <_malloc_r+0xc2>
 80156e6:	1961      	adds	r1, r4, r5
 80156e8:	42a3      	cmp	r3, r4
 80156ea:	6025      	str	r5, [r4, #0]
 80156ec:	bf18      	it	ne
 80156ee:	6059      	strne	r1, [r3, #4]
 80156f0:	6863      	ldr	r3, [r4, #4]
 80156f2:	bf08      	it	eq
 80156f4:	f8c8 1000 	streq.w	r1, [r8]
 80156f8:	5162      	str	r2, [r4, r5]
 80156fa:	604b      	str	r3, [r1, #4]
 80156fc:	4630      	mov	r0, r6
 80156fe:	f000 f82f 	bl	8015760 <__malloc_unlock>
 8015702:	f104 000b 	add.w	r0, r4, #11
 8015706:	1d23      	adds	r3, r4, #4
 8015708:	f020 0007 	bic.w	r0, r0, #7
 801570c:	1ac2      	subs	r2, r0, r3
 801570e:	bf1c      	itt	ne
 8015710:	1a1b      	subne	r3, r3, r0
 8015712:	50a3      	strne	r3, [r4, r2]
 8015714:	e7af      	b.n	8015676 <_malloc_r+0x22>
 8015716:	6862      	ldr	r2, [r4, #4]
 8015718:	42a3      	cmp	r3, r4
 801571a:	bf0c      	ite	eq
 801571c:	f8c8 2000 	streq.w	r2, [r8]
 8015720:	605a      	strne	r2, [r3, #4]
 8015722:	e7eb      	b.n	80156fc <_malloc_r+0xa8>
 8015724:	4623      	mov	r3, r4
 8015726:	6864      	ldr	r4, [r4, #4]
 8015728:	e7ae      	b.n	8015688 <_malloc_r+0x34>
 801572a:	463c      	mov	r4, r7
 801572c:	687f      	ldr	r7, [r7, #4]
 801572e:	e7b6      	b.n	801569e <_malloc_r+0x4a>
 8015730:	461a      	mov	r2, r3
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	42a3      	cmp	r3, r4
 8015736:	d1fb      	bne.n	8015730 <_malloc_r+0xdc>
 8015738:	2300      	movs	r3, #0
 801573a:	6053      	str	r3, [r2, #4]
 801573c:	e7de      	b.n	80156fc <_malloc_r+0xa8>
 801573e:	230c      	movs	r3, #12
 8015740:	6033      	str	r3, [r6, #0]
 8015742:	4630      	mov	r0, r6
 8015744:	f000 f80c 	bl	8015760 <__malloc_unlock>
 8015748:	e794      	b.n	8015674 <_malloc_r+0x20>
 801574a:	6005      	str	r5, [r0, #0]
 801574c:	e7d6      	b.n	80156fc <_malloc_r+0xa8>
 801574e:	bf00      	nop
 8015750:	24001b30 	.word	0x24001b30

08015754 <__malloc_lock>:
 8015754:	4801      	ldr	r0, [pc, #4]	@ (801575c <__malloc_lock+0x8>)
 8015756:	f7ff b912 	b.w	801497e <__retarget_lock_acquire_recursive>
 801575a:	bf00      	nop
 801575c:	24001b28 	.word	0x24001b28

08015760 <__malloc_unlock>:
 8015760:	4801      	ldr	r0, [pc, #4]	@ (8015768 <__malloc_unlock+0x8>)
 8015762:	f7ff b90d 	b.w	8014980 <__retarget_lock_release_recursive>
 8015766:	bf00      	nop
 8015768:	24001b28 	.word	0x24001b28

0801576c <_Balloc>:
 801576c:	b570      	push	{r4, r5, r6, lr}
 801576e:	69c6      	ldr	r6, [r0, #28]
 8015770:	4604      	mov	r4, r0
 8015772:	460d      	mov	r5, r1
 8015774:	b976      	cbnz	r6, 8015794 <_Balloc+0x28>
 8015776:	2010      	movs	r0, #16
 8015778:	f7ff ff42 	bl	8015600 <malloc>
 801577c:	4602      	mov	r2, r0
 801577e:	61e0      	str	r0, [r4, #28]
 8015780:	b920      	cbnz	r0, 801578c <_Balloc+0x20>
 8015782:	4b18      	ldr	r3, [pc, #96]	@ (80157e4 <_Balloc+0x78>)
 8015784:	4818      	ldr	r0, [pc, #96]	@ (80157e8 <_Balloc+0x7c>)
 8015786:	216b      	movs	r1, #107	@ 0x6b
 8015788:	f001 fee2 	bl	8017550 <__assert_func>
 801578c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015790:	6006      	str	r6, [r0, #0]
 8015792:	60c6      	str	r6, [r0, #12]
 8015794:	69e6      	ldr	r6, [r4, #28]
 8015796:	68f3      	ldr	r3, [r6, #12]
 8015798:	b183      	cbz	r3, 80157bc <_Balloc+0x50>
 801579a:	69e3      	ldr	r3, [r4, #28]
 801579c:	68db      	ldr	r3, [r3, #12]
 801579e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80157a2:	b9b8      	cbnz	r0, 80157d4 <_Balloc+0x68>
 80157a4:	2101      	movs	r1, #1
 80157a6:	fa01 f605 	lsl.w	r6, r1, r5
 80157aa:	1d72      	adds	r2, r6, #5
 80157ac:	0092      	lsls	r2, r2, #2
 80157ae:	4620      	mov	r0, r4
 80157b0:	f001 feec 	bl	801758c <_calloc_r>
 80157b4:	b160      	cbz	r0, 80157d0 <_Balloc+0x64>
 80157b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80157ba:	e00e      	b.n	80157da <_Balloc+0x6e>
 80157bc:	2221      	movs	r2, #33	@ 0x21
 80157be:	2104      	movs	r1, #4
 80157c0:	4620      	mov	r0, r4
 80157c2:	f001 fee3 	bl	801758c <_calloc_r>
 80157c6:	69e3      	ldr	r3, [r4, #28]
 80157c8:	60f0      	str	r0, [r6, #12]
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d1e4      	bne.n	801579a <_Balloc+0x2e>
 80157d0:	2000      	movs	r0, #0
 80157d2:	bd70      	pop	{r4, r5, r6, pc}
 80157d4:	6802      	ldr	r2, [r0, #0]
 80157d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80157da:	2300      	movs	r3, #0
 80157dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80157e0:	e7f7      	b.n	80157d2 <_Balloc+0x66>
 80157e2:	bf00      	nop
 80157e4:	0801829e 	.word	0x0801829e
 80157e8:	0801831e 	.word	0x0801831e

080157ec <_Bfree>:
 80157ec:	b570      	push	{r4, r5, r6, lr}
 80157ee:	69c6      	ldr	r6, [r0, #28]
 80157f0:	4605      	mov	r5, r0
 80157f2:	460c      	mov	r4, r1
 80157f4:	b976      	cbnz	r6, 8015814 <_Bfree+0x28>
 80157f6:	2010      	movs	r0, #16
 80157f8:	f7ff ff02 	bl	8015600 <malloc>
 80157fc:	4602      	mov	r2, r0
 80157fe:	61e8      	str	r0, [r5, #28]
 8015800:	b920      	cbnz	r0, 801580c <_Bfree+0x20>
 8015802:	4b09      	ldr	r3, [pc, #36]	@ (8015828 <_Bfree+0x3c>)
 8015804:	4809      	ldr	r0, [pc, #36]	@ (801582c <_Bfree+0x40>)
 8015806:	218f      	movs	r1, #143	@ 0x8f
 8015808:	f001 fea2 	bl	8017550 <__assert_func>
 801580c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015810:	6006      	str	r6, [r0, #0]
 8015812:	60c6      	str	r6, [r0, #12]
 8015814:	b13c      	cbz	r4, 8015826 <_Bfree+0x3a>
 8015816:	69eb      	ldr	r3, [r5, #28]
 8015818:	6862      	ldr	r2, [r4, #4]
 801581a:	68db      	ldr	r3, [r3, #12]
 801581c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015820:	6021      	str	r1, [r4, #0]
 8015822:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015826:	bd70      	pop	{r4, r5, r6, pc}
 8015828:	0801829e 	.word	0x0801829e
 801582c:	0801831e 	.word	0x0801831e

08015830 <__multadd>:
 8015830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015834:	690d      	ldr	r5, [r1, #16]
 8015836:	4607      	mov	r7, r0
 8015838:	460c      	mov	r4, r1
 801583a:	461e      	mov	r6, r3
 801583c:	f101 0c14 	add.w	ip, r1, #20
 8015840:	2000      	movs	r0, #0
 8015842:	f8dc 3000 	ldr.w	r3, [ip]
 8015846:	b299      	uxth	r1, r3
 8015848:	fb02 6101 	mla	r1, r2, r1, r6
 801584c:	0c1e      	lsrs	r6, r3, #16
 801584e:	0c0b      	lsrs	r3, r1, #16
 8015850:	fb02 3306 	mla	r3, r2, r6, r3
 8015854:	b289      	uxth	r1, r1
 8015856:	3001      	adds	r0, #1
 8015858:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801585c:	4285      	cmp	r5, r0
 801585e:	f84c 1b04 	str.w	r1, [ip], #4
 8015862:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015866:	dcec      	bgt.n	8015842 <__multadd+0x12>
 8015868:	b30e      	cbz	r6, 80158ae <__multadd+0x7e>
 801586a:	68a3      	ldr	r3, [r4, #8]
 801586c:	42ab      	cmp	r3, r5
 801586e:	dc19      	bgt.n	80158a4 <__multadd+0x74>
 8015870:	6861      	ldr	r1, [r4, #4]
 8015872:	4638      	mov	r0, r7
 8015874:	3101      	adds	r1, #1
 8015876:	f7ff ff79 	bl	801576c <_Balloc>
 801587a:	4680      	mov	r8, r0
 801587c:	b928      	cbnz	r0, 801588a <__multadd+0x5a>
 801587e:	4602      	mov	r2, r0
 8015880:	4b0c      	ldr	r3, [pc, #48]	@ (80158b4 <__multadd+0x84>)
 8015882:	480d      	ldr	r0, [pc, #52]	@ (80158b8 <__multadd+0x88>)
 8015884:	21ba      	movs	r1, #186	@ 0xba
 8015886:	f001 fe63 	bl	8017550 <__assert_func>
 801588a:	6922      	ldr	r2, [r4, #16]
 801588c:	3202      	adds	r2, #2
 801588e:	f104 010c 	add.w	r1, r4, #12
 8015892:	0092      	lsls	r2, r2, #2
 8015894:	300c      	adds	r0, #12
 8015896:	f7ff f874 	bl	8014982 <memcpy>
 801589a:	4621      	mov	r1, r4
 801589c:	4638      	mov	r0, r7
 801589e:	f7ff ffa5 	bl	80157ec <_Bfree>
 80158a2:	4644      	mov	r4, r8
 80158a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80158a8:	3501      	adds	r5, #1
 80158aa:	615e      	str	r6, [r3, #20]
 80158ac:	6125      	str	r5, [r4, #16]
 80158ae:	4620      	mov	r0, r4
 80158b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158b4:	0801830d 	.word	0x0801830d
 80158b8:	0801831e 	.word	0x0801831e

080158bc <__s2b>:
 80158bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158c0:	460c      	mov	r4, r1
 80158c2:	4615      	mov	r5, r2
 80158c4:	461f      	mov	r7, r3
 80158c6:	2209      	movs	r2, #9
 80158c8:	3308      	adds	r3, #8
 80158ca:	4606      	mov	r6, r0
 80158cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80158d0:	2100      	movs	r1, #0
 80158d2:	2201      	movs	r2, #1
 80158d4:	429a      	cmp	r2, r3
 80158d6:	db09      	blt.n	80158ec <__s2b+0x30>
 80158d8:	4630      	mov	r0, r6
 80158da:	f7ff ff47 	bl	801576c <_Balloc>
 80158de:	b940      	cbnz	r0, 80158f2 <__s2b+0x36>
 80158e0:	4602      	mov	r2, r0
 80158e2:	4b19      	ldr	r3, [pc, #100]	@ (8015948 <__s2b+0x8c>)
 80158e4:	4819      	ldr	r0, [pc, #100]	@ (801594c <__s2b+0x90>)
 80158e6:	21d3      	movs	r1, #211	@ 0xd3
 80158e8:	f001 fe32 	bl	8017550 <__assert_func>
 80158ec:	0052      	lsls	r2, r2, #1
 80158ee:	3101      	adds	r1, #1
 80158f0:	e7f0      	b.n	80158d4 <__s2b+0x18>
 80158f2:	9b08      	ldr	r3, [sp, #32]
 80158f4:	6143      	str	r3, [r0, #20]
 80158f6:	2d09      	cmp	r5, #9
 80158f8:	f04f 0301 	mov.w	r3, #1
 80158fc:	6103      	str	r3, [r0, #16]
 80158fe:	dd16      	ble.n	801592e <__s2b+0x72>
 8015900:	f104 0909 	add.w	r9, r4, #9
 8015904:	46c8      	mov	r8, r9
 8015906:	442c      	add	r4, r5
 8015908:	f818 3b01 	ldrb.w	r3, [r8], #1
 801590c:	4601      	mov	r1, r0
 801590e:	3b30      	subs	r3, #48	@ 0x30
 8015910:	220a      	movs	r2, #10
 8015912:	4630      	mov	r0, r6
 8015914:	f7ff ff8c 	bl	8015830 <__multadd>
 8015918:	45a0      	cmp	r8, r4
 801591a:	d1f5      	bne.n	8015908 <__s2b+0x4c>
 801591c:	f1a5 0408 	sub.w	r4, r5, #8
 8015920:	444c      	add	r4, r9
 8015922:	1b2d      	subs	r5, r5, r4
 8015924:	1963      	adds	r3, r4, r5
 8015926:	42bb      	cmp	r3, r7
 8015928:	db04      	blt.n	8015934 <__s2b+0x78>
 801592a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801592e:	340a      	adds	r4, #10
 8015930:	2509      	movs	r5, #9
 8015932:	e7f6      	b.n	8015922 <__s2b+0x66>
 8015934:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015938:	4601      	mov	r1, r0
 801593a:	3b30      	subs	r3, #48	@ 0x30
 801593c:	220a      	movs	r2, #10
 801593e:	4630      	mov	r0, r6
 8015940:	f7ff ff76 	bl	8015830 <__multadd>
 8015944:	e7ee      	b.n	8015924 <__s2b+0x68>
 8015946:	bf00      	nop
 8015948:	0801830d 	.word	0x0801830d
 801594c:	0801831e 	.word	0x0801831e

08015950 <__hi0bits>:
 8015950:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015954:	4603      	mov	r3, r0
 8015956:	bf36      	itet	cc
 8015958:	0403      	lslcc	r3, r0, #16
 801595a:	2000      	movcs	r0, #0
 801595c:	2010      	movcc	r0, #16
 801595e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015962:	bf3c      	itt	cc
 8015964:	021b      	lslcc	r3, r3, #8
 8015966:	3008      	addcc	r0, #8
 8015968:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801596c:	bf3c      	itt	cc
 801596e:	011b      	lslcc	r3, r3, #4
 8015970:	3004      	addcc	r0, #4
 8015972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015976:	bf3c      	itt	cc
 8015978:	009b      	lslcc	r3, r3, #2
 801597a:	3002      	addcc	r0, #2
 801597c:	2b00      	cmp	r3, #0
 801597e:	db05      	blt.n	801598c <__hi0bits+0x3c>
 8015980:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015984:	f100 0001 	add.w	r0, r0, #1
 8015988:	bf08      	it	eq
 801598a:	2020      	moveq	r0, #32
 801598c:	4770      	bx	lr

0801598e <__lo0bits>:
 801598e:	6803      	ldr	r3, [r0, #0]
 8015990:	4602      	mov	r2, r0
 8015992:	f013 0007 	ands.w	r0, r3, #7
 8015996:	d00b      	beq.n	80159b0 <__lo0bits+0x22>
 8015998:	07d9      	lsls	r1, r3, #31
 801599a:	d421      	bmi.n	80159e0 <__lo0bits+0x52>
 801599c:	0798      	lsls	r0, r3, #30
 801599e:	bf49      	itett	mi
 80159a0:	085b      	lsrmi	r3, r3, #1
 80159a2:	089b      	lsrpl	r3, r3, #2
 80159a4:	2001      	movmi	r0, #1
 80159a6:	6013      	strmi	r3, [r2, #0]
 80159a8:	bf5c      	itt	pl
 80159aa:	6013      	strpl	r3, [r2, #0]
 80159ac:	2002      	movpl	r0, #2
 80159ae:	4770      	bx	lr
 80159b0:	b299      	uxth	r1, r3
 80159b2:	b909      	cbnz	r1, 80159b8 <__lo0bits+0x2a>
 80159b4:	0c1b      	lsrs	r3, r3, #16
 80159b6:	2010      	movs	r0, #16
 80159b8:	b2d9      	uxtb	r1, r3
 80159ba:	b909      	cbnz	r1, 80159c0 <__lo0bits+0x32>
 80159bc:	3008      	adds	r0, #8
 80159be:	0a1b      	lsrs	r3, r3, #8
 80159c0:	0719      	lsls	r1, r3, #28
 80159c2:	bf04      	itt	eq
 80159c4:	091b      	lsreq	r3, r3, #4
 80159c6:	3004      	addeq	r0, #4
 80159c8:	0799      	lsls	r1, r3, #30
 80159ca:	bf04      	itt	eq
 80159cc:	089b      	lsreq	r3, r3, #2
 80159ce:	3002      	addeq	r0, #2
 80159d0:	07d9      	lsls	r1, r3, #31
 80159d2:	d403      	bmi.n	80159dc <__lo0bits+0x4e>
 80159d4:	085b      	lsrs	r3, r3, #1
 80159d6:	f100 0001 	add.w	r0, r0, #1
 80159da:	d003      	beq.n	80159e4 <__lo0bits+0x56>
 80159dc:	6013      	str	r3, [r2, #0]
 80159de:	4770      	bx	lr
 80159e0:	2000      	movs	r0, #0
 80159e2:	4770      	bx	lr
 80159e4:	2020      	movs	r0, #32
 80159e6:	4770      	bx	lr

080159e8 <__i2b>:
 80159e8:	b510      	push	{r4, lr}
 80159ea:	460c      	mov	r4, r1
 80159ec:	2101      	movs	r1, #1
 80159ee:	f7ff febd 	bl	801576c <_Balloc>
 80159f2:	4602      	mov	r2, r0
 80159f4:	b928      	cbnz	r0, 8015a02 <__i2b+0x1a>
 80159f6:	4b05      	ldr	r3, [pc, #20]	@ (8015a0c <__i2b+0x24>)
 80159f8:	4805      	ldr	r0, [pc, #20]	@ (8015a10 <__i2b+0x28>)
 80159fa:	f240 1145 	movw	r1, #325	@ 0x145
 80159fe:	f001 fda7 	bl	8017550 <__assert_func>
 8015a02:	2301      	movs	r3, #1
 8015a04:	6144      	str	r4, [r0, #20]
 8015a06:	6103      	str	r3, [r0, #16]
 8015a08:	bd10      	pop	{r4, pc}
 8015a0a:	bf00      	nop
 8015a0c:	0801830d 	.word	0x0801830d
 8015a10:	0801831e 	.word	0x0801831e

08015a14 <__multiply>:
 8015a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a18:	4614      	mov	r4, r2
 8015a1a:	690a      	ldr	r2, [r1, #16]
 8015a1c:	6923      	ldr	r3, [r4, #16]
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	bfa8      	it	ge
 8015a22:	4623      	movge	r3, r4
 8015a24:	460f      	mov	r7, r1
 8015a26:	bfa4      	itt	ge
 8015a28:	460c      	movge	r4, r1
 8015a2a:	461f      	movge	r7, r3
 8015a2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015a30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015a34:	68a3      	ldr	r3, [r4, #8]
 8015a36:	6861      	ldr	r1, [r4, #4]
 8015a38:	eb0a 0609 	add.w	r6, sl, r9
 8015a3c:	42b3      	cmp	r3, r6
 8015a3e:	b085      	sub	sp, #20
 8015a40:	bfb8      	it	lt
 8015a42:	3101      	addlt	r1, #1
 8015a44:	f7ff fe92 	bl	801576c <_Balloc>
 8015a48:	b930      	cbnz	r0, 8015a58 <__multiply+0x44>
 8015a4a:	4602      	mov	r2, r0
 8015a4c:	4b44      	ldr	r3, [pc, #272]	@ (8015b60 <__multiply+0x14c>)
 8015a4e:	4845      	ldr	r0, [pc, #276]	@ (8015b64 <__multiply+0x150>)
 8015a50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015a54:	f001 fd7c 	bl	8017550 <__assert_func>
 8015a58:	f100 0514 	add.w	r5, r0, #20
 8015a5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015a60:	462b      	mov	r3, r5
 8015a62:	2200      	movs	r2, #0
 8015a64:	4543      	cmp	r3, r8
 8015a66:	d321      	bcc.n	8015aac <__multiply+0x98>
 8015a68:	f107 0114 	add.w	r1, r7, #20
 8015a6c:	f104 0214 	add.w	r2, r4, #20
 8015a70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015a74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015a78:	9302      	str	r3, [sp, #8]
 8015a7a:	1b13      	subs	r3, r2, r4
 8015a7c:	3b15      	subs	r3, #21
 8015a7e:	f023 0303 	bic.w	r3, r3, #3
 8015a82:	3304      	adds	r3, #4
 8015a84:	f104 0715 	add.w	r7, r4, #21
 8015a88:	42ba      	cmp	r2, r7
 8015a8a:	bf38      	it	cc
 8015a8c:	2304      	movcc	r3, #4
 8015a8e:	9301      	str	r3, [sp, #4]
 8015a90:	9b02      	ldr	r3, [sp, #8]
 8015a92:	9103      	str	r1, [sp, #12]
 8015a94:	428b      	cmp	r3, r1
 8015a96:	d80c      	bhi.n	8015ab2 <__multiply+0x9e>
 8015a98:	2e00      	cmp	r6, #0
 8015a9a:	dd03      	ble.n	8015aa4 <__multiply+0x90>
 8015a9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d05b      	beq.n	8015b5c <__multiply+0x148>
 8015aa4:	6106      	str	r6, [r0, #16]
 8015aa6:	b005      	add	sp, #20
 8015aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aac:	f843 2b04 	str.w	r2, [r3], #4
 8015ab0:	e7d8      	b.n	8015a64 <__multiply+0x50>
 8015ab2:	f8b1 a000 	ldrh.w	sl, [r1]
 8015ab6:	f1ba 0f00 	cmp.w	sl, #0
 8015aba:	d024      	beq.n	8015b06 <__multiply+0xf2>
 8015abc:	f104 0e14 	add.w	lr, r4, #20
 8015ac0:	46a9      	mov	r9, r5
 8015ac2:	f04f 0c00 	mov.w	ip, #0
 8015ac6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015aca:	f8d9 3000 	ldr.w	r3, [r9]
 8015ace:	fa1f fb87 	uxth.w	fp, r7
 8015ad2:	b29b      	uxth	r3, r3
 8015ad4:	fb0a 330b 	mla	r3, sl, fp, r3
 8015ad8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015adc:	f8d9 7000 	ldr.w	r7, [r9]
 8015ae0:	4463      	add	r3, ip
 8015ae2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015ae6:	fb0a c70b 	mla	r7, sl, fp, ip
 8015aea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015aee:	b29b      	uxth	r3, r3
 8015af0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015af4:	4572      	cmp	r2, lr
 8015af6:	f849 3b04 	str.w	r3, [r9], #4
 8015afa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015afe:	d8e2      	bhi.n	8015ac6 <__multiply+0xb2>
 8015b00:	9b01      	ldr	r3, [sp, #4]
 8015b02:	f845 c003 	str.w	ip, [r5, r3]
 8015b06:	9b03      	ldr	r3, [sp, #12]
 8015b08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015b0c:	3104      	adds	r1, #4
 8015b0e:	f1b9 0f00 	cmp.w	r9, #0
 8015b12:	d021      	beq.n	8015b58 <__multiply+0x144>
 8015b14:	682b      	ldr	r3, [r5, #0]
 8015b16:	f104 0c14 	add.w	ip, r4, #20
 8015b1a:	46ae      	mov	lr, r5
 8015b1c:	f04f 0a00 	mov.w	sl, #0
 8015b20:	f8bc b000 	ldrh.w	fp, [ip]
 8015b24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015b28:	fb09 770b 	mla	r7, r9, fp, r7
 8015b2c:	4457      	add	r7, sl
 8015b2e:	b29b      	uxth	r3, r3
 8015b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015b34:	f84e 3b04 	str.w	r3, [lr], #4
 8015b38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015b40:	f8be 3000 	ldrh.w	r3, [lr]
 8015b44:	fb09 330a 	mla	r3, r9, sl, r3
 8015b48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015b4c:	4562      	cmp	r2, ip
 8015b4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015b52:	d8e5      	bhi.n	8015b20 <__multiply+0x10c>
 8015b54:	9f01      	ldr	r7, [sp, #4]
 8015b56:	51eb      	str	r3, [r5, r7]
 8015b58:	3504      	adds	r5, #4
 8015b5a:	e799      	b.n	8015a90 <__multiply+0x7c>
 8015b5c:	3e01      	subs	r6, #1
 8015b5e:	e79b      	b.n	8015a98 <__multiply+0x84>
 8015b60:	0801830d 	.word	0x0801830d
 8015b64:	0801831e 	.word	0x0801831e

08015b68 <__pow5mult>:
 8015b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b6c:	4615      	mov	r5, r2
 8015b6e:	f012 0203 	ands.w	r2, r2, #3
 8015b72:	4607      	mov	r7, r0
 8015b74:	460e      	mov	r6, r1
 8015b76:	d007      	beq.n	8015b88 <__pow5mult+0x20>
 8015b78:	4c25      	ldr	r4, [pc, #148]	@ (8015c10 <__pow5mult+0xa8>)
 8015b7a:	3a01      	subs	r2, #1
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015b82:	f7ff fe55 	bl	8015830 <__multadd>
 8015b86:	4606      	mov	r6, r0
 8015b88:	10ad      	asrs	r5, r5, #2
 8015b8a:	d03d      	beq.n	8015c08 <__pow5mult+0xa0>
 8015b8c:	69fc      	ldr	r4, [r7, #28]
 8015b8e:	b97c      	cbnz	r4, 8015bb0 <__pow5mult+0x48>
 8015b90:	2010      	movs	r0, #16
 8015b92:	f7ff fd35 	bl	8015600 <malloc>
 8015b96:	4602      	mov	r2, r0
 8015b98:	61f8      	str	r0, [r7, #28]
 8015b9a:	b928      	cbnz	r0, 8015ba8 <__pow5mult+0x40>
 8015b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8015c14 <__pow5mult+0xac>)
 8015b9e:	481e      	ldr	r0, [pc, #120]	@ (8015c18 <__pow5mult+0xb0>)
 8015ba0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015ba4:	f001 fcd4 	bl	8017550 <__assert_func>
 8015ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015bac:	6004      	str	r4, [r0, #0]
 8015bae:	60c4      	str	r4, [r0, #12]
 8015bb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015bb8:	b94c      	cbnz	r4, 8015bce <__pow5mult+0x66>
 8015bba:	f240 2171 	movw	r1, #625	@ 0x271
 8015bbe:	4638      	mov	r0, r7
 8015bc0:	f7ff ff12 	bl	80159e8 <__i2b>
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8015bca:	4604      	mov	r4, r0
 8015bcc:	6003      	str	r3, [r0, #0]
 8015bce:	f04f 0900 	mov.w	r9, #0
 8015bd2:	07eb      	lsls	r3, r5, #31
 8015bd4:	d50a      	bpl.n	8015bec <__pow5mult+0x84>
 8015bd6:	4631      	mov	r1, r6
 8015bd8:	4622      	mov	r2, r4
 8015bda:	4638      	mov	r0, r7
 8015bdc:	f7ff ff1a 	bl	8015a14 <__multiply>
 8015be0:	4631      	mov	r1, r6
 8015be2:	4680      	mov	r8, r0
 8015be4:	4638      	mov	r0, r7
 8015be6:	f7ff fe01 	bl	80157ec <_Bfree>
 8015bea:	4646      	mov	r6, r8
 8015bec:	106d      	asrs	r5, r5, #1
 8015bee:	d00b      	beq.n	8015c08 <__pow5mult+0xa0>
 8015bf0:	6820      	ldr	r0, [r4, #0]
 8015bf2:	b938      	cbnz	r0, 8015c04 <__pow5mult+0x9c>
 8015bf4:	4622      	mov	r2, r4
 8015bf6:	4621      	mov	r1, r4
 8015bf8:	4638      	mov	r0, r7
 8015bfa:	f7ff ff0b 	bl	8015a14 <__multiply>
 8015bfe:	6020      	str	r0, [r4, #0]
 8015c00:	f8c0 9000 	str.w	r9, [r0]
 8015c04:	4604      	mov	r4, r0
 8015c06:	e7e4      	b.n	8015bd2 <__pow5mult+0x6a>
 8015c08:	4630      	mov	r0, r6
 8015c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c0e:	bf00      	nop
 8015c10:	08018378 	.word	0x08018378
 8015c14:	0801829e 	.word	0x0801829e
 8015c18:	0801831e 	.word	0x0801831e

08015c1c <__lshift>:
 8015c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c20:	460c      	mov	r4, r1
 8015c22:	6849      	ldr	r1, [r1, #4]
 8015c24:	6923      	ldr	r3, [r4, #16]
 8015c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015c2a:	68a3      	ldr	r3, [r4, #8]
 8015c2c:	4607      	mov	r7, r0
 8015c2e:	4691      	mov	r9, r2
 8015c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015c34:	f108 0601 	add.w	r6, r8, #1
 8015c38:	42b3      	cmp	r3, r6
 8015c3a:	db0b      	blt.n	8015c54 <__lshift+0x38>
 8015c3c:	4638      	mov	r0, r7
 8015c3e:	f7ff fd95 	bl	801576c <_Balloc>
 8015c42:	4605      	mov	r5, r0
 8015c44:	b948      	cbnz	r0, 8015c5a <__lshift+0x3e>
 8015c46:	4602      	mov	r2, r0
 8015c48:	4b28      	ldr	r3, [pc, #160]	@ (8015cec <__lshift+0xd0>)
 8015c4a:	4829      	ldr	r0, [pc, #164]	@ (8015cf0 <__lshift+0xd4>)
 8015c4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015c50:	f001 fc7e 	bl	8017550 <__assert_func>
 8015c54:	3101      	adds	r1, #1
 8015c56:	005b      	lsls	r3, r3, #1
 8015c58:	e7ee      	b.n	8015c38 <__lshift+0x1c>
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	f100 0114 	add.w	r1, r0, #20
 8015c60:	f100 0210 	add.w	r2, r0, #16
 8015c64:	4618      	mov	r0, r3
 8015c66:	4553      	cmp	r3, sl
 8015c68:	db33      	blt.n	8015cd2 <__lshift+0xb6>
 8015c6a:	6920      	ldr	r0, [r4, #16]
 8015c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c70:	f104 0314 	add.w	r3, r4, #20
 8015c74:	f019 091f 	ands.w	r9, r9, #31
 8015c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015c80:	d02b      	beq.n	8015cda <__lshift+0xbe>
 8015c82:	f1c9 0e20 	rsb	lr, r9, #32
 8015c86:	468a      	mov	sl, r1
 8015c88:	2200      	movs	r2, #0
 8015c8a:	6818      	ldr	r0, [r3, #0]
 8015c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8015c90:	4310      	orrs	r0, r2
 8015c92:	f84a 0b04 	str.w	r0, [sl], #4
 8015c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c9a:	459c      	cmp	ip, r3
 8015c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015ca0:	d8f3      	bhi.n	8015c8a <__lshift+0x6e>
 8015ca2:	ebac 0304 	sub.w	r3, ip, r4
 8015ca6:	3b15      	subs	r3, #21
 8015ca8:	f023 0303 	bic.w	r3, r3, #3
 8015cac:	3304      	adds	r3, #4
 8015cae:	f104 0015 	add.w	r0, r4, #21
 8015cb2:	4584      	cmp	ip, r0
 8015cb4:	bf38      	it	cc
 8015cb6:	2304      	movcc	r3, #4
 8015cb8:	50ca      	str	r2, [r1, r3]
 8015cba:	b10a      	cbz	r2, 8015cc0 <__lshift+0xa4>
 8015cbc:	f108 0602 	add.w	r6, r8, #2
 8015cc0:	3e01      	subs	r6, #1
 8015cc2:	4638      	mov	r0, r7
 8015cc4:	612e      	str	r6, [r5, #16]
 8015cc6:	4621      	mov	r1, r4
 8015cc8:	f7ff fd90 	bl	80157ec <_Bfree>
 8015ccc:	4628      	mov	r0, r5
 8015cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8015cd6:	3301      	adds	r3, #1
 8015cd8:	e7c5      	b.n	8015c66 <__lshift+0x4a>
 8015cda:	3904      	subs	r1, #4
 8015cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ce0:	f841 2f04 	str.w	r2, [r1, #4]!
 8015ce4:	459c      	cmp	ip, r3
 8015ce6:	d8f9      	bhi.n	8015cdc <__lshift+0xc0>
 8015ce8:	e7ea      	b.n	8015cc0 <__lshift+0xa4>
 8015cea:	bf00      	nop
 8015cec:	0801830d 	.word	0x0801830d
 8015cf0:	0801831e 	.word	0x0801831e

08015cf4 <__mcmp>:
 8015cf4:	690a      	ldr	r2, [r1, #16]
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	6900      	ldr	r0, [r0, #16]
 8015cfa:	1a80      	subs	r0, r0, r2
 8015cfc:	b530      	push	{r4, r5, lr}
 8015cfe:	d10e      	bne.n	8015d1e <__mcmp+0x2a>
 8015d00:	3314      	adds	r3, #20
 8015d02:	3114      	adds	r1, #20
 8015d04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015d08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015d0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015d10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015d14:	4295      	cmp	r5, r2
 8015d16:	d003      	beq.n	8015d20 <__mcmp+0x2c>
 8015d18:	d205      	bcs.n	8015d26 <__mcmp+0x32>
 8015d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015d1e:	bd30      	pop	{r4, r5, pc}
 8015d20:	42a3      	cmp	r3, r4
 8015d22:	d3f3      	bcc.n	8015d0c <__mcmp+0x18>
 8015d24:	e7fb      	b.n	8015d1e <__mcmp+0x2a>
 8015d26:	2001      	movs	r0, #1
 8015d28:	e7f9      	b.n	8015d1e <__mcmp+0x2a>
	...

08015d2c <__mdiff>:
 8015d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d30:	4689      	mov	r9, r1
 8015d32:	4606      	mov	r6, r0
 8015d34:	4611      	mov	r1, r2
 8015d36:	4648      	mov	r0, r9
 8015d38:	4614      	mov	r4, r2
 8015d3a:	f7ff ffdb 	bl	8015cf4 <__mcmp>
 8015d3e:	1e05      	subs	r5, r0, #0
 8015d40:	d112      	bne.n	8015d68 <__mdiff+0x3c>
 8015d42:	4629      	mov	r1, r5
 8015d44:	4630      	mov	r0, r6
 8015d46:	f7ff fd11 	bl	801576c <_Balloc>
 8015d4a:	4602      	mov	r2, r0
 8015d4c:	b928      	cbnz	r0, 8015d5a <__mdiff+0x2e>
 8015d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8015e4c <__mdiff+0x120>)
 8015d50:	f240 2137 	movw	r1, #567	@ 0x237
 8015d54:	483e      	ldr	r0, [pc, #248]	@ (8015e50 <__mdiff+0x124>)
 8015d56:	f001 fbfb 	bl	8017550 <__assert_func>
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015d60:	4610      	mov	r0, r2
 8015d62:	b003      	add	sp, #12
 8015d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d68:	bfbc      	itt	lt
 8015d6a:	464b      	movlt	r3, r9
 8015d6c:	46a1      	movlt	r9, r4
 8015d6e:	4630      	mov	r0, r6
 8015d70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015d74:	bfba      	itte	lt
 8015d76:	461c      	movlt	r4, r3
 8015d78:	2501      	movlt	r5, #1
 8015d7a:	2500      	movge	r5, #0
 8015d7c:	f7ff fcf6 	bl	801576c <_Balloc>
 8015d80:	4602      	mov	r2, r0
 8015d82:	b918      	cbnz	r0, 8015d8c <__mdiff+0x60>
 8015d84:	4b31      	ldr	r3, [pc, #196]	@ (8015e4c <__mdiff+0x120>)
 8015d86:	f240 2145 	movw	r1, #581	@ 0x245
 8015d8a:	e7e3      	b.n	8015d54 <__mdiff+0x28>
 8015d8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015d90:	6926      	ldr	r6, [r4, #16]
 8015d92:	60c5      	str	r5, [r0, #12]
 8015d94:	f109 0310 	add.w	r3, r9, #16
 8015d98:	f109 0514 	add.w	r5, r9, #20
 8015d9c:	f104 0e14 	add.w	lr, r4, #20
 8015da0:	f100 0b14 	add.w	fp, r0, #20
 8015da4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015da8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015dac:	9301      	str	r3, [sp, #4]
 8015dae:	46d9      	mov	r9, fp
 8015db0:	f04f 0c00 	mov.w	ip, #0
 8015db4:	9b01      	ldr	r3, [sp, #4]
 8015db6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015dba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015dbe:	9301      	str	r3, [sp, #4]
 8015dc0:	fa1f f38a 	uxth.w	r3, sl
 8015dc4:	4619      	mov	r1, r3
 8015dc6:	b283      	uxth	r3, r0
 8015dc8:	1acb      	subs	r3, r1, r3
 8015dca:	0c00      	lsrs	r0, r0, #16
 8015dcc:	4463      	add	r3, ip
 8015dce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015dd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015dd6:	b29b      	uxth	r3, r3
 8015dd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015ddc:	4576      	cmp	r6, lr
 8015dde:	f849 3b04 	str.w	r3, [r9], #4
 8015de2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015de6:	d8e5      	bhi.n	8015db4 <__mdiff+0x88>
 8015de8:	1b33      	subs	r3, r6, r4
 8015dea:	3b15      	subs	r3, #21
 8015dec:	f023 0303 	bic.w	r3, r3, #3
 8015df0:	3415      	adds	r4, #21
 8015df2:	3304      	adds	r3, #4
 8015df4:	42a6      	cmp	r6, r4
 8015df6:	bf38      	it	cc
 8015df8:	2304      	movcc	r3, #4
 8015dfa:	441d      	add	r5, r3
 8015dfc:	445b      	add	r3, fp
 8015dfe:	461e      	mov	r6, r3
 8015e00:	462c      	mov	r4, r5
 8015e02:	4544      	cmp	r4, r8
 8015e04:	d30e      	bcc.n	8015e24 <__mdiff+0xf8>
 8015e06:	f108 0103 	add.w	r1, r8, #3
 8015e0a:	1b49      	subs	r1, r1, r5
 8015e0c:	f021 0103 	bic.w	r1, r1, #3
 8015e10:	3d03      	subs	r5, #3
 8015e12:	45a8      	cmp	r8, r5
 8015e14:	bf38      	it	cc
 8015e16:	2100      	movcc	r1, #0
 8015e18:	440b      	add	r3, r1
 8015e1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015e1e:	b191      	cbz	r1, 8015e46 <__mdiff+0x11a>
 8015e20:	6117      	str	r7, [r2, #16]
 8015e22:	e79d      	b.n	8015d60 <__mdiff+0x34>
 8015e24:	f854 1b04 	ldr.w	r1, [r4], #4
 8015e28:	46e6      	mov	lr, ip
 8015e2a:	0c08      	lsrs	r0, r1, #16
 8015e2c:	fa1c fc81 	uxtah	ip, ip, r1
 8015e30:	4471      	add	r1, lr
 8015e32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015e36:	b289      	uxth	r1, r1
 8015e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015e3c:	f846 1b04 	str.w	r1, [r6], #4
 8015e40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015e44:	e7dd      	b.n	8015e02 <__mdiff+0xd6>
 8015e46:	3f01      	subs	r7, #1
 8015e48:	e7e7      	b.n	8015e1a <__mdiff+0xee>
 8015e4a:	bf00      	nop
 8015e4c:	0801830d 	.word	0x0801830d
 8015e50:	0801831e 	.word	0x0801831e

08015e54 <__ulp>:
 8015e54:	b082      	sub	sp, #8
 8015e56:	ed8d 0b00 	vstr	d0, [sp]
 8015e5a:	9a01      	ldr	r2, [sp, #4]
 8015e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8015e9c <__ulp+0x48>)
 8015e5e:	4013      	ands	r3, r2
 8015e60:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	dc08      	bgt.n	8015e7a <__ulp+0x26>
 8015e68:	425b      	negs	r3, r3
 8015e6a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8015e6e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015e72:	da04      	bge.n	8015e7e <__ulp+0x2a>
 8015e74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015e78:	4113      	asrs	r3, r2
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	e008      	b.n	8015e90 <__ulp+0x3c>
 8015e7e:	f1a2 0314 	sub.w	r3, r2, #20
 8015e82:	2b1e      	cmp	r3, #30
 8015e84:	bfda      	itte	le
 8015e86:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8015e8a:	40da      	lsrle	r2, r3
 8015e8c:	2201      	movgt	r2, #1
 8015e8e:	2300      	movs	r3, #0
 8015e90:	4619      	mov	r1, r3
 8015e92:	4610      	mov	r0, r2
 8015e94:	ec41 0b10 	vmov	d0, r0, r1
 8015e98:	b002      	add	sp, #8
 8015e9a:	4770      	bx	lr
 8015e9c:	7ff00000 	.word	0x7ff00000

08015ea0 <__b2d>:
 8015ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ea4:	6906      	ldr	r6, [r0, #16]
 8015ea6:	f100 0814 	add.w	r8, r0, #20
 8015eaa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015eae:	1f37      	subs	r7, r6, #4
 8015eb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015eb4:	4610      	mov	r0, r2
 8015eb6:	f7ff fd4b 	bl	8015950 <__hi0bits>
 8015eba:	f1c0 0320 	rsb	r3, r0, #32
 8015ebe:	280a      	cmp	r0, #10
 8015ec0:	600b      	str	r3, [r1, #0]
 8015ec2:	491b      	ldr	r1, [pc, #108]	@ (8015f30 <__b2d+0x90>)
 8015ec4:	dc15      	bgt.n	8015ef2 <__b2d+0x52>
 8015ec6:	f1c0 0c0b 	rsb	ip, r0, #11
 8015eca:	fa22 f30c 	lsr.w	r3, r2, ip
 8015ece:	45b8      	cmp	r8, r7
 8015ed0:	ea43 0501 	orr.w	r5, r3, r1
 8015ed4:	bf34      	ite	cc
 8015ed6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015eda:	2300      	movcs	r3, #0
 8015edc:	3015      	adds	r0, #21
 8015ede:	fa02 f000 	lsl.w	r0, r2, r0
 8015ee2:	fa23 f30c 	lsr.w	r3, r3, ip
 8015ee6:	4303      	orrs	r3, r0
 8015ee8:	461c      	mov	r4, r3
 8015eea:	ec45 4b10 	vmov	d0, r4, r5
 8015eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ef2:	45b8      	cmp	r8, r7
 8015ef4:	bf3a      	itte	cc
 8015ef6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015efa:	f1a6 0708 	subcc.w	r7, r6, #8
 8015efe:	2300      	movcs	r3, #0
 8015f00:	380b      	subs	r0, #11
 8015f02:	d012      	beq.n	8015f2a <__b2d+0x8a>
 8015f04:	f1c0 0120 	rsb	r1, r0, #32
 8015f08:	fa23 f401 	lsr.w	r4, r3, r1
 8015f0c:	4082      	lsls	r2, r0
 8015f0e:	4322      	orrs	r2, r4
 8015f10:	4547      	cmp	r7, r8
 8015f12:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8015f16:	bf8c      	ite	hi
 8015f18:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015f1c:	2200      	movls	r2, #0
 8015f1e:	4083      	lsls	r3, r0
 8015f20:	40ca      	lsrs	r2, r1
 8015f22:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015f26:	4313      	orrs	r3, r2
 8015f28:	e7de      	b.n	8015ee8 <__b2d+0x48>
 8015f2a:	ea42 0501 	orr.w	r5, r2, r1
 8015f2e:	e7db      	b.n	8015ee8 <__b2d+0x48>
 8015f30:	3ff00000 	.word	0x3ff00000

08015f34 <__d2b>:
 8015f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f38:	460f      	mov	r7, r1
 8015f3a:	2101      	movs	r1, #1
 8015f3c:	ec59 8b10 	vmov	r8, r9, d0
 8015f40:	4616      	mov	r6, r2
 8015f42:	f7ff fc13 	bl	801576c <_Balloc>
 8015f46:	4604      	mov	r4, r0
 8015f48:	b930      	cbnz	r0, 8015f58 <__d2b+0x24>
 8015f4a:	4602      	mov	r2, r0
 8015f4c:	4b23      	ldr	r3, [pc, #140]	@ (8015fdc <__d2b+0xa8>)
 8015f4e:	4824      	ldr	r0, [pc, #144]	@ (8015fe0 <__d2b+0xac>)
 8015f50:	f240 310f 	movw	r1, #783	@ 0x30f
 8015f54:	f001 fafc 	bl	8017550 <__assert_func>
 8015f58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015f5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015f60:	b10d      	cbz	r5, 8015f66 <__d2b+0x32>
 8015f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015f66:	9301      	str	r3, [sp, #4]
 8015f68:	f1b8 0300 	subs.w	r3, r8, #0
 8015f6c:	d023      	beq.n	8015fb6 <__d2b+0x82>
 8015f6e:	4668      	mov	r0, sp
 8015f70:	9300      	str	r3, [sp, #0]
 8015f72:	f7ff fd0c 	bl	801598e <__lo0bits>
 8015f76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015f7a:	b1d0      	cbz	r0, 8015fb2 <__d2b+0x7e>
 8015f7c:	f1c0 0320 	rsb	r3, r0, #32
 8015f80:	fa02 f303 	lsl.w	r3, r2, r3
 8015f84:	430b      	orrs	r3, r1
 8015f86:	40c2      	lsrs	r2, r0
 8015f88:	6163      	str	r3, [r4, #20]
 8015f8a:	9201      	str	r2, [sp, #4]
 8015f8c:	9b01      	ldr	r3, [sp, #4]
 8015f8e:	61a3      	str	r3, [r4, #24]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	bf0c      	ite	eq
 8015f94:	2201      	moveq	r2, #1
 8015f96:	2202      	movne	r2, #2
 8015f98:	6122      	str	r2, [r4, #16]
 8015f9a:	b1a5      	cbz	r5, 8015fc6 <__d2b+0x92>
 8015f9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015fa0:	4405      	add	r5, r0
 8015fa2:	603d      	str	r5, [r7, #0]
 8015fa4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015fa8:	6030      	str	r0, [r6, #0]
 8015faa:	4620      	mov	r0, r4
 8015fac:	b003      	add	sp, #12
 8015fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fb2:	6161      	str	r1, [r4, #20]
 8015fb4:	e7ea      	b.n	8015f8c <__d2b+0x58>
 8015fb6:	a801      	add	r0, sp, #4
 8015fb8:	f7ff fce9 	bl	801598e <__lo0bits>
 8015fbc:	9b01      	ldr	r3, [sp, #4]
 8015fbe:	6163      	str	r3, [r4, #20]
 8015fc0:	3020      	adds	r0, #32
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	e7e8      	b.n	8015f98 <__d2b+0x64>
 8015fc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015fca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015fce:	6038      	str	r0, [r7, #0]
 8015fd0:	6918      	ldr	r0, [r3, #16]
 8015fd2:	f7ff fcbd 	bl	8015950 <__hi0bits>
 8015fd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015fda:	e7e5      	b.n	8015fa8 <__d2b+0x74>
 8015fdc:	0801830d 	.word	0x0801830d
 8015fe0:	0801831e 	.word	0x0801831e

08015fe4 <__ratio>:
 8015fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe8:	4688      	mov	r8, r1
 8015fea:	4669      	mov	r1, sp
 8015fec:	4681      	mov	r9, r0
 8015fee:	f7ff ff57 	bl	8015ea0 <__b2d>
 8015ff2:	a901      	add	r1, sp, #4
 8015ff4:	4640      	mov	r0, r8
 8015ff6:	ec55 4b10 	vmov	r4, r5, d0
 8015ffa:	f7ff ff51 	bl	8015ea0 <__b2d>
 8015ffe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016002:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016006:	1ad2      	subs	r2, r2, r3
 8016008:	e9dd 3100 	ldrd	r3, r1, [sp]
 801600c:	1a5b      	subs	r3, r3, r1
 801600e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8016012:	ec57 6b10 	vmov	r6, r7, d0
 8016016:	2b00      	cmp	r3, #0
 8016018:	bfd6      	itet	le
 801601a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801601e:	462a      	movgt	r2, r5
 8016020:	463a      	movle	r2, r7
 8016022:	46ab      	mov	fp, r5
 8016024:	46a2      	mov	sl, r4
 8016026:	bfce      	itee	gt
 8016028:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801602c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016030:	ee00 3a90 	vmovle	s1, r3
 8016034:	ec4b ab17 	vmov	d7, sl, fp
 8016038:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801603c:	b003      	add	sp, #12
 801603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016042 <__copybits>:
 8016042:	3901      	subs	r1, #1
 8016044:	b570      	push	{r4, r5, r6, lr}
 8016046:	1149      	asrs	r1, r1, #5
 8016048:	6914      	ldr	r4, [r2, #16]
 801604a:	3101      	adds	r1, #1
 801604c:	f102 0314 	add.w	r3, r2, #20
 8016050:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016054:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016058:	1f05      	subs	r5, r0, #4
 801605a:	42a3      	cmp	r3, r4
 801605c:	d30c      	bcc.n	8016078 <__copybits+0x36>
 801605e:	1aa3      	subs	r3, r4, r2
 8016060:	3b11      	subs	r3, #17
 8016062:	f023 0303 	bic.w	r3, r3, #3
 8016066:	3211      	adds	r2, #17
 8016068:	42a2      	cmp	r2, r4
 801606a:	bf88      	it	hi
 801606c:	2300      	movhi	r3, #0
 801606e:	4418      	add	r0, r3
 8016070:	2300      	movs	r3, #0
 8016072:	4288      	cmp	r0, r1
 8016074:	d305      	bcc.n	8016082 <__copybits+0x40>
 8016076:	bd70      	pop	{r4, r5, r6, pc}
 8016078:	f853 6b04 	ldr.w	r6, [r3], #4
 801607c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016080:	e7eb      	b.n	801605a <__copybits+0x18>
 8016082:	f840 3b04 	str.w	r3, [r0], #4
 8016086:	e7f4      	b.n	8016072 <__copybits+0x30>

08016088 <__any_on>:
 8016088:	f100 0214 	add.w	r2, r0, #20
 801608c:	6900      	ldr	r0, [r0, #16]
 801608e:	114b      	asrs	r3, r1, #5
 8016090:	4298      	cmp	r0, r3
 8016092:	b510      	push	{r4, lr}
 8016094:	db11      	blt.n	80160ba <__any_on+0x32>
 8016096:	dd0a      	ble.n	80160ae <__any_on+0x26>
 8016098:	f011 011f 	ands.w	r1, r1, #31
 801609c:	d007      	beq.n	80160ae <__any_on+0x26>
 801609e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80160a2:	fa24 f001 	lsr.w	r0, r4, r1
 80160a6:	fa00 f101 	lsl.w	r1, r0, r1
 80160aa:	428c      	cmp	r4, r1
 80160ac:	d10b      	bne.n	80160c6 <__any_on+0x3e>
 80160ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80160b2:	4293      	cmp	r3, r2
 80160b4:	d803      	bhi.n	80160be <__any_on+0x36>
 80160b6:	2000      	movs	r0, #0
 80160b8:	bd10      	pop	{r4, pc}
 80160ba:	4603      	mov	r3, r0
 80160bc:	e7f7      	b.n	80160ae <__any_on+0x26>
 80160be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80160c2:	2900      	cmp	r1, #0
 80160c4:	d0f5      	beq.n	80160b2 <__any_on+0x2a>
 80160c6:	2001      	movs	r0, #1
 80160c8:	e7f6      	b.n	80160b8 <__any_on+0x30>

080160ca <sulp>:
 80160ca:	b570      	push	{r4, r5, r6, lr}
 80160cc:	4604      	mov	r4, r0
 80160ce:	460d      	mov	r5, r1
 80160d0:	4616      	mov	r6, r2
 80160d2:	ec45 4b10 	vmov	d0, r4, r5
 80160d6:	f7ff febd 	bl	8015e54 <__ulp>
 80160da:	b17e      	cbz	r6, 80160fc <sulp+0x32>
 80160dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80160e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	dd09      	ble.n	80160fc <sulp+0x32>
 80160e8:	051b      	lsls	r3, r3, #20
 80160ea:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80160ee:	2000      	movs	r0, #0
 80160f0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80160f4:	ec41 0b17 	vmov	d7, r0, r1
 80160f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80160fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08016100 <_strtod_l>:
 8016100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016104:	ed2d 8b0a 	vpush	{d8-d12}
 8016108:	b097      	sub	sp, #92	@ 0x5c
 801610a:	4688      	mov	r8, r1
 801610c:	920e      	str	r2, [sp, #56]	@ 0x38
 801610e:	2200      	movs	r2, #0
 8016110:	9212      	str	r2, [sp, #72]	@ 0x48
 8016112:	9005      	str	r0, [sp, #20]
 8016114:	f04f 0a00 	mov.w	sl, #0
 8016118:	f04f 0b00 	mov.w	fp, #0
 801611c:	460a      	mov	r2, r1
 801611e:	9211      	str	r2, [sp, #68]	@ 0x44
 8016120:	7811      	ldrb	r1, [r2, #0]
 8016122:	292b      	cmp	r1, #43	@ 0x2b
 8016124:	d04c      	beq.n	80161c0 <_strtod_l+0xc0>
 8016126:	d839      	bhi.n	801619c <_strtod_l+0x9c>
 8016128:	290d      	cmp	r1, #13
 801612a:	d833      	bhi.n	8016194 <_strtod_l+0x94>
 801612c:	2908      	cmp	r1, #8
 801612e:	d833      	bhi.n	8016198 <_strtod_l+0x98>
 8016130:	2900      	cmp	r1, #0
 8016132:	d03c      	beq.n	80161ae <_strtod_l+0xae>
 8016134:	2200      	movs	r2, #0
 8016136:	9208      	str	r2, [sp, #32]
 8016138:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801613a:	782a      	ldrb	r2, [r5, #0]
 801613c:	2a30      	cmp	r2, #48	@ 0x30
 801613e:	f040 80b5 	bne.w	80162ac <_strtod_l+0x1ac>
 8016142:	786a      	ldrb	r2, [r5, #1]
 8016144:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016148:	2a58      	cmp	r2, #88	@ 0x58
 801614a:	d170      	bne.n	801622e <_strtod_l+0x12e>
 801614c:	9302      	str	r3, [sp, #8]
 801614e:	9b08      	ldr	r3, [sp, #32]
 8016150:	9301      	str	r3, [sp, #4]
 8016152:	ab12      	add	r3, sp, #72	@ 0x48
 8016154:	9300      	str	r3, [sp, #0]
 8016156:	4a8b      	ldr	r2, [pc, #556]	@ (8016384 <_strtod_l+0x284>)
 8016158:	9805      	ldr	r0, [sp, #20]
 801615a:	ab13      	add	r3, sp, #76	@ 0x4c
 801615c:	a911      	add	r1, sp, #68	@ 0x44
 801615e:	f001 fa91 	bl	8017684 <__gethex>
 8016162:	f010 060f 	ands.w	r6, r0, #15
 8016166:	4604      	mov	r4, r0
 8016168:	d005      	beq.n	8016176 <_strtod_l+0x76>
 801616a:	2e06      	cmp	r6, #6
 801616c:	d12a      	bne.n	80161c4 <_strtod_l+0xc4>
 801616e:	3501      	adds	r5, #1
 8016170:	2300      	movs	r3, #0
 8016172:	9511      	str	r5, [sp, #68]	@ 0x44
 8016174:	9308      	str	r3, [sp, #32]
 8016176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016178:	2b00      	cmp	r3, #0
 801617a:	f040 852f 	bne.w	8016bdc <_strtod_l+0xadc>
 801617e:	9b08      	ldr	r3, [sp, #32]
 8016180:	ec4b ab10 	vmov	d0, sl, fp
 8016184:	b1cb      	cbz	r3, 80161ba <_strtod_l+0xba>
 8016186:	eeb1 0b40 	vneg.f64	d0, d0
 801618a:	b017      	add	sp, #92	@ 0x5c
 801618c:	ecbd 8b0a 	vpop	{d8-d12}
 8016190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016194:	2920      	cmp	r1, #32
 8016196:	d1cd      	bne.n	8016134 <_strtod_l+0x34>
 8016198:	3201      	adds	r2, #1
 801619a:	e7c0      	b.n	801611e <_strtod_l+0x1e>
 801619c:	292d      	cmp	r1, #45	@ 0x2d
 801619e:	d1c9      	bne.n	8016134 <_strtod_l+0x34>
 80161a0:	2101      	movs	r1, #1
 80161a2:	9108      	str	r1, [sp, #32]
 80161a4:	1c51      	adds	r1, r2, #1
 80161a6:	9111      	str	r1, [sp, #68]	@ 0x44
 80161a8:	7852      	ldrb	r2, [r2, #1]
 80161aa:	2a00      	cmp	r2, #0
 80161ac:	d1c4      	bne.n	8016138 <_strtod_l+0x38>
 80161ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161b0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	f040 850f 	bne.w	8016bd8 <_strtod_l+0xad8>
 80161ba:	ec4b ab10 	vmov	d0, sl, fp
 80161be:	e7e4      	b.n	801618a <_strtod_l+0x8a>
 80161c0:	2100      	movs	r1, #0
 80161c2:	e7ee      	b.n	80161a2 <_strtod_l+0xa2>
 80161c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80161c6:	b13a      	cbz	r2, 80161d8 <_strtod_l+0xd8>
 80161c8:	2135      	movs	r1, #53	@ 0x35
 80161ca:	a814      	add	r0, sp, #80	@ 0x50
 80161cc:	f7ff ff39 	bl	8016042 <__copybits>
 80161d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80161d2:	9805      	ldr	r0, [sp, #20]
 80161d4:	f7ff fb0a 	bl	80157ec <_Bfree>
 80161d8:	1e73      	subs	r3, r6, #1
 80161da:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80161dc:	2b04      	cmp	r3, #4
 80161de:	d806      	bhi.n	80161ee <_strtod_l+0xee>
 80161e0:	e8df f003 	tbb	[pc, r3]
 80161e4:	201d0314 	.word	0x201d0314
 80161e8:	14          	.byte	0x14
 80161e9:	00          	.byte	0x00
 80161ea:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80161ee:	05e3      	lsls	r3, r4, #23
 80161f0:	bf48      	it	mi
 80161f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80161f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80161fa:	0d1b      	lsrs	r3, r3, #20
 80161fc:	051b      	lsls	r3, r3, #20
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d1b9      	bne.n	8016176 <_strtod_l+0x76>
 8016202:	f7fe fb91 	bl	8014928 <__errno>
 8016206:	2322      	movs	r3, #34	@ 0x22
 8016208:	6003      	str	r3, [r0, #0]
 801620a:	e7b4      	b.n	8016176 <_strtod_l+0x76>
 801620c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016210:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016214:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016218:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801621c:	e7e7      	b.n	80161ee <_strtod_l+0xee>
 801621e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801638c <_strtod_l+0x28c>
 8016222:	e7e4      	b.n	80161ee <_strtod_l+0xee>
 8016224:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016228:	f04f 3aff 	mov.w	sl, #4294967295
 801622c:	e7df      	b.n	80161ee <_strtod_l+0xee>
 801622e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016230:	1c5a      	adds	r2, r3, #1
 8016232:	9211      	str	r2, [sp, #68]	@ 0x44
 8016234:	785b      	ldrb	r3, [r3, #1]
 8016236:	2b30      	cmp	r3, #48	@ 0x30
 8016238:	d0f9      	beq.n	801622e <_strtod_l+0x12e>
 801623a:	2b00      	cmp	r3, #0
 801623c:	d09b      	beq.n	8016176 <_strtod_l+0x76>
 801623e:	2301      	movs	r3, #1
 8016240:	2600      	movs	r6, #0
 8016242:	9307      	str	r3, [sp, #28]
 8016244:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016246:	930a      	str	r3, [sp, #40]	@ 0x28
 8016248:	46b1      	mov	r9, r6
 801624a:	4635      	mov	r5, r6
 801624c:	220a      	movs	r2, #10
 801624e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016250:	7804      	ldrb	r4, [r0, #0]
 8016252:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016256:	b2d9      	uxtb	r1, r3
 8016258:	2909      	cmp	r1, #9
 801625a:	d929      	bls.n	80162b0 <_strtod_l+0x1b0>
 801625c:	494a      	ldr	r1, [pc, #296]	@ (8016388 <_strtod_l+0x288>)
 801625e:	2201      	movs	r2, #1
 8016260:	f001 f928 	bl	80174b4 <strncmp>
 8016264:	b378      	cbz	r0, 80162c6 <_strtod_l+0x1c6>
 8016266:	2000      	movs	r0, #0
 8016268:	4622      	mov	r2, r4
 801626a:	462b      	mov	r3, r5
 801626c:	4607      	mov	r7, r0
 801626e:	9006      	str	r0, [sp, #24]
 8016270:	2a65      	cmp	r2, #101	@ 0x65
 8016272:	d001      	beq.n	8016278 <_strtod_l+0x178>
 8016274:	2a45      	cmp	r2, #69	@ 0x45
 8016276:	d117      	bne.n	80162a8 <_strtod_l+0x1a8>
 8016278:	b91b      	cbnz	r3, 8016282 <_strtod_l+0x182>
 801627a:	9b07      	ldr	r3, [sp, #28]
 801627c:	4303      	orrs	r3, r0
 801627e:	d096      	beq.n	80161ae <_strtod_l+0xae>
 8016280:	2300      	movs	r3, #0
 8016282:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8016286:	f108 0201 	add.w	r2, r8, #1
 801628a:	9211      	str	r2, [sp, #68]	@ 0x44
 801628c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016290:	2a2b      	cmp	r2, #43	@ 0x2b
 8016292:	d06b      	beq.n	801636c <_strtod_l+0x26c>
 8016294:	2a2d      	cmp	r2, #45	@ 0x2d
 8016296:	d071      	beq.n	801637c <_strtod_l+0x27c>
 8016298:	f04f 0e00 	mov.w	lr, #0
 801629c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80162a0:	2c09      	cmp	r4, #9
 80162a2:	d979      	bls.n	8016398 <_strtod_l+0x298>
 80162a4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80162a8:	2400      	movs	r4, #0
 80162aa:	e094      	b.n	80163d6 <_strtod_l+0x2d6>
 80162ac:	2300      	movs	r3, #0
 80162ae:	e7c7      	b.n	8016240 <_strtod_l+0x140>
 80162b0:	2d08      	cmp	r5, #8
 80162b2:	f100 0001 	add.w	r0, r0, #1
 80162b6:	bfd4      	ite	le
 80162b8:	fb02 3909 	mlale	r9, r2, r9, r3
 80162bc:	fb02 3606 	mlagt	r6, r2, r6, r3
 80162c0:	3501      	adds	r5, #1
 80162c2:	9011      	str	r0, [sp, #68]	@ 0x44
 80162c4:	e7c3      	b.n	801624e <_strtod_l+0x14e>
 80162c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80162c8:	1c5a      	adds	r2, r3, #1
 80162ca:	9211      	str	r2, [sp, #68]	@ 0x44
 80162cc:	785a      	ldrb	r2, [r3, #1]
 80162ce:	b375      	cbz	r5, 801632e <_strtod_l+0x22e>
 80162d0:	4607      	mov	r7, r0
 80162d2:	462b      	mov	r3, r5
 80162d4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80162d8:	2909      	cmp	r1, #9
 80162da:	d913      	bls.n	8016304 <_strtod_l+0x204>
 80162dc:	2101      	movs	r1, #1
 80162de:	9106      	str	r1, [sp, #24]
 80162e0:	e7c6      	b.n	8016270 <_strtod_l+0x170>
 80162e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80162e4:	1c5a      	adds	r2, r3, #1
 80162e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80162e8:	785a      	ldrb	r2, [r3, #1]
 80162ea:	3001      	adds	r0, #1
 80162ec:	2a30      	cmp	r2, #48	@ 0x30
 80162ee:	d0f8      	beq.n	80162e2 <_strtod_l+0x1e2>
 80162f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80162f4:	2b08      	cmp	r3, #8
 80162f6:	f200 8476 	bhi.w	8016be6 <_strtod_l+0xae6>
 80162fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80162fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80162fe:	4607      	mov	r7, r0
 8016300:	2000      	movs	r0, #0
 8016302:	4603      	mov	r3, r0
 8016304:	3a30      	subs	r2, #48	@ 0x30
 8016306:	f100 0101 	add.w	r1, r0, #1
 801630a:	d023      	beq.n	8016354 <_strtod_l+0x254>
 801630c:	440f      	add	r7, r1
 801630e:	eb00 0c03 	add.w	ip, r0, r3
 8016312:	4619      	mov	r1, r3
 8016314:	240a      	movs	r4, #10
 8016316:	4561      	cmp	r1, ip
 8016318:	d10b      	bne.n	8016332 <_strtod_l+0x232>
 801631a:	1c5c      	adds	r4, r3, #1
 801631c:	4403      	add	r3, r0
 801631e:	2b08      	cmp	r3, #8
 8016320:	4404      	add	r4, r0
 8016322:	dc11      	bgt.n	8016348 <_strtod_l+0x248>
 8016324:	230a      	movs	r3, #10
 8016326:	fb03 2909 	mla	r9, r3, r9, r2
 801632a:	2100      	movs	r1, #0
 801632c:	e013      	b.n	8016356 <_strtod_l+0x256>
 801632e:	4628      	mov	r0, r5
 8016330:	e7dc      	b.n	80162ec <_strtod_l+0x1ec>
 8016332:	2908      	cmp	r1, #8
 8016334:	f101 0101 	add.w	r1, r1, #1
 8016338:	dc02      	bgt.n	8016340 <_strtod_l+0x240>
 801633a:	fb04 f909 	mul.w	r9, r4, r9
 801633e:	e7ea      	b.n	8016316 <_strtod_l+0x216>
 8016340:	2910      	cmp	r1, #16
 8016342:	bfd8      	it	le
 8016344:	4366      	mulle	r6, r4
 8016346:	e7e6      	b.n	8016316 <_strtod_l+0x216>
 8016348:	2b0f      	cmp	r3, #15
 801634a:	dcee      	bgt.n	801632a <_strtod_l+0x22a>
 801634c:	230a      	movs	r3, #10
 801634e:	fb03 2606 	mla	r6, r3, r6, r2
 8016352:	e7ea      	b.n	801632a <_strtod_l+0x22a>
 8016354:	461c      	mov	r4, r3
 8016356:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016358:	1c5a      	adds	r2, r3, #1
 801635a:	9211      	str	r2, [sp, #68]	@ 0x44
 801635c:	785a      	ldrb	r2, [r3, #1]
 801635e:	4608      	mov	r0, r1
 8016360:	4623      	mov	r3, r4
 8016362:	e7b7      	b.n	80162d4 <_strtod_l+0x1d4>
 8016364:	2301      	movs	r3, #1
 8016366:	2700      	movs	r7, #0
 8016368:	9306      	str	r3, [sp, #24]
 801636a:	e786      	b.n	801627a <_strtod_l+0x17a>
 801636c:	f04f 0e00 	mov.w	lr, #0
 8016370:	f108 0202 	add.w	r2, r8, #2
 8016374:	9211      	str	r2, [sp, #68]	@ 0x44
 8016376:	f898 2002 	ldrb.w	r2, [r8, #2]
 801637a:	e78f      	b.n	801629c <_strtod_l+0x19c>
 801637c:	f04f 0e01 	mov.w	lr, #1
 8016380:	e7f6      	b.n	8016370 <_strtod_l+0x270>
 8016382:	bf00      	nop
 8016384:	08018490 	.word	0x08018490
 8016388:	08018478 	.word	0x08018478
 801638c:	7ff00000 	.word	0x7ff00000
 8016390:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016392:	1c54      	adds	r4, r2, #1
 8016394:	9411      	str	r4, [sp, #68]	@ 0x44
 8016396:	7852      	ldrb	r2, [r2, #1]
 8016398:	2a30      	cmp	r2, #48	@ 0x30
 801639a:	d0f9      	beq.n	8016390 <_strtod_l+0x290>
 801639c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80163a0:	2c08      	cmp	r4, #8
 80163a2:	d881      	bhi.n	80162a8 <_strtod_l+0x1a8>
 80163a4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80163a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80163aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80163ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80163ae:	1c51      	adds	r1, r2, #1
 80163b0:	9111      	str	r1, [sp, #68]	@ 0x44
 80163b2:	7852      	ldrb	r2, [r2, #1]
 80163b4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80163b8:	2c09      	cmp	r4, #9
 80163ba:	d938      	bls.n	801642e <_strtod_l+0x32e>
 80163bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80163be:	1b0c      	subs	r4, r1, r4
 80163c0:	2c08      	cmp	r4, #8
 80163c2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80163c6:	dc02      	bgt.n	80163ce <_strtod_l+0x2ce>
 80163c8:	4564      	cmp	r4, ip
 80163ca:	bfa8      	it	ge
 80163cc:	4664      	movge	r4, ip
 80163ce:	f1be 0f00 	cmp.w	lr, #0
 80163d2:	d000      	beq.n	80163d6 <_strtod_l+0x2d6>
 80163d4:	4264      	negs	r4, r4
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d14e      	bne.n	8016478 <_strtod_l+0x378>
 80163da:	9b07      	ldr	r3, [sp, #28]
 80163dc:	4318      	orrs	r0, r3
 80163de:	f47f aeca 	bne.w	8016176 <_strtod_l+0x76>
 80163e2:	9b06      	ldr	r3, [sp, #24]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	f47f aee2 	bne.w	80161ae <_strtod_l+0xae>
 80163ea:	2a69      	cmp	r2, #105	@ 0x69
 80163ec:	d027      	beq.n	801643e <_strtod_l+0x33e>
 80163ee:	dc24      	bgt.n	801643a <_strtod_l+0x33a>
 80163f0:	2a49      	cmp	r2, #73	@ 0x49
 80163f2:	d024      	beq.n	801643e <_strtod_l+0x33e>
 80163f4:	2a4e      	cmp	r2, #78	@ 0x4e
 80163f6:	f47f aeda 	bne.w	80161ae <_strtod_l+0xae>
 80163fa:	4997      	ldr	r1, [pc, #604]	@ (8016658 <_strtod_l+0x558>)
 80163fc:	a811      	add	r0, sp, #68	@ 0x44
 80163fe:	f001 fb63 	bl	8017ac8 <__match>
 8016402:	2800      	cmp	r0, #0
 8016404:	f43f aed3 	beq.w	80161ae <_strtod_l+0xae>
 8016408:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801640a:	781b      	ldrb	r3, [r3, #0]
 801640c:	2b28      	cmp	r3, #40	@ 0x28
 801640e:	d12d      	bne.n	801646c <_strtod_l+0x36c>
 8016410:	4992      	ldr	r1, [pc, #584]	@ (801665c <_strtod_l+0x55c>)
 8016412:	aa14      	add	r2, sp, #80	@ 0x50
 8016414:	a811      	add	r0, sp, #68	@ 0x44
 8016416:	f001 fb6b 	bl	8017af0 <__hexnan>
 801641a:	2805      	cmp	r0, #5
 801641c:	d126      	bne.n	801646c <_strtod_l+0x36c>
 801641e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016420:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016424:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016428:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801642c:	e6a3      	b.n	8016176 <_strtod_l+0x76>
 801642e:	240a      	movs	r4, #10
 8016430:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016434:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016438:	e7b8      	b.n	80163ac <_strtod_l+0x2ac>
 801643a:	2a6e      	cmp	r2, #110	@ 0x6e
 801643c:	e7db      	b.n	80163f6 <_strtod_l+0x2f6>
 801643e:	4988      	ldr	r1, [pc, #544]	@ (8016660 <_strtod_l+0x560>)
 8016440:	a811      	add	r0, sp, #68	@ 0x44
 8016442:	f001 fb41 	bl	8017ac8 <__match>
 8016446:	2800      	cmp	r0, #0
 8016448:	f43f aeb1 	beq.w	80161ae <_strtod_l+0xae>
 801644c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801644e:	4985      	ldr	r1, [pc, #532]	@ (8016664 <_strtod_l+0x564>)
 8016450:	3b01      	subs	r3, #1
 8016452:	a811      	add	r0, sp, #68	@ 0x44
 8016454:	9311      	str	r3, [sp, #68]	@ 0x44
 8016456:	f001 fb37 	bl	8017ac8 <__match>
 801645a:	b910      	cbnz	r0, 8016462 <_strtod_l+0x362>
 801645c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801645e:	3301      	adds	r3, #1
 8016460:	9311      	str	r3, [sp, #68]	@ 0x44
 8016462:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8016678 <_strtod_l+0x578>
 8016466:	f04f 0a00 	mov.w	sl, #0
 801646a:	e684      	b.n	8016176 <_strtod_l+0x76>
 801646c:	487e      	ldr	r0, [pc, #504]	@ (8016668 <_strtod_l+0x568>)
 801646e:	f001 f867 	bl	8017540 <nan>
 8016472:	ec5b ab10 	vmov	sl, fp, d0
 8016476:	e67e      	b.n	8016176 <_strtod_l+0x76>
 8016478:	ee07 9a90 	vmov	s15, r9
 801647c:	1be2      	subs	r2, r4, r7
 801647e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016482:	2d00      	cmp	r5, #0
 8016484:	bf08      	it	eq
 8016486:	461d      	moveq	r5, r3
 8016488:	2b10      	cmp	r3, #16
 801648a:	9209      	str	r2, [sp, #36]	@ 0x24
 801648c:	461a      	mov	r2, r3
 801648e:	bfa8      	it	ge
 8016490:	2210      	movge	r2, #16
 8016492:	2b09      	cmp	r3, #9
 8016494:	ec5b ab17 	vmov	sl, fp, d7
 8016498:	dc15      	bgt.n	80164c6 <_strtod_l+0x3c6>
 801649a:	1be1      	subs	r1, r4, r7
 801649c:	2900      	cmp	r1, #0
 801649e:	f43f ae6a 	beq.w	8016176 <_strtod_l+0x76>
 80164a2:	eba4 0107 	sub.w	r1, r4, r7
 80164a6:	dd72      	ble.n	801658e <_strtod_l+0x48e>
 80164a8:	2916      	cmp	r1, #22
 80164aa:	dc59      	bgt.n	8016560 <_strtod_l+0x460>
 80164ac:	4b6f      	ldr	r3, [pc, #444]	@ (801666c <_strtod_l+0x56c>)
 80164ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80164b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80164b4:	ed93 7b00 	vldr	d7, [r3]
 80164b8:	ec4b ab16 	vmov	d6, sl, fp
 80164bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80164c0:	ec5b ab17 	vmov	sl, fp, d7
 80164c4:	e657      	b.n	8016176 <_strtod_l+0x76>
 80164c6:	4969      	ldr	r1, [pc, #420]	@ (801666c <_strtod_l+0x56c>)
 80164c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80164cc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80164d0:	ee06 6a90 	vmov	s13, r6
 80164d4:	2b0f      	cmp	r3, #15
 80164d6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80164da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80164de:	ec5b ab16 	vmov	sl, fp, d6
 80164e2:	ddda      	ble.n	801649a <_strtod_l+0x39a>
 80164e4:	1a9a      	subs	r2, r3, r2
 80164e6:	1be1      	subs	r1, r4, r7
 80164e8:	440a      	add	r2, r1
 80164ea:	2a00      	cmp	r2, #0
 80164ec:	f340 8094 	ble.w	8016618 <_strtod_l+0x518>
 80164f0:	f012 000f 	ands.w	r0, r2, #15
 80164f4:	d00a      	beq.n	801650c <_strtod_l+0x40c>
 80164f6:	495d      	ldr	r1, [pc, #372]	@ (801666c <_strtod_l+0x56c>)
 80164f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80164fc:	ed91 7b00 	vldr	d7, [r1]
 8016500:	ec4b ab16 	vmov	d6, sl, fp
 8016504:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016508:	ec5b ab17 	vmov	sl, fp, d7
 801650c:	f032 020f 	bics.w	r2, r2, #15
 8016510:	d073      	beq.n	80165fa <_strtod_l+0x4fa>
 8016512:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8016516:	dd47      	ble.n	80165a8 <_strtod_l+0x4a8>
 8016518:	2400      	movs	r4, #0
 801651a:	4625      	mov	r5, r4
 801651c:	9407      	str	r4, [sp, #28]
 801651e:	4626      	mov	r6, r4
 8016520:	9a05      	ldr	r2, [sp, #20]
 8016522:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016678 <_strtod_l+0x578>
 8016526:	2322      	movs	r3, #34	@ 0x22
 8016528:	6013      	str	r3, [r2, #0]
 801652a:	f04f 0a00 	mov.w	sl, #0
 801652e:	9b07      	ldr	r3, [sp, #28]
 8016530:	2b00      	cmp	r3, #0
 8016532:	f43f ae20 	beq.w	8016176 <_strtod_l+0x76>
 8016536:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016538:	9805      	ldr	r0, [sp, #20]
 801653a:	f7ff f957 	bl	80157ec <_Bfree>
 801653e:	9805      	ldr	r0, [sp, #20]
 8016540:	4631      	mov	r1, r6
 8016542:	f7ff f953 	bl	80157ec <_Bfree>
 8016546:	9805      	ldr	r0, [sp, #20]
 8016548:	4629      	mov	r1, r5
 801654a:	f7ff f94f 	bl	80157ec <_Bfree>
 801654e:	9907      	ldr	r1, [sp, #28]
 8016550:	9805      	ldr	r0, [sp, #20]
 8016552:	f7ff f94b 	bl	80157ec <_Bfree>
 8016556:	9805      	ldr	r0, [sp, #20]
 8016558:	4621      	mov	r1, r4
 801655a:	f7ff f947 	bl	80157ec <_Bfree>
 801655e:	e60a      	b.n	8016176 <_strtod_l+0x76>
 8016560:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8016564:	1be0      	subs	r0, r4, r7
 8016566:	4281      	cmp	r1, r0
 8016568:	dbbc      	blt.n	80164e4 <_strtod_l+0x3e4>
 801656a:	4a40      	ldr	r2, [pc, #256]	@ (801666c <_strtod_l+0x56c>)
 801656c:	f1c3 030f 	rsb	r3, r3, #15
 8016570:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016574:	ed91 7b00 	vldr	d7, [r1]
 8016578:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801657a:	ec4b ab16 	vmov	d6, sl, fp
 801657e:	1acb      	subs	r3, r1, r3
 8016580:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016584:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016588:	ed92 6b00 	vldr	d6, [r2]
 801658c:	e796      	b.n	80164bc <_strtod_l+0x3bc>
 801658e:	3116      	adds	r1, #22
 8016590:	dba8      	blt.n	80164e4 <_strtod_l+0x3e4>
 8016592:	4b36      	ldr	r3, [pc, #216]	@ (801666c <_strtod_l+0x56c>)
 8016594:	1b3c      	subs	r4, r7, r4
 8016596:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801659a:	ed94 7b00 	vldr	d7, [r4]
 801659e:	ec4b ab16 	vmov	d6, sl, fp
 80165a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80165a6:	e78b      	b.n	80164c0 <_strtod_l+0x3c0>
 80165a8:	2000      	movs	r0, #0
 80165aa:	ec4b ab17 	vmov	d7, sl, fp
 80165ae:	4e30      	ldr	r6, [pc, #192]	@ (8016670 <_strtod_l+0x570>)
 80165b0:	1112      	asrs	r2, r2, #4
 80165b2:	4601      	mov	r1, r0
 80165b4:	2a01      	cmp	r2, #1
 80165b6:	dc23      	bgt.n	8016600 <_strtod_l+0x500>
 80165b8:	b108      	cbz	r0, 80165be <_strtod_l+0x4be>
 80165ba:	ec5b ab17 	vmov	sl, fp, d7
 80165be:	4a2c      	ldr	r2, [pc, #176]	@ (8016670 <_strtod_l+0x570>)
 80165c0:	482c      	ldr	r0, [pc, #176]	@ (8016674 <_strtod_l+0x574>)
 80165c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80165c6:	ed92 7b00 	vldr	d7, [r2]
 80165ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80165ce:	ec4b ab16 	vmov	d6, sl, fp
 80165d2:	4a29      	ldr	r2, [pc, #164]	@ (8016678 <_strtod_l+0x578>)
 80165d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80165d8:	ee17 1a90 	vmov	r1, s15
 80165dc:	400a      	ands	r2, r1
 80165de:	4282      	cmp	r2, r0
 80165e0:	ec5b ab17 	vmov	sl, fp, d7
 80165e4:	d898      	bhi.n	8016518 <_strtod_l+0x418>
 80165e6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80165ea:	4282      	cmp	r2, r0
 80165ec:	bf86      	itte	hi
 80165ee:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801667c <_strtod_l+0x57c>
 80165f2:	f04f 3aff 	movhi.w	sl, #4294967295
 80165f6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80165fa:	2200      	movs	r2, #0
 80165fc:	9206      	str	r2, [sp, #24]
 80165fe:	e076      	b.n	80166ee <_strtod_l+0x5ee>
 8016600:	f012 0f01 	tst.w	r2, #1
 8016604:	d004      	beq.n	8016610 <_strtod_l+0x510>
 8016606:	ed96 6b00 	vldr	d6, [r6]
 801660a:	2001      	movs	r0, #1
 801660c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016610:	3101      	adds	r1, #1
 8016612:	1052      	asrs	r2, r2, #1
 8016614:	3608      	adds	r6, #8
 8016616:	e7cd      	b.n	80165b4 <_strtod_l+0x4b4>
 8016618:	d0ef      	beq.n	80165fa <_strtod_l+0x4fa>
 801661a:	4252      	negs	r2, r2
 801661c:	f012 000f 	ands.w	r0, r2, #15
 8016620:	d00a      	beq.n	8016638 <_strtod_l+0x538>
 8016622:	4912      	ldr	r1, [pc, #72]	@ (801666c <_strtod_l+0x56c>)
 8016624:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016628:	ed91 7b00 	vldr	d7, [r1]
 801662c:	ec4b ab16 	vmov	d6, sl, fp
 8016630:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016634:	ec5b ab17 	vmov	sl, fp, d7
 8016638:	1112      	asrs	r2, r2, #4
 801663a:	d0de      	beq.n	80165fa <_strtod_l+0x4fa>
 801663c:	2a1f      	cmp	r2, #31
 801663e:	dd1f      	ble.n	8016680 <_strtod_l+0x580>
 8016640:	2400      	movs	r4, #0
 8016642:	4625      	mov	r5, r4
 8016644:	9407      	str	r4, [sp, #28]
 8016646:	4626      	mov	r6, r4
 8016648:	9a05      	ldr	r2, [sp, #20]
 801664a:	2322      	movs	r3, #34	@ 0x22
 801664c:	f04f 0a00 	mov.w	sl, #0
 8016650:	f04f 0b00 	mov.w	fp, #0
 8016654:	6013      	str	r3, [r2, #0]
 8016656:	e76a      	b.n	801652e <_strtod_l+0x42e>
 8016658:	08018265 	.word	0x08018265
 801665c:	0801847c 	.word	0x0801847c
 8016660:	0801825d 	.word	0x0801825d
 8016664:	08018294 	.word	0x08018294
 8016668:	08018625 	.word	0x08018625
 801666c:	080183b0 	.word	0x080183b0
 8016670:	08018388 	.word	0x08018388
 8016674:	7ca00000 	.word	0x7ca00000
 8016678:	7ff00000 	.word	0x7ff00000
 801667c:	7fefffff 	.word	0x7fefffff
 8016680:	f012 0110 	ands.w	r1, r2, #16
 8016684:	bf18      	it	ne
 8016686:	216a      	movne	r1, #106	@ 0x6a
 8016688:	9106      	str	r1, [sp, #24]
 801668a:	ec4b ab17 	vmov	d7, sl, fp
 801668e:	49b0      	ldr	r1, [pc, #704]	@ (8016950 <_strtod_l+0x850>)
 8016690:	2000      	movs	r0, #0
 8016692:	07d6      	lsls	r6, r2, #31
 8016694:	d504      	bpl.n	80166a0 <_strtod_l+0x5a0>
 8016696:	ed91 6b00 	vldr	d6, [r1]
 801669a:	2001      	movs	r0, #1
 801669c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80166a0:	1052      	asrs	r2, r2, #1
 80166a2:	f101 0108 	add.w	r1, r1, #8
 80166a6:	d1f4      	bne.n	8016692 <_strtod_l+0x592>
 80166a8:	b108      	cbz	r0, 80166ae <_strtod_l+0x5ae>
 80166aa:	ec5b ab17 	vmov	sl, fp, d7
 80166ae:	9a06      	ldr	r2, [sp, #24]
 80166b0:	b1b2      	cbz	r2, 80166e0 <_strtod_l+0x5e0>
 80166b2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80166b6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80166ba:	2a00      	cmp	r2, #0
 80166bc:	4658      	mov	r0, fp
 80166be:	dd0f      	ble.n	80166e0 <_strtod_l+0x5e0>
 80166c0:	2a1f      	cmp	r2, #31
 80166c2:	dd55      	ble.n	8016770 <_strtod_l+0x670>
 80166c4:	2a34      	cmp	r2, #52	@ 0x34
 80166c6:	bfde      	ittt	le
 80166c8:	f04f 32ff 	movle.w	r2, #4294967295
 80166cc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80166d0:	408a      	lslle	r2, r1
 80166d2:	f04f 0a00 	mov.w	sl, #0
 80166d6:	bfcc      	ite	gt
 80166d8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80166dc:	ea02 0b00 	andle.w	fp, r2, r0
 80166e0:	ec4b ab17 	vmov	d7, sl, fp
 80166e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80166e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ec:	d0a8      	beq.n	8016640 <_strtod_l+0x540>
 80166ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80166f0:	9805      	ldr	r0, [sp, #20]
 80166f2:	f8cd 9000 	str.w	r9, [sp]
 80166f6:	462a      	mov	r2, r5
 80166f8:	f7ff f8e0 	bl	80158bc <__s2b>
 80166fc:	9007      	str	r0, [sp, #28]
 80166fe:	2800      	cmp	r0, #0
 8016700:	f43f af0a 	beq.w	8016518 <_strtod_l+0x418>
 8016704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016706:	1b3f      	subs	r7, r7, r4
 8016708:	2b00      	cmp	r3, #0
 801670a:	bfb4      	ite	lt
 801670c:	463b      	movlt	r3, r7
 801670e:	2300      	movge	r3, #0
 8016710:	930a      	str	r3, [sp, #40]	@ 0x28
 8016712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016714:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8016940 <_strtod_l+0x840>
 8016718:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801671c:	2400      	movs	r4, #0
 801671e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016720:	4625      	mov	r5, r4
 8016722:	9b07      	ldr	r3, [sp, #28]
 8016724:	9805      	ldr	r0, [sp, #20]
 8016726:	6859      	ldr	r1, [r3, #4]
 8016728:	f7ff f820 	bl	801576c <_Balloc>
 801672c:	4606      	mov	r6, r0
 801672e:	2800      	cmp	r0, #0
 8016730:	f43f aef6 	beq.w	8016520 <_strtod_l+0x420>
 8016734:	9b07      	ldr	r3, [sp, #28]
 8016736:	691a      	ldr	r2, [r3, #16]
 8016738:	ec4b ab19 	vmov	d9, sl, fp
 801673c:	3202      	adds	r2, #2
 801673e:	f103 010c 	add.w	r1, r3, #12
 8016742:	0092      	lsls	r2, r2, #2
 8016744:	300c      	adds	r0, #12
 8016746:	f7fe f91c 	bl	8014982 <memcpy>
 801674a:	eeb0 0b49 	vmov.f64	d0, d9
 801674e:	9805      	ldr	r0, [sp, #20]
 8016750:	aa14      	add	r2, sp, #80	@ 0x50
 8016752:	a913      	add	r1, sp, #76	@ 0x4c
 8016754:	f7ff fbee 	bl	8015f34 <__d2b>
 8016758:	9012      	str	r0, [sp, #72]	@ 0x48
 801675a:	2800      	cmp	r0, #0
 801675c:	f43f aee0 	beq.w	8016520 <_strtod_l+0x420>
 8016760:	9805      	ldr	r0, [sp, #20]
 8016762:	2101      	movs	r1, #1
 8016764:	f7ff f940 	bl	80159e8 <__i2b>
 8016768:	4605      	mov	r5, r0
 801676a:	b940      	cbnz	r0, 801677e <_strtod_l+0x67e>
 801676c:	2500      	movs	r5, #0
 801676e:	e6d7      	b.n	8016520 <_strtod_l+0x420>
 8016770:	f04f 31ff 	mov.w	r1, #4294967295
 8016774:	fa01 f202 	lsl.w	r2, r1, r2
 8016778:	ea02 0a0a 	and.w	sl, r2, sl
 801677c:	e7b0      	b.n	80166e0 <_strtod_l+0x5e0>
 801677e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8016780:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016782:	2f00      	cmp	r7, #0
 8016784:	bfab      	itete	ge
 8016786:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8016788:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801678a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801678e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8016792:	bfac      	ite	ge
 8016794:	eb07 0903 	addge.w	r9, r7, r3
 8016798:	eba3 0807 	sublt.w	r8, r3, r7
 801679c:	9b06      	ldr	r3, [sp, #24]
 801679e:	1aff      	subs	r7, r7, r3
 80167a0:	4417      	add	r7, r2
 80167a2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80167a6:	4a6b      	ldr	r2, [pc, #428]	@ (8016954 <_strtod_l+0x854>)
 80167a8:	3f01      	subs	r7, #1
 80167aa:	4297      	cmp	r7, r2
 80167ac:	da51      	bge.n	8016852 <_strtod_l+0x752>
 80167ae:	1bd1      	subs	r1, r2, r7
 80167b0:	291f      	cmp	r1, #31
 80167b2:	eba3 0301 	sub.w	r3, r3, r1
 80167b6:	f04f 0201 	mov.w	r2, #1
 80167ba:	dc3e      	bgt.n	801683a <_strtod_l+0x73a>
 80167bc:	408a      	lsls	r2, r1
 80167be:	920c      	str	r2, [sp, #48]	@ 0x30
 80167c0:	2200      	movs	r2, #0
 80167c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80167c4:	eb09 0703 	add.w	r7, r9, r3
 80167c8:	4498      	add	r8, r3
 80167ca:	9b06      	ldr	r3, [sp, #24]
 80167cc:	45b9      	cmp	r9, r7
 80167ce:	4498      	add	r8, r3
 80167d0:	464b      	mov	r3, r9
 80167d2:	bfa8      	it	ge
 80167d4:	463b      	movge	r3, r7
 80167d6:	4543      	cmp	r3, r8
 80167d8:	bfa8      	it	ge
 80167da:	4643      	movge	r3, r8
 80167dc:	2b00      	cmp	r3, #0
 80167de:	bfc2      	ittt	gt
 80167e0:	1aff      	subgt	r7, r7, r3
 80167e2:	eba8 0803 	subgt.w	r8, r8, r3
 80167e6:	eba9 0903 	subgt.w	r9, r9, r3
 80167ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	dd16      	ble.n	801681e <_strtod_l+0x71e>
 80167f0:	4629      	mov	r1, r5
 80167f2:	9805      	ldr	r0, [sp, #20]
 80167f4:	461a      	mov	r2, r3
 80167f6:	f7ff f9b7 	bl	8015b68 <__pow5mult>
 80167fa:	4605      	mov	r5, r0
 80167fc:	2800      	cmp	r0, #0
 80167fe:	d0b5      	beq.n	801676c <_strtod_l+0x66c>
 8016800:	4601      	mov	r1, r0
 8016802:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016804:	9805      	ldr	r0, [sp, #20]
 8016806:	f7ff f905 	bl	8015a14 <__multiply>
 801680a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801680c:	2800      	cmp	r0, #0
 801680e:	f43f ae87 	beq.w	8016520 <_strtod_l+0x420>
 8016812:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016814:	9805      	ldr	r0, [sp, #20]
 8016816:	f7fe ffe9 	bl	80157ec <_Bfree>
 801681a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801681c:	9312      	str	r3, [sp, #72]	@ 0x48
 801681e:	2f00      	cmp	r7, #0
 8016820:	dc1b      	bgt.n	801685a <_strtod_l+0x75a>
 8016822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016824:	2b00      	cmp	r3, #0
 8016826:	dd21      	ble.n	801686c <_strtod_l+0x76c>
 8016828:	4631      	mov	r1, r6
 801682a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801682c:	9805      	ldr	r0, [sp, #20]
 801682e:	f7ff f99b 	bl	8015b68 <__pow5mult>
 8016832:	4606      	mov	r6, r0
 8016834:	b9d0      	cbnz	r0, 801686c <_strtod_l+0x76c>
 8016836:	2600      	movs	r6, #0
 8016838:	e672      	b.n	8016520 <_strtod_l+0x420>
 801683a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801683e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016842:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016846:	37e2      	adds	r7, #226	@ 0xe2
 8016848:	fa02 f107 	lsl.w	r1, r2, r7
 801684c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801684e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016850:	e7b8      	b.n	80167c4 <_strtod_l+0x6c4>
 8016852:	2200      	movs	r2, #0
 8016854:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016856:	2201      	movs	r2, #1
 8016858:	e7f9      	b.n	801684e <_strtod_l+0x74e>
 801685a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801685c:	9805      	ldr	r0, [sp, #20]
 801685e:	463a      	mov	r2, r7
 8016860:	f7ff f9dc 	bl	8015c1c <__lshift>
 8016864:	9012      	str	r0, [sp, #72]	@ 0x48
 8016866:	2800      	cmp	r0, #0
 8016868:	d1db      	bne.n	8016822 <_strtod_l+0x722>
 801686a:	e659      	b.n	8016520 <_strtod_l+0x420>
 801686c:	f1b8 0f00 	cmp.w	r8, #0
 8016870:	dd07      	ble.n	8016882 <_strtod_l+0x782>
 8016872:	4631      	mov	r1, r6
 8016874:	9805      	ldr	r0, [sp, #20]
 8016876:	4642      	mov	r2, r8
 8016878:	f7ff f9d0 	bl	8015c1c <__lshift>
 801687c:	4606      	mov	r6, r0
 801687e:	2800      	cmp	r0, #0
 8016880:	d0d9      	beq.n	8016836 <_strtod_l+0x736>
 8016882:	f1b9 0f00 	cmp.w	r9, #0
 8016886:	dd08      	ble.n	801689a <_strtod_l+0x79a>
 8016888:	4629      	mov	r1, r5
 801688a:	9805      	ldr	r0, [sp, #20]
 801688c:	464a      	mov	r2, r9
 801688e:	f7ff f9c5 	bl	8015c1c <__lshift>
 8016892:	4605      	mov	r5, r0
 8016894:	2800      	cmp	r0, #0
 8016896:	f43f ae43 	beq.w	8016520 <_strtod_l+0x420>
 801689a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801689c:	9805      	ldr	r0, [sp, #20]
 801689e:	4632      	mov	r2, r6
 80168a0:	f7ff fa44 	bl	8015d2c <__mdiff>
 80168a4:	4604      	mov	r4, r0
 80168a6:	2800      	cmp	r0, #0
 80168a8:	f43f ae3a 	beq.w	8016520 <_strtod_l+0x420>
 80168ac:	2300      	movs	r3, #0
 80168ae:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80168b2:	60c3      	str	r3, [r0, #12]
 80168b4:	4629      	mov	r1, r5
 80168b6:	f7ff fa1d 	bl	8015cf4 <__mcmp>
 80168ba:	2800      	cmp	r0, #0
 80168bc:	da4e      	bge.n	801695c <_strtod_l+0x85c>
 80168be:	ea58 080a 	orrs.w	r8, r8, sl
 80168c2:	d174      	bne.n	80169ae <_strtod_l+0x8ae>
 80168c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d170      	bne.n	80169ae <_strtod_l+0x8ae>
 80168cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80168d0:	0d1b      	lsrs	r3, r3, #20
 80168d2:	051b      	lsls	r3, r3, #20
 80168d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80168d8:	d969      	bls.n	80169ae <_strtod_l+0x8ae>
 80168da:	6963      	ldr	r3, [r4, #20]
 80168dc:	b913      	cbnz	r3, 80168e4 <_strtod_l+0x7e4>
 80168de:	6923      	ldr	r3, [r4, #16]
 80168e0:	2b01      	cmp	r3, #1
 80168e2:	dd64      	ble.n	80169ae <_strtod_l+0x8ae>
 80168e4:	4621      	mov	r1, r4
 80168e6:	2201      	movs	r2, #1
 80168e8:	9805      	ldr	r0, [sp, #20]
 80168ea:	f7ff f997 	bl	8015c1c <__lshift>
 80168ee:	4629      	mov	r1, r5
 80168f0:	4604      	mov	r4, r0
 80168f2:	f7ff f9ff 	bl	8015cf4 <__mcmp>
 80168f6:	2800      	cmp	r0, #0
 80168f8:	dd59      	ble.n	80169ae <_strtod_l+0x8ae>
 80168fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80168fe:	9a06      	ldr	r2, [sp, #24]
 8016900:	0d1b      	lsrs	r3, r3, #20
 8016902:	051b      	lsls	r3, r3, #20
 8016904:	2a00      	cmp	r2, #0
 8016906:	d070      	beq.n	80169ea <_strtod_l+0x8ea>
 8016908:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801690c:	d86d      	bhi.n	80169ea <_strtod_l+0x8ea>
 801690e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016912:	f67f ae99 	bls.w	8016648 <_strtod_l+0x548>
 8016916:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8016948 <_strtod_l+0x848>
 801691a:	ec4b ab16 	vmov	d6, sl, fp
 801691e:	4b0e      	ldr	r3, [pc, #56]	@ (8016958 <_strtod_l+0x858>)
 8016920:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016924:	ee17 2a90 	vmov	r2, s15
 8016928:	4013      	ands	r3, r2
 801692a:	ec5b ab17 	vmov	sl, fp, d7
 801692e:	2b00      	cmp	r3, #0
 8016930:	f47f ae01 	bne.w	8016536 <_strtod_l+0x436>
 8016934:	9a05      	ldr	r2, [sp, #20]
 8016936:	2322      	movs	r3, #34	@ 0x22
 8016938:	6013      	str	r3, [r2, #0]
 801693a:	e5fc      	b.n	8016536 <_strtod_l+0x436>
 801693c:	f3af 8000 	nop.w
 8016940:	ffc00000 	.word	0xffc00000
 8016944:	41dfffff 	.word	0x41dfffff
 8016948:	00000000 	.word	0x00000000
 801694c:	39500000 	.word	0x39500000
 8016950:	080184a8 	.word	0x080184a8
 8016954:	fffffc02 	.word	0xfffffc02
 8016958:	7ff00000 	.word	0x7ff00000
 801695c:	46d9      	mov	r9, fp
 801695e:	d15d      	bne.n	8016a1c <_strtod_l+0x91c>
 8016960:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016964:	f1b8 0f00 	cmp.w	r8, #0
 8016968:	d02a      	beq.n	80169c0 <_strtod_l+0x8c0>
 801696a:	4aab      	ldr	r2, [pc, #684]	@ (8016c18 <_strtod_l+0xb18>)
 801696c:	4293      	cmp	r3, r2
 801696e:	d12a      	bne.n	80169c6 <_strtod_l+0x8c6>
 8016970:	9b06      	ldr	r3, [sp, #24]
 8016972:	4652      	mov	r2, sl
 8016974:	b1fb      	cbz	r3, 80169b6 <_strtod_l+0x8b6>
 8016976:	4ba9      	ldr	r3, [pc, #676]	@ (8016c1c <_strtod_l+0xb1c>)
 8016978:	ea0b 0303 	and.w	r3, fp, r3
 801697c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016980:	f04f 31ff 	mov.w	r1, #4294967295
 8016984:	d81a      	bhi.n	80169bc <_strtod_l+0x8bc>
 8016986:	0d1b      	lsrs	r3, r3, #20
 8016988:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801698c:	fa01 f303 	lsl.w	r3, r1, r3
 8016990:	429a      	cmp	r2, r3
 8016992:	d118      	bne.n	80169c6 <_strtod_l+0x8c6>
 8016994:	4ba2      	ldr	r3, [pc, #648]	@ (8016c20 <_strtod_l+0xb20>)
 8016996:	4599      	cmp	r9, r3
 8016998:	d102      	bne.n	80169a0 <_strtod_l+0x8a0>
 801699a:	3201      	adds	r2, #1
 801699c:	f43f adc0 	beq.w	8016520 <_strtod_l+0x420>
 80169a0:	4b9e      	ldr	r3, [pc, #632]	@ (8016c1c <_strtod_l+0xb1c>)
 80169a2:	ea09 0303 	and.w	r3, r9, r3
 80169a6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80169aa:	f04f 0a00 	mov.w	sl, #0
 80169ae:	9b06      	ldr	r3, [sp, #24]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d1b0      	bne.n	8016916 <_strtod_l+0x816>
 80169b4:	e5bf      	b.n	8016536 <_strtod_l+0x436>
 80169b6:	f04f 33ff 	mov.w	r3, #4294967295
 80169ba:	e7e9      	b.n	8016990 <_strtod_l+0x890>
 80169bc:	460b      	mov	r3, r1
 80169be:	e7e7      	b.n	8016990 <_strtod_l+0x890>
 80169c0:	ea53 030a 	orrs.w	r3, r3, sl
 80169c4:	d099      	beq.n	80168fa <_strtod_l+0x7fa>
 80169c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80169c8:	b1c3      	cbz	r3, 80169fc <_strtod_l+0x8fc>
 80169ca:	ea13 0f09 	tst.w	r3, r9
 80169ce:	d0ee      	beq.n	80169ae <_strtod_l+0x8ae>
 80169d0:	9a06      	ldr	r2, [sp, #24]
 80169d2:	4650      	mov	r0, sl
 80169d4:	4659      	mov	r1, fp
 80169d6:	f1b8 0f00 	cmp.w	r8, #0
 80169da:	d013      	beq.n	8016a04 <_strtod_l+0x904>
 80169dc:	f7ff fb75 	bl	80160ca <sulp>
 80169e0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80169e4:	ec5b ab17 	vmov	sl, fp, d7
 80169e8:	e7e1      	b.n	80169ae <_strtod_l+0x8ae>
 80169ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80169ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80169f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80169f6:	f04f 3aff 	mov.w	sl, #4294967295
 80169fa:	e7d8      	b.n	80169ae <_strtod_l+0x8ae>
 80169fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80169fe:	ea13 0f0a 	tst.w	r3, sl
 8016a02:	e7e4      	b.n	80169ce <_strtod_l+0x8ce>
 8016a04:	f7ff fb61 	bl	80160ca <sulp>
 8016a08:	ee39 0b40 	vsub.f64	d0, d9, d0
 8016a0c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a14:	ec5b ab10 	vmov	sl, fp, d0
 8016a18:	d1c9      	bne.n	80169ae <_strtod_l+0x8ae>
 8016a1a:	e615      	b.n	8016648 <_strtod_l+0x548>
 8016a1c:	4629      	mov	r1, r5
 8016a1e:	4620      	mov	r0, r4
 8016a20:	f7ff fae0 	bl	8015fe4 <__ratio>
 8016a24:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016a28:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a30:	d85d      	bhi.n	8016aee <_strtod_l+0x9ee>
 8016a32:	f1b8 0f00 	cmp.w	r8, #0
 8016a36:	d164      	bne.n	8016b02 <_strtod_l+0xa02>
 8016a38:	f1ba 0f00 	cmp.w	sl, #0
 8016a3c:	d14b      	bne.n	8016ad6 <_strtod_l+0x9d6>
 8016a3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016a42:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d160      	bne.n	8016b0c <_strtod_l+0xa0c>
 8016a4a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8016a4e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a56:	d401      	bmi.n	8016a5c <_strtod_l+0x95c>
 8016a58:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016a5c:	eeb1 ab48 	vneg.f64	d10, d8
 8016a60:	486e      	ldr	r0, [pc, #440]	@ (8016c1c <_strtod_l+0xb1c>)
 8016a62:	4970      	ldr	r1, [pc, #448]	@ (8016c24 <_strtod_l+0xb24>)
 8016a64:	ea09 0700 	and.w	r7, r9, r0
 8016a68:	428f      	cmp	r7, r1
 8016a6a:	ec53 2b1a 	vmov	r2, r3, d10
 8016a6e:	d17d      	bne.n	8016b6c <_strtod_l+0xa6c>
 8016a70:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8016a74:	ec4b ab1c 	vmov	d12, sl, fp
 8016a78:	eeb0 0b4c 	vmov.f64	d0, d12
 8016a7c:	f7ff f9ea 	bl	8015e54 <__ulp>
 8016a80:	4866      	ldr	r0, [pc, #408]	@ (8016c1c <_strtod_l+0xb1c>)
 8016a82:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8016a86:	ee1c 3a90 	vmov	r3, s25
 8016a8a:	4a67      	ldr	r2, [pc, #412]	@ (8016c28 <_strtod_l+0xb28>)
 8016a8c:	ea03 0100 	and.w	r1, r3, r0
 8016a90:	4291      	cmp	r1, r2
 8016a92:	ec5b ab1c 	vmov	sl, fp, d12
 8016a96:	d93c      	bls.n	8016b12 <_strtod_l+0xa12>
 8016a98:	ee19 2a90 	vmov	r2, s19
 8016a9c:	4b60      	ldr	r3, [pc, #384]	@ (8016c20 <_strtod_l+0xb20>)
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d104      	bne.n	8016aac <_strtod_l+0x9ac>
 8016aa2:	ee19 3a10 	vmov	r3, s18
 8016aa6:	3301      	adds	r3, #1
 8016aa8:	f43f ad3a 	beq.w	8016520 <_strtod_l+0x420>
 8016aac:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8016c20 <_strtod_l+0xb20>
 8016ab0:	f04f 3aff 	mov.w	sl, #4294967295
 8016ab4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016ab6:	9805      	ldr	r0, [sp, #20]
 8016ab8:	f7fe fe98 	bl	80157ec <_Bfree>
 8016abc:	9805      	ldr	r0, [sp, #20]
 8016abe:	4631      	mov	r1, r6
 8016ac0:	f7fe fe94 	bl	80157ec <_Bfree>
 8016ac4:	9805      	ldr	r0, [sp, #20]
 8016ac6:	4629      	mov	r1, r5
 8016ac8:	f7fe fe90 	bl	80157ec <_Bfree>
 8016acc:	9805      	ldr	r0, [sp, #20]
 8016ace:	4621      	mov	r1, r4
 8016ad0:	f7fe fe8c 	bl	80157ec <_Bfree>
 8016ad4:	e625      	b.n	8016722 <_strtod_l+0x622>
 8016ad6:	f1ba 0f01 	cmp.w	sl, #1
 8016ada:	d103      	bne.n	8016ae4 <_strtod_l+0x9e4>
 8016adc:	f1bb 0f00 	cmp.w	fp, #0
 8016ae0:	f43f adb2 	beq.w	8016648 <_strtod_l+0x548>
 8016ae4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016ae8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016aec:	e7b8      	b.n	8016a60 <_strtod_l+0x960>
 8016aee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016af2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016af6:	f1b8 0f00 	cmp.w	r8, #0
 8016afa:	d0af      	beq.n	8016a5c <_strtod_l+0x95c>
 8016afc:	eeb0 ab48 	vmov.f64	d10, d8
 8016b00:	e7ae      	b.n	8016a60 <_strtod_l+0x960>
 8016b02:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8016b06:	eeb0 8b4a 	vmov.f64	d8, d10
 8016b0a:	e7a9      	b.n	8016a60 <_strtod_l+0x960>
 8016b0c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016b10:	e7a6      	b.n	8016a60 <_strtod_l+0x960>
 8016b12:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016b16:	9b06      	ldr	r3, [sp, #24]
 8016b18:	46d9      	mov	r9, fp
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d1ca      	bne.n	8016ab4 <_strtod_l+0x9b4>
 8016b1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016b22:	0d1b      	lsrs	r3, r3, #20
 8016b24:	051b      	lsls	r3, r3, #20
 8016b26:	429f      	cmp	r7, r3
 8016b28:	d1c4      	bne.n	8016ab4 <_strtod_l+0x9b4>
 8016b2a:	ec51 0b18 	vmov	r0, r1, d8
 8016b2e:	f7e9 fe1b 	bl	8000768 <__aeabi_d2lz>
 8016b32:	f7e9 fdd3 	bl	80006dc <__aeabi_l2d>
 8016b36:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8016b3a:	ec41 0b17 	vmov	d7, r0, r1
 8016b3e:	ea49 090a 	orr.w	r9, r9, sl
 8016b42:	ea59 0908 	orrs.w	r9, r9, r8
 8016b46:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016b4a:	d03c      	beq.n	8016bc6 <_strtod_l+0xac6>
 8016b4c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8016c00 <_strtod_l+0xb00>
 8016b50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b58:	f53f aced 	bmi.w	8016536 <_strtod_l+0x436>
 8016b5c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016c08 <_strtod_l+0xb08>
 8016b60:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b68:	dda4      	ble.n	8016ab4 <_strtod_l+0x9b4>
 8016b6a:	e4e4      	b.n	8016536 <_strtod_l+0x436>
 8016b6c:	9906      	ldr	r1, [sp, #24]
 8016b6e:	b1e1      	cbz	r1, 8016baa <_strtod_l+0xaaa>
 8016b70:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8016b74:	d819      	bhi.n	8016baa <_strtod_l+0xaaa>
 8016b76:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8016b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b7e:	d811      	bhi.n	8016ba4 <_strtod_l+0xaa4>
 8016b80:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8016b84:	ee18 3a10 	vmov	r3, s16
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	bf38      	it	cc
 8016b8c:	2301      	movcc	r3, #1
 8016b8e:	ee08 3a10 	vmov	s16, r3
 8016b92:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8016b96:	f1b8 0f00 	cmp.w	r8, #0
 8016b9a:	d111      	bne.n	8016bc0 <_strtod_l+0xac0>
 8016b9c:	eeb1 7b48 	vneg.f64	d7, d8
 8016ba0:	ec53 2b17 	vmov	r2, r3, d7
 8016ba4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016ba8:	1bcb      	subs	r3, r1, r7
 8016baa:	eeb0 0b49 	vmov.f64	d0, d9
 8016bae:	ec43 2b1a 	vmov	d10, r2, r3
 8016bb2:	f7ff f94f 	bl	8015e54 <__ulp>
 8016bb6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8016bba:	ec5b ab19 	vmov	sl, fp, d9
 8016bbe:	e7aa      	b.n	8016b16 <_strtod_l+0xa16>
 8016bc0:	eeb0 7b48 	vmov.f64	d7, d8
 8016bc4:	e7ec      	b.n	8016ba0 <_strtod_l+0xaa0>
 8016bc6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016c10 <_strtod_l+0xb10>
 8016bca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bd2:	f57f af6f 	bpl.w	8016ab4 <_strtod_l+0x9b4>
 8016bd6:	e4ae      	b.n	8016536 <_strtod_l+0x436>
 8016bd8:	2300      	movs	r3, #0
 8016bda:	9308      	str	r3, [sp, #32]
 8016bdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016bde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016be0:	6013      	str	r3, [r2, #0]
 8016be2:	f7ff bacc 	b.w	801617e <_strtod_l+0x7e>
 8016be6:	2a65      	cmp	r2, #101	@ 0x65
 8016be8:	f43f abbc 	beq.w	8016364 <_strtod_l+0x264>
 8016bec:	2a45      	cmp	r2, #69	@ 0x45
 8016bee:	f43f abb9 	beq.w	8016364 <_strtod_l+0x264>
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	9306      	str	r3, [sp, #24]
 8016bf6:	f7ff bbf0 	b.w	80163da <_strtod_l+0x2da>
 8016bfa:	bf00      	nop
 8016bfc:	f3af 8000 	nop.w
 8016c00:	94a03595 	.word	0x94a03595
 8016c04:	3fdfffff 	.word	0x3fdfffff
 8016c08:	35afe535 	.word	0x35afe535
 8016c0c:	3fe00000 	.word	0x3fe00000
 8016c10:	94a03595 	.word	0x94a03595
 8016c14:	3fcfffff 	.word	0x3fcfffff
 8016c18:	000fffff 	.word	0x000fffff
 8016c1c:	7ff00000 	.word	0x7ff00000
 8016c20:	7fefffff 	.word	0x7fefffff
 8016c24:	7fe00000 	.word	0x7fe00000
 8016c28:	7c9fffff 	.word	0x7c9fffff

08016c2c <_strtod_r>:
 8016c2c:	4b01      	ldr	r3, [pc, #4]	@ (8016c34 <_strtod_r+0x8>)
 8016c2e:	f7ff ba67 	b.w	8016100 <_strtod_l>
 8016c32:	bf00      	nop
 8016c34:	240001e4 	.word	0x240001e4

08016c38 <_strtol_l.constprop.0>:
 8016c38:	2b24      	cmp	r3, #36	@ 0x24
 8016c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c3e:	4686      	mov	lr, r0
 8016c40:	4690      	mov	r8, r2
 8016c42:	d801      	bhi.n	8016c48 <_strtol_l.constprop.0+0x10>
 8016c44:	2b01      	cmp	r3, #1
 8016c46:	d106      	bne.n	8016c56 <_strtol_l.constprop.0+0x1e>
 8016c48:	f7fd fe6e 	bl	8014928 <__errno>
 8016c4c:	2316      	movs	r3, #22
 8016c4e:	6003      	str	r3, [r0, #0]
 8016c50:	2000      	movs	r0, #0
 8016c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c56:	4834      	ldr	r0, [pc, #208]	@ (8016d28 <_strtol_l.constprop.0+0xf0>)
 8016c58:	460d      	mov	r5, r1
 8016c5a:	462a      	mov	r2, r5
 8016c5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c60:	5d06      	ldrb	r6, [r0, r4]
 8016c62:	f016 0608 	ands.w	r6, r6, #8
 8016c66:	d1f8      	bne.n	8016c5a <_strtol_l.constprop.0+0x22>
 8016c68:	2c2d      	cmp	r4, #45	@ 0x2d
 8016c6a:	d12d      	bne.n	8016cc8 <_strtol_l.constprop.0+0x90>
 8016c6c:	782c      	ldrb	r4, [r5, #0]
 8016c6e:	2601      	movs	r6, #1
 8016c70:	1c95      	adds	r5, r2, #2
 8016c72:	f033 0210 	bics.w	r2, r3, #16
 8016c76:	d109      	bne.n	8016c8c <_strtol_l.constprop.0+0x54>
 8016c78:	2c30      	cmp	r4, #48	@ 0x30
 8016c7a:	d12a      	bne.n	8016cd2 <_strtol_l.constprop.0+0x9a>
 8016c7c:	782a      	ldrb	r2, [r5, #0]
 8016c7e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016c82:	2a58      	cmp	r2, #88	@ 0x58
 8016c84:	d125      	bne.n	8016cd2 <_strtol_l.constprop.0+0x9a>
 8016c86:	786c      	ldrb	r4, [r5, #1]
 8016c88:	2310      	movs	r3, #16
 8016c8a:	3502      	adds	r5, #2
 8016c8c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016c90:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016c94:	2200      	movs	r2, #0
 8016c96:	fbbc f9f3 	udiv	r9, ip, r3
 8016c9a:	4610      	mov	r0, r2
 8016c9c:	fb03 ca19 	mls	sl, r3, r9, ip
 8016ca0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016ca4:	2f09      	cmp	r7, #9
 8016ca6:	d81b      	bhi.n	8016ce0 <_strtol_l.constprop.0+0xa8>
 8016ca8:	463c      	mov	r4, r7
 8016caa:	42a3      	cmp	r3, r4
 8016cac:	dd27      	ble.n	8016cfe <_strtol_l.constprop.0+0xc6>
 8016cae:	1c57      	adds	r7, r2, #1
 8016cb0:	d007      	beq.n	8016cc2 <_strtol_l.constprop.0+0x8a>
 8016cb2:	4581      	cmp	r9, r0
 8016cb4:	d320      	bcc.n	8016cf8 <_strtol_l.constprop.0+0xc0>
 8016cb6:	d101      	bne.n	8016cbc <_strtol_l.constprop.0+0x84>
 8016cb8:	45a2      	cmp	sl, r4
 8016cba:	db1d      	blt.n	8016cf8 <_strtol_l.constprop.0+0xc0>
 8016cbc:	fb00 4003 	mla	r0, r0, r3, r4
 8016cc0:	2201      	movs	r2, #1
 8016cc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016cc6:	e7eb      	b.n	8016ca0 <_strtol_l.constprop.0+0x68>
 8016cc8:	2c2b      	cmp	r4, #43	@ 0x2b
 8016cca:	bf04      	itt	eq
 8016ccc:	782c      	ldrbeq	r4, [r5, #0]
 8016cce:	1c95      	addeq	r5, r2, #2
 8016cd0:	e7cf      	b.n	8016c72 <_strtol_l.constprop.0+0x3a>
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d1da      	bne.n	8016c8c <_strtol_l.constprop.0+0x54>
 8016cd6:	2c30      	cmp	r4, #48	@ 0x30
 8016cd8:	bf0c      	ite	eq
 8016cda:	2308      	moveq	r3, #8
 8016cdc:	230a      	movne	r3, #10
 8016cde:	e7d5      	b.n	8016c8c <_strtol_l.constprop.0+0x54>
 8016ce0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016ce4:	2f19      	cmp	r7, #25
 8016ce6:	d801      	bhi.n	8016cec <_strtol_l.constprop.0+0xb4>
 8016ce8:	3c37      	subs	r4, #55	@ 0x37
 8016cea:	e7de      	b.n	8016caa <_strtol_l.constprop.0+0x72>
 8016cec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016cf0:	2f19      	cmp	r7, #25
 8016cf2:	d804      	bhi.n	8016cfe <_strtol_l.constprop.0+0xc6>
 8016cf4:	3c57      	subs	r4, #87	@ 0x57
 8016cf6:	e7d8      	b.n	8016caa <_strtol_l.constprop.0+0x72>
 8016cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8016cfc:	e7e1      	b.n	8016cc2 <_strtol_l.constprop.0+0x8a>
 8016cfe:	1c53      	adds	r3, r2, #1
 8016d00:	d108      	bne.n	8016d14 <_strtol_l.constprop.0+0xdc>
 8016d02:	2322      	movs	r3, #34	@ 0x22
 8016d04:	f8ce 3000 	str.w	r3, [lr]
 8016d08:	4660      	mov	r0, ip
 8016d0a:	f1b8 0f00 	cmp.w	r8, #0
 8016d0e:	d0a0      	beq.n	8016c52 <_strtol_l.constprop.0+0x1a>
 8016d10:	1e69      	subs	r1, r5, #1
 8016d12:	e006      	b.n	8016d22 <_strtol_l.constprop.0+0xea>
 8016d14:	b106      	cbz	r6, 8016d18 <_strtol_l.constprop.0+0xe0>
 8016d16:	4240      	negs	r0, r0
 8016d18:	f1b8 0f00 	cmp.w	r8, #0
 8016d1c:	d099      	beq.n	8016c52 <_strtol_l.constprop.0+0x1a>
 8016d1e:	2a00      	cmp	r2, #0
 8016d20:	d1f6      	bne.n	8016d10 <_strtol_l.constprop.0+0xd8>
 8016d22:	f8c8 1000 	str.w	r1, [r8]
 8016d26:	e794      	b.n	8016c52 <_strtol_l.constprop.0+0x1a>
 8016d28:	080184d1 	.word	0x080184d1

08016d2c <_strtol_r>:
 8016d2c:	f7ff bf84 	b.w	8016c38 <_strtol_l.constprop.0>

08016d30 <__ssputs_r>:
 8016d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d34:	688e      	ldr	r6, [r1, #8]
 8016d36:	461f      	mov	r7, r3
 8016d38:	42be      	cmp	r6, r7
 8016d3a:	680b      	ldr	r3, [r1, #0]
 8016d3c:	4682      	mov	sl, r0
 8016d3e:	460c      	mov	r4, r1
 8016d40:	4690      	mov	r8, r2
 8016d42:	d82d      	bhi.n	8016da0 <__ssputs_r+0x70>
 8016d44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016d48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016d4c:	d026      	beq.n	8016d9c <__ssputs_r+0x6c>
 8016d4e:	6965      	ldr	r5, [r4, #20]
 8016d50:	6909      	ldr	r1, [r1, #16]
 8016d52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d56:	eba3 0901 	sub.w	r9, r3, r1
 8016d5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016d5e:	1c7b      	adds	r3, r7, #1
 8016d60:	444b      	add	r3, r9
 8016d62:	106d      	asrs	r5, r5, #1
 8016d64:	429d      	cmp	r5, r3
 8016d66:	bf38      	it	cc
 8016d68:	461d      	movcc	r5, r3
 8016d6a:	0553      	lsls	r3, r2, #21
 8016d6c:	d527      	bpl.n	8016dbe <__ssputs_r+0x8e>
 8016d6e:	4629      	mov	r1, r5
 8016d70:	f7fe fc70 	bl	8015654 <_malloc_r>
 8016d74:	4606      	mov	r6, r0
 8016d76:	b360      	cbz	r0, 8016dd2 <__ssputs_r+0xa2>
 8016d78:	6921      	ldr	r1, [r4, #16]
 8016d7a:	464a      	mov	r2, r9
 8016d7c:	f7fd fe01 	bl	8014982 <memcpy>
 8016d80:	89a3      	ldrh	r3, [r4, #12]
 8016d82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016d8a:	81a3      	strh	r3, [r4, #12]
 8016d8c:	6126      	str	r6, [r4, #16]
 8016d8e:	6165      	str	r5, [r4, #20]
 8016d90:	444e      	add	r6, r9
 8016d92:	eba5 0509 	sub.w	r5, r5, r9
 8016d96:	6026      	str	r6, [r4, #0]
 8016d98:	60a5      	str	r5, [r4, #8]
 8016d9a:	463e      	mov	r6, r7
 8016d9c:	42be      	cmp	r6, r7
 8016d9e:	d900      	bls.n	8016da2 <__ssputs_r+0x72>
 8016da0:	463e      	mov	r6, r7
 8016da2:	6820      	ldr	r0, [r4, #0]
 8016da4:	4632      	mov	r2, r6
 8016da6:	4641      	mov	r1, r8
 8016da8:	f000 fb6a 	bl	8017480 <memmove>
 8016dac:	68a3      	ldr	r3, [r4, #8]
 8016dae:	1b9b      	subs	r3, r3, r6
 8016db0:	60a3      	str	r3, [r4, #8]
 8016db2:	6823      	ldr	r3, [r4, #0]
 8016db4:	4433      	add	r3, r6
 8016db6:	6023      	str	r3, [r4, #0]
 8016db8:	2000      	movs	r0, #0
 8016dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dbe:	462a      	mov	r2, r5
 8016dc0:	f000 ff43 	bl	8017c4a <_realloc_r>
 8016dc4:	4606      	mov	r6, r0
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	d1e0      	bne.n	8016d8c <__ssputs_r+0x5c>
 8016dca:	6921      	ldr	r1, [r4, #16]
 8016dcc:	4650      	mov	r0, sl
 8016dce:	f7fe fbcd 	bl	801556c <_free_r>
 8016dd2:	230c      	movs	r3, #12
 8016dd4:	f8ca 3000 	str.w	r3, [sl]
 8016dd8:	89a3      	ldrh	r3, [r4, #12]
 8016dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016dde:	81a3      	strh	r3, [r4, #12]
 8016de0:	f04f 30ff 	mov.w	r0, #4294967295
 8016de4:	e7e9      	b.n	8016dba <__ssputs_r+0x8a>
	...

08016de8 <_svfiprintf_r>:
 8016de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dec:	4698      	mov	r8, r3
 8016dee:	898b      	ldrh	r3, [r1, #12]
 8016df0:	061b      	lsls	r3, r3, #24
 8016df2:	b09d      	sub	sp, #116	@ 0x74
 8016df4:	4607      	mov	r7, r0
 8016df6:	460d      	mov	r5, r1
 8016df8:	4614      	mov	r4, r2
 8016dfa:	d510      	bpl.n	8016e1e <_svfiprintf_r+0x36>
 8016dfc:	690b      	ldr	r3, [r1, #16]
 8016dfe:	b973      	cbnz	r3, 8016e1e <_svfiprintf_r+0x36>
 8016e00:	2140      	movs	r1, #64	@ 0x40
 8016e02:	f7fe fc27 	bl	8015654 <_malloc_r>
 8016e06:	6028      	str	r0, [r5, #0]
 8016e08:	6128      	str	r0, [r5, #16]
 8016e0a:	b930      	cbnz	r0, 8016e1a <_svfiprintf_r+0x32>
 8016e0c:	230c      	movs	r3, #12
 8016e0e:	603b      	str	r3, [r7, #0]
 8016e10:	f04f 30ff 	mov.w	r0, #4294967295
 8016e14:	b01d      	add	sp, #116	@ 0x74
 8016e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e1a:	2340      	movs	r3, #64	@ 0x40
 8016e1c:	616b      	str	r3, [r5, #20]
 8016e1e:	2300      	movs	r3, #0
 8016e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e22:	2320      	movs	r3, #32
 8016e24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e2c:	2330      	movs	r3, #48	@ 0x30
 8016e2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016fcc <_svfiprintf_r+0x1e4>
 8016e32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016e36:	f04f 0901 	mov.w	r9, #1
 8016e3a:	4623      	mov	r3, r4
 8016e3c:	469a      	mov	sl, r3
 8016e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e42:	b10a      	cbz	r2, 8016e48 <_svfiprintf_r+0x60>
 8016e44:	2a25      	cmp	r2, #37	@ 0x25
 8016e46:	d1f9      	bne.n	8016e3c <_svfiprintf_r+0x54>
 8016e48:	ebba 0b04 	subs.w	fp, sl, r4
 8016e4c:	d00b      	beq.n	8016e66 <_svfiprintf_r+0x7e>
 8016e4e:	465b      	mov	r3, fp
 8016e50:	4622      	mov	r2, r4
 8016e52:	4629      	mov	r1, r5
 8016e54:	4638      	mov	r0, r7
 8016e56:	f7ff ff6b 	bl	8016d30 <__ssputs_r>
 8016e5a:	3001      	adds	r0, #1
 8016e5c:	f000 80a7 	beq.w	8016fae <_svfiprintf_r+0x1c6>
 8016e60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e62:	445a      	add	r2, fp
 8016e64:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e66:	f89a 3000 	ldrb.w	r3, [sl]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	f000 809f 	beq.w	8016fae <_svfiprintf_r+0x1c6>
 8016e70:	2300      	movs	r3, #0
 8016e72:	f04f 32ff 	mov.w	r2, #4294967295
 8016e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e7a:	f10a 0a01 	add.w	sl, sl, #1
 8016e7e:	9304      	str	r3, [sp, #16]
 8016e80:	9307      	str	r3, [sp, #28]
 8016e82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016e86:	931a      	str	r3, [sp, #104]	@ 0x68
 8016e88:	4654      	mov	r4, sl
 8016e8a:	2205      	movs	r2, #5
 8016e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e90:	484e      	ldr	r0, [pc, #312]	@ (8016fcc <_svfiprintf_r+0x1e4>)
 8016e92:	f7e9 fa3d 	bl	8000310 <memchr>
 8016e96:	9a04      	ldr	r2, [sp, #16]
 8016e98:	b9d8      	cbnz	r0, 8016ed2 <_svfiprintf_r+0xea>
 8016e9a:	06d0      	lsls	r0, r2, #27
 8016e9c:	bf44      	itt	mi
 8016e9e:	2320      	movmi	r3, #32
 8016ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016ea4:	0711      	lsls	r1, r2, #28
 8016ea6:	bf44      	itt	mi
 8016ea8:	232b      	movmi	r3, #43	@ 0x2b
 8016eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016eae:	f89a 3000 	ldrb.w	r3, [sl]
 8016eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8016eb4:	d015      	beq.n	8016ee2 <_svfiprintf_r+0xfa>
 8016eb6:	9a07      	ldr	r2, [sp, #28]
 8016eb8:	4654      	mov	r4, sl
 8016eba:	2000      	movs	r0, #0
 8016ebc:	f04f 0c0a 	mov.w	ip, #10
 8016ec0:	4621      	mov	r1, r4
 8016ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ec6:	3b30      	subs	r3, #48	@ 0x30
 8016ec8:	2b09      	cmp	r3, #9
 8016eca:	d94b      	bls.n	8016f64 <_svfiprintf_r+0x17c>
 8016ecc:	b1b0      	cbz	r0, 8016efc <_svfiprintf_r+0x114>
 8016ece:	9207      	str	r2, [sp, #28]
 8016ed0:	e014      	b.n	8016efc <_svfiprintf_r+0x114>
 8016ed2:	eba0 0308 	sub.w	r3, r0, r8
 8016ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8016eda:	4313      	orrs	r3, r2
 8016edc:	9304      	str	r3, [sp, #16]
 8016ede:	46a2      	mov	sl, r4
 8016ee0:	e7d2      	b.n	8016e88 <_svfiprintf_r+0xa0>
 8016ee2:	9b03      	ldr	r3, [sp, #12]
 8016ee4:	1d19      	adds	r1, r3, #4
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	9103      	str	r1, [sp, #12]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	bfbb      	ittet	lt
 8016eee:	425b      	neglt	r3, r3
 8016ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8016ef4:	9307      	strge	r3, [sp, #28]
 8016ef6:	9307      	strlt	r3, [sp, #28]
 8016ef8:	bfb8      	it	lt
 8016efa:	9204      	strlt	r2, [sp, #16]
 8016efc:	7823      	ldrb	r3, [r4, #0]
 8016efe:	2b2e      	cmp	r3, #46	@ 0x2e
 8016f00:	d10a      	bne.n	8016f18 <_svfiprintf_r+0x130>
 8016f02:	7863      	ldrb	r3, [r4, #1]
 8016f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f06:	d132      	bne.n	8016f6e <_svfiprintf_r+0x186>
 8016f08:	9b03      	ldr	r3, [sp, #12]
 8016f0a:	1d1a      	adds	r2, r3, #4
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	9203      	str	r2, [sp, #12]
 8016f10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016f14:	3402      	adds	r4, #2
 8016f16:	9305      	str	r3, [sp, #20]
 8016f18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016fdc <_svfiprintf_r+0x1f4>
 8016f1c:	7821      	ldrb	r1, [r4, #0]
 8016f1e:	2203      	movs	r2, #3
 8016f20:	4650      	mov	r0, sl
 8016f22:	f7e9 f9f5 	bl	8000310 <memchr>
 8016f26:	b138      	cbz	r0, 8016f38 <_svfiprintf_r+0x150>
 8016f28:	9b04      	ldr	r3, [sp, #16]
 8016f2a:	eba0 000a 	sub.w	r0, r0, sl
 8016f2e:	2240      	movs	r2, #64	@ 0x40
 8016f30:	4082      	lsls	r2, r0
 8016f32:	4313      	orrs	r3, r2
 8016f34:	3401      	adds	r4, #1
 8016f36:	9304      	str	r3, [sp, #16]
 8016f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f3c:	4824      	ldr	r0, [pc, #144]	@ (8016fd0 <_svfiprintf_r+0x1e8>)
 8016f3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016f42:	2206      	movs	r2, #6
 8016f44:	f7e9 f9e4 	bl	8000310 <memchr>
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	d036      	beq.n	8016fba <_svfiprintf_r+0x1d2>
 8016f4c:	4b21      	ldr	r3, [pc, #132]	@ (8016fd4 <_svfiprintf_r+0x1ec>)
 8016f4e:	bb1b      	cbnz	r3, 8016f98 <_svfiprintf_r+0x1b0>
 8016f50:	9b03      	ldr	r3, [sp, #12]
 8016f52:	3307      	adds	r3, #7
 8016f54:	f023 0307 	bic.w	r3, r3, #7
 8016f58:	3308      	adds	r3, #8
 8016f5a:	9303      	str	r3, [sp, #12]
 8016f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f5e:	4433      	add	r3, r6
 8016f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f62:	e76a      	b.n	8016e3a <_svfiprintf_r+0x52>
 8016f64:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f68:	460c      	mov	r4, r1
 8016f6a:	2001      	movs	r0, #1
 8016f6c:	e7a8      	b.n	8016ec0 <_svfiprintf_r+0xd8>
 8016f6e:	2300      	movs	r3, #0
 8016f70:	3401      	adds	r4, #1
 8016f72:	9305      	str	r3, [sp, #20]
 8016f74:	4619      	mov	r1, r3
 8016f76:	f04f 0c0a 	mov.w	ip, #10
 8016f7a:	4620      	mov	r0, r4
 8016f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f80:	3a30      	subs	r2, #48	@ 0x30
 8016f82:	2a09      	cmp	r2, #9
 8016f84:	d903      	bls.n	8016f8e <_svfiprintf_r+0x1a6>
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d0c6      	beq.n	8016f18 <_svfiprintf_r+0x130>
 8016f8a:	9105      	str	r1, [sp, #20]
 8016f8c:	e7c4      	b.n	8016f18 <_svfiprintf_r+0x130>
 8016f8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f92:	4604      	mov	r4, r0
 8016f94:	2301      	movs	r3, #1
 8016f96:	e7f0      	b.n	8016f7a <_svfiprintf_r+0x192>
 8016f98:	ab03      	add	r3, sp, #12
 8016f9a:	9300      	str	r3, [sp, #0]
 8016f9c:	462a      	mov	r2, r5
 8016f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8016fd8 <_svfiprintf_r+0x1f0>)
 8016fa0:	a904      	add	r1, sp, #16
 8016fa2:	4638      	mov	r0, r7
 8016fa4:	f7fc fc90 	bl	80138c8 <_printf_float>
 8016fa8:	1c42      	adds	r2, r0, #1
 8016faa:	4606      	mov	r6, r0
 8016fac:	d1d6      	bne.n	8016f5c <_svfiprintf_r+0x174>
 8016fae:	89ab      	ldrh	r3, [r5, #12]
 8016fb0:	065b      	lsls	r3, r3, #25
 8016fb2:	f53f af2d 	bmi.w	8016e10 <_svfiprintf_r+0x28>
 8016fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016fb8:	e72c      	b.n	8016e14 <_svfiprintf_r+0x2c>
 8016fba:	ab03      	add	r3, sp, #12
 8016fbc:	9300      	str	r3, [sp, #0]
 8016fbe:	462a      	mov	r2, r5
 8016fc0:	4b05      	ldr	r3, [pc, #20]	@ (8016fd8 <_svfiprintf_r+0x1f0>)
 8016fc2:	a904      	add	r1, sp, #16
 8016fc4:	4638      	mov	r0, r7
 8016fc6:	f7fc ff07 	bl	8013dd8 <_printf_i>
 8016fca:	e7ed      	b.n	8016fa8 <_svfiprintf_r+0x1c0>
 8016fcc:	080185d1 	.word	0x080185d1
 8016fd0:	080185db 	.word	0x080185db
 8016fd4:	080138c9 	.word	0x080138c9
 8016fd8:	08016d31 	.word	0x08016d31
 8016fdc:	080185d7 	.word	0x080185d7

08016fe0 <__sfputc_r>:
 8016fe0:	6893      	ldr	r3, [r2, #8]
 8016fe2:	3b01      	subs	r3, #1
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	b410      	push	{r4}
 8016fe8:	6093      	str	r3, [r2, #8]
 8016fea:	da08      	bge.n	8016ffe <__sfputc_r+0x1e>
 8016fec:	6994      	ldr	r4, [r2, #24]
 8016fee:	42a3      	cmp	r3, r4
 8016ff0:	db01      	blt.n	8016ff6 <__sfputc_r+0x16>
 8016ff2:	290a      	cmp	r1, #10
 8016ff4:	d103      	bne.n	8016ffe <__sfputc_r+0x1e>
 8016ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ffa:	f7fd bbae 	b.w	801475a <__swbuf_r>
 8016ffe:	6813      	ldr	r3, [r2, #0]
 8017000:	1c58      	adds	r0, r3, #1
 8017002:	6010      	str	r0, [r2, #0]
 8017004:	7019      	strb	r1, [r3, #0]
 8017006:	4608      	mov	r0, r1
 8017008:	f85d 4b04 	ldr.w	r4, [sp], #4
 801700c:	4770      	bx	lr

0801700e <__sfputs_r>:
 801700e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017010:	4606      	mov	r6, r0
 8017012:	460f      	mov	r7, r1
 8017014:	4614      	mov	r4, r2
 8017016:	18d5      	adds	r5, r2, r3
 8017018:	42ac      	cmp	r4, r5
 801701a:	d101      	bne.n	8017020 <__sfputs_r+0x12>
 801701c:	2000      	movs	r0, #0
 801701e:	e007      	b.n	8017030 <__sfputs_r+0x22>
 8017020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017024:	463a      	mov	r2, r7
 8017026:	4630      	mov	r0, r6
 8017028:	f7ff ffda 	bl	8016fe0 <__sfputc_r>
 801702c:	1c43      	adds	r3, r0, #1
 801702e:	d1f3      	bne.n	8017018 <__sfputs_r+0xa>
 8017030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017034 <_vfiprintf_r>:
 8017034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017038:	460d      	mov	r5, r1
 801703a:	b09d      	sub	sp, #116	@ 0x74
 801703c:	4614      	mov	r4, r2
 801703e:	4698      	mov	r8, r3
 8017040:	4606      	mov	r6, r0
 8017042:	b118      	cbz	r0, 801704c <_vfiprintf_r+0x18>
 8017044:	6a03      	ldr	r3, [r0, #32]
 8017046:	b90b      	cbnz	r3, 801704c <_vfiprintf_r+0x18>
 8017048:	f7fd fa7e 	bl	8014548 <__sinit>
 801704c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801704e:	07d9      	lsls	r1, r3, #31
 8017050:	d405      	bmi.n	801705e <_vfiprintf_r+0x2a>
 8017052:	89ab      	ldrh	r3, [r5, #12]
 8017054:	059a      	lsls	r2, r3, #22
 8017056:	d402      	bmi.n	801705e <_vfiprintf_r+0x2a>
 8017058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801705a:	f7fd fc90 	bl	801497e <__retarget_lock_acquire_recursive>
 801705e:	89ab      	ldrh	r3, [r5, #12]
 8017060:	071b      	lsls	r3, r3, #28
 8017062:	d501      	bpl.n	8017068 <_vfiprintf_r+0x34>
 8017064:	692b      	ldr	r3, [r5, #16]
 8017066:	b99b      	cbnz	r3, 8017090 <_vfiprintf_r+0x5c>
 8017068:	4629      	mov	r1, r5
 801706a:	4630      	mov	r0, r6
 801706c:	f7fd fbb4 	bl	80147d8 <__swsetup_r>
 8017070:	b170      	cbz	r0, 8017090 <_vfiprintf_r+0x5c>
 8017072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017074:	07dc      	lsls	r4, r3, #31
 8017076:	d504      	bpl.n	8017082 <_vfiprintf_r+0x4e>
 8017078:	f04f 30ff 	mov.w	r0, #4294967295
 801707c:	b01d      	add	sp, #116	@ 0x74
 801707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017082:	89ab      	ldrh	r3, [r5, #12]
 8017084:	0598      	lsls	r0, r3, #22
 8017086:	d4f7      	bmi.n	8017078 <_vfiprintf_r+0x44>
 8017088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801708a:	f7fd fc79 	bl	8014980 <__retarget_lock_release_recursive>
 801708e:	e7f3      	b.n	8017078 <_vfiprintf_r+0x44>
 8017090:	2300      	movs	r3, #0
 8017092:	9309      	str	r3, [sp, #36]	@ 0x24
 8017094:	2320      	movs	r3, #32
 8017096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801709a:	f8cd 800c 	str.w	r8, [sp, #12]
 801709e:	2330      	movs	r3, #48	@ 0x30
 80170a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017250 <_vfiprintf_r+0x21c>
 80170a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170a8:	f04f 0901 	mov.w	r9, #1
 80170ac:	4623      	mov	r3, r4
 80170ae:	469a      	mov	sl, r3
 80170b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170b4:	b10a      	cbz	r2, 80170ba <_vfiprintf_r+0x86>
 80170b6:	2a25      	cmp	r2, #37	@ 0x25
 80170b8:	d1f9      	bne.n	80170ae <_vfiprintf_r+0x7a>
 80170ba:	ebba 0b04 	subs.w	fp, sl, r4
 80170be:	d00b      	beq.n	80170d8 <_vfiprintf_r+0xa4>
 80170c0:	465b      	mov	r3, fp
 80170c2:	4622      	mov	r2, r4
 80170c4:	4629      	mov	r1, r5
 80170c6:	4630      	mov	r0, r6
 80170c8:	f7ff ffa1 	bl	801700e <__sfputs_r>
 80170cc:	3001      	adds	r0, #1
 80170ce:	f000 80a7 	beq.w	8017220 <_vfiprintf_r+0x1ec>
 80170d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170d4:	445a      	add	r2, fp
 80170d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80170d8:	f89a 3000 	ldrb.w	r3, [sl]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	f000 809f 	beq.w	8017220 <_vfiprintf_r+0x1ec>
 80170e2:	2300      	movs	r3, #0
 80170e4:	f04f 32ff 	mov.w	r2, #4294967295
 80170e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170ec:	f10a 0a01 	add.w	sl, sl, #1
 80170f0:	9304      	str	r3, [sp, #16]
 80170f2:	9307      	str	r3, [sp, #28]
 80170f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80170f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80170fa:	4654      	mov	r4, sl
 80170fc:	2205      	movs	r2, #5
 80170fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017102:	4853      	ldr	r0, [pc, #332]	@ (8017250 <_vfiprintf_r+0x21c>)
 8017104:	f7e9 f904 	bl	8000310 <memchr>
 8017108:	9a04      	ldr	r2, [sp, #16]
 801710a:	b9d8      	cbnz	r0, 8017144 <_vfiprintf_r+0x110>
 801710c:	06d1      	lsls	r1, r2, #27
 801710e:	bf44      	itt	mi
 8017110:	2320      	movmi	r3, #32
 8017112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017116:	0713      	lsls	r3, r2, #28
 8017118:	bf44      	itt	mi
 801711a:	232b      	movmi	r3, #43	@ 0x2b
 801711c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017120:	f89a 3000 	ldrb.w	r3, [sl]
 8017124:	2b2a      	cmp	r3, #42	@ 0x2a
 8017126:	d015      	beq.n	8017154 <_vfiprintf_r+0x120>
 8017128:	9a07      	ldr	r2, [sp, #28]
 801712a:	4654      	mov	r4, sl
 801712c:	2000      	movs	r0, #0
 801712e:	f04f 0c0a 	mov.w	ip, #10
 8017132:	4621      	mov	r1, r4
 8017134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017138:	3b30      	subs	r3, #48	@ 0x30
 801713a:	2b09      	cmp	r3, #9
 801713c:	d94b      	bls.n	80171d6 <_vfiprintf_r+0x1a2>
 801713e:	b1b0      	cbz	r0, 801716e <_vfiprintf_r+0x13a>
 8017140:	9207      	str	r2, [sp, #28]
 8017142:	e014      	b.n	801716e <_vfiprintf_r+0x13a>
 8017144:	eba0 0308 	sub.w	r3, r0, r8
 8017148:	fa09 f303 	lsl.w	r3, r9, r3
 801714c:	4313      	orrs	r3, r2
 801714e:	9304      	str	r3, [sp, #16]
 8017150:	46a2      	mov	sl, r4
 8017152:	e7d2      	b.n	80170fa <_vfiprintf_r+0xc6>
 8017154:	9b03      	ldr	r3, [sp, #12]
 8017156:	1d19      	adds	r1, r3, #4
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	9103      	str	r1, [sp, #12]
 801715c:	2b00      	cmp	r3, #0
 801715e:	bfbb      	ittet	lt
 8017160:	425b      	neglt	r3, r3
 8017162:	f042 0202 	orrlt.w	r2, r2, #2
 8017166:	9307      	strge	r3, [sp, #28]
 8017168:	9307      	strlt	r3, [sp, #28]
 801716a:	bfb8      	it	lt
 801716c:	9204      	strlt	r2, [sp, #16]
 801716e:	7823      	ldrb	r3, [r4, #0]
 8017170:	2b2e      	cmp	r3, #46	@ 0x2e
 8017172:	d10a      	bne.n	801718a <_vfiprintf_r+0x156>
 8017174:	7863      	ldrb	r3, [r4, #1]
 8017176:	2b2a      	cmp	r3, #42	@ 0x2a
 8017178:	d132      	bne.n	80171e0 <_vfiprintf_r+0x1ac>
 801717a:	9b03      	ldr	r3, [sp, #12]
 801717c:	1d1a      	adds	r2, r3, #4
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	9203      	str	r2, [sp, #12]
 8017182:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017186:	3402      	adds	r4, #2
 8017188:	9305      	str	r3, [sp, #20]
 801718a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017260 <_vfiprintf_r+0x22c>
 801718e:	7821      	ldrb	r1, [r4, #0]
 8017190:	2203      	movs	r2, #3
 8017192:	4650      	mov	r0, sl
 8017194:	f7e9 f8bc 	bl	8000310 <memchr>
 8017198:	b138      	cbz	r0, 80171aa <_vfiprintf_r+0x176>
 801719a:	9b04      	ldr	r3, [sp, #16]
 801719c:	eba0 000a 	sub.w	r0, r0, sl
 80171a0:	2240      	movs	r2, #64	@ 0x40
 80171a2:	4082      	lsls	r2, r0
 80171a4:	4313      	orrs	r3, r2
 80171a6:	3401      	adds	r4, #1
 80171a8:	9304      	str	r3, [sp, #16]
 80171aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171ae:	4829      	ldr	r0, [pc, #164]	@ (8017254 <_vfiprintf_r+0x220>)
 80171b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80171b4:	2206      	movs	r2, #6
 80171b6:	f7e9 f8ab 	bl	8000310 <memchr>
 80171ba:	2800      	cmp	r0, #0
 80171bc:	d03f      	beq.n	801723e <_vfiprintf_r+0x20a>
 80171be:	4b26      	ldr	r3, [pc, #152]	@ (8017258 <_vfiprintf_r+0x224>)
 80171c0:	bb1b      	cbnz	r3, 801720a <_vfiprintf_r+0x1d6>
 80171c2:	9b03      	ldr	r3, [sp, #12]
 80171c4:	3307      	adds	r3, #7
 80171c6:	f023 0307 	bic.w	r3, r3, #7
 80171ca:	3308      	adds	r3, #8
 80171cc:	9303      	str	r3, [sp, #12]
 80171ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171d0:	443b      	add	r3, r7
 80171d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80171d4:	e76a      	b.n	80170ac <_vfiprintf_r+0x78>
 80171d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80171da:	460c      	mov	r4, r1
 80171dc:	2001      	movs	r0, #1
 80171de:	e7a8      	b.n	8017132 <_vfiprintf_r+0xfe>
 80171e0:	2300      	movs	r3, #0
 80171e2:	3401      	adds	r4, #1
 80171e4:	9305      	str	r3, [sp, #20]
 80171e6:	4619      	mov	r1, r3
 80171e8:	f04f 0c0a 	mov.w	ip, #10
 80171ec:	4620      	mov	r0, r4
 80171ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171f2:	3a30      	subs	r2, #48	@ 0x30
 80171f4:	2a09      	cmp	r2, #9
 80171f6:	d903      	bls.n	8017200 <_vfiprintf_r+0x1cc>
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d0c6      	beq.n	801718a <_vfiprintf_r+0x156>
 80171fc:	9105      	str	r1, [sp, #20]
 80171fe:	e7c4      	b.n	801718a <_vfiprintf_r+0x156>
 8017200:	fb0c 2101 	mla	r1, ip, r1, r2
 8017204:	4604      	mov	r4, r0
 8017206:	2301      	movs	r3, #1
 8017208:	e7f0      	b.n	80171ec <_vfiprintf_r+0x1b8>
 801720a:	ab03      	add	r3, sp, #12
 801720c:	9300      	str	r3, [sp, #0]
 801720e:	462a      	mov	r2, r5
 8017210:	4b12      	ldr	r3, [pc, #72]	@ (801725c <_vfiprintf_r+0x228>)
 8017212:	a904      	add	r1, sp, #16
 8017214:	4630      	mov	r0, r6
 8017216:	f7fc fb57 	bl	80138c8 <_printf_float>
 801721a:	4607      	mov	r7, r0
 801721c:	1c78      	adds	r0, r7, #1
 801721e:	d1d6      	bne.n	80171ce <_vfiprintf_r+0x19a>
 8017220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017222:	07d9      	lsls	r1, r3, #31
 8017224:	d405      	bmi.n	8017232 <_vfiprintf_r+0x1fe>
 8017226:	89ab      	ldrh	r3, [r5, #12]
 8017228:	059a      	lsls	r2, r3, #22
 801722a:	d402      	bmi.n	8017232 <_vfiprintf_r+0x1fe>
 801722c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801722e:	f7fd fba7 	bl	8014980 <__retarget_lock_release_recursive>
 8017232:	89ab      	ldrh	r3, [r5, #12]
 8017234:	065b      	lsls	r3, r3, #25
 8017236:	f53f af1f 	bmi.w	8017078 <_vfiprintf_r+0x44>
 801723a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801723c:	e71e      	b.n	801707c <_vfiprintf_r+0x48>
 801723e:	ab03      	add	r3, sp, #12
 8017240:	9300      	str	r3, [sp, #0]
 8017242:	462a      	mov	r2, r5
 8017244:	4b05      	ldr	r3, [pc, #20]	@ (801725c <_vfiprintf_r+0x228>)
 8017246:	a904      	add	r1, sp, #16
 8017248:	4630      	mov	r0, r6
 801724a:	f7fc fdc5 	bl	8013dd8 <_printf_i>
 801724e:	e7e4      	b.n	801721a <_vfiprintf_r+0x1e6>
 8017250:	080185d1 	.word	0x080185d1
 8017254:	080185db 	.word	0x080185db
 8017258:	080138c9 	.word	0x080138c9
 801725c:	0801700f 	.word	0x0801700f
 8017260:	080185d7 	.word	0x080185d7

08017264 <__sflush_r>:
 8017264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801726c:	0716      	lsls	r6, r2, #28
 801726e:	4605      	mov	r5, r0
 8017270:	460c      	mov	r4, r1
 8017272:	d454      	bmi.n	801731e <__sflush_r+0xba>
 8017274:	684b      	ldr	r3, [r1, #4]
 8017276:	2b00      	cmp	r3, #0
 8017278:	dc02      	bgt.n	8017280 <__sflush_r+0x1c>
 801727a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801727c:	2b00      	cmp	r3, #0
 801727e:	dd48      	ble.n	8017312 <__sflush_r+0xae>
 8017280:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017282:	2e00      	cmp	r6, #0
 8017284:	d045      	beq.n	8017312 <__sflush_r+0xae>
 8017286:	2300      	movs	r3, #0
 8017288:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801728c:	682f      	ldr	r7, [r5, #0]
 801728e:	6a21      	ldr	r1, [r4, #32]
 8017290:	602b      	str	r3, [r5, #0]
 8017292:	d030      	beq.n	80172f6 <__sflush_r+0x92>
 8017294:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017296:	89a3      	ldrh	r3, [r4, #12]
 8017298:	0759      	lsls	r1, r3, #29
 801729a:	d505      	bpl.n	80172a8 <__sflush_r+0x44>
 801729c:	6863      	ldr	r3, [r4, #4]
 801729e:	1ad2      	subs	r2, r2, r3
 80172a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80172a2:	b10b      	cbz	r3, 80172a8 <__sflush_r+0x44>
 80172a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80172a6:	1ad2      	subs	r2, r2, r3
 80172a8:	2300      	movs	r3, #0
 80172aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80172ac:	6a21      	ldr	r1, [r4, #32]
 80172ae:	4628      	mov	r0, r5
 80172b0:	47b0      	blx	r6
 80172b2:	1c43      	adds	r3, r0, #1
 80172b4:	89a3      	ldrh	r3, [r4, #12]
 80172b6:	d106      	bne.n	80172c6 <__sflush_r+0x62>
 80172b8:	6829      	ldr	r1, [r5, #0]
 80172ba:	291d      	cmp	r1, #29
 80172bc:	d82b      	bhi.n	8017316 <__sflush_r+0xb2>
 80172be:	4a2a      	ldr	r2, [pc, #168]	@ (8017368 <__sflush_r+0x104>)
 80172c0:	410a      	asrs	r2, r1
 80172c2:	07d6      	lsls	r6, r2, #31
 80172c4:	d427      	bmi.n	8017316 <__sflush_r+0xb2>
 80172c6:	2200      	movs	r2, #0
 80172c8:	6062      	str	r2, [r4, #4]
 80172ca:	04d9      	lsls	r1, r3, #19
 80172cc:	6922      	ldr	r2, [r4, #16]
 80172ce:	6022      	str	r2, [r4, #0]
 80172d0:	d504      	bpl.n	80172dc <__sflush_r+0x78>
 80172d2:	1c42      	adds	r2, r0, #1
 80172d4:	d101      	bne.n	80172da <__sflush_r+0x76>
 80172d6:	682b      	ldr	r3, [r5, #0]
 80172d8:	b903      	cbnz	r3, 80172dc <__sflush_r+0x78>
 80172da:	6560      	str	r0, [r4, #84]	@ 0x54
 80172dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80172de:	602f      	str	r7, [r5, #0]
 80172e0:	b1b9      	cbz	r1, 8017312 <__sflush_r+0xae>
 80172e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80172e6:	4299      	cmp	r1, r3
 80172e8:	d002      	beq.n	80172f0 <__sflush_r+0x8c>
 80172ea:	4628      	mov	r0, r5
 80172ec:	f7fe f93e 	bl	801556c <_free_r>
 80172f0:	2300      	movs	r3, #0
 80172f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80172f4:	e00d      	b.n	8017312 <__sflush_r+0xae>
 80172f6:	2301      	movs	r3, #1
 80172f8:	4628      	mov	r0, r5
 80172fa:	47b0      	blx	r6
 80172fc:	4602      	mov	r2, r0
 80172fe:	1c50      	adds	r0, r2, #1
 8017300:	d1c9      	bne.n	8017296 <__sflush_r+0x32>
 8017302:	682b      	ldr	r3, [r5, #0]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d0c6      	beq.n	8017296 <__sflush_r+0x32>
 8017308:	2b1d      	cmp	r3, #29
 801730a:	d001      	beq.n	8017310 <__sflush_r+0xac>
 801730c:	2b16      	cmp	r3, #22
 801730e:	d11e      	bne.n	801734e <__sflush_r+0xea>
 8017310:	602f      	str	r7, [r5, #0]
 8017312:	2000      	movs	r0, #0
 8017314:	e022      	b.n	801735c <__sflush_r+0xf8>
 8017316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801731a:	b21b      	sxth	r3, r3
 801731c:	e01b      	b.n	8017356 <__sflush_r+0xf2>
 801731e:	690f      	ldr	r7, [r1, #16]
 8017320:	2f00      	cmp	r7, #0
 8017322:	d0f6      	beq.n	8017312 <__sflush_r+0xae>
 8017324:	0793      	lsls	r3, r2, #30
 8017326:	680e      	ldr	r6, [r1, #0]
 8017328:	bf08      	it	eq
 801732a:	694b      	ldreq	r3, [r1, #20]
 801732c:	600f      	str	r7, [r1, #0]
 801732e:	bf18      	it	ne
 8017330:	2300      	movne	r3, #0
 8017332:	eba6 0807 	sub.w	r8, r6, r7
 8017336:	608b      	str	r3, [r1, #8]
 8017338:	f1b8 0f00 	cmp.w	r8, #0
 801733c:	dde9      	ble.n	8017312 <__sflush_r+0xae>
 801733e:	6a21      	ldr	r1, [r4, #32]
 8017340:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017342:	4643      	mov	r3, r8
 8017344:	463a      	mov	r2, r7
 8017346:	4628      	mov	r0, r5
 8017348:	47b0      	blx	r6
 801734a:	2800      	cmp	r0, #0
 801734c:	dc08      	bgt.n	8017360 <__sflush_r+0xfc>
 801734e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017356:	81a3      	strh	r3, [r4, #12]
 8017358:	f04f 30ff 	mov.w	r0, #4294967295
 801735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017360:	4407      	add	r7, r0
 8017362:	eba8 0800 	sub.w	r8, r8, r0
 8017366:	e7e7      	b.n	8017338 <__sflush_r+0xd4>
 8017368:	dfbffffe 	.word	0xdfbffffe

0801736c <_fflush_r>:
 801736c:	b538      	push	{r3, r4, r5, lr}
 801736e:	690b      	ldr	r3, [r1, #16]
 8017370:	4605      	mov	r5, r0
 8017372:	460c      	mov	r4, r1
 8017374:	b913      	cbnz	r3, 801737c <_fflush_r+0x10>
 8017376:	2500      	movs	r5, #0
 8017378:	4628      	mov	r0, r5
 801737a:	bd38      	pop	{r3, r4, r5, pc}
 801737c:	b118      	cbz	r0, 8017386 <_fflush_r+0x1a>
 801737e:	6a03      	ldr	r3, [r0, #32]
 8017380:	b90b      	cbnz	r3, 8017386 <_fflush_r+0x1a>
 8017382:	f7fd f8e1 	bl	8014548 <__sinit>
 8017386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d0f3      	beq.n	8017376 <_fflush_r+0xa>
 801738e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017390:	07d0      	lsls	r0, r2, #31
 8017392:	d404      	bmi.n	801739e <_fflush_r+0x32>
 8017394:	0599      	lsls	r1, r3, #22
 8017396:	d402      	bmi.n	801739e <_fflush_r+0x32>
 8017398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801739a:	f7fd faf0 	bl	801497e <__retarget_lock_acquire_recursive>
 801739e:	4628      	mov	r0, r5
 80173a0:	4621      	mov	r1, r4
 80173a2:	f7ff ff5f 	bl	8017264 <__sflush_r>
 80173a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80173a8:	07da      	lsls	r2, r3, #31
 80173aa:	4605      	mov	r5, r0
 80173ac:	d4e4      	bmi.n	8017378 <_fflush_r+0xc>
 80173ae:	89a3      	ldrh	r3, [r4, #12]
 80173b0:	059b      	lsls	r3, r3, #22
 80173b2:	d4e1      	bmi.n	8017378 <_fflush_r+0xc>
 80173b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80173b6:	f7fd fae3 	bl	8014980 <__retarget_lock_release_recursive>
 80173ba:	e7dd      	b.n	8017378 <_fflush_r+0xc>

080173bc <__swhatbuf_r>:
 80173bc:	b570      	push	{r4, r5, r6, lr}
 80173be:	460c      	mov	r4, r1
 80173c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173c4:	2900      	cmp	r1, #0
 80173c6:	b096      	sub	sp, #88	@ 0x58
 80173c8:	4615      	mov	r5, r2
 80173ca:	461e      	mov	r6, r3
 80173cc:	da0d      	bge.n	80173ea <__swhatbuf_r+0x2e>
 80173ce:	89a3      	ldrh	r3, [r4, #12]
 80173d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80173d4:	f04f 0100 	mov.w	r1, #0
 80173d8:	bf14      	ite	ne
 80173da:	2340      	movne	r3, #64	@ 0x40
 80173dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80173e0:	2000      	movs	r0, #0
 80173e2:	6031      	str	r1, [r6, #0]
 80173e4:	602b      	str	r3, [r5, #0]
 80173e6:	b016      	add	sp, #88	@ 0x58
 80173e8:	bd70      	pop	{r4, r5, r6, pc}
 80173ea:	466a      	mov	r2, sp
 80173ec:	f000 f874 	bl	80174d8 <_fstat_r>
 80173f0:	2800      	cmp	r0, #0
 80173f2:	dbec      	blt.n	80173ce <__swhatbuf_r+0x12>
 80173f4:	9901      	ldr	r1, [sp, #4]
 80173f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80173fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80173fe:	4259      	negs	r1, r3
 8017400:	4159      	adcs	r1, r3
 8017402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017406:	e7eb      	b.n	80173e0 <__swhatbuf_r+0x24>

08017408 <__smakebuf_r>:
 8017408:	898b      	ldrh	r3, [r1, #12]
 801740a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801740c:	079d      	lsls	r5, r3, #30
 801740e:	4606      	mov	r6, r0
 8017410:	460c      	mov	r4, r1
 8017412:	d507      	bpl.n	8017424 <__smakebuf_r+0x1c>
 8017414:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017418:	6023      	str	r3, [r4, #0]
 801741a:	6123      	str	r3, [r4, #16]
 801741c:	2301      	movs	r3, #1
 801741e:	6163      	str	r3, [r4, #20]
 8017420:	b003      	add	sp, #12
 8017422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017424:	ab01      	add	r3, sp, #4
 8017426:	466a      	mov	r2, sp
 8017428:	f7ff ffc8 	bl	80173bc <__swhatbuf_r>
 801742c:	9f00      	ldr	r7, [sp, #0]
 801742e:	4605      	mov	r5, r0
 8017430:	4639      	mov	r1, r7
 8017432:	4630      	mov	r0, r6
 8017434:	f7fe f90e 	bl	8015654 <_malloc_r>
 8017438:	b948      	cbnz	r0, 801744e <__smakebuf_r+0x46>
 801743a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801743e:	059a      	lsls	r2, r3, #22
 8017440:	d4ee      	bmi.n	8017420 <__smakebuf_r+0x18>
 8017442:	f023 0303 	bic.w	r3, r3, #3
 8017446:	f043 0302 	orr.w	r3, r3, #2
 801744a:	81a3      	strh	r3, [r4, #12]
 801744c:	e7e2      	b.n	8017414 <__smakebuf_r+0xc>
 801744e:	89a3      	ldrh	r3, [r4, #12]
 8017450:	6020      	str	r0, [r4, #0]
 8017452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017456:	81a3      	strh	r3, [r4, #12]
 8017458:	9b01      	ldr	r3, [sp, #4]
 801745a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801745e:	b15b      	cbz	r3, 8017478 <__smakebuf_r+0x70>
 8017460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017464:	4630      	mov	r0, r6
 8017466:	f000 f849 	bl	80174fc <_isatty_r>
 801746a:	b128      	cbz	r0, 8017478 <__smakebuf_r+0x70>
 801746c:	89a3      	ldrh	r3, [r4, #12]
 801746e:	f023 0303 	bic.w	r3, r3, #3
 8017472:	f043 0301 	orr.w	r3, r3, #1
 8017476:	81a3      	strh	r3, [r4, #12]
 8017478:	89a3      	ldrh	r3, [r4, #12]
 801747a:	431d      	orrs	r5, r3
 801747c:	81a5      	strh	r5, [r4, #12]
 801747e:	e7cf      	b.n	8017420 <__smakebuf_r+0x18>

08017480 <memmove>:
 8017480:	4288      	cmp	r0, r1
 8017482:	b510      	push	{r4, lr}
 8017484:	eb01 0402 	add.w	r4, r1, r2
 8017488:	d902      	bls.n	8017490 <memmove+0x10>
 801748a:	4284      	cmp	r4, r0
 801748c:	4623      	mov	r3, r4
 801748e:	d807      	bhi.n	80174a0 <memmove+0x20>
 8017490:	1e43      	subs	r3, r0, #1
 8017492:	42a1      	cmp	r1, r4
 8017494:	d008      	beq.n	80174a8 <memmove+0x28>
 8017496:	f811 2b01 	ldrb.w	r2, [r1], #1
 801749a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801749e:	e7f8      	b.n	8017492 <memmove+0x12>
 80174a0:	4402      	add	r2, r0
 80174a2:	4601      	mov	r1, r0
 80174a4:	428a      	cmp	r2, r1
 80174a6:	d100      	bne.n	80174aa <memmove+0x2a>
 80174a8:	bd10      	pop	{r4, pc}
 80174aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80174ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80174b2:	e7f7      	b.n	80174a4 <memmove+0x24>

080174b4 <strncmp>:
 80174b4:	b510      	push	{r4, lr}
 80174b6:	b16a      	cbz	r2, 80174d4 <strncmp+0x20>
 80174b8:	3901      	subs	r1, #1
 80174ba:	1884      	adds	r4, r0, r2
 80174bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80174c4:	429a      	cmp	r2, r3
 80174c6:	d103      	bne.n	80174d0 <strncmp+0x1c>
 80174c8:	42a0      	cmp	r0, r4
 80174ca:	d001      	beq.n	80174d0 <strncmp+0x1c>
 80174cc:	2a00      	cmp	r2, #0
 80174ce:	d1f5      	bne.n	80174bc <strncmp+0x8>
 80174d0:	1ad0      	subs	r0, r2, r3
 80174d2:	bd10      	pop	{r4, pc}
 80174d4:	4610      	mov	r0, r2
 80174d6:	e7fc      	b.n	80174d2 <strncmp+0x1e>

080174d8 <_fstat_r>:
 80174d8:	b538      	push	{r3, r4, r5, lr}
 80174da:	4d07      	ldr	r5, [pc, #28]	@ (80174f8 <_fstat_r+0x20>)
 80174dc:	2300      	movs	r3, #0
 80174de:	4604      	mov	r4, r0
 80174e0:	4608      	mov	r0, r1
 80174e2:	4611      	mov	r1, r2
 80174e4:	602b      	str	r3, [r5, #0]
 80174e6:	f7f1 fb62 	bl	8008bae <_fstat>
 80174ea:	1c43      	adds	r3, r0, #1
 80174ec:	d102      	bne.n	80174f4 <_fstat_r+0x1c>
 80174ee:	682b      	ldr	r3, [r5, #0]
 80174f0:	b103      	cbz	r3, 80174f4 <_fstat_r+0x1c>
 80174f2:	6023      	str	r3, [r4, #0]
 80174f4:	bd38      	pop	{r3, r4, r5, pc}
 80174f6:	bf00      	nop
 80174f8:	24001b24 	.word	0x24001b24

080174fc <_isatty_r>:
 80174fc:	b538      	push	{r3, r4, r5, lr}
 80174fe:	4d06      	ldr	r5, [pc, #24]	@ (8017518 <_isatty_r+0x1c>)
 8017500:	2300      	movs	r3, #0
 8017502:	4604      	mov	r4, r0
 8017504:	4608      	mov	r0, r1
 8017506:	602b      	str	r3, [r5, #0]
 8017508:	f7f1 fb61 	bl	8008bce <_isatty>
 801750c:	1c43      	adds	r3, r0, #1
 801750e:	d102      	bne.n	8017516 <_isatty_r+0x1a>
 8017510:	682b      	ldr	r3, [r5, #0]
 8017512:	b103      	cbz	r3, 8017516 <_isatty_r+0x1a>
 8017514:	6023      	str	r3, [r4, #0]
 8017516:	bd38      	pop	{r3, r4, r5, pc}
 8017518:	24001b24 	.word	0x24001b24

0801751c <_sbrk_r>:
 801751c:	b538      	push	{r3, r4, r5, lr}
 801751e:	4d06      	ldr	r5, [pc, #24]	@ (8017538 <_sbrk_r+0x1c>)
 8017520:	2300      	movs	r3, #0
 8017522:	4604      	mov	r4, r0
 8017524:	4608      	mov	r0, r1
 8017526:	602b      	str	r3, [r5, #0]
 8017528:	f7f1 fb6a 	bl	8008c00 <_sbrk>
 801752c:	1c43      	adds	r3, r0, #1
 801752e:	d102      	bne.n	8017536 <_sbrk_r+0x1a>
 8017530:	682b      	ldr	r3, [r5, #0]
 8017532:	b103      	cbz	r3, 8017536 <_sbrk_r+0x1a>
 8017534:	6023      	str	r3, [r4, #0]
 8017536:	bd38      	pop	{r3, r4, r5, pc}
 8017538:	24001b24 	.word	0x24001b24
 801753c:	00000000 	.word	0x00000000

08017540 <nan>:
 8017540:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017548 <nan+0x8>
 8017544:	4770      	bx	lr
 8017546:	bf00      	nop
 8017548:	00000000 	.word	0x00000000
 801754c:	7ff80000 	.word	0x7ff80000

08017550 <__assert_func>:
 8017550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017552:	4614      	mov	r4, r2
 8017554:	461a      	mov	r2, r3
 8017556:	4b09      	ldr	r3, [pc, #36]	@ (801757c <__assert_func+0x2c>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	4605      	mov	r5, r0
 801755c:	68d8      	ldr	r0, [r3, #12]
 801755e:	b954      	cbnz	r4, 8017576 <__assert_func+0x26>
 8017560:	4b07      	ldr	r3, [pc, #28]	@ (8017580 <__assert_func+0x30>)
 8017562:	461c      	mov	r4, r3
 8017564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017568:	9100      	str	r1, [sp, #0]
 801756a:	462b      	mov	r3, r5
 801756c:	4905      	ldr	r1, [pc, #20]	@ (8017584 <__assert_func+0x34>)
 801756e:	f000 fba7 	bl	8017cc0 <fiprintf>
 8017572:	f000 fbb7 	bl	8017ce4 <abort>
 8017576:	4b04      	ldr	r3, [pc, #16]	@ (8017588 <__assert_func+0x38>)
 8017578:	e7f4      	b.n	8017564 <__assert_func+0x14>
 801757a:	bf00      	nop
 801757c:	24000194 	.word	0x24000194
 8017580:	08018625 	.word	0x08018625
 8017584:	080185f7 	.word	0x080185f7
 8017588:	080185ea 	.word	0x080185ea

0801758c <_calloc_r>:
 801758c:	b570      	push	{r4, r5, r6, lr}
 801758e:	fba1 5402 	umull	r5, r4, r1, r2
 8017592:	b93c      	cbnz	r4, 80175a4 <_calloc_r+0x18>
 8017594:	4629      	mov	r1, r5
 8017596:	f7fe f85d 	bl	8015654 <_malloc_r>
 801759a:	4606      	mov	r6, r0
 801759c:	b928      	cbnz	r0, 80175aa <_calloc_r+0x1e>
 801759e:	2600      	movs	r6, #0
 80175a0:	4630      	mov	r0, r6
 80175a2:	bd70      	pop	{r4, r5, r6, pc}
 80175a4:	220c      	movs	r2, #12
 80175a6:	6002      	str	r2, [r0, #0]
 80175a8:	e7f9      	b.n	801759e <_calloc_r+0x12>
 80175aa:	462a      	mov	r2, r5
 80175ac:	4621      	mov	r1, r4
 80175ae:	f7fd f969 	bl	8014884 <memset>
 80175b2:	e7f5      	b.n	80175a0 <_calloc_r+0x14>

080175b4 <rshift>:
 80175b4:	6903      	ldr	r3, [r0, #16]
 80175b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80175ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80175c2:	f100 0414 	add.w	r4, r0, #20
 80175c6:	dd45      	ble.n	8017654 <rshift+0xa0>
 80175c8:	f011 011f 	ands.w	r1, r1, #31
 80175cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80175d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80175d4:	d10c      	bne.n	80175f0 <rshift+0x3c>
 80175d6:	f100 0710 	add.w	r7, r0, #16
 80175da:	4629      	mov	r1, r5
 80175dc:	42b1      	cmp	r1, r6
 80175de:	d334      	bcc.n	801764a <rshift+0x96>
 80175e0:	1a9b      	subs	r3, r3, r2
 80175e2:	009b      	lsls	r3, r3, #2
 80175e4:	1eea      	subs	r2, r5, #3
 80175e6:	4296      	cmp	r6, r2
 80175e8:	bf38      	it	cc
 80175ea:	2300      	movcc	r3, #0
 80175ec:	4423      	add	r3, r4
 80175ee:	e015      	b.n	801761c <rshift+0x68>
 80175f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80175f4:	f1c1 0820 	rsb	r8, r1, #32
 80175f8:	40cf      	lsrs	r7, r1
 80175fa:	f105 0e04 	add.w	lr, r5, #4
 80175fe:	46a1      	mov	r9, r4
 8017600:	4576      	cmp	r6, lr
 8017602:	46f4      	mov	ip, lr
 8017604:	d815      	bhi.n	8017632 <rshift+0x7e>
 8017606:	1a9a      	subs	r2, r3, r2
 8017608:	0092      	lsls	r2, r2, #2
 801760a:	3a04      	subs	r2, #4
 801760c:	3501      	adds	r5, #1
 801760e:	42ae      	cmp	r6, r5
 8017610:	bf38      	it	cc
 8017612:	2200      	movcc	r2, #0
 8017614:	18a3      	adds	r3, r4, r2
 8017616:	50a7      	str	r7, [r4, r2]
 8017618:	b107      	cbz	r7, 801761c <rshift+0x68>
 801761a:	3304      	adds	r3, #4
 801761c:	1b1a      	subs	r2, r3, r4
 801761e:	42a3      	cmp	r3, r4
 8017620:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017624:	bf08      	it	eq
 8017626:	2300      	moveq	r3, #0
 8017628:	6102      	str	r2, [r0, #16]
 801762a:	bf08      	it	eq
 801762c:	6143      	streq	r3, [r0, #20]
 801762e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017632:	f8dc c000 	ldr.w	ip, [ip]
 8017636:	fa0c fc08 	lsl.w	ip, ip, r8
 801763a:	ea4c 0707 	orr.w	r7, ip, r7
 801763e:	f849 7b04 	str.w	r7, [r9], #4
 8017642:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017646:	40cf      	lsrs	r7, r1
 8017648:	e7da      	b.n	8017600 <rshift+0x4c>
 801764a:	f851 cb04 	ldr.w	ip, [r1], #4
 801764e:	f847 cf04 	str.w	ip, [r7, #4]!
 8017652:	e7c3      	b.n	80175dc <rshift+0x28>
 8017654:	4623      	mov	r3, r4
 8017656:	e7e1      	b.n	801761c <rshift+0x68>

08017658 <__hexdig_fun>:
 8017658:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801765c:	2b09      	cmp	r3, #9
 801765e:	d802      	bhi.n	8017666 <__hexdig_fun+0xe>
 8017660:	3820      	subs	r0, #32
 8017662:	b2c0      	uxtb	r0, r0
 8017664:	4770      	bx	lr
 8017666:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801766a:	2b05      	cmp	r3, #5
 801766c:	d801      	bhi.n	8017672 <__hexdig_fun+0x1a>
 801766e:	3847      	subs	r0, #71	@ 0x47
 8017670:	e7f7      	b.n	8017662 <__hexdig_fun+0xa>
 8017672:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017676:	2b05      	cmp	r3, #5
 8017678:	d801      	bhi.n	801767e <__hexdig_fun+0x26>
 801767a:	3827      	subs	r0, #39	@ 0x27
 801767c:	e7f1      	b.n	8017662 <__hexdig_fun+0xa>
 801767e:	2000      	movs	r0, #0
 8017680:	4770      	bx	lr
	...

08017684 <__gethex>:
 8017684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017688:	b085      	sub	sp, #20
 801768a:	468a      	mov	sl, r1
 801768c:	9302      	str	r3, [sp, #8]
 801768e:	680b      	ldr	r3, [r1, #0]
 8017690:	9001      	str	r0, [sp, #4]
 8017692:	4690      	mov	r8, r2
 8017694:	1c9c      	adds	r4, r3, #2
 8017696:	46a1      	mov	r9, r4
 8017698:	f814 0b01 	ldrb.w	r0, [r4], #1
 801769c:	2830      	cmp	r0, #48	@ 0x30
 801769e:	d0fa      	beq.n	8017696 <__gethex+0x12>
 80176a0:	eba9 0303 	sub.w	r3, r9, r3
 80176a4:	f1a3 0b02 	sub.w	fp, r3, #2
 80176a8:	f7ff ffd6 	bl	8017658 <__hexdig_fun>
 80176ac:	4605      	mov	r5, r0
 80176ae:	2800      	cmp	r0, #0
 80176b0:	d168      	bne.n	8017784 <__gethex+0x100>
 80176b2:	49a0      	ldr	r1, [pc, #640]	@ (8017934 <__gethex+0x2b0>)
 80176b4:	2201      	movs	r2, #1
 80176b6:	4648      	mov	r0, r9
 80176b8:	f7ff fefc 	bl	80174b4 <strncmp>
 80176bc:	4607      	mov	r7, r0
 80176be:	2800      	cmp	r0, #0
 80176c0:	d167      	bne.n	8017792 <__gethex+0x10e>
 80176c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80176c6:	4626      	mov	r6, r4
 80176c8:	f7ff ffc6 	bl	8017658 <__hexdig_fun>
 80176cc:	2800      	cmp	r0, #0
 80176ce:	d062      	beq.n	8017796 <__gethex+0x112>
 80176d0:	4623      	mov	r3, r4
 80176d2:	7818      	ldrb	r0, [r3, #0]
 80176d4:	2830      	cmp	r0, #48	@ 0x30
 80176d6:	4699      	mov	r9, r3
 80176d8:	f103 0301 	add.w	r3, r3, #1
 80176dc:	d0f9      	beq.n	80176d2 <__gethex+0x4e>
 80176de:	f7ff ffbb 	bl	8017658 <__hexdig_fun>
 80176e2:	fab0 f580 	clz	r5, r0
 80176e6:	096d      	lsrs	r5, r5, #5
 80176e8:	f04f 0b01 	mov.w	fp, #1
 80176ec:	464a      	mov	r2, r9
 80176ee:	4616      	mov	r6, r2
 80176f0:	3201      	adds	r2, #1
 80176f2:	7830      	ldrb	r0, [r6, #0]
 80176f4:	f7ff ffb0 	bl	8017658 <__hexdig_fun>
 80176f8:	2800      	cmp	r0, #0
 80176fa:	d1f8      	bne.n	80176ee <__gethex+0x6a>
 80176fc:	498d      	ldr	r1, [pc, #564]	@ (8017934 <__gethex+0x2b0>)
 80176fe:	2201      	movs	r2, #1
 8017700:	4630      	mov	r0, r6
 8017702:	f7ff fed7 	bl	80174b4 <strncmp>
 8017706:	2800      	cmp	r0, #0
 8017708:	d13f      	bne.n	801778a <__gethex+0x106>
 801770a:	b944      	cbnz	r4, 801771e <__gethex+0x9a>
 801770c:	1c74      	adds	r4, r6, #1
 801770e:	4622      	mov	r2, r4
 8017710:	4616      	mov	r6, r2
 8017712:	3201      	adds	r2, #1
 8017714:	7830      	ldrb	r0, [r6, #0]
 8017716:	f7ff ff9f 	bl	8017658 <__hexdig_fun>
 801771a:	2800      	cmp	r0, #0
 801771c:	d1f8      	bne.n	8017710 <__gethex+0x8c>
 801771e:	1ba4      	subs	r4, r4, r6
 8017720:	00a7      	lsls	r7, r4, #2
 8017722:	7833      	ldrb	r3, [r6, #0]
 8017724:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017728:	2b50      	cmp	r3, #80	@ 0x50
 801772a:	d13e      	bne.n	80177aa <__gethex+0x126>
 801772c:	7873      	ldrb	r3, [r6, #1]
 801772e:	2b2b      	cmp	r3, #43	@ 0x2b
 8017730:	d033      	beq.n	801779a <__gethex+0x116>
 8017732:	2b2d      	cmp	r3, #45	@ 0x2d
 8017734:	d034      	beq.n	80177a0 <__gethex+0x11c>
 8017736:	1c71      	adds	r1, r6, #1
 8017738:	2400      	movs	r4, #0
 801773a:	7808      	ldrb	r0, [r1, #0]
 801773c:	f7ff ff8c 	bl	8017658 <__hexdig_fun>
 8017740:	1e43      	subs	r3, r0, #1
 8017742:	b2db      	uxtb	r3, r3
 8017744:	2b18      	cmp	r3, #24
 8017746:	d830      	bhi.n	80177aa <__gethex+0x126>
 8017748:	f1a0 0210 	sub.w	r2, r0, #16
 801774c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017750:	f7ff ff82 	bl	8017658 <__hexdig_fun>
 8017754:	f100 3cff 	add.w	ip, r0, #4294967295
 8017758:	fa5f fc8c 	uxtb.w	ip, ip
 801775c:	f1bc 0f18 	cmp.w	ip, #24
 8017760:	f04f 030a 	mov.w	r3, #10
 8017764:	d91e      	bls.n	80177a4 <__gethex+0x120>
 8017766:	b104      	cbz	r4, 801776a <__gethex+0xe6>
 8017768:	4252      	negs	r2, r2
 801776a:	4417      	add	r7, r2
 801776c:	f8ca 1000 	str.w	r1, [sl]
 8017770:	b1ed      	cbz	r5, 80177ae <__gethex+0x12a>
 8017772:	f1bb 0f00 	cmp.w	fp, #0
 8017776:	bf0c      	ite	eq
 8017778:	2506      	moveq	r5, #6
 801777a:	2500      	movne	r5, #0
 801777c:	4628      	mov	r0, r5
 801777e:	b005      	add	sp, #20
 8017780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017784:	2500      	movs	r5, #0
 8017786:	462c      	mov	r4, r5
 8017788:	e7b0      	b.n	80176ec <__gethex+0x68>
 801778a:	2c00      	cmp	r4, #0
 801778c:	d1c7      	bne.n	801771e <__gethex+0x9a>
 801778e:	4627      	mov	r7, r4
 8017790:	e7c7      	b.n	8017722 <__gethex+0x9e>
 8017792:	464e      	mov	r6, r9
 8017794:	462f      	mov	r7, r5
 8017796:	2501      	movs	r5, #1
 8017798:	e7c3      	b.n	8017722 <__gethex+0x9e>
 801779a:	2400      	movs	r4, #0
 801779c:	1cb1      	adds	r1, r6, #2
 801779e:	e7cc      	b.n	801773a <__gethex+0xb6>
 80177a0:	2401      	movs	r4, #1
 80177a2:	e7fb      	b.n	801779c <__gethex+0x118>
 80177a4:	fb03 0002 	mla	r0, r3, r2, r0
 80177a8:	e7ce      	b.n	8017748 <__gethex+0xc4>
 80177aa:	4631      	mov	r1, r6
 80177ac:	e7de      	b.n	801776c <__gethex+0xe8>
 80177ae:	eba6 0309 	sub.w	r3, r6, r9
 80177b2:	3b01      	subs	r3, #1
 80177b4:	4629      	mov	r1, r5
 80177b6:	2b07      	cmp	r3, #7
 80177b8:	dc0a      	bgt.n	80177d0 <__gethex+0x14c>
 80177ba:	9801      	ldr	r0, [sp, #4]
 80177bc:	f7fd ffd6 	bl	801576c <_Balloc>
 80177c0:	4604      	mov	r4, r0
 80177c2:	b940      	cbnz	r0, 80177d6 <__gethex+0x152>
 80177c4:	4b5c      	ldr	r3, [pc, #368]	@ (8017938 <__gethex+0x2b4>)
 80177c6:	4602      	mov	r2, r0
 80177c8:	21e4      	movs	r1, #228	@ 0xe4
 80177ca:	485c      	ldr	r0, [pc, #368]	@ (801793c <__gethex+0x2b8>)
 80177cc:	f7ff fec0 	bl	8017550 <__assert_func>
 80177d0:	3101      	adds	r1, #1
 80177d2:	105b      	asrs	r3, r3, #1
 80177d4:	e7ef      	b.n	80177b6 <__gethex+0x132>
 80177d6:	f100 0a14 	add.w	sl, r0, #20
 80177da:	2300      	movs	r3, #0
 80177dc:	4655      	mov	r5, sl
 80177de:	469b      	mov	fp, r3
 80177e0:	45b1      	cmp	r9, r6
 80177e2:	d337      	bcc.n	8017854 <__gethex+0x1d0>
 80177e4:	f845 bb04 	str.w	fp, [r5], #4
 80177e8:	eba5 050a 	sub.w	r5, r5, sl
 80177ec:	10ad      	asrs	r5, r5, #2
 80177ee:	6125      	str	r5, [r4, #16]
 80177f0:	4658      	mov	r0, fp
 80177f2:	f7fe f8ad 	bl	8015950 <__hi0bits>
 80177f6:	016d      	lsls	r5, r5, #5
 80177f8:	f8d8 6000 	ldr.w	r6, [r8]
 80177fc:	1a2d      	subs	r5, r5, r0
 80177fe:	42b5      	cmp	r5, r6
 8017800:	dd54      	ble.n	80178ac <__gethex+0x228>
 8017802:	1bad      	subs	r5, r5, r6
 8017804:	4629      	mov	r1, r5
 8017806:	4620      	mov	r0, r4
 8017808:	f7fe fc3e 	bl	8016088 <__any_on>
 801780c:	4681      	mov	r9, r0
 801780e:	b178      	cbz	r0, 8017830 <__gethex+0x1ac>
 8017810:	1e6b      	subs	r3, r5, #1
 8017812:	1159      	asrs	r1, r3, #5
 8017814:	f003 021f 	and.w	r2, r3, #31
 8017818:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801781c:	f04f 0901 	mov.w	r9, #1
 8017820:	fa09 f202 	lsl.w	r2, r9, r2
 8017824:	420a      	tst	r2, r1
 8017826:	d003      	beq.n	8017830 <__gethex+0x1ac>
 8017828:	454b      	cmp	r3, r9
 801782a:	dc36      	bgt.n	801789a <__gethex+0x216>
 801782c:	f04f 0902 	mov.w	r9, #2
 8017830:	4629      	mov	r1, r5
 8017832:	4620      	mov	r0, r4
 8017834:	f7ff febe 	bl	80175b4 <rshift>
 8017838:	442f      	add	r7, r5
 801783a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801783e:	42bb      	cmp	r3, r7
 8017840:	da42      	bge.n	80178c8 <__gethex+0x244>
 8017842:	9801      	ldr	r0, [sp, #4]
 8017844:	4621      	mov	r1, r4
 8017846:	f7fd ffd1 	bl	80157ec <_Bfree>
 801784a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801784c:	2300      	movs	r3, #0
 801784e:	6013      	str	r3, [r2, #0]
 8017850:	25a3      	movs	r5, #163	@ 0xa3
 8017852:	e793      	b.n	801777c <__gethex+0xf8>
 8017854:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017858:	2a2e      	cmp	r2, #46	@ 0x2e
 801785a:	d012      	beq.n	8017882 <__gethex+0x1fe>
 801785c:	2b20      	cmp	r3, #32
 801785e:	d104      	bne.n	801786a <__gethex+0x1e6>
 8017860:	f845 bb04 	str.w	fp, [r5], #4
 8017864:	f04f 0b00 	mov.w	fp, #0
 8017868:	465b      	mov	r3, fp
 801786a:	7830      	ldrb	r0, [r6, #0]
 801786c:	9303      	str	r3, [sp, #12]
 801786e:	f7ff fef3 	bl	8017658 <__hexdig_fun>
 8017872:	9b03      	ldr	r3, [sp, #12]
 8017874:	f000 000f 	and.w	r0, r0, #15
 8017878:	4098      	lsls	r0, r3
 801787a:	ea4b 0b00 	orr.w	fp, fp, r0
 801787e:	3304      	adds	r3, #4
 8017880:	e7ae      	b.n	80177e0 <__gethex+0x15c>
 8017882:	45b1      	cmp	r9, r6
 8017884:	d8ea      	bhi.n	801785c <__gethex+0x1d8>
 8017886:	492b      	ldr	r1, [pc, #172]	@ (8017934 <__gethex+0x2b0>)
 8017888:	9303      	str	r3, [sp, #12]
 801788a:	2201      	movs	r2, #1
 801788c:	4630      	mov	r0, r6
 801788e:	f7ff fe11 	bl	80174b4 <strncmp>
 8017892:	9b03      	ldr	r3, [sp, #12]
 8017894:	2800      	cmp	r0, #0
 8017896:	d1e1      	bne.n	801785c <__gethex+0x1d8>
 8017898:	e7a2      	b.n	80177e0 <__gethex+0x15c>
 801789a:	1ea9      	subs	r1, r5, #2
 801789c:	4620      	mov	r0, r4
 801789e:	f7fe fbf3 	bl	8016088 <__any_on>
 80178a2:	2800      	cmp	r0, #0
 80178a4:	d0c2      	beq.n	801782c <__gethex+0x1a8>
 80178a6:	f04f 0903 	mov.w	r9, #3
 80178aa:	e7c1      	b.n	8017830 <__gethex+0x1ac>
 80178ac:	da09      	bge.n	80178c2 <__gethex+0x23e>
 80178ae:	1b75      	subs	r5, r6, r5
 80178b0:	4621      	mov	r1, r4
 80178b2:	9801      	ldr	r0, [sp, #4]
 80178b4:	462a      	mov	r2, r5
 80178b6:	f7fe f9b1 	bl	8015c1c <__lshift>
 80178ba:	1b7f      	subs	r7, r7, r5
 80178bc:	4604      	mov	r4, r0
 80178be:	f100 0a14 	add.w	sl, r0, #20
 80178c2:	f04f 0900 	mov.w	r9, #0
 80178c6:	e7b8      	b.n	801783a <__gethex+0x1b6>
 80178c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80178cc:	42bd      	cmp	r5, r7
 80178ce:	dd6f      	ble.n	80179b0 <__gethex+0x32c>
 80178d0:	1bed      	subs	r5, r5, r7
 80178d2:	42ae      	cmp	r6, r5
 80178d4:	dc34      	bgt.n	8017940 <__gethex+0x2bc>
 80178d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80178da:	2b02      	cmp	r3, #2
 80178dc:	d022      	beq.n	8017924 <__gethex+0x2a0>
 80178de:	2b03      	cmp	r3, #3
 80178e0:	d024      	beq.n	801792c <__gethex+0x2a8>
 80178e2:	2b01      	cmp	r3, #1
 80178e4:	d115      	bne.n	8017912 <__gethex+0x28e>
 80178e6:	42ae      	cmp	r6, r5
 80178e8:	d113      	bne.n	8017912 <__gethex+0x28e>
 80178ea:	2e01      	cmp	r6, #1
 80178ec:	d10b      	bne.n	8017906 <__gethex+0x282>
 80178ee:	9a02      	ldr	r2, [sp, #8]
 80178f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80178f4:	6013      	str	r3, [r2, #0]
 80178f6:	2301      	movs	r3, #1
 80178f8:	6123      	str	r3, [r4, #16]
 80178fa:	f8ca 3000 	str.w	r3, [sl]
 80178fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017900:	2562      	movs	r5, #98	@ 0x62
 8017902:	601c      	str	r4, [r3, #0]
 8017904:	e73a      	b.n	801777c <__gethex+0xf8>
 8017906:	1e71      	subs	r1, r6, #1
 8017908:	4620      	mov	r0, r4
 801790a:	f7fe fbbd 	bl	8016088 <__any_on>
 801790e:	2800      	cmp	r0, #0
 8017910:	d1ed      	bne.n	80178ee <__gethex+0x26a>
 8017912:	9801      	ldr	r0, [sp, #4]
 8017914:	4621      	mov	r1, r4
 8017916:	f7fd ff69 	bl	80157ec <_Bfree>
 801791a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801791c:	2300      	movs	r3, #0
 801791e:	6013      	str	r3, [r2, #0]
 8017920:	2550      	movs	r5, #80	@ 0x50
 8017922:	e72b      	b.n	801777c <__gethex+0xf8>
 8017924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017926:	2b00      	cmp	r3, #0
 8017928:	d1f3      	bne.n	8017912 <__gethex+0x28e>
 801792a:	e7e0      	b.n	80178ee <__gethex+0x26a>
 801792c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801792e:	2b00      	cmp	r3, #0
 8017930:	d1dd      	bne.n	80178ee <__gethex+0x26a>
 8017932:	e7ee      	b.n	8017912 <__gethex+0x28e>
 8017934:	08018478 	.word	0x08018478
 8017938:	0801830d 	.word	0x0801830d
 801793c:	08018626 	.word	0x08018626
 8017940:	1e6f      	subs	r7, r5, #1
 8017942:	f1b9 0f00 	cmp.w	r9, #0
 8017946:	d130      	bne.n	80179aa <__gethex+0x326>
 8017948:	b127      	cbz	r7, 8017954 <__gethex+0x2d0>
 801794a:	4639      	mov	r1, r7
 801794c:	4620      	mov	r0, r4
 801794e:	f7fe fb9b 	bl	8016088 <__any_on>
 8017952:	4681      	mov	r9, r0
 8017954:	117a      	asrs	r2, r7, #5
 8017956:	2301      	movs	r3, #1
 8017958:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801795c:	f007 071f 	and.w	r7, r7, #31
 8017960:	40bb      	lsls	r3, r7
 8017962:	4213      	tst	r3, r2
 8017964:	4629      	mov	r1, r5
 8017966:	4620      	mov	r0, r4
 8017968:	bf18      	it	ne
 801796a:	f049 0902 	orrne.w	r9, r9, #2
 801796e:	f7ff fe21 	bl	80175b4 <rshift>
 8017972:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017976:	1b76      	subs	r6, r6, r5
 8017978:	2502      	movs	r5, #2
 801797a:	f1b9 0f00 	cmp.w	r9, #0
 801797e:	d047      	beq.n	8017a10 <__gethex+0x38c>
 8017980:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017984:	2b02      	cmp	r3, #2
 8017986:	d015      	beq.n	80179b4 <__gethex+0x330>
 8017988:	2b03      	cmp	r3, #3
 801798a:	d017      	beq.n	80179bc <__gethex+0x338>
 801798c:	2b01      	cmp	r3, #1
 801798e:	d109      	bne.n	80179a4 <__gethex+0x320>
 8017990:	f019 0f02 	tst.w	r9, #2
 8017994:	d006      	beq.n	80179a4 <__gethex+0x320>
 8017996:	f8da 3000 	ldr.w	r3, [sl]
 801799a:	ea49 0903 	orr.w	r9, r9, r3
 801799e:	f019 0f01 	tst.w	r9, #1
 80179a2:	d10e      	bne.n	80179c2 <__gethex+0x33e>
 80179a4:	f045 0510 	orr.w	r5, r5, #16
 80179a8:	e032      	b.n	8017a10 <__gethex+0x38c>
 80179aa:	f04f 0901 	mov.w	r9, #1
 80179ae:	e7d1      	b.n	8017954 <__gethex+0x2d0>
 80179b0:	2501      	movs	r5, #1
 80179b2:	e7e2      	b.n	801797a <__gethex+0x2f6>
 80179b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80179b6:	f1c3 0301 	rsb	r3, r3, #1
 80179ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80179bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d0f0      	beq.n	80179a4 <__gethex+0x320>
 80179c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80179c6:	f104 0314 	add.w	r3, r4, #20
 80179ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80179ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80179d2:	f04f 0c00 	mov.w	ip, #0
 80179d6:	4618      	mov	r0, r3
 80179d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80179dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80179e0:	d01b      	beq.n	8017a1a <__gethex+0x396>
 80179e2:	3201      	adds	r2, #1
 80179e4:	6002      	str	r2, [r0, #0]
 80179e6:	2d02      	cmp	r5, #2
 80179e8:	f104 0314 	add.w	r3, r4, #20
 80179ec:	d13c      	bne.n	8017a68 <__gethex+0x3e4>
 80179ee:	f8d8 2000 	ldr.w	r2, [r8]
 80179f2:	3a01      	subs	r2, #1
 80179f4:	42b2      	cmp	r2, r6
 80179f6:	d109      	bne.n	8017a0c <__gethex+0x388>
 80179f8:	1171      	asrs	r1, r6, #5
 80179fa:	2201      	movs	r2, #1
 80179fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017a00:	f006 061f 	and.w	r6, r6, #31
 8017a04:	fa02 f606 	lsl.w	r6, r2, r6
 8017a08:	421e      	tst	r6, r3
 8017a0a:	d13a      	bne.n	8017a82 <__gethex+0x3fe>
 8017a0c:	f045 0520 	orr.w	r5, r5, #32
 8017a10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a12:	601c      	str	r4, [r3, #0]
 8017a14:	9b02      	ldr	r3, [sp, #8]
 8017a16:	601f      	str	r7, [r3, #0]
 8017a18:	e6b0      	b.n	801777c <__gethex+0xf8>
 8017a1a:	4299      	cmp	r1, r3
 8017a1c:	f843 cc04 	str.w	ip, [r3, #-4]
 8017a20:	d8d9      	bhi.n	80179d6 <__gethex+0x352>
 8017a22:	68a3      	ldr	r3, [r4, #8]
 8017a24:	459b      	cmp	fp, r3
 8017a26:	db17      	blt.n	8017a58 <__gethex+0x3d4>
 8017a28:	6861      	ldr	r1, [r4, #4]
 8017a2a:	9801      	ldr	r0, [sp, #4]
 8017a2c:	3101      	adds	r1, #1
 8017a2e:	f7fd fe9d 	bl	801576c <_Balloc>
 8017a32:	4681      	mov	r9, r0
 8017a34:	b918      	cbnz	r0, 8017a3e <__gethex+0x3ba>
 8017a36:	4b1a      	ldr	r3, [pc, #104]	@ (8017aa0 <__gethex+0x41c>)
 8017a38:	4602      	mov	r2, r0
 8017a3a:	2184      	movs	r1, #132	@ 0x84
 8017a3c:	e6c5      	b.n	80177ca <__gethex+0x146>
 8017a3e:	6922      	ldr	r2, [r4, #16]
 8017a40:	3202      	adds	r2, #2
 8017a42:	f104 010c 	add.w	r1, r4, #12
 8017a46:	0092      	lsls	r2, r2, #2
 8017a48:	300c      	adds	r0, #12
 8017a4a:	f7fc ff9a 	bl	8014982 <memcpy>
 8017a4e:	4621      	mov	r1, r4
 8017a50:	9801      	ldr	r0, [sp, #4]
 8017a52:	f7fd fecb 	bl	80157ec <_Bfree>
 8017a56:	464c      	mov	r4, r9
 8017a58:	6923      	ldr	r3, [r4, #16]
 8017a5a:	1c5a      	adds	r2, r3, #1
 8017a5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017a60:	6122      	str	r2, [r4, #16]
 8017a62:	2201      	movs	r2, #1
 8017a64:	615a      	str	r2, [r3, #20]
 8017a66:	e7be      	b.n	80179e6 <__gethex+0x362>
 8017a68:	6922      	ldr	r2, [r4, #16]
 8017a6a:	455a      	cmp	r2, fp
 8017a6c:	dd0b      	ble.n	8017a86 <__gethex+0x402>
 8017a6e:	2101      	movs	r1, #1
 8017a70:	4620      	mov	r0, r4
 8017a72:	f7ff fd9f 	bl	80175b4 <rshift>
 8017a76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a7a:	3701      	adds	r7, #1
 8017a7c:	42bb      	cmp	r3, r7
 8017a7e:	f6ff aee0 	blt.w	8017842 <__gethex+0x1be>
 8017a82:	2501      	movs	r5, #1
 8017a84:	e7c2      	b.n	8017a0c <__gethex+0x388>
 8017a86:	f016 061f 	ands.w	r6, r6, #31
 8017a8a:	d0fa      	beq.n	8017a82 <__gethex+0x3fe>
 8017a8c:	4453      	add	r3, sl
 8017a8e:	f1c6 0620 	rsb	r6, r6, #32
 8017a92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017a96:	f7fd ff5b 	bl	8015950 <__hi0bits>
 8017a9a:	42b0      	cmp	r0, r6
 8017a9c:	dbe7      	blt.n	8017a6e <__gethex+0x3ea>
 8017a9e:	e7f0      	b.n	8017a82 <__gethex+0x3fe>
 8017aa0:	0801830d 	.word	0x0801830d

08017aa4 <L_shift>:
 8017aa4:	f1c2 0208 	rsb	r2, r2, #8
 8017aa8:	0092      	lsls	r2, r2, #2
 8017aaa:	b570      	push	{r4, r5, r6, lr}
 8017aac:	f1c2 0620 	rsb	r6, r2, #32
 8017ab0:	6843      	ldr	r3, [r0, #4]
 8017ab2:	6804      	ldr	r4, [r0, #0]
 8017ab4:	fa03 f506 	lsl.w	r5, r3, r6
 8017ab8:	432c      	orrs	r4, r5
 8017aba:	40d3      	lsrs	r3, r2
 8017abc:	6004      	str	r4, [r0, #0]
 8017abe:	f840 3f04 	str.w	r3, [r0, #4]!
 8017ac2:	4288      	cmp	r0, r1
 8017ac4:	d3f4      	bcc.n	8017ab0 <L_shift+0xc>
 8017ac6:	bd70      	pop	{r4, r5, r6, pc}

08017ac8 <__match>:
 8017ac8:	b530      	push	{r4, r5, lr}
 8017aca:	6803      	ldr	r3, [r0, #0]
 8017acc:	3301      	adds	r3, #1
 8017ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ad2:	b914      	cbnz	r4, 8017ada <__match+0x12>
 8017ad4:	6003      	str	r3, [r0, #0]
 8017ad6:	2001      	movs	r0, #1
 8017ad8:	bd30      	pop	{r4, r5, pc}
 8017ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ade:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017ae2:	2d19      	cmp	r5, #25
 8017ae4:	bf98      	it	ls
 8017ae6:	3220      	addls	r2, #32
 8017ae8:	42a2      	cmp	r2, r4
 8017aea:	d0f0      	beq.n	8017ace <__match+0x6>
 8017aec:	2000      	movs	r0, #0
 8017aee:	e7f3      	b.n	8017ad8 <__match+0x10>

08017af0 <__hexnan>:
 8017af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017af4:	680b      	ldr	r3, [r1, #0]
 8017af6:	6801      	ldr	r1, [r0, #0]
 8017af8:	115e      	asrs	r6, r3, #5
 8017afa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017afe:	f013 031f 	ands.w	r3, r3, #31
 8017b02:	b087      	sub	sp, #28
 8017b04:	bf18      	it	ne
 8017b06:	3604      	addne	r6, #4
 8017b08:	2500      	movs	r5, #0
 8017b0a:	1f37      	subs	r7, r6, #4
 8017b0c:	4682      	mov	sl, r0
 8017b0e:	4690      	mov	r8, r2
 8017b10:	9301      	str	r3, [sp, #4]
 8017b12:	f846 5c04 	str.w	r5, [r6, #-4]
 8017b16:	46b9      	mov	r9, r7
 8017b18:	463c      	mov	r4, r7
 8017b1a:	9502      	str	r5, [sp, #8]
 8017b1c:	46ab      	mov	fp, r5
 8017b1e:	784a      	ldrb	r2, [r1, #1]
 8017b20:	1c4b      	adds	r3, r1, #1
 8017b22:	9303      	str	r3, [sp, #12]
 8017b24:	b342      	cbz	r2, 8017b78 <__hexnan+0x88>
 8017b26:	4610      	mov	r0, r2
 8017b28:	9105      	str	r1, [sp, #20]
 8017b2a:	9204      	str	r2, [sp, #16]
 8017b2c:	f7ff fd94 	bl	8017658 <__hexdig_fun>
 8017b30:	2800      	cmp	r0, #0
 8017b32:	d151      	bne.n	8017bd8 <__hexnan+0xe8>
 8017b34:	9a04      	ldr	r2, [sp, #16]
 8017b36:	9905      	ldr	r1, [sp, #20]
 8017b38:	2a20      	cmp	r2, #32
 8017b3a:	d818      	bhi.n	8017b6e <__hexnan+0x7e>
 8017b3c:	9b02      	ldr	r3, [sp, #8]
 8017b3e:	459b      	cmp	fp, r3
 8017b40:	dd13      	ble.n	8017b6a <__hexnan+0x7a>
 8017b42:	454c      	cmp	r4, r9
 8017b44:	d206      	bcs.n	8017b54 <__hexnan+0x64>
 8017b46:	2d07      	cmp	r5, #7
 8017b48:	dc04      	bgt.n	8017b54 <__hexnan+0x64>
 8017b4a:	462a      	mov	r2, r5
 8017b4c:	4649      	mov	r1, r9
 8017b4e:	4620      	mov	r0, r4
 8017b50:	f7ff ffa8 	bl	8017aa4 <L_shift>
 8017b54:	4544      	cmp	r4, r8
 8017b56:	d952      	bls.n	8017bfe <__hexnan+0x10e>
 8017b58:	2300      	movs	r3, #0
 8017b5a:	f1a4 0904 	sub.w	r9, r4, #4
 8017b5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017b62:	f8cd b008 	str.w	fp, [sp, #8]
 8017b66:	464c      	mov	r4, r9
 8017b68:	461d      	mov	r5, r3
 8017b6a:	9903      	ldr	r1, [sp, #12]
 8017b6c:	e7d7      	b.n	8017b1e <__hexnan+0x2e>
 8017b6e:	2a29      	cmp	r2, #41	@ 0x29
 8017b70:	d157      	bne.n	8017c22 <__hexnan+0x132>
 8017b72:	3102      	adds	r1, #2
 8017b74:	f8ca 1000 	str.w	r1, [sl]
 8017b78:	f1bb 0f00 	cmp.w	fp, #0
 8017b7c:	d051      	beq.n	8017c22 <__hexnan+0x132>
 8017b7e:	454c      	cmp	r4, r9
 8017b80:	d206      	bcs.n	8017b90 <__hexnan+0xa0>
 8017b82:	2d07      	cmp	r5, #7
 8017b84:	dc04      	bgt.n	8017b90 <__hexnan+0xa0>
 8017b86:	462a      	mov	r2, r5
 8017b88:	4649      	mov	r1, r9
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	f7ff ff8a 	bl	8017aa4 <L_shift>
 8017b90:	4544      	cmp	r4, r8
 8017b92:	d936      	bls.n	8017c02 <__hexnan+0x112>
 8017b94:	f1a8 0204 	sub.w	r2, r8, #4
 8017b98:	4623      	mov	r3, r4
 8017b9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8017b9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017ba2:	429f      	cmp	r7, r3
 8017ba4:	d2f9      	bcs.n	8017b9a <__hexnan+0xaa>
 8017ba6:	1b3b      	subs	r3, r7, r4
 8017ba8:	f023 0303 	bic.w	r3, r3, #3
 8017bac:	3304      	adds	r3, #4
 8017bae:	3401      	adds	r4, #1
 8017bb0:	3e03      	subs	r6, #3
 8017bb2:	42b4      	cmp	r4, r6
 8017bb4:	bf88      	it	hi
 8017bb6:	2304      	movhi	r3, #4
 8017bb8:	4443      	add	r3, r8
 8017bba:	2200      	movs	r2, #0
 8017bbc:	f843 2b04 	str.w	r2, [r3], #4
 8017bc0:	429f      	cmp	r7, r3
 8017bc2:	d2fb      	bcs.n	8017bbc <__hexnan+0xcc>
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	b91b      	cbnz	r3, 8017bd0 <__hexnan+0xe0>
 8017bc8:	4547      	cmp	r7, r8
 8017bca:	d128      	bne.n	8017c1e <__hexnan+0x12e>
 8017bcc:	2301      	movs	r3, #1
 8017bce:	603b      	str	r3, [r7, #0]
 8017bd0:	2005      	movs	r0, #5
 8017bd2:	b007      	add	sp, #28
 8017bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bd8:	3501      	adds	r5, #1
 8017bda:	2d08      	cmp	r5, #8
 8017bdc:	f10b 0b01 	add.w	fp, fp, #1
 8017be0:	dd06      	ble.n	8017bf0 <__hexnan+0x100>
 8017be2:	4544      	cmp	r4, r8
 8017be4:	d9c1      	bls.n	8017b6a <__hexnan+0x7a>
 8017be6:	2300      	movs	r3, #0
 8017be8:	f844 3c04 	str.w	r3, [r4, #-4]
 8017bec:	2501      	movs	r5, #1
 8017bee:	3c04      	subs	r4, #4
 8017bf0:	6822      	ldr	r2, [r4, #0]
 8017bf2:	f000 000f 	and.w	r0, r0, #15
 8017bf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017bfa:	6020      	str	r0, [r4, #0]
 8017bfc:	e7b5      	b.n	8017b6a <__hexnan+0x7a>
 8017bfe:	2508      	movs	r5, #8
 8017c00:	e7b3      	b.n	8017b6a <__hexnan+0x7a>
 8017c02:	9b01      	ldr	r3, [sp, #4]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d0dd      	beq.n	8017bc4 <__hexnan+0xd4>
 8017c08:	f1c3 0320 	rsb	r3, r3, #32
 8017c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8017c10:	40da      	lsrs	r2, r3
 8017c12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017c16:	4013      	ands	r3, r2
 8017c18:	f846 3c04 	str.w	r3, [r6, #-4]
 8017c1c:	e7d2      	b.n	8017bc4 <__hexnan+0xd4>
 8017c1e:	3f04      	subs	r7, #4
 8017c20:	e7d0      	b.n	8017bc4 <__hexnan+0xd4>
 8017c22:	2004      	movs	r0, #4
 8017c24:	e7d5      	b.n	8017bd2 <__hexnan+0xe2>

08017c26 <__ascii_mbtowc>:
 8017c26:	b082      	sub	sp, #8
 8017c28:	b901      	cbnz	r1, 8017c2c <__ascii_mbtowc+0x6>
 8017c2a:	a901      	add	r1, sp, #4
 8017c2c:	b142      	cbz	r2, 8017c40 <__ascii_mbtowc+0x1a>
 8017c2e:	b14b      	cbz	r3, 8017c44 <__ascii_mbtowc+0x1e>
 8017c30:	7813      	ldrb	r3, [r2, #0]
 8017c32:	600b      	str	r3, [r1, #0]
 8017c34:	7812      	ldrb	r2, [r2, #0]
 8017c36:	1e10      	subs	r0, r2, #0
 8017c38:	bf18      	it	ne
 8017c3a:	2001      	movne	r0, #1
 8017c3c:	b002      	add	sp, #8
 8017c3e:	4770      	bx	lr
 8017c40:	4610      	mov	r0, r2
 8017c42:	e7fb      	b.n	8017c3c <__ascii_mbtowc+0x16>
 8017c44:	f06f 0001 	mvn.w	r0, #1
 8017c48:	e7f8      	b.n	8017c3c <__ascii_mbtowc+0x16>

08017c4a <_realloc_r>:
 8017c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c4e:	4680      	mov	r8, r0
 8017c50:	4615      	mov	r5, r2
 8017c52:	460c      	mov	r4, r1
 8017c54:	b921      	cbnz	r1, 8017c60 <_realloc_r+0x16>
 8017c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c5a:	4611      	mov	r1, r2
 8017c5c:	f7fd bcfa 	b.w	8015654 <_malloc_r>
 8017c60:	b92a      	cbnz	r2, 8017c6e <_realloc_r+0x24>
 8017c62:	f7fd fc83 	bl	801556c <_free_r>
 8017c66:	2400      	movs	r4, #0
 8017c68:	4620      	mov	r0, r4
 8017c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c6e:	f000 f840 	bl	8017cf2 <_malloc_usable_size_r>
 8017c72:	4285      	cmp	r5, r0
 8017c74:	4606      	mov	r6, r0
 8017c76:	d802      	bhi.n	8017c7e <_realloc_r+0x34>
 8017c78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017c7c:	d8f4      	bhi.n	8017c68 <_realloc_r+0x1e>
 8017c7e:	4629      	mov	r1, r5
 8017c80:	4640      	mov	r0, r8
 8017c82:	f7fd fce7 	bl	8015654 <_malloc_r>
 8017c86:	4607      	mov	r7, r0
 8017c88:	2800      	cmp	r0, #0
 8017c8a:	d0ec      	beq.n	8017c66 <_realloc_r+0x1c>
 8017c8c:	42b5      	cmp	r5, r6
 8017c8e:	462a      	mov	r2, r5
 8017c90:	4621      	mov	r1, r4
 8017c92:	bf28      	it	cs
 8017c94:	4632      	movcs	r2, r6
 8017c96:	f7fc fe74 	bl	8014982 <memcpy>
 8017c9a:	4621      	mov	r1, r4
 8017c9c:	4640      	mov	r0, r8
 8017c9e:	f7fd fc65 	bl	801556c <_free_r>
 8017ca2:	463c      	mov	r4, r7
 8017ca4:	e7e0      	b.n	8017c68 <_realloc_r+0x1e>

08017ca6 <__ascii_wctomb>:
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	4608      	mov	r0, r1
 8017caa:	b141      	cbz	r1, 8017cbe <__ascii_wctomb+0x18>
 8017cac:	2aff      	cmp	r2, #255	@ 0xff
 8017cae:	d904      	bls.n	8017cba <__ascii_wctomb+0x14>
 8017cb0:	228a      	movs	r2, #138	@ 0x8a
 8017cb2:	601a      	str	r2, [r3, #0]
 8017cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8017cb8:	4770      	bx	lr
 8017cba:	700a      	strb	r2, [r1, #0]
 8017cbc:	2001      	movs	r0, #1
 8017cbe:	4770      	bx	lr

08017cc0 <fiprintf>:
 8017cc0:	b40e      	push	{r1, r2, r3}
 8017cc2:	b503      	push	{r0, r1, lr}
 8017cc4:	4601      	mov	r1, r0
 8017cc6:	ab03      	add	r3, sp, #12
 8017cc8:	4805      	ldr	r0, [pc, #20]	@ (8017ce0 <fiprintf+0x20>)
 8017cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cce:	6800      	ldr	r0, [r0, #0]
 8017cd0:	9301      	str	r3, [sp, #4]
 8017cd2:	f7ff f9af 	bl	8017034 <_vfiprintf_r>
 8017cd6:	b002      	add	sp, #8
 8017cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017cdc:	b003      	add	sp, #12
 8017cde:	4770      	bx	lr
 8017ce0:	24000194 	.word	0x24000194

08017ce4 <abort>:
 8017ce4:	b508      	push	{r3, lr}
 8017ce6:	2006      	movs	r0, #6
 8017ce8:	f000 f834 	bl	8017d54 <raise>
 8017cec:	2001      	movs	r0, #1
 8017cee:	f7f0 ff2a 	bl	8008b46 <_exit>

08017cf2 <_malloc_usable_size_r>:
 8017cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017cf6:	1f18      	subs	r0, r3, #4
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	bfbc      	itt	lt
 8017cfc:	580b      	ldrlt	r3, [r1, r0]
 8017cfe:	18c0      	addlt	r0, r0, r3
 8017d00:	4770      	bx	lr

08017d02 <_raise_r>:
 8017d02:	291f      	cmp	r1, #31
 8017d04:	b538      	push	{r3, r4, r5, lr}
 8017d06:	4605      	mov	r5, r0
 8017d08:	460c      	mov	r4, r1
 8017d0a:	d904      	bls.n	8017d16 <_raise_r+0x14>
 8017d0c:	2316      	movs	r3, #22
 8017d0e:	6003      	str	r3, [r0, #0]
 8017d10:	f04f 30ff 	mov.w	r0, #4294967295
 8017d14:	bd38      	pop	{r3, r4, r5, pc}
 8017d16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017d18:	b112      	cbz	r2, 8017d20 <_raise_r+0x1e>
 8017d1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017d1e:	b94b      	cbnz	r3, 8017d34 <_raise_r+0x32>
 8017d20:	4628      	mov	r0, r5
 8017d22:	f000 f831 	bl	8017d88 <_getpid_r>
 8017d26:	4622      	mov	r2, r4
 8017d28:	4601      	mov	r1, r0
 8017d2a:	4628      	mov	r0, r5
 8017d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d30:	f000 b818 	b.w	8017d64 <_kill_r>
 8017d34:	2b01      	cmp	r3, #1
 8017d36:	d00a      	beq.n	8017d4e <_raise_r+0x4c>
 8017d38:	1c59      	adds	r1, r3, #1
 8017d3a:	d103      	bne.n	8017d44 <_raise_r+0x42>
 8017d3c:	2316      	movs	r3, #22
 8017d3e:	6003      	str	r3, [r0, #0]
 8017d40:	2001      	movs	r0, #1
 8017d42:	e7e7      	b.n	8017d14 <_raise_r+0x12>
 8017d44:	2100      	movs	r1, #0
 8017d46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017d4a:	4620      	mov	r0, r4
 8017d4c:	4798      	blx	r3
 8017d4e:	2000      	movs	r0, #0
 8017d50:	e7e0      	b.n	8017d14 <_raise_r+0x12>
	...

08017d54 <raise>:
 8017d54:	4b02      	ldr	r3, [pc, #8]	@ (8017d60 <raise+0xc>)
 8017d56:	4601      	mov	r1, r0
 8017d58:	6818      	ldr	r0, [r3, #0]
 8017d5a:	f7ff bfd2 	b.w	8017d02 <_raise_r>
 8017d5e:	bf00      	nop
 8017d60:	24000194 	.word	0x24000194

08017d64 <_kill_r>:
 8017d64:	b538      	push	{r3, r4, r5, lr}
 8017d66:	4d07      	ldr	r5, [pc, #28]	@ (8017d84 <_kill_r+0x20>)
 8017d68:	2300      	movs	r3, #0
 8017d6a:	4604      	mov	r4, r0
 8017d6c:	4608      	mov	r0, r1
 8017d6e:	4611      	mov	r1, r2
 8017d70:	602b      	str	r3, [r5, #0]
 8017d72:	f7f0 fed8 	bl	8008b26 <_kill>
 8017d76:	1c43      	adds	r3, r0, #1
 8017d78:	d102      	bne.n	8017d80 <_kill_r+0x1c>
 8017d7a:	682b      	ldr	r3, [r5, #0]
 8017d7c:	b103      	cbz	r3, 8017d80 <_kill_r+0x1c>
 8017d7e:	6023      	str	r3, [r4, #0]
 8017d80:	bd38      	pop	{r3, r4, r5, pc}
 8017d82:	bf00      	nop
 8017d84:	24001b24 	.word	0x24001b24

08017d88 <_getpid_r>:
 8017d88:	f7f0 bec5 	b.w	8008b16 <_getpid>

08017d8c <_init>:
 8017d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d8e:	bf00      	nop
 8017d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d92:	bc08      	pop	{r3}
 8017d94:	469e      	mov	lr, r3
 8017d96:	4770      	bx	lr

08017d98 <_fini>:
 8017d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d9a:	bf00      	nop
 8017d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d9e:	bc08      	pop	{r3}
 8017da0:	469e      	mov	lr, r3
 8017da2:	4770      	bx	lr
