
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f454  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800f728  0800f728  00010728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fc30  0800fc30  00010c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fc38  0800fc38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fc3c  0800fc3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800fc40  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005c0  240001d8  0800fe18  000111d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000798  0800fe18  00011798  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001af14  00000000  00000000  00011206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036a0  00000000  00000000  0002c11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001540  00000000  00000000  0002f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001065  00000000  00000000  00030d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005710  00000000  00000000  00031d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001fedc  00000000  00000000  00037475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001620ac  00000000  00000000  00057351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b93fd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c4c  00000000  00000000  001b9440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001c008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f70c 	.word	0x0800f70c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800f70c 	.word	0x0800f70c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ab0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ab4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ab8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac0:	e000      	b.n	8000ac4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ac2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ace:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	int i=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffc7 	bl	8000a98 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x16>
	}
	return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <UART_Transmit_P>:

void UART_Transmit_P(const char* str)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff fc3f 	bl	80003b0 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <UART_Transmit_P+0x28>)
 8000b3e:	f007 fd4a 	bl	80085d6 <HAL_UART_Transmit>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	24000598 	.word	0x24000598

08000b50 <main_delay>:


void main_delay(uint32_t period)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8000b58:	e008      	b.n	8000b6c <main_delay+0x1c>
	{
		for(i = 0; i < 96; i++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	e002      	b.n	8000b66 <main_delay+0x16>
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3301      	adds	r3, #1
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b5f      	cmp	r3, #95	@ 0x5f
 8000b6a:	d9f9      	bls.n	8000b60 <main_delay+0x10>
	while(period--)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f1      	bne.n	8000b5a <main_delay+0xa>
		{
			;
		}
	}
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0b2      	sub	sp, #200	@ 0xc8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b8a:	f000 fc2d 	bl	80013e8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f001 f9ab 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f831 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 fb15 	bl	80011c4 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000b9a:	f000 f95b 	bl	8000e54 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8000b9e:	f000 f899 	bl	8000cd4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ba2:	f000 f8d7 	bl	8000d54 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000ba6:	f000 f915 	bl	8000dd4 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000baa:	f000 f971 	bl	8000e90 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bae:	f000 f9c5 	bl	8000f3c <MX_SPI2_Init>
  MX_UART8_Init();
 8000bb2:	f000 fa6f 	bl	8001094 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000bb6:	f000 fab9 	bl	800112c <MX_USART1_UART_Init>
  MX_SPI4_Init();
 8000bba:	f000 fa15 	bl	8000fe8 <MX_SPI4_Init>
  MX_FATFS_Init();
 8000bbe:	f00a f92b 	bl	800ae18 <MX_FATFS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count++; //Increment count variable
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <main+0x68>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <main+0x68>)
 8000bca:	6013      	str	r3, [r2, #0]
	  char temp_buf[200];
	  		// Use sprintf to format the device ID into the buffer
	  sprintf(temp_buf, "USART: Hello World from Aerosentinel Argus Navigation Module! Count =%lu \n", count);
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <main+0x68>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <main+0x6c>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00b fa1d 	bl	800c014 <siprintf>
	  UART_Transmit_P(temp_buf);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffa1 	bl	8000b24 <UART_Transmit_P>
//	  printf("Hello World from Aerosentinel Argus Navigation Module! Count =%lu \n", count); // Hello World Test
//	  HAL_Delay(250);
	  main_delay(250000);
 8000be2:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <main+0x70>)
 8000be4:	f7ff ffb4 	bl	8000b50 <main_delay>
  {
 8000be8:	bf00      	nop
 8000bea:	e7ea      	b.n	8000bc2 <main+0x3e>
 8000bec:	2400062c 	.word	0x2400062c
 8000bf0:	0800f768 	.word	0x0800f768
 8000bf4:	0003d090 	.word	0x0003d090

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09c      	sub	sp, #112	@ 0x70
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	224c      	movs	r2, #76	@ 0x4c
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f00b fafc 	bl	800c204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2220      	movs	r2, #32
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00b faf6 	bl	800c204 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f002 fc15 	bl	8003448 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <SystemClock_Config+0xd8>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd0 <SystemClock_Config+0xd8>)
 8000c28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <SystemClock_Config+0xd8>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c3a:	bf00      	nop
 8000c3c:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <SystemClock_Config+0xd8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c48:	d1f8      	bne.n	8000c3c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c54:	2302      	movs	r3, #2
 8000c56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000c60:	231f      	movs	r3, #31
 8000c62:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c70:	230c      	movs	r3, #12
 8000c72:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000c78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fc1a 	bl	80034bc <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c8e:	f000 fbd7 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	233f      	movs	r3, #63	@ 0x3f
 8000c94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2303      	movs	r3, #3
 8000c98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ca2:	2340      	movs	r3, #64	@ 0x40
 8000ca4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ca6:	2340      	movs	r3, #64	@ 0x40
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cb0:	2340      	movs	r3, #64	@ 0x40
 8000cb2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 ffd9 	bl	8003c70 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000cc4:	f000 fbbc 	bl	8001440 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3770      	adds	r7, #112	@ 0x70
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	58024800 	.word	0x58024800

08000cd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000cda:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <MX_I2C1_Init+0x78>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <MX_I2C1_Init+0x7c>)
 8000ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cea:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d0e:	480e      	ldr	r0, [pc, #56]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000d10:	f002 fa66 	bl	80031e0 <HAL_I2C_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d1a:	f000 fb91 	bl	8001440 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000d22:	f002 faf9 	bl	8003318 <HAL_I2CEx_ConfigAnalogFilter>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d2c:	f000 fb88 	bl	8001440 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d30:	2100      	movs	r1, #0
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000d34:	f002 fb3b 	bl	80033ae <HAL_I2CEx_ConfigDigitalFilter>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f000 fb7f 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	240001f4 	.word	0x240001f4
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	20a0a3f6 	.word	0x20a0a3f6

08000d54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dcc <MX_I2C2_Init+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d60:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <MX_I2C2_Init+0x7c>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d64:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d8e:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d90:	f002 fa26 	bl	80031e0 <HAL_I2C_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d9a:	f000 fb51 	bl	8001440 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000da2:	f002 fab9 	bl	8003318 <HAL_I2CEx_ConfigAnalogFilter>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dac:	f000 fb48 	bl	8001440 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000db0:	2100      	movs	r1, #0
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000db4:	f002 fafb 	bl	80033ae <HAL_I2CEx_ConfigDigitalFilter>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f000 fb3f 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	24000248 	.word	0x24000248
 8000dcc:	40005800 	.word	0x40005800
 8000dd0:	20a0a3f6 	.word	0x20a0a3f6

08000dd4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000dda:	4a1c      	ldr	r2, [pc, #112]	@ (8000e4c <MX_I2C4_Init+0x78>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000de0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <MX_I2C4_Init+0x7c>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dea:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e0e:	480e      	ldr	r0, [pc, #56]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000e10:	f002 f9e6 	bl	80031e0 <HAL_I2C_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e1a:	f000 fb11 	bl	8001440 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000e1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e22:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000e24:	f002 fa78 	bl	8003318 <HAL_I2CEx_ConfigAnalogFilter>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8000e2e:	f000 fb07 	bl	8001440 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <MX_I2C4_Init+0x74>)
 8000e36:	f002 faba 	bl	80033ae <HAL_I2CEx_ConfigDigitalFilter>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000e40:	f000 fafe 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2400029c 	.word	0x2400029c
 8000e4c:	58001c00 	.word	0x58001c00
 8000e50:	60405858 	.word	0x60405858

08000e54 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <MX_SDMMC1_SD_Init+0x34>)
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e8c <MX_SDMMC1_SD_Init+0x38>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <MX_SDMMC1_SD_Init+0x34>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <MX_SDMMC1_SD_Init+0x34>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <MX_SDMMC1_SD_Init+0x34>)
 8000e6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e70:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e72:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <MX_SDMMC1_SD_Init+0x34>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <MX_SDMMC1_SD_Init+0x34>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	240002f0 	.word	0x240002f0
 8000e8c:	52007000 	.word	0x52007000

08000e90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e94:	4b27      	ldr	r3, [pc, #156]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000e96:	4a28      	ldr	r2, [pc, #160]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000e9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000eaa:	2207      	movs	r2, #7
 8000eac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eae:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000ebc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ec0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000ec4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000ec8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000ee4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ee8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000eea:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <MX_SPI1_Init+0xa4>)
 8000f22:	f007 f9c9 	bl	80082b8 <HAL_SPI_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f2c:	f000 fa88 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2400036c 	.word	0x2400036c
 8000f38:	40013000 	.word	0x40013000

08000f3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f40:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f42:	4a28      	ldr	r2, [pc, #160]	@ (8000fe4 <MX_SPI2_Init+0xa8>)
 8000f44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f48:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4e:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f54:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f56:	2207      	movs	r2, #7
 8000f58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f68:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f70:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000f74:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f94:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <MX_SPI2_Init+0xa4>)
 8000fce:	f007 f973 	bl	80082b8 <HAL_SPI_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000fd8:	f000 fa32 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	240003f4 	.word	0x240003f4
 8000fe4:	40003800 	.word	0x40003800

08000fe8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <MX_SPI4_Init+0xa4>)
 8000fee:	4a28      	ldr	r2, [pc, #160]	@ (8001090 <MX_SPI4_Init+0xa8>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ff2:	4b26      	ldr	r3, [pc, #152]	@ (800108c <MX_SPI4_Init+0xa4>)
 8000ff4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ff8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffa:	4b24      	ldr	r3, [pc, #144]	@ (800108c <MX_SPI4_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001002:	2207      	movs	r2, #7
 8001004:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_SPI4_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001014:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001018:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_SPI4_Init+0xa4>)
 800101c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001020:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001028:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_SPI4_Init+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001030:	2200      	movs	r2, #0
 8001032:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_SPI4_Init+0xa4>)
 800103c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001040:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001044:	2200      	movs	r2, #0
 8001046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_SPI4_Init+0xa4>)
 800104a:	2200      	movs	r2, #0
 800104c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_SPI4_Init+0xa4>)
 800105c:	2200      	movs	r2, #0
 800105e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MX_SPI4_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_SPI4_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_SPI4_Init+0xa4>)
 800107a:	f007 f91d 	bl	80082b8 <HAL_SPI_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001084:	f000 f9dc 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2400047c 	.word	0x2400047c
 8001090:	40013400 	.word	0x40013400

08001094 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <MX_UART8_Init+0x90>)
 800109a:	4a23      	ldr	r2, [pc, #140]	@ (8001128 <MX_UART8_Init+0x94>)
 800109c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_UART8_Init+0x90>)
 80010a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010a4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_UART8_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <MX_UART8_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_UART8_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_UART8_Init+0x90>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_UART8_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <MX_UART8_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_UART8_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_UART8_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_UART8_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80010dc:	4811      	ldr	r0, [pc, #68]	@ (8001124 <MX_UART8_Init+0x90>)
 80010de:	f007 fa2a 	bl	8008536 <HAL_UART_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80010e8:	f000 f9aa 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <MX_UART8_Init+0x90>)
 80010f0:	f008 fffe 	bl	800a0f0 <HAL_UARTEx_SetTxFifoThreshold>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f000 f9a1 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4808      	ldr	r0, [pc, #32]	@ (8001124 <MX_UART8_Init+0x90>)
 8001102:	f009 f833 	bl	800a16c <HAL_UARTEx_SetRxFifoThreshold>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 f998 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_UART8_Init+0x90>)
 8001112:	f008 ffb4 	bl	800a07e <HAL_UARTEx_DisableFifoMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 f990 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24000504 	.word	0x24000504
 8001128:	40007c00 	.word	0x40007c00

0800112c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 8001132:	4a23      	ldr	r2, [pc, #140]	@ (80011c0 <MX_USART1_UART_Init+0x94>)
 8001134:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001136:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800114a:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001174:	4811      	ldr	r0, [pc, #68]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 8001176:	f007 f9de 	bl	8008536 <HAL_UART_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001180:	f000 f95e 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	480d      	ldr	r0, [pc, #52]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 8001188:	f008 ffb2 	bl	800a0f0 <HAL_UARTEx_SetTxFifoThreshold>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001192:	f000 f955 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001196:	2100      	movs	r1, #0
 8001198:	4808      	ldr	r0, [pc, #32]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 800119a:	f008 ffe7 	bl	800a16c <HAL_UARTEx_SetRxFifoThreshold>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011a4:	f000 f94c 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_USART1_UART_Init+0x90>)
 80011aa:	f008 ff68 	bl	800a07e <HAL_UARTEx_DisableFifoMode>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f000 f944 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	24000598 	.word	0x24000598
 80011c0:	40011000 	.word	0x40011000

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	@ 0x30
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b7d      	ldr	r3, [pc, #500]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e0:	4a7b      	ldr	r2, [pc, #492]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ea:	4b79      	ldr	r3, [pc, #484]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f8:	4b75      	ldr	r3, [pc, #468]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fe:	4a74      	ldr	r2, [pc, #464]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001208:	4b71      	ldr	r3, [pc, #452]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b6e      	ldr	r3, [pc, #440]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121c:	4a6c      	ldr	r2, [pc, #432]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001226:	4b6a      	ldr	r3, [pc, #424]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b66      	ldr	r3, [pc, #408]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123a:	4a65      	ldr	r2, [pc, #404]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001244:	4b62      	ldr	r3, [pc, #392]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001252:	4b5f      	ldr	r3, [pc, #380]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	4a5d      	ldr	r2, [pc, #372]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001262:	4b5b      	ldr	r3, [pc, #364]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001270:	4b57      	ldr	r3, [pc, #348]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001276:	4a56      	ldr	r2, [pc, #344]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001280:	4b53      	ldr	r3, [pc, #332]	@ (80013d0 <MX_GPIO_Init+0x20c>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2110      	movs	r1, #16
 8001292:	4850      	ldr	r0, [pc, #320]	@ (80013d4 <MX_GPIO_Init+0x210>)
 8001294:	f001 ff8a 	bl	80031ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2110      	movs	r1, #16
 800129c:	484e      	ldr	r0, [pc, #312]	@ (80013d8 <MX_GPIO_Init+0x214>)
 800129e:	f001 ff85 	bl	80031ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80012a8:	484c      	ldr	r0, [pc, #304]	@ (80013dc <MX_GPIO_Init+0x218>)
 80012aa:	f001 ff7f 	bl	80031ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 80012ae:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4847      	ldr	r0, [pc, #284]	@ (80013e0 <MX_GPIO_Init+0x21c>)
 80012c4:	f001 fdb2 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80012c8:	2310      	movs	r3, #16
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	483d      	ldr	r0, [pc, #244]	@ (80013d4 <MX_GPIO_Init+0x210>)
 80012e0:	f001 fda4 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e8:	2303      	movs	r3, #3
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	483b      	ldr	r0, [pc, #236]	@ (80013e4 <MX_GPIO_Init+0x220>)
 80012f8:	f001 fd98 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012fc:	2308      	movs	r3, #8
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	4834      	ldr	r0, [pc, #208]	@ (80013e0 <MX_GPIO_Init+0x21c>)
 8001310:	f001 fd8c 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8001314:	2310      	movs	r3, #16
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	482b      	ldr	r0, [pc, #172]	@ (80013d8 <MX_GPIO_Init+0x214>)
 800132c:	f001 fd7e 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001330:	2304      	movs	r3, #4
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4826      	ldr	r0, [pc, #152]	@ (80013dc <MX_GPIO_Init+0x218>)
 8001344:	f001 fd72 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8001348:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	481d      	ldr	r0, [pc, #116]	@ (80013d4 <MX_GPIO_Init+0x210>)
 800135e:	f001 fd65 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 8001362:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4818      	ldr	r0, [pc, #96]	@ (80013dc <MX_GPIO_Init+0x218>)
 800137c:	f001 fd56 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001380:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	480f      	ldr	r0, [pc, #60]	@ (80013d4 <MX_GPIO_Init+0x210>)
 8001396:	f001 fd49 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800139a:	2308      	movs	r3, #8
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	480a      	ldr	r0, [pc, #40]	@ (80013d8 <MX_GPIO_Init+0x214>)
 80013ae:	f001 fd3d 	bl	8002e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013b8:	4808      	ldr	r0, [pc, #32]	@ (80013dc <MX_GPIO_Init+0x218>)
 80013ba:	f001 fef7 	bl	80031ac <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2110      	movs	r1, #16
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_GPIO_Init+0x214>)
 80013c4:	f001 fef2 	bl	80031ac <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c8:	bf00      	nop
 80013ca:	3730      	adds	r7, #48	@ 0x30
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58021000 	.word	0x58021000
 80013d8:	58020000 	.word	0x58020000
 80013dc:	58020400 	.word	0x58020400
 80013e0:	58020800 	.word	0x58020800
 80013e4:	58020c00 	.word	0x58020c00

080013e8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013fa:	f000 ff3b 	bl	8002274 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013fe:	2301      	movs	r3, #1
 8001400:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001402:	2300      	movs	r3, #0
 8001404:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800140a:	231f      	movs	r3, #31
 800140c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800140e:	2387      	movs	r3, #135	@ 0x87
 8001410:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001412:	2300      	movs	r3, #0
 8001414:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001416:	2300      	movs	r3, #0
 8001418:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800141a:	2301      	movs	r3, #1
 800141c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800141e:	2301      	movs	r3, #1
 8001420:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800142a:	463b      	mov	r3, r7
 800142c:	4618      	mov	r0, r3
 800142e:	f000 ff59 	bl	80022e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001432:	2004      	movs	r0, #4
 8001434:	f000 ff36 	bl	80022a4 <HAL_MPU_Enable>

}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <Error_Handler+0x8>

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_MspInit+0x30>)
 8001454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001458:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_MspInit+0x30>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_MspInit+0x30>)
 8001464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	58024400 	.word	0x58024400

08001480 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0bc      	sub	sp, #240	@ 0xf0
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001498:	f107 0320 	add.w	r3, r7, #32
 800149c:	22b8      	movs	r2, #184	@ 0xb8
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00a feaf 	bl	800c204 <memset>
  if(hi2c->Instance==I2C1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a74      	ldr	r2, [pc, #464]	@ (800167c <HAL_I2C_MspInit+0x1fc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d147      	bne.n	8001540 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014b0:	f04f 0208 	mov.w	r2, #8
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 ff5e 	bl	8004388 <HAL_RCCEx_PeriphCLKConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014d2:	f7ff ffb5 	bl	8001440 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014dc:	4a68      	ldr	r2, [pc, #416]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e6:	4b66      	ldr	r3, [pc, #408]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014f4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fc:	2312      	movs	r3, #18
 80014fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150e:	2304      	movs	r3, #4
 8001510:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001518:	4619      	mov	r1, r3
 800151a:	485a      	ldr	r0, [pc, #360]	@ (8001684 <HAL_I2C_MspInit+0x204>)
 800151c:	f001 fc86 	bl	8002e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001520:	4b57      	ldr	r3, [pc, #348]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 8001522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001526:	4a56      	ldr	r2, [pc, #344]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 8001528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001530:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 8001532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800153e:	e098      	b.n	8001672 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a50      	ldr	r2, [pc, #320]	@ (8001688 <HAL_I2C_MspInit+0x208>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d147      	bne.n	80015da <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800154a:	f04f 0208 	mov.w	r2, #8
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4618      	mov	r0, r3
 8001562:	f002 ff11 	bl	8004388 <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 800156c:	f7ff ff68 	bl	8001440 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001576:	4a42      	ldr	r2, [pc, #264]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001580:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800158e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001596:	2312      	movs	r3, #18
 8001598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015a8:	2304      	movs	r3, #4
 80015aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015b2:	4619      	mov	r1, r3
 80015b4:	4833      	ldr	r0, [pc, #204]	@ (8001684 <HAL_I2C_MspInit+0x204>)
 80015b6:	f001 fc39 	bl	8002e2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015ba:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 80015bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 80015c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 80015cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
}
 80015d8:	e04b      	b.n	8001672 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a2b      	ldr	r2, [pc, #172]	@ (800168c <HAL_I2C_MspInit+0x20c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d146      	bne.n	8001672 <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015e4:	f04f 0210 	mov.w	r2, #16
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 fec4 	bl	8004388 <HAL_RCCEx_PeriphCLKConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8001606:	f7ff ff1b 	bl	8001440 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800160a:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001610:	4a1b      	ldr	r2, [pc, #108]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001628:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800162c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001630:	2312      	movs	r3, #18
 8001632:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001642:	2304      	movs	r3, #4
 8001644:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001648:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800164c:	4619      	mov	r1, r3
 800164e:	4810      	ldr	r0, [pc, #64]	@ (8001690 <HAL_I2C_MspInit+0x210>)
 8001650:	f001 fbec 	bl	8002e2c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001654:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 8001656:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800165a:	4a09      	ldr	r2, [pc, #36]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001660:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_I2C_MspInit+0x200>)
 8001666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800166a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
}
 8001672:	bf00      	nop
 8001674:	37f0      	adds	r7, #240	@ 0xf0
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40005400 	.word	0x40005400
 8001680:	58024400 	.word	0x58024400
 8001684:	58020400 	.word	0x58020400
 8001688:	40005800 	.word	0x40005800
 800168c:	58001c00 	.word	0x58001c00
 8001690:	58020c00 	.word	0x58020c00

08001694 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0ba      	sub	sp, #232	@ 0xe8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ac:	f107 0318 	add.w	r3, r7, #24
 80016b0:	22b8      	movs	r2, #184	@ 0xb8
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f00a fda5 	bl	800c204 <memset>
  if(hsd->Instance==SDMMC1)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a38      	ldr	r2, [pc, #224]	@ (80017a0 <HAL_SD_MspInit+0x10c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d169      	bne.n	8001798 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80016c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 fe55 	bl	8004388 <HAL_RCCEx_PeriphCLKConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80016e4:	f7ff feac 	bl	8001440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016e8:	4b2e      	ldr	r3, [pc, #184]	@ (80017a4 <HAL_SD_MspInit+0x110>)
 80016ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016ee:	4a2d      	ldr	r2, [pc, #180]	@ (80017a4 <HAL_SD_MspInit+0x110>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <HAL_SD_MspInit+0x110>)
 80016fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <HAL_SD_MspInit+0x110>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170c:	4a25      	ldr	r2, [pc, #148]	@ (80017a4 <HAL_SD_MspInit+0x110>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001716:	4b23      	ldr	r3, [pc, #140]	@ (80017a4 <HAL_SD_MspInit+0x110>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001724:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <HAL_SD_MspInit+0x110>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172a:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <HAL_SD_MspInit+0x110>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <HAL_SD_MspInit+0x110>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001742:	2304      	movs	r3, #4
 8001744:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800175a:	230c      	movs	r3, #12
 800175c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001760:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001764:	4619      	mov	r1, r3
 8001766:	4810      	ldr	r0, [pc, #64]	@ (80017a8 <HAL_SD_MspInit+0x114>)
 8001768:	f001 fb60 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 800176c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001770:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001786:	230c      	movs	r3, #12
 8001788:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	@ (80017ac <HAL_SD_MspInit+0x118>)
 8001794:	f001 fb4a 	bl	8002e2c <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001798:	bf00      	nop
 800179a:	37e8      	adds	r7, #232	@ 0xe8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	52007000 	.word	0x52007000
 80017a4:	58024400 	.word	0x58024400
 80017a8:	58020c00 	.word	0x58020c00
 80017ac:	58020800 	.word	0x58020800

080017b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b0be      	sub	sp, #248	@ 0xf8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017cc:	22b8      	movs	r2, #184	@ 0xb8
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00a fd17 	bl	800c204 <memset>
  if(hspi->Instance==SPI1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a97      	ldr	r2, [pc, #604]	@ (8001a38 <HAL_SPI_MspInit+0x288>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d16a      	bne.n	80018b6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80017e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fdc6 	bl	8004388 <HAL_RCCEx_PeriphCLKConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001802:	f7ff fe1d 	bl	8001440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001806:	4b8d      	ldr	r3, [pc, #564]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 8001808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800180c:	4a8b      	ldr	r2, [pc, #556]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 800180e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001812:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001816:	4b89      	ldr	r3, [pc, #548]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 8001818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800181c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	4b85      	ldr	r3, [pc, #532]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182a:	4a84      	ldr	r2, [pc, #528]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001834:	4b81      	ldr	r3, [pc, #516]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b7e      	ldr	r3, [pc, #504]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001848:	4a7c      	ldr	r2, [pc, #496]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001852:	4b7a      	ldr	r3, [pc, #488]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001860:	2310      	movs	r3, #16
 8001862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001878:	2305      	movs	r3, #5
 800187a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001882:	4619      	mov	r1, r3
 8001884:	486e      	ldr	r0, [pc, #440]	@ (8001a40 <HAL_SPI_MspInit+0x290>)
 8001886:	f001 fad1 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800188a:	23a0      	movs	r3, #160	@ 0xa0
 800188c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018a2:	2305      	movs	r3, #5
 80018a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4865      	ldr	r0, [pc, #404]	@ (8001a44 <HAL_SPI_MspInit+0x294>)
 80018b0:	f001 fabc 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80018b4:	e0bb      	b.n	8001a2e <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a63      	ldr	r2, [pc, #396]	@ (8001a48 <HAL_SPI_MspInit+0x298>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d16b      	bne.n	8001998 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80018c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fd56 	bl	8004388 <HAL_RCCEx_PeriphCLKConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 80018e2:	f7ff fdad 	bl	8001440 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018e6:	4b55      	ldr	r3, [pc, #340]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 80018e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ec:	4a53      	ldr	r2, [pc, #332]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 80018ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018f6:	4b51      	ldr	r3, [pc, #324]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 80018f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b4d      	ldr	r3, [pc, #308]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001914:	4b49      	ldr	r3, [pc, #292]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	4b46      	ldr	r3, [pc, #280]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001928:	4a44      	ldr	r2, [pc, #272]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001932:	4b42      	ldr	r3, [pc, #264]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001944:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800195a:	2305      	movs	r3, #5
 800195c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001964:	4619      	mov	r1, r3
 8001966:	4837      	ldr	r0, [pc, #220]	@ (8001a44 <HAL_SPI_MspInit+0x294>)
 8001968:	f001 fa60 	bl	8002e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 800196c:	2306      	movs	r3, #6
 800196e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001984:	2305      	movs	r3, #5
 8001986:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800198e:	4619      	mov	r1, r3
 8001990:	482e      	ldr	r0, [pc, #184]	@ (8001a4c <HAL_SPI_MspInit+0x29c>)
 8001992:	f001 fa4b 	bl	8002e2c <HAL_GPIO_Init>
}
 8001996:	e04a      	b.n	8001a2e <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a50 <HAL_SPI_MspInit+0x2a0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d145      	bne.n	8001a2e <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80019a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 fce5 	bl	8004388 <HAL_RCCEx_PeriphCLKConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 80019c4:	f7ff fd3c 	bl	8001440 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80019c8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 80019ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019ce:	4a1b      	ldr	r2, [pc, #108]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 80019d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019d8:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 80019da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ec:	4a13      	ldr	r2, [pc, #76]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_SPI_MspInit+0x28c>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001a04:	2364      	movs	r3, #100	@ 0x64
 8001a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a22:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a26:	4619      	mov	r1, r3
 8001a28:	480a      	ldr	r0, [pc, #40]	@ (8001a54 <HAL_SPI_MspInit+0x2a4>)
 8001a2a:	f001 f9ff 	bl	8002e2c <HAL_GPIO_Init>
}
 8001a2e:	bf00      	nop
 8001a30:	37f8      	adds	r7, #248	@ 0xf8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40013000 	.word	0x40013000
 8001a3c:	58024400 	.word	0x58024400
 8001a40:	58020400 	.word	0x58020400
 8001a44:	58020000 	.word	0x58020000
 8001a48:	40003800 	.word	0x40003800
 8001a4c:	58020800 	.word	0x58020800
 8001a50:	40013400 	.word	0x40013400
 8001a54:	58021000 	.word	0x58021000

08001a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b0ba      	sub	sp, #232	@ 0xe8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a70:	f107 0318 	add.w	r3, r7, #24
 8001a74:	22b8      	movs	r2, #184	@ 0xb8
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00a fbc3 	bl	800c204 <memset>
  if(huart->Instance==UART8)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a51      	ldr	r2, [pc, #324]	@ (8001bc8 <HAL_UART_MspInit+0x170>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d14e      	bne.n	8001b26 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001a88:	f04f 0202 	mov.w	r2, #2
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 fc72 	bl	8004388 <HAL_RCCEx_PeriphCLKConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001aaa:	f7ff fcc9 	bl	8001440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001aae:	4b47      	ldr	r3, [pc, #284]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ab4:	4a45      	ldr	r2, [pc, #276]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001aba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001abe:	4b43      	ldr	r3, [pc, #268]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ac4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001acc:	4b3f      	ldr	r3, [pc, #252]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001ad4:	f043 0310 	orr.w	r3, r3, #16
 8001ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001adc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001aea:	2303      	movs	r3, #3
 8001aec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001b02:	2308      	movs	r3, #8
 8001b04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4830      	ldr	r0, [pc, #192]	@ (8001bd0 <HAL_UART_MspInit+0x178>)
 8001b10:	f001 f98c 	bl	8002e2c <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	2053      	movs	r0, #83	@ 0x53
 8001b1a:	f000 fb76 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001b1e:	2053      	movs	r0, #83	@ 0x53
 8001b20:	f000 fb8d 	bl	800223e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b24:	e04b      	b.n	8001bbe <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd4 <HAL_UART_MspInit+0x17c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d146      	bne.n	8001bbe <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b30:	f04f 0201 	mov.w	r2, #1
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 fc1e 	bl	8004388 <HAL_RCCEx_PeriphCLKConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8001b52:	f7ff fc75 	bl	8001440 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001b5e:	f043 0310 	orr.w	r3, r3, #16
 8001b62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7a:	4a14      	ldr	r2, [pc, #80]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_UART_MspInit+0x174>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bac:	2307      	movs	r3, #7
 8001bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4807      	ldr	r0, [pc, #28]	@ (8001bd8 <HAL_UART_MspInit+0x180>)
 8001bba:	f001 f937 	bl	8002e2c <HAL_GPIO_Init>
}
 8001bbe:	bf00      	nop
 8001bc0:	37e8      	adds	r7, #232	@ 0xe8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40007c00 	.word	0x40007c00
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	58021000 	.word	0x58021000
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	58020000 	.word	0x58020000

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <NMI_Handler+0x4>

08001be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c32:	f000 f9cb 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <UART8_IRQHandler+0x10>)
 8001c42:	f006 fd57 	bl	80086f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	24000504 	.word	0x24000504

08001c50 <_getpid>:
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	2301      	movs	r3, #1
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_kill>:
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	f00a fb1d 	bl	800c2a8 <__errno>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2216      	movs	r2, #22
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_exit>:
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ffe7 	bl	8001c60 <_kill>
 8001c92:	bf00      	nop
 8001c94:	e7fd      	b.n	8001c92 <_exit+0x12>

08001c96 <_read>:
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e00a      	b.n	8001cbe <_read+0x28>
 8001ca8:	f3af 8000 	nop.w
 8001cac:	4601      	mov	r1, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	60ba      	str	r2, [r7, #8]
 8001cb4:	b2ca      	uxtb	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbf0      	blt.n	8001ca8 <_read+0x12>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_close>:
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_fstat>:
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_isatty>:
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	2301      	movs	r3, #1
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_lseek>:
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_sbrk>:
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
 8001d68:	f00a fa9e 	bl	800c2a8 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	24050000 	.word	0x24050000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	24000630 	.word	0x24000630
 8001da0:	24000798 	.word	0x24000798

08001da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001da8:	4b32      	ldr	r3, [pc, #200]	@ (8001e74 <SystemInit+0xd0>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	4a31      	ldr	r2, [pc, #196]	@ (8001e74 <SystemInit+0xd0>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001db8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e78 <SystemInit+0xd4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	2b06      	cmp	r3, #6
 8001dc2:	d807      	bhi.n	8001dd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e78 <SystemInit+0xd4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 030f 	bic.w	r3, r3, #15
 8001dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8001e78 <SystemInit+0xd4>)
 8001dce:	f043 0307 	orr.w	r3, r3, #7
 8001dd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001dd4:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <SystemInit+0xd8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a28      	ldr	r2, [pc, #160]	@ (8001e7c <SystemInit+0xd8>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001de0:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <SystemInit+0xd8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001de6:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <SystemInit+0xd8>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4924      	ldr	r1, [pc, #144]	@ (8001e7c <SystemInit+0xd8>)
 8001dec:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <SystemInit+0xdc>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001df2:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <SystemInit+0xd4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <SystemInit+0xd4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 030f 	bic.w	r3, r3, #15
 8001e06:	4a1c      	ldr	r2, [pc, #112]	@ (8001e78 <SystemInit+0xd4>)
 8001e08:	f043 0307 	orr.w	r3, r3, #7
 8001e0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <SystemInit+0xd8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <SystemInit+0xd8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e1a:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <SystemInit+0xd8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e20:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <SystemInit+0xd8>)
 8001e22:	4a18      	ldr	r2, [pc, #96]	@ (8001e84 <SystemInit+0xe0>)
 8001e24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e26:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <SystemInit+0xd8>)
 8001e28:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <SystemInit+0xe4>)
 8001e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <SystemInit+0xd8>)
 8001e2e:	4a17      	ldr	r2, [pc, #92]	@ (8001e8c <SystemInit+0xe8>)
 8001e30:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e32:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <SystemInit+0xd8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e38:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <SystemInit+0xd8>)
 8001e3a:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <SystemInit+0xe8>)
 8001e3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <SystemInit+0xd8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <SystemInit+0xd8>)
 8001e46:	4a11      	ldr	r2, [pc, #68]	@ (8001e8c <SystemInit+0xe8>)
 8001e48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <SystemInit+0xd8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <SystemInit+0xd8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <SystemInit+0xd8>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <SystemInit+0xd8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <SystemInit+0xec>)
 8001e64:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00
 8001e78:	52002000 	.word	0x52002000
 8001e7c:	58024400 	.word	0x58024400
 8001e80:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e84:	02020200 	.word	0x02020200
 8001e88:	01ff0000 	.word	0x01ff0000
 8001e8c:	01010280 	.word	0x01010280
 8001e90:	52004000 	.word	0x52004000

08001e94 <Reset_Handler>:
 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ecc <LoopFillZerobss+0xe>
 8001e98:	f7ff ff84 	bl	8001da4 <SystemInit>
 8001e9c:	480c      	ldr	r0, [pc, #48]	@ (8001ed0 <LoopFillZerobss+0x12>)
 8001e9e:	490d      	ldr	r1, [pc, #52]	@ (8001ed4 <LoopFillZerobss+0x16>)
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed8 <LoopFillZerobss+0x1a>)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:
 8001ea6:	58d4      	ldr	r4, [r2, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:
 8001eac:	18c4      	adds	r4, r0, r3
 8001eae:	428c      	cmp	r4, r1
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <LoopFillZerobss+0x1e>)
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee0 <LoopFillZerobss+0x22>)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:
 8001ebe:	42a2      	cmp	r2, r4
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>
 8001ec2:	f00a f9f7 	bl	800c2b4 <__libc_init_array>
 8001ec6:	f7fe fe5d 	bl	8000b84 <main>
 8001eca:	4770      	bx	lr
 8001ecc:	24050000 	.word	0x24050000
 8001ed0:	24000000 	.word	0x24000000
 8001ed4:	240001d8 	.word	0x240001d8
 8001ed8:	0800fc40 	.word	0x0800fc40
 8001edc:	240001d8 	.word	0x240001d8
 8001ee0:	24000798 	.word	0x24000798

08001ee4 <ADC3_IRQHandler>:
 8001ee4:	e7fe      	b.n	8001ee4 <ADC3_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eee:	2003      	movs	r0, #3
 8001ef0:	f000 f980 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ef4:	f002 f872 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_Init+0x68>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	4913      	ldr	r1, [pc, #76]	@ (8001f54 <HAL_Init+0x6c>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f12:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <HAL_Init+0x68>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <HAL_Init+0x6c>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_Init+0x70>)
 8001f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f5c <HAL_Init+0x74>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f32:	2000      	movs	r0, #0
 8001f34:	f000 f814 	bl	8001f60 <HAL_InitTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e002      	b.n	8001f48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f42:	f7ff fa83 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	58024400 	.word	0x58024400
 8001f54:	0800f7b4 	.word	0x0800f7b4
 8001f58:	24000004 	.word	0x24000004
 8001f5c:	24000000 	.word	0x24000000

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f68:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_InitTick+0x60>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e021      	b.n	8001fb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <HAL_InitTick+0x64>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_InitTick+0x60>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f965 	bl	800225a <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 f92f 	bl	800220a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	@ (8001fc8 <HAL_InitTick+0x68>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	2400000c 	.word	0x2400000c
 8001fc4:	24000000 	.word	0x24000000
 8001fc8:	24000008 	.word	0x24000008

08001fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_IncTick+0x20>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_IncTick+0x24>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <HAL_IncTick+0x24>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	2400000c 	.word	0x2400000c
 8001ff0:	24000634 	.word	0x24000634

08001ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_GetTick+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	24000634 	.word	0x24000634

0800200c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff ffee 	bl	8001ff4 <HAL_GetTick>
 8002018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d005      	beq.n	8002032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_Delay+0x44>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002032:	bf00      	nop
 8002034:	f7ff ffde 	bl	8001ff4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d8f7      	bhi.n	8002034 <HAL_Delay+0x28>
  {
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2400000c 	.word	0x2400000c

08002054 <__NVIC_SetPriorityGrouping>:
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <__NVIC_SetPriorityGrouping+0x40>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	4313      	orrs	r3, r2
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <__NVIC_SetPriorityGrouping+0x40>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00
 8002098:	05fa0000 	.word	0x05fa0000

0800209c <__NVIC_GetPriorityGrouping>:
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_EnableIRQ>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	db0b      	blt.n	80020e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4907      	ldr	r1, [pc, #28]	@ (80020f0 <__NVIC_EnableIRQ+0x38>)
 80020d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2001      	movs	r0, #1
 80020da:	fa00 f202 	lsl.w	r2, r0, r2
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000e100 	.word	0xe000e100

080020f4 <__NVIC_SetPriority>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db0a      	blt.n	800211e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	490c      	ldr	r1, [pc, #48]	@ (8002140 <__NVIC_SetPriority+0x4c>)
 800210e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	440b      	add	r3, r1
 8002118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800211c:	e00a      	b.n	8002134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4908      	ldr	r1, [pc, #32]	@ (8002144 <__NVIC_SetPriority+0x50>)
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3b04      	subs	r3, #4
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	440b      	add	r3, r1
 8002132:	761a      	strb	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <NVIC_EncodePriority>:
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	@ 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f1c3 0307 	rsb	r3, r3, #7
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf28      	it	cs
 8002166:	2304      	movcs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <NVIC_EncodePriority+0x30>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3b03      	subs	r3, #3
 8002176:	e000      	b.n	800217a <NVIC_EncodePriority+0x32>
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43d9      	mvns	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	4313      	orrs	r3, r2
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	@ 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <SysTick_Config>:
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c0:	d301      	bcc.n	80021c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00f      	b.n	80021e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c6:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <SysTick_Config+0x40>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ce:	210f      	movs	r1, #15
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f7ff ff8e 	bl	80020f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <SysTick_Config+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021de:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <SysTick_Config+0x40>)
 80021e0:	2207      	movs	r2, #7
 80021e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff29 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff40 	bl	800209c <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff90 	bl	8002148 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff5f 	bl	80020f4 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff33 	bl	80020b8 <__NVIC_EnableIRQ>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffa4 	bl	80021b0 <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002278:	f3bf 8f5f 	dmb	sy
}
 800227c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <HAL_MPU_Disable+0x28>)
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	4a06      	ldr	r2, [pc, #24]	@ (800229c <HAL_MPU_Disable+0x28>)
 8002284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002288:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_MPU_Disable+0x2c>)
 800228c:	2200      	movs	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00
 80022a0:	e000ed90 	.word	0xe000ed90

080022a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80022ac:	4a0b      	ldr	r2, [pc, #44]	@ (80022dc <HAL_MPU_Enable+0x38>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_MPU_Enable+0x3c>)
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	4a09      	ldr	r2, [pc, #36]	@ (80022e0 <HAL_MPU_Enable+0x3c>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80022c2:	f3bf 8f4f 	dsb	sy
}
 80022c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022c8:	f3bf 8f6f 	isb	sy
}
 80022cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed90 	.word	0xe000ed90
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	785a      	ldrb	r2, [r3, #1]
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_MPU_ConfigRegion+0x7c>)
 80022f2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80022f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002360 <HAL_MPU_ConfigRegion+0x7c>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	4a19      	ldr	r2, [pc, #100]	@ (8002360 <HAL_MPU_ConfigRegion+0x7c>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002300:	4a17      	ldr	r2, [pc, #92]	@ (8002360 <HAL_MPU_ConfigRegion+0x7c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7b1b      	ldrb	r3, [r3, #12]
 800230c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7adb      	ldrb	r3, [r3, #11]
 8002312:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002314:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7a9b      	ldrb	r3, [r3, #10]
 800231a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800231c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7b5b      	ldrb	r3, [r3, #13]
 8002322:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002324:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7b9b      	ldrb	r3, [r3, #14]
 800232a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800232c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7bdb      	ldrb	r3, [r3, #15]
 8002332:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002334:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7a5b      	ldrb	r3, [r3, #9]
 800233a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800233c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7a1b      	ldrb	r3, [r3, #8]
 8002342:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002344:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800234c:	4a04      	ldr	r2, [pc, #16]	@ (8002360 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800234e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002350:	6113      	str	r3, [r2, #16]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed90 	.word	0xe000ed90

08002364 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fe42 	bl	8001ff4 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e2dc      	b.n	8002936 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d008      	beq.n	800239a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2280      	movs	r2, #128	@ 0x80
 800238c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e2cd      	b.n	8002936 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a76      	ldr	r2, [pc, #472]	@ (8002578 <HAL_DMA_Abort+0x214>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04a      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a74      	ldr	r2, [pc, #464]	@ (800257c <HAL_DMA_Abort+0x218>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d045      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a73      	ldr	r2, [pc, #460]	@ (8002580 <HAL_DMA_Abort+0x21c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d040      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a71      	ldr	r2, [pc, #452]	@ (8002584 <HAL_DMA_Abort+0x220>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d03b      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a70      	ldr	r2, [pc, #448]	@ (8002588 <HAL_DMA_Abort+0x224>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d036      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6e      	ldr	r2, [pc, #440]	@ (800258c <HAL_DMA_Abort+0x228>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d031      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6d      	ldr	r2, [pc, #436]	@ (8002590 <HAL_DMA_Abort+0x22c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d02c      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a6b      	ldr	r2, [pc, #428]	@ (8002594 <HAL_DMA_Abort+0x230>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d027      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6a      	ldr	r2, [pc, #424]	@ (8002598 <HAL_DMA_Abort+0x234>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a68      	ldr	r2, [pc, #416]	@ (800259c <HAL_DMA_Abort+0x238>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01d      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a67      	ldr	r2, [pc, #412]	@ (80025a0 <HAL_DMA_Abort+0x23c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d018      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a65      	ldr	r2, [pc, #404]	@ (80025a4 <HAL_DMA_Abort+0x240>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a64      	ldr	r2, [pc, #400]	@ (80025a8 <HAL_DMA_Abort+0x244>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00e      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a62      	ldr	r2, [pc, #392]	@ (80025ac <HAL_DMA_Abort+0x248>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a61      	ldr	r2, [pc, #388]	@ (80025b0 <HAL_DMA_Abort+0x24c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_DMA_Abort+0xd6>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a5f      	ldr	r2, [pc, #380]	@ (80025b4 <HAL_DMA_Abort+0x250>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_DMA_Abort+0xda>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_DMA_Abort+0xdc>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 021e 	bic.w	r2, r2, #30
 8002452:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002462:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e00a      	b.n	8002482 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 020e 	bic.w	r2, r2, #14
 800247a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a3c      	ldr	r2, [pc, #240]	@ (8002578 <HAL_DMA_Abort+0x214>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d072      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a3a      	ldr	r2, [pc, #232]	@ (800257c <HAL_DMA_Abort+0x218>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d06d      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a39      	ldr	r2, [pc, #228]	@ (8002580 <HAL_DMA_Abort+0x21c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d068      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a37      	ldr	r2, [pc, #220]	@ (8002584 <HAL_DMA_Abort+0x220>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d063      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a36      	ldr	r2, [pc, #216]	@ (8002588 <HAL_DMA_Abort+0x224>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d05e      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a34      	ldr	r2, [pc, #208]	@ (800258c <HAL_DMA_Abort+0x228>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d059      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a33      	ldr	r2, [pc, #204]	@ (8002590 <HAL_DMA_Abort+0x22c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d054      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a31      	ldr	r2, [pc, #196]	@ (8002594 <HAL_DMA_Abort+0x230>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d04f      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a30      	ldr	r2, [pc, #192]	@ (8002598 <HAL_DMA_Abort+0x234>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d04a      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2e      	ldr	r2, [pc, #184]	@ (800259c <HAL_DMA_Abort+0x238>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d045      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a2d      	ldr	r2, [pc, #180]	@ (80025a0 <HAL_DMA_Abort+0x23c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d040      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2b      	ldr	r2, [pc, #172]	@ (80025a4 <HAL_DMA_Abort+0x240>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d03b      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2a      	ldr	r2, [pc, #168]	@ (80025a8 <HAL_DMA_Abort+0x244>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d036      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a28      	ldr	r2, [pc, #160]	@ (80025ac <HAL_DMA_Abort+0x248>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d031      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a27      	ldr	r2, [pc, #156]	@ (80025b0 <HAL_DMA_Abort+0x24c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d02c      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a25      	ldr	r2, [pc, #148]	@ (80025b4 <HAL_DMA_Abort+0x250>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d027      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a24      	ldr	r2, [pc, #144]	@ (80025b8 <HAL_DMA_Abort+0x254>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a22      	ldr	r2, [pc, #136]	@ (80025bc <HAL_DMA_Abort+0x258>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01d      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a21      	ldr	r2, [pc, #132]	@ (80025c0 <HAL_DMA_Abort+0x25c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d018      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1f      	ldr	r2, [pc, #124]	@ (80025c4 <HAL_DMA_Abort+0x260>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1e      	ldr	r2, [pc, #120]	@ (80025c8 <HAL_DMA_Abort+0x264>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00e      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1c      	ldr	r2, [pc, #112]	@ (80025cc <HAL_DMA_Abort+0x268>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1b      	ldr	r2, [pc, #108]	@ (80025d0 <HAL_DMA_Abort+0x26c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d004      	beq.n	8002572 <HAL_DMA_Abort+0x20e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a19      	ldr	r2, [pc, #100]	@ (80025d4 <HAL_DMA_Abort+0x270>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d132      	bne.n	80025d8 <HAL_DMA_Abort+0x274>
 8002572:	2301      	movs	r3, #1
 8002574:	e031      	b.n	80025da <HAL_DMA_Abort+0x276>
 8002576:	bf00      	nop
 8002578:	40020010 	.word	0x40020010
 800257c:	40020028 	.word	0x40020028
 8002580:	40020040 	.word	0x40020040
 8002584:	40020058 	.word	0x40020058
 8002588:	40020070 	.word	0x40020070
 800258c:	40020088 	.word	0x40020088
 8002590:	400200a0 	.word	0x400200a0
 8002594:	400200b8 	.word	0x400200b8
 8002598:	40020410 	.word	0x40020410
 800259c:	40020428 	.word	0x40020428
 80025a0:	40020440 	.word	0x40020440
 80025a4:	40020458 	.word	0x40020458
 80025a8:	40020470 	.word	0x40020470
 80025ac:	40020488 	.word	0x40020488
 80025b0:	400204a0 	.word	0x400204a0
 80025b4:	400204b8 	.word	0x400204b8
 80025b8:	58025408 	.word	0x58025408
 80025bc:	5802541c 	.word	0x5802541c
 80025c0:	58025430 	.word	0x58025430
 80025c4:	58025444 	.word	0x58025444
 80025c8:	58025458 	.word	0x58025458
 80025cc:	5802546c 	.word	0x5802546c
 80025d0:	58025480 	.word	0x58025480
 80025d4:	58025494 	.word	0x58025494
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6d      	ldr	r2, [pc, #436]	@ (80027a8 <HAL_DMA_Abort+0x444>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d04a      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a6b      	ldr	r2, [pc, #428]	@ (80027ac <HAL_DMA_Abort+0x448>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d045      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6a      	ldr	r2, [pc, #424]	@ (80027b0 <HAL_DMA_Abort+0x44c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d040      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a68      	ldr	r2, [pc, #416]	@ (80027b4 <HAL_DMA_Abort+0x450>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d03b      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a67      	ldr	r2, [pc, #412]	@ (80027b8 <HAL_DMA_Abort+0x454>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d036      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a65      	ldr	r2, [pc, #404]	@ (80027bc <HAL_DMA_Abort+0x458>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d031      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a64      	ldr	r2, [pc, #400]	@ (80027c0 <HAL_DMA_Abort+0x45c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d02c      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a62      	ldr	r2, [pc, #392]	@ (80027c4 <HAL_DMA_Abort+0x460>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d027      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a61      	ldr	r2, [pc, #388]	@ (80027c8 <HAL_DMA_Abort+0x464>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d022      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a5f      	ldr	r2, [pc, #380]	@ (80027cc <HAL_DMA_Abort+0x468>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01d      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a5e      	ldr	r2, [pc, #376]	@ (80027d0 <HAL_DMA_Abort+0x46c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d018      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a5c      	ldr	r2, [pc, #368]	@ (80027d4 <HAL_DMA_Abort+0x470>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a5b      	ldr	r2, [pc, #364]	@ (80027d8 <HAL_DMA_Abort+0x474>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00e      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a59      	ldr	r2, [pc, #356]	@ (80027dc <HAL_DMA_Abort+0x478>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a58      	ldr	r2, [pc, #352]	@ (80027e0 <HAL_DMA_Abort+0x47c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_DMA_Abort+0x32a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a56      	ldr	r2, [pc, #344]	@ (80027e4 <HAL_DMA_Abort+0x480>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d108      	bne.n	80026a0 <HAL_DMA_Abort+0x33c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e007      	b.n	80026b0 <HAL_DMA_Abort+0x34c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80026b0:	e013      	b.n	80026da <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026b2:	f7ff fc9f 	bl	8001ff4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d90c      	bls.n	80026da <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e12d      	b.n	8002936 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1e5      	bne.n	80026b2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2f      	ldr	r2, [pc, #188]	@ (80027a8 <HAL_DMA_Abort+0x444>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d04a      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2d      	ldr	r2, [pc, #180]	@ (80027ac <HAL_DMA_Abort+0x448>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d045      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2c      	ldr	r2, [pc, #176]	@ (80027b0 <HAL_DMA_Abort+0x44c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d040      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2a      	ldr	r2, [pc, #168]	@ (80027b4 <HAL_DMA_Abort+0x450>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d03b      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a29      	ldr	r2, [pc, #164]	@ (80027b8 <HAL_DMA_Abort+0x454>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d036      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a27      	ldr	r2, [pc, #156]	@ (80027bc <HAL_DMA_Abort+0x458>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d031      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a26      	ldr	r2, [pc, #152]	@ (80027c0 <HAL_DMA_Abort+0x45c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d02c      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a24      	ldr	r2, [pc, #144]	@ (80027c4 <HAL_DMA_Abort+0x460>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d027      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a23      	ldr	r2, [pc, #140]	@ (80027c8 <HAL_DMA_Abort+0x464>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d022      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a21      	ldr	r2, [pc, #132]	@ (80027cc <HAL_DMA_Abort+0x468>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01d      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a20      	ldr	r2, [pc, #128]	@ (80027d0 <HAL_DMA_Abort+0x46c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d018      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1e      	ldr	r2, [pc, #120]	@ (80027d4 <HAL_DMA_Abort+0x470>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1d      	ldr	r2, [pc, #116]	@ (80027d8 <HAL_DMA_Abort+0x474>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00e      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1b      	ldr	r2, [pc, #108]	@ (80027dc <HAL_DMA_Abort+0x478>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1a      	ldr	r2, [pc, #104]	@ (80027e0 <HAL_DMA_Abort+0x47c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_DMA_Abort+0x422>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a18      	ldr	r2, [pc, #96]	@ (80027e4 <HAL_DMA_Abort+0x480>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d101      	bne.n	800278a <HAL_DMA_Abort+0x426>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_DMA_Abort+0x428>
 800278a:	2300      	movs	r3, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d02b      	beq.n	80027e8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002794:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	223f      	movs	r2, #63	@ 0x3f
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	e02a      	b.n	80027fe <HAL_DMA_Abort+0x49a>
 80027a8:	40020010 	.word	0x40020010
 80027ac:	40020028 	.word	0x40020028
 80027b0:	40020040 	.word	0x40020040
 80027b4:	40020058 	.word	0x40020058
 80027b8:	40020070 	.word	0x40020070
 80027bc:	40020088 	.word	0x40020088
 80027c0:	400200a0 	.word	0x400200a0
 80027c4:	400200b8 	.word	0x400200b8
 80027c8:	40020410 	.word	0x40020410
 80027cc:	40020428 	.word	0x40020428
 80027d0:	40020440 	.word	0x40020440
 80027d4:	40020458 	.word	0x40020458
 80027d8:	40020470 	.word	0x40020470
 80027dc:	40020488 	.word	0x40020488
 80027e0:	400204a0 	.word	0x400204a0
 80027e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	2201      	movs	r2, #1
 80027f8:	409a      	lsls	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4f      	ldr	r2, [pc, #316]	@ (8002940 <HAL_DMA_Abort+0x5dc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d072      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a4d      	ldr	r2, [pc, #308]	@ (8002944 <HAL_DMA_Abort+0x5e0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d06d      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a4c      	ldr	r2, [pc, #304]	@ (8002948 <HAL_DMA_Abort+0x5e4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d068      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a4a      	ldr	r2, [pc, #296]	@ (800294c <HAL_DMA_Abort+0x5e8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d063      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a49      	ldr	r2, [pc, #292]	@ (8002950 <HAL_DMA_Abort+0x5ec>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d05e      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a47      	ldr	r2, [pc, #284]	@ (8002954 <HAL_DMA_Abort+0x5f0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d059      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a46      	ldr	r2, [pc, #280]	@ (8002958 <HAL_DMA_Abort+0x5f4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d054      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a44      	ldr	r2, [pc, #272]	@ (800295c <HAL_DMA_Abort+0x5f8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d04f      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a43      	ldr	r2, [pc, #268]	@ (8002960 <HAL_DMA_Abort+0x5fc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d04a      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a41      	ldr	r2, [pc, #260]	@ (8002964 <HAL_DMA_Abort+0x600>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d045      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a40      	ldr	r2, [pc, #256]	@ (8002968 <HAL_DMA_Abort+0x604>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d040      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3e      	ldr	r2, [pc, #248]	@ (800296c <HAL_DMA_Abort+0x608>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d03b      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a3d      	ldr	r2, [pc, #244]	@ (8002970 <HAL_DMA_Abort+0x60c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d036      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a3b      	ldr	r2, [pc, #236]	@ (8002974 <HAL_DMA_Abort+0x610>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d031      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a3a      	ldr	r2, [pc, #232]	@ (8002978 <HAL_DMA_Abort+0x614>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d02c      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a38      	ldr	r2, [pc, #224]	@ (800297c <HAL_DMA_Abort+0x618>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d027      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a37      	ldr	r2, [pc, #220]	@ (8002980 <HAL_DMA_Abort+0x61c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d022      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a35      	ldr	r2, [pc, #212]	@ (8002984 <HAL_DMA_Abort+0x620>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01d      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a34      	ldr	r2, [pc, #208]	@ (8002988 <HAL_DMA_Abort+0x624>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d018      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a32      	ldr	r2, [pc, #200]	@ (800298c <HAL_DMA_Abort+0x628>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a31      	ldr	r2, [pc, #196]	@ (8002990 <HAL_DMA_Abort+0x62c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00e      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002994 <HAL_DMA_Abort+0x630>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2e      	ldr	r2, [pc, #184]	@ (8002998 <HAL_DMA_Abort+0x634>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d004      	beq.n	80028ee <HAL_DMA_Abort+0x58a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2c      	ldr	r2, [pc, #176]	@ (800299c <HAL_DMA_Abort+0x638>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_DMA_Abort+0x58e>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_DMA_Abort+0x590>
 80028f2:	2300      	movs	r3, #0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002900:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002914:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002918:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002922:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40020010 	.word	0x40020010
 8002944:	40020028 	.word	0x40020028
 8002948:	40020040 	.word	0x40020040
 800294c:	40020058 	.word	0x40020058
 8002950:	40020070 	.word	0x40020070
 8002954:	40020088 	.word	0x40020088
 8002958:	400200a0 	.word	0x400200a0
 800295c:	400200b8 	.word	0x400200b8
 8002960:	40020410 	.word	0x40020410
 8002964:	40020428 	.word	0x40020428
 8002968:	40020440 	.word	0x40020440
 800296c:	40020458 	.word	0x40020458
 8002970:	40020470 	.word	0x40020470
 8002974:	40020488 	.word	0x40020488
 8002978:	400204a0 	.word	0x400204a0
 800297c:	400204b8 	.word	0x400204b8
 8002980:	58025408 	.word	0x58025408
 8002984:	5802541c 	.word	0x5802541c
 8002988:	58025430 	.word	0x58025430
 800298c:	58025444 	.word	0x58025444
 8002990:	58025458 	.word	0x58025458
 8002994:	5802546c 	.word	0x5802546c
 8002998:	58025480 	.word	0x58025480
 800299c:	58025494 	.word	0x58025494

080029a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e237      	b.n	8002e22 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d004      	beq.n	80029c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2280      	movs	r2, #128	@ 0x80
 80029c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e22c      	b.n	8002e22 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002b40 <HAL_DMA_Abort_IT+0x1a0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d04a      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b44 <HAL_DMA_Abort_IT+0x1a4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d045      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a59      	ldr	r2, [pc, #356]	@ (8002b48 <HAL_DMA_Abort_IT+0x1a8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d040      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a58      	ldr	r2, [pc, #352]	@ (8002b4c <HAL_DMA_Abort_IT+0x1ac>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d03b      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a56      	ldr	r2, [pc, #344]	@ (8002b50 <HAL_DMA_Abort_IT+0x1b0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d036      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a55      	ldr	r2, [pc, #340]	@ (8002b54 <HAL_DMA_Abort_IT+0x1b4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d031      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a53      	ldr	r2, [pc, #332]	@ (8002b58 <HAL_DMA_Abort_IT+0x1b8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d02c      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <HAL_DMA_Abort_IT+0x1bc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d027      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a50      	ldr	r2, [pc, #320]	@ (8002b60 <HAL_DMA_Abort_IT+0x1c0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d022      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a4f      	ldr	r2, [pc, #316]	@ (8002b64 <HAL_DMA_Abort_IT+0x1c4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d01d      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a4d      	ldr	r2, [pc, #308]	@ (8002b68 <HAL_DMA_Abort_IT+0x1c8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d018      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b6c <HAL_DMA_Abort_IT+0x1cc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a4a      	ldr	r2, [pc, #296]	@ (8002b70 <HAL_DMA_Abort_IT+0x1d0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00e      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a49      	ldr	r2, [pc, #292]	@ (8002b74 <HAL_DMA_Abort_IT+0x1d4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d009      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a47      	ldr	r2, [pc, #284]	@ (8002b78 <HAL_DMA_Abort_IT+0x1d8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a46      	ldr	r2, [pc, #280]	@ (8002b7c <HAL_DMA_Abort_IT+0x1dc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d101      	bne.n	8002a6c <HAL_DMA_Abort_IT+0xcc>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_DMA_Abort_IT+0xce>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8086 	beq.w	8002b80 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2204      	movs	r2, #4
 8002a78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2f      	ldr	r2, [pc, #188]	@ (8002b40 <HAL_DMA_Abort_IT+0x1a0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d04a      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b44 <HAL_DMA_Abort_IT+0x1a4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d045      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2c      	ldr	r2, [pc, #176]	@ (8002b48 <HAL_DMA_Abort_IT+0x1a8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d040      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b4c <HAL_DMA_Abort_IT+0x1ac>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d03b      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a29      	ldr	r2, [pc, #164]	@ (8002b50 <HAL_DMA_Abort_IT+0x1b0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d036      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a28      	ldr	r2, [pc, #160]	@ (8002b54 <HAL_DMA_Abort_IT+0x1b4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d031      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a26      	ldr	r2, [pc, #152]	@ (8002b58 <HAL_DMA_Abort_IT+0x1b8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02c      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a25      	ldr	r2, [pc, #148]	@ (8002b5c <HAL_DMA_Abort_IT+0x1bc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d027      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a23      	ldr	r2, [pc, #140]	@ (8002b60 <HAL_DMA_Abort_IT+0x1c0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d022      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a22      	ldr	r2, [pc, #136]	@ (8002b64 <HAL_DMA_Abort_IT+0x1c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d01d      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a20      	ldr	r2, [pc, #128]	@ (8002b68 <HAL_DMA_Abort_IT+0x1c8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d018      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <HAL_DMA_Abort_IT+0x1cc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d013      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b70 <HAL_DMA_Abort_IT+0x1d0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00e      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1c      	ldr	r2, [pc, #112]	@ (8002b74 <HAL_DMA_Abort_IT+0x1d4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d009      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002b78 <HAL_DMA_Abort_IT+0x1d8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a19      	ldr	r2, [pc, #100]	@ (8002b7c <HAL_DMA_Abort_IT+0x1dc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d108      	bne.n	8002b2e <HAL_DMA_Abort_IT+0x18e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	e178      	b.n	8002e20 <HAL_DMA_Abort_IT+0x480>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e16f      	b.n	8002e20 <HAL_DMA_Abort_IT+0x480>
 8002b40:	40020010 	.word	0x40020010
 8002b44:	40020028 	.word	0x40020028
 8002b48:	40020040 	.word	0x40020040
 8002b4c:	40020058 	.word	0x40020058
 8002b50:	40020070 	.word	0x40020070
 8002b54:	40020088 	.word	0x40020088
 8002b58:	400200a0 	.word	0x400200a0
 8002b5c:	400200b8 	.word	0x400200b8
 8002b60:	40020410 	.word	0x40020410
 8002b64:	40020428 	.word	0x40020428
 8002b68:	40020440 	.word	0x40020440
 8002b6c:	40020458 	.word	0x40020458
 8002b70:	40020470 	.word	0x40020470
 8002b74:	40020488 	.word	0x40020488
 8002b78:	400204a0 	.word	0x400204a0
 8002b7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 020e 	bic.w	r2, r2, #14
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a6c      	ldr	r2, [pc, #432]	@ (8002d48 <HAL_DMA_Abort_IT+0x3a8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d04a      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a6b      	ldr	r2, [pc, #428]	@ (8002d4c <HAL_DMA_Abort_IT+0x3ac>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d045      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a69      	ldr	r2, [pc, #420]	@ (8002d50 <HAL_DMA_Abort_IT+0x3b0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d040      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a68      	ldr	r2, [pc, #416]	@ (8002d54 <HAL_DMA_Abort_IT+0x3b4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d03b      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a66      	ldr	r2, [pc, #408]	@ (8002d58 <HAL_DMA_Abort_IT+0x3b8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d036      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a65      	ldr	r2, [pc, #404]	@ (8002d5c <HAL_DMA_Abort_IT+0x3bc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d031      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a63      	ldr	r2, [pc, #396]	@ (8002d60 <HAL_DMA_Abort_IT+0x3c0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d02c      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a62      	ldr	r2, [pc, #392]	@ (8002d64 <HAL_DMA_Abort_IT+0x3c4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d027      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a60      	ldr	r2, [pc, #384]	@ (8002d68 <HAL_DMA_Abort_IT+0x3c8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d022      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5f      	ldr	r2, [pc, #380]	@ (8002d6c <HAL_DMA_Abort_IT+0x3cc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d01d      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d70 <HAL_DMA_Abort_IT+0x3d0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d018      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5c      	ldr	r2, [pc, #368]	@ (8002d74 <HAL_DMA_Abort_IT+0x3d4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d013      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002d78 <HAL_DMA_Abort_IT+0x3d8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00e      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a59      	ldr	r2, [pc, #356]	@ (8002d7c <HAL_DMA_Abort_IT+0x3dc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d009      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a57      	ldr	r2, [pc, #348]	@ (8002d80 <HAL_DMA_Abort_IT+0x3e0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x290>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a56      	ldr	r2, [pc, #344]	@ (8002d84 <HAL_DMA_Abort_IT+0x3e4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d108      	bne.n	8002c42 <HAL_DMA_Abort_IT+0x2a2>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e007      	b.n	8002c52 <HAL_DMA_Abort_IT+0x2b2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3c      	ldr	r2, [pc, #240]	@ (8002d48 <HAL_DMA_Abort_IT+0x3a8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d072      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a3a      	ldr	r2, [pc, #232]	@ (8002d4c <HAL_DMA_Abort_IT+0x3ac>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d06d      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a39      	ldr	r2, [pc, #228]	@ (8002d50 <HAL_DMA_Abort_IT+0x3b0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d068      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a37      	ldr	r2, [pc, #220]	@ (8002d54 <HAL_DMA_Abort_IT+0x3b4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d063      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a36      	ldr	r2, [pc, #216]	@ (8002d58 <HAL_DMA_Abort_IT+0x3b8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d05e      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a34      	ldr	r2, [pc, #208]	@ (8002d5c <HAL_DMA_Abort_IT+0x3bc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d059      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a33      	ldr	r2, [pc, #204]	@ (8002d60 <HAL_DMA_Abort_IT+0x3c0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d054      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a31      	ldr	r2, [pc, #196]	@ (8002d64 <HAL_DMA_Abort_IT+0x3c4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d04f      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a30      	ldr	r2, [pc, #192]	@ (8002d68 <HAL_DMA_Abort_IT+0x3c8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d04a      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8002d6c <HAL_DMA_Abort_IT+0x3cc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d045      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2d      	ldr	r2, [pc, #180]	@ (8002d70 <HAL_DMA_Abort_IT+0x3d0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d040      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d74 <HAL_DMA_Abort_IT+0x3d4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d03b      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2a      	ldr	r2, [pc, #168]	@ (8002d78 <HAL_DMA_Abort_IT+0x3d8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d036      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a28      	ldr	r2, [pc, #160]	@ (8002d7c <HAL_DMA_Abort_IT+0x3dc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d031      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a27      	ldr	r2, [pc, #156]	@ (8002d80 <HAL_DMA_Abort_IT+0x3e0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d02c      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a25      	ldr	r2, [pc, #148]	@ (8002d84 <HAL_DMA_Abort_IT+0x3e4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d027      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a24      	ldr	r2, [pc, #144]	@ (8002d88 <HAL_DMA_Abort_IT+0x3e8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d022      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a22      	ldr	r2, [pc, #136]	@ (8002d8c <HAL_DMA_Abort_IT+0x3ec>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01d      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a21      	ldr	r2, [pc, #132]	@ (8002d90 <HAL_DMA_Abort_IT+0x3f0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d018      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1f      	ldr	r2, [pc, #124]	@ (8002d94 <HAL_DMA_Abort_IT+0x3f4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8002d98 <HAL_DMA_Abort_IT+0x3f8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00e      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1c      	ldr	r2, [pc, #112]	@ (8002d9c <HAL_DMA_Abort_IT+0x3fc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1b      	ldr	r2, [pc, #108]	@ (8002da0 <HAL_DMA_Abort_IT+0x400>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x3a2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	@ (8002da4 <HAL_DMA_Abort_IT+0x404>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d132      	bne.n	8002da8 <HAL_DMA_Abort_IT+0x408>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e031      	b.n	8002daa <HAL_DMA_Abort_IT+0x40a>
 8002d46:	bf00      	nop
 8002d48:	40020010 	.word	0x40020010
 8002d4c:	40020028 	.word	0x40020028
 8002d50:	40020040 	.word	0x40020040
 8002d54:	40020058 	.word	0x40020058
 8002d58:	40020070 	.word	0x40020070
 8002d5c:	40020088 	.word	0x40020088
 8002d60:	400200a0 	.word	0x400200a0
 8002d64:	400200b8 	.word	0x400200b8
 8002d68:	40020410 	.word	0x40020410
 8002d6c:	40020428 	.word	0x40020428
 8002d70:	40020440 	.word	0x40020440
 8002d74:	40020458 	.word	0x40020458
 8002d78:	40020470 	.word	0x40020470
 8002d7c:	40020488 	.word	0x40020488
 8002d80:	400204a0 	.word	0x400204a0
 8002d84:	400204b8 	.word	0x400204b8
 8002d88:	58025408 	.word	0x58025408
 8002d8c:	5802541c 	.word	0x5802541c
 8002d90:	58025430 	.word	0x58025430
 8002d94:	58025444 	.word	0x58025444
 8002d98:	58025458 	.word	0x58025458
 8002d9c:	5802546c 	.word	0x5802546c
 8002da0:	58025480 	.word	0x58025480
 8002da4:	58025494 	.word	0x58025494
 8002da8:	2300      	movs	r3, #0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d028      	beq.n	8002e00 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2201      	movs	r2, #1
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ddc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002df4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002dfe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	@ 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e3a:	4b86      	ldr	r3, [pc, #536]	@ (8003054 <HAL_GPIO_Init+0x228>)
 8002e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e3e:	e18c      	b.n	800315a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 817e 	beq.w	8003154 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d005      	beq.n	8002e70 <HAL_GPIO_Init+0x44>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d130      	bne.n	8002ed2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0201 	and.w	r2, r3, #1
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d017      	beq.n	8002f0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2203      	movs	r2, #3
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d123      	bne.n	8002f62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	08da      	lsrs	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3208      	adds	r2, #8
 8002f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	220f      	movs	r2, #15
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	08da      	lsrs	r2, r3, #3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3208      	adds	r2, #8
 8002f5c:	69b9      	ldr	r1, [r7, #24]
 8002f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0203 	and.w	r2, r3, #3
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80d8 	beq.w	8003154 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8003058 <HAL_GPIO_Init+0x22c>)
 8002fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002faa:	4a2b      	ldr	r2, [pc, #172]	@ (8003058 <HAL_GPIO_Init+0x22c>)
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002fb4:	4b28      	ldr	r3, [pc, #160]	@ (8003058 <HAL_GPIO_Init+0x22c>)
 8002fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc2:	4a26      	ldr	r2, [pc, #152]	@ (800305c <HAL_GPIO_Init+0x230>)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	220f      	movs	r2, #15
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8003060 <HAL_GPIO_Init+0x234>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d04a      	beq.n	8003084 <HAL_GPIO_Init+0x258>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8003064 <HAL_GPIO_Init+0x238>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d02b      	beq.n	800304e <HAL_GPIO_Init+0x222>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8003068 <HAL_GPIO_Init+0x23c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d025      	beq.n	800304a <HAL_GPIO_Init+0x21e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1a      	ldr	r2, [pc, #104]	@ (800306c <HAL_GPIO_Init+0x240>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01f      	beq.n	8003046 <HAL_GPIO_Init+0x21a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a19      	ldr	r2, [pc, #100]	@ (8003070 <HAL_GPIO_Init+0x244>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d019      	beq.n	8003042 <HAL_GPIO_Init+0x216>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a18      	ldr	r2, [pc, #96]	@ (8003074 <HAL_GPIO_Init+0x248>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_GPIO_Init+0x212>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a17      	ldr	r2, [pc, #92]	@ (8003078 <HAL_GPIO_Init+0x24c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00d      	beq.n	800303a <HAL_GPIO_Init+0x20e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a16      	ldr	r2, [pc, #88]	@ (800307c <HAL_GPIO_Init+0x250>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d007      	beq.n	8003036 <HAL_GPIO_Init+0x20a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a15      	ldr	r2, [pc, #84]	@ (8003080 <HAL_GPIO_Init+0x254>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_GPIO_Init+0x206>
 800302e:	2309      	movs	r3, #9
 8003030:	e029      	b.n	8003086 <HAL_GPIO_Init+0x25a>
 8003032:	230a      	movs	r3, #10
 8003034:	e027      	b.n	8003086 <HAL_GPIO_Init+0x25a>
 8003036:	2307      	movs	r3, #7
 8003038:	e025      	b.n	8003086 <HAL_GPIO_Init+0x25a>
 800303a:	2306      	movs	r3, #6
 800303c:	e023      	b.n	8003086 <HAL_GPIO_Init+0x25a>
 800303e:	2305      	movs	r3, #5
 8003040:	e021      	b.n	8003086 <HAL_GPIO_Init+0x25a>
 8003042:	2304      	movs	r3, #4
 8003044:	e01f      	b.n	8003086 <HAL_GPIO_Init+0x25a>
 8003046:	2303      	movs	r3, #3
 8003048:	e01d      	b.n	8003086 <HAL_GPIO_Init+0x25a>
 800304a:	2302      	movs	r3, #2
 800304c:	e01b      	b.n	8003086 <HAL_GPIO_Init+0x25a>
 800304e:	2301      	movs	r3, #1
 8003050:	e019      	b.n	8003086 <HAL_GPIO_Init+0x25a>
 8003052:	bf00      	nop
 8003054:	58000080 	.word	0x58000080
 8003058:	58024400 	.word	0x58024400
 800305c:	58000400 	.word	0x58000400
 8003060:	58020000 	.word	0x58020000
 8003064:	58020400 	.word	0x58020400
 8003068:	58020800 	.word	0x58020800
 800306c:	58020c00 	.word	0x58020c00
 8003070:	58021000 	.word	0x58021000
 8003074:	58021400 	.word	0x58021400
 8003078:	58021800 	.word	0x58021800
 800307c:	58021c00 	.word	0x58021c00
 8003080:	58022400 	.word	0x58022400
 8003084:	2300      	movs	r3, #0
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	f002 0203 	and.w	r2, r2, #3
 800308c:	0092      	lsls	r2, r2, #2
 800308e:	4093      	lsls	r3, r2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003096:	4938      	ldr	r1, [pc, #224]	@ (8003178 <HAL_GPIO_Init+0x34c>)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80030ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	3301      	adds	r3, #1
 8003158:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f ae6b 	bne.w	8002e40 <HAL_GPIO_Init+0x14>
  }
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	3724      	adds	r7, #36	@ 0x24
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	58000400 	.word	0x58000400

0800317c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	e001      	b.n	800319e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
 80031b8:	4613      	mov	r3, r2
 80031ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031bc:	787b      	ldrb	r3, [r7, #1]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80031c8:	e003      	b.n	80031d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031ca:	887b      	ldrh	r3, [r7, #2]
 80031cc:	041a      	lsls	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	619a      	str	r2, [r3, #24]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e08b      	b.n	800330a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fe f93a 	bl	8001480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2224      	movs	r2, #36	@ 0x24
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003230:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003240:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	e006      	b.n	8003268 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003266:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d108      	bne.n	8003282 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	e007      	b.n	8003292 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003290:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b1d      	ldr	r3, [pc, #116]	@ (8003314 <HAL_I2C_Init+0x134>)
 800329e:	430b      	orrs	r3, r1
 80032a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69d9      	ldr	r1, [r3, #28]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1a      	ldr	r2, [r3, #32]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	02008000 	.word	0x02008000

08003318 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b20      	cmp	r3, #32
 800332c:	d138      	bne.n	80033a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003338:	2302      	movs	r3, #2
 800333a:	e032      	b.n	80033a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	@ 0x24
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800336a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d139      	bne.n	8003438 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e033      	b.n	800343a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2224      	movs	r2, #36	@ 0x24
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003400:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_PWREx_ConfigSupply+0x70>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d00a      	beq.n	8003472 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800345c:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <HAL_PWREx_ConfigSupply+0x70>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	429a      	cmp	r2, r3
 8003468:	d001      	beq.n	800346e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e01f      	b.n	80034ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e01d      	b.n	80034ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003472:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_PWREx_ConfigSupply+0x70>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f023 0207 	bic.w	r2, r3, #7
 800347a:	490f      	ldr	r1, [pc, #60]	@ (80034b8 <HAL_PWREx_ConfigSupply+0x70>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4313      	orrs	r3, r2
 8003480:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003482:	f7fe fdb7 	bl	8001ff4 <HAL_GetTick>
 8003486:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003488:	e009      	b.n	800349e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800348a:	f7fe fdb3 	bl	8001ff4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003498:	d901      	bls.n	800349e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e007      	b.n	80034ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_PWREx_ConfigSupply+0x70>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034aa:	d1ee      	bne.n	800348a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	58024800 	.word	0x58024800

080034bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	@ 0x30
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e3c8      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8087 	beq.w	80035ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034dc:	4b88      	ldr	r3, [pc, #544]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034e6:	4b86      	ldr	r3, [pc, #536]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 80034e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80034ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d007      	beq.n	8003502 <HAL_RCC_OscConfig+0x46>
 80034f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f4:	2b18      	cmp	r3, #24
 80034f6:	d110      	bne.n	800351a <HAL_RCC_OscConfig+0x5e>
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d10b      	bne.n	800351a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003502:	4b7f      	ldr	r3, [pc, #508]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d06c      	beq.n	80035e8 <HAL_RCC_OscConfig+0x12c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d168      	bne.n	80035e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e3a2      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x76>
 8003524:	4b76      	ldr	r3, [pc, #472]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a75      	ldr	r2, [pc, #468]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 800352a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	e02e      	b.n	8003590 <HAL_RCC_OscConfig+0xd4>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x98>
 800353a:	4b71      	ldr	r3, [pc, #452]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a70      	ldr	r2, [pc, #448]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b6e      	ldr	r3, [pc, #440]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a6d      	ldr	r2, [pc, #436]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 800354c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e01d      	b.n	8003590 <HAL_RCC_OscConfig+0xd4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0xbc>
 800355e:	4b68      	ldr	r3, [pc, #416]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a67      	ldr	r2, [pc, #412]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b65      	ldr	r3, [pc, #404]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a64      	ldr	r2, [pc, #400]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e00b      	b.n	8003590 <HAL_RCC_OscConfig+0xd4>
 8003578:	4b61      	ldr	r3, [pc, #388]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a60      	ldr	r2, [pc, #384]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 800357e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b5e      	ldr	r3, [pc, #376]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a5d      	ldr	r2, [pc, #372]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 800358a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe fd2c 	bl	8001ff4 <HAL_GetTick>
 800359c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe fd28 	bl	8001ff4 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e356      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035b2:	4b53      	ldr	r3, [pc, #332]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0xe4>
 80035be:	e014      	b.n	80035ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe fd18 	bl	8001ff4 <HAL_GetTick>
 80035c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe fd14 	bl	8001ff4 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	@ 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e342      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035da:	4b49      	ldr	r3, [pc, #292]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x10c>
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 808c 	beq.w	8003710 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f8:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003600:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003602:	4b3f      	ldr	r3, [pc, #252]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_RCC_OscConfig+0x162>
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	2b18      	cmp	r3, #24
 8003612:	d137      	bne.n	8003684 <HAL_RCC_OscConfig+0x1c8>
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d132      	bne.n	8003684 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800361e:	4b38      	ldr	r3, [pc, #224]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x17a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e314      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003636:	4b32      	ldr	r3, [pc, #200]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 0219 	bic.w	r2, r3, #25
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	492f      	ldr	r1, [pc, #188]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe fcd4 	bl	8001ff4 <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003650:	f7fe fcd0 	bl	8001ff4 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e2fe      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003662:	4b27      	ldr	r3, [pc, #156]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b24      	ldr	r3, [pc, #144]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	061b      	lsls	r3, r3, #24
 800367c:	4920      	ldr	r1, [pc, #128]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003682:	e045      	b.n	8003710 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d026      	beq.n	80036da <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800368c:	4b1c      	ldr	r3, [pc, #112]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 0219 	bic.w	r2, r3, #25
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4919      	ldr	r1, [pc, #100]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fe fca9 	bl	8001ff4 <HAL_GetTick>
 80036a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a6:	f7fe fca5 	bl	8001ff4 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e2d3      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	061b      	lsls	r3, r3, #24
 80036d2:	490b      	ldr	r1, [pc, #44]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
 80036d8:	e01a      	b.n	8003710 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a08      	ldr	r2, [pc, #32]	@ (8003700 <HAL_RCC_OscConfig+0x244>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe fc85 	bl	8001ff4 <HAL_GetTick>
 80036ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fe fc81 	bl	8001ff4 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d903      	bls.n	8003704 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e2af      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
 8003700:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003704:	4b96      	ldr	r3, [pc, #600]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d06a      	beq.n	80037f2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371c:	4b90      	ldr	r3, [pc, #576]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003724:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003726:	4b8e      	ldr	r3, [pc, #568]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d007      	beq.n	8003742 <HAL_RCC_OscConfig+0x286>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b18      	cmp	r3, #24
 8003736:	d11b      	bne.n	8003770 <HAL_RCC_OscConfig+0x2b4>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d116      	bne.n	8003770 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003742:	4b87      	ldr	r3, [pc, #540]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <HAL_RCC_OscConfig+0x29e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	2b80      	cmp	r3, #128	@ 0x80
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e282      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800375a:	4b81      	ldr	r3, [pc, #516]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	061b      	lsls	r3, r3, #24
 8003768:	497d      	ldr	r1, [pc, #500]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800376e:	e040      	b.n	80037f2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d023      	beq.n	80037c0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003778:	4b79      	ldr	r3, [pc, #484]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a78      	ldr	r2, [pc, #480]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 800377e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe fc36 	bl	8001ff4 <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800378c:	f7fe fc32 	bl	8001ff4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e260      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800379e:	4b70      	ldr	r3, [pc, #448]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	061b      	lsls	r3, r3, #24
 80037b8:	4969      	ldr	r1, [pc, #420]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60cb      	str	r3, [r1, #12]
 80037be:	e018      	b.n	80037f2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80037c0:	4b67      	ldr	r3, [pc, #412]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a66      	ldr	r2, [pc, #408]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 80037c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fc12 	bl	8001ff4 <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80037d4:	f7fe fc0e 	bl	8001ff4 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e23c      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037e6:	4b5e      	ldr	r3, [pc, #376]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d036      	beq.n	800386c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d019      	beq.n	800383a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003806:	4b56      	ldr	r3, [pc, #344]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380a:	4a55      	ldr	r2, [pc, #340]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7fe fbef 	bl	8001ff4 <HAL_GetTick>
 8003816:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381a:	f7fe fbeb 	bl	8001ff4 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e219      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800382c:	4b4c      	ldr	r3, [pc, #304]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 800382e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x35e>
 8003838:	e018      	b.n	800386c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383a:	4b49      	ldr	r3, [pc, #292]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 800383c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383e:	4a48      	ldr	r2, [pc, #288]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003846:	f7fe fbd5 	bl	8001ff4 <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384e:	f7fe fbd1 	bl	8001ff4 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e1ff      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003860:	4b3f      	ldr	r3, [pc, #252]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f0      	bne.n	800384e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d036      	beq.n	80038e6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d019      	beq.n	80038b4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003880:	4b37      	ldr	r3, [pc, #220]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a36      	ldr	r2, [pc, #216]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003886:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800388a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800388c:	f7fe fbb2 	bl	8001ff4 <HAL_GetTick>
 8003890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003894:	f7fe fbae 	bl	8001ff4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1dc      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x3d8>
 80038b2:	e018      	b.n	80038e6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a29      	ldr	r2, [pc, #164]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 80038ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80038c0:	f7fe fb98 	bl	8001ff4 <HAL_GetTick>
 80038c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038c8:	f7fe fb94 	bl	8001ff4 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e1c2      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038da:	4b21      	ldr	r3, [pc, #132]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8086 	beq.w	8003a00 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003964 <HAL_RCC_OscConfig+0x4a8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003964 <HAL_RCC_OscConfig+0x4a8>)
 80038fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003900:	f7fe fb78 	bl	8001ff4 <HAL_GetTick>
 8003904:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003908:	f7fe fb74 	bl	8001ff4 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	@ 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e1a2      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800391a:	4b12      	ldr	r3, [pc, #72]	@ (8003964 <HAL_RCC_OscConfig+0x4a8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d106      	bne.n	800393c <HAL_RCC_OscConfig+0x480>
 800392e:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003932:	4a0b      	ldr	r2, [pc, #44]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6713      	str	r3, [r2, #112]	@ 0x70
 800393a:	e032      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e6>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d111      	bne.n	8003968 <HAL_RCC_OscConfig+0x4ac>
 8003944:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003948:	4a05      	ldr	r2, [pc, #20]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	4a02      	ldr	r2, [pc, #8]	@ (8003960 <HAL_RCC_OscConfig+0x4a4>)
 8003956:	f023 0304 	bic.w	r3, r3, #4
 800395a:	6713      	str	r3, [r2, #112]	@ 0x70
 800395c:	e021      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e6>
 800395e:	bf00      	nop
 8003960:	58024400 	.word	0x58024400
 8003964:	58024800 	.word	0x58024800
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b05      	cmp	r3, #5
 800396e:	d10c      	bne.n	800398a <HAL_RCC_OscConfig+0x4ce>
 8003970:	4b83      	ldr	r3, [pc, #524]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003974:	4a82      	ldr	r2, [pc, #520]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003976:	f043 0304 	orr.w	r3, r3, #4
 800397a:	6713      	str	r3, [r2, #112]	@ 0x70
 800397c:	4b80      	ldr	r3, [pc, #512]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003980:	4a7f      	ldr	r2, [pc, #508]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6713      	str	r3, [r2, #112]	@ 0x70
 8003988:	e00b      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e6>
 800398a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	6713      	str	r3, [r2, #112]	@ 0x70
 8003996:	4b7a      	ldr	r3, [pc, #488]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399a:	4a79      	ldr	r2, [pc, #484]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d015      	beq.n	80039d6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039aa:	f7fe fb23 	bl	8001ff4 <HAL_GetTick>
 80039ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039b0:	e00a      	b.n	80039c8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b2:	f7fe fb1f 	bl	8001ff4 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e14b      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039c8:	4b6d      	ldr	r3, [pc, #436]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ee      	beq.n	80039b2 <HAL_RCC_OscConfig+0x4f6>
 80039d4:	e014      	b.n	8003a00 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fe fb0d 	bl	8001ff4 <HAL_GetTick>
 80039da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fe fb09 	bl	8001ff4 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e135      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039f4:	4b62      	ldr	r3, [pc, #392]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ee      	bne.n	80039de <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 812a 	beq.w	8003c5e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a12:	2b18      	cmp	r3, #24
 8003a14:	f000 80ba 	beq.w	8003b8c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	f040 8095 	bne.w	8003b4c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b57      	ldr	r3, [pc, #348]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a56      	ldr	r2, [pc, #344]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003a28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fe fae1 	bl	8001ff4 <HAL_GetTick>
 8003a32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fe fadd 	bl	8001ff4 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e10b      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a48:	4b4d      	ldr	r3, [pc, #308]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a54:	4b4a      	ldr	r3, [pc, #296]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003a56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a58:	4b4a      	ldr	r3, [pc, #296]	@ (8003b84 <HAL_RCC_OscConfig+0x6c8>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	430a      	orrs	r2, r1
 8003a68:	4945      	ldr	r1, [pc, #276]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	3b01      	subs	r3, #1
 8003a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	025b      	lsls	r3, r3, #9
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	041b      	lsls	r3, r3, #16
 8003a8c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	3b01      	subs	r3, #1
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003a9e:	4938      	ldr	r1, [pc, #224]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003aa4:	4b36      	ldr	r3, [pc, #216]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	4a35      	ldr	r2, [pc, #212]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ab0:	4b33      	ldr	r3, [pc, #204]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ab4:	4b34      	ldr	r3, [pc, #208]	@ (8003b88 <HAL_RCC_OscConfig+0x6cc>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003abc:	00d2      	lsls	r2, r2, #3
 8003abe:	4930      	ldr	r1, [pc, #192]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	f023 020c 	bic.w	r2, r3, #12
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	492b      	ldr	r1, [pc, #172]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ada:	f023 0202 	bic.w	r2, r3, #2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	4927      	ldr	r1, [pc, #156]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ae8:	4b25      	ldr	r3, [pc, #148]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aec:	4a24      	ldr	r2, [pc, #144]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af4:	4b22      	ldr	r3, [pc, #136]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	4a21      	ldr	r2, [pc, #132]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b00:	4b1f      	ldr	r3, [pc, #124]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003b06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	4a1b      	ldr	r2, [pc, #108]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b18:	4b19      	ldr	r3, [pc, #100]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a18      	ldr	r2, [pc, #96]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe fa66 	bl	8001ff4 <HAL_GetTick>
 8003b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe fa62 	bl	8001ff4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e090      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b3e:	4b10      	ldr	r3, [pc, #64]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x670>
 8003b4a:	e088      	b.n	8003c5e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0b      	ldr	r2, [pc, #44]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe fa4c 	bl	8001ff4 <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe fa48 	bl	8001ff4 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e076      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b72:	4b03      	ldr	r3, [pc, #12]	@ (8003b80 <HAL_RCC_OscConfig+0x6c4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x6a4>
 8003b7e:	e06e      	b.n	8003c5e <HAL_RCC_OscConfig+0x7a2>
 8003b80:	58024400 	.word	0x58024400
 8003b84:	fffffc0c 	.word	0xfffffc0c
 8003b88:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b8c:	4b36      	ldr	r3, [pc, #216]	@ (8003c68 <HAL_RCC_OscConfig+0x7ac>)
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b92:	4b35      	ldr	r3, [pc, #212]	@ (8003c68 <HAL_RCC_OscConfig+0x7ac>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d031      	beq.n	8003c04 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f003 0203 	and.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d12a      	bne.n	8003c04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d122      	bne.n	8003c04 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d11a      	bne.n	8003c04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	0a5b      	lsrs	r3, r3, #9
 8003bd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d111      	bne.n	8003c04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	0c1b      	lsrs	r3, r3, #16
 8003be4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d108      	bne.n	8003c04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	0e1b      	lsrs	r3, r3, #24
 8003bf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e02b      	b.n	8003c60 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003c08:	4b17      	ldr	r3, [pc, #92]	@ (8003c68 <HAL_RCC_OscConfig+0x7ac>)
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d01f      	beq.n	8003c5e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003c1e:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_RCC_OscConfig+0x7ac>)
 8003c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c22:	4a11      	ldr	r2, [pc, #68]	@ (8003c68 <HAL_RCC_OscConfig+0x7ac>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c2a:	f7fe f9e3 	bl	8001ff4 <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003c30:	bf00      	nop
 8003c32:	f7fe f9df 	bl	8001ff4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d0f9      	beq.n	8003c32 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <HAL_RCC_OscConfig+0x7ac>)
 8003c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_RCC_OscConfig+0x7b0>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c4a:	00d2      	lsls	r2, r2, #3
 8003c4c:	4906      	ldr	r1, [pc, #24]	@ (8003c68 <HAL_RCC_OscConfig+0x7ac>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003c52:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_RCC_OscConfig+0x7ac>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c56:	4a04      	ldr	r2, [pc, #16]	@ (8003c68 <HAL_RCC_OscConfig+0x7ac>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3730      	adds	r7, #48	@ 0x30
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	58024400 	.word	0x58024400
 8003c6c:	ffff0007 	.word	0xffff0007

08003c70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e19c      	b.n	8003fbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b8a      	ldr	r3, [pc, #552]	@ (8003eb0 <HAL_RCC_ClockConfig+0x240>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d910      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b87      	ldr	r3, [pc, #540]	@ (8003eb0 <HAL_RCC_ClockConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 020f 	bic.w	r2, r3, #15
 8003c9a:	4985      	ldr	r1, [pc, #532]	@ (8003eb0 <HAL_RCC_ClockConfig+0x240>)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b83      	ldr	r3, [pc, #524]	@ (8003eb0 <HAL_RCC_ClockConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e184      	b.n	8003fbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	4b7b      	ldr	r3, [pc, #492]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d908      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cd0:	4b78      	ldr	r3, [pc, #480]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	4975      	ldr	r1, [pc, #468]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d010      	beq.n	8003d10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	4b70      	ldr	r3, [pc, #448]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d908      	bls.n	8003d10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	496a      	ldr	r1, [pc, #424]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d010      	beq.n	8003d3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	4b64      	ldr	r3, [pc, #400]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d908      	bls.n	8003d3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d2c:	4b61      	ldr	r3, [pc, #388]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	495e      	ldr	r1, [pc, #376]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d010      	beq.n	8003d6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	4b59      	ldr	r3, [pc, #356]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d908      	bls.n	8003d6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d5a:	4b56      	ldr	r3, [pc, #344]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4953      	ldr	r1, [pc, #332]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d010      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d908      	bls.n	8003d9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	f023 020f 	bic.w	r2, r3, #15
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4947      	ldr	r1, [pc, #284]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d055      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003da6:	4b43      	ldr	r3, [pc, #268]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	4940      	ldr	r1, [pc, #256]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d121      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0f6      	b.n	8003fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dd8:	4b36      	ldr	r3, [pc, #216]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d115      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0ea      	b.n	8003fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003df0:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0de      	b.n	8003fbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e00:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0d6      	b.n	8003fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e10:	4b28      	ldr	r3, [pc, #160]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f023 0207 	bic.w	r2, r3, #7
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4925      	ldr	r1, [pc, #148]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e22:	f7fe f8e7 	bl	8001ff4 <HAL_GetTick>
 8003e26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2a:	f7fe f8e3 	bl	8001ff4 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e0be      	b.n	8003fbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e40:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d1eb      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d010      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	4b14      	ldr	r3, [pc, #80]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d208      	bcs.n	8003e80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6e:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f023 020f 	bic.w	r2, r3, #15
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	490e      	ldr	r1, [pc, #56]	@ (8003eb4 <HAL_RCC_ClockConfig+0x244>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <HAL_RCC_ClockConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d214      	bcs.n	8003eb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <HAL_RCC_ClockConfig+0x240>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 020f 	bic.w	r2, r3, #15
 8003e96:	4906      	ldr	r1, [pc, #24]	@ (8003eb0 <HAL_RCC_ClockConfig+0x240>)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <HAL_RCC_ClockConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e086      	b.n	8003fbe <HAL_RCC_ClockConfig+0x34e>
 8003eb0:	52002000 	.word	0x52002000
 8003eb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d010      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d208      	bcs.n	8003ee6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	4939      	ldr	r1, [pc, #228]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d010      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	4b34      	ldr	r3, [pc, #208]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d208      	bcs.n	8003f14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f02:	4b31      	ldr	r3, [pc, #196]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	492e      	ldr	r1, [pc, #184]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	4b28      	ldr	r3, [pc, #160]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d208      	bcs.n	8003f42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f30:	4b25      	ldr	r3, [pc, #148]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	4922      	ldr	r1, [pc, #136]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d010      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d208      	bcs.n	8003f70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	4917      	ldr	r1, [pc, #92]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f70:	f000 f834 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b14      	ldr	r3, [pc, #80]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	4912      	ldr	r1, [pc, #72]	@ (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	f003 031f 	and.w	r3, r3, #31
 8003f88:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc8 <HAL_RCC_ClockConfig+0x358>)
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	4a0d      	ldr	r2, [pc, #52]	@ (8003fcc <HAL_RCC_ClockConfig+0x35c>)
 8003f98:	5cd3      	ldrb	r3, [r2, r3]
 8003f9a:	f003 031f 	and.w	r3, r3, #31
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd0 <HAL_RCC_ClockConfig+0x360>)
 8003fa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd4 <HAL_RCC_ClockConfig+0x364>)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003fae:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd8 <HAL_RCC_ClockConfig+0x368>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd ffd4 	bl	8001f60 <HAL_InitTick>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	58024400 	.word	0x58024400
 8003fcc:	0800f7b4 	.word	0x0800f7b4
 8003fd0:	24000004 	.word	0x24000004
 8003fd4:	24000000 	.word	0x24000000
 8003fd8:	24000008 	.word	0x24000008

08003fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b089      	sub	sp, #36	@ 0x24
 8003fe0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe2:	4bb3      	ldr	r3, [pc, #716]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fea:	2b18      	cmp	r3, #24
 8003fec:	f200 8155 	bhi.w	800429a <HAL_RCC_GetSysClockFreq+0x2be>
 8003ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800405d 	.word	0x0800405d
 8003ffc:	0800429b 	.word	0x0800429b
 8004000:	0800429b 	.word	0x0800429b
 8004004:	0800429b 	.word	0x0800429b
 8004008:	0800429b 	.word	0x0800429b
 800400c:	0800429b 	.word	0x0800429b
 8004010:	0800429b 	.word	0x0800429b
 8004014:	0800429b 	.word	0x0800429b
 8004018:	08004083 	.word	0x08004083
 800401c:	0800429b 	.word	0x0800429b
 8004020:	0800429b 	.word	0x0800429b
 8004024:	0800429b 	.word	0x0800429b
 8004028:	0800429b 	.word	0x0800429b
 800402c:	0800429b 	.word	0x0800429b
 8004030:	0800429b 	.word	0x0800429b
 8004034:	0800429b 	.word	0x0800429b
 8004038:	08004089 	.word	0x08004089
 800403c:	0800429b 	.word	0x0800429b
 8004040:	0800429b 	.word	0x0800429b
 8004044:	0800429b 	.word	0x0800429b
 8004048:	0800429b 	.word	0x0800429b
 800404c:	0800429b 	.word	0x0800429b
 8004050:	0800429b 	.word	0x0800429b
 8004054:	0800429b 	.word	0x0800429b
 8004058:	0800408f 	.word	0x0800408f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800405c:	4b94      	ldr	r3, [pc, #592]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004068:	4b91      	ldr	r3, [pc, #580]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	08db      	lsrs	r3, r3, #3
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	4a90      	ldr	r2, [pc, #576]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800407a:	e111      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800407c:	4b8d      	ldr	r3, [pc, #564]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800407e:	61bb      	str	r3, [r7, #24]
      break;
 8004080:	e10e      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004082:	4b8d      	ldr	r3, [pc, #564]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004084:	61bb      	str	r3, [r7, #24]
      break;
 8004086:	e10b      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004088:	4b8c      	ldr	r3, [pc, #560]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800408a:	61bb      	str	r3, [r7, #24]
      break;
 800408c:	e108      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800408e:	4b88      	ldr	r3, [pc, #544]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004098:	4b85      	ldr	r3, [pc, #532]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040a4:	4b82      	ldr	r3, [pc, #520]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80040ae:	4b80      	ldr	r3, [pc, #512]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b2:	08db      	lsrs	r3, r3, #3
 80040b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80e1 	beq.w	8004294 <HAL_RCC_GetSysClockFreq+0x2b8>
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	f000 8083 	beq.w	80041e0 <HAL_RCC_GetSysClockFreq+0x204>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	f200 80a1 	bhi.w	8004224 <HAL_RCC_GetSysClockFreq+0x248>
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_RCC_GetSysClockFreq+0x114>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d056      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x1c0>
 80040ee:	e099      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040f0:	4b6f      	ldr	r3, [pc, #444]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d02d      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040fc:	4b6c      	ldr	r3, [pc, #432]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	08db      	lsrs	r3, r3, #3
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	4a6b      	ldr	r2, [pc, #428]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
 800410c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	ee07 3a90 	vmov	s15, r3
 8004114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004126:	4b62      	ldr	r3, [pc, #392]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004136:	ed97 6a02 	vldr	s12, [r7, #8]
 800413a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80042c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800413e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800414a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004152:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004156:	e087      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004162:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80042c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800416a:	4b51      	ldr	r3, [pc, #324]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800417a:	ed97 6a02 	vldr	s12, [r7, #8]
 800417e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80042c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800418a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800418e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800419a:	e065      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80042c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ae:	4b40      	ldr	r3, [pc, #256]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041be:	ed97 6a02 	vldr	s12, [r7, #8]
 80041c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80042c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041de:	e043      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80042cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80041ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f2:	4b2f      	ldr	r3, [pc, #188]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004202:	ed97 6a02 	vldr	s12, [r7, #8]
 8004206:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80042c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800420a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800421a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004222:	e021      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80042c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004236:	4b1e      	ldr	r3, [pc, #120]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423e:	ee07 3a90 	vmov	s15, r3
 8004242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004246:	ed97 6a02 	vldr	s12, [r7, #8]
 800424a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80042c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800424e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800425a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004266:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004268:	4b11      	ldr	r3, [pc, #68]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	0a5b      	lsrs	r3, r3, #9
 800426e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004272:	3301      	adds	r3, #1
 8004274:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004280:	edd7 6a07 	vldr	s13, [r7, #28]
 8004284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800428c:	ee17 3a90 	vmov	r3, s15
 8004290:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004292:	e005      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]
      break;
 8004298:	e002      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800429a:	4b07      	ldr	r3, [pc, #28]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800429c:	61bb      	str	r3, [r7, #24]
      break;
 800429e:	bf00      	nop
  }

  return sysclockfreq;
 80042a0:	69bb      	ldr	r3, [r7, #24]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	@ 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	58024400 	.word	0x58024400
 80042b4:	03d09000 	.word	0x03d09000
 80042b8:	003d0900 	.word	0x003d0900
 80042bc:	02dc6c00 	.word	0x02dc6c00
 80042c0:	46000000 	.word	0x46000000
 80042c4:	4c742400 	.word	0x4c742400
 80042c8:	4a742400 	.word	0x4a742400
 80042cc:	4c371b00 	.word	0x4c371b00

080042d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80042d6:	f7ff fe81 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 80042da:	4602      	mov	r2, r0
 80042dc:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <HAL_RCC_GetHCLKFreq+0x50>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	490f      	ldr	r1, [pc, #60]	@ (8004324 <HAL_RCC_GetHCLKFreq+0x54>)
 80042e8:	5ccb      	ldrb	r3, [r1, r3]
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	fa22 f303 	lsr.w	r3, r2, r3
 80042f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004320 <HAL_RCC_GetHCLKFreq+0x50>)
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	4a09      	ldr	r2, [pc, #36]	@ (8004324 <HAL_RCC_GetHCLKFreq+0x54>)
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	4a07      	ldr	r2, [pc, #28]	@ (8004328 <HAL_RCC_GetHCLKFreq+0x58>)
 800430c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800430e:	4a07      	ldr	r2, [pc, #28]	@ (800432c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004314:	4b04      	ldr	r3, [pc, #16]	@ (8004328 <HAL_RCC_GetHCLKFreq+0x58>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	58024400 	.word	0x58024400
 8004324:	0800f7b4 	.word	0x0800f7b4
 8004328:	24000004 	.word	0x24000004
 800432c:	24000000 	.word	0x24000000

08004330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004334:	f7ff ffcc 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4904      	ldr	r1, [pc, #16]	@ (8004358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	58024400 	.word	0x58024400
 8004358:	0800f7b4 	.word	0x0800f7b4

0800435c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004360:	f7ff ffb6 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4904      	ldr	r1, [pc, #16]	@ (8004384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800437c:	4618      	mov	r0, r3
 800437e:	bd80      	pop	{r7, pc}
 8004380:	58024400 	.word	0x58024400
 8004384:	0800f7b4 	.word	0x0800f7b4

08004388 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800438c:	b0c6      	sub	sp, #280	@ 0x118
 800438e:	af00      	add	r7, sp, #0
 8004390:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800439a:	2300      	movs	r3, #0
 800439c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80043ac:	2500      	movs	r5, #0
 80043ae:	ea54 0305 	orrs.w	r3, r4, r5
 80043b2:	d049      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80043b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043be:	d02f      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80043c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043c4:	d828      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80043c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ca:	d01a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80043cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043d0:	d822      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043da:	d007      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043dc:	e01c      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043de:	4bab      	ldr	r3, [pc, #684]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e2:	4aaa      	ldr	r2, [pc, #680]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043ea:	e01a      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f0:	3308      	adds	r3, #8
 80043f2:	2102      	movs	r1, #2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f002 fa49 	bl	800688c <RCCEx_PLL2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004400:	e00f      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004406:	3328      	adds	r3, #40	@ 0x28
 8004408:	2102      	movs	r1, #2
 800440a:	4618      	mov	r0, r3
 800440c:	f002 faf0 	bl	80069f0 <RCCEx_PLL3_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004416:	e004      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800441e:	e000      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800442a:	4b98      	ldr	r3, [pc, #608]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800442c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800442e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004438:	4a94      	ldr	r2, [pc, #592]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800443a:	430b      	orrs	r3, r1
 800443c:	6513      	str	r3, [r2, #80]	@ 0x50
 800443e:	e003      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004444:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004454:	f04f 0900 	mov.w	r9, #0
 8004458:	ea58 0309 	orrs.w	r3, r8, r9
 800445c:	d047      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800445e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004464:	2b04      	cmp	r3, #4
 8004466:	d82a      	bhi.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004468:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004485 	.word	0x08004485
 8004474:	08004493 	.word	0x08004493
 8004478:	080044a9 	.word	0x080044a9
 800447c:	080044c7 	.word	0x080044c7
 8004480:	080044c7 	.word	0x080044c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004484:	4b81      	ldr	r3, [pc, #516]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	4a80      	ldr	r2, [pc, #512]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800448a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800448e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004490:	e01a      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004496:	3308      	adds	r3, #8
 8004498:	2100      	movs	r1, #0
 800449a:	4618      	mov	r0, r3
 800449c:	f002 f9f6 	bl	800688c <RCCEx_PLL2_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044a6:	e00f      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ac:	3328      	adds	r3, #40	@ 0x28
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f002 fa9d 	bl	80069f0 <RCCEx_PLL3_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044bc:	e004      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044c4:	e000      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80044c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d0:	4b6e      	ldr	r3, [pc, #440]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d4:	f023 0107 	bic.w	r1, r3, #7
 80044d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044de:	4a6b      	ldr	r2, [pc, #428]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80044e4:	e003      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80044fa:	f04f 0b00 	mov.w	fp, #0
 80044fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8004502:	d05b      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800450c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004510:	d03b      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004512:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004516:	d834      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004518:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800451c:	d037      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800451e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004522:	d82e      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004524:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004528:	d033      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800452a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800452e:	d828      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004534:	d01a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800453a:	d822      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004544:	d007      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004546:	e01c      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004548:	4b50      	ldr	r3, [pc, #320]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	4a4f      	ldr	r2, [pc, #316]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800454e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004554:	e01e      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455a:	3308      	adds	r3, #8
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f002 f994 	bl	800688c <RCCEx_PLL2_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800456a:	e013      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800456c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004570:	3328      	adds	r3, #40	@ 0x28
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f002 fa3b 	bl	80069f0 <RCCEx_PLL3_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004580:	e008      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004588:	e004      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004594:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10b      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800459c:	4b3b      	ldr	r3, [pc, #236]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80045a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045ac:	4a37      	ldr	r2, [pc, #220]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045ae:	430b      	orrs	r3, r1
 80045b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80045b2:	e003      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80045bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80045c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80045cc:	2300      	movs	r3, #0
 80045ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80045d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80045d6:	460b      	mov	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	d05d      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80045dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80045e4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80045e8:	d03b      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80045ea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80045ee:	d834      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045f4:	d037      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80045f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045fa:	d82e      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004600:	d033      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004602:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004606:	d828      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004608:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800460c:	d01a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800460e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004612:	d822      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800461c:	d007      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800461e:	e01c      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004620:	4b1a      	ldr	r3, [pc, #104]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	4a19      	ldr	r2, [pc, #100]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800462a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800462c:	e01e      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800462e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004632:	3308      	adds	r3, #8
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f002 f928 	bl	800688c <RCCEx_PLL2_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004642:	e013      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004648:	3328      	adds	r3, #40	@ 0x28
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f002 f9cf 	bl	80069f0 <RCCEx_PLL3_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004658:	e008      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004660:	e004      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004662:	bf00      	nop
 8004664:	e002      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800466a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10d      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004678:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004680:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004684:	4a01      	ldr	r2, [pc, #4]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004686:	430b      	orrs	r3, r1
 8004688:	6593      	str	r3, [r2, #88]	@ 0x58
 800468a:	e005      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800468c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004690:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004694:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80046a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80046a8:	2300      	movs	r3, #0
 80046aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80046ae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4313      	orrs	r3, r2
 80046b6:	d03a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80046b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046be:	2b30      	cmp	r3, #48	@ 0x30
 80046c0:	d01f      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80046c2:	2b30      	cmp	r3, #48	@ 0x30
 80046c4:	d819      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x372>
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d00c      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d815      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x372>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d019      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d111      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d6:	4baa      	ldr	r3, [pc, #680]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046da:	4aa9      	ldr	r2, [pc, #676]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80046e2:	e011      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e8:	3308      	adds	r3, #8
 80046ea:	2102      	movs	r1, #2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f002 f8cd 	bl	800688c <RCCEx_PLL2_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80046f8:	e006      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004700:	e002      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004702:	bf00      	nop
 8004704:	e000      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004710:	4b9b      	ldr	r3, [pc, #620]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004714:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471e:	4a98      	ldr	r2, [pc, #608]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004720:	430b      	orrs	r3, r1
 8004722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004724:	e003      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800472a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800472e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800473a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800473e:	2300      	movs	r3, #0
 8004740:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004744:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d051      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800474e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004758:	d035      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800475a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800475e:	d82e      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004760:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004764:	d031      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004766:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800476a:	d828      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x436>
 800476c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004770:	d01a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004776:	d822      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004780:	d007      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004782:	e01c      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004784:	4b7e      	ldr	r3, [pc, #504]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	4a7d      	ldr	r2, [pc, #500]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800478a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800478e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004790:	e01c      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004796:	3308      	adds	r3, #8
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f002 f876 	bl	800688c <RCCEx_PLL2_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047a6:	e011      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ac:	3328      	adds	r3, #40	@ 0x28
 80047ae:	2100      	movs	r1, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f002 f91d 	bl	80069f0 <RCCEx_PLL3_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047bc:	e006      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047c4:	e002      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80047ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80047dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e2:	4a67      	ldr	r2, [pc, #412]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80047e8:	e003      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80047fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004802:	2300      	movs	r3, #0
 8004804:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004808:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d053      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800481c:	d033      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800481e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004822:	d82c      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004824:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004828:	d02f      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800482a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800482e:	d826      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004830:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004834:	d02b      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004836:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800483a:	d820      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800483c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004840:	d012      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004846:	d81a      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d022      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004850:	d115      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004856:	3308      	adds	r3, #8
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f002 f816 	bl	800688c <RCCEx_PLL2_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004866:	e015      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486c:	3328      	adds	r3, #40	@ 0x28
 800486e:	2101      	movs	r1, #1
 8004870:	4618      	mov	r0, r3
 8004872:	f002 f8bd 	bl	80069f0 <RCCEx_PLL3_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800487c:	e00a      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004884:	e006      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004886:	bf00      	nop
 8004888:	e004      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800488a:	bf00      	nop
 800488c:	e002      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800489c:	4b38      	ldr	r3, [pc, #224]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800489e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80048a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048aa:	4a35      	ldr	r2, [pc, #212]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80048b0:	e003      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80048ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80048c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048ca:	2300      	movs	r3, #0
 80048cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80048d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048d4:	460b      	mov	r3, r1
 80048d6:	4313      	orrs	r3, r2
 80048d8:	d058      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80048da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048e6:	d033      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80048e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048ec:	d82c      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f2:	d02f      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f8:	d826      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048fe:	d02b      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004900:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004904:	d820      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800490a:	d012      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800490c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004910:	d81a      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d022      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800491a:	d115      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800491c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004920:	3308      	adds	r3, #8
 8004922:	2101      	movs	r1, #1
 8004924:	4618      	mov	r0, r3
 8004926:	f001 ffb1 	bl	800688c <RCCEx_PLL2_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004930:	e015      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004936:	3328      	adds	r3, #40	@ 0x28
 8004938:	2101      	movs	r1, #1
 800493a:	4618      	mov	r0, r3
 800493c:	f002 f858 	bl	80069f0 <RCCEx_PLL3_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004946:	e00a      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800494e:	e006      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004950:	bf00      	nop
 8004952:	e004      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004954:	bf00      	nop
 8004956:	e002      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004958:	bf00      	nop
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800495c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10e      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004966:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800496e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004972:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004976:	4a02      	ldr	r2, [pc, #8]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004978:	430b      	orrs	r3, r1
 800497a:	6593      	str	r3, [r2, #88]	@ 0x58
 800497c:	e006      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004988:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800498c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80049a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4313      	orrs	r3, r2
 80049aa:	d037      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80049ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049b6:	d00e      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80049b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049bc:	d816      	bhi.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d018      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80049c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049c6:	d111      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c8:	4bc4      	ldr	r3, [pc, #784]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	4ac3      	ldr	r2, [pc, #780]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80049d4:	e00f      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049da:	3308      	adds	r3, #8
 80049dc:	2101      	movs	r1, #1
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 ff54 	bl	800688c <RCCEx_PLL2_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80049ea:	e004      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80049f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049fe:	4bb7      	ldr	r3, [pc, #732]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a0c:	4ab3      	ldr	r2, [pc, #716]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a12:	e003      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004a28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004a36:	460b      	mov	r3, r1
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	d039      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d81c      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004a46:	a201      	add	r2, pc, #4	@ (adr r2, 8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004a89 	.word	0x08004a89
 8004a50:	08004a5d 	.word	0x08004a5d
 8004a54:	08004a6b 	.word	0x08004a6b
 8004a58:	08004a89 	.word	0x08004a89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5c:	4b9f      	ldr	r3, [pc, #636]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a60:	4a9e      	ldr	r2, [pc, #632]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a68:	e00f      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a6e:	3308      	adds	r3, #8
 8004a70:	2102      	movs	r1, #2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 ff0a 	bl	800688c <RCCEx_PLL2_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a7e:	e004      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a86:	e000      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a92:	4b92      	ldr	r3, [pc, #584]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a96:	f023 0103 	bic.w	r1, r3, #3
 8004a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa0:	4a8e      	ldr	r2, [pc, #568]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004aa6:	e003      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004abc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ac6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f000 8099 	beq.w	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ad2:	4b83      	ldr	r3, [pc, #524]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a82      	ldr	r2, [pc, #520]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004adc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ade:	f7fd fa89 	bl	8001ff4 <HAL_GetTick>
 8004ae2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae8:	f7fd fa84 	bl	8001ff4 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b64      	cmp	r3, #100	@ 0x64
 8004af6:	d903      	bls.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004afe:	e005      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b00:	4b77      	ldr	r3, [pc, #476]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0ed      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004b0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d173      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b14:	4b71      	ldr	r3, [pc, #452]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b20:	4053      	eors	r3, r2
 8004b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d015      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b2a:	4b6c      	ldr	r3, [pc, #432]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b32:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b36:	4b69      	ldr	r3, [pc, #420]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3a:	4a68      	ldr	r2, [pc, #416]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b40:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b42:	4b66      	ldr	r3, [pc, #408]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b46:	4a65      	ldr	r2, [pc, #404]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b4c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b4e:	4a63      	ldr	r2, [pc, #396]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b54:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b62:	d118      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fd fa46 	bl	8001ff4 <HAL_GetTick>
 8004b68:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b6c:	e00d      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6e:	f7fd fa41 	bl	8001ff4 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004b78:	1ad2      	subs	r2, r2, r3
 8004b7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d903      	bls.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004b88:	e005      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b8a:	4b54      	ldr	r3, [pc, #336]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0eb      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004b96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d129      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bae:	d10e      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bc0:	091a      	lsrs	r2, r3, #4
 8004bc2:	4b48      	ldr	r3, [pc, #288]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	4a45      	ldr	r2, [pc, #276]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6113      	str	r3, [r2, #16]
 8004bcc:	e005      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004bce:	4b43      	ldr	r3, [pc, #268]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	4a42      	ldr	r2, [pc, #264]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bd8:	6113      	str	r3, [r2, #16]
 8004bda:	4b40      	ldr	r3, [pc, #256]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bdc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bea:	4a3c      	ldr	r2, [pc, #240]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf0:	e008      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004bfa:	e003      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f002 0301 	and.w	r3, r2, #1
 8004c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f000 808f 	beq.w	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c2c:	2b28      	cmp	r3, #40	@ 0x28
 8004c2e:	d871      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004c30:	a201      	add	r2, pc, #4	@ (adr r2, 8004c38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004d1d 	.word	0x08004d1d
 8004c3c:	08004d15 	.word	0x08004d15
 8004c40:	08004d15 	.word	0x08004d15
 8004c44:	08004d15 	.word	0x08004d15
 8004c48:	08004d15 	.word	0x08004d15
 8004c4c:	08004d15 	.word	0x08004d15
 8004c50:	08004d15 	.word	0x08004d15
 8004c54:	08004d15 	.word	0x08004d15
 8004c58:	08004ce9 	.word	0x08004ce9
 8004c5c:	08004d15 	.word	0x08004d15
 8004c60:	08004d15 	.word	0x08004d15
 8004c64:	08004d15 	.word	0x08004d15
 8004c68:	08004d15 	.word	0x08004d15
 8004c6c:	08004d15 	.word	0x08004d15
 8004c70:	08004d15 	.word	0x08004d15
 8004c74:	08004d15 	.word	0x08004d15
 8004c78:	08004cff 	.word	0x08004cff
 8004c7c:	08004d15 	.word	0x08004d15
 8004c80:	08004d15 	.word	0x08004d15
 8004c84:	08004d15 	.word	0x08004d15
 8004c88:	08004d15 	.word	0x08004d15
 8004c8c:	08004d15 	.word	0x08004d15
 8004c90:	08004d15 	.word	0x08004d15
 8004c94:	08004d15 	.word	0x08004d15
 8004c98:	08004d1d 	.word	0x08004d1d
 8004c9c:	08004d15 	.word	0x08004d15
 8004ca0:	08004d15 	.word	0x08004d15
 8004ca4:	08004d15 	.word	0x08004d15
 8004ca8:	08004d15 	.word	0x08004d15
 8004cac:	08004d15 	.word	0x08004d15
 8004cb0:	08004d15 	.word	0x08004d15
 8004cb4:	08004d15 	.word	0x08004d15
 8004cb8:	08004d1d 	.word	0x08004d1d
 8004cbc:	08004d15 	.word	0x08004d15
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004d15 	.word	0x08004d15
 8004cc8:	08004d15 	.word	0x08004d15
 8004ccc:	08004d15 	.word	0x08004d15
 8004cd0:	08004d15 	.word	0x08004d15
 8004cd4:	08004d15 	.word	0x08004d15
 8004cd8:	08004d1d 	.word	0x08004d1d
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	58024800 	.word	0x58024800
 8004ce4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cec:	3308      	adds	r3, #8
 8004cee:	2101      	movs	r1, #1
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 fdcb 	bl	800688c <RCCEx_PLL2_Config>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cfc:	e00f      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d02:	3328      	adds	r3, #40	@ 0x28
 8004d04:	2101      	movs	r1, #1
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 fe72 	bl	80069f0 <RCCEx_PLL3_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d1a:	e000      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d26:	4bbf      	ldr	r3, [pc, #764]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d34:	4abb      	ldr	r2, [pc, #748]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d36:	430b      	orrs	r3, r1
 8004d38:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d3a:	e003      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f002 0302 	and.w	r3, r2, #2
 8004d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d54:	2300      	movs	r3, #0
 8004d56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	d041      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6a:	2b05      	cmp	r3, #5
 8004d6c:	d824      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004dc1 	.word	0x08004dc1
 8004d78:	08004d8d 	.word	0x08004d8d
 8004d7c:	08004da3 	.word	0x08004da3
 8004d80:	08004dc1 	.word	0x08004dc1
 8004d84:	08004dc1 	.word	0x08004dc1
 8004d88:	08004dc1 	.word	0x08004dc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d90:	3308      	adds	r3, #8
 8004d92:	2101      	movs	r1, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fd79 	bl	800688c <RCCEx_PLL2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004da0:	e00f      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da6:	3328      	adds	r3, #40	@ 0x28
 8004da8:	2101      	movs	r1, #1
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 fe20 	bl	80069f0 <RCCEx_PLL3_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004db6:	e004      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004dca:	4b96      	ldr	r3, [pc, #600]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dce:	f023 0107 	bic.w	r1, r3, #7
 8004dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd8:	4a92      	ldr	r2, [pc, #584]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	6553      	str	r3, [r2, #84]	@ 0x54
 8004dde:	e003      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004de4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f002 0304 	and.w	r3, r2, #4
 8004df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dfe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e02:	460b      	mov	r3, r1
 8004e04:	4313      	orrs	r3, r2
 8004e06:	d044      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e10:	2b05      	cmp	r3, #5
 8004e12:	d825      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004e14:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e69 	.word	0x08004e69
 8004e20:	08004e35 	.word	0x08004e35
 8004e24:	08004e4b 	.word	0x08004e4b
 8004e28:	08004e69 	.word	0x08004e69
 8004e2c:	08004e69 	.word	0x08004e69
 8004e30:	08004e69 	.word	0x08004e69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e38:	3308      	adds	r3, #8
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 fd25 	bl	800688c <RCCEx_PLL2_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e48:	e00f      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4e:	3328      	adds	r3, #40	@ 0x28
 8004e50:	2101      	movs	r1, #1
 8004e52:	4618      	mov	r0, r3
 8004e54:	f001 fdcc 	bl	80069f0 <RCCEx_PLL3_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e5e:	e004      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e66:	e000      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e72:	4b6c      	ldr	r3, [pc, #432]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e76:	f023 0107 	bic.w	r1, r3, #7
 8004e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e82:	4a68      	ldr	r2, [pc, #416]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e88:	e003      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9a:	f002 0320 	and.w	r3, r2, #32
 8004e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ea8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	d055      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ebe:	d033      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ec4:	d82c      	bhi.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eca:	d02f      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed0:	d826      	bhi.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004ed2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ed6:	d02b      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004ed8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004edc:	d820      	bhi.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ee2:	d012      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ee8:	d81a      	bhi.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d022      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ef2:	d115      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef8:	3308      	adds	r3, #8
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 fcc5 	bl	800688c <RCCEx_PLL2_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f08:	e015      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0e:	3328      	adds	r3, #40	@ 0x28
 8004f10:	2102      	movs	r1, #2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 fd6c 	bl	80069f0 <RCCEx_PLL3_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f26:	e006      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f28:	bf00      	nop
 8004f2a:	e004      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f2c:	bf00      	nop
 8004f2e:	e002      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f30:	bf00      	nop
 8004f32:	e000      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10b      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f3e:	4b39      	ldr	r3, [pc, #228]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f4e:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f54:	e003      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f74:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	d058      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f8a:	d033      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004f8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f90:	d82c      	bhi.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f96:	d02f      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9c:	d826      	bhi.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fa2:	d02b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004fa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fa8:	d820      	bhi.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fae:	d012      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fb4:	d81a      	bhi.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d022      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fbe:	d115      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fc5f 	bl	800688c <RCCEx_PLL2_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004fd4:	e015      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fda:	3328      	adds	r3, #40	@ 0x28
 8004fdc:	2102      	movs	r1, #2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f001 fd06 	bl	80069f0 <RCCEx_PLL3_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004fea:	e00a      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ff2:	e006      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ff4:	bf00      	nop
 8004ff6:	e004      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ff8:	bf00      	nop
 8004ffa:	e002      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ffc:	bf00      	nop
 8004ffe:	e000      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005002:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10e      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800500a:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800501a:	4a02      	ldr	r2, [pc, #8]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800501c:	430b      	orrs	r3, r1
 800501e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005020:	e006      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005022:	bf00      	nop
 8005024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800502c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800503c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005046:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d055      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005054:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005058:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800505c:	d033      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800505e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005062:	d82c      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005068:	d02f      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800506a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800506e:	d826      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005070:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005074:	d02b      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005076:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800507a:	d820      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800507c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005080:	d012      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005086:	d81a      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d022      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800508c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005090:	d115      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005096:	3308      	adds	r3, #8
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f001 fbf6 	bl	800688c <RCCEx_PLL2_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80050a6:	e015      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ac:	3328      	adds	r3, #40	@ 0x28
 80050ae:	2102      	movs	r1, #2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fc9d 	bl	80069f0 <RCCEx_PLL3_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80050bc:	e00a      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80050c6:	bf00      	nop
 80050c8:	e004      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80050ca:	bf00      	nop
 80050cc:	e002      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80050ce:	bf00      	nop
 80050d0:	e000      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80050d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050dc:	4ba0      	ldr	r3, [pc, #640]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80050e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050ec:	4a9c      	ldr	r2, [pc, #624]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050ee:	430b      	orrs	r3, r1
 80050f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80050f2:	e003      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80050fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f002 0308 	and.w	r3, r2, #8
 8005108:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800510c:	2300      	movs	r3, #0
 800510e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005112:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005116:	460b      	mov	r3, r1
 8005118:	4313      	orrs	r3, r2
 800511a:	d01e      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800511c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005128:	d10c      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800512e:	3328      	adds	r3, #40	@ 0x28
 8005130:	2102      	movs	r1, #2
 8005132:	4618      	mov	r0, r3
 8005134:	f001 fc5c 	bl	80069f0 <RCCEx_PLL3_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005144:	4b86      	ldr	r3, [pc, #536]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005148:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800514c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005154:	4a82      	ldr	r2, [pc, #520]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005156:	430b      	orrs	r3, r1
 8005158:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800515a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f002 0310 	and.w	r3, r2, #16
 8005166:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800516a:	2300      	movs	r3, #0
 800516c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005170:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005174:	460b      	mov	r3, r1
 8005176:	4313      	orrs	r3, r2
 8005178:	d01e      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800517a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800517e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005186:	d10c      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518c:	3328      	adds	r3, #40	@ 0x28
 800518e:	2102      	movs	r1, #2
 8005190:	4618      	mov	r0, r3
 8005192:	f001 fc2d 	bl	80069f0 <RCCEx_PLL3_Config>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b2:	4a6b      	ldr	r2, [pc, #428]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80051c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051c6:	2300      	movs	r3, #0
 80051c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80051ce:	460b      	mov	r3, r1
 80051d0:	4313      	orrs	r3, r2
 80051d2:	d03e      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80051d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051e0:	d022      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80051e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051e6:	d81b      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80051ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051f0:	d00b      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80051f2:	e015      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f8:	3308      	adds	r3, #8
 80051fa:	2100      	movs	r1, #0
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fb45 	bl	800688c <RCCEx_PLL2_Config>
 8005202:	4603      	mov	r3, r0
 8005204:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005208:	e00f      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800520a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800520e:	3328      	adds	r3, #40	@ 0x28
 8005210:	2102      	movs	r1, #2
 8005212:	4618      	mov	r0, r3
 8005214:	f001 fbec 	bl	80069f0 <RCCEx_PLL3_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800521e:	e004      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005226:	e000      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800522a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10b      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005232:	4b4b      	ldr	r3, [pc, #300]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005236:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800523a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800523e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005242:	4a47      	ldr	r2, [pc, #284]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005244:	430b      	orrs	r3, r1
 8005246:	6593      	str	r3, [r2, #88]	@ 0x58
 8005248:	e003      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800524e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800525e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005260:	2300      	movs	r3, #0
 8005262:	677b      	str	r3, [r7, #116]	@ 0x74
 8005264:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005268:	460b      	mov	r3, r1
 800526a:	4313      	orrs	r3, r2
 800526c:	d03b      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800526e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005276:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800527a:	d01f      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800527c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005280:	d818      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005286:	d003      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005288:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800528c:	d007      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800528e:	e011      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005290:	4b33      	ldr	r3, [pc, #204]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005294:	4a32      	ldr	r2, [pc, #200]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800529a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800529c:	e00f      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800529e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a2:	3328      	adds	r3, #40	@ 0x28
 80052a4:	2101      	movs	r1, #1
 80052a6:	4618      	mov	r0, r3
 80052a8:	f001 fba2 	bl	80069f0 <RCCEx_PLL3_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80052b2:	e004      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052ba:	e000      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80052bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052c6:	4b26      	ldr	r3, [pc, #152]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052d6:	4a22      	ldr	r2, [pc, #136]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052d8:	430b      	orrs	r3, r1
 80052da:	6553      	str	r3, [r2, #84]	@ 0x54
 80052dc:	e003      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80052f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052f4:	2300      	movs	r3, #0
 80052f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80052fc:	460b      	mov	r3, r1
 80052fe:	4313      	orrs	r3, r2
 8005300:	d034      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800530c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005310:	d007      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005312:	e011      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005314:	4b12      	ldr	r3, [pc, #72]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	4a11      	ldr	r2, [pc, #68]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800531a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800531e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005320:	e00e      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005326:	3308      	adds	r3, #8
 8005328:	2102      	movs	r1, #2
 800532a:	4618      	mov	r0, r3
 800532c:	f001 faae 	bl	800688c <RCCEx_PLL2_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005336:	e003      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800533e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10d      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005348:	4b05      	ldr	r3, [pc, #20]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800534a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800534c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005356:	4a02      	ldr	r2, [pc, #8]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005358:	430b      	orrs	r3, r1
 800535a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800535c:	e006      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800535e:	bf00      	nop
 8005360:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005368:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800536c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005378:	663b      	str	r3, [r7, #96]	@ 0x60
 800537a:	2300      	movs	r3, #0
 800537c:	667b      	str	r3, [r7, #100]	@ 0x64
 800537e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005382:	460b      	mov	r3, r1
 8005384:	4313      	orrs	r3, r2
 8005386:	d00c      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538c:	3328      	adds	r3, #40	@ 0x28
 800538e:	2102      	movs	r1, #2
 8005390:	4618      	mov	r0, r3
 8005392:	f001 fb2d 	bl	80069f0 <RCCEx_PLL3_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80053ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053b0:	2300      	movs	r3, #0
 80053b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80053b8:	460b      	mov	r3, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	d036      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053c8:	d018      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80053ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053ce:	d811      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80053d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053d4:	d014      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80053d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053da:	d80b      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d011      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80053e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053e4:	d106      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e6:	4bb7      	ldr	r3, [pc, #732]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ea:	4ab6      	ldr	r2, [pc, #728]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80053f2:	e008      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053fa:	e004      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80053fc:	bf00      	nop
 80053fe:	e002      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005400:	bf00      	nop
 8005402:	e000      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800540e:	4bad      	ldr	r3, [pc, #692]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005412:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800541c:	4aa9      	ldr	r2, [pc, #676]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800541e:	430b      	orrs	r3, r1
 8005420:	6553      	str	r3, [r2, #84]	@ 0x54
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800542c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005438:	653b      	str	r3, [r7, #80]	@ 0x50
 800543a:	2300      	movs	r3, #0
 800543c:	657b      	str	r3, [r7, #84]	@ 0x54
 800543e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005448:	4b9e      	ldr	r3, [pc, #632]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800544a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800544c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	4a9b      	ldr	r2, [pc, #620]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005458:	430b      	orrs	r3, r1
 800545a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005468:	64bb      	str	r3, [r7, #72]	@ 0x48
 800546a:	2300      	movs	r3, #0
 800546c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800546e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005472:	460b      	mov	r3, r1
 8005474:	4313      	orrs	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005478:	4b92      	ldr	r3, [pc, #584]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800547a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005486:	4a8f      	ldr	r2, [pc, #572]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005488:	430b      	orrs	r3, r1
 800548a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800548c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005498:	643b      	str	r3, [r7, #64]	@ 0x40
 800549a:	2300      	movs	r3, #0
 800549c:	647b      	str	r3, [r7, #68]	@ 0x44
 800549e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80054a2:	460b      	mov	r3, r1
 80054a4:	4313      	orrs	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054a8:	4b86      	ldr	r3, [pc, #536]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	4a85      	ldr	r2, [pc, #532]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054b2:	6113      	str	r3, [r2, #16]
 80054b4:	4b83      	ldr	r3, [pc, #524]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054b6:	6919      	ldr	r1, [r3, #16]
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054c0:	4a80      	ldr	r2, [pc, #512]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054c2:	430b      	orrs	r3, r1
 80054c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80054c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80054d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054d4:	2300      	movs	r3, #0
 80054d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80054dc:	460b      	mov	r3, r1
 80054de:	4313      	orrs	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80054e2:	4b78      	ldr	r3, [pc, #480]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f0:	4a74      	ldr	r2, [pc, #464]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054f2:	430b      	orrs	r3, r1
 80054f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005502:	633b      	str	r3, [r7, #48]	@ 0x30
 8005504:	2300      	movs	r3, #0
 8005506:	637b      	str	r3, [r7, #52]	@ 0x34
 8005508:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800550c:	460b      	mov	r3, r1
 800550e:	4313      	orrs	r3, r2
 8005510:	d00a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005512:	4b6c      	ldr	r3, [pc, #432]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005516:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005522:	4a68      	ldr	r2, [pc, #416]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005524:	430b      	orrs	r3, r1
 8005526:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	2100      	movs	r1, #0
 8005532:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800553a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800553e:	460b      	mov	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	d011      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005548:	3308      	adds	r3, #8
 800554a:	2100      	movs	r1, #0
 800554c:	4618      	mov	r0, r3
 800554e:	f001 f99d 	bl	800688c <RCCEx_PLL2_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005558:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005564:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	2100      	movs	r1, #0
 8005572:	6239      	str	r1, [r7, #32]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
 800557a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800557e:	460b      	mov	r3, r1
 8005580:	4313      	orrs	r3, r2
 8005582:	d011      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005588:	3308      	adds	r3, #8
 800558a:	2101      	movs	r1, #1
 800558c:	4618      	mov	r0, r3
 800558e:	f001 f97d 	bl	800688c <RCCEx_PLL2_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	2100      	movs	r1, #0
 80055b2:	61b9      	str	r1, [r7, #24]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80055be:	460b      	mov	r3, r1
 80055c0:	4313      	orrs	r3, r2
 80055c2:	d011      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c8:	3308      	adds	r3, #8
 80055ca:	2102      	movs	r1, #2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f95d 	bl	800688c <RCCEx_PLL2_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80055d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	2100      	movs	r1, #0
 80055f2:	6139      	str	r1, [r7, #16]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80055fe:	460b      	mov	r3, r1
 8005600:	4313      	orrs	r3, r2
 8005602:	d011      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005608:	3328      	adds	r3, #40	@ 0x28
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f001 f9ef 	bl	80069f0 <RCCEx_PLL3_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	2100      	movs	r1, #0
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800563e:	460b      	mov	r3, r1
 8005640:	4313      	orrs	r3, r2
 8005642:	d011      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	3328      	adds	r3, #40	@ 0x28
 800564a:	2101      	movs	r1, #1
 800564c:	4618      	mov	r0, r3
 800564e:	f001 f9cf 	bl	80069f0 <RCCEx_PLL3_Config>
 8005652:	4603      	mov	r3, r0
 8005654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	2100      	movs	r1, #0
 8005672:	6039      	str	r1, [r7, #0]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	607b      	str	r3, [r7, #4]
 800567a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800567e:	460b      	mov	r3, r1
 8005680:	4313      	orrs	r3, r2
 8005682:	d011      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005688:	3328      	adds	r3, #40	@ 0x28
 800568a:	2102      	movs	r1, #2
 800568c:	4618      	mov	r0, r3
 800568e:	f001 f9af 	bl	80069f0 <RCCEx_PLL3_Config>
 8005692:	4603      	mov	r3, r0
 8005694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80056a8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e000      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80056bc:	46bd      	mov	sp, r7
 80056be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c2:	bf00      	nop
 80056c4:	58024400 	.word	0x58024400

080056c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b090      	sub	sp, #64	@ 0x40
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80056d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056d6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80056da:	430b      	orrs	r3, r1
 80056dc:	f040 8094 	bne.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80056e0:	4b9b      	ldr	r3, [pc, #620]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80056ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	f200 8087 	bhi.w	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80056f2:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	0800570d 	.word	0x0800570d
 80056fc:	08005735 	.word	0x08005735
 8005700:	0800575d 	.word	0x0800575d
 8005704:	080057f9 	.word	0x080057f9
 8005708:	08005785 	.word	0x08005785
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800570c:	4b90      	ldr	r3, [pc, #576]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005714:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005718:	d108      	bne.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800571a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800571e:	4618      	mov	r0, r3
 8005720:	f000 ff62 	bl	80065e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005728:	f000 bc93 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005730:	f000 bc8f 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005734:	4b86      	ldr	r3, [pc, #536]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800573c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005740:	d108      	bne.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005742:	f107 0318 	add.w	r3, r7, #24
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fca6 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005750:	f000 bc7f 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005758:	f000 bc7b 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800575c:	4b7c      	ldr	r3, [pc, #496]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005768:	d108      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800576a:	f107 030c 	add.w	r3, r7, #12
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fde6 	bl	8006340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005778:	f000 bc6b 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005780:	f000 bc67 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005784:	4b72      	ldr	r3, [pc, #456]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005788:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800578c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800578e:	4b70      	ldr	r3, [pc, #448]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b04      	cmp	r3, #4
 8005798:	d10c      	bne.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800579a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	4a6a      	ldr	r2, [pc, #424]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
 80057b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b2:	e01f      	b.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057b4:	4b66      	ldr	r3, [pc, #408]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c0:	d106      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80057c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057c8:	d102      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057ca:	4b63      	ldr	r3, [pc, #396]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80057cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ce:	e011      	b.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057dc:	d106      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80057de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057e4:	d102      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80057e6:	4b5d      	ldr	r3, [pc, #372]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ea:	e003      	b.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80057f0:	f000 bc2f 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80057f4:	f000 bc2d 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80057f8:	4b59      	ldr	r3, [pc, #356]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057fc:	f000 bc29 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005804:	f000 bc25 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800580c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005810:	430b      	orrs	r3, r1
 8005812:	f040 80a7 	bne.w	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005816:	4b4e      	ldr	r3, [pc, #312]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800581e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005826:	d054      	beq.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800582e:	f200 808b 	bhi.w	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005838:	f000 8083 	beq.w	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005842:	f200 8081 	bhi.w	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800584c:	d02f      	beq.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005854:	d878      	bhi.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005862:	d012      	beq.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8005864:	e070      	b.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005866:	4b3a      	ldr	r3, [pc, #232]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800586e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005872:	d107      	bne.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005878:	4618      	mov	r0, r3
 800587a:	f000 feb5 	bl	80065e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005882:	e3e6      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005888:	e3e3      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800588a:	4b31      	ldr	r3, [pc, #196]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005896:	d107      	bne.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005898:	f107 0318 	add.w	r3, r7, #24
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fbfb 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058a6:	e3d4      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058ac:	e3d1      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058ae:	4b28      	ldr	r3, [pc, #160]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ba:	d107      	bne.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058bc:	f107 030c 	add.w	r3, r7, #12
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fd3d 	bl	8006340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ca:	e3c2      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d0:	e3bf      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80058d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d10c      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80058e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058ee:	4b18      	ldr	r3, [pc, #96]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	08db      	lsrs	r3, r3, #3
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	4a16      	ldr	r2, [pc, #88]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005900:	e01e      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005902:	4b13      	ldr	r3, [pc, #76]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590e:	d106      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005916:	d102      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005918:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800591c:	e010      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800591e:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800592a:	d106      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800592c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005932:	d102      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005934:	4b09      	ldr	r3, [pc, #36]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005938:	e002      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800593e:	e388      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005940:	e387      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005942:	4b07      	ldr	r3, [pc, #28]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005946:	e384      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800594c:	e381      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800594e:	bf00      	nop
 8005950:	58024400 	.word	0x58024400
 8005954:	03d09000 	.word	0x03d09000
 8005958:	003d0900 	.word	0x003d0900
 800595c:	02dc6c00 	.word	0x02dc6c00
 8005960:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005968:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800596c:	430b      	orrs	r3, r1
 800596e:	f040 809c 	bne.w	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005972:	4b9e      	ldr	r3, [pc, #632]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005976:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800597a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005982:	d054      	beq.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800598a:	f200 808b 	bhi.w	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005994:	f000 8083 	beq.w	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800599e:	f200 8081 	bhi.w	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059a8:	d02f      	beq.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059b0:	d878      	bhi.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d004      	beq.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059be:	d012      	beq.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80059c0:	e070      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059c2:	4b8a      	ldr	r3, [pc, #552]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ce:	d107      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fe07 	bl	80065e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059de:	e338      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e4:	e335      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059e6:	4b81      	ldr	r3, [pc, #516]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059f2:	d107      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059f4:	f107 0318 	add.w	r3, r7, #24
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fb4d 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a02:	e326      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a08:	e323      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a0a:	4b78      	ldr	r3, [pc, #480]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a16:	d107      	bne.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a18:	f107 030c 	add.w	r3, r7, #12
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fc8f 	bl	8006340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a26:	e314      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a2c:	e311      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a38:	4b6c      	ldr	r3, [pc, #432]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a4a:	4b68      	ldr	r3, [pc, #416]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	08db      	lsrs	r3, r3, #3
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	4a66      	ldr	r2, [pc, #408]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005a56:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a5c:	e01e      	b.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a5e:	4b63      	ldr	r3, [pc, #396]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a6a:	d106      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a72:	d102      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a74:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a78:	e010      	b.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a86:	d106      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8005a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a8e:	d102      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a90:	4b59      	ldr	r3, [pc, #356]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a94:	e002      	b.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005a9a:	e2da      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a9c:	e2d9      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a9e:	4b57      	ldr	r3, [pc, #348]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aa2:	e2d6      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aa8:	e2d3      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	f040 80a7 	bne.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005abc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005ac0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ac8:	d055      	beq.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ad0:	f200 8096 	bhi.w	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ada:	f000 8084 	beq.w	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ae4:	f200 808c 	bhi.w	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aee:	d030      	beq.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af6:	f200 8083 	bhi.w	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b06:	d012      	beq.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005b08:	e07a      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b0a:	4b38      	ldr	r3, [pc, #224]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b16:	d107      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fd63 	bl	80065e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b26:	e294      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b2c:	e291      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b3a:	d107      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b3c:	f107 0318 	add.w	r3, r7, #24
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 faa9 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b4a:	e282      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b50:	e27f      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b52:	4b26      	ldr	r3, [pc, #152]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b5e:	d107      	bne.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b60:	f107 030c 	add.w	r3, r7, #12
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fbeb 	bl	8006340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b6e:	e270      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b74:	e26d      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b76:	4b1d      	ldr	r3, [pc, #116]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b80:	4b1a      	ldr	r3, [pc, #104]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d10c      	bne.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d109      	bne.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b92:	4b16      	ldr	r3, [pc, #88]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	08db      	lsrs	r3, r3, #3
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	4a14      	ldr	r2, [pc, #80]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ba4:	e01e      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ba6:	4b11      	ldr	r3, [pc, #68]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb2:	d106      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bba:	d102      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bc0:	e010      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bce:	d106      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bd6:	d102      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005bd8:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bdc:	e002      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005be2:	e236      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005be4:	e235      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005be6:	4b05      	ldr	r3, [pc, #20]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bea:	e232      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005bec:	58024400 	.word	0x58024400
 8005bf0:	03d09000 	.word	0x03d09000
 8005bf4:	003d0900 	.word	0x003d0900
 8005bf8:	02dc6c00 	.word	0x02dc6c00
 8005bfc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c04:	e225      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c0a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	f040 8085 	bne.w	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005c14:	4b9c      	ldr	r3, [pc, #624]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c18:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c24:	d06b      	beq.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c2c:	d874      	bhi.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c34:	d056      	beq.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c3c:	d86c      	bhi.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c44:	d03b      	beq.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c4c:	d864      	bhi.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c54:	d021      	beq.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8005c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c5c:	d85c      	bhi.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8005c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c6a:	d004      	beq.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8005c6c:	e054      	b.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005c6e:	f7fe fb5f 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8005c72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c74:	e1ed      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c76:	4b84      	ldr	r3, [pc, #528]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c82:	d107      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c84:	f107 0318 	add.w	r3, r7, #24
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fa05 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c92:	e1de      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c98:	e1db      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ca8:	f107 030c 	add.w	r3, r7, #12
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fb47 	bl	8006340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cb6:	e1cc      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cbc:	e1c9      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cbe:	4b72      	ldr	r3, [pc, #456]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d109      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cca:	4b6f      	ldr	r3, [pc, #444]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	08db      	lsrs	r3, r3, #3
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	4a6d      	ldr	r2, [pc, #436]	@ (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cdc:	e1b9      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce2:	e1b6      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ce4:	4b68      	ldr	r3, [pc, #416]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cf0:	d102      	bne.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8005cf2:	4b67      	ldr	r3, [pc, #412]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cf6:	e1ac      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfc:	e1a9      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cfe:	4b62      	ldr	r3, [pc, #392]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d0a:	d102      	bne.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8005d0c:	4b61      	ldr	r3, [pc, #388]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d10:	e19f      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d16:	e19c      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d1c:	e199      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d22:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005d26:	430b      	orrs	r3, r1
 8005d28:	d173      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005d2a:	4b57      	ldr	r3, [pc, #348]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d32:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d3a:	d02f      	beq.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d42:	d863      	bhi.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8005d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d50:	d012      	beq.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8005d52:	e05b      	b.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d54:	4b4c      	ldr	r3, [pc, #304]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d60:	d107      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d62:	f107 0318 	add.w	r3, r7, #24
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f996 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d70:	e16f      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d76:	e16c      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d78:	4b43      	ldr	r3, [pc, #268]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d84:	d107      	bne.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d86:	f107 030c 	add.w	r3, r7, #12
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fad8 	bl	8006340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d94:	e15d      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d9a:	e15a      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005da4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005da6:	4b38      	ldr	r3, [pc, #224]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d10c      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005db8:	4b33      	ldr	r3, [pc, #204]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	08db      	lsrs	r3, r3, #3
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	4a32      	ldr	r2, [pc, #200]	@ (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dca:	e01e      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dd8:	d106      	bne.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ddc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005de0:	d102      	bne.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005de2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005de6:	e010      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005de8:	4b27      	ldr	r3, [pc, #156]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005df4:	d106      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dfc:	d102      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005dfe:	4b25      	ldr	r3, [pc, #148]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e02:	e002      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e08:	e123      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e0a:	e122      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e10:	e11f      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e16:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	d13c      	bne.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e26:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d004      	beq.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e34:	d012      	beq.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005e36:	e023      	b.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e38:	4b13      	ldr	r3, [pc, #76]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e44:	d107      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fbcc 	bl	80065e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e54:	e0fd      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5a:	e0fa      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e68:	d107      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e6a:	f107 0318 	add.w	r3, r7, #24
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 f912 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e78:	e0eb      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e7e:	e0e8      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e84:	e0e5      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e86:	bf00      	nop
 8005e88:	58024400 	.word	0x58024400
 8005e8c:	03d09000 	.word	0x03d09000
 8005e90:	003d0900 	.word	0x003d0900
 8005e94:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e9c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	f040 8085 	bne.w	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eaa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005eae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eb6:	d06b      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ebe:	d874      	bhi.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec6:	d056      	beq.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ece:	d86c      	bhi.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ed6:	d03b      	beq.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ede:	d864      	bhi.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ee6:	d021      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eee:	d85c      	bhi.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005efc:	d004      	beq.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005efe:	e054      	b.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005f00:	f000 f8b4 	bl	800606c <HAL_RCCEx_GetD3PCLK1Freq>
 8005f04:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f06:	e0a4      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f08:	4b54      	ldr	r3, [pc, #336]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f14:	d107      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f16:	f107 0318 	add.w	r3, r7, #24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 f8bc 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f24:	e095      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f2a:	e092      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f38:	d107      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f3a:	f107 030c 	add.w	r3, r7, #12
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 f9fe 	bl	8006340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f48:	e083      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f4e:	e080      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f50:	4b42      	ldr	r3, [pc, #264]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d109      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	4a3e      	ldr	r2, [pc, #248]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f6e:	e070      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f74:	e06d      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005f76:	4b39      	ldr	r3, [pc, #228]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f82:	d102      	bne.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8005f84:	4b37      	ldr	r3, [pc, #220]	@ (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f88:	e063      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f8e:	e060      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f90:	4b32      	ldr	r3, [pc, #200]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f9c:	d102      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8005f9e:	4b32      	ldr	r3, [pc, #200]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fa2:	e056      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa8:	e053      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fae:	e050      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fb4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	d148      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005fbc:	4b27      	ldr	r3, [pc, #156]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fcc:	d02a      	beq.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fd4:	d838      	bhi.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe2:	d00d      	beq.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005fe4:	e030      	b.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff2:	d102      	bne.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8005ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ff8:	e02b      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ffe:	e028      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006000:	4b16      	ldr	r3, [pc, #88]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006008:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800600c:	d107      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800600e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fae8 	bl	80065e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800601c:	e019      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006022:	e016      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006024:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800602c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006030:	d107      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006032:	f107 0318 	add.w	r3, r7, #24
 8006036:	4618      	mov	r0, r3
 8006038:	f000 f82e 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006040:	e007      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006046:	e004      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800604c:	e001      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006054:	4618      	mov	r0, r3
 8006056:	3740      	adds	r7, #64	@ 0x40
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	58024400 	.word	0x58024400
 8006060:	03d09000 	.word	0x03d09000
 8006064:	003d0900 	.word	0x003d0900
 8006068:	02dc6c00 	.word	0x02dc6c00

0800606c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006070:	f7fe f92e 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 8006074:	4602      	mov	r2, r0
 8006076:	4b06      	ldr	r3, [pc, #24]	@ (8006090 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	091b      	lsrs	r3, r3, #4
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	4904      	ldr	r1, [pc, #16]	@ (8006094 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006082:	5ccb      	ldrb	r3, [r1, r3]
 8006084:	f003 031f 	and.w	r3, r3, #31
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800608c:	4618      	mov	r0, r3
 800608e:	bd80      	pop	{r7, pc}
 8006090:	58024400 	.word	0x58024400
 8006094:	0800f7b4 	.word	0x0800f7b4

08006098 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006098:	b480      	push	{r7}
 800609a:	b089      	sub	sp, #36	@ 0x24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80060aa:	4b9f      	ldr	r3, [pc, #636]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ae:	0b1b      	lsrs	r3, r3, #12
 80060b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80060c2:	4b99      	ldr	r3, [pc, #612]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c6:	08db      	lsrs	r3, r3, #3
 80060c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	fb02 f303 	mul.w	r3, r2, r3
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8111 	beq.w	8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	f000 8083 	beq.w	80061f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	f200 80a1 	bhi.w	8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d056      	beq.n	80061b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006102:	e099      	b.n	8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006104:	4b88      	ldr	r3, [pc, #544]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d02d      	beq.n	800616c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006110:	4b85      	ldr	r3, [pc, #532]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	08db      	lsrs	r3, r3, #3
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	4a84      	ldr	r2, [pc, #528]	@ (800632c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800611c:	fa22 f303 	lsr.w	r3, r2, r3
 8006120:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	ee07 3a90 	vmov	s15, r3
 8006128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613a:	4b7b      	ldr	r3, [pc, #492]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800613c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614a:	ed97 6a03 	vldr	s12, [r7, #12]
 800614e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800615e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006166:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800616a:	e087      	b.n	800627c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006176:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800617a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617e:	4b6a      	ldr	r3, [pc, #424]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006192:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800619a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ae:	e065      	b.n	800627c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c2:	4b59      	ldr	r3, [pc, #356]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061f2:	e043      	b.n	800627c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800633c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006206:	4b48      	ldr	r3, [pc, #288]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006216:	ed97 6a03 	vldr	s12, [r7, #12]
 800621a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800621e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800622a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006236:	e021      	b.n	800627c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006242:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624a:	4b37      	ldr	r3, [pc, #220]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800624c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625a:	ed97 6a03 	vldr	s12, [r7, #12]
 800625e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800626e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800627a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800627c:	4b2a      	ldr	r3, [pc, #168]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	0a5b      	lsrs	r3, r3, #9
 8006282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006296:	edd7 6a07 	vldr	s13, [r7, #28]
 800629a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a2:	ee17 2a90 	vmov	r2, s15
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80062aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ae:	0c1b      	lsrs	r3, r3, #16
 80062b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b4:	ee07 3a90 	vmov	s15, r3
 80062b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d0:	ee17 2a90 	vmov	r2, s15
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80062d8:	4b13      	ldr	r3, [pc, #76]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062dc:	0e1b      	lsrs	r3, r3, #24
 80062de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fe:	ee17 2a90 	vmov	r2, s15
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006306:	e008      	b.n	800631a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	609a      	str	r2, [r3, #8]
}
 800631a:	bf00      	nop
 800631c:	3724      	adds	r7, #36	@ 0x24
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	58024400 	.word	0x58024400
 800632c:	03d09000 	.word	0x03d09000
 8006330:	46000000 	.word	0x46000000
 8006334:	4c742400 	.word	0x4c742400
 8006338:	4a742400 	.word	0x4a742400
 800633c:	4c371b00 	.word	0x4c371b00

08006340 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006340:	b480      	push	{r7}
 8006342:	b089      	sub	sp, #36	@ 0x24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006348:	4ba1      	ldr	r3, [pc, #644]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006352:	4b9f      	ldr	r3, [pc, #636]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006356:	0d1b      	lsrs	r3, r3, #20
 8006358:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800635c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800635e:	4b9c      	ldr	r3, [pc, #624]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	0a1b      	lsrs	r3, r3, #8
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800636a:	4b99      	ldr	r3, [pc, #612]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800636c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636e:	08db      	lsrs	r3, r3, #3
 8006370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	fb02 f303 	mul.w	r3, r2, r3
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006382:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 8111 	beq.w	80065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	2b02      	cmp	r3, #2
 8006392:	f000 8083 	beq.w	800649c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b02      	cmp	r3, #2
 800639a:	f200 80a1 	bhi.w	80064e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d056      	beq.n	8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063aa:	e099      	b.n	80064e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ac:	4b88      	ldr	r3, [pc, #544]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02d      	beq.n	8006414 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063b8:	4b85      	ldr	r3, [pc, #532]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	08db      	lsrs	r3, r3, #3
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	4a84      	ldr	r2, [pc, #528]	@ (80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
 80063c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	ee07 3a90 	vmov	s15, r3
 80063d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e2:	4b7b      	ldr	r3, [pc, #492]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006412:	e087      	b.n	8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006426:	4b6a      	ldr	r3, [pc, #424]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006436:	ed97 6a03 	vldr	s12, [r7, #12]
 800643a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800643e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800644a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800644e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006456:	e065      	b.n	8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006462:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646a:	4b59      	ldr	r3, [pc, #356]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647a:	ed97 6a03 	vldr	s12, [r7, #12]
 800647e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800648e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800649a:	e043      	b.n	8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ae:	4b48      	ldr	r3, [pc, #288]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064be:	ed97 6a03 	vldr	s12, [r7, #12]
 80064c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064de:	e021      	b.n	8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f2:	4b37      	ldr	r3, [pc, #220]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006502:	ed97 6a03 	vldr	s12, [r7, #12]
 8006506:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800650a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006522:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006524:	4b2a      	ldr	r3, [pc, #168]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	0a5b      	lsrs	r3, r3, #9
 800652a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800653a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800653e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800654a:	ee17 2a90 	vmov	r2, s15
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006552:	4b1f      	ldr	r3, [pc, #124]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	0c1b      	lsrs	r3, r3, #16
 8006558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800655c:	ee07 3a90 	vmov	s15, r3
 8006560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006564:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006568:	ee37 7a87 	vadd.f32	s14, s15, s14
 800656c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006578:	ee17 2a90 	vmov	r2, s15
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006580:	4b13      	ldr	r3, [pc, #76]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006584:	0e1b      	lsrs	r3, r3, #24
 8006586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800658a:	ee07 3a90 	vmov	s15, r3
 800658e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006592:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800659a:	edd7 6a07 	vldr	s13, [r7, #28]
 800659e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a6:	ee17 2a90 	vmov	r2, s15
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065ae:	e008      	b.n	80065c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	609a      	str	r2, [r3, #8]
}
 80065c2:	bf00      	nop
 80065c4:	3724      	adds	r7, #36	@ 0x24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	58024400 	.word	0x58024400
 80065d4:	03d09000 	.word	0x03d09000
 80065d8:	46000000 	.word	0x46000000
 80065dc:	4c742400 	.word	0x4c742400
 80065e0:	4a742400 	.word	0x4a742400
 80065e4:	4c371b00 	.word	0x4c371b00

080065e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b089      	sub	sp, #36	@ 0x24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065f0:	4ba0      	ldr	r3, [pc, #640]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80065fa:	4b9e      	ldr	r3, [pc, #632]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	091b      	lsrs	r3, r3, #4
 8006600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006604:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006606:	4b9b      	ldr	r3, [pc, #620]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006610:	4b98      	ldr	r3, [pc, #608]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006614:	08db      	lsrs	r3, r3, #3
 8006616:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	fb02 f303 	mul.w	r3, r2, r3
 8006620:	ee07 3a90 	vmov	s15, r3
 8006624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006628:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 8111 	beq.w	8006856 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b02      	cmp	r3, #2
 8006638:	f000 8083 	beq.w	8006742 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	2b02      	cmp	r3, #2
 8006640:	f200 80a1 	bhi.w	8006786 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d056      	beq.n	80066fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006650:	e099      	b.n	8006786 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006652:	4b88      	ldr	r3, [pc, #544]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d02d      	beq.n	80066ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800665e:	4b85      	ldr	r3, [pc, #532]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	08db      	lsrs	r3, r3, #3
 8006664:	f003 0303 	and.w	r3, r3, #3
 8006668:	4a83      	ldr	r2, [pc, #524]	@ (8006878 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800666a:	fa22 f303 	lsr.w	r3, r2, r3
 800666e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006688:	4b7a      	ldr	r3, [pc, #488]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800668a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006690:	ee07 3a90 	vmov	s15, r3
 8006694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006698:	ed97 6a03 	vldr	s12, [r7, #12]
 800669c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800687c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80066b8:	e087      	b.n	80067ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	ee07 3a90 	vmov	s15, r3
 80066c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006880 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066cc:	4b69      	ldr	r3, [pc, #420]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d4:	ee07 3a90 	vmov	s15, r3
 80066d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80066e0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800687c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066fc:	e065      	b.n	80067ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	ee07 3a90 	vmov	s15, r3
 8006704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006708:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006884 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800670c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006710:	4b58      	ldr	r3, [pc, #352]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006718:	ee07 3a90 	vmov	s15, r3
 800671c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006720:	ed97 6a03 	vldr	s12, [r7, #12]
 8006724:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800687c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006730:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006740:	e043      	b.n	80067ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006888 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006754:	4b47      	ldr	r3, [pc, #284]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675c:	ee07 3a90 	vmov	s15, r3
 8006760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006764:	ed97 6a03 	vldr	s12, [r7, #12]
 8006768:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800687c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800676c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006780:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006784:	e021      	b.n	80067ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	ee07 3a90 	vmov	s15, r3
 800678c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006790:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006880 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006798:	4b36      	ldr	r3, [pc, #216]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800679a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800687c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80067ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ce:	0a5b      	lsrs	r3, r3, #9
 80067d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067d4:	ee07 3a90 	vmov	s15, r3
 80067d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80067e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067f0:	ee17 2a90 	vmov	r2, s15
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80067f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800680e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006812:	edd7 6a07 	vldr	s13, [r7, #28]
 8006816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800681a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800681e:	ee17 2a90 	vmov	r2, s15
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006826:	4b13      	ldr	r3, [pc, #76]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682a:	0e1b      	lsrs	r3, r3, #24
 800682c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006830:	ee07 3a90 	vmov	s15, r3
 8006834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800683c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006840:	edd7 6a07 	vldr	s13, [r7, #28]
 8006844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800684c:	ee17 2a90 	vmov	r2, s15
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006854:	e008      	b.n	8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	609a      	str	r2, [r3, #8]
}
 8006868:	bf00      	nop
 800686a:	3724      	adds	r7, #36	@ 0x24
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	58024400 	.word	0x58024400
 8006878:	03d09000 	.word	0x03d09000
 800687c:	46000000 	.word	0x46000000
 8006880:	4c742400 	.word	0x4c742400
 8006884:	4a742400 	.word	0x4a742400
 8006888:	4c371b00 	.word	0x4c371b00

0800688c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800689a:	4b53      	ldr	r3, [pc, #332]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d101      	bne.n	80068aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e099      	b.n	80069de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80068aa:	4b4f      	ldr	r3, [pc, #316]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a4e      	ldr	r2, [pc, #312]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 80068b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068b6:	f7fb fb9d 	bl	8001ff4 <HAL_GetTick>
 80068ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068bc:	e008      	b.n	80068d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068be:	f7fb fb99 	bl	8001ff4 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e086      	b.n	80069de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068d0:	4b45      	ldr	r3, [pc, #276]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f0      	bne.n	80068be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80068dc:	4b42      	ldr	r3, [pc, #264]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 80068de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	031b      	lsls	r3, r3, #12
 80068ea:	493f      	ldr	r1, [pc, #252]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	3b01      	subs	r3, #1
 8006900:	025b      	lsls	r3, r3, #9
 8006902:	b29b      	uxth	r3, r3
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	3b01      	subs	r3, #1
 800690c:	041b      	lsls	r3, r3, #16
 800690e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	3b01      	subs	r3, #1
 800691a:	061b      	lsls	r3, r3, #24
 800691c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006920:	4931      	ldr	r1, [pc, #196]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006922:	4313      	orrs	r3, r2
 8006924:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006926:	4b30      	ldr	r3, [pc, #192]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	492d      	ldr	r1, [pc, #180]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006934:	4313      	orrs	r3, r2
 8006936:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006938:	4b2b      	ldr	r3, [pc, #172]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 800693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693c:	f023 0220 	bic.w	r2, r3, #32
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	4928      	ldr	r1, [pc, #160]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006946:	4313      	orrs	r3, r2
 8006948:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800694a:	4b27      	ldr	r3, [pc, #156]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 800694c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694e:	4a26      	ldr	r2, [pc, #152]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006950:	f023 0310 	bic.w	r3, r3, #16
 8006954:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006956:	4b24      	ldr	r3, [pc, #144]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800695a:	4b24      	ldr	r3, [pc, #144]	@ (80069ec <RCCEx_PLL2_Config+0x160>)
 800695c:	4013      	ands	r3, r2
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	69d2      	ldr	r2, [r2, #28]
 8006962:	00d2      	lsls	r2, r2, #3
 8006964:	4920      	ldr	r1, [pc, #128]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006966:	4313      	orrs	r3, r2
 8006968:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800696a:	4b1f      	ldr	r3, [pc, #124]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 800696c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696e:	4a1e      	ldr	r2, [pc, #120]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006970:	f043 0310 	orr.w	r3, r3, #16
 8006974:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d106      	bne.n	800698a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800697c:	4b1a      	ldr	r3, [pc, #104]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 800697e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006980:	4a19      	ldr	r2, [pc, #100]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006982:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006986:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006988:	e00f      	b.n	80069aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d106      	bne.n	800699e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006990:	4b15      	ldr	r3, [pc, #84]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	4a14      	ldr	r2, [pc, #80]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 8006996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800699a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800699c:	e005      	b.n	80069aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800699e:	4b12      	ldr	r3, [pc, #72]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 80069a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a2:	4a11      	ldr	r2, [pc, #68]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 80069a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80069aa:	4b0f      	ldr	r3, [pc, #60]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a0e      	ldr	r2, [pc, #56]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 80069b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b6:	f7fb fb1d 	bl	8001ff4 <HAL_GetTick>
 80069ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069bc:	e008      	b.n	80069d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069be:	f7fb fb19 	bl	8001ff4 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d901      	bls.n	80069d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e006      	b.n	80069de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069d0:	4b05      	ldr	r3, [pc, #20]	@ (80069e8 <RCCEx_PLL2_Config+0x15c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0f0      	beq.n	80069be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	58024400 	.word	0x58024400
 80069ec:	ffff0007 	.word	0xffff0007

080069f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069fe:	4b53      	ldr	r3, [pc, #332]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d101      	bne.n	8006a0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e099      	b.n	8006b42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a4e      	ldr	r2, [pc, #312]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a1a:	f7fb faeb 	bl	8001ff4 <HAL_GetTick>
 8006a1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a20:	e008      	b.n	8006a34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a22:	f7fb fae7 	bl	8001ff4 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e086      	b.n	8006b42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a34:	4b45      	ldr	r3, [pc, #276]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1f0      	bne.n	8006a22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a40:	4b42      	ldr	r3, [pc, #264]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	051b      	lsls	r3, r3, #20
 8006a4e:	493f      	ldr	r1, [pc, #252]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	025b      	lsls	r3, r3, #9
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	061b      	lsls	r3, r3, #24
 8006a80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a84:	4931      	ldr	r1, [pc, #196]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a8a:	4b30      	ldr	r3, [pc, #192]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	492d      	ldr	r1, [pc, #180]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	4928      	ldr	r1, [pc, #160]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006aae:	4b27      	ldr	r3, [pc, #156]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	4a26      	ldr	r2, [pc, #152]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006aba:	4b24      	ldr	r3, [pc, #144]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006abe:	4b24      	ldr	r3, [pc, #144]	@ (8006b50 <RCCEx_PLL3_Config+0x160>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	69d2      	ldr	r2, [r2, #28]
 8006ac6:	00d2      	lsls	r2, r2, #3
 8006ac8:	4920      	ldr	r1, [pc, #128]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ace:	4b1f      	ldr	r3, [pc, #124]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d106      	bne.n	8006aee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	4a19      	ldr	r2, [pc, #100]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006ae6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006aec:	e00f      	b.n	8006b0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d106      	bne.n	8006b02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006af4:	4b15      	ldr	r3, [pc, #84]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	4a14      	ldr	r2, [pc, #80]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006afa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006afe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b00:	e005      	b.n	8006b0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b02:	4b12      	ldr	r3, [pc, #72]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b06:	4a11      	ldr	r2, [pc, #68]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006b08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a0e      	ldr	r2, [pc, #56]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b1a:	f7fb fa6b 	bl	8001ff4 <HAL_GetTick>
 8006b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b20:	e008      	b.n	8006b34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b22:	f7fb fa67 	bl	8001ff4 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e006      	b.n	8006b42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b34:	4b05      	ldr	r3, [pc, #20]	@ (8006b4c <RCCEx_PLL3_Config+0x15c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0f0      	beq.n	8006b22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	58024400 	.word	0x58024400
 8006b50:	ffff0007 	.word	0xffff0007

08006b54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	@ 0x28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e075      	b.n	8006c52 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d105      	bne.n	8006b7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7fa fd8b 	bl	8001694 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2204      	movs	r2, #4
 8006b82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f868 	bl	8006c5c <HAL_SD_InitCard>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e05d      	b.n	8006c52 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006b96:	f107 0308 	add.w	r3, r7, #8
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fdb5 	bl	800770c <HAL_SD_GetCardStatus>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e052      	b.n	8006c52 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006bac:	7e3b      	ldrb	r3, [r7, #24]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006bb2:	7e7b      	ldrb	r3, [r7, #25]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d10a      	bne.n	8006bd6 <HAL_SD_Init+0x82>
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <HAL_SD_Init+0x78>
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d004      	beq.n	8006bd6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bd2:	659a      	str	r2, [r3, #88]	@ 0x58
 8006bd4:	e00b      	b.n	8006bee <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d104      	bne.n	8006be8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006be4:	659a      	str	r2, [r3, #88]	@ 0x58
 8006be6:	e002      	b.n	8006bee <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fe73 	bl	80078e0 <HAL_SD_ConfigWideBusOperation>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e026      	b.n	8006c52 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006c04:	f7fb f9f6 	bl	8001ff4 <HAL_GetTick>
 8006c08:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006c0a:	e011      	b.n	8006c30 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c0c:	f7fb f9f2 	bl	8001ff4 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1a:	d109      	bne.n	8006c30 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c22:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e010      	b.n	8006c52 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 ff67 	bl	8007b04 <HAL_SD_GetCardState>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d1e7      	bne.n	8006c0c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3728      	adds	r7, #40	@ 0x28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c5c:	b590      	push	{r4, r7, lr}
 8006c5e:	b08d      	sub	sp, #52	@ 0x34
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c74:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006c78:	f04f 0100 	mov.w	r1, #0
 8006c7c:	f7fe fd24 	bl	80056c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c80:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d109      	bne.n	8006c9c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006c96:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e070      	b.n	8006d7e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9e:	0a1b      	lsrs	r3, r3, #8
 8006ca0:	4a39      	ldr	r2, [pc, #228]	@ (8006d88 <HAL_SD_InitCard+0x12c>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	091b      	lsrs	r3, r3, #4
 8006ca8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681c      	ldr	r4, [r3, #0]
 8006cae:	466a      	mov	r2, sp
 8006cb0:	f107 0318 	add.w	r3, r7, #24
 8006cb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006cb8:	e882 0003 	stmia.w	r2, {r0, r1}
 8006cbc:	f107 030c 	add.w	r3, r7, #12
 8006cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f003 fade 	bl	800a284 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f003 fb21 	bl	800a314 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006cea:	4a28      	ldr	r2, [pc, #160]	@ (8006d8c <HAL_SD_InitCard+0x130>)
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fb f989 	bl	800200c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fff0 	bl	8007ce0 <SD_PowerON>
 8006d00:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e02e      	b.n	8006d7e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 ff0f 	bl	8007b44 <SD_InitCard>
 8006d26:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e01b      	b.n	8006d7e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f003 fb76 	bl	800a440 <SDMMC_CmdBlockLength>
 8006d54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00f      	beq.n	8006d7c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0b      	ldr	r2, [pc, #44]	@ (8006d90 <HAL_SD_InitCard+0x134>)
 8006d62:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	372c      	adds	r7, #44	@ 0x2c
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd90      	pop	{r4, r7, pc}
 8006d86:	bf00      	nop
 8006d88:	014f8b59 	.word	0x014f8b59
 8006d8c:	00012110 	.word	0x00012110
 8006d90:	1fe00fff 	.word	0x1fe00fff

08006d94 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b092      	sub	sp, #72	@ 0x48
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006da2:	f7fb f927 	bl	8001ff4 <HAL_GetTick>
 8006da6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d107      	bne.n	8006dc6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e167      	b.n	8007096 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	f040 815a 	bne.w	8007088 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006dda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	441a      	add	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d907      	bls.n	8006df8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dec:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e14e      	b.n	8007096 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2203      	movs	r2, #3
 8006dfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2200      	movs	r2, #0
 8006e06:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d002      	beq.n	8006e16 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e12:	025b      	lsls	r3, r3, #9
 8006e14:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e16:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	025b      	lsls	r3, r3, #9
 8006e20:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e22:	2390      	movs	r3, #144	@ 0x90
 8006e24:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e26:	2302      	movs	r3, #2
 8006e28:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f107 0214 	add.w	r2, r7, #20
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f003 fad3 	bl	800a3e8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e50:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d90a      	bls.n	8006e6e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e64:	4618      	mov	r0, r3
 8006e66:	f003 fb31 	bl	800a4cc <SDMMC_CmdReadMultiBlock>
 8006e6a:	6478      	str	r0, [r7, #68]	@ 0x44
 8006e6c:	e009      	b.n	8006e82 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f003 fb03 	bl	800a486 <SDMMC_CmdReadSingleBlock>
 8006e80:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d012      	beq.n	8006eae <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a84      	ldr	r2, [pc, #528]	@ (80070a0 <HAL_SD_ReadBlocks+0x30c>)
 8006e8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e96:	431a      	orrs	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e0f3      	b.n	8007096 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006eb2:	e058      	b.n	8006f66 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d033      	beq.n	8006f2a <HAL_SD_ReadBlocks+0x196>
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec4:	2b1f      	cmp	r3, #31
 8006ec6:	d930      	bls.n	8006f2a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ecc:	e027      	b.n	8006f1e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f003 fa00 	bl	800a2d8 <SDMMC_ReadFIFO>
 8006ed8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eea:	0a1b      	lsrs	r3, r3, #8
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efa:	0c1b      	lsrs	r3, r3, #16
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f04:	3301      	adds	r3, #1
 8006f06:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0a:	0e1b      	lsrs	r3, r3, #24
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f14:	3301      	adds	r3, #1
 8006f16:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8006f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f20:	2b07      	cmp	r3, #7
 8006f22:	d9d4      	bls.n	8006ece <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f26:	3b20      	subs	r3, #32
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006f2a:	f7fb f863 	bl	8001ff4 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d902      	bls.n	8006f40 <HAL_SD_ReadBlocks+0x1ac>
 8006f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d112      	bne.n	8006f66 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a56      	ldr	r2, [pc, #344]	@ (80070a0 <HAL_SD_ReadBlocks+0x30c>)
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e097      	b.n	8007096 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f6c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d09f      	beq.n	8006eb4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f82:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d022      	beq.n	8006fd8 <HAL_SD_ReadBlocks+0x244>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d91f      	bls.n	8006fd8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d01b      	beq.n	8006fd8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f003 fafb 	bl	800a5a0 <SDMMC_CmdStopTransfer>
 8006faa:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d012      	beq.n	8006fd8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a3a      	ldr	r2, [pc, #232]	@ (80070a0 <HAL_SD_ReadBlocks+0x30c>)
 8006fb8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e05e      	b.n	8007096 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d012      	beq.n	800700c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a2d      	ldr	r2, [pc, #180]	@ (80070a0 <HAL_SD_ReadBlocks+0x30c>)
 8006fec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff2:	f043 0208 	orr.w	r2, r3, #8
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e044      	b.n	8007096 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d012      	beq.n	8007040 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a20      	ldr	r2, [pc, #128]	@ (80070a0 <HAL_SD_ReadBlocks+0x30c>)
 8007020:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007026:	f043 0202 	orr.w	r2, r3, #2
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e02a      	b.n	8007096 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d012      	beq.n	8007074 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a13      	ldr	r2, [pc, #76]	@ (80070a0 <HAL_SD_ReadBlocks+0x30c>)
 8007054:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705a:	f043 0220 	orr.w	r2, r3, #32
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e010      	b.n	8007096 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a0a      	ldr	r2, [pc, #40]	@ (80070a4 <HAL_SD_ReadBlocks+0x310>)
 800707a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	e006      	b.n	8007096 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800708c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	3748      	adds	r7, #72	@ 0x48
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	1fe00fff 	.word	0x1fe00fff
 80070a4:	18000f3a 	.word	0x18000f3a

080070a8 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b092      	sub	sp, #72	@ 0x48
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80070b6:	f7fa ff9d 	bl	8001ff4 <HAL_GetTick>
 80070ba:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d107      	bne.n	80070da <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e16b      	b.n	80073b2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	f040 815e 	bne.w	80073a4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80070ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	441a      	add	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d907      	bls.n	800710c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007100:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e152      	b.n	80073b2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2203      	movs	r2, #3
 8007110:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2200      	movs	r2, #0
 800711a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007120:	2b01      	cmp	r3, #1
 8007122:	d002      	beq.n	800712a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007126:	025b      	lsls	r3, r3, #9
 8007128:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800712a:	f04f 33ff 	mov.w	r3, #4294967295
 800712e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	025b      	lsls	r3, r3, #9
 8007134:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007136:	2390      	movs	r3, #144	@ 0x90
 8007138:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800713a:	2300      	movs	r3, #0
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800713e:	2300      	movs	r3, #0
 8007140:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007142:	2300      	movs	r3, #0
 8007144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f107 0218 	add.w	r2, r7, #24
 800714e:	4611      	mov	r1, r2
 8007150:	4618      	mov	r0, r3
 8007152:	f003 f949 	bl	800a3e8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007164:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d90a      	bls.n	8007182 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007178:	4618      	mov	r0, r3
 800717a:	f003 f9ed 	bl	800a558 <SDMMC_CmdWriteMultiBlock>
 800717e:	6478      	str	r0, [r7, #68]	@ 0x44
 8007180:	e009      	b.n	8007196 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2210      	movs	r2, #16
 8007186:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800718e:	4618      	mov	r0, r3
 8007190:	f003 f9bf 	bl	800a512 <SDMMC_CmdWriteSingleBlock>
 8007194:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007198:	2b00      	cmp	r3, #0
 800719a:	d012      	beq.n	80071c2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a86      	ldr	r2, [pc, #536]	@ (80073bc <HAL_SD_WriteBlocks+0x314>)
 80071a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071aa:	431a      	orrs	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e0f7      	b.n	80073b2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80071c6:	e05c      	b.n	8007282 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d037      	beq.n	8007246 <HAL_SD_WriteBlocks+0x19e>
 80071d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d8:	2b1f      	cmp	r3, #31
 80071da:	d934      	bls.n	8007246 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80071dc:	2300      	movs	r3, #0
 80071de:	643b      	str	r3, [r7, #64]	@ 0x40
 80071e0:	e02b      	b.n	800723a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80071e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80071e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ea:	3301      	adds	r3, #1
 80071ec:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80071ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	021a      	lsls	r2, r3, #8
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80071fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fc:	3301      	adds	r3, #1
 80071fe:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	041a      	lsls	r2, r3, #16
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800720c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720e:	3301      	adds	r3, #1
 8007210:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	061a      	lsls	r2, r3, #24
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800721e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007220:	3301      	adds	r3, #1
 8007222:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f107 0214 	add.w	r2, r7, #20
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f003 f85f 	bl	800a2f2 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8007234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007236:	3301      	adds	r3, #1
 8007238:	643b      	str	r3, [r7, #64]	@ 0x40
 800723a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800723c:	2b07      	cmp	r3, #7
 800723e:	d9d0      	bls.n	80071e2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007242:	3b20      	subs	r3, #32
 8007244:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007246:	f7fa fed5 	bl	8001ff4 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007252:	429a      	cmp	r2, r3
 8007254:	d902      	bls.n	800725c <HAL_SD_WriteBlocks+0x1b4>
 8007256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007258:	2b00      	cmp	r3, #0
 800725a:	d112      	bne.n	8007282 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a56      	ldr	r2, [pc, #344]	@ (80073bc <HAL_SD_WriteBlocks+0x314>)
 8007262:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800726a:	431a      	orrs	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e097      	b.n	80073b2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007288:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800728c:	2b00      	cmp	r3, #0
 800728e:	d09b      	beq.n	80071c8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800729e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d022      	beq.n	80072f4 <HAL_SD_WriteBlocks+0x24c>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d91f      	bls.n	80072f4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d01b      	beq.n	80072f4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f003 f96d 	bl	800a5a0 <SDMMC_CmdStopTransfer>
 80072c6:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80072c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d012      	beq.n	80072f4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a3a      	ldr	r2, [pc, #232]	@ (80073bc <HAL_SD_WriteBlocks+0x314>)
 80072d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072dc:	431a      	orrs	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e05e      	b.n	80073b2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d012      	beq.n	8007328 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a2d      	ldr	r2, [pc, #180]	@ (80073bc <HAL_SD_WriteBlocks+0x314>)
 8007308:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800730e:	f043 0208 	orr.w	r2, r3, #8
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e044      	b.n	80073b2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d012      	beq.n	800735c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a20      	ldr	r2, [pc, #128]	@ (80073bc <HAL_SD_WriteBlocks+0x314>)
 800733c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007342:	f043 0202 	orr.w	r2, r3, #2
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e02a      	b.n	80073b2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b00      	cmp	r3, #0
 8007368:	d012      	beq.n	8007390 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a13      	ldr	r2, [pc, #76]	@ (80073bc <HAL_SD_WriteBlocks+0x314>)
 8007370:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007376:	f043 0210 	orr.w	r2, r3, #16
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e010      	b.n	80073b2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a0a      	ldr	r2, [pc, #40]	@ (80073c0 <HAL_SD_WriteBlocks+0x318>)
 8007396:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	e006      	b.n	80073b2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
  }
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3748      	adds	r7, #72	@ 0x48
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	1fe00fff 	.word	0x1fe00fff
 80073c0:	18000f3a 	.word	0x18000f3a

080073c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d2:	0f9b      	lsrs	r3, r3, #30
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073de:	0e9b      	lsrs	r3, r3, #26
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073f0:	0e1b      	lsrs	r3, r3, #24
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007402:	0c1b      	lsrs	r3, r3, #16
 8007404:	b2da      	uxtb	r2, r3
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800740e:	0a1b      	lsrs	r3, r3, #8
 8007410:	b2da      	uxtb	r2, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800741a:	b2da      	uxtb	r2, r3
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007424:	0d1b      	lsrs	r3, r3, #20
 8007426:	b29a      	uxth	r2, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007430:	0c1b      	lsrs	r3, r3, #16
 8007432:	b2db      	uxtb	r3, r3
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	b2da      	uxtb	r2, r3
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007442:	0bdb      	lsrs	r3, r3, #15
 8007444:	b2db      	uxtb	r3, r3
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	b2da      	uxtb	r2, r3
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007454:	0b9b      	lsrs	r3, r3, #14
 8007456:	b2db      	uxtb	r3, r3
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	b2da      	uxtb	r2, r3
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007466:	0b5b      	lsrs	r3, r3, #13
 8007468:	b2db      	uxtb	r3, r3
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	b2da      	uxtb	r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007478:	0b1b      	lsrs	r3, r3, #12
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	b2da      	uxtb	r2, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2200      	movs	r2, #0
 800748a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	d163      	bne.n	800755c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007498:	009a      	lsls	r2, r3, #2
 800749a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800749e:	4013      	ands	r3, r2
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80074a4:	0f92      	lsrs	r2, r2, #30
 80074a6:	431a      	orrs	r2, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074b0:	0edb      	lsrs	r3, r3, #27
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074c2:	0e1b      	lsrs	r3, r3, #24
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074d4:	0d5b      	lsrs	r3, r3, #21
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074e6:	0c9b      	lsrs	r3, r3, #18
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074f8:	0bdb      	lsrs	r3, r3, #15
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	b2da      	uxtb	r2, r3
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	7e1b      	ldrb	r3, [r3, #24]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	3302      	adds	r3, #2
 800751c:	2201      	movs	r2, #1
 800751e:	fa02 f303 	lsl.w	r3, r2, r3
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007526:	fb03 f202 	mul.w	r2, r3, r2
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	7a1b      	ldrb	r3, [r3, #8]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	2201      	movs	r2, #1
 800753a:	409a      	lsls	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007548:	0a52      	lsrs	r2, r2, #9
 800754a:	fb03 f202 	mul.w	r2, r3, r2
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007558:	655a      	str	r2, [r3, #84]	@ 0x54
 800755a:	e031      	b.n	80075c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007560:	2b01      	cmp	r3, #1
 8007562:	d11d      	bne.n	80075a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007568:	041b      	lsls	r3, r3, #16
 800756a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007572:	0c1b      	lsrs	r3, r3, #16
 8007574:	431a      	orrs	r2, r3
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	3301      	adds	r3, #1
 8007580:	029a      	lsls	r2, r3, #10
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007594:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	655a      	str	r2, [r3, #84]	@ 0x54
 800759e:	e00f      	b.n	80075c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a58      	ldr	r2, [pc, #352]	@ (8007708 <HAL_SD_GetCardCSD+0x344>)
 80075a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e09d      	b.n	80076fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075c4:	0b9b      	lsrs	r3, r3, #14
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075d6:	09db      	lsrs	r3, r3, #7
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075f8:	0fdb      	lsrs	r3, r3, #31
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007604:	0f5b      	lsrs	r3, r3, #29
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	b2da      	uxtb	r2, r3
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007616:	0e9b      	lsrs	r3, r3, #26
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	b2da      	uxtb	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007628:	0d9b      	lsrs	r3, r3, #22
 800762a:	b2db      	uxtb	r3, r3
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	b2da      	uxtb	r2, r3
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800763a:	0d5b      	lsrs	r3, r3, #21
 800763c:	b2db      	uxtb	r3, r3
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	b2da      	uxtb	r2, r3
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007656:	0c1b      	lsrs	r3, r3, #16
 8007658:	b2db      	uxtb	r3, r3
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800766a:	0bdb      	lsrs	r3, r3, #15
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	b2da      	uxtb	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800767e:	0b9b      	lsrs	r3, r3, #14
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	b2da      	uxtb	r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007692:	0b5b      	lsrs	r3, r3, #13
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	b2da      	uxtb	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076a6:	0b1b      	lsrs	r3, r3, #12
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ba:	0a9b      	lsrs	r3, r3, #10
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ce:	0a1b      	lsrs	r3, r3, #8
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 0303 	and.w	r3, r3, #3
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076e2:	085b      	lsrs	r3, r3, #1
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	1fe00fff 	.word	0x1fe00fff

0800770c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b094      	sub	sp, #80	@ 0x50
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b03      	cmp	r3, #3
 8007726:	d101      	bne.n	800772c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0a7      	b.n	800787c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800772c:	f107 0308 	add.w	r3, r7, #8
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fb62 	bl	8007dfc <SD_SendSDStatus>
 8007738:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800773a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800773c:	2b00      	cmp	r3, #0
 800773e:	d011      	beq.n	8007764 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a4f      	ldr	r2, [pc, #316]	@ (8007884 <HAL_SD_GetCardStatus+0x178>)
 8007746:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800774c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007762:	e070      	b.n	8007846 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	099b      	lsrs	r3, r3, #6
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	b2da      	uxtb	r2, r3
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	b2db      	uxtb	r3, r3
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	b2da      	uxtb	r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	0a1b      	lsrs	r3, r3, #8
 8007788:	b29b      	uxth	r3, r3
 800778a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800778e:	b29a      	uxth	r2, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	0e1b      	lsrs	r3, r3, #24
 8007794:	b29b      	uxth	r3, r3
 8007796:	4313      	orrs	r3, r2
 8007798:	b29a      	uxth	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	061a      	lsls	r2, r3, #24
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80077aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80077b4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	0e1b      	lsrs	r3, r3, #24
 80077ba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	0a1b      	lsrs	r3, r3, #8
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	0d1b      	lsrs	r3, r3, #20
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	0c1b      	lsrs	r3, r3, #16
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4313      	orrs	r3, r2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	0a9b      	lsrs	r3, r3, #10
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007808:	b2da      	uxtb	r2, r3
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	0a1b      	lsrs	r3, r3, #8
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	b2da      	uxtb	r2, r3
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	091b      	lsrs	r3, r3, #4
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	b2da      	uxtb	r2, r3
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	b2da      	uxtb	r2, r3
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	0e1b      	lsrs	r3, r3, #24
 8007840:	b2da      	uxtb	r2, r3
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800784e:	4618      	mov	r0, r3
 8007850:	f002 fdf6 	bl	800a440 <SDMMC_CmdBlockLength>
 8007854:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00d      	beq.n	8007878 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a08      	ldr	r2, [pc, #32]	@ (8007884 <HAL_SD_GetCardStatus+0x178>)
 8007862:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007868:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8007878:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800787c:	4618      	mov	r0, r3
 800787e:	3750      	adds	r7, #80	@ 0x50
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	1fe00fff 	.word	0x1fe00fff

08007888 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80078e0:	b590      	push	{r4, r7, lr}
 80078e2:	b08d      	sub	sp, #52	@ 0x34
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2203      	movs	r2, #3
 80078f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d02e      	beq.n	800795e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007906:	d106      	bne.n	8007916 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800790c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	635a      	str	r2, [r3, #52]	@ 0x34
 8007914:	e029      	b.n	800796a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800791c:	d10a      	bne.n	8007934 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fb64 	bl	8007fec <SD_WideBus_Enable>
 8007924:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	635a      	str	r2, [r3, #52]	@ 0x34
 8007932:	e01a      	b.n	800796a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fba1 	bl	8008082 <SD_WideBus_Disable>
 8007940:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	635a      	str	r2, [r3, #52]	@ 0x34
 800794e:	e00c      	b.n	800796a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007954:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	635a      	str	r2, [r3, #52]	@ 0x34
 800795c:	e005      	b.n	800796a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007962:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a5f      	ldr	r2, [pc, #380]	@ (8007af4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007978:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007980:	e096      	b.n	8007ab0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007982:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007986:	f04f 0100 	mov.w	r1, #0
 800798a:	f7fd fe9d 	bl	80056c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800798e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 8083 	beq.w	8007a9e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	695a      	ldr	r2, [r3, #20]
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4950      	ldr	r1, [pc, #320]	@ (8007af8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80079b6:	fba1 1303 	umull	r1, r3, r1, r3
 80079ba:	0e1b      	lsrs	r3, r3, #24
 80079bc:	429a      	cmp	r2, r3
 80079be:	d303      	bcc.n	80079c8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	61bb      	str	r3, [r7, #24]
 80079c6:	e05a      	b.n	8007a7e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079d0:	d103      	bne.n	80079da <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	e051      	b.n	8007a7e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079e2:	d126      	bne.n	8007a32 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10e      	bne.n	8007a0a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	4a43      	ldr	r2, [pc, #268]	@ (8007afc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d906      	bls.n	8007a02 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	4a40      	ldr	r2, [pc, #256]	@ (8007af8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80079f8:	fba2 2303 	umull	r2, r3, r2, r3
 80079fc:	0e5b      	lsrs	r3, r3, #25
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	e03d      	b.n	8007a7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	e039      	b.n	8007a7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a16:	4a39      	ldr	r2, [pc, #228]	@ (8007afc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d906      	bls.n	8007a2a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	4a36      	ldr	r2, [pc, #216]	@ (8007af8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a20:	fba2 2303 	umull	r2, r3, r2, r3
 8007a24:	0e5b      	lsrs	r3, r3, #25
 8007a26:	61bb      	str	r3, [r7, #24]
 8007a28:	e029      	b.n	8007a7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	e025      	b.n	8007a7e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10e      	bne.n	8007a58 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	4a30      	ldr	r2, [pc, #192]	@ (8007b00 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d906      	bls.n	8007a50 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	4a2c      	ldr	r2, [pc, #176]	@ (8007af8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	0e1b      	lsrs	r3, r3, #24
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	e016      	b.n	8007a7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	e012      	b.n	8007a7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a64:	4a26      	ldr	r2, [pc, #152]	@ (8007b00 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d906      	bls.n	8007a78 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	4a22      	ldr	r2, [pc, #136]	@ (8007af8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a72:	0e1b      	lsrs	r3, r3, #24
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	e002      	b.n	8007a7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681c      	ldr	r4, [r3, #0]
 8007a82:	466a      	mov	r2, sp
 8007a84:	f107 0314 	add.w	r3, r7, #20
 8007a88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a8c:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a90:	f107 0308 	add.w	r3, r7, #8
 8007a94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a96:	4620      	mov	r0, r4
 8007a98:	f002 fbf4 	bl	800a284 <SDMMC_Init>
 8007a9c:	e008      	b.n	8007ab0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f002 fcc1 	bl	800a440 <SDMMC_CmdBlockLength>
 8007abe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00c      	beq.n	8007ae0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a0a      	ldr	r2, [pc, #40]	@ (8007af4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007acc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	372c      	adds	r7, #44	@ 0x2c
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd90      	pop	{r4, r7, pc}
 8007af4:	1fe00fff 	.word	0x1fe00fff
 8007af8:	55e63b89 	.word	0x55e63b89
 8007afc:	02faf080 	.word	0x02faf080
 8007b00:	017d7840 	.word	0x017d7840

08007b04 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007b10:	f107 030c 	add.w	r3, r7, #12
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa40 	bl	8007f9c <SD_SendStatus>
 8007b1c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	0a5b      	lsrs	r3, r3, #9
 8007b34:	f003 030f 	and.w	r3, r3, #15
 8007b38:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007b3a:	693b      	ldr	r3, [r7, #16]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b090      	sub	sp, #64	@ 0x40
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007b50:	f7fa fa50 	bl	8001ff4 <HAL_GetTick>
 8007b54:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f002 fbeb 	bl	800a336 <SDMMC_GetPowerState>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d102      	bne.n	8007b6c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b66:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007b6a:	e0b5      	b.n	8007cd8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d02e      	beq.n	8007bd2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f002 fe36 	bl	800a7ea <SDMMC_CmdSendCID>
 8007b7e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <SD_InitCard+0x46>
    {
      return errorstate;
 8007b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b88:	e0a6      	b.n	8007cd8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4618      	mov	r0, r3
 8007b92:	f002 fc16 	bl	800a3c2 <SDMMC_GetResponse>
 8007b96:	4602      	mov	r2, r0
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2104      	movs	r1, #4
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f002 fc0d 	bl	800a3c2 <SDMMC_GetResponse>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2108      	movs	r1, #8
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f002 fc04 	bl	800a3c2 <SDMMC_GetResponse>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	210c      	movs	r1, #12
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f002 fbfb 	bl	800a3c2 <SDMMC_GetResponse>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d01d      	beq.n	8007c16 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007bda:	e019      	b.n	8007c10 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f107 020a 	add.w	r2, r7, #10
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f002 fe3e 	bl	800a868 <SDMMC_CmdSetRelAdd>
 8007bec:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf6:	e06f      	b.n	8007cd8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007bf8:	f7fa f9fc 	bl	8001ff4 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d902      	bls.n	8007c10 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007c0a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c0e:	e063      	b.n	8007cd8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007c10:	897b      	ldrh	r3, [r7, #10]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0e2      	beq.n	8007bdc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d036      	beq.n	8007c8c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007c1e:	897b      	ldrh	r3, [r7, #10]
 8007c20:	461a      	mov	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f002 fdf8 	bl	800a828 <SDMMC_CmdSendCSD>
 8007c38:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <SD_InitCard+0x100>
    {
      return errorstate;
 8007c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c42:	e049      	b.n	8007cd8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f002 fbb9 	bl	800a3c2 <SDMMC_GetResponse>
 8007c50:	4602      	mov	r2, r0
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2104      	movs	r1, #4
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f002 fbb0 	bl	800a3c2 <SDMMC_GetResponse>
 8007c62:	4602      	mov	r2, r0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2108      	movs	r1, #8
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f002 fba7 	bl	800a3c2 <SDMMC_GetResponse>
 8007c74:	4602      	mov	r2, r0
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	210c      	movs	r1, #12
 8007c80:	4618      	mov	r0, r3
 8007c82:	f002 fb9e 	bl	800a3c2 <SDMMC_GetResponse>
 8007c86:	4602      	mov	r2, r0
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2104      	movs	r1, #4
 8007c92:	4618      	mov	r0, r3
 8007c94:	f002 fb95 	bl	800a3c2 <SDMMC_GetResponse>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	0d1a      	lsrs	r2, r3, #20
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007ca0:	f107 030c 	add.w	r3, r7, #12
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff fb8c 	bl	80073c4 <HAL_SD_GetCardCSD>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cb2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007cb6:	e00f      	b.n	8007cd8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f002 fca7 	bl	800a618 <SDMMC_CmdSelDesel>
 8007cca:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <SD_InitCard+0x192>
  {
    return errorstate;
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	e000      	b.n	8007cd8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3740      	adds	r7, #64	@ 0x40
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f002 fcb0 	bl	800a65e <SDMMC_CmdGoIdleState>
 8007cfe:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	e072      	b.n	8007df0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f002 fcc3 	bl	800a69a <SDMMC_CmdOperCond>
 8007d14:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d1c:	d10d      	bne.n	8007d3a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f002 fc98 	bl	800a65e <SDMMC_CmdGoIdleState>
 8007d2e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <SD_PowerON+0x60>
    {
      return errorstate;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	e05a      	b.n	8007df0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d137      	bne.n	8007db8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f002 fcc3 	bl	800a6da <SDMMC_CmdAppCommand>
 8007d54:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d02d      	beq.n	8007db8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d60:	e046      	b.n	8007df0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2100      	movs	r1, #0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f002 fcb6 	bl	800a6da <SDMMC_CmdAppCommand>
 8007d6e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <SD_PowerON+0x9a>
    {
      return errorstate;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	e03a      	b.n	8007df0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	491e      	ldr	r1, [pc, #120]	@ (8007df8 <SD_PowerON+0x118>)
 8007d80:	4618      	mov	r0, r3
 8007d82:	f002 fccd 	bl	800a720 <SDMMC_CmdAppOperCommand>
 8007d86:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d92:	e02d      	b.n	8007df0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f002 fb11 	bl	800a3c2 <SDMMC_GetResponse>
 8007da0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	0fdb      	lsrs	r3, r3, #31
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d101      	bne.n	8007dae <SD_PowerON+0xce>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e000      	b.n	8007db0 <SD_PowerON+0xd0>
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]

    count++;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	3301      	adds	r3, #1
 8007db6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d802      	bhi.n	8007dc8 <SD_PowerON+0xe8>
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0cc      	beq.n	8007d62 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d902      	bls.n	8007dd8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007dd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007dd6:	e00b      	b.n	8007df0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	c1100000 	.word	0xc1100000

08007dfc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	@ 0x30
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e06:	f7fa f8f5 	bl	8001ff4 <HAL_GetTick>
 8007e0a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f002 fad3 	bl	800a3c2 <SDMMC_GetResponse>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e26:	d102      	bne.n	8007e2e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e2c:	e0b0      	b.n	8007f90 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2140      	movs	r1, #64	@ 0x40
 8007e34:	4618      	mov	r0, r3
 8007e36:	f002 fb03 	bl	800a440 <SDMMC_CmdBlockLength>
 8007e3a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	e0a0      	b.n	8007f90 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e56:	041b      	lsls	r3, r3, #16
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f002 fc3d 	bl	800a6da <SDMMC_CmdAppCommand>
 8007e60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d005      	beq.n	8007e74 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	e08d      	b.n	8007f90 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e74:	f04f 33ff 	mov.w	r3, #4294967295
 8007e78:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007e7a:	2340      	movs	r3, #64	@ 0x40
 8007e7c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007e7e:	2360      	movs	r3, #96	@ 0x60
 8007e80:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e82:	2302      	movs	r3, #2
 8007e84:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f107 0208 	add.w	r2, r7, #8
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f002 faa5 	bl	800a3e8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 fd25 	bl	800a8f2 <SDMMC_CmdStatusRegister>
 8007ea8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d02b      	beq.n	8007f08 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	e069      	b.n	8007f90 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d013      	beq.n	8007ef2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007eca:	2300      	movs	r3, #0
 8007ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ece:	e00d      	b.n	8007eec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f002 f9ff 	bl	800a2d8 <SDMMC_ReadFIFO>
 8007eda:	4602      	mov	r2, r0
 8007edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ede:	601a      	str	r2, [r3, #0]
        pData++;
 8007ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8007ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee8:	3301      	adds	r3, #1
 8007eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eee:	2b07      	cmp	r3, #7
 8007ef0:	d9ee      	bls.n	8007ed0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ef2:	f7fa f87f 	bl	8001ff4 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f00:	d102      	bne.n	8007f08 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f02:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f06:	e043      	b.n	8007f90 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f0e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0d2      	beq.n	8007ebc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007f24:	2308      	movs	r3, #8
 8007f26:	e033      	b.n	8007f90 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f36:	2302      	movs	r3, #2
 8007f38:	e02a      	b.n	8007f90 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d017      	beq.n	8007f78 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007f48:	2320      	movs	r3, #32
 8007f4a:	e021      	b.n	8007f90 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f002 f9c1 	bl	800a2d8 <SDMMC_ReadFIFO>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5a:	601a      	str	r2, [r3, #0]
    pData++;
 8007f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5e:	3304      	adds	r3, #4
 8007f60:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f62:	f7fa f847 	bl	8001ff4 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f70:	d102      	bne.n	8007f78 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f76:	e00b      	b.n	8007f90 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e2      	bne.n	8007f4c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a03      	ldr	r2, [pc, #12]	@ (8007f98 <SD_SendSDStatus+0x19c>)
 8007f8c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3730      	adds	r7, #48	@ 0x30
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	18000f3a 	.word	0x18000f3a

08007f9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d102      	bne.n	8007fb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007fac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007fb0:	e018      	b.n	8007fe4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f002 fc74 	bl	800a8ac <SDMMC_CmdSendStatus>
 8007fc4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	e009      	b.n	8007fe4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f002 f9f3 	bl	800a3c2 <SDMMC_GetResponse>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2100      	movs	r1, #0
 8008002:	4618      	mov	r0, r3
 8008004:	f002 f9dd 	bl	800a3c2 <SDMMC_GetResponse>
 8008008:	4603      	mov	r3, r0
 800800a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800800e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008012:	d102      	bne.n	800801a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008014:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008018:	e02f      	b.n	800807a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800801a:	f107 030c 	add.w	r3, r7, #12
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f879 	bl	8008118 <SD_FindSCR>
 8008026:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	e023      	b.n	800807a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01c      	beq.n	8008076 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008044:	041b      	lsls	r3, r3, #16
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f002 fb46 	bl	800a6da <SDMMC_CmdAppCommand>
 800804e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	e00f      	b.n	800807a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2102      	movs	r1, #2
 8008060:	4618      	mov	r0, r3
 8008062:	f002 fb7d 	bl	800a760 <SDMMC_CmdBusWidth>
 8008066:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	e003      	b.n	800807a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008072:	2300      	movs	r3, #0
 8008074:	e001      	b.n	800807a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008076:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	2300      	movs	r3, #0
 8008090:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2100      	movs	r1, #0
 8008098:	4618      	mov	r0, r3
 800809a:	f002 f992 	bl	800a3c2 <SDMMC_GetResponse>
 800809e:	4603      	mov	r3, r0
 80080a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080a8:	d102      	bne.n	80080b0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80080ae:	e02f      	b.n	8008110 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080b0:	f107 030c 	add.w	r3, r7, #12
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f82e 	bl	8008118 <SD_FindSCR>
 80080bc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	e023      	b.n	8008110 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d01c      	beq.n	800810c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080da:	041b      	lsls	r3, r3, #16
 80080dc:	4619      	mov	r1, r3
 80080de:	4610      	mov	r0, r2
 80080e0:	f002 fafb 	bl	800a6da <SDMMC_CmdAppCommand>
 80080e4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	e00f      	b.n	8008110 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f002 fb32 	bl	800a760 <SDMMC_CmdBusWidth>
 80080fc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	e003      	b.n	8008110 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008108:	2300      	movs	r3, #0
 800810a:	e001      	b.n	8008110 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800810c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08e      	sub	sp, #56	@ 0x38
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008122:	f7f9 ff67 	bl	8001ff4 <HAL_GetTick>
 8008126:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800812c:	2300      	movs	r3, #0
 800812e:	60bb      	str	r3, [r7, #8]
 8008130:	2300      	movs	r3, #0
 8008132:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2108      	movs	r1, #8
 800813e:	4618      	mov	r0, r3
 8008140:	f002 f97e 	bl	800a440 <SDMMC_CmdBlockLength>
 8008144:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <SD_FindSCR+0x38>
  {
    return errorstate;
 800814c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814e:	e0ad      	b.n	80082ac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008158:	041b      	lsls	r3, r3, #16
 800815a:	4619      	mov	r1, r3
 800815c:	4610      	mov	r0, r2
 800815e:	f002 fabc 	bl	800a6da <SDMMC_CmdAppCommand>
 8008162:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <SD_FindSCR+0x56>
  {
    return errorstate;
 800816a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816c:	e09e      	b.n	80082ac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800816e:	f04f 33ff 	mov.w	r3, #4294967295
 8008172:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008174:	2308      	movs	r3, #8
 8008176:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008178:	2330      	movs	r3, #48	@ 0x30
 800817a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800817c:	2302      	movs	r3, #2
 800817e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008180:	2300      	movs	r3, #0
 8008182:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008184:	2301      	movs	r3, #1
 8008186:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f107 0210 	add.w	r2, r7, #16
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f002 f928 	bl	800a3e8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f002 fb02 	bl	800a7a6 <SDMMC_CmdSendSCR>
 80081a2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d027      	beq.n	80081fa <SD_FindSCR+0xe2>
  {
    return errorstate;
 80081aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ac:	e07e      	b.n	80082ac <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d113      	bne.n	80081e4 <SD_FindSCR+0xcc>
 80081bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d110      	bne.n	80081e4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f002 f886 	bl	800a2d8 <SDMMC_ReadFIFO>
 80081cc:	4603      	mov	r3, r0
 80081ce:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f002 f87f 	bl	800a2d8 <SDMMC_ReadFIFO>
 80081da:	4603      	mov	r3, r0
 80081dc:	60fb      	str	r3, [r7, #12]
      index++;
 80081de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e0:	3301      	adds	r3, #1
 80081e2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80081e4:	f7f9 ff06 	bl	8001ff4 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f2:	d102      	bne.n	80081fa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80081f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80081f8:	e058      	b.n	80082ac <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008200:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008204:	4013      	ands	r3, r2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0d1      	beq.n	80081ae <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008210:	f003 0308 	and.w	r3, r3, #8
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2208      	movs	r2, #8
 800821e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008220:	2308      	movs	r3, #8
 8008222:	e043      	b.n	80082ac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d005      	beq.n	800823e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2202      	movs	r2, #2
 8008238:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800823a:	2302      	movs	r3, #2
 800823c:	e036      	b.n	80082ac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2220      	movs	r2, #32
 8008252:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008254:	2320      	movs	r3, #32
 8008256:	e029      	b.n	80082ac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a15      	ldr	r2, [pc, #84]	@ (80082b4 <SD_FindSCR+0x19c>)
 800825e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	061a      	lsls	r2, r3, #24
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800826c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	0a1b      	lsrs	r3, r3, #8
 8008272:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008276:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	0e1b      	lsrs	r3, r3, #24
 800827c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800827e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008280:	601a      	str	r2, [r3, #0]
    scr++;
 8008282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008284:	3304      	adds	r3, #4
 8008286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	061a      	lsls	r2, r3, #24
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008294:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	0a1b      	lsrs	r3, r3, #8
 800829a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800829e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	0e1b      	lsrs	r3, r3, #24
 80082a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80082a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3738      	adds	r7, #56	@ 0x38
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	18000f3a 	.word	0x18000f3a

080082b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e10f      	b.n	80084ea <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a87      	ldr	r2, [pc, #540]	@ (80084f4 <HAL_SPI_Init+0x23c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d00f      	beq.n	80082fa <HAL_SPI_Init+0x42>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a86      	ldr	r2, [pc, #536]	@ (80084f8 <HAL_SPI_Init+0x240>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d00a      	beq.n	80082fa <HAL_SPI_Init+0x42>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a84      	ldr	r2, [pc, #528]	@ (80084fc <HAL_SPI_Init+0x244>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d005      	beq.n	80082fa <HAL_SPI_Init+0x42>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	2b0f      	cmp	r3, #15
 80082f4:	d901      	bls.n	80082fa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e0f7      	b.n	80084ea <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f900 	bl	8008500 <SPI_GetPacketSize>
 8008300:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a7b      	ldr	r2, [pc, #492]	@ (80084f4 <HAL_SPI_Init+0x23c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00c      	beq.n	8008326 <HAL_SPI_Init+0x6e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a79      	ldr	r2, [pc, #484]	@ (80084f8 <HAL_SPI_Init+0x240>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d007      	beq.n	8008326 <HAL_SPI_Init+0x6e>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a78      	ldr	r2, [pc, #480]	@ (80084fc <HAL_SPI_Init+0x244>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d002      	beq.n	8008326 <HAL_SPI_Init+0x6e>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b08      	cmp	r3, #8
 8008324:	d811      	bhi.n	800834a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800832a:	4a72      	ldr	r2, [pc, #456]	@ (80084f4 <HAL_SPI_Init+0x23c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d009      	beq.n	8008344 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a70      	ldr	r2, [pc, #448]	@ (80084f8 <HAL_SPI_Init+0x240>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d004      	beq.n	8008344 <HAL_SPI_Init+0x8c>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a6f      	ldr	r2, [pc, #444]	@ (80084fc <HAL_SPI_Init+0x244>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d104      	bne.n	800834e <HAL_SPI_Init+0x96>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b10      	cmp	r3, #16
 8008348:	d901      	bls.n	800834e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e0cd      	b.n	80084ea <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7f9 fa24 	bl	80017b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0201 	bic.w	r2, r2, #1
 800837e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800838a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008394:	d119      	bne.n	80083ca <HAL_SPI_Init+0x112>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800839e:	d103      	bne.n	80083a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d008      	beq.n	80083ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10c      	bne.n	80083ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80083b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083b8:	d107      	bne.n	80083ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80083c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00f      	beq.n	80083f6 <HAL_SPI_Init+0x13e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	2b06      	cmp	r3, #6
 80083dc:	d90b      	bls.n	80083f6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	e007      	b.n	8008406 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008404:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	69da      	ldr	r2, [r3, #28]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840e:	431a      	orrs	r2, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	431a      	orrs	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008418:	ea42 0103 	orr.w	r1, r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008466:	ea42 0103 	orr.w	r1, r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d113      	bne.n	80084a6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008490:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80084a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0201 	bic.w	r2, r2, #1
 80084b4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	40013000 	.word	0x40013000
 80084f8:	40003800 	.word	0x40003800
 80084fc:	40003c00 	.word	0x40003c00

08008500 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	3301      	adds	r3, #1
 8008510:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	3307      	adds	r3, #7
 800851e:	08db      	lsrs	r3, r3, #3
 8008520:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	fb02 f303 	mul.w	r3, r2, r3
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b082      	sub	sp, #8
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e042      	b.n	80085ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800854e:	2b00      	cmp	r3, #0
 8008550:	d106      	bne.n	8008560 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7f9 fa7c 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2224      	movs	r2, #36	@ 0x24
 8008564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f022 0201 	bic.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 fafd 	bl	8009b80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fc8e 	bl	8008ea8 <UART_SetConfig>
 800858c:	4603      	mov	r3, r0
 800858e:	2b01      	cmp	r3, #1
 8008590:	d101      	bne.n	8008596 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e01b      	b.n	80085ce <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0201 	orr.w	r2, r2, #1
 80085c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f001 fb7c 	bl	8009cc4 <UART_CheckIdleState>
 80085cc:	4603      	mov	r3, r0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b08a      	sub	sp, #40	@ 0x28
 80085da:	af02      	add	r7, sp, #8
 80085dc:	60f8      	str	r0, [r7, #12]
 80085de:	60b9      	str	r1, [r7, #8]
 80085e0:	603b      	str	r3, [r7, #0]
 80085e2:	4613      	mov	r3, r2
 80085e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d17b      	bne.n	80086e8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <HAL_UART_Transmit+0x26>
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e074      	b.n	80086ea <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2221      	movs	r2, #33	@ 0x21
 800860c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008610:	f7f9 fcf0 	bl	8001ff4 <HAL_GetTick>
 8008614:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	88fa      	ldrh	r2, [r7, #6]
 800861a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	88fa      	ldrh	r2, [r7, #6]
 8008622:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800862e:	d108      	bne.n	8008642 <HAL_UART_Transmit+0x6c>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008638:	2300      	movs	r3, #0
 800863a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	61bb      	str	r3, [r7, #24]
 8008640:	e003      	b.n	800864a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008646:	2300      	movs	r3, #0
 8008648:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800864a:	e030      	b.n	80086ae <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2200      	movs	r2, #0
 8008654:	2180      	movs	r1, #128	@ 0x80
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f001 fbde 	bl	8009e18 <UART_WaitOnFlagUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2220      	movs	r2, #32
 8008666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e03d      	b.n	80086ea <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10b      	bne.n	800868c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008682:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	3302      	adds	r3, #2
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	e007      	b.n	800869c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	781a      	ldrb	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	3301      	adds	r3, #1
 800869a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1c8      	bne.n	800864c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2200      	movs	r2, #0
 80086c2:	2140      	movs	r1, #64	@ 0x40
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f001 fba7 	bl	8009e18 <UART_WaitOnFlagUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e006      	b.n	80086ea <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	e000      	b.n	80086ea <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80086e8:	2302      	movs	r3, #2
  }
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3720      	adds	r7, #32
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b0ba      	sub	sp, #232	@ 0xe8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800871a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800871e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008722:	4013      	ands	r3, r2
 8008724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800872c:	2b00      	cmp	r3, #0
 800872e:	d11b      	bne.n	8008768 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008734:	f003 0320 	and.w	r3, r3, #32
 8008738:	2b00      	cmp	r3, #0
 800873a:	d015      	beq.n	8008768 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800873c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008740:	f003 0320 	and.w	r3, r3, #32
 8008744:	2b00      	cmp	r3, #0
 8008746:	d105      	bne.n	8008754 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800874c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d009      	beq.n	8008768 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 8377 	beq.w	8008e4c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	4798      	blx	r3
      }
      return;
 8008766:	e371      	b.n	8008e4c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 8123 	beq.w	80089b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008772:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008776:	4b8d      	ldr	r3, [pc, #564]	@ (80089ac <HAL_UART_IRQHandler+0x2b8>)
 8008778:	4013      	ands	r3, r2
 800877a:	2b00      	cmp	r3, #0
 800877c:	d106      	bne.n	800878c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800877e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008782:	4b8b      	ldr	r3, [pc, #556]	@ (80089b0 <HAL_UART_IRQHandler+0x2bc>)
 8008784:	4013      	ands	r3, r2
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 8116 	beq.w	80089b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800878c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d011      	beq.n	80087bc <HAL_UART_IRQHandler+0xc8>
 8008798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800879c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2201      	movs	r2, #1
 80087aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b2:	f043 0201 	orr.w	r2, r3, #1
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d011      	beq.n	80087ec <HAL_UART_IRQHandler+0xf8>
 80087c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00b      	beq.n	80087ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2202      	movs	r2, #2
 80087da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087e2:	f043 0204 	orr.w	r2, r3, #4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d011      	beq.n	800881c <HAL_UART_IRQHandler+0x128>
 80087f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00b      	beq.n	800881c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2204      	movs	r2, #4
 800880a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008812:	f043 0202 	orr.w	r2, r3, #2
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800881c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008820:	f003 0308 	and.w	r3, r3, #8
 8008824:	2b00      	cmp	r3, #0
 8008826:	d017      	beq.n	8008858 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800882c:	f003 0320 	and.w	r3, r3, #32
 8008830:	2b00      	cmp	r3, #0
 8008832:	d105      	bne.n	8008840 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008834:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008838:	4b5c      	ldr	r3, [pc, #368]	@ (80089ac <HAL_UART_IRQHandler+0x2b8>)
 800883a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2208      	movs	r2, #8
 8008846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800884e:	f043 0208 	orr.w	r2, r3, #8
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800885c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008860:	2b00      	cmp	r3, #0
 8008862:	d012      	beq.n	800888a <HAL_UART_IRQHandler+0x196>
 8008864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008868:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00c      	beq.n	800888a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008878:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008880:	f043 0220 	orr.w	r2, r3, #32
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 82dd 	beq.w	8008e50 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d013      	beq.n	80088ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d105      	bne.n	80088ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d007      	beq.n	80088ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088de:	2b40      	cmp	r3, #64	@ 0x40
 80088e0:	d005      	beq.n	80088ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d054      	beq.n	8008998 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fb00 	bl	8009ef4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fe:	2b40      	cmp	r3, #64	@ 0x40
 8008900:	d146      	bne.n	8008990 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800891c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3308      	adds	r3, #8
 800892a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800892e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800893a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1d9      	bne.n	8008902 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008954:	2b00      	cmp	r3, #0
 8008956:	d017      	beq.n	8008988 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895e:	4a15      	ldr	r2, [pc, #84]	@ (80089b4 <HAL_UART_IRQHandler+0x2c0>)
 8008960:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008968:	4618      	mov	r0, r3
 800896a:	f7fa f819 	bl	80029a0 <HAL_DMA_Abort_IT>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d019      	beq.n	80089a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800897a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008982:	4610      	mov	r0, r2
 8008984:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008986:	e00f      	b.n	80089a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fa77 	bl	8008e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800898e:	e00b      	b.n	80089a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fa73 	bl	8008e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008996:	e007      	b.n	80089a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fa6f 	bl	8008e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80089a6:	e253      	b.n	8008e50 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a8:	bf00      	nop
    return;
 80089aa:	e251      	b.n	8008e50 <HAL_UART_IRQHandler+0x75c>
 80089ac:	10000001 	.word	0x10000001
 80089b0:	04000120 	.word	0x04000120
 80089b4:	08009fc1 	.word	0x08009fc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089bc:	2b01      	cmp	r3, #1
 80089be:	f040 81e7 	bne.w	8008d90 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c6:	f003 0310 	and.w	r3, r3, #16
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 81e0 	beq.w	8008d90 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089d4:	f003 0310 	and.w	r3, r3, #16
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 81d9 	beq.w	8008d90 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2210      	movs	r2, #16
 80089e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f0:	2b40      	cmp	r3, #64	@ 0x40
 80089f2:	f040 8151 	bne.w	8008c98 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a96      	ldr	r2, [pc, #600]	@ (8008c58 <HAL_UART_IRQHandler+0x564>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d068      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a93      	ldr	r2, [pc, #588]	@ (8008c5c <HAL_UART_IRQHandler+0x568>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d061      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a91      	ldr	r2, [pc, #580]	@ (8008c60 <HAL_UART_IRQHandler+0x56c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d05a      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a8e      	ldr	r2, [pc, #568]	@ (8008c64 <HAL_UART_IRQHandler+0x570>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d053      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a8c      	ldr	r2, [pc, #560]	@ (8008c68 <HAL_UART_IRQHandler+0x574>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d04c      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a89      	ldr	r2, [pc, #548]	@ (8008c6c <HAL_UART_IRQHandler+0x578>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d045      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a87      	ldr	r2, [pc, #540]	@ (8008c70 <HAL_UART_IRQHandler+0x57c>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d03e      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a84      	ldr	r2, [pc, #528]	@ (8008c74 <HAL_UART_IRQHandler+0x580>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d037      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a82      	ldr	r2, [pc, #520]	@ (8008c78 <HAL_UART_IRQHandler+0x584>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d030      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a7f      	ldr	r2, [pc, #508]	@ (8008c7c <HAL_UART_IRQHandler+0x588>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d029      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a7d      	ldr	r2, [pc, #500]	@ (8008c80 <HAL_UART_IRQHandler+0x58c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d022      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a7a      	ldr	r2, [pc, #488]	@ (8008c84 <HAL_UART_IRQHandler+0x590>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d01b      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a78      	ldr	r2, [pc, #480]	@ (8008c88 <HAL_UART_IRQHandler+0x594>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d014      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a75      	ldr	r2, [pc, #468]	@ (8008c8c <HAL_UART_IRQHandler+0x598>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00d      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a73      	ldr	r2, [pc, #460]	@ (8008c90 <HAL_UART_IRQHandler+0x59c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d006      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x3e2>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a70      	ldr	r2, [pc, #448]	@ (8008c94 <HAL_UART_IRQHandler+0x5a0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d106      	bne.n	8008ae4 <HAL_UART_IRQHandler+0x3f0>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	e005      	b.n	8008af0 <HAL_UART_IRQHandler+0x3fc>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008af4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 81ab 	beq.w	8008e54 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	f080 81a3 	bcs.w	8008e54 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b24:	f000 8087 	beq.w	8008c36 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1da      	bne.n	8008b28 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3308      	adds	r3, #8
 8008b78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3308      	adds	r3, #8
 8008b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e1      	bne.n	8008b72 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008bd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008bd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e3      	bne.n	8008bae <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c04:	f023 0310 	bic.w	r3, r3, #16
 8008c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	461a      	mov	r2, r3
 8008c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c1e:	e841 2300 	strex	r3, r2, [r1]
 8008c22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e4      	bne.n	8008bf4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7f9 fb97 	bl	8002364 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f91d 	bl	8008e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c56:	e0fd      	b.n	8008e54 <HAL_UART_IRQHandler+0x760>
 8008c58:	40020010 	.word	0x40020010
 8008c5c:	40020028 	.word	0x40020028
 8008c60:	40020040 	.word	0x40020040
 8008c64:	40020058 	.word	0x40020058
 8008c68:	40020070 	.word	0x40020070
 8008c6c:	40020088 	.word	0x40020088
 8008c70:	400200a0 	.word	0x400200a0
 8008c74:	400200b8 	.word	0x400200b8
 8008c78:	40020410 	.word	0x40020410
 8008c7c:	40020428 	.word	0x40020428
 8008c80:	40020440 	.word	0x40020440
 8008c84:	40020458 	.word	0x40020458
 8008c88:	40020470 	.word	0x40020470
 8008c8c:	40020488 	.word	0x40020488
 8008c90:	400204a0 	.word	0x400204a0
 8008c94:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 80cf 	beq.w	8008e58 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008cba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f000 80ca 	beq.w	8008e58 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ce8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e4      	bne.n	8008cc4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3308      	adds	r3, #8
 8008d00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	623b      	str	r3, [r7, #32]
   return(result);
 8008d0a:	6a3a      	ldr	r2, [r7, #32]
 8008d0c:	4b55      	ldr	r3, [pc, #340]	@ (8008e64 <HAL_UART_IRQHandler+0x770>)
 8008d0e:	4013      	ands	r3, r2
 8008d10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	3308      	adds	r3, #8
 8008d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008d1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e3      	bne.n	8008cfa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	e853 3f00 	ldrex	r3, [r3]
 8008d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0310 	bic.w	r3, r3, #16
 8008d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008d68:	61fb      	str	r3, [r7, #28]
 8008d6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	69b9      	ldr	r1, [r7, #24]
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	617b      	str	r3, [r7, #20]
   return(result);
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e4      	bne.n	8008d46 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f881 	bl	8008e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d8e:	e063      	b.n	8008e58 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00e      	beq.n	8008dba <HAL_UART_IRQHandler+0x6c6>
 8008d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d008      	beq.n	8008dba <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008db0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 f945 	bl	800a042 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008db8:	e051      	b.n	8008e5e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d014      	beq.n	8008df0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d105      	bne.n	8008dde <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d008      	beq.n	8008df0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d03a      	beq.n	8008e5c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	4798      	blx	r3
    }
    return;
 8008dee:	e035      	b.n	8008e5c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d009      	beq.n	8008e10 <HAL_UART_IRQHandler+0x71c>
 8008dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 f8ef 	bl	8009fec <UART_EndTransmit_IT>
    return;
 8008e0e:	e026      	b.n	8008e5e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d009      	beq.n	8008e30 <HAL_UART_IRQHandler+0x73c>
 8008e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 f91e 	bl	800a06a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e2e:	e016      	b.n	8008e5e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d010      	beq.n	8008e5e <HAL_UART_IRQHandler+0x76a>
 8008e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	da0c      	bge.n	8008e5e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 f906 	bl	800a056 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e4a:	e008      	b.n	8008e5e <HAL_UART_IRQHandler+0x76a>
      return;
 8008e4c:	bf00      	nop
 8008e4e:	e006      	b.n	8008e5e <HAL_UART_IRQHandler+0x76a>
    return;
 8008e50:	bf00      	nop
 8008e52:	e004      	b.n	8008e5e <HAL_UART_IRQHandler+0x76a>
      return;
 8008e54:	bf00      	nop
 8008e56:	e002      	b.n	8008e5e <HAL_UART_IRQHandler+0x76a>
      return;
 8008e58:	bf00      	nop
 8008e5a:	e000      	b.n	8008e5e <HAL_UART_IRQHandler+0x76a>
    return;
 8008e5c:	bf00      	nop
  }
}
 8008e5e:	37e8      	adds	r7, #232	@ 0xe8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	effffffe 	.word	0xeffffffe

08008e68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008eac:	b092      	sub	sp, #72	@ 0x48
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	4bbe      	ldr	r3, [pc, #760]	@ (80091d0 <UART_SetConfig+0x328>)
 8008ed8:	4013      	ands	r3, r2
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	6812      	ldr	r2, [r2, #0]
 8008ede:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ee0:	430b      	orrs	r3, r1
 8008ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4ab3      	ldr	r2, [pc, #716]	@ (80091d4 <UART_SetConfig+0x32c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d004      	beq.n	8008f14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f10:	4313      	orrs	r3, r2
 8008f12:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	4baf      	ldr	r3, [pc, #700]	@ (80091d8 <UART_SetConfig+0x330>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	6812      	ldr	r2, [r2, #0]
 8008f22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f24:	430b      	orrs	r3, r1
 8008f26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2e:	f023 010f 	bic.w	r1, r3, #15
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4aa6      	ldr	r2, [pc, #664]	@ (80091dc <UART_SetConfig+0x334>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d177      	bne.n	8009038 <UART_SetConfig+0x190>
 8008f48:	4ba5      	ldr	r3, [pc, #660]	@ (80091e0 <UART_SetConfig+0x338>)
 8008f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f50:	2b28      	cmp	r3, #40	@ 0x28
 8008f52:	d86d      	bhi.n	8009030 <UART_SetConfig+0x188>
 8008f54:	a201      	add	r2, pc, #4	@ (adr r2, 8008f5c <UART_SetConfig+0xb4>)
 8008f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5a:	bf00      	nop
 8008f5c:	08009001 	.word	0x08009001
 8008f60:	08009031 	.word	0x08009031
 8008f64:	08009031 	.word	0x08009031
 8008f68:	08009031 	.word	0x08009031
 8008f6c:	08009031 	.word	0x08009031
 8008f70:	08009031 	.word	0x08009031
 8008f74:	08009031 	.word	0x08009031
 8008f78:	08009031 	.word	0x08009031
 8008f7c:	08009009 	.word	0x08009009
 8008f80:	08009031 	.word	0x08009031
 8008f84:	08009031 	.word	0x08009031
 8008f88:	08009031 	.word	0x08009031
 8008f8c:	08009031 	.word	0x08009031
 8008f90:	08009031 	.word	0x08009031
 8008f94:	08009031 	.word	0x08009031
 8008f98:	08009031 	.word	0x08009031
 8008f9c:	08009011 	.word	0x08009011
 8008fa0:	08009031 	.word	0x08009031
 8008fa4:	08009031 	.word	0x08009031
 8008fa8:	08009031 	.word	0x08009031
 8008fac:	08009031 	.word	0x08009031
 8008fb0:	08009031 	.word	0x08009031
 8008fb4:	08009031 	.word	0x08009031
 8008fb8:	08009031 	.word	0x08009031
 8008fbc:	08009019 	.word	0x08009019
 8008fc0:	08009031 	.word	0x08009031
 8008fc4:	08009031 	.word	0x08009031
 8008fc8:	08009031 	.word	0x08009031
 8008fcc:	08009031 	.word	0x08009031
 8008fd0:	08009031 	.word	0x08009031
 8008fd4:	08009031 	.word	0x08009031
 8008fd8:	08009031 	.word	0x08009031
 8008fdc:	08009021 	.word	0x08009021
 8008fe0:	08009031 	.word	0x08009031
 8008fe4:	08009031 	.word	0x08009031
 8008fe8:	08009031 	.word	0x08009031
 8008fec:	08009031 	.word	0x08009031
 8008ff0:	08009031 	.word	0x08009031
 8008ff4:	08009031 	.word	0x08009031
 8008ff8:	08009031 	.word	0x08009031
 8008ffc:	08009029 	.word	0x08009029
 8009000:	2301      	movs	r3, #1
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e326      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009008:	2304      	movs	r3, #4
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e322      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009010:	2308      	movs	r3, #8
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e31e      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009018:	2310      	movs	r3, #16
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e31a      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009020:	2320      	movs	r3, #32
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e316      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009028:	2340      	movs	r3, #64	@ 0x40
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e312      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009030:	2380      	movs	r3, #128	@ 0x80
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e30e      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a69      	ldr	r2, [pc, #420]	@ (80091e4 <UART_SetConfig+0x33c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d130      	bne.n	80090a4 <UART_SetConfig+0x1fc>
 8009042:	4b67      	ldr	r3, [pc, #412]	@ (80091e0 <UART_SetConfig+0x338>)
 8009044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009046:	f003 0307 	and.w	r3, r3, #7
 800904a:	2b05      	cmp	r3, #5
 800904c:	d826      	bhi.n	800909c <UART_SetConfig+0x1f4>
 800904e:	a201      	add	r2, pc, #4	@ (adr r2, 8009054 <UART_SetConfig+0x1ac>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	0800906d 	.word	0x0800906d
 8009058:	08009075 	.word	0x08009075
 800905c:	0800907d 	.word	0x0800907d
 8009060:	08009085 	.word	0x08009085
 8009064:	0800908d 	.word	0x0800908d
 8009068:	08009095 	.word	0x08009095
 800906c:	2300      	movs	r3, #0
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e2f0      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009074:	2304      	movs	r3, #4
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e2ec      	b.n	8009656 <UART_SetConfig+0x7ae>
 800907c:	2308      	movs	r3, #8
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e2e8      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009084:	2310      	movs	r3, #16
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e2e4      	b.n	8009656 <UART_SetConfig+0x7ae>
 800908c:	2320      	movs	r3, #32
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e2e0      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009094:	2340      	movs	r3, #64	@ 0x40
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909a:	e2dc      	b.n	8009656 <UART_SetConfig+0x7ae>
 800909c:	2380      	movs	r3, #128	@ 0x80
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a2:	e2d8      	b.n	8009656 <UART_SetConfig+0x7ae>
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a4f      	ldr	r2, [pc, #316]	@ (80091e8 <UART_SetConfig+0x340>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d130      	bne.n	8009110 <UART_SetConfig+0x268>
 80090ae:	4b4c      	ldr	r3, [pc, #304]	@ (80091e0 <UART_SetConfig+0x338>)
 80090b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	2b05      	cmp	r3, #5
 80090b8:	d826      	bhi.n	8009108 <UART_SetConfig+0x260>
 80090ba:	a201      	add	r2, pc, #4	@ (adr r2, 80090c0 <UART_SetConfig+0x218>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	080090d9 	.word	0x080090d9
 80090c4:	080090e1 	.word	0x080090e1
 80090c8:	080090e9 	.word	0x080090e9
 80090cc:	080090f1 	.word	0x080090f1
 80090d0:	080090f9 	.word	0x080090f9
 80090d4:	08009101 	.word	0x08009101
 80090d8:	2300      	movs	r3, #0
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e2ba      	b.n	8009656 <UART_SetConfig+0x7ae>
 80090e0:	2304      	movs	r3, #4
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e2b6      	b.n	8009656 <UART_SetConfig+0x7ae>
 80090e8:	2308      	movs	r3, #8
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e2b2      	b.n	8009656 <UART_SetConfig+0x7ae>
 80090f0:	2310      	movs	r3, #16
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e2ae      	b.n	8009656 <UART_SetConfig+0x7ae>
 80090f8:	2320      	movs	r3, #32
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e2aa      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009100:	2340      	movs	r3, #64	@ 0x40
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e2a6      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009108:	2380      	movs	r3, #128	@ 0x80
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e2a2      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a35      	ldr	r2, [pc, #212]	@ (80091ec <UART_SetConfig+0x344>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d130      	bne.n	800917c <UART_SetConfig+0x2d4>
 800911a:	4b31      	ldr	r3, [pc, #196]	@ (80091e0 <UART_SetConfig+0x338>)
 800911c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	2b05      	cmp	r3, #5
 8009124:	d826      	bhi.n	8009174 <UART_SetConfig+0x2cc>
 8009126:	a201      	add	r2, pc, #4	@ (adr r2, 800912c <UART_SetConfig+0x284>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	08009145 	.word	0x08009145
 8009130:	0800914d 	.word	0x0800914d
 8009134:	08009155 	.word	0x08009155
 8009138:	0800915d 	.word	0x0800915d
 800913c:	08009165 	.word	0x08009165
 8009140:	0800916d 	.word	0x0800916d
 8009144:	2300      	movs	r3, #0
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e284      	b.n	8009656 <UART_SetConfig+0x7ae>
 800914c:	2304      	movs	r3, #4
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e280      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009154:	2308      	movs	r3, #8
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e27c      	b.n	8009656 <UART_SetConfig+0x7ae>
 800915c:	2310      	movs	r3, #16
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e278      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009164:	2320      	movs	r3, #32
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e274      	b.n	8009656 <UART_SetConfig+0x7ae>
 800916c:	2340      	movs	r3, #64	@ 0x40
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009172:	e270      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009174:	2380      	movs	r3, #128	@ 0x80
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917a:	e26c      	b.n	8009656 <UART_SetConfig+0x7ae>
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a1b      	ldr	r2, [pc, #108]	@ (80091f0 <UART_SetConfig+0x348>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d142      	bne.n	800920c <UART_SetConfig+0x364>
 8009186:	4b16      	ldr	r3, [pc, #88]	@ (80091e0 <UART_SetConfig+0x338>)
 8009188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	2b05      	cmp	r3, #5
 8009190:	d838      	bhi.n	8009204 <UART_SetConfig+0x35c>
 8009192:	a201      	add	r2, pc, #4	@ (adr r2, 8009198 <UART_SetConfig+0x2f0>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091b1 	.word	0x080091b1
 800919c:	080091b9 	.word	0x080091b9
 80091a0:	080091c1 	.word	0x080091c1
 80091a4:	080091c9 	.word	0x080091c9
 80091a8:	080091f5 	.word	0x080091f5
 80091ac:	080091fd 	.word	0x080091fd
 80091b0:	2300      	movs	r3, #0
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e24e      	b.n	8009656 <UART_SetConfig+0x7ae>
 80091b8:	2304      	movs	r3, #4
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e24a      	b.n	8009656 <UART_SetConfig+0x7ae>
 80091c0:	2308      	movs	r3, #8
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e246      	b.n	8009656 <UART_SetConfig+0x7ae>
 80091c8:	2310      	movs	r3, #16
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e242      	b.n	8009656 <UART_SetConfig+0x7ae>
 80091d0:	cfff69f3 	.word	0xcfff69f3
 80091d4:	58000c00 	.word	0x58000c00
 80091d8:	11fff4ff 	.word	0x11fff4ff
 80091dc:	40011000 	.word	0x40011000
 80091e0:	58024400 	.word	0x58024400
 80091e4:	40004400 	.word	0x40004400
 80091e8:	40004800 	.word	0x40004800
 80091ec:	40004c00 	.word	0x40004c00
 80091f0:	40005000 	.word	0x40005000
 80091f4:	2320      	movs	r3, #32
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fa:	e22c      	b.n	8009656 <UART_SetConfig+0x7ae>
 80091fc:	2340      	movs	r3, #64	@ 0x40
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009202:	e228      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009204:	2380      	movs	r3, #128	@ 0x80
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e224      	b.n	8009656 <UART_SetConfig+0x7ae>
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4ab1      	ldr	r2, [pc, #708]	@ (80094d8 <UART_SetConfig+0x630>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d176      	bne.n	8009304 <UART_SetConfig+0x45c>
 8009216:	4bb1      	ldr	r3, [pc, #708]	@ (80094dc <UART_SetConfig+0x634>)
 8009218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800921a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800921e:	2b28      	cmp	r3, #40	@ 0x28
 8009220:	d86c      	bhi.n	80092fc <UART_SetConfig+0x454>
 8009222:	a201      	add	r2, pc, #4	@ (adr r2, 8009228 <UART_SetConfig+0x380>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	080092cd 	.word	0x080092cd
 800922c:	080092fd 	.word	0x080092fd
 8009230:	080092fd 	.word	0x080092fd
 8009234:	080092fd 	.word	0x080092fd
 8009238:	080092fd 	.word	0x080092fd
 800923c:	080092fd 	.word	0x080092fd
 8009240:	080092fd 	.word	0x080092fd
 8009244:	080092fd 	.word	0x080092fd
 8009248:	080092d5 	.word	0x080092d5
 800924c:	080092fd 	.word	0x080092fd
 8009250:	080092fd 	.word	0x080092fd
 8009254:	080092fd 	.word	0x080092fd
 8009258:	080092fd 	.word	0x080092fd
 800925c:	080092fd 	.word	0x080092fd
 8009260:	080092fd 	.word	0x080092fd
 8009264:	080092fd 	.word	0x080092fd
 8009268:	080092dd 	.word	0x080092dd
 800926c:	080092fd 	.word	0x080092fd
 8009270:	080092fd 	.word	0x080092fd
 8009274:	080092fd 	.word	0x080092fd
 8009278:	080092fd 	.word	0x080092fd
 800927c:	080092fd 	.word	0x080092fd
 8009280:	080092fd 	.word	0x080092fd
 8009284:	080092fd 	.word	0x080092fd
 8009288:	080092e5 	.word	0x080092e5
 800928c:	080092fd 	.word	0x080092fd
 8009290:	080092fd 	.word	0x080092fd
 8009294:	080092fd 	.word	0x080092fd
 8009298:	080092fd 	.word	0x080092fd
 800929c:	080092fd 	.word	0x080092fd
 80092a0:	080092fd 	.word	0x080092fd
 80092a4:	080092fd 	.word	0x080092fd
 80092a8:	080092ed 	.word	0x080092ed
 80092ac:	080092fd 	.word	0x080092fd
 80092b0:	080092fd 	.word	0x080092fd
 80092b4:	080092fd 	.word	0x080092fd
 80092b8:	080092fd 	.word	0x080092fd
 80092bc:	080092fd 	.word	0x080092fd
 80092c0:	080092fd 	.word	0x080092fd
 80092c4:	080092fd 	.word	0x080092fd
 80092c8:	080092f5 	.word	0x080092f5
 80092cc:	2301      	movs	r3, #1
 80092ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092d2:	e1c0      	b.n	8009656 <UART_SetConfig+0x7ae>
 80092d4:	2304      	movs	r3, #4
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092da:	e1bc      	b.n	8009656 <UART_SetConfig+0x7ae>
 80092dc:	2308      	movs	r3, #8
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e1b8      	b.n	8009656 <UART_SetConfig+0x7ae>
 80092e4:	2310      	movs	r3, #16
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e1b4      	b.n	8009656 <UART_SetConfig+0x7ae>
 80092ec:	2320      	movs	r3, #32
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e1b0      	b.n	8009656 <UART_SetConfig+0x7ae>
 80092f4:	2340      	movs	r3, #64	@ 0x40
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fa:	e1ac      	b.n	8009656 <UART_SetConfig+0x7ae>
 80092fc:	2380      	movs	r3, #128	@ 0x80
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e1a8      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a75      	ldr	r2, [pc, #468]	@ (80094e0 <UART_SetConfig+0x638>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d130      	bne.n	8009370 <UART_SetConfig+0x4c8>
 800930e:	4b73      	ldr	r3, [pc, #460]	@ (80094dc <UART_SetConfig+0x634>)
 8009310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	2b05      	cmp	r3, #5
 8009318:	d826      	bhi.n	8009368 <UART_SetConfig+0x4c0>
 800931a:	a201      	add	r2, pc, #4	@ (adr r2, 8009320 <UART_SetConfig+0x478>)
 800931c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009320:	08009339 	.word	0x08009339
 8009324:	08009341 	.word	0x08009341
 8009328:	08009349 	.word	0x08009349
 800932c:	08009351 	.word	0x08009351
 8009330:	08009359 	.word	0x08009359
 8009334:	08009361 	.word	0x08009361
 8009338:	2300      	movs	r3, #0
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933e:	e18a      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009340:	2304      	movs	r3, #4
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009346:	e186      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009348:	2308      	movs	r3, #8
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e182      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009350:	2310      	movs	r3, #16
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e17e      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009358:	2320      	movs	r3, #32
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e17a      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009360:	2340      	movs	r3, #64	@ 0x40
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009366:	e176      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009368:	2380      	movs	r3, #128	@ 0x80
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936e:	e172      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a5b      	ldr	r2, [pc, #364]	@ (80094e4 <UART_SetConfig+0x63c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d130      	bne.n	80093dc <UART_SetConfig+0x534>
 800937a:	4b58      	ldr	r3, [pc, #352]	@ (80094dc <UART_SetConfig+0x634>)
 800937c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	2b05      	cmp	r3, #5
 8009384:	d826      	bhi.n	80093d4 <UART_SetConfig+0x52c>
 8009386:	a201      	add	r2, pc, #4	@ (adr r2, 800938c <UART_SetConfig+0x4e4>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	080093a5 	.word	0x080093a5
 8009390:	080093ad 	.word	0x080093ad
 8009394:	080093b5 	.word	0x080093b5
 8009398:	080093bd 	.word	0x080093bd
 800939c:	080093c5 	.word	0x080093c5
 80093a0:	080093cd 	.word	0x080093cd
 80093a4:	2300      	movs	r3, #0
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e154      	b.n	8009656 <UART_SetConfig+0x7ae>
 80093ac:	2304      	movs	r3, #4
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e150      	b.n	8009656 <UART_SetConfig+0x7ae>
 80093b4:	2308      	movs	r3, #8
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e14c      	b.n	8009656 <UART_SetConfig+0x7ae>
 80093bc:	2310      	movs	r3, #16
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c2:	e148      	b.n	8009656 <UART_SetConfig+0x7ae>
 80093c4:	2320      	movs	r3, #32
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ca:	e144      	b.n	8009656 <UART_SetConfig+0x7ae>
 80093cc:	2340      	movs	r3, #64	@ 0x40
 80093ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d2:	e140      	b.n	8009656 <UART_SetConfig+0x7ae>
 80093d4:	2380      	movs	r3, #128	@ 0x80
 80093d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093da:	e13c      	b.n	8009656 <UART_SetConfig+0x7ae>
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a41      	ldr	r2, [pc, #260]	@ (80094e8 <UART_SetConfig+0x640>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	f040 8082 	bne.w	80094ec <UART_SetConfig+0x644>
 80093e8:	4b3c      	ldr	r3, [pc, #240]	@ (80094dc <UART_SetConfig+0x634>)
 80093ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093f0:	2b28      	cmp	r3, #40	@ 0x28
 80093f2:	d86d      	bhi.n	80094d0 <UART_SetConfig+0x628>
 80093f4:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <UART_SetConfig+0x554>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	080094a1 	.word	0x080094a1
 8009400:	080094d1 	.word	0x080094d1
 8009404:	080094d1 	.word	0x080094d1
 8009408:	080094d1 	.word	0x080094d1
 800940c:	080094d1 	.word	0x080094d1
 8009410:	080094d1 	.word	0x080094d1
 8009414:	080094d1 	.word	0x080094d1
 8009418:	080094d1 	.word	0x080094d1
 800941c:	080094a9 	.word	0x080094a9
 8009420:	080094d1 	.word	0x080094d1
 8009424:	080094d1 	.word	0x080094d1
 8009428:	080094d1 	.word	0x080094d1
 800942c:	080094d1 	.word	0x080094d1
 8009430:	080094d1 	.word	0x080094d1
 8009434:	080094d1 	.word	0x080094d1
 8009438:	080094d1 	.word	0x080094d1
 800943c:	080094b1 	.word	0x080094b1
 8009440:	080094d1 	.word	0x080094d1
 8009444:	080094d1 	.word	0x080094d1
 8009448:	080094d1 	.word	0x080094d1
 800944c:	080094d1 	.word	0x080094d1
 8009450:	080094d1 	.word	0x080094d1
 8009454:	080094d1 	.word	0x080094d1
 8009458:	080094d1 	.word	0x080094d1
 800945c:	080094b9 	.word	0x080094b9
 8009460:	080094d1 	.word	0x080094d1
 8009464:	080094d1 	.word	0x080094d1
 8009468:	080094d1 	.word	0x080094d1
 800946c:	080094d1 	.word	0x080094d1
 8009470:	080094d1 	.word	0x080094d1
 8009474:	080094d1 	.word	0x080094d1
 8009478:	080094d1 	.word	0x080094d1
 800947c:	080094c1 	.word	0x080094c1
 8009480:	080094d1 	.word	0x080094d1
 8009484:	080094d1 	.word	0x080094d1
 8009488:	080094d1 	.word	0x080094d1
 800948c:	080094d1 	.word	0x080094d1
 8009490:	080094d1 	.word	0x080094d1
 8009494:	080094d1 	.word	0x080094d1
 8009498:	080094d1 	.word	0x080094d1
 800949c:	080094c9 	.word	0x080094c9
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e0d6      	b.n	8009656 <UART_SetConfig+0x7ae>
 80094a8:	2304      	movs	r3, #4
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e0d2      	b.n	8009656 <UART_SetConfig+0x7ae>
 80094b0:	2308      	movs	r3, #8
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e0ce      	b.n	8009656 <UART_SetConfig+0x7ae>
 80094b8:	2310      	movs	r3, #16
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e0ca      	b.n	8009656 <UART_SetConfig+0x7ae>
 80094c0:	2320      	movs	r3, #32
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e0c6      	b.n	8009656 <UART_SetConfig+0x7ae>
 80094c8:	2340      	movs	r3, #64	@ 0x40
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e0c2      	b.n	8009656 <UART_SetConfig+0x7ae>
 80094d0:	2380      	movs	r3, #128	@ 0x80
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e0be      	b.n	8009656 <UART_SetConfig+0x7ae>
 80094d8:	40011400 	.word	0x40011400
 80094dc:	58024400 	.word	0x58024400
 80094e0:	40007800 	.word	0x40007800
 80094e4:	40007c00 	.word	0x40007c00
 80094e8:	40011800 	.word	0x40011800
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4aad      	ldr	r2, [pc, #692]	@ (80097a8 <UART_SetConfig+0x900>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d176      	bne.n	80095e4 <UART_SetConfig+0x73c>
 80094f6:	4bad      	ldr	r3, [pc, #692]	@ (80097ac <UART_SetConfig+0x904>)
 80094f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094fe:	2b28      	cmp	r3, #40	@ 0x28
 8009500:	d86c      	bhi.n	80095dc <UART_SetConfig+0x734>
 8009502:	a201      	add	r2, pc, #4	@ (adr r2, 8009508 <UART_SetConfig+0x660>)
 8009504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009508:	080095ad 	.word	0x080095ad
 800950c:	080095dd 	.word	0x080095dd
 8009510:	080095dd 	.word	0x080095dd
 8009514:	080095dd 	.word	0x080095dd
 8009518:	080095dd 	.word	0x080095dd
 800951c:	080095dd 	.word	0x080095dd
 8009520:	080095dd 	.word	0x080095dd
 8009524:	080095dd 	.word	0x080095dd
 8009528:	080095b5 	.word	0x080095b5
 800952c:	080095dd 	.word	0x080095dd
 8009530:	080095dd 	.word	0x080095dd
 8009534:	080095dd 	.word	0x080095dd
 8009538:	080095dd 	.word	0x080095dd
 800953c:	080095dd 	.word	0x080095dd
 8009540:	080095dd 	.word	0x080095dd
 8009544:	080095dd 	.word	0x080095dd
 8009548:	080095bd 	.word	0x080095bd
 800954c:	080095dd 	.word	0x080095dd
 8009550:	080095dd 	.word	0x080095dd
 8009554:	080095dd 	.word	0x080095dd
 8009558:	080095dd 	.word	0x080095dd
 800955c:	080095dd 	.word	0x080095dd
 8009560:	080095dd 	.word	0x080095dd
 8009564:	080095dd 	.word	0x080095dd
 8009568:	080095c5 	.word	0x080095c5
 800956c:	080095dd 	.word	0x080095dd
 8009570:	080095dd 	.word	0x080095dd
 8009574:	080095dd 	.word	0x080095dd
 8009578:	080095dd 	.word	0x080095dd
 800957c:	080095dd 	.word	0x080095dd
 8009580:	080095dd 	.word	0x080095dd
 8009584:	080095dd 	.word	0x080095dd
 8009588:	080095cd 	.word	0x080095cd
 800958c:	080095dd 	.word	0x080095dd
 8009590:	080095dd 	.word	0x080095dd
 8009594:	080095dd 	.word	0x080095dd
 8009598:	080095dd 	.word	0x080095dd
 800959c:	080095dd 	.word	0x080095dd
 80095a0:	080095dd 	.word	0x080095dd
 80095a4:	080095dd 	.word	0x080095dd
 80095a8:	080095d5 	.word	0x080095d5
 80095ac:	2301      	movs	r3, #1
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b2:	e050      	b.n	8009656 <UART_SetConfig+0x7ae>
 80095b4:	2304      	movs	r3, #4
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ba:	e04c      	b.n	8009656 <UART_SetConfig+0x7ae>
 80095bc:	2308      	movs	r3, #8
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c2:	e048      	b.n	8009656 <UART_SetConfig+0x7ae>
 80095c4:	2310      	movs	r3, #16
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e044      	b.n	8009656 <UART_SetConfig+0x7ae>
 80095cc:	2320      	movs	r3, #32
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d2:	e040      	b.n	8009656 <UART_SetConfig+0x7ae>
 80095d4:	2340      	movs	r3, #64	@ 0x40
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e03c      	b.n	8009656 <UART_SetConfig+0x7ae>
 80095dc:	2380      	movs	r3, #128	@ 0x80
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e038      	b.n	8009656 <UART_SetConfig+0x7ae>
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a71      	ldr	r2, [pc, #452]	@ (80097b0 <UART_SetConfig+0x908>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d130      	bne.n	8009650 <UART_SetConfig+0x7a8>
 80095ee:	4b6f      	ldr	r3, [pc, #444]	@ (80097ac <UART_SetConfig+0x904>)
 80095f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	2b05      	cmp	r3, #5
 80095f8:	d826      	bhi.n	8009648 <UART_SetConfig+0x7a0>
 80095fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009600 <UART_SetConfig+0x758>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009619 	.word	0x08009619
 8009604:	08009621 	.word	0x08009621
 8009608:	08009629 	.word	0x08009629
 800960c:	08009631 	.word	0x08009631
 8009610:	08009639 	.word	0x08009639
 8009614:	08009641 	.word	0x08009641
 8009618:	2302      	movs	r3, #2
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961e:	e01a      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009620:	2304      	movs	r3, #4
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009626:	e016      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009628:	2308      	movs	r3, #8
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962e:	e012      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009630:	2310      	movs	r3, #16
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e00e      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009638:	2320      	movs	r3, #32
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963e:	e00a      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009640:	2340      	movs	r3, #64	@ 0x40
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009646:	e006      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009648:	2380      	movs	r3, #128	@ 0x80
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964e:	e002      	b.n	8009656 <UART_SetConfig+0x7ae>
 8009650:	2380      	movs	r3, #128	@ 0x80
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a55      	ldr	r2, [pc, #340]	@ (80097b0 <UART_SetConfig+0x908>)
 800965c:	4293      	cmp	r3, r2
 800965e:	f040 80f8 	bne.w	8009852 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009662:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009666:	2b20      	cmp	r3, #32
 8009668:	dc46      	bgt.n	80096f8 <UART_SetConfig+0x850>
 800966a:	2b02      	cmp	r3, #2
 800966c:	db75      	blt.n	800975a <UART_SetConfig+0x8b2>
 800966e:	3b02      	subs	r3, #2
 8009670:	2b1e      	cmp	r3, #30
 8009672:	d872      	bhi.n	800975a <UART_SetConfig+0x8b2>
 8009674:	a201      	add	r2, pc, #4	@ (adr r2, 800967c <UART_SetConfig+0x7d4>)
 8009676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967a:	bf00      	nop
 800967c:	080096ff 	.word	0x080096ff
 8009680:	0800975b 	.word	0x0800975b
 8009684:	08009707 	.word	0x08009707
 8009688:	0800975b 	.word	0x0800975b
 800968c:	0800975b 	.word	0x0800975b
 8009690:	0800975b 	.word	0x0800975b
 8009694:	08009717 	.word	0x08009717
 8009698:	0800975b 	.word	0x0800975b
 800969c:	0800975b 	.word	0x0800975b
 80096a0:	0800975b 	.word	0x0800975b
 80096a4:	0800975b 	.word	0x0800975b
 80096a8:	0800975b 	.word	0x0800975b
 80096ac:	0800975b 	.word	0x0800975b
 80096b0:	0800975b 	.word	0x0800975b
 80096b4:	08009727 	.word	0x08009727
 80096b8:	0800975b 	.word	0x0800975b
 80096bc:	0800975b 	.word	0x0800975b
 80096c0:	0800975b 	.word	0x0800975b
 80096c4:	0800975b 	.word	0x0800975b
 80096c8:	0800975b 	.word	0x0800975b
 80096cc:	0800975b 	.word	0x0800975b
 80096d0:	0800975b 	.word	0x0800975b
 80096d4:	0800975b 	.word	0x0800975b
 80096d8:	0800975b 	.word	0x0800975b
 80096dc:	0800975b 	.word	0x0800975b
 80096e0:	0800975b 	.word	0x0800975b
 80096e4:	0800975b 	.word	0x0800975b
 80096e8:	0800975b 	.word	0x0800975b
 80096ec:	0800975b 	.word	0x0800975b
 80096f0:	0800975b 	.word	0x0800975b
 80096f4:	0800974d 	.word	0x0800974d
 80096f8:	2b40      	cmp	r3, #64	@ 0x40
 80096fa:	d02a      	beq.n	8009752 <UART_SetConfig+0x8aa>
 80096fc:	e02d      	b.n	800975a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096fe:	f7fc fcb5 	bl	800606c <HAL_RCCEx_GetD3PCLK1Freq>
 8009702:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009704:	e02f      	b.n	8009766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800970a:	4618      	mov	r0, r3
 800970c:	f7fc fcc4 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009714:	e027      	b.n	8009766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009716:	f107 0318 	add.w	r3, r7, #24
 800971a:	4618      	mov	r0, r3
 800971c:	f7fc fe10 	bl	8006340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009724:	e01f      	b.n	8009766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009726:	4b21      	ldr	r3, [pc, #132]	@ (80097ac <UART_SetConfig+0x904>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0320 	and.w	r3, r3, #32
 800972e:	2b00      	cmp	r3, #0
 8009730:	d009      	beq.n	8009746 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009732:	4b1e      	ldr	r3, [pc, #120]	@ (80097ac <UART_SetConfig+0x904>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	08db      	lsrs	r3, r3, #3
 8009738:	f003 0303 	and.w	r3, r3, #3
 800973c:	4a1d      	ldr	r2, [pc, #116]	@ (80097b4 <UART_SetConfig+0x90c>)
 800973e:	fa22 f303 	lsr.w	r3, r2, r3
 8009742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009744:	e00f      	b.n	8009766 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009746:	4b1b      	ldr	r3, [pc, #108]	@ (80097b4 <UART_SetConfig+0x90c>)
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800974a:	e00c      	b.n	8009766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800974c:	4b1a      	ldr	r3, [pc, #104]	@ (80097b8 <UART_SetConfig+0x910>)
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009750:	e009      	b.n	8009766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009758:	e005      	b.n	8009766 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009764:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 81ee 	beq.w	8009b4a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009772:	4a12      	ldr	r2, [pc, #72]	@ (80097bc <UART_SetConfig+0x914>)
 8009774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009778:	461a      	mov	r2, r3
 800977a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009780:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	4613      	mov	r3, r2
 8009788:	005b      	lsls	r3, r3, #1
 800978a:	4413      	add	r3, r2
 800978c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800978e:	429a      	cmp	r2, r3
 8009790:	d305      	bcc.n	800979e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800979a:	429a      	cmp	r2, r3
 800979c:	d910      	bls.n	80097c0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80097a4:	e1d1      	b.n	8009b4a <UART_SetConfig+0xca2>
 80097a6:	bf00      	nop
 80097a8:	40011c00 	.word	0x40011c00
 80097ac:	58024400 	.word	0x58024400
 80097b0:	58000c00 	.word	0x58000c00
 80097b4:	03d09000 	.word	0x03d09000
 80097b8:	003d0900 	.word	0x003d0900
 80097bc:	0800f7c4 	.word	0x0800f7c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c2:	2200      	movs	r2, #0
 80097c4:	60bb      	str	r3, [r7, #8]
 80097c6:	60fa      	str	r2, [r7, #12]
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097cc:	4ac0      	ldr	r2, [pc, #768]	@ (8009ad0 <UART_SetConfig+0xc28>)
 80097ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	2200      	movs	r2, #0
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	607a      	str	r2, [r7, #4]
 80097da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097e2:	f7f6 ffa9 	bl	8000738 <__aeabi_uldivmod>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	f04f 0200 	mov.w	r2, #0
 80097f2:	f04f 0300 	mov.w	r3, #0
 80097f6:	020b      	lsls	r3, r1, #8
 80097f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097fc:	0202      	lsls	r2, r0, #8
 80097fe:	6979      	ldr	r1, [r7, #20]
 8009800:	6849      	ldr	r1, [r1, #4]
 8009802:	0849      	lsrs	r1, r1, #1
 8009804:	2000      	movs	r0, #0
 8009806:	460c      	mov	r4, r1
 8009808:	4605      	mov	r5, r0
 800980a:	eb12 0804 	adds.w	r8, r2, r4
 800980e:	eb43 0905 	adc.w	r9, r3, r5
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	469a      	mov	sl, r3
 800981a:	4693      	mov	fp, r2
 800981c:	4652      	mov	r2, sl
 800981e:	465b      	mov	r3, fp
 8009820:	4640      	mov	r0, r8
 8009822:	4649      	mov	r1, r9
 8009824:	f7f6 ff88 	bl	8000738 <__aeabi_uldivmod>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4613      	mov	r3, r2
 800982e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009836:	d308      	bcc.n	800984a <UART_SetConfig+0x9a2>
 8009838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800983e:	d204      	bcs.n	800984a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009846:	60da      	str	r2, [r3, #12]
 8009848:	e17f      	b.n	8009b4a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009850:	e17b      	b.n	8009b4a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800985a:	f040 80bd 	bne.w	80099d8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800985e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009862:	2b20      	cmp	r3, #32
 8009864:	dc48      	bgt.n	80098f8 <UART_SetConfig+0xa50>
 8009866:	2b00      	cmp	r3, #0
 8009868:	db7b      	blt.n	8009962 <UART_SetConfig+0xaba>
 800986a:	2b20      	cmp	r3, #32
 800986c:	d879      	bhi.n	8009962 <UART_SetConfig+0xaba>
 800986e:	a201      	add	r2, pc, #4	@ (adr r2, 8009874 <UART_SetConfig+0x9cc>)
 8009870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009874:	080098ff 	.word	0x080098ff
 8009878:	08009907 	.word	0x08009907
 800987c:	08009963 	.word	0x08009963
 8009880:	08009963 	.word	0x08009963
 8009884:	0800990f 	.word	0x0800990f
 8009888:	08009963 	.word	0x08009963
 800988c:	08009963 	.word	0x08009963
 8009890:	08009963 	.word	0x08009963
 8009894:	0800991f 	.word	0x0800991f
 8009898:	08009963 	.word	0x08009963
 800989c:	08009963 	.word	0x08009963
 80098a0:	08009963 	.word	0x08009963
 80098a4:	08009963 	.word	0x08009963
 80098a8:	08009963 	.word	0x08009963
 80098ac:	08009963 	.word	0x08009963
 80098b0:	08009963 	.word	0x08009963
 80098b4:	0800992f 	.word	0x0800992f
 80098b8:	08009963 	.word	0x08009963
 80098bc:	08009963 	.word	0x08009963
 80098c0:	08009963 	.word	0x08009963
 80098c4:	08009963 	.word	0x08009963
 80098c8:	08009963 	.word	0x08009963
 80098cc:	08009963 	.word	0x08009963
 80098d0:	08009963 	.word	0x08009963
 80098d4:	08009963 	.word	0x08009963
 80098d8:	08009963 	.word	0x08009963
 80098dc:	08009963 	.word	0x08009963
 80098e0:	08009963 	.word	0x08009963
 80098e4:	08009963 	.word	0x08009963
 80098e8:	08009963 	.word	0x08009963
 80098ec:	08009963 	.word	0x08009963
 80098f0:	08009963 	.word	0x08009963
 80098f4:	08009955 	.word	0x08009955
 80098f8:	2b40      	cmp	r3, #64	@ 0x40
 80098fa:	d02e      	beq.n	800995a <UART_SetConfig+0xab2>
 80098fc:	e031      	b.n	8009962 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098fe:	f7fa fd17 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8009902:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009904:	e033      	b.n	800996e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009906:	f7fa fd29 	bl	800435c <HAL_RCC_GetPCLK2Freq>
 800990a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800990c:	e02f      	b.n	800996e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009912:	4618      	mov	r0, r3
 8009914:	f7fc fbc0 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991c:	e027      	b.n	800996e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800991e:	f107 0318 	add.w	r3, r7, #24
 8009922:	4618      	mov	r0, r3
 8009924:	f7fc fd0c 	bl	8006340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992c:	e01f      	b.n	800996e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800992e:	4b69      	ldr	r3, [pc, #420]	@ (8009ad4 <UART_SetConfig+0xc2c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	d009      	beq.n	800994e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800993a:	4b66      	ldr	r3, [pc, #408]	@ (8009ad4 <UART_SetConfig+0xc2c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	08db      	lsrs	r3, r3, #3
 8009940:	f003 0303 	and.w	r3, r3, #3
 8009944:	4a64      	ldr	r2, [pc, #400]	@ (8009ad8 <UART_SetConfig+0xc30>)
 8009946:	fa22 f303 	lsr.w	r3, r2, r3
 800994a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800994c:	e00f      	b.n	800996e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800994e:	4b62      	ldr	r3, [pc, #392]	@ (8009ad8 <UART_SetConfig+0xc30>)
 8009950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009952:	e00c      	b.n	800996e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009954:	4b61      	ldr	r3, [pc, #388]	@ (8009adc <UART_SetConfig+0xc34>)
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009958:	e009      	b.n	800996e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800995a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009960:	e005      	b.n	800996e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009962:	2300      	movs	r3, #0
 8009964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800996c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800996e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 80ea 	beq.w	8009b4a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997a:	4a55      	ldr	r2, [pc, #340]	@ (8009ad0 <UART_SetConfig+0xc28>)
 800997c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009980:	461a      	mov	r2, r3
 8009982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009984:	fbb3 f3f2 	udiv	r3, r3, r2
 8009988:	005a      	lsls	r2, r3, #1
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	085b      	lsrs	r3, r3, #1
 8009990:	441a      	add	r2, r3
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	fbb2 f3f3 	udiv	r3, r2, r3
 800999a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800999c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999e:	2b0f      	cmp	r3, #15
 80099a0:	d916      	bls.n	80099d0 <UART_SetConfig+0xb28>
 80099a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a8:	d212      	bcs.n	80099d0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	f023 030f 	bic.w	r3, r3, #15
 80099b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	f003 0307 	and.w	r3, r3, #7
 80099be:	b29a      	uxth	r2, r3
 80099c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80099c2:	4313      	orrs	r3, r2
 80099c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80099cc:	60da      	str	r2, [r3, #12]
 80099ce:	e0bc      	b.n	8009b4a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099d6:	e0b8      	b.n	8009b4a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099dc:	2b20      	cmp	r3, #32
 80099de:	dc4b      	bgt.n	8009a78 <UART_SetConfig+0xbd0>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f2c0 8087 	blt.w	8009af4 <UART_SetConfig+0xc4c>
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	f200 8084 	bhi.w	8009af4 <UART_SetConfig+0xc4c>
 80099ec:	a201      	add	r2, pc, #4	@ (adr r2, 80099f4 <UART_SetConfig+0xb4c>)
 80099ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f2:	bf00      	nop
 80099f4:	08009a7f 	.word	0x08009a7f
 80099f8:	08009a87 	.word	0x08009a87
 80099fc:	08009af5 	.word	0x08009af5
 8009a00:	08009af5 	.word	0x08009af5
 8009a04:	08009a8f 	.word	0x08009a8f
 8009a08:	08009af5 	.word	0x08009af5
 8009a0c:	08009af5 	.word	0x08009af5
 8009a10:	08009af5 	.word	0x08009af5
 8009a14:	08009a9f 	.word	0x08009a9f
 8009a18:	08009af5 	.word	0x08009af5
 8009a1c:	08009af5 	.word	0x08009af5
 8009a20:	08009af5 	.word	0x08009af5
 8009a24:	08009af5 	.word	0x08009af5
 8009a28:	08009af5 	.word	0x08009af5
 8009a2c:	08009af5 	.word	0x08009af5
 8009a30:	08009af5 	.word	0x08009af5
 8009a34:	08009aaf 	.word	0x08009aaf
 8009a38:	08009af5 	.word	0x08009af5
 8009a3c:	08009af5 	.word	0x08009af5
 8009a40:	08009af5 	.word	0x08009af5
 8009a44:	08009af5 	.word	0x08009af5
 8009a48:	08009af5 	.word	0x08009af5
 8009a4c:	08009af5 	.word	0x08009af5
 8009a50:	08009af5 	.word	0x08009af5
 8009a54:	08009af5 	.word	0x08009af5
 8009a58:	08009af5 	.word	0x08009af5
 8009a5c:	08009af5 	.word	0x08009af5
 8009a60:	08009af5 	.word	0x08009af5
 8009a64:	08009af5 	.word	0x08009af5
 8009a68:	08009af5 	.word	0x08009af5
 8009a6c:	08009af5 	.word	0x08009af5
 8009a70:	08009af5 	.word	0x08009af5
 8009a74:	08009ae7 	.word	0x08009ae7
 8009a78:	2b40      	cmp	r3, #64	@ 0x40
 8009a7a:	d037      	beq.n	8009aec <UART_SetConfig+0xc44>
 8009a7c:	e03a      	b.n	8009af4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a7e:	f7fa fc57 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8009a82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a84:	e03c      	b.n	8009b00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a86:	f7fa fc69 	bl	800435c <HAL_RCC_GetPCLK2Freq>
 8009a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a8c:	e038      	b.n	8009b00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fc fb00 	bl	8006098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a9c:	e030      	b.n	8009b00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a9e:	f107 0318 	add.w	r3, r7, #24
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fc fc4c 	bl	8006340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aac:	e028      	b.n	8009b00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aae:	4b09      	ldr	r3, [pc, #36]	@ (8009ad4 <UART_SetConfig+0xc2c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0320 	and.w	r3, r3, #32
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d012      	beq.n	8009ae0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009aba:	4b06      	ldr	r3, [pc, #24]	@ (8009ad4 <UART_SetConfig+0xc2c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	08db      	lsrs	r3, r3, #3
 8009ac0:	f003 0303 	and.w	r3, r3, #3
 8009ac4:	4a04      	ldr	r2, [pc, #16]	@ (8009ad8 <UART_SetConfig+0xc30>)
 8009ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009acc:	e018      	b.n	8009b00 <UART_SetConfig+0xc58>
 8009ace:	bf00      	nop
 8009ad0:	0800f7c4 	.word	0x0800f7c4
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	03d09000 	.word	0x03d09000
 8009adc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009ae0:	4b24      	ldr	r3, [pc, #144]	@ (8009b74 <UART_SetConfig+0xccc>)
 8009ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae4:	e00c      	b.n	8009b00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ae6:	4b24      	ldr	r3, [pc, #144]	@ (8009b78 <UART_SetConfig+0xcd0>)
 8009ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aea:	e009      	b.n	8009b00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009af2:	e005      	b.n	8009b00 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009afe:	bf00      	nop
    }

    if (pclk != 0U)
 8009b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d021      	beq.n	8009b4a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8009b7c <UART_SetConfig+0xcd4>)
 8009b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b10:	461a      	mov	r2, r3
 8009b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b14:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	085b      	lsrs	r3, r3, #1
 8009b1e:	441a      	add	r2, r3
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b28:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2c:	2b0f      	cmp	r3, #15
 8009b2e:	d909      	bls.n	8009b44 <UART_SetConfig+0xc9c>
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b36:	d205      	bcs.n	8009b44 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60da      	str	r2, [r3, #12]
 8009b42:	e002      	b.n	8009b4a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	2200      	movs	r2, #0
 8009b64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b66:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3748      	adds	r7, #72	@ 0x48
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b74:	03d09000 	.word	0x03d09000
 8009b78:	003d0900 	.word	0x003d0900
 8009b7c:	0800f7c4 	.word	0x0800f7c4

08009b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8c:	f003 0308 	and.w	r3, r3, #8
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c14:	f003 0310 	and.w	r3, r3, #16
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00a      	beq.n	8009c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c36:	f003 0320 	and.w	r3, r3, #32
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00a      	beq.n	8009c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01a      	beq.n	8009c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c7e:	d10a      	bne.n	8009c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	605a      	str	r2, [r3, #4]
  }
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b098      	sub	sp, #96	@ 0x60
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cd4:	f7f8 f98e 	bl	8001ff4 <HAL_GetTick>
 8009cd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d12f      	bne.n	8009d48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ce8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f88e 	bl	8009e18 <UART_WaitOnFlagUntilTimeout>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d022      	beq.n	8009d48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e6      	bne.n	8009d02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e063      	b.n	8009e10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0304 	and.w	r3, r3, #4
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	d149      	bne.n	8009dea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f857 	bl	8009e18 <UART_WaitOnFlagUntilTimeout>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d03c      	beq.n	8009dea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d78:	e853 3f00 	ldrex	r3, [r3]
 8009d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e6      	bne.n	8009d70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3308      	adds	r3, #8
 8009da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f023 0301 	bic.w	r3, r3, #1
 8009db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dc2:	61fa      	str	r2, [r7, #28]
 8009dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	69b9      	ldr	r1, [r7, #24]
 8009dc8:	69fa      	ldr	r2, [r7, #28]
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	617b      	str	r3, [r7, #20]
   return(result);
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e5      	bne.n	8009da2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e012      	b.n	8009e10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3758      	adds	r7, #88	@ 0x58
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	603b      	str	r3, [r7, #0]
 8009e24:	4613      	mov	r3, r2
 8009e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e28:	e04f      	b.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e30:	d04b      	beq.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e32:	f7f8 f8df 	bl	8001ff4 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d302      	bcc.n	8009e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e04e      	b.n	8009eea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0304 	and.w	r3, r3, #4
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d037      	beq.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b80      	cmp	r3, #128	@ 0x80
 8009e5e:	d034      	beq.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b40      	cmp	r3, #64	@ 0x40
 8009e64:	d031      	beq.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	f003 0308 	and.w	r3, r3, #8
 8009e70:	2b08      	cmp	r3, #8
 8009e72:	d110      	bne.n	8009e96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2208      	movs	r2, #8
 8009e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 f839 	bl	8009ef4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2208      	movs	r2, #8
 8009e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e029      	b.n	8009eea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ea4:	d111      	bne.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 f81f 	bl	8009ef4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	e00f      	b.n	8009eea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	69da      	ldr	r2, [r3, #28]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	bf0c      	ite	eq
 8009eda:	2301      	moveq	r3, #1
 8009edc:	2300      	movne	r3, #0
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d0a0      	beq.n	8009e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
	...

08009ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b095      	sub	sp, #84	@ 0x54
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e6      	bne.n	8009efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	e853 3f00 	ldrex	r3, [r3]
 8009f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	4b1e      	ldr	r3, [pc, #120]	@ (8009fbc <UART_EndRxTransfer+0xc8>)
 8009f42:	4013      	ands	r3, r2
 8009f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f56:	e841 2300 	strex	r3, r2, [r1]
 8009f5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1e5      	bne.n	8009f2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d118      	bne.n	8009f9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f023 0310 	bic.w	r3, r3, #16
 8009f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f88:	61bb      	str	r3, [r7, #24]
 8009f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6979      	ldr	r1, [r7, #20]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	613b      	str	r3, [r7, #16]
   return(result);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e6      	bne.n	8009f6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009fb0:	bf00      	nop
 8009fb2:	3754      	adds	r7, #84	@ 0x54
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	effffffe 	.word	0xeffffffe

08009fc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7fe ff4c 	bl	8008e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fe4:	bf00      	nop
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b088      	sub	sp, #32
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	e853 3f00 	ldrex	r3, [r3]
 800a000:	60bb      	str	r3, [r7, #8]
   return(result);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a008:	61fb      	str	r3, [r7, #28]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	61bb      	str	r3, [r7, #24]
 800a014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6979      	ldr	r1, [r7, #20]
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	613b      	str	r3, [r7, #16]
   return(result);
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e6      	bne.n	8009ff4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7fe ff17 	bl	8008e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a03a:	bf00      	nop
 800a03c:	3720      	adds	r7, #32
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a042:	b480      	push	{r7}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a05e:	bf00      	nop
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b083      	sub	sp, #12
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a072:	bf00      	nop
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a07e:	b480      	push	{r7}
 800a080:	b085      	sub	sp, #20
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d101      	bne.n	800a094 <HAL_UARTEx_DisableFifoMode+0x16>
 800a090:	2302      	movs	r3, #2
 800a092:	e027      	b.n	800a0e4 <HAL_UARTEx_DisableFifoMode+0x66>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2224      	movs	r2, #36	@ 0x24
 800a0a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f022 0201 	bic.w	r2, r2, #1
 800a0ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a0c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a100:	2b01      	cmp	r3, #1
 800a102:	d101      	bne.n	800a108 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a104:	2302      	movs	r3, #2
 800a106:	e02d      	b.n	800a164 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2224      	movs	r2, #36	@ 0x24
 800a114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f022 0201 	bic.w	r2, r2, #1
 800a12e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	430a      	orrs	r2, r1
 800a142:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f84f 	bl	800a1e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2220      	movs	r2, #32
 800a156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d101      	bne.n	800a184 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a180:	2302      	movs	r3, #2
 800a182:	e02d      	b.n	800a1e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2224      	movs	r2, #36	@ 0x24
 800a190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f022 0201 	bic.w	r2, r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	430a      	orrs	r2, r1
 800a1be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f811 	bl	800a1e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d108      	bne.n	800a20a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a208:	e031      	b.n	800a26e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a20a:	2310      	movs	r3, #16
 800a20c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a20e:	2310      	movs	r3, #16
 800a210:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	0e5b      	lsrs	r3, r3, #25
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	f003 0307 	and.w	r3, r3, #7
 800a220:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	0f5b      	lsrs	r3, r3, #29
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 0307 	and.w	r3, r3, #7
 800a230:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a232:	7bbb      	ldrb	r3, [r7, #14]
 800a234:	7b3a      	ldrb	r2, [r7, #12]
 800a236:	4911      	ldr	r1, [pc, #68]	@ (800a27c <UARTEx_SetNbDataToProcess+0x94>)
 800a238:	5c8a      	ldrb	r2, [r1, r2]
 800a23a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a23e:	7b3a      	ldrb	r2, [r7, #12]
 800a240:	490f      	ldr	r1, [pc, #60]	@ (800a280 <UARTEx_SetNbDataToProcess+0x98>)
 800a242:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a244:	fb93 f3f2 	sdiv	r3, r3, r2
 800a248:	b29a      	uxth	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	7b7a      	ldrb	r2, [r7, #13]
 800a254:	4909      	ldr	r1, [pc, #36]	@ (800a27c <UARTEx_SetNbDataToProcess+0x94>)
 800a256:	5c8a      	ldrb	r2, [r1, r2]
 800a258:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a25c:	7b7a      	ldrb	r2, [r7, #13]
 800a25e:	4908      	ldr	r1, [pc, #32]	@ (800a280 <UARTEx_SetNbDataToProcess+0x98>)
 800a260:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a262:	fb93 f3f2 	sdiv	r3, r3, r2
 800a266:	b29a      	uxth	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	0800f7dc 	.word	0x0800f7dc
 800a280:	0800f7e4 	.word	0x0800f7e4

0800a284 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a284:	b084      	sub	sp, #16
 800a286:	b480      	push	{r7}
 800a288:	b085      	sub	sp, #20
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	f107 001c 	add.w	r0, r7, #28
 800a292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a29a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a29c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a29e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800a2a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800a2a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800a2aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	4b07      	ldr	r3, [pc, #28]	@ (800a2d4 <SDMMC_Init+0x50>)
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	b004      	add	sp, #16
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	ffc02c00 	.word	0xffc02c00

0800a2d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f043 0203 	orr.w	r2, r3, #3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a336:	b480      	push	{r7}
 800a338:	b083      	sub	sp, #12
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0303 	and.w	r3, r3, #3
}
 800a346:	4618      	mov	r0, r3
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
	...

0800a354 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a372:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a378:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a37e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	4b06      	ldr	r3, [pc, #24]	@ (800a3a4 <SDMMC_SendCommand+0x50>)
 800a38c:	4013      	ands	r3, r2
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	431a      	orrs	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	fffee0c0 	.word	0xfffee0c0

0800a3a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	b2db      	uxtb	r3, r3
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b085      	sub	sp, #20
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3314      	adds	r3, #20
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a40e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a414:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a41a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	4313      	orrs	r3, r2
 800a420:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a426:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a432:	2300      	movs	r3, #0

}
 800a434:	4618      	mov	r0, r3
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a44e:	2310      	movs	r3, #16
 800a450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a452:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a458:	2300      	movs	r3, #0
 800a45a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a45c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a460:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a462:	f107 0308 	add.w	r3, r7, #8
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ff73 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a46e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a472:	2110      	movs	r1, #16
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fa5f 	bl	800a938 <SDMMC_GetCmdResp1>
 800a47a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a47c:	69fb      	ldr	r3, [r7, #28]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3720      	adds	r7, #32
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b088      	sub	sp, #32
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a494:	2311      	movs	r3, #17
 800a496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a498:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a49c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a4a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4a8:	f107 0308 	add.w	r3, r7, #8
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7ff ff50 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a4b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4b8:	2111      	movs	r1, #17
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fa3c 	bl	800a938 <SDMMC_GetCmdResp1>
 800a4c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4c2:	69fb      	ldr	r3, [r7, #28]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3720      	adds	r7, #32
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a4da:	2312      	movs	r3, #18
 800a4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a4ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4ee:	f107 0308 	add.w	r3, r7, #8
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7ff ff2d 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a4fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4fe:	2112      	movs	r1, #18
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fa19 	bl	800a938 <SDMMC_GetCmdResp1>
 800a506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a508:	69fb      	ldr	r3, [r7, #28]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3720      	adds	r7, #32
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b088      	sub	sp, #32
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a520:	2318      	movs	r3, #24
 800a522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a52a:	2300      	movs	r3, #0
 800a52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a52e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a532:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a534:	f107 0308 	add.w	r3, r7, #8
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff ff0a 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a540:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a544:	2118      	movs	r1, #24
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f9f6 	bl	800a938 <SDMMC_GetCmdResp1>
 800a54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a54e:	69fb      	ldr	r3, [r7, #28]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3720      	adds	r7, #32
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a566:	2319      	movs	r3, #25
 800a568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a56a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a56e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a570:	2300      	movs	r3, #0
 800a572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a578:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a57a:	f107 0308 	add.w	r3, r7, #8
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff fee7 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a58a:	2119      	movs	r1, #25
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f9d3 	bl	800a938 <SDMMC_GetCmdResp1>
 800a592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a594:	69fb      	ldr	r3, [r7, #28]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3720      	adds	r7, #32
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
	...

0800a5a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b088      	sub	sp, #32
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a5ac:	230c      	movs	r3, #12
 800a5ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5be:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5d8:	f107 0308 	add.w	r3, r7, #8
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff feb8 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a5e4:	4a0b      	ldr	r2, [pc, #44]	@ (800a614 <SDMMC_CmdStopTransfer+0x74>)
 800a5e6:	210c      	movs	r1, #12
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f9a5 	bl	800a938 <SDMMC_GetCmdResp1>
 800a5ee:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a602:	d101      	bne.n	800a608 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a604:	2300      	movs	r3, #0
 800a606:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a608:	69fb      	ldr	r3, [r7, #28]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3720      	adds	r7, #32
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	05f5e100 	.word	0x05f5e100

0800a618 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a626:	2307      	movs	r3, #7
 800a628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a62a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a62e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a630:	2300      	movs	r3, #0
 800a632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a638:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a63a:	f107 0308 	add.w	r3, r7, #8
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff fe87 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a64a:	2107      	movs	r1, #7
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f973 	bl	800a938 <SDMMC_GetCmdResp1>
 800a652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a654:	69fb      	ldr	r3, [r7, #28]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3720      	adds	r7, #32
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b088      	sub	sp, #32
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a66e:	2300      	movs	r3, #0
 800a670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a672:	2300      	movs	r3, #0
 800a674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a67a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a67c:	f107 0308 	add.w	r3, r7, #8
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff fe66 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fb97 	bl	800adbc <SDMMC_GetCmdError>
 800a68e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a690:	69fb      	ldr	r3, [r7, #28]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3720      	adds	r7, #32
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b088      	sub	sp, #32
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a6a2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a6a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a6a8:	2308      	movs	r3, #8
 800a6aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a6ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6bc:	f107 0308 	add.w	r3, r7, #8
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7ff fe46 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fb29 	bl	800ad20 <SDMMC_GetCmdResp7>
 800a6ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3720      	adds	r7, #32
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b088      	sub	sp, #32
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a6e8:	2337      	movs	r3, #55	@ 0x37
 800a6ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a6fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6fc:	f107 0308 	add.w	r3, r7, #8
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff fe26 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a70c:	2137      	movs	r1, #55	@ 0x37
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f912 	bl	800a938 <SDMMC_GetCmdResp1>
 800a714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a716:	69fb      	ldr	r3, [r7, #28]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3720      	adds	r7, #32
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a72e:	2329      	movs	r3, #41	@ 0x29
 800a730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a732:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a73c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a742:	f107 0308 	add.w	r3, r7, #8
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff fe03 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fa2e 	bl	800abb0 <SDMMC_GetCmdResp3>
 800a754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a756:	69fb      	ldr	r3, [r7, #28]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3720      	adds	r7, #32
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a76e:	2306      	movs	r3, #6
 800a770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a778:	2300      	movs	r3, #0
 800a77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a77c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a780:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a782:	f107 0308 	add.w	r3, r7, #8
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7ff fde3 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a78e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a792:	2106      	movs	r1, #6
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f8cf 	bl	800a938 <SDMMC_GetCmdResp1>
 800a79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a79c:	69fb      	ldr	r3, [r7, #28]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3720      	adds	r7, #32
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b088      	sub	sp, #32
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a7b2:	2333      	movs	r3, #51	@ 0x33
 800a7b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a7c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7c6:	f107 0308 	add.w	r3, r7, #8
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff fdc1 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a7d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7d6:	2133      	movs	r1, #51	@ 0x33
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f8ad 	bl	800a938 <SDMMC_GetCmdResp1>
 800a7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3720      	adds	r7, #32
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b088      	sub	sp, #32
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a7fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a7fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a80a:	f107 0308 	add.w	r3, r7, #8
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff fd9f 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f980 	bl	800ab1c <SDMMC_GetCmdResp2>
 800a81c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a81e:	69fb      	ldr	r3, [r7, #28]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3720      	adds	r7, #32
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b088      	sub	sp, #32
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a836:	2309      	movs	r3, #9
 800a838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a83a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a83e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a840:	2300      	movs	r3, #0
 800a842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a844:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a848:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a84a:	f107 0308 	add.w	r3, r7, #8
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7ff fd7f 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f960 	bl	800ab1c <SDMMC_GetCmdResp2>
 800a85c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a85e:	69fb      	ldr	r3, [r7, #28]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3720      	adds	r7, #32
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a876:	2303      	movs	r3, #3
 800a878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a87a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a87e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a880:	2300      	movs	r3, #0
 800a882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a888:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a88a:	f107 0308 	add.w	r3, r7, #8
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fd5f 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	2103      	movs	r1, #3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f9c8 	bl	800ac30 <SDMMC_GetCmdResp6>
 800a8a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8a2:	69fb      	ldr	r3, [r7, #28]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3720      	adds	r7, #32
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a8ba:	230d      	movs	r3, #13
 800a8bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8ce:	f107 0308 	add.w	r3, r7, #8
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff fd3d 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a8da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8de:	210d      	movs	r1, #13
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f829 	bl	800a938 <SDMMC_GetCmdResp1>
 800a8e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3720      	adds	r7, #32
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b088      	sub	sp, #32
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a8fe:	230d      	movs	r3, #13
 800a900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a902:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a908:	2300      	movs	r3, #0
 800a90a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a90c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a910:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a912:	f107 0308 	add.w	r3, r7, #8
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff fd1b 	bl	800a354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a91e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a922:	210d      	movs	r1, #13
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f807 	bl	800a938 <SDMMC_GetCmdResp1>
 800a92a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a92c:	69fb      	ldr	r3, [r7, #28]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3720      	adds	r7, #32
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b088      	sub	sp, #32
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	460b      	mov	r3, r1
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a946:	4b70      	ldr	r3, [pc, #448]	@ (800ab08 <SDMMC_GetCmdResp1+0x1d0>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a70      	ldr	r2, [pc, #448]	@ (800ab0c <SDMMC_GetCmdResp1+0x1d4>)
 800a94c:	fba2 2303 	umull	r2, r3, r2, r3
 800a950:	0a5a      	lsrs	r2, r3, #9
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	fb02 f303 	mul.w	r3, r2, r3
 800a958:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	1e5a      	subs	r2, r3, #1
 800a95e:	61fa      	str	r2, [r7, #28]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a964:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a968:	e0c9      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a96e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a970:	69ba      	ldr	r2, [r7, #24]
 800a972:	4b67      	ldr	r3, [pc, #412]	@ (800ab10 <SDMMC_GetCmdResp1+0x1d8>)
 800a974:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0ef      	beq.n	800a95a <SDMMC_GetCmdResp1+0x22>
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1ea      	bne.n	800a95a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d004      	beq.n	800a99a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2204      	movs	r2, #4
 800a994:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a996:	2304      	movs	r3, #4
 800a998:	e0b1      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e0a6      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4a58      	ldr	r2, [pc, #352]	@ (800ab14 <SDMMC_GetCmdResp1+0x1dc>)
 800a9b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f7ff fcf6 	bl	800a3a8 <SDMMC_GetCommandResponse>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	461a      	mov	r2, r3
 800a9c0:	7afb      	ldrb	r3, [r7, #11]
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d001      	beq.n	800a9ca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e099      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7ff fcf8 	bl	800a3c2 <SDMMC_GetResponse>
 800a9d2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	4b50      	ldr	r3, [pc, #320]	@ (800ab18 <SDMMC_GetCmdResp1+0x1e0>)
 800a9d8:	4013      	ands	r3, r2
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d101      	bne.n	800a9e2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	e08d      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	da02      	bge.n	800a9ee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a9e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a9ec:	e087      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a9f8:	2340      	movs	r3, #64	@ 0x40
 800a9fa:	e080      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aa06:	2380      	movs	r3, #128	@ 0x80
 800aa08:	e079      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aa14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa18:	e071      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d002      	beq.n	800aa2a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aa24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa28:	e069      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aa34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa38:	e061      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aa44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa48:	e059      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d002      	beq.n	800aa5a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aa54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa58:	e051      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aa68:	e049      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aa74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aa78:	e041      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aa84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa88:	e039      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aa94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800aa98:	e031      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aaa4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800aaa8:	e029      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d002      	beq.n	800aaba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aab4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aab8:	e021      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aac4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800aac8:	e019      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aad4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800aad8:	e011      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aae4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800aae8:	e009      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f003 0308 	and.w	r3, r3, #8
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d002      	beq.n	800aafa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aaf4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800aaf8:	e001      	b.n	800aafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aafa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3720      	adds	r7, #32
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	24000000 	.word	0x24000000
 800ab0c:	10624dd3 	.word	0x10624dd3
 800ab10:	00200045 	.word	0x00200045
 800ab14:	002000c5 	.word	0x002000c5
 800ab18:	fdffe008 	.word	0xfdffe008

0800ab1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ab24:	4b1f      	ldr	r3, [pc, #124]	@ (800aba4 <SDMMC_GetCmdResp2+0x88>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a1f      	ldr	r2, [pc, #124]	@ (800aba8 <SDMMC_GetCmdResp2+0x8c>)
 800ab2a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab2e:	0a5b      	lsrs	r3, r3, #9
 800ab30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab34:	fb02 f303 	mul.w	r3, r2, r3
 800ab38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	1e5a      	subs	r2, r3, #1
 800ab3e:	60fa      	str	r2, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d102      	bne.n	800ab4a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab48:	e026      	b.n	800ab98 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab4e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d0ef      	beq.n	800ab3a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1ea      	bne.n	800ab3a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab68:	f003 0304 	and.w	r3, r3, #4
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d004      	beq.n	800ab7a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2204      	movs	r2, #4
 800ab74:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab76:	2304      	movs	r3, #4
 800ab78:	e00e      	b.n	800ab98 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d004      	beq.n	800ab90 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e003      	b.n	800ab98 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a06      	ldr	r2, [pc, #24]	@ (800abac <SDMMC_GetCmdResp2+0x90>)
 800ab94:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	24000000 	.word	0x24000000
 800aba8:	10624dd3 	.word	0x10624dd3
 800abac:	002000c5 	.word	0x002000c5

0800abb0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800abb8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac24 <SDMMC_GetCmdResp3+0x74>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a1a      	ldr	r2, [pc, #104]	@ (800ac28 <SDMMC_GetCmdResp3+0x78>)
 800abbe:	fba2 2303 	umull	r2, r3, r2, r3
 800abc2:	0a5b      	lsrs	r3, r3, #9
 800abc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abc8:	fb02 f303 	mul.w	r3, r2, r3
 800abcc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	1e5a      	subs	r2, r3, #1
 800abd2:	60fa      	str	r2, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d102      	bne.n	800abde <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abdc:	e01b      	b.n	800ac16 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0ef      	beq.n	800abce <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1ea      	bne.n	800abce <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2204      	movs	r2, #4
 800ac08:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac0a:	2304      	movs	r3, #4
 800ac0c:	e003      	b.n	800ac16 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a06      	ldr	r2, [pc, #24]	@ (800ac2c <SDMMC_GetCmdResp3+0x7c>)
 800ac12:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	24000000 	.word	0x24000000
 800ac28:	10624dd3 	.word	0x10624dd3
 800ac2c:	002000c5 	.word	0x002000c5

0800ac30 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b088      	sub	sp, #32
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac3e:	4b35      	ldr	r3, [pc, #212]	@ (800ad14 <SDMMC_GetCmdResp6+0xe4>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a35      	ldr	r2, [pc, #212]	@ (800ad18 <SDMMC_GetCmdResp6+0xe8>)
 800ac44:	fba2 2303 	umull	r2, r3, r2, r3
 800ac48:	0a5b      	lsrs	r3, r3, #9
 800ac4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac4e:	fb02 f303 	mul.w	r3, r2, r3
 800ac52:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	1e5a      	subs	r2, r3, #1
 800ac58:	61fa      	str	r2, [r7, #28]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d102      	bne.n	800ac64 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac5e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac62:	e052      	b.n	800ad0a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac68:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d0ef      	beq.n	800ac54 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1ea      	bne.n	800ac54 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac82:	f003 0304 	and.w	r3, r3, #4
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d004      	beq.n	800ac94 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2204      	movs	r2, #4
 800ac8e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac90:	2304      	movs	r3, #4
 800ac92:	e03a      	b.n	800ad0a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac98:	f003 0301 	and.w	r3, r3, #1
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d004      	beq.n	800acaa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2201      	movs	r2, #1
 800aca4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e02f      	b.n	800ad0a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f7ff fb7c 	bl	800a3a8 <SDMMC_GetCommandResponse>
 800acb0:	4603      	mov	r3, r0
 800acb2:	461a      	mov	r2, r3
 800acb4:	7afb      	ldrb	r3, [r7, #11]
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d001      	beq.n	800acbe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acba:	2301      	movs	r3, #1
 800acbc:	e025      	b.n	800ad0a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	4a16      	ldr	r2, [pc, #88]	@ (800ad1c <SDMMC_GetCmdResp6+0xec>)
 800acc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800acc4:	2100      	movs	r1, #0
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f7ff fb7b 	bl	800a3c2 <SDMMC_GetResponse>
 800accc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d106      	bne.n	800ace6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	0c1b      	lsrs	r3, r3, #16
 800acdc:	b29a      	uxth	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ace2:	2300      	movs	r3, #0
 800ace4:	e011      	b.n	800ad0a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800acf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800acf4:	e009      	b.n	800ad0a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ad00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad04:	e001      	b.n	800ad0a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3720      	adds	r7, #32
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	24000000 	.word	0x24000000
 800ad18:	10624dd3 	.word	0x10624dd3
 800ad1c:	002000c5 	.word	0x002000c5

0800ad20 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ad28:	4b22      	ldr	r3, [pc, #136]	@ (800adb4 <SDMMC_GetCmdResp7+0x94>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a22      	ldr	r2, [pc, #136]	@ (800adb8 <SDMMC_GetCmdResp7+0x98>)
 800ad2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad32:	0a5b      	lsrs	r3, r3, #9
 800ad34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad38:	fb02 f303 	mul.w	r3, r2, r3
 800ad3c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	1e5a      	subs	r2, r3, #1
 800ad42:	60fa      	str	r2, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d102      	bne.n	800ad4e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad4c:	e02c      	b.n	800ada8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad52:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0ef      	beq.n	800ad3e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1ea      	bne.n	800ad3e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad6c:	f003 0304 	and.w	r3, r3, #4
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d004      	beq.n	800ad7e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2204      	movs	r2, #4
 800ad78:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad7a:	2304      	movs	r3, #4
 800ad7c:	e014      	b.n	800ada8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d004      	beq.n	800ad94 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e009      	b.n	800ada8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2240      	movs	r2, #64	@ 0x40
 800ada4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ada6:	2300      	movs	r3, #0

}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	24000000 	.word	0x24000000
 800adb8:	10624dd3 	.word	0x10624dd3

0800adbc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800adc4:	4b11      	ldr	r3, [pc, #68]	@ (800ae0c <SDMMC_GetCmdError+0x50>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a11      	ldr	r2, [pc, #68]	@ (800ae10 <SDMMC_GetCmdError+0x54>)
 800adca:	fba2 2303 	umull	r2, r3, r2, r3
 800adce:	0a5b      	lsrs	r3, r3, #9
 800add0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800add4:	fb02 f303 	mul.w	r3, r2, r3
 800add8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	1e5a      	subs	r2, r3, #1
 800adde:	60fa      	str	r2, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d102      	bne.n	800adea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ade4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ade8:	e009      	b.n	800adfe <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0f1      	beq.n	800adda <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a06      	ldr	r2, [pc, #24]	@ (800ae14 <SDMMC_GetCmdError+0x58>)
 800adfa:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	24000000 	.word	0x24000000
 800ae10:	10624dd3 	.word	0x10624dd3
 800ae14:	002000c5 	.word	0x002000c5

0800ae18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ae1c:	4904      	ldr	r1, [pc, #16]	@ (800ae30 <MX_FATFS_Init+0x18>)
 800ae1e:	4805      	ldr	r0, [pc, #20]	@ (800ae34 <MX_FATFS_Init+0x1c>)
 800ae20:	f000 f9e4 	bl	800b1ec <FATFS_LinkDriver>
 800ae24:	4603      	mov	r3, r0
 800ae26:	461a      	mov	r2, r3
 800ae28:	4b03      	ldr	r3, [pc, #12]	@ (800ae38 <MX_FATFS_Init+0x20>)
 800ae2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae2c:	bf00      	nop
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	2400063c 	.word	0x2400063c
 800ae34:	0800f7ec 	.word	0x0800f7ec
 800ae38:	24000638 	.word	0x24000638

0800ae3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ae46:	f000 f879 	bl	800af3c <BSP_SD_IsDetected>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d001      	beq.n	800ae54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ae50:	2302      	movs	r3, #2
 800ae52:	e012      	b.n	800ae7a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ae54:	480b      	ldr	r0, [pc, #44]	@ (800ae84 <BSP_SD_Init+0x48>)
 800ae56:	f7fb fe7d 	bl	8006b54 <HAL_SD_Init>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d109      	bne.n	800ae78 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ae64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ae68:	4806      	ldr	r0, [pc, #24]	@ (800ae84 <BSP_SD_Init+0x48>)
 800ae6a:	f7fc fd39 	bl	80078e0 <HAL_SD_ConfigWideBusOperation>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ae78:	79fb      	ldrb	r3, [r7, #7]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	240002f0 	.word	0x240002f0

0800ae88 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b088      	sub	sp, #32
 800ae8c:	af02      	add	r7, sp, #8
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	68f9      	ldr	r1, [r7, #12]
 800aea4:	4806      	ldr	r0, [pc, #24]	@ (800aec0 <BSP_SD_ReadBlocks+0x38>)
 800aea6:	f7fb ff75 	bl	8006d94 <HAL_SD_ReadBlocks>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	240002f0 	.word	0x240002f0

0800aec4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b088      	sub	sp, #32
 800aec8:	af02      	add	r7, sp, #8
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
 800aed0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	68f9      	ldr	r1, [r7, #12]
 800aee0:	4806      	ldr	r0, [pc, #24]	@ (800aefc <BSP_SD_WriteBlocks+0x38>)
 800aee2:	f7fc f8e1 	bl	80070a8 <HAL_SD_WriteBlocks>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d001      	beq.n	800aef0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	240002f0 	.word	0x240002f0

0800af00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800af04:	4805      	ldr	r0, [pc, #20]	@ (800af1c <BSP_SD_GetCardState+0x1c>)
 800af06:	f7fc fdfd 	bl	8007b04 <HAL_SD_GetCardState>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	bf14      	ite	ne
 800af10:	2301      	movne	r3, #1
 800af12:	2300      	moveq	r3, #0
 800af14:	b2db      	uxtb	r3, r3
}
 800af16:	4618      	mov	r0, r3
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	240002f0 	.word	0x240002f0

0800af20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800af28:	6879      	ldr	r1, [r7, #4]
 800af2a:	4803      	ldr	r0, [pc, #12]	@ (800af38 <BSP_SD_GetCardInfo+0x18>)
 800af2c:	f7fc fcac 	bl	8007888 <HAL_SD_GetCardInfo>
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	240002f0 	.word	0x240002f0

0800af3c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800af42:	2301      	movs	r3, #1
 800af44:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800af46:	f000 f80b 	bl	800af60 <BSP_PlatformIsDetected>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d101      	bne.n	800af54 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800af50:	2300      	movs	r3, #0
 800af52:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800af54:	79fb      	ldrb	r3, [r7, #7]
 800af56:	b2db      	uxtb	r3, r3
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800af66:	2301      	movs	r3, #1
 800af68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800af6a:	2180      	movs	r1, #128	@ 0x80
 800af6c:	4806      	ldr	r0, [pc, #24]	@ (800af88 <BSP_PlatformIsDetected+0x28>)
 800af6e:	f7f8 f905 	bl	800317c <HAL_GPIO_ReadPin>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800af78:	2300      	movs	r3, #0
 800af7a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800af7c:	79fb      	ldrb	r3, [r7, #7]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	58020800 	.word	0x58020800

0800af8c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800af96:	4b0b      	ldr	r3, [pc, #44]	@ (800afc4 <SD_CheckStatus+0x38>)
 800af98:	2201      	movs	r2, #1
 800af9a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800af9c:	f7ff ffb0 	bl	800af00 <BSP_SD_GetCardState>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d107      	bne.n	800afb6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800afa6:	4b07      	ldr	r3, [pc, #28]	@ (800afc4 <SD_CheckStatus+0x38>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	f023 0301 	bic.w	r3, r3, #1
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	4b04      	ldr	r3, [pc, #16]	@ (800afc4 <SD_CheckStatus+0x38>)
 800afb4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800afb6:	4b03      	ldr	r3, [pc, #12]	@ (800afc4 <SD_CheckStatus+0x38>)
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	b2db      	uxtb	r3, r3
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	2400000d 	.word	0x2400000d

0800afc8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800afd2:	4b0b      	ldr	r3, [pc, #44]	@ (800b000 <SD_initialize+0x38>)
 800afd4:	2201      	movs	r2, #1
 800afd6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800afd8:	f7ff ff30 	bl	800ae3c <BSP_SD_Init>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d107      	bne.n	800aff2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff ffd1 	bl	800af8c <SD_CheckStatus>
 800afea:	4603      	mov	r3, r0
 800afec:	461a      	mov	r2, r3
 800afee:	4b04      	ldr	r3, [pc, #16]	@ (800b000 <SD_initialize+0x38>)
 800aff0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800aff2:	4b03      	ldr	r3, [pc, #12]	@ (800b000 <SD_initialize+0x38>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	b2db      	uxtb	r3, r3
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	2400000d 	.word	0x2400000d

0800b004 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	4603      	mov	r3, r0
 800b00c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b00e:	79fb      	ldrb	r3, [r7, #7]
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff ffbb 	bl	800af8c <SD_CheckStatus>
 800b016:	4603      	mov	r3, r0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60b9      	str	r1, [r7, #8]
 800b028:	607a      	str	r2, [r7, #4]
 800b02a:	603b      	str	r3, [r7, #0]
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b034:	f04f 33ff 	mov.w	r3, #4294967295
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	6879      	ldr	r1, [r7, #4]
 800b03c:	68b8      	ldr	r0, [r7, #8]
 800b03e:	f7ff ff23 	bl	800ae88 <BSP_SD_ReadBlocks>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d107      	bne.n	800b058 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b048:	bf00      	nop
 800b04a:	f7ff ff59 	bl	800af00 <BSP_SD_GetCardState>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1fa      	bne.n	800b04a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b058:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b086      	sub	sp, #24
 800b066:	af00      	add	r7, sp, #0
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
 800b06c:	603b      	str	r3, [r7, #0]
 800b06e:	4603      	mov	r3, r0
 800b070:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b076:	f04f 33ff 	mov.w	r3, #4294967295
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	6879      	ldr	r1, [r7, #4]
 800b07e:	68b8      	ldr	r0, [r7, #8]
 800b080:	f7ff ff20 	bl	800aec4 <BSP_SD_WriteBlocks>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d107      	bne.n	800b09a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b08a:	bf00      	nop
 800b08c:	f7ff ff38 	bl	800af00 <BSP_SD_GetCardState>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1fa      	bne.n	800b08c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3718      	adds	r7, #24
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08c      	sub	sp, #48	@ 0x30
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	603a      	str	r2, [r7, #0]
 800b0ae:	71fb      	strb	r3, [r7, #7]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b0ba:	4b25      	ldr	r3, [pc, #148]	@ (800b150 <SD_ioctl+0xac>)
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <SD_ioctl+0x28>
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e03c      	b.n	800b146 <SD_ioctl+0xa2>

  switch (cmd)
 800b0cc:	79bb      	ldrb	r3, [r7, #6]
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	d834      	bhi.n	800b13c <SD_ioctl+0x98>
 800b0d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0d8 <SD_ioctl+0x34>)
 800b0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d8:	0800b0e9 	.word	0x0800b0e9
 800b0dc:	0800b0f1 	.word	0x0800b0f1
 800b0e0:	0800b109 	.word	0x0800b109
 800b0e4:	0800b123 	.word	0x0800b123
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b0ee:	e028      	b.n	800b142 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0f0:	f107 0308 	add.w	r3, r7, #8
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff ff13 	bl	800af20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b0fa:	6a3a      	ldr	r2, [r7, #32]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b106:	e01c      	b.n	800b142 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b108:	f107 0308 	add.w	r3, r7, #8
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7ff ff07 	bl	800af20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b114:	b29a      	uxth	r2, r3
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b120:	e00f      	b.n	800b142 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b122:	f107 0308 	add.w	r3, r7, #8
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff fefa 	bl	800af20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12e:	0a5a      	lsrs	r2, r3, #9
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b13a:	e002      	b.n	800b142 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b13c:	2304      	movs	r3, #4
 800b13e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b142:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b146:	4618      	mov	r0, r3
 800b148:	3730      	adds	r7, #48	@ 0x30
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	2400000d 	.word	0x2400000d

0800b154 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	4613      	mov	r3, r2
 800b160:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b162:	2301      	movs	r3, #1
 800b164:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b16a:	4b1f      	ldr	r3, [pc, #124]	@ (800b1e8 <FATFS_LinkDriverEx+0x94>)
 800b16c:	7a5b      	ldrb	r3, [r3, #9]
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b00      	cmp	r3, #0
 800b172:	d131      	bne.n	800b1d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b174:	4b1c      	ldr	r3, [pc, #112]	@ (800b1e8 <FATFS_LinkDriverEx+0x94>)
 800b176:	7a5b      	ldrb	r3, [r3, #9]
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	4b1a      	ldr	r3, [pc, #104]	@ (800b1e8 <FATFS_LinkDriverEx+0x94>)
 800b17e:	2100      	movs	r1, #0
 800b180:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b182:	4b19      	ldr	r3, [pc, #100]	@ (800b1e8 <FATFS_LinkDriverEx+0x94>)
 800b184:	7a5b      	ldrb	r3, [r3, #9]
 800b186:	b2db      	uxtb	r3, r3
 800b188:	4a17      	ldr	r2, [pc, #92]	@ (800b1e8 <FATFS_LinkDriverEx+0x94>)
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b192:	4b15      	ldr	r3, [pc, #84]	@ (800b1e8 <FATFS_LinkDriverEx+0x94>)
 800b194:	7a5b      	ldrb	r3, [r3, #9]
 800b196:	b2db      	uxtb	r3, r3
 800b198:	461a      	mov	r2, r3
 800b19a:	4b13      	ldr	r3, [pc, #76]	@ (800b1e8 <FATFS_LinkDriverEx+0x94>)
 800b19c:	4413      	add	r3, r2
 800b19e:	79fa      	ldrb	r2, [r7, #7]
 800b1a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b1a2:	4b11      	ldr	r3, [pc, #68]	@ (800b1e8 <FATFS_LinkDriverEx+0x94>)
 800b1a4:	7a5b      	ldrb	r3, [r3, #9]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	b2d1      	uxtb	r1, r2
 800b1ac:	4a0e      	ldr	r2, [pc, #56]	@ (800b1e8 <FATFS_LinkDriverEx+0x94>)
 800b1ae:	7251      	strb	r1, [r2, #9]
 800b1b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b1b2:	7dbb      	ldrb	r3, [r7, #22]
 800b1b4:	3330      	adds	r3, #48	@ 0x30
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	223a      	movs	r2, #58	@ 0x3a
 800b1c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	3302      	adds	r3, #2
 800b1c8:	222f      	movs	r2, #47	@ 0x2f
 800b1ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	3303      	adds	r3, #3
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	371c      	adds	r7, #28
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	24000640 	.word	0x24000640

0800b1ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7ff ffaa 	bl	800b154 <FATFS_LinkDriverEx>
 800b200:	4603      	mov	r3, r0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <__cvt>:
 800b20a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b20c:	ed2d 8b02 	vpush	{d8}
 800b210:	eeb0 8b40 	vmov.f64	d8, d0
 800b214:	b085      	sub	sp, #20
 800b216:	4617      	mov	r7, r2
 800b218:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b21a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b21c:	ee18 2a90 	vmov	r2, s17
 800b220:	f025 0520 	bic.w	r5, r5, #32
 800b224:	2a00      	cmp	r2, #0
 800b226:	bfb6      	itet	lt
 800b228:	222d      	movlt	r2, #45	@ 0x2d
 800b22a:	2200      	movge	r2, #0
 800b22c:	eeb1 8b40 	vneglt.f64	d8, d0
 800b230:	2d46      	cmp	r5, #70	@ 0x46
 800b232:	460c      	mov	r4, r1
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	d004      	beq.n	800b242 <__cvt+0x38>
 800b238:	2d45      	cmp	r5, #69	@ 0x45
 800b23a:	d100      	bne.n	800b23e <__cvt+0x34>
 800b23c:	3401      	adds	r4, #1
 800b23e:	2102      	movs	r1, #2
 800b240:	e000      	b.n	800b244 <__cvt+0x3a>
 800b242:	2103      	movs	r1, #3
 800b244:	ab03      	add	r3, sp, #12
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	ab02      	add	r3, sp, #8
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	4622      	mov	r2, r4
 800b24e:	4633      	mov	r3, r6
 800b250:	eeb0 0b48 	vmov.f64	d0, d8
 800b254:	f001 f8f4 	bl	800c440 <_dtoa_r>
 800b258:	2d47      	cmp	r5, #71	@ 0x47
 800b25a:	d114      	bne.n	800b286 <__cvt+0x7c>
 800b25c:	07fb      	lsls	r3, r7, #31
 800b25e:	d50a      	bpl.n	800b276 <__cvt+0x6c>
 800b260:	1902      	adds	r2, r0, r4
 800b262:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26a:	bf08      	it	eq
 800b26c:	9203      	streq	r2, [sp, #12]
 800b26e:	2130      	movs	r1, #48	@ 0x30
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	4293      	cmp	r3, r2
 800b274:	d319      	bcc.n	800b2aa <__cvt+0xa0>
 800b276:	9b03      	ldr	r3, [sp, #12]
 800b278:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b27a:	1a1b      	subs	r3, r3, r0
 800b27c:	6013      	str	r3, [r2, #0]
 800b27e:	b005      	add	sp, #20
 800b280:	ecbd 8b02 	vpop	{d8}
 800b284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b286:	2d46      	cmp	r5, #70	@ 0x46
 800b288:	eb00 0204 	add.w	r2, r0, r4
 800b28c:	d1e9      	bne.n	800b262 <__cvt+0x58>
 800b28e:	7803      	ldrb	r3, [r0, #0]
 800b290:	2b30      	cmp	r3, #48	@ 0x30
 800b292:	d107      	bne.n	800b2a4 <__cvt+0x9a>
 800b294:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29c:	bf1c      	itt	ne
 800b29e:	f1c4 0401 	rsbne	r4, r4, #1
 800b2a2:	6034      	strne	r4, [r6, #0]
 800b2a4:	6833      	ldr	r3, [r6, #0]
 800b2a6:	441a      	add	r2, r3
 800b2a8:	e7db      	b.n	800b262 <__cvt+0x58>
 800b2aa:	1c5c      	adds	r4, r3, #1
 800b2ac:	9403      	str	r4, [sp, #12]
 800b2ae:	7019      	strb	r1, [r3, #0]
 800b2b0:	e7de      	b.n	800b270 <__cvt+0x66>

0800b2b2 <__exponent>:
 800b2b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2b4:	2900      	cmp	r1, #0
 800b2b6:	bfba      	itte	lt
 800b2b8:	4249      	neglt	r1, r1
 800b2ba:	232d      	movlt	r3, #45	@ 0x2d
 800b2bc:	232b      	movge	r3, #43	@ 0x2b
 800b2be:	2909      	cmp	r1, #9
 800b2c0:	7002      	strb	r2, [r0, #0]
 800b2c2:	7043      	strb	r3, [r0, #1]
 800b2c4:	dd29      	ble.n	800b31a <__exponent+0x68>
 800b2c6:	f10d 0307 	add.w	r3, sp, #7
 800b2ca:	461d      	mov	r5, r3
 800b2cc:	270a      	movs	r7, #10
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2d4:	fb07 1416 	mls	r4, r7, r6, r1
 800b2d8:	3430      	adds	r4, #48	@ 0x30
 800b2da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b2de:	460c      	mov	r4, r1
 800b2e0:	2c63      	cmp	r4, #99	@ 0x63
 800b2e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2e6:	4631      	mov	r1, r6
 800b2e8:	dcf1      	bgt.n	800b2ce <__exponent+0x1c>
 800b2ea:	3130      	adds	r1, #48	@ 0x30
 800b2ec:	1e94      	subs	r4, r2, #2
 800b2ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b2f2:	1c41      	adds	r1, r0, #1
 800b2f4:	4623      	mov	r3, r4
 800b2f6:	42ab      	cmp	r3, r5
 800b2f8:	d30a      	bcc.n	800b310 <__exponent+0x5e>
 800b2fa:	f10d 0309 	add.w	r3, sp, #9
 800b2fe:	1a9b      	subs	r3, r3, r2
 800b300:	42ac      	cmp	r4, r5
 800b302:	bf88      	it	hi
 800b304:	2300      	movhi	r3, #0
 800b306:	3302      	adds	r3, #2
 800b308:	4403      	add	r3, r0
 800b30a:	1a18      	subs	r0, r3, r0
 800b30c:	b003      	add	sp, #12
 800b30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b310:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b314:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b318:	e7ed      	b.n	800b2f6 <__exponent+0x44>
 800b31a:	2330      	movs	r3, #48	@ 0x30
 800b31c:	3130      	adds	r1, #48	@ 0x30
 800b31e:	7083      	strb	r3, [r0, #2]
 800b320:	70c1      	strb	r1, [r0, #3]
 800b322:	1d03      	adds	r3, r0, #4
 800b324:	e7f1      	b.n	800b30a <__exponent+0x58>
	...

0800b328 <_printf_float>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	b08d      	sub	sp, #52	@ 0x34
 800b32e:	460c      	mov	r4, r1
 800b330:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b334:	4616      	mov	r6, r2
 800b336:	461f      	mov	r7, r3
 800b338:	4605      	mov	r5, r0
 800b33a:	f000 ff6b 	bl	800c214 <_localeconv_r>
 800b33e:	f8d0 b000 	ldr.w	fp, [r0]
 800b342:	4658      	mov	r0, fp
 800b344:	f7f5 f834 	bl	80003b0 <strlen>
 800b348:	2300      	movs	r3, #0
 800b34a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b34c:	f8d8 3000 	ldr.w	r3, [r8]
 800b350:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b354:	6822      	ldr	r2, [r4, #0]
 800b356:	9005      	str	r0, [sp, #20]
 800b358:	3307      	adds	r3, #7
 800b35a:	f023 0307 	bic.w	r3, r3, #7
 800b35e:	f103 0108 	add.w	r1, r3, #8
 800b362:	f8c8 1000 	str.w	r1, [r8]
 800b366:	ed93 0b00 	vldr	d0, [r3]
 800b36a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b5c8 <_printf_float+0x2a0>
 800b36e:	eeb0 7bc0 	vabs.f64	d7, d0
 800b372:	eeb4 7b46 	vcmp.f64	d7, d6
 800b376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b37e:	dd24      	ble.n	800b3ca <_printf_float+0xa2>
 800b380:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b388:	d502      	bpl.n	800b390 <_printf_float+0x68>
 800b38a:	232d      	movs	r3, #45	@ 0x2d
 800b38c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b390:	498f      	ldr	r1, [pc, #572]	@ (800b5d0 <_printf_float+0x2a8>)
 800b392:	4b90      	ldr	r3, [pc, #576]	@ (800b5d4 <_printf_float+0x2ac>)
 800b394:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b398:	bf94      	ite	ls
 800b39a:	4688      	movls	r8, r1
 800b39c:	4698      	movhi	r8, r3
 800b39e:	f022 0204 	bic.w	r2, r2, #4
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	6123      	str	r3, [r4, #16]
 800b3a6:	6022      	str	r2, [r4, #0]
 800b3a8:	f04f 0a00 	mov.w	sl, #0
 800b3ac:	9700      	str	r7, [sp, #0]
 800b3ae:	4633      	mov	r3, r6
 800b3b0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f000 f9d1 	bl	800b75c <_printf_common>
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	f040 8089 	bne.w	800b4d2 <_printf_float+0x1aa>
 800b3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c4:	b00d      	add	sp, #52	@ 0x34
 800b3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ca:	eeb4 0b40 	vcmp.f64	d0, d0
 800b3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d2:	d709      	bvc.n	800b3e8 <_printf_float+0xc0>
 800b3d4:	ee10 3a90 	vmov	r3, s1
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	bfbc      	itt	lt
 800b3dc:	232d      	movlt	r3, #45	@ 0x2d
 800b3de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b3e2:	497d      	ldr	r1, [pc, #500]	@ (800b5d8 <_printf_float+0x2b0>)
 800b3e4:	4b7d      	ldr	r3, [pc, #500]	@ (800b5dc <_printf_float+0x2b4>)
 800b3e6:	e7d5      	b.n	800b394 <_printf_float+0x6c>
 800b3e8:	6863      	ldr	r3, [r4, #4]
 800b3ea:	1c59      	adds	r1, r3, #1
 800b3ec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b3f0:	d139      	bne.n	800b466 <_printf_float+0x13e>
 800b3f2:	2306      	movs	r3, #6
 800b3f4:	6063      	str	r3, [r4, #4]
 800b3f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	6022      	str	r2, [r4, #0]
 800b3fe:	9303      	str	r3, [sp, #12]
 800b400:	ab0a      	add	r3, sp, #40	@ 0x28
 800b402:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b406:	ab09      	add	r3, sp, #36	@ 0x24
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	6861      	ldr	r1, [r4, #4]
 800b40c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b410:	4628      	mov	r0, r5
 800b412:	f7ff fefa 	bl	800b20a <__cvt>
 800b416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b41a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b41c:	4680      	mov	r8, r0
 800b41e:	d129      	bne.n	800b474 <_printf_float+0x14c>
 800b420:	1cc8      	adds	r0, r1, #3
 800b422:	db02      	blt.n	800b42a <_printf_float+0x102>
 800b424:	6863      	ldr	r3, [r4, #4]
 800b426:	4299      	cmp	r1, r3
 800b428:	dd41      	ble.n	800b4ae <_printf_float+0x186>
 800b42a:	f1a9 0902 	sub.w	r9, r9, #2
 800b42e:	fa5f f989 	uxtb.w	r9, r9
 800b432:	3901      	subs	r1, #1
 800b434:	464a      	mov	r2, r9
 800b436:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b43a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b43c:	f7ff ff39 	bl	800b2b2 <__exponent>
 800b440:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b442:	1813      	adds	r3, r2, r0
 800b444:	2a01      	cmp	r2, #1
 800b446:	4682      	mov	sl, r0
 800b448:	6123      	str	r3, [r4, #16]
 800b44a:	dc02      	bgt.n	800b452 <_printf_float+0x12a>
 800b44c:	6822      	ldr	r2, [r4, #0]
 800b44e:	07d2      	lsls	r2, r2, #31
 800b450:	d501      	bpl.n	800b456 <_printf_float+0x12e>
 800b452:	3301      	adds	r3, #1
 800b454:	6123      	str	r3, [r4, #16]
 800b456:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0a6      	beq.n	800b3ac <_printf_float+0x84>
 800b45e:	232d      	movs	r3, #45	@ 0x2d
 800b460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b464:	e7a2      	b.n	800b3ac <_printf_float+0x84>
 800b466:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b46a:	d1c4      	bne.n	800b3f6 <_printf_float+0xce>
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1c2      	bne.n	800b3f6 <_printf_float+0xce>
 800b470:	2301      	movs	r3, #1
 800b472:	e7bf      	b.n	800b3f4 <_printf_float+0xcc>
 800b474:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b478:	d9db      	bls.n	800b432 <_printf_float+0x10a>
 800b47a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b47e:	d118      	bne.n	800b4b2 <_printf_float+0x18a>
 800b480:	2900      	cmp	r1, #0
 800b482:	6863      	ldr	r3, [r4, #4]
 800b484:	dd0b      	ble.n	800b49e <_printf_float+0x176>
 800b486:	6121      	str	r1, [r4, #16]
 800b488:	b913      	cbnz	r3, 800b490 <_printf_float+0x168>
 800b48a:	6822      	ldr	r2, [r4, #0]
 800b48c:	07d0      	lsls	r0, r2, #31
 800b48e:	d502      	bpl.n	800b496 <_printf_float+0x16e>
 800b490:	3301      	adds	r3, #1
 800b492:	440b      	add	r3, r1
 800b494:	6123      	str	r3, [r4, #16]
 800b496:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b498:	f04f 0a00 	mov.w	sl, #0
 800b49c:	e7db      	b.n	800b456 <_printf_float+0x12e>
 800b49e:	b913      	cbnz	r3, 800b4a6 <_printf_float+0x17e>
 800b4a0:	6822      	ldr	r2, [r4, #0]
 800b4a2:	07d2      	lsls	r2, r2, #31
 800b4a4:	d501      	bpl.n	800b4aa <_printf_float+0x182>
 800b4a6:	3302      	adds	r3, #2
 800b4a8:	e7f4      	b.n	800b494 <_printf_float+0x16c>
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e7f2      	b.n	800b494 <_printf_float+0x16c>
 800b4ae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b4b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4b4:	4299      	cmp	r1, r3
 800b4b6:	db05      	blt.n	800b4c4 <_printf_float+0x19c>
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	6121      	str	r1, [r4, #16]
 800b4bc:	07d8      	lsls	r0, r3, #31
 800b4be:	d5ea      	bpl.n	800b496 <_printf_float+0x16e>
 800b4c0:	1c4b      	adds	r3, r1, #1
 800b4c2:	e7e7      	b.n	800b494 <_printf_float+0x16c>
 800b4c4:	2900      	cmp	r1, #0
 800b4c6:	bfd4      	ite	le
 800b4c8:	f1c1 0202 	rsble	r2, r1, #2
 800b4cc:	2201      	movgt	r2, #1
 800b4ce:	4413      	add	r3, r2
 800b4d0:	e7e0      	b.n	800b494 <_printf_float+0x16c>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	055a      	lsls	r2, r3, #21
 800b4d6:	d407      	bmi.n	800b4e8 <_printf_float+0x1c0>
 800b4d8:	6923      	ldr	r3, [r4, #16]
 800b4da:	4642      	mov	r2, r8
 800b4dc:	4631      	mov	r1, r6
 800b4de:	4628      	mov	r0, r5
 800b4e0:	47b8      	blx	r7
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	d12a      	bne.n	800b53c <_printf_float+0x214>
 800b4e6:	e76b      	b.n	800b3c0 <_printf_float+0x98>
 800b4e8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b4ec:	f240 80e0 	bls.w	800b6b0 <_printf_float+0x388>
 800b4f0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b4f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4fc:	d133      	bne.n	800b566 <_printf_float+0x23e>
 800b4fe:	4a38      	ldr	r2, [pc, #224]	@ (800b5e0 <_printf_float+0x2b8>)
 800b500:	2301      	movs	r3, #1
 800b502:	4631      	mov	r1, r6
 800b504:	4628      	mov	r0, r5
 800b506:	47b8      	blx	r7
 800b508:	3001      	adds	r0, #1
 800b50a:	f43f af59 	beq.w	800b3c0 <_printf_float+0x98>
 800b50e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b512:	4543      	cmp	r3, r8
 800b514:	db02      	blt.n	800b51c <_printf_float+0x1f4>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	07d8      	lsls	r0, r3, #31
 800b51a:	d50f      	bpl.n	800b53c <_printf_float+0x214>
 800b51c:	9b05      	ldr	r3, [sp, #20]
 800b51e:	465a      	mov	r2, fp
 800b520:	4631      	mov	r1, r6
 800b522:	4628      	mov	r0, r5
 800b524:	47b8      	blx	r7
 800b526:	3001      	adds	r0, #1
 800b528:	f43f af4a 	beq.w	800b3c0 <_printf_float+0x98>
 800b52c:	f04f 0900 	mov.w	r9, #0
 800b530:	f108 38ff 	add.w	r8, r8, #4294967295
 800b534:	f104 0a1a 	add.w	sl, r4, #26
 800b538:	45c8      	cmp	r8, r9
 800b53a:	dc09      	bgt.n	800b550 <_printf_float+0x228>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	079b      	lsls	r3, r3, #30
 800b540:	f100 8107 	bmi.w	800b752 <_printf_float+0x42a>
 800b544:	68e0      	ldr	r0, [r4, #12]
 800b546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b548:	4298      	cmp	r0, r3
 800b54a:	bfb8      	it	lt
 800b54c:	4618      	movlt	r0, r3
 800b54e:	e739      	b.n	800b3c4 <_printf_float+0x9c>
 800b550:	2301      	movs	r3, #1
 800b552:	4652      	mov	r2, sl
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	f43f af30 	beq.w	800b3c0 <_printf_float+0x98>
 800b560:	f109 0901 	add.w	r9, r9, #1
 800b564:	e7e8      	b.n	800b538 <_printf_float+0x210>
 800b566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b568:	2b00      	cmp	r3, #0
 800b56a:	dc3b      	bgt.n	800b5e4 <_printf_float+0x2bc>
 800b56c:	4a1c      	ldr	r2, [pc, #112]	@ (800b5e0 <_printf_float+0x2b8>)
 800b56e:	2301      	movs	r3, #1
 800b570:	4631      	mov	r1, r6
 800b572:	4628      	mov	r0, r5
 800b574:	47b8      	blx	r7
 800b576:	3001      	adds	r0, #1
 800b578:	f43f af22 	beq.w	800b3c0 <_printf_float+0x98>
 800b57c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b580:	ea59 0303 	orrs.w	r3, r9, r3
 800b584:	d102      	bne.n	800b58c <_printf_float+0x264>
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	07d9      	lsls	r1, r3, #31
 800b58a:	d5d7      	bpl.n	800b53c <_printf_float+0x214>
 800b58c:	9b05      	ldr	r3, [sp, #20]
 800b58e:	465a      	mov	r2, fp
 800b590:	4631      	mov	r1, r6
 800b592:	4628      	mov	r0, r5
 800b594:	47b8      	blx	r7
 800b596:	3001      	adds	r0, #1
 800b598:	f43f af12 	beq.w	800b3c0 <_printf_float+0x98>
 800b59c:	f04f 0a00 	mov.w	sl, #0
 800b5a0:	f104 0b1a 	add.w	fp, r4, #26
 800b5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a6:	425b      	negs	r3, r3
 800b5a8:	4553      	cmp	r3, sl
 800b5aa:	dc01      	bgt.n	800b5b0 <_printf_float+0x288>
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	e794      	b.n	800b4da <_printf_float+0x1b2>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	465a      	mov	r2, fp
 800b5b4:	4631      	mov	r1, r6
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	47b8      	blx	r7
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	f43f af00 	beq.w	800b3c0 <_printf_float+0x98>
 800b5c0:	f10a 0a01 	add.w	sl, sl, #1
 800b5c4:	e7ee      	b.n	800b5a4 <_printf_float+0x27c>
 800b5c6:	bf00      	nop
 800b5c8:	ffffffff 	.word	0xffffffff
 800b5cc:	7fefffff 	.word	0x7fefffff
 800b5d0:	0800f800 	.word	0x0800f800
 800b5d4:	0800f804 	.word	0x0800f804
 800b5d8:	0800f808 	.word	0x0800f808
 800b5dc:	0800f80c 	.word	0x0800f80c
 800b5e0:	0800f810 	.word	0x0800f810
 800b5e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b5e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5ea:	4553      	cmp	r3, sl
 800b5ec:	bfa8      	it	ge
 800b5ee:	4653      	movge	r3, sl
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	4699      	mov	r9, r3
 800b5f4:	dc37      	bgt.n	800b666 <_printf_float+0x33e>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	9307      	str	r3, [sp, #28]
 800b5fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5fe:	f104 021a 	add.w	r2, r4, #26
 800b602:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b604:	9907      	ldr	r1, [sp, #28]
 800b606:	9306      	str	r3, [sp, #24]
 800b608:	eba3 0309 	sub.w	r3, r3, r9
 800b60c:	428b      	cmp	r3, r1
 800b60e:	dc31      	bgt.n	800b674 <_printf_float+0x34c>
 800b610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b612:	459a      	cmp	sl, r3
 800b614:	dc3b      	bgt.n	800b68e <_printf_float+0x366>
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	07da      	lsls	r2, r3, #31
 800b61a:	d438      	bmi.n	800b68e <_printf_float+0x366>
 800b61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b61e:	ebaa 0903 	sub.w	r9, sl, r3
 800b622:	9b06      	ldr	r3, [sp, #24]
 800b624:	ebaa 0303 	sub.w	r3, sl, r3
 800b628:	4599      	cmp	r9, r3
 800b62a:	bfa8      	it	ge
 800b62c:	4699      	movge	r9, r3
 800b62e:	f1b9 0f00 	cmp.w	r9, #0
 800b632:	dc34      	bgt.n	800b69e <_printf_float+0x376>
 800b634:	f04f 0800 	mov.w	r8, #0
 800b638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b63c:	f104 0b1a 	add.w	fp, r4, #26
 800b640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b642:	ebaa 0303 	sub.w	r3, sl, r3
 800b646:	eba3 0309 	sub.w	r3, r3, r9
 800b64a:	4543      	cmp	r3, r8
 800b64c:	f77f af76 	ble.w	800b53c <_printf_float+0x214>
 800b650:	2301      	movs	r3, #1
 800b652:	465a      	mov	r2, fp
 800b654:	4631      	mov	r1, r6
 800b656:	4628      	mov	r0, r5
 800b658:	47b8      	blx	r7
 800b65a:	3001      	adds	r0, #1
 800b65c:	f43f aeb0 	beq.w	800b3c0 <_printf_float+0x98>
 800b660:	f108 0801 	add.w	r8, r8, #1
 800b664:	e7ec      	b.n	800b640 <_printf_float+0x318>
 800b666:	4642      	mov	r2, r8
 800b668:	4631      	mov	r1, r6
 800b66a:	4628      	mov	r0, r5
 800b66c:	47b8      	blx	r7
 800b66e:	3001      	adds	r0, #1
 800b670:	d1c1      	bne.n	800b5f6 <_printf_float+0x2ce>
 800b672:	e6a5      	b.n	800b3c0 <_printf_float+0x98>
 800b674:	2301      	movs	r3, #1
 800b676:	4631      	mov	r1, r6
 800b678:	4628      	mov	r0, r5
 800b67a:	9206      	str	r2, [sp, #24]
 800b67c:	47b8      	blx	r7
 800b67e:	3001      	adds	r0, #1
 800b680:	f43f ae9e 	beq.w	800b3c0 <_printf_float+0x98>
 800b684:	9b07      	ldr	r3, [sp, #28]
 800b686:	9a06      	ldr	r2, [sp, #24]
 800b688:	3301      	adds	r3, #1
 800b68a:	9307      	str	r3, [sp, #28]
 800b68c:	e7b9      	b.n	800b602 <_printf_float+0x2da>
 800b68e:	9b05      	ldr	r3, [sp, #20]
 800b690:	465a      	mov	r2, fp
 800b692:	4631      	mov	r1, r6
 800b694:	4628      	mov	r0, r5
 800b696:	47b8      	blx	r7
 800b698:	3001      	adds	r0, #1
 800b69a:	d1bf      	bne.n	800b61c <_printf_float+0x2f4>
 800b69c:	e690      	b.n	800b3c0 <_printf_float+0x98>
 800b69e:	9a06      	ldr	r2, [sp, #24]
 800b6a0:	464b      	mov	r3, r9
 800b6a2:	4442      	add	r2, r8
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	47b8      	blx	r7
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	d1c2      	bne.n	800b634 <_printf_float+0x30c>
 800b6ae:	e687      	b.n	800b3c0 <_printf_float+0x98>
 800b6b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b6b4:	f1b9 0f01 	cmp.w	r9, #1
 800b6b8:	dc01      	bgt.n	800b6be <_printf_float+0x396>
 800b6ba:	07db      	lsls	r3, r3, #31
 800b6bc:	d536      	bpl.n	800b72c <_printf_float+0x404>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	4642      	mov	r2, r8
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	47b8      	blx	r7
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	f43f ae79 	beq.w	800b3c0 <_printf_float+0x98>
 800b6ce:	9b05      	ldr	r3, [sp, #20]
 800b6d0:	465a      	mov	r2, fp
 800b6d2:	4631      	mov	r1, r6
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	47b8      	blx	r7
 800b6d8:	3001      	adds	r0, #1
 800b6da:	f43f ae71 	beq.w	800b3c0 <_printf_float+0x98>
 800b6de:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b6e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ea:	f109 39ff 	add.w	r9, r9, #4294967295
 800b6ee:	d018      	beq.n	800b722 <_printf_float+0x3fa>
 800b6f0:	464b      	mov	r3, r9
 800b6f2:	f108 0201 	add.w	r2, r8, #1
 800b6f6:	4631      	mov	r1, r6
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	47b8      	blx	r7
 800b6fc:	3001      	adds	r0, #1
 800b6fe:	d10c      	bne.n	800b71a <_printf_float+0x3f2>
 800b700:	e65e      	b.n	800b3c0 <_printf_float+0x98>
 800b702:	2301      	movs	r3, #1
 800b704:	465a      	mov	r2, fp
 800b706:	4631      	mov	r1, r6
 800b708:	4628      	mov	r0, r5
 800b70a:	47b8      	blx	r7
 800b70c:	3001      	adds	r0, #1
 800b70e:	f43f ae57 	beq.w	800b3c0 <_printf_float+0x98>
 800b712:	f108 0801 	add.w	r8, r8, #1
 800b716:	45c8      	cmp	r8, r9
 800b718:	dbf3      	blt.n	800b702 <_printf_float+0x3da>
 800b71a:	4653      	mov	r3, sl
 800b71c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b720:	e6dc      	b.n	800b4dc <_printf_float+0x1b4>
 800b722:	f04f 0800 	mov.w	r8, #0
 800b726:	f104 0b1a 	add.w	fp, r4, #26
 800b72a:	e7f4      	b.n	800b716 <_printf_float+0x3ee>
 800b72c:	2301      	movs	r3, #1
 800b72e:	4642      	mov	r2, r8
 800b730:	e7e1      	b.n	800b6f6 <_printf_float+0x3ce>
 800b732:	2301      	movs	r3, #1
 800b734:	464a      	mov	r2, r9
 800b736:	4631      	mov	r1, r6
 800b738:	4628      	mov	r0, r5
 800b73a:	47b8      	blx	r7
 800b73c:	3001      	adds	r0, #1
 800b73e:	f43f ae3f 	beq.w	800b3c0 <_printf_float+0x98>
 800b742:	f108 0801 	add.w	r8, r8, #1
 800b746:	68e3      	ldr	r3, [r4, #12]
 800b748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b74a:	1a5b      	subs	r3, r3, r1
 800b74c:	4543      	cmp	r3, r8
 800b74e:	dcf0      	bgt.n	800b732 <_printf_float+0x40a>
 800b750:	e6f8      	b.n	800b544 <_printf_float+0x21c>
 800b752:	f04f 0800 	mov.w	r8, #0
 800b756:	f104 0919 	add.w	r9, r4, #25
 800b75a:	e7f4      	b.n	800b746 <_printf_float+0x41e>

0800b75c <_printf_common>:
 800b75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b760:	4616      	mov	r6, r2
 800b762:	4698      	mov	r8, r3
 800b764:	688a      	ldr	r2, [r1, #8]
 800b766:	690b      	ldr	r3, [r1, #16]
 800b768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b76c:	4293      	cmp	r3, r2
 800b76e:	bfb8      	it	lt
 800b770:	4613      	movlt	r3, r2
 800b772:	6033      	str	r3, [r6, #0]
 800b774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b778:	4607      	mov	r7, r0
 800b77a:	460c      	mov	r4, r1
 800b77c:	b10a      	cbz	r2, 800b782 <_printf_common+0x26>
 800b77e:	3301      	adds	r3, #1
 800b780:	6033      	str	r3, [r6, #0]
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	0699      	lsls	r1, r3, #26
 800b786:	bf42      	ittt	mi
 800b788:	6833      	ldrmi	r3, [r6, #0]
 800b78a:	3302      	addmi	r3, #2
 800b78c:	6033      	strmi	r3, [r6, #0]
 800b78e:	6825      	ldr	r5, [r4, #0]
 800b790:	f015 0506 	ands.w	r5, r5, #6
 800b794:	d106      	bne.n	800b7a4 <_printf_common+0x48>
 800b796:	f104 0a19 	add.w	sl, r4, #25
 800b79a:	68e3      	ldr	r3, [r4, #12]
 800b79c:	6832      	ldr	r2, [r6, #0]
 800b79e:	1a9b      	subs	r3, r3, r2
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	dc26      	bgt.n	800b7f2 <_printf_common+0x96>
 800b7a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7a8:	6822      	ldr	r2, [r4, #0]
 800b7aa:	3b00      	subs	r3, #0
 800b7ac:	bf18      	it	ne
 800b7ae:	2301      	movne	r3, #1
 800b7b0:	0692      	lsls	r2, r2, #26
 800b7b2:	d42b      	bmi.n	800b80c <_printf_common+0xb0>
 800b7b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7b8:	4641      	mov	r1, r8
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	47c8      	blx	r9
 800b7be:	3001      	adds	r0, #1
 800b7c0:	d01e      	beq.n	800b800 <_printf_common+0xa4>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	6922      	ldr	r2, [r4, #16]
 800b7c6:	f003 0306 	and.w	r3, r3, #6
 800b7ca:	2b04      	cmp	r3, #4
 800b7cc:	bf02      	ittt	eq
 800b7ce:	68e5      	ldreq	r5, [r4, #12]
 800b7d0:	6833      	ldreq	r3, [r6, #0]
 800b7d2:	1aed      	subeq	r5, r5, r3
 800b7d4:	68a3      	ldr	r3, [r4, #8]
 800b7d6:	bf0c      	ite	eq
 800b7d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7dc:	2500      	movne	r5, #0
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	bfc4      	itt	gt
 800b7e2:	1a9b      	subgt	r3, r3, r2
 800b7e4:	18ed      	addgt	r5, r5, r3
 800b7e6:	2600      	movs	r6, #0
 800b7e8:	341a      	adds	r4, #26
 800b7ea:	42b5      	cmp	r5, r6
 800b7ec:	d11a      	bne.n	800b824 <_printf_common+0xc8>
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	e008      	b.n	800b804 <_printf_common+0xa8>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	4652      	mov	r2, sl
 800b7f6:	4641      	mov	r1, r8
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	47c8      	blx	r9
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d103      	bne.n	800b808 <_printf_common+0xac>
 800b800:	f04f 30ff 	mov.w	r0, #4294967295
 800b804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b808:	3501      	adds	r5, #1
 800b80a:	e7c6      	b.n	800b79a <_printf_common+0x3e>
 800b80c:	18e1      	adds	r1, r4, r3
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	2030      	movs	r0, #48	@ 0x30
 800b812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b816:	4422      	add	r2, r4
 800b818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b81c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b820:	3302      	adds	r3, #2
 800b822:	e7c7      	b.n	800b7b4 <_printf_common+0x58>
 800b824:	2301      	movs	r3, #1
 800b826:	4622      	mov	r2, r4
 800b828:	4641      	mov	r1, r8
 800b82a:	4638      	mov	r0, r7
 800b82c:	47c8      	blx	r9
 800b82e:	3001      	adds	r0, #1
 800b830:	d0e6      	beq.n	800b800 <_printf_common+0xa4>
 800b832:	3601      	adds	r6, #1
 800b834:	e7d9      	b.n	800b7ea <_printf_common+0x8e>
	...

0800b838 <_printf_i>:
 800b838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b83c:	7e0f      	ldrb	r7, [r1, #24]
 800b83e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b840:	2f78      	cmp	r7, #120	@ 0x78
 800b842:	4691      	mov	r9, r2
 800b844:	4680      	mov	r8, r0
 800b846:	460c      	mov	r4, r1
 800b848:	469a      	mov	sl, r3
 800b84a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b84e:	d807      	bhi.n	800b860 <_printf_i+0x28>
 800b850:	2f62      	cmp	r7, #98	@ 0x62
 800b852:	d80a      	bhi.n	800b86a <_printf_i+0x32>
 800b854:	2f00      	cmp	r7, #0
 800b856:	f000 80d2 	beq.w	800b9fe <_printf_i+0x1c6>
 800b85a:	2f58      	cmp	r7, #88	@ 0x58
 800b85c:	f000 80b9 	beq.w	800b9d2 <_printf_i+0x19a>
 800b860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b868:	e03a      	b.n	800b8e0 <_printf_i+0xa8>
 800b86a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b86e:	2b15      	cmp	r3, #21
 800b870:	d8f6      	bhi.n	800b860 <_printf_i+0x28>
 800b872:	a101      	add	r1, pc, #4	@ (adr r1, 800b878 <_printf_i+0x40>)
 800b874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b878:	0800b8d1 	.word	0x0800b8d1
 800b87c:	0800b8e5 	.word	0x0800b8e5
 800b880:	0800b861 	.word	0x0800b861
 800b884:	0800b861 	.word	0x0800b861
 800b888:	0800b861 	.word	0x0800b861
 800b88c:	0800b861 	.word	0x0800b861
 800b890:	0800b8e5 	.word	0x0800b8e5
 800b894:	0800b861 	.word	0x0800b861
 800b898:	0800b861 	.word	0x0800b861
 800b89c:	0800b861 	.word	0x0800b861
 800b8a0:	0800b861 	.word	0x0800b861
 800b8a4:	0800b9e5 	.word	0x0800b9e5
 800b8a8:	0800b90f 	.word	0x0800b90f
 800b8ac:	0800b99f 	.word	0x0800b99f
 800b8b0:	0800b861 	.word	0x0800b861
 800b8b4:	0800b861 	.word	0x0800b861
 800b8b8:	0800ba07 	.word	0x0800ba07
 800b8bc:	0800b861 	.word	0x0800b861
 800b8c0:	0800b90f 	.word	0x0800b90f
 800b8c4:	0800b861 	.word	0x0800b861
 800b8c8:	0800b861 	.word	0x0800b861
 800b8cc:	0800b9a7 	.word	0x0800b9a7
 800b8d0:	6833      	ldr	r3, [r6, #0]
 800b8d2:	1d1a      	adds	r2, r3, #4
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6032      	str	r2, [r6, #0]
 800b8d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e09d      	b.n	800ba20 <_printf_i+0x1e8>
 800b8e4:	6833      	ldr	r3, [r6, #0]
 800b8e6:	6820      	ldr	r0, [r4, #0]
 800b8e8:	1d19      	adds	r1, r3, #4
 800b8ea:	6031      	str	r1, [r6, #0]
 800b8ec:	0606      	lsls	r6, r0, #24
 800b8ee:	d501      	bpl.n	800b8f4 <_printf_i+0xbc>
 800b8f0:	681d      	ldr	r5, [r3, #0]
 800b8f2:	e003      	b.n	800b8fc <_printf_i+0xc4>
 800b8f4:	0645      	lsls	r5, r0, #25
 800b8f6:	d5fb      	bpl.n	800b8f0 <_printf_i+0xb8>
 800b8f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8fc:	2d00      	cmp	r5, #0
 800b8fe:	da03      	bge.n	800b908 <_printf_i+0xd0>
 800b900:	232d      	movs	r3, #45	@ 0x2d
 800b902:	426d      	negs	r5, r5
 800b904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b908:	4859      	ldr	r0, [pc, #356]	@ (800ba70 <_printf_i+0x238>)
 800b90a:	230a      	movs	r3, #10
 800b90c:	e011      	b.n	800b932 <_printf_i+0xfa>
 800b90e:	6821      	ldr	r1, [r4, #0]
 800b910:	6833      	ldr	r3, [r6, #0]
 800b912:	0608      	lsls	r0, r1, #24
 800b914:	f853 5b04 	ldr.w	r5, [r3], #4
 800b918:	d402      	bmi.n	800b920 <_printf_i+0xe8>
 800b91a:	0649      	lsls	r1, r1, #25
 800b91c:	bf48      	it	mi
 800b91e:	b2ad      	uxthmi	r5, r5
 800b920:	2f6f      	cmp	r7, #111	@ 0x6f
 800b922:	4853      	ldr	r0, [pc, #332]	@ (800ba70 <_printf_i+0x238>)
 800b924:	6033      	str	r3, [r6, #0]
 800b926:	bf14      	ite	ne
 800b928:	230a      	movne	r3, #10
 800b92a:	2308      	moveq	r3, #8
 800b92c:	2100      	movs	r1, #0
 800b92e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b932:	6866      	ldr	r6, [r4, #4]
 800b934:	60a6      	str	r6, [r4, #8]
 800b936:	2e00      	cmp	r6, #0
 800b938:	bfa2      	ittt	ge
 800b93a:	6821      	ldrge	r1, [r4, #0]
 800b93c:	f021 0104 	bicge.w	r1, r1, #4
 800b940:	6021      	strge	r1, [r4, #0]
 800b942:	b90d      	cbnz	r5, 800b948 <_printf_i+0x110>
 800b944:	2e00      	cmp	r6, #0
 800b946:	d04b      	beq.n	800b9e0 <_printf_i+0x1a8>
 800b948:	4616      	mov	r6, r2
 800b94a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b94e:	fb03 5711 	mls	r7, r3, r1, r5
 800b952:	5dc7      	ldrb	r7, [r0, r7]
 800b954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b958:	462f      	mov	r7, r5
 800b95a:	42bb      	cmp	r3, r7
 800b95c:	460d      	mov	r5, r1
 800b95e:	d9f4      	bls.n	800b94a <_printf_i+0x112>
 800b960:	2b08      	cmp	r3, #8
 800b962:	d10b      	bne.n	800b97c <_printf_i+0x144>
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	07df      	lsls	r7, r3, #31
 800b968:	d508      	bpl.n	800b97c <_printf_i+0x144>
 800b96a:	6923      	ldr	r3, [r4, #16]
 800b96c:	6861      	ldr	r1, [r4, #4]
 800b96e:	4299      	cmp	r1, r3
 800b970:	bfde      	ittt	le
 800b972:	2330      	movle	r3, #48	@ 0x30
 800b974:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b97c:	1b92      	subs	r2, r2, r6
 800b97e:	6122      	str	r2, [r4, #16]
 800b980:	f8cd a000 	str.w	sl, [sp]
 800b984:	464b      	mov	r3, r9
 800b986:	aa03      	add	r2, sp, #12
 800b988:	4621      	mov	r1, r4
 800b98a:	4640      	mov	r0, r8
 800b98c:	f7ff fee6 	bl	800b75c <_printf_common>
 800b990:	3001      	adds	r0, #1
 800b992:	d14a      	bne.n	800ba2a <_printf_i+0x1f2>
 800b994:	f04f 30ff 	mov.w	r0, #4294967295
 800b998:	b004      	add	sp, #16
 800b99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	f043 0320 	orr.w	r3, r3, #32
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	4833      	ldr	r0, [pc, #204]	@ (800ba74 <_printf_i+0x23c>)
 800b9a8:	2778      	movs	r7, #120	@ 0x78
 800b9aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	6831      	ldr	r1, [r6, #0]
 800b9b2:	061f      	lsls	r7, r3, #24
 800b9b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9b8:	d402      	bmi.n	800b9c0 <_printf_i+0x188>
 800b9ba:	065f      	lsls	r7, r3, #25
 800b9bc:	bf48      	it	mi
 800b9be:	b2ad      	uxthmi	r5, r5
 800b9c0:	6031      	str	r1, [r6, #0]
 800b9c2:	07d9      	lsls	r1, r3, #31
 800b9c4:	bf44      	itt	mi
 800b9c6:	f043 0320 	orrmi.w	r3, r3, #32
 800b9ca:	6023      	strmi	r3, [r4, #0]
 800b9cc:	b11d      	cbz	r5, 800b9d6 <_printf_i+0x19e>
 800b9ce:	2310      	movs	r3, #16
 800b9d0:	e7ac      	b.n	800b92c <_printf_i+0xf4>
 800b9d2:	4827      	ldr	r0, [pc, #156]	@ (800ba70 <_printf_i+0x238>)
 800b9d4:	e7e9      	b.n	800b9aa <_printf_i+0x172>
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	f023 0320 	bic.w	r3, r3, #32
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	e7f6      	b.n	800b9ce <_printf_i+0x196>
 800b9e0:	4616      	mov	r6, r2
 800b9e2:	e7bd      	b.n	800b960 <_printf_i+0x128>
 800b9e4:	6833      	ldr	r3, [r6, #0]
 800b9e6:	6825      	ldr	r5, [r4, #0]
 800b9e8:	6961      	ldr	r1, [r4, #20]
 800b9ea:	1d18      	adds	r0, r3, #4
 800b9ec:	6030      	str	r0, [r6, #0]
 800b9ee:	062e      	lsls	r6, r5, #24
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	d501      	bpl.n	800b9f8 <_printf_i+0x1c0>
 800b9f4:	6019      	str	r1, [r3, #0]
 800b9f6:	e002      	b.n	800b9fe <_printf_i+0x1c6>
 800b9f8:	0668      	lsls	r0, r5, #25
 800b9fa:	d5fb      	bpl.n	800b9f4 <_printf_i+0x1bc>
 800b9fc:	8019      	strh	r1, [r3, #0]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	6123      	str	r3, [r4, #16]
 800ba02:	4616      	mov	r6, r2
 800ba04:	e7bc      	b.n	800b980 <_printf_i+0x148>
 800ba06:	6833      	ldr	r3, [r6, #0]
 800ba08:	1d1a      	adds	r2, r3, #4
 800ba0a:	6032      	str	r2, [r6, #0]
 800ba0c:	681e      	ldr	r6, [r3, #0]
 800ba0e:	6862      	ldr	r2, [r4, #4]
 800ba10:	2100      	movs	r1, #0
 800ba12:	4630      	mov	r0, r6
 800ba14:	f7f4 fc7c 	bl	8000310 <memchr>
 800ba18:	b108      	cbz	r0, 800ba1e <_printf_i+0x1e6>
 800ba1a:	1b80      	subs	r0, r0, r6
 800ba1c:	6060      	str	r0, [r4, #4]
 800ba1e:	6863      	ldr	r3, [r4, #4]
 800ba20:	6123      	str	r3, [r4, #16]
 800ba22:	2300      	movs	r3, #0
 800ba24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba28:	e7aa      	b.n	800b980 <_printf_i+0x148>
 800ba2a:	6923      	ldr	r3, [r4, #16]
 800ba2c:	4632      	mov	r2, r6
 800ba2e:	4649      	mov	r1, r9
 800ba30:	4640      	mov	r0, r8
 800ba32:	47d0      	blx	sl
 800ba34:	3001      	adds	r0, #1
 800ba36:	d0ad      	beq.n	800b994 <_printf_i+0x15c>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	079b      	lsls	r3, r3, #30
 800ba3c:	d413      	bmi.n	800ba66 <_printf_i+0x22e>
 800ba3e:	68e0      	ldr	r0, [r4, #12]
 800ba40:	9b03      	ldr	r3, [sp, #12]
 800ba42:	4298      	cmp	r0, r3
 800ba44:	bfb8      	it	lt
 800ba46:	4618      	movlt	r0, r3
 800ba48:	e7a6      	b.n	800b998 <_printf_i+0x160>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	4632      	mov	r2, r6
 800ba4e:	4649      	mov	r1, r9
 800ba50:	4640      	mov	r0, r8
 800ba52:	47d0      	blx	sl
 800ba54:	3001      	adds	r0, #1
 800ba56:	d09d      	beq.n	800b994 <_printf_i+0x15c>
 800ba58:	3501      	adds	r5, #1
 800ba5a:	68e3      	ldr	r3, [r4, #12]
 800ba5c:	9903      	ldr	r1, [sp, #12]
 800ba5e:	1a5b      	subs	r3, r3, r1
 800ba60:	42ab      	cmp	r3, r5
 800ba62:	dcf2      	bgt.n	800ba4a <_printf_i+0x212>
 800ba64:	e7eb      	b.n	800ba3e <_printf_i+0x206>
 800ba66:	2500      	movs	r5, #0
 800ba68:	f104 0619 	add.w	r6, r4, #25
 800ba6c:	e7f5      	b.n	800ba5a <_printf_i+0x222>
 800ba6e:	bf00      	nop
 800ba70:	0800f812 	.word	0x0800f812
 800ba74:	0800f823 	.word	0x0800f823

0800ba78 <_scanf_float>:
 800ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	b087      	sub	sp, #28
 800ba7e:	4617      	mov	r7, r2
 800ba80:	9303      	str	r3, [sp, #12]
 800ba82:	688b      	ldr	r3, [r1, #8]
 800ba84:	1e5a      	subs	r2, r3, #1
 800ba86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ba8a:	bf81      	itttt	hi
 800ba8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ba90:	eb03 0b05 	addhi.w	fp, r3, r5
 800ba94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ba98:	608b      	strhi	r3, [r1, #8]
 800ba9a:	680b      	ldr	r3, [r1, #0]
 800ba9c:	460a      	mov	r2, r1
 800ba9e:	f04f 0500 	mov.w	r5, #0
 800baa2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800baa6:	f842 3b1c 	str.w	r3, [r2], #28
 800baaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800baae:	4680      	mov	r8, r0
 800bab0:	460c      	mov	r4, r1
 800bab2:	bf98      	it	ls
 800bab4:	f04f 0b00 	movls.w	fp, #0
 800bab8:	9201      	str	r2, [sp, #4]
 800baba:	4616      	mov	r6, r2
 800babc:	46aa      	mov	sl, r5
 800babe:	46a9      	mov	r9, r5
 800bac0:	9502      	str	r5, [sp, #8]
 800bac2:	68a2      	ldr	r2, [r4, #8]
 800bac4:	b152      	cbz	r2, 800badc <_scanf_float+0x64>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	2b4e      	cmp	r3, #78	@ 0x4e
 800bacc:	d864      	bhi.n	800bb98 <_scanf_float+0x120>
 800bace:	2b40      	cmp	r3, #64	@ 0x40
 800bad0:	d83c      	bhi.n	800bb4c <_scanf_float+0xd4>
 800bad2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bad6:	b2c8      	uxtb	r0, r1
 800bad8:	280e      	cmp	r0, #14
 800bada:	d93a      	bls.n	800bb52 <_scanf_float+0xda>
 800badc:	f1b9 0f00 	cmp.w	r9, #0
 800bae0:	d003      	beq.n	800baea <_scanf_float+0x72>
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800baee:	f1ba 0f01 	cmp.w	sl, #1
 800baf2:	f200 8117 	bhi.w	800bd24 <_scanf_float+0x2ac>
 800baf6:	9b01      	ldr	r3, [sp, #4]
 800baf8:	429e      	cmp	r6, r3
 800bafa:	f200 8108 	bhi.w	800bd0e <_scanf_float+0x296>
 800bafe:	2001      	movs	r0, #1
 800bb00:	b007      	add	sp, #28
 800bb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb06:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bb0a:	2a0d      	cmp	r2, #13
 800bb0c:	d8e6      	bhi.n	800badc <_scanf_float+0x64>
 800bb0e:	a101      	add	r1, pc, #4	@ (adr r1, 800bb14 <_scanf_float+0x9c>)
 800bb10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb14:	0800bc5b 	.word	0x0800bc5b
 800bb18:	0800badd 	.word	0x0800badd
 800bb1c:	0800badd 	.word	0x0800badd
 800bb20:	0800badd 	.word	0x0800badd
 800bb24:	0800bcbb 	.word	0x0800bcbb
 800bb28:	0800bc93 	.word	0x0800bc93
 800bb2c:	0800badd 	.word	0x0800badd
 800bb30:	0800badd 	.word	0x0800badd
 800bb34:	0800bc69 	.word	0x0800bc69
 800bb38:	0800badd 	.word	0x0800badd
 800bb3c:	0800badd 	.word	0x0800badd
 800bb40:	0800badd 	.word	0x0800badd
 800bb44:	0800badd 	.word	0x0800badd
 800bb48:	0800bc21 	.word	0x0800bc21
 800bb4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bb50:	e7db      	b.n	800bb0a <_scanf_float+0x92>
 800bb52:	290e      	cmp	r1, #14
 800bb54:	d8c2      	bhi.n	800badc <_scanf_float+0x64>
 800bb56:	a001      	add	r0, pc, #4	@ (adr r0, 800bb5c <_scanf_float+0xe4>)
 800bb58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb5c:	0800bc11 	.word	0x0800bc11
 800bb60:	0800badd 	.word	0x0800badd
 800bb64:	0800bc11 	.word	0x0800bc11
 800bb68:	0800bca7 	.word	0x0800bca7
 800bb6c:	0800badd 	.word	0x0800badd
 800bb70:	0800bbb9 	.word	0x0800bbb9
 800bb74:	0800bbf7 	.word	0x0800bbf7
 800bb78:	0800bbf7 	.word	0x0800bbf7
 800bb7c:	0800bbf7 	.word	0x0800bbf7
 800bb80:	0800bbf7 	.word	0x0800bbf7
 800bb84:	0800bbf7 	.word	0x0800bbf7
 800bb88:	0800bbf7 	.word	0x0800bbf7
 800bb8c:	0800bbf7 	.word	0x0800bbf7
 800bb90:	0800bbf7 	.word	0x0800bbf7
 800bb94:	0800bbf7 	.word	0x0800bbf7
 800bb98:	2b6e      	cmp	r3, #110	@ 0x6e
 800bb9a:	d809      	bhi.n	800bbb0 <_scanf_float+0x138>
 800bb9c:	2b60      	cmp	r3, #96	@ 0x60
 800bb9e:	d8b2      	bhi.n	800bb06 <_scanf_float+0x8e>
 800bba0:	2b54      	cmp	r3, #84	@ 0x54
 800bba2:	d07b      	beq.n	800bc9c <_scanf_float+0x224>
 800bba4:	2b59      	cmp	r3, #89	@ 0x59
 800bba6:	d199      	bne.n	800badc <_scanf_float+0x64>
 800bba8:	2d07      	cmp	r5, #7
 800bbaa:	d197      	bne.n	800badc <_scanf_float+0x64>
 800bbac:	2508      	movs	r5, #8
 800bbae:	e02c      	b.n	800bc0a <_scanf_float+0x192>
 800bbb0:	2b74      	cmp	r3, #116	@ 0x74
 800bbb2:	d073      	beq.n	800bc9c <_scanf_float+0x224>
 800bbb4:	2b79      	cmp	r3, #121	@ 0x79
 800bbb6:	e7f6      	b.n	800bba6 <_scanf_float+0x12e>
 800bbb8:	6821      	ldr	r1, [r4, #0]
 800bbba:	05c8      	lsls	r0, r1, #23
 800bbbc:	d51b      	bpl.n	800bbf6 <_scanf_float+0x17e>
 800bbbe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bbc2:	6021      	str	r1, [r4, #0]
 800bbc4:	f109 0901 	add.w	r9, r9, #1
 800bbc8:	f1bb 0f00 	cmp.w	fp, #0
 800bbcc:	d003      	beq.n	800bbd6 <_scanf_float+0x15e>
 800bbce:	3201      	adds	r2, #1
 800bbd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbd4:	60a2      	str	r2, [r4, #8]
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	60a3      	str	r3, [r4, #8]
 800bbdc:	6923      	ldr	r3, [r4, #16]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	6123      	str	r3, [r4, #16]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	607b      	str	r3, [r7, #4]
 800bbea:	f340 8087 	ble.w	800bcfc <_scanf_float+0x284>
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	603b      	str	r3, [r7, #0]
 800bbf4:	e765      	b.n	800bac2 <_scanf_float+0x4a>
 800bbf6:	eb1a 0105 	adds.w	r1, sl, r5
 800bbfa:	f47f af6f 	bne.w	800badc <_scanf_float+0x64>
 800bbfe:	6822      	ldr	r2, [r4, #0]
 800bc00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bc04:	6022      	str	r2, [r4, #0]
 800bc06:	460d      	mov	r5, r1
 800bc08:	468a      	mov	sl, r1
 800bc0a:	f806 3b01 	strb.w	r3, [r6], #1
 800bc0e:	e7e2      	b.n	800bbd6 <_scanf_float+0x15e>
 800bc10:	6822      	ldr	r2, [r4, #0]
 800bc12:	0610      	lsls	r0, r2, #24
 800bc14:	f57f af62 	bpl.w	800badc <_scanf_float+0x64>
 800bc18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bc1c:	6022      	str	r2, [r4, #0]
 800bc1e:	e7f4      	b.n	800bc0a <_scanf_float+0x192>
 800bc20:	f1ba 0f00 	cmp.w	sl, #0
 800bc24:	d10e      	bne.n	800bc44 <_scanf_float+0x1cc>
 800bc26:	f1b9 0f00 	cmp.w	r9, #0
 800bc2a:	d10e      	bne.n	800bc4a <_scanf_float+0x1d2>
 800bc2c:	6822      	ldr	r2, [r4, #0]
 800bc2e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bc32:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bc36:	d108      	bne.n	800bc4a <_scanf_float+0x1d2>
 800bc38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc3c:	6022      	str	r2, [r4, #0]
 800bc3e:	f04f 0a01 	mov.w	sl, #1
 800bc42:	e7e2      	b.n	800bc0a <_scanf_float+0x192>
 800bc44:	f1ba 0f02 	cmp.w	sl, #2
 800bc48:	d055      	beq.n	800bcf6 <_scanf_float+0x27e>
 800bc4a:	2d01      	cmp	r5, #1
 800bc4c:	d002      	beq.n	800bc54 <_scanf_float+0x1dc>
 800bc4e:	2d04      	cmp	r5, #4
 800bc50:	f47f af44 	bne.w	800badc <_scanf_float+0x64>
 800bc54:	3501      	adds	r5, #1
 800bc56:	b2ed      	uxtb	r5, r5
 800bc58:	e7d7      	b.n	800bc0a <_scanf_float+0x192>
 800bc5a:	f1ba 0f01 	cmp.w	sl, #1
 800bc5e:	f47f af3d 	bne.w	800badc <_scanf_float+0x64>
 800bc62:	f04f 0a02 	mov.w	sl, #2
 800bc66:	e7d0      	b.n	800bc0a <_scanf_float+0x192>
 800bc68:	b97d      	cbnz	r5, 800bc8a <_scanf_float+0x212>
 800bc6a:	f1b9 0f00 	cmp.w	r9, #0
 800bc6e:	f47f af38 	bne.w	800bae2 <_scanf_float+0x6a>
 800bc72:	6822      	ldr	r2, [r4, #0]
 800bc74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bc78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bc7c:	f040 8101 	bne.w	800be82 <_scanf_float+0x40a>
 800bc80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc84:	6022      	str	r2, [r4, #0]
 800bc86:	2501      	movs	r5, #1
 800bc88:	e7bf      	b.n	800bc0a <_scanf_float+0x192>
 800bc8a:	2d03      	cmp	r5, #3
 800bc8c:	d0e2      	beq.n	800bc54 <_scanf_float+0x1dc>
 800bc8e:	2d05      	cmp	r5, #5
 800bc90:	e7de      	b.n	800bc50 <_scanf_float+0x1d8>
 800bc92:	2d02      	cmp	r5, #2
 800bc94:	f47f af22 	bne.w	800badc <_scanf_float+0x64>
 800bc98:	2503      	movs	r5, #3
 800bc9a:	e7b6      	b.n	800bc0a <_scanf_float+0x192>
 800bc9c:	2d06      	cmp	r5, #6
 800bc9e:	f47f af1d 	bne.w	800badc <_scanf_float+0x64>
 800bca2:	2507      	movs	r5, #7
 800bca4:	e7b1      	b.n	800bc0a <_scanf_float+0x192>
 800bca6:	6822      	ldr	r2, [r4, #0]
 800bca8:	0591      	lsls	r1, r2, #22
 800bcaa:	f57f af17 	bpl.w	800badc <_scanf_float+0x64>
 800bcae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bcb2:	6022      	str	r2, [r4, #0]
 800bcb4:	f8cd 9008 	str.w	r9, [sp, #8]
 800bcb8:	e7a7      	b.n	800bc0a <_scanf_float+0x192>
 800bcba:	6822      	ldr	r2, [r4, #0]
 800bcbc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bcc0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bcc4:	d006      	beq.n	800bcd4 <_scanf_float+0x25c>
 800bcc6:	0550      	lsls	r0, r2, #21
 800bcc8:	f57f af08 	bpl.w	800badc <_scanf_float+0x64>
 800bccc:	f1b9 0f00 	cmp.w	r9, #0
 800bcd0:	f000 80d7 	beq.w	800be82 <_scanf_float+0x40a>
 800bcd4:	0591      	lsls	r1, r2, #22
 800bcd6:	bf58      	it	pl
 800bcd8:	9902      	ldrpl	r1, [sp, #8]
 800bcda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bcde:	bf58      	it	pl
 800bce0:	eba9 0101 	subpl.w	r1, r9, r1
 800bce4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bce8:	bf58      	it	pl
 800bcea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bcee:	6022      	str	r2, [r4, #0]
 800bcf0:	f04f 0900 	mov.w	r9, #0
 800bcf4:	e789      	b.n	800bc0a <_scanf_float+0x192>
 800bcf6:	f04f 0a03 	mov.w	sl, #3
 800bcfa:	e786      	b.n	800bc0a <_scanf_float+0x192>
 800bcfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bd00:	4639      	mov	r1, r7
 800bd02:	4640      	mov	r0, r8
 800bd04:	4798      	blx	r3
 800bd06:	2800      	cmp	r0, #0
 800bd08:	f43f aedb 	beq.w	800bac2 <_scanf_float+0x4a>
 800bd0c:	e6e6      	b.n	800badc <_scanf_float+0x64>
 800bd0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd16:	463a      	mov	r2, r7
 800bd18:	4640      	mov	r0, r8
 800bd1a:	4798      	blx	r3
 800bd1c:	6923      	ldr	r3, [r4, #16]
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	6123      	str	r3, [r4, #16]
 800bd22:	e6e8      	b.n	800baf6 <_scanf_float+0x7e>
 800bd24:	1e6b      	subs	r3, r5, #1
 800bd26:	2b06      	cmp	r3, #6
 800bd28:	d824      	bhi.n	800bd74 <_scanf_float+0x2fc>
 800bd2a:	2d02      	cmp	r5, #2
 800bd2c:	d836      	bhi.n	800bd9c <_scanf_float+0x324>
 800bd2e:	9b01      	ldr	r3, [sp, #4]
 800bd30:	429e      	cmp	r6, r3
 800bd32:	f67f aee4 	bls.w	800bafe <_scanf_float+0x86>
 800bd36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd3e:	463a      	mov	r2, r7
 800bd40:	4640      	mov	r0, r8
 800bd42:	4798      	blx	r3
 800bd44:	6923      	ldr	r3, [r4, #16]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	6123      	str	r3, [r4, #16]
 800bd4a:	e7f0      	b.n	800bd2e <_scanf_float+0x2b6>
 800bd4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd50:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bd54:	463a      	mov	r2, r7
 800bd56:	4640      	mov	r0, r8
 800bd58:	4798      	blx	r3
 800bd5a:	6923      	ldr	r3, [r4, #16]
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	6123      	str	r3, [r4, #16]
 800bd60:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd64:	fa5f fa8a 	uxtb.w	sl, sl
 800bd68:	f1ba 0f02 	cmp.w	sl, #2
 800bd6c:	d1ee      	bne.n	800bd4c <_scanf_float+0x2d4>
 800bd6e:	3d03      	subs	r5, #3
 800bd70:	b2ed      	uxtb	r5, r5
 800bd72:	1b76      	subs	r6, r6, r5
 800bd74:	6823      	ldr	r3, [r4, #0]
 800bd76:	05da      	lsls	r2, r3, #23
 800bd78:	d530      	bpl.n	800bddc <_scanf_float+0x364>
 800bd7a:	055b      	lsls	r3, r3, #21
 800bd7c:	d511      	bpl.n	800bda2 <_scanf_float+0x32a>
 800bd7e:	9b01      	ldr	r3, [sp, #4]
 800bd80:	429e      	cmp	r6, r3
 800bd82:	f67f aebc 	bls.w	800bafe <_scanf_float+0x86>
 800bd86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd8e:	463a      	mov	r2, r7
 800bd90:	4640      	mov	r0, r8
 800bd92:	4798      	blx	r3
 800bd94:	6923      	ldr	r3, [r4, #16]
 800bd96:	3b01      	subs	r3, #1
 800bd98:	6123      	str	r3, [r4, #16]
 800bd9a:	e7f0      	b.n	800bd7e <_scanf_float+0x306>
 800bd9c:	46aa      	mov	sl, r5
 800bd9e:	46b3      	mov	fp, r6
 800bda0:	e7de      	b.n	800bd60 <_scanf_float+0x2e8>
 800bda2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bda6:	6923      	ldr	r3, [r4, #16]
 800bda8:	2965      	cmp	r1, #101	@ 0x65
 800bdaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800bdae:	f106 35ff 	add.w	r5, r6, #4294967295
 800bdb2:	6123      	str	r3, [r4, #16]
 800bdb4:	d00c      	beq.n	800bdd0 <_scanf_float+0x358>
 800bdb6:	2945      	cmp	r1, #69	@ 0x45
 800bdb8:	d00a      	beq.n	800bdd0 <_scanf_float+0x358>
 800bdba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bdbe:	463a      	mov	r2, r7
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	4798      	blx	r3
 800bdc4:	6923      	ldr	r3, [r4, #16]
 800bdc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	1eb5      	subs	r5, r6, #2
 800bdce:	6123      	str	r3, [r4, #16]
 800bdd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4640      	mov	r0, r8
 800bdd8:	4798      	blx	r3
 800bdda:	462e      	mov	r6, r5
 800bddc:	6822      	ldr	r2, [r4, #0]
 800bdde:	f012 0210 	ands.w	r2, r2, #16
 800bde2:	d001      	beq.n	800bde8 <_scanf_float+0x370>
 800bde4:	2000      	movs	r0, #0
 800bde6:	e68b      	b.n	800bb00 <_scanf_float+0x88>
 800bde8:	7032      	strb	r2, [r6, #0]
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bdf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdf4:	d11a      	bne.n	800be2c <_scanf_float+0x3b4>
 800bdf6:	9b02      	ldr	r3, [sp, #8]
 800bdf8:	454b      	cmp	r3, r9
 800bdfa:	eba3 0209 	sub.w	r2, r3, r9
 800bdfe:	d121      	bne.n	800be44 <_scanf_float+0x3cc>
 800be00:	9901      	ldr	r1, [sp, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	4640      	mov	r0, r8
 800be06:	f002 fbd1 	bl	800e5ac <_strtod_r>
 800be0a:	9b03      	ldr	r3, [sp, #12]
 800be0c:	6821      	ldr	r1, [r4, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f011 0f02 	tst.w	r1, #2
 800be14:	f103 0204 	add.w	r2, r3, #4
 800be18:	d01f      	beq.n	800be5a <_scanf_float+0x3e2>
 800be1a:	9903      	ldr	r1, [sp, #12]
 800be1c:	600a      	str	r2, [r1, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	ed83 0b00 	vstr	d0, [r3]
 800be24:	68e3      	ldr	r3, [r4, #12]
 800be26:	3301      	adds	r3, #1
 800be28:	60e3      	str	r3, [r4, #12]
 800be2a:	e7db      	b.n	800bde4 <_scanf_float+0x36c>
 800be2c:	9b04      	ldr	r3, [sp, #16]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d0e6      	beq.n	800be00 <_scanf_float+0x388>
 800be32:	9905      	ldr	r1, [sp, #20]
 800be34:	230a      	movs	r3, #10
 800be36:	3101      	adds	r1, #1
 800be38:	4640      	mov	r0, r8
 800be3a:	f002 fc37 	bl	800e6ac <_strtol_r>
 800be3e:	9b04      	ldr	r3, [sp, #16]
 800be40:	9e05      	ldr	r6, [sp, #20]
 800be42:	1ac2      	subs	r2, r0, r3
 800be44:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800be48:	429e      	cmp	r6, r3
 800be4a:	bf28      	it	cs
 800be4c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800be50:	490d      	ldr	r1, [pc, #52]	@ (800be88 <_scanf_float+0x410>)
 800be52:	4630      	mov	r0, r6
 800be54:	f000 f8de 	bl	800c014 <siprintf>
 800be58:	e7d2      	b.n	800be00 <_scanf_float+0x388>
 800be5a:	f011 0f04 	tst.w	r1, #4
 800be5e:	9903      	ldr	r1, [sp, #12]
 800be60:	600a      	str	r2, [r1, #0]
 800be62:	d1dc      	bne.n	800be1e <_scanf_float+0x3a6>
 800be64:	eeb4 0b40 	vcmp.f64	d0, d0
 800be68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6c:	681d      	ldr	r5, [r3, #0]
 800be6e:	d705      	bvc.n	800be7c <_scanf_float+0x404>
 800be70:	4806      	ldr	r0, [pc, #24]	@ (800be8c <_scanf_float+0x414>)
 800be72:	f000 fa55 	bl	800c320 <nanf>
 800be76:	ed85 0a00 	vstr	s0, [r5]
 800be7a:	e7d3      	b.n	800be24 <_scanf_float+0x3ac>
 800be7c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800be80:	e7f9      	b.n	800be76 <_scanf_float+0x3fe>
 800be82:	f04f 0900 	mov.w	r9, #0
 800be86:	e630      	b.n	800baea <_scanf_float+0x72>
 800be88:	0800f834 	.word	0x0800f834
 800be8c:	0800fbcd 	.word	0x0800fbcd

0800be90 <std>:
 800be90:	2300      	movs	r3, #0
 800be92:	b510      	push	{r4, lr}
 800be94:	4604      	mov	r4, r0
 800be96:	e9c0 3300 	strd	r3, r3, [r0]
 800be9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be9e:	6083      	str	r3, [r0, #8]
 800bea0:	8181      	strh	r1, [r0, #12]
 800bea2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bea4:	81c2      	strh	r2, [r0, #14]
 800bea6:	6183      	str	r3, [r0, #24]
 800bea8:	4619      	mov	r1, r3
 800beaa:	2208      	movs	r2, #8
 800beac:	305c      	adds	r0, #92	@ 0x5c
 800beae:	f000 f9a9 	bl	800c204 <memset>
 800beb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bee8 <std+0x58>)
 800beb4:	6263      	str	r3, [r4, #36]	@ 0x24
 800beb6:	4b0d      	ldr	r3, [pc, #52]	@ (800beec <std+0x5c>)
 800beb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800beba:	4b0d      	ldr	r3, [pc, #52]	@ (800bef0 <std+0x60>)
 800bebc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bebe:	4b0d      	ldr	r3, [pc, #52]	@ (800bef4 <std+0x64>)
 800bec0:	6323      	str	r3, [r4, #48]	@ 0x30
 800bec2:	4b0d      	ldr	r3, [pc, #52]	@ (800bef8 <std+0x68>)
 800bec4:	6224      	str	r4, [r4, #32]
 800bec6:	429c      	cmp	r4, r3
 800bec8:	d006      	beq.n	800bed8 <std+0x48>
 800beca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bece:	4294      	cmp	r4, r2
 800bed0:	d002      	beq.n	800bed8 <std+0x48>
 800bed2:	33d0      	adds	r3, #208	@ 0xd0
 800bed4:	429c      	cmp	r4, r3
 800bed6:	d105      	bne.n	800bee4 <std+0x54>
 800bed8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bee0:	f000 ba0c 	b.w	800c2fc <__retarget_lock_init_recursive>
 800bee4:	bd10      	pop	{r4, pc}
 800bee6:	bf00      	nop
 800bee8:	0800c055 	.word	0x0800c055
 800beec:	0800c077 	.word	0x0800c077
 800bef0:	0800c0af 	.word	0x0800c0af
 800bef4:	0800c0d3 	.word	0x0800c0d3
 800bef8:	2400064c 	.word	0x2400064c

0800befc <stdio_exit_handler>:
 800befc:	4a02      	ldr	r2, [pc, #8]	@ (800bf08 <stdio_exit_handler+0xc>)
 800befe:	4903      	ldr	r1, [pc, #12]	@ (800bf0c <stdio_exit_handler+0x10>)
 800bf00:	4803      	ldr	r0, [pc, #12]	@ (800bf10 <stdio_exit_handler+0x14>)
 800bf02:	f000 b869 	b.w	800bfd8 <_fwalk_sglue>
 800bf06:	bf00      	nop
 800bf08:	24000010 	.word	0x24000010
 800bf0c:	0800eced 	.word	0x0800eced
 800bf10:	24000020 	.word	0x24000020

0800bf14 <cleanup_stdio>:
 800bf14:	6841      	ldr	r1, [r0, #4]
 800bf16:	4b0c      	ldr	r3, [pc, #48]	@ (800bf48 <cleanup_stdio+0x34>)
 800bf18:	4299      	cmp	r1, r3
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	d001      	beq.n	800bf24 <cleanup_stdio+0x10>
 800bf20:	f002 fee4 	bl	800ecec <_fflush_r>
 800bf24:	68a1      	ldr	r1, [r4, #8]
 800bf26:	4b09      	ldr	r3, [pc, #36]	@ (800bf4c <cleanup_stdio+0x38>)
 800bf28:	4299      	cmp	r1, r3
 800bf2a:	d002      	beq.n	800bf32 <cleanup_stdio+0x1e>
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f002 fedd 	bl	800ecec <_fflush_r>
 800bf32:	68e1      	ldr	r1, [r4, #12]
 800bf34:	4b06      	ldr	r3, [pc, #24]	@ (800bf50 <cleanup_stdio+0x3c>)
 800bf36:	4299      	cmp	r1, r3
 800bf38:	d004      	beq.n	800bf44 <cleanup_stdio+0x30>
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf40:	f002 bed4 	b.w	800ecec <_fflush_r>
 800bf44:	bd10      	pop	{r4, pc}
 800bf46:	bf00      	nop
 800bf48:	2400064c 	.word	0x2400064c
 800bf4c:	240006b4 	.word	0x240006b4
 800bf50:	2400071c 	.word	0x2400071c

0800bf54 <global_stdio_init.part.0>:
 800bf54:	b510      	push	{r4, lr}
 800bf56:	4b0b      	ldr	r3, [pc, #44]	@ (800bf84 <global_stdio_init.part.0+0x30>)
 800bf58:	4c0b      	ldr	r4, [pc, #44]	@ (800bf88 <global_stdio_init.part.0+0x34>)
 800bf5a:	4a0c      	ldr	r2, [pc, #48]	@ (800bf8c <global_stdio_init.part.0+0x38>)
 800bf5c:	601a      	str	r2, [r3, #0]
 800bf5e:	4620      	mov	r0, r4
 800bf60:	2200      	movs	r2, #0
 800bf62:	2104      	movs	r1, #4
 800bf64:	f7ff ff94 	bl	800be90 <std>
 800bf68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	2109      	movs	r1, #9
 800bf70:	f7ff ff8e 	bl	800be90 <std>
 800bf74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf78:	2202      	movs	r2, #2
 800bf7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf7e:	2112      	movs	r1, #18
 800bf80:	f7ff bf86 	b.w	800be90 <std>
 800bf84:	24000784 	.word	0x24000784
 800bf88:	2400064c 	.word	0x2400064c
 800bf8c:	0800befd 	.word	0x0800befd

0800bf90 <__sfp_lock_acquire>:
 800bf90:	4801      	ldr	r0, [pc, #4]	@ (800bf98 <__sfp_lock_acquire+0x8>)
 800bf92:	f000 b9b4 	b.w	800c2fe <__retarget_lock_acquire_recursive>
 800bf96:	bf00      	nop
 800bf98:	2400078d 	.word	0x2400078d

0800bf9c <__sfp_lock_release>:
 800bf9c:	4801      	ldr	r0, [pc, #4]	@ (800bfa4 <__sfp_lock_release+0x8>)
 800bf9e:	f000 b9af 	b.w	800c300 <__retarget_lock_release_recursive>
 800bfa2:	bf00      	nop
 800bfa4:	2400078d 	.word	0x2400078d

0800bfa8 <__sinit>:
 800bfa8:	b510      	push	{r4, lr}
 800bfaa:	4604      	mov	r4, r0
 800bfac:	f7ff fff0 	bl	800bf90 <__sfp_lock_acquire>
 800bfb0:	6a23      	ldr	r3, [r4, #32]
 800bfb2:	b11b      	cbz	r3, 800bfbc <__sinit+0x14>
 800bfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfb8:	f7ff bff0 	b.w	800bf9c <__sfp_lock_release>
 800bfbc:	4b04      	ldr	r3, [pc, #16]	@ (800bfd0 <__sinit+0x28>)
 800bfbe:	6223      	str	r3, [r4, #32]
 800bfc0:	4b04      	ldr	r3, [pc, #16]	@ (800bfd4 <__sinit+0x2c>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1f5      	bne.n	800bfb4 <__sinit+0xc>
 800bfc8:	f7ff ffc4 	bl	800bf54 <global_stdio_init.part.0>
 800bfcc:	e7f2      	b.n	800bfb4 <__sinit+0xc>
 800bfce:	bf00      	nop
 800bfd0:	0800bf15 	.word	0x0800bf15
 800bfd4:	24000784 	.word	0x24000784

0800bfd8 <_fwalk_sglue>:
 800bfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfdc:	4607      	mov	r7, r0
 800bfde:	4688      	mov	r8, r1
 800bfe0:	4614      	mov	r4, r2
 800bfe2:	2600      	movs	r6, #0
 800bfe4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfe8:	f1b9 0901 	subs.w	r9, r9, #1
 800bfec:	d505      	bpl.n	800bffa <_fwalk_sglue+0x22>
 800bfee:	6824      	ldr	r4, [r4, #0]
 800bff0:	2c00      	cmp	r4, #0
 800bff2:	d1f7      	bne.n	800bfe4 <_fwalk_sglue+0xc>
 800bff4:	4630      	mov	r0, r6
 800bff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bffa:	89ab      	ldrh	r3, [r5, #12]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d907      	bls.n	800c010 <_fwalk_sglue+0x38>
 800c000:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c004:	3301      	adds	r3, #1
 800c006:	d003      	beq.n	800c010 <_fwalk_sglue+0x38>
 800c008:	4629      	mov	r1, r5
 800c00a:	4638      	mov	r0, r7
 800c00c:	47c0      	blx	r8
 800c00e:	4306      	orrs	r6, r0
 800c010:	3568      	adds	r5, #104	@ 0x68
 800c012:	e7e9      	b.n	800bfe8 <_fwalk_sglue+0x10>

0800c014 <siprintf>:
 800c014:	b40e      	push	{r1, r2, r3}
 800c016:	b500      	push	{lr}
 800c018:	b09c      	sub	sp, #112	@ 0x70
 800c01a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c01c:	9002      	str	r0, [sp, #8]
 800c01e:	9006      	str	r0, [sp, #24]
 800c020:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c024:	4809      	ldr	r0, [pc, #36]	@ (800c04c <siprintf+0x38>)
 800c026:	9107      	str	r1, [sp, #28]
 800c028:	9104      	str	r1, [sp, #16]
 800c02a:	4909      	ldr	r1, [pc, #36]	@ (800c050 <siprintf+0x3c>)
 800c02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c030:	9105      	str	r1, [sp, #20]
 800c032:	6800      	ldr	r0, [r0, #0]
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	a902      	add	r1, sp, #8
 800c038:	f002 fb96 	bl	800e768 <_svfiprintf_r>
 800c03c:	9b02      	ldr	r3, [sp, #8]
 800c03e:	2200      	movs	r2, #0
 800c040:	701a      	strb	r2, [r3, #0]
 800c042:	b01c      	add	sp, #112	@ 0x70
 800c044:	f85d eb04 	ldr.w	lr, [sp], #4
 800c048:	b003      	add	sp, #12
 800c04a:	4770      	bx	lr
 800c04c:	2400001c 	.word	0x2400001c
 800c050:	ffff0208 	.word	0xffff0208

0800c054 <__sread>:
 800c054:	b510      	push	{r4, lr}
 800c056:	460c      	mov	r4, r1
 800c058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c05c:	f000 f900 	bl	800c260 <_read_r>
 800c060:	2800      	cmp	r0, #0
 800c062:	bfab      	itete	ge
 800c064:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c066:	89a3      	ldrhlt	r3, [r4, #12]
 800c068:	181b      	addge	r3, r3, r0
 800c06a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c06e:	bfac      	ite	ge
 800c070:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c072:	81a3      	strhlt	r3, [r4, #12]
 800c074:	bd10      	pop	{r4, pc}

0800c076 <__swrite>:
 800c076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07a:	461f      	mov	r7, r3
 800c07c:	898b      	ldrh	r3, [r1, #12]
 800c07e:	05db      	lsls	r3, r3, #23
 800c080:	4605      	mov	r5, r0
 800c082:	460c      	mov	r4, r1
 800c084:	4616      	mov	r6, r2
 800c086:	d505      	bpl.n	800c094 <__swrite+0x1e>
 800c088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c08c:	2302      	movs	r3, #2
 800c08e:	2200      	movs	r2, #0
 800c090:	f000 f8d4 	bl	800c23c <_lseek_r>
 800c094:	89a3      	ldrh	r3, [r4, #12]
 800c096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c09a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c09e:	81a3      	strh	r3, [r4, #12]
 800c0a0:	4632      	mov	r2, r6
 800c0a2:	463b      	mov	r3, r7
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0aa:	f000 b8eb 	b.w	800c284 <_write_r>

0800c0ae <__sseek>:
 800c0ae:	b510      	push	{r4, lr}
 800c0b0:	460c      	mov	r4, r1
 800c0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b6:	f000 f8c1 	bl	800c23c <_lseek_r>
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	bf15      	itete	ne
 800c0c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c0c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0ca:	81a3      	strheq	r3, [r4, #12]
 800c0cc:	bf18      	it	ne
 800c0ce:	81a3      	strhne	r3, [r4, #12]
 800c0d0:	bd10      	pop	{r4, pc}

0800c0d2 <__sclose>:
 800c0d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d6:	f000 b8a1 	b.w	800c21c <_close_r>

0800c0da <__swbuf_r>:
 800c0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0dc:	460e      	mov	r6, r1
 800c0de:	4614      	mov	r4, r2
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	b118      	cbz	r0, 800c0ec <__swbuf_r+0x12>
 800c0e4:	6a03      	ldr	r3, [r0, #32]
 800c0e6:	b90b      	cbnz	r3, 800c0ec <__swbuf_r+0x12>
 800c0e8:	f7ff ff5e 	bl	800bfa8 <__sinit>
 800c0ec:	69a3      	ldr	r3, [r4, #24]
 800c0ee:	60a3      	str	r3, [r4, #8]
 800c0f0:	89a3      	ldrh	r3, [r4, #12]
 800c0f2:	071a      	lsls	r2, r3, #28
 800c0f4:	d501      	bpl.n	800c0fa <__swbuf_r+0x20>
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	b943      	cbnz	r3, 800c10c <__swbuf_r+0x32>
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	f000 f82b 	bl	800c158 <__swsetup_r>
 800c102:	b118      	cbz	r0, 800c10c <__swbuf_r+0x32>
 800c104:	f04f 37ff 	mov.w	r7, #4294967295
 800c108:	4638      	mov	r0, r7
 800c10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c10c:	6823      	ldr	r3, [r4, #0]
 800c10e:	6922      	ldr	r2, [r4, #16]
 800c110:	1a98      	subs	r0, r3, r2
 800c112:	6963      	ldr	r3, [r4, #20]
 800c114:	b2f6      	uxtb	r6, r6
 800c116:	4283      	cmp	r3, r0
 800c118:	4637      	mov	r7, r6
 800c11a:	dc05      	bgt.n	800c128 <__swbuf_r+0x4e>
 800c11c:	4621      	mov	r1, r4
 800c11e:	4628      	mov	r0, r5
 800c120:	f002 fde4 	bl	800ecec <_fflush_r>
 800c124:	2800      	cmp	r0, #0
 800c126:	d1ed      	bne.n	800c104 <__swbuf_r+0x2a>
 800c128:	68a3      	ldr	r3, [r4, #8]
 800c12a:	3b01      	subs	r3, #1
 800c12c:	60a3      	str	r3, [r4, #8]
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	1c5a      	adds	r2, r3, #1
 800c132:	6022      	str	r2, [r4, #0]
 800c134:	701e      	strb	r6, [r3, #0]
 800c136:	6962      	ldr	r2, [r4, #20]
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d004      	beq.n	800c148 <__swbuf_r+0x6e>
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	07db      	lsls	r3, r3, #31
 800c142:	d5e1      	bpl.n	800c108 <__swbuf_r+0x2e>
 800c144:	2e0a      	cmp	r6, #10
 800c146:	d1df      	bne.n	800c108 <__swbuf_r+0x2e>
 800c148:	4621      	mov	r1, r4
 800c14a:	4628      	mov	r0, r5
 800c14c:	f002 fdce 	bl	800ecec <_fflush_r>
 800c150:	2800      	cmp	r0, #0
 800c152:	d0d9      	beq.n	800c108 <__swbuf_r+0x2e>
 800c154:	e7d6      	b.n	800c104 <__swbuf_r+0x2a>
	...

0800c158 <__swsetup_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4b29      	ldr	r3, [pc, #164]	@ (800c200 <__swsetup_r+0xa8>)
 800c15c:	4605      	mov	r5, r0
 800c15e:	6818      	ldr	r0, [r3, #0]
 800c160:	460c      	mov	r4, r1
 800c162:	b118      	cbz	r0, 800c16c <__swsetup_r+0x14>
 800c164:	6a03      	ldr	r3, [r0, #32]
 800c166:	b90b      	cbnz	r3, 800c16c <__swsetup_r+0x14>
 800c168:	f7ff ff1e 	bl	800bfa8 <__sinit>
 800c16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c170:	0719      	lsls	r1, r3, #28
 800c172:	d422      	bmi.n	800c1ba <__swsetup_r+0x62>
 800c174:	06da      	lsls	r2, r3, #27
 800c176:	d407      	bmi.n	800c188 <__swsetup_r+0x30>
 800c178:	2209      	movs	r2, #9
 800c17a:	602a      	str	r2, [r5, #0]
 800c17c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c180:	81a3      	strh	r3, [r4, #12]
 800c182:	f04f 30ff 	mov.w	r0, #4294967295
 800c186:	e033      	b.n	800c1f0 <__swsetup_r+0x98>
 800c188:	0758      	lsls	r0, r3, #29
 800c18a:	d512      	bpl.n	800c1b2 <__swsetup_r+0x5a>
 800c18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c18e:	b141      	cbz	r1, 800c1a2 <__swsetup_r+0x4a>
 800c190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c194:	4299      	cmp	r1, r3
 800c196:	d002      	beq.n	800c19e <__swsetup_r+0x46>
 800c198:	4628      	mov	r0, r5
 800c19a:	f000 fea7 	bl	800ceec <_free_r>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c1a8:	81a3      	strh	r3, [r4, #12]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	6063      	str	r3, [r4, #4]
 800c1ae:	6923      	ldr	r3, [r4, #16]
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	f043 0308 	orr.w	r3, r3, #8
 800c1b8:	81a3      	strh	r3, [r4, #12]
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	b94b      	cbnz	r3, 800c1d2 <__swsetup_r+0x7a>
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1c8:	d003      	beq.n	800c1d2 <__swsetup_r+0x7a>
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	f002 fddb 	bl	800ed88 <__smakebuf_r>
 800c1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1d6:	f013 0201 	ands.w	r2, r3, #1
 800c1da:	d00a      	beq.n	800c1f2 <__swsetup_r+0x9a>
 800c1dc:	2200      	movs	r2, #0
 800c1de:	60a2      	str	r2, [r4, #8]
 800c1e0:	6962      	ldr	r2, [r4, #20]
 800c1e2:	4252      	negs	r2, r2
 800c1e4:	61a2      	str	r2, [r4, #24]
 800c1e6:	6922      	ldr	r2, [r4, #16]
 800c1e8:	b942      	cbnz	r2, 800c1fc <__swsetup_r+0xa4>
 800c1ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1ee:	d1c5      	bne.n	800c17c <__swsetup_r+0x24>
 800c1f0:	bd38      	pop	{r3, r4, r5, pc}
 800c1f2:	0799      	lsls	r1, r3, #30
 800c1f4:	bf58      	it	pl
 800c1f6:	6962      	ldrpl	r2, [r4, #20]
 800c1f8:	60a2      	str	r2, [r4, #8]
 800c1fa:	e7f4      	b.n	800c1e6 <__swsetup_r+0x8e>
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	e7f7      	b.n	800c1f0 <__swsetup_r+0x98>
 800c200:	2400001c 	.word	0x2400001c

0800c204 <memset>:
 800c204:	4402      	add	r2, r0
 800c206:	4603      	mov	r3, r0
 800c208:	4293      	cmp	r3, r2
 800c20a:	d100      	bne.n	800c20e <memset+0xa>
 800c20c:	4770      	bx	lr
 800c20e:	f803 1b01 	strb.w	r1, [r3], #1
 800c212:	e7f9      	b.n	800c208 <memset+0x4>

0800c214 <_localeconv_r>:
 800c214:	4800      	ldr	r0, [pc, #0]	@ (800c218 <_localeconv_r+0x4>)
 800c216:	4770      	bx	lr
 800c218:	2400015c 	.word	0x2400015c

0800c21c <_close_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	4d06      	ldr	r5, [pc, #24]	@ (800c238 <_close_r+0x1c>)
 800c220:	2300      	movs	r3, #0
 800c222:	4604      	mov	r4, r0
 800c224:	4608      	mov	r0, r1
 800c226:	602b      	str	r3, [r5, #0]
 800c228:	f7f5 fd52 	bl	8001cd0 <_close>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_close_r+0x1a>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_close_r+0x1a>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	24000788 	.word	0x24000788

0800c23c <_lseek_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	@ (800c25c <_lseek_r+0x20>)
 800c240:	4604      	mov	r4, r0
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	2200      	movs	r2, #0
 800c248:	602a      	str	r2, [r5, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f7f5 fd67 	bl	8001d1e <_lseek>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_lseek_r+0x1e>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_lseek_r+0x1e>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	24000788 	.word	0x24000788

0800c260 <_read_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4d07      	ldr	r5, [pc, #28]	@ (800c280 <_read_r+0x20>)
 800c264:	4604      	mov	r4, r0
 800c266:	4608      	mov	r0, r1
 800c268:	4611      	mov	r1, r2
 800c26a:	2200      	movs	r2, #0
 800c26c:	602a      	str	r2, [r5, #0]
 800c26e:	461a      	mov	r2, r3
 800c270:	f7f5 fd11 	bl	8001c96 <_read>
 800c274:	1c43      	adds	r3, r0, #1
 800c276:	d102      	bne.n	800c27e <_read_r+0x1e>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	b103      	cbz	r3, 800c27e <_read_r+0x1e>
 800c27c:	6023      	str	r3, [r4, #0]
 800c27e:	bd38      	pop	{r3, r4, r5, pc}
 800c280:	24000788 	.word	0x24000788

0800c284 <_write_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d07      	ldr	r5, [pc, #28]	@ (800c2a4 <_write_r+0x20>)
 800c288:	4604      	mov	r4, r0
 800c28a:	4608      	mov	r0, r1
 800c28c:	4611      	mov	r1, r2
 800c28e:	2200      	movs	r2, #0
 800c290:	602a      	str	r2, [r5, #0]
 800c292:	461a      	mov	r2, r3
 800c294:	f7f4 fc27 	bl	8000ae6 <_write>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_write_r+0x1e>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_write_r+0x1e>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	24000788 	.word	0x24000788

0800c2a8 <__errno>:
 800c2a8:	4b01      	ldr	r3, [pc, #4]	@ (800c2b0 <__errno+0x8>)
 800c2aa:	6818      	ldr	r0, [r3, #0]
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	2400001c 	.word	0x2400001c

0800c2b4 <__libc_init_array>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c2ec <__libc_init_array+0x38>)
 800c2b8:	4c0d      	ldr	r4, [pc, #52]	@ (800c2f0 <__libc_init_array+0x3c>)
 800c2ba:	1b64      	subs	r4, r4, r5
 800c2bc:	10a4      	asrs	r4, r4, #2
 800c2be:	2600      	movs	r6, #0
 800c2c0:	42a6      	cmp	r6, r4
 800c2c2:	d109      	bne.n	800c2d8 <__libc_init_array+0x24>
 800c2c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c2f4 <__libc_init_array+0x40>)
 800c2c6:	4c0c      	ldr	r4, [pc, #48]	@ (800c2f8 <__libc_init_array+0x44>)
 800c2c8:	f003 fa20 	bl	800f70c <_init>
 800c2cc:	1b64      	subs	r4, r4, r5
 800c2ce:	10a4      	asrs	r4, r4, #2
 800c2d0:	2600      	movs	r6, #0
 800c2d2:	42a6      	cmp	r6, r4
 800c2d4:	d105      	bne.n	800c2e2 <__libc_init_array+0x2e>
 800c2d6:	bd70      	pop	{r4, r5, r6, pc}
 800c2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2dc:	4798      	blx	r3
 800c2de:	3601      	adds	r6, #1
 800c2e0:	e7ee      	b.n	800c2c0 <__libc_init_array+0xc>
 800c2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2e6:	4798      	blx	r3
 800c2e8:	3601      	adds	r6, #1
 800c2ea:	e7f2      	b.n	800c2d2 <__libc_init_array+0x1e>
 800c2ec:	0800fc38 	.word	0x0800fc38
 800c2f0:	0800fc38 	.word	0x0800fc38
 800c2f4:	0800fc38 	.word	0x0800fc38
 800c2f8:	0800fc3c 	.word	0x0800fc3c

0800c2fc <__retarget_lock_init_recursive>:
 800c2fc:	4770      	bx	lr

0800c2fe <__retarget_lock_acquire_recursive>:
 800c2fe:	4770      	bx	lr

0800c300 <__retarget_lock_release_recursive>:
 800c300:	4770      	bx	lr

0800c302 <memcpy>:
 800c302:	440a      	add	r2, r1
 800c304:	4291      	cmp	r1, r2
 800c306:	f100 33ff 	add.w	r3, r0, #4294967295
 800c30a:	d100      	bne.n	800c30e <memcpy+0xc>
 800c30c:	4770      	bx	lr
 800c30e:	b510      	push	{r4, lr}
 800c310:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c314:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c318:	4291      	cmp	r1, r2
 800c31a:	d1f9      	bne.n	800c310 <memcpy+0xe>
 800c31c:	bd10      	pop	{r4, pc}
	...

0800c320 <nanf>:
 800c320:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c328 <nanf+0x8>
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	7fc00000 	.word	0x7fc00000

0800c32c <quorem>:
 800c32c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	6903      	ldr	r3, [r0, #16]
 800c332:	690c      	ldr	r4, [r1, #16]
 800c334:	42a3      	cmp	r3, r4
 800c336:	4607      	mov	r7, r0
 800c338:	db7e      	blt.n	800c438 <quorem+0x10c>
 800c33a:	3c01      	subs	r4, #1
 800c33c:	f101 0814 	add.w	r8, r1, #20
 800c340:	00a3      	lsls	r3, r4, #2
 800c342:	f100 0514 	add.w	r5, r0, #20
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c34c:	9301      	str	r3, [sp, #4]
 800c34e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c352:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c356:	3301      	adds	r3, #1
 800c358:	429a      	cmp	r2, r3
 800c35a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c35e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c362:	d32e      	bcc.n	800c3c2 <quorem+0x96>
 800c364:	f04f 0a00 	mov.w	sl, #0
 800c368:	46c4      	mov	ip, r8
 800c36a:	46ae      	mov	lr, r5
 800c36c:	46d3      	mov	fp, sl
 800c36e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c372:	b298      	uxth	r0, r3
 800c374:	fb06 a000 	mla	r0, r6, r0, sl
 800c378:	0c02      	lsrs	r2, r0, #16
 800c37a:	0c1b      	lsrs	r3, r3, #16
 800c37c:	fb06 2303 	mla	r3, r6, r3, r2
 800c380:	f8de 2000 	ldr.w	r2, [lr]
 800c384:	b280      	uxth	r0, r0
 800c386:	b292      	uxth	r2, r2
 800c388:	1a12      	subs	r2, r2, r0
 800c38a:	445a      	add	r2, fp
 800c38c:	f8de 0000 	ldr.w	r0, [lr]
 800c390:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c394:	b29b      	uxth	r3, r3
 800c396:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c39a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c39e:	b292      	uxth	r2, r2
 800c3a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c3a4:	45e1      	cmp	r9, ip
 800c3a6:	f84e 2b04 	str.w	r2, [lr], #4
 800c3aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c3ae:	d2de      	bcs.n	800c36e <quorem+0x42>
 800c3b0:	9b00      	ldr	r3, [sp, #0]
 800c3b2:	58eb      	ldr	r3, [r5, r3]
 800c3b4:	b92b      	cbnz	r3, 800c3c2 <quorem+0x96>
 800c3b6:	9b01      	ldr	r3, [sp, #4]
 800c3b8:	3b04      	subs	r3, #4
 800c3ba:	429d      	cmp	r5, r3
 800c3bc:	461a      	mov	r2, r3
 800c3be:	d32f      	bcc.n	800c420 <quorem+0xf4>
 800c3c0:	613c      	str	r4, [r7, #16]
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	f001 f956 	bl	800d674 <__mcmp>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	db25      	blt.n	800c418 <quorem+0xec>
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c3d4:	f8d1 c000 	ldr.w	ip, [r1]
 800c3d8:	fa1f fe82 	uxth.w	lr, r2
 800c3dc:	fa1f f38c 	uxth.w	r3, ip
 800c3e0:	eba3 030e 	sub.w	r3, r3, lr
 800c3e4:	4403      	add	r3, r0
 800c3e6:	0c12      	lsrs	r2, r2, #16
 800c3e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c3ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3f6:	45c1      	cmp	r9, r8
 800c3f8:	f841 3b04 	str.w	r3, [r1], #4
 800c3fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c400:	d2e6      	bcs.n	800c3d0 <quorem+0xa4>
 800c402:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c406:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c40a:	b922      	cbnz	r2, 800c416 <quorem+0xea>
 800c40c:	3b04      	subs	r3, #4
 800c40e:	429d      	cmp	r5, r3
 800c410:	461a      	mov	r2, r3
 800c412:	d30b      	bcc.n	800c42c <quorem+0x100>
 800c414:	613c      	str	r4, [r7, #16]
 800c416:	3601      	adds	r6, #1
 800c418:	4630      	mov	r0, r6
 800c41a:	b003      	add	sp, #12
 800c41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c420:	6812      	ldr	r2, [r2, #0]
 800c422:	3b04      	subs	r3, #4
 800c424:	2a00      	cmp	r2, #0
 800c426:	d1cb      	bne.n	800c3c0 <quorem+0x94>
 800c428:	3c01      	subs	r4, #1
 800c42a:	e7c6      	b.n	800c3ba <quorem+0x8e>
 800c42c:	6812      	ldr	r2, [r2, #0]
 800c42e:	3b04      	subs	r3, #4
 800c430:	2a00      	cmp	r2, #0
 800c432:	d1ef      	bne.n	800c414 <quorem+0xe8>
 800c434:	3c01      	subs	r4, #1
 800c436:	e7ea      	b.n	800c40e <quorem+0xe2>
 800c438:	2000      	movs	r0, #0
 800c43a:	e7ee      	b.n	800c41a <quorem+0xee>
 800c43c:	0000      	movs	r0, r0
	...

0800c440 <_dtoa_r>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	ed2d 8b02 	vpush	{d8}
 800c448:	69c7      	ldr	r7, [r0, #28]
 800c44a:	b091      	sub	sp, #68	@ 0x44
 800c44c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c450:	ec55 4b10 	vmov	r4, r5, d0
 800c454:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c456:	9107      	str	r1, [sp, #28]
 800c458:	4681      	mov	r9, r0
 800c45a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c45c:	930d      	str	r3, [sp, #52]	@ 0x34
 800c45e:	b97f      	cbnz	r7, 800c480 <_dtoa_r+0x40>
 800c460:	2010      	movs	r0, #16
 800c462:	f000 fd8d 	bl	800cf80 <malloc>
 800c466:	4602      	mov	r2, r0
 800c468:	f8c9 001c 	str.w	r0, [r9, #28]
 800c46c:	b920      	cbnz	r0, 800c478 <_dtoa_r+0x38>
 800c46e:	4ba0      	ldr	r3, [pc, #640]	@ (800c6f0 <_dtoa_r+0x2b0>)
 800c470:	21ef      	movs	r1, #239	@ 0xef
 800c472:	48a0      	ldr	r0, [pc, #640]	@ (800c6f4 <_dtoa_r+0x2b4>)
 800c474:	f002 fd2c 	bl	800eed0 <__assert_func>
 800c478:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c47c:	6007      	str	r7, [r0, #0]
 800c47e:	60c7      	str	r7, [r0, #12]
 800c480:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c484:	6819      	ldr	r1, [r3, #0]
 800c486:	b159      	cbz	r1, 800c4a0 <_dtoa_r+0x60>
 800c488:	685a      	ldr	r2, [r3, #4]
 800c48a:	604a      	str	r2, [r1, #4]
 800c48c:	2301      	movs	r3, #1
 800c48e:	4093      	lsls	r3, r2
 800c490:	608b      	str	r3, [r1, #8]
 800c492:	4648      	mov	r0, r9
 800c494:	f000 fe6a 	bl	800d16c <_Bfree>
 800c498:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c49c:	2200      	movs	r2, #0
 800c49e:	601a      	str	r2, [r3, #0]
 800c4a0:	1e2b      	subs	r3, r5, #0
 800c4a2:	bfbb      	ittet	lt
 800c4a4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c4a8:	9303      	strlt	r3, [sp, #12]
 800c4aa:	2300      	movge	r3, #0
 800c4ac:	2201      	movlt	r2, #1
 800c4ae:	bfac      	ite	ge
 800c4b0:	6033      	strge	r3, [r6, #0]
 800c4b2:	6032      	strlt	r2, [r6, #0]
 800c4b4:	4b90      	ldr	r3, [pc, #576]	@ (800c6f8 <_dtoa_r+0x2b8>)
 800c4b6:	9e03      	ldr	r6, [sp, #12]
 800c4b8:	43b3      	bics	r3, r6
 800c4ba:	d110      	bne.n	800c4de <_dtoa_r+0x9e>
 800c4bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c4be:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c4c8:	4323      	orrs	r3, r4
 800c4ca:	f000 84de 	beq.w	800ce8a <_dtoa_r+0xa4a>
 800c4ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c4d0:	4f8a      	ldr	r7, [pc, #552]	@ (800c6fc <_dtoa_r+0x2bc>)
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f000 84e0 	beq.w	800ce98 <_dtoa_r+0xa58>
 800c4d8:	1cfb      	adds	r3, r7, #3
 800c4da:	f000 bcdb 	b.w	800ce94 <_dtoa_r+0xa54>
 800c4de:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c4e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ea:	d10a      	bne.n	800c502 <_dtoa_r+0xc2>
 800c4ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	6013      	str	r3, [r2, #0]
 800c4f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c4f4:	b113      	cbz	r3, 800c4fc <_dtoa_r+0xbc>
 800c4f6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c4f8:	4b81      	ldr	r3, [pc, #516]	@ (800c700 <_dtoa_r+0x2c0>)
 800c4fa:	6013      	str	r3, [r2, #0]
 800c4fc:	4f81      	ldr	r7, [pc, #516]	@ (800c704 <_dtoa_r+0x2c4>)
 800c4fe:	f000 bccb 	b.w	800ce98 <_dtoa_r+0xa58>
 800c502:	aa0e      	add	r2, sp, #56	@ 0x38
 800c504:	a90f      	add	r1, sp, #60	@ 0x3c
 800c506:	4648      	mov	r0, r9
 800c508:	eeb0 0b48 	vmov.f64	d0, d8
 800c50c:	f001 f9d2 	bl	800d8b4 <__d2b>
 800c510:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c514:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c516:	9001      	str	r0, [sp, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d045      	beq.n	800c5a8 <_dtoa_r+0x168>
 800c51c:	eeb0 7b48 	vmov.f64	d7, d8
 800c520:	ee18 1a90 	vmov	r1, s17
 800c524:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c528:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c52c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c530:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c534:	2500      	movs	r5, #0
 800c536:	ee07 1a90 	vmov	s15, r1
 800c53a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c53e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c6d8 <_dtoa_r+0x298>
 800c542:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c546:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c6e0 <_dtoa_r+0x2a0>
 800c54a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c54e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c6e8 <_dtoa_r+0x2a8>
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c55a:	eeb0 7b46 	vmov.f64	d7, d6
 800c55e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c562:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c566:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c56e:	ee16 8a90 	vmov	r8, s13
 800c572:	d508      	bpl.n	800c586 <_dtoa_r+0x146>
 800c574:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c578:	eeb4 6b47 	vcmp.f64	d6, d7
 800c57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c580:	bf18      	it	ne
 800c582:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c586:	f1b8 0f16 	cmp.w	r8, #22
 800c58a:	d82b      	bhi.n	800c5e4 <_dtoa_r+0x1a4>
 800c58c:	495e      	ldr	r1, [pc, #376]	@ (800c708 <_dtoa_r+0x2c8>)
 800c58e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c592:	ed91 7b00 	vldr	d7, [r1]
 800c596:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59e:	d501      	bpl.n	800c5a4 <_dtoa_r+0x164>
 800c5a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	e01e      	b.n	800c5e6 <_dtoa_r+0x1a6>
 800c5a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c5b0:	2920      	cmp	r1, #32
 800c5b2:	bfc1      	itttt	gt
 800c5b4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c5b8:	408e      	lslgt	r6, r1
 800c5ba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c5be:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c5c2:	bfd6      	itet	le
 800c5c4:	f1c1 0120 	rsble	r1, r1, #32
 800c5c8:	4331      	orrgt	r1, r6
 800c5ca:	fa04 f101 	lslle.w	r1, r4, r1
 800c5ce:	ee07 1a90 	vmov	s15, r1
 800c5d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	ee17 1a90 	vmov	r1, s15
 800c5dc:	2501      	movs	r5, #1
 800c5de:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c5e2:	e7a8      	b.n	800c536 <_dtoa_r+0xf6>
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	1ad2      	subs	r2, r2, r3
 800c5e8:	1e53      	subs	r3, r2, #1
 800c5ea:	9306      	str	r3, [sp, #24]
 800c5ec:	bf45      	ittet	mi
 800c5ee:	f1c2 0301 	rsbmi	r3, r2, #1
 800c5f2:	9305      	strmi	r3, [sp, #20]
 800c5f4:	2300      	movpl	r3, #0
 800c5f6:	2300      	movmi	r3, #0
 800c5f8:	bf4c      	ite	mi
 800c5fa:	9306      	strmi	r3, [sp, #24]
 800c5fc:	9305      	strpl	r3, [sp, #20]
 800c5fe:	f1b8 0f00 	cmp.w	r8, #0
 800c602:	910c      	str	r1, [sp, #48]	@ 0x30
 800c604:	db18      	blt.n	800c638 <_dtoa_r+0x1f8>
 800c606:	9b06      	ldr	r3, [sp, #24]
 800c608:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c60c:	4443      	add	r3, r8
 800c60e:	9306      	str	r3, [sp, #24]
 800c610:	2300      	movs	r3, #0
 800c612:	9a07      	ldr	r2, [sp, #28]
 800c614:	2a09      	cmp	r2, #9
 800c616:	d849      	bhi.n	800c6ac <_dtoa_r+0x26c>
 800c618:	2a05      	cmp	r2, #5
 800c61a:	bfc4      	itt	gt
 800c61c:	3a04      	subgt	r2, #4
 800c61e:	9207      	strgt	r2, [sp, #28]
 800c620:	9a07      	ldr	r2, [sp, #28]
 800c622:	f1a2 0202 	sub.w	r2, r2, #2
 800c626:	bfcc      	ite	gt
 800c628:	2400      	movgt	r4, #0
 800c62a:	2401      	movle	r4, #1
 800c62c:	2a03      	cmp	r2, #3
 800c62e:	d848      	bhi.n	800c6c2 <_dtoa_r+0x282>
 800c630:	e8df f002 	tbb	[pc, r2]
 800c634:	3a2c2e0b 	.word	0x3a2c2e0b
 800c638:	9b05      	ldr	r3, [sp, #20]
 800c63a:	2200      	movs	r2, #0
 800c63c:	eba3 0308 	sub.w	r3, r3, r8
 800c640:	9305      	str	r3, [sp, #20]
 800c642:	920a      	str	r2, [sp, #40]	@ 0x28
 800c644:	f1c8 0300 	rsb	r3, r8, #0
 800c648:	e7e3      	b.n	800c612 <_dtoa_r+0x1d2>
 800c64a:	2200      	movs	r2, #0
 800c64c:	9208      	str	r2, [sp, #32]
 800c64e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c650:	2a00      	cmp	r2, #0
 800c652:	dc39      	bgt.n	800c6c8 <_dtoa_r+0x288>
 800c654:	f04f 0b01 	mov.w	fp, #1
 800c658:	46da      	mov	sl, fp
 800c65a:	465a      	mov	r2, fp
 800c65c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c660:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c664:	2100      	movs	r1, #0
 800c666:	2004      	movs	r0, #4
 800c668:	f100 0614 	add.w	r6, r0, #20
 800c66c:	4296      	cmp	r6, r2
 800c66e:	d930      	bls.n	800c6d2 <_dtoa_r+0x292>
 800c670:	6079      	str	r1, [r7, #4]
 800c672:	4648      	mov	r0, r9
 800c674:	9304      	str	r3, [sp, #16]
 800c676:	f000 fd39 	bl	800d0ec <_Balloc>
 800c67a:	9b04      	ldr	r3, [sp, #16]
 800c67c:	4607      	mov	r7, r0
 800c67e:	2800      	cmp	r0, #0
 800c680:	d146      	bne.n	800c710 <_dtoa_r+0x2d0>
 800c682:	4b22      	ldr	r3, [pc, #136]	@ (800c70c <_dtoa_r+0x2cc>)
 800c684:	4602      	mov	r2, r0
 800c686:	f240 11af 	movw	r1, #431	@ 0x1af
 800c68a:	e6f2      	b.n	800c472 <_dtoa_r+0x32>
 800c68c:	2201      	movs	r2, #1
 800c68e:	e7dd      	b.n	800c64c <_dtoa_r+0x20c>
 800c690:	2200      	movs	r2, #0
 800c692:	9208      	str	r2, [sp, #32]
 800c694:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c696:	eb08 0b02 	add.w	fp, r8, r2
 800c69a:	f10b 0a01 	add.w	sl, fp, #1
 800c69e:	4652      	mov	r2, sl
 800c6a0:	2a01      	cmp	r2, #1
 800c6a2:	bfb8      	it	lt
 800c6a4:	2201      	movlt	r2, #1
 800c6a6:	e7db      	b.n	800c660 <_dtoa_r+0x220>
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	e7f2      	b.n	800c692 <_dtoa_r+0x252>
 800c6ac:	2401      	movs	r4, #1
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c6b4:	f04f 3bff 	mov.w	fp, #4294967295
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	46da      	mov	sl, fp
 800c6bc:	2212      	movs	r2, #18
 800c6be:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6c0:	e7ce      	b.n	800c660 <_dtoa_r+0x220>
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	9208      	str	r2, [sp, #32]
 800c6c6:	e7f5      	b.n	800c6b4 <_dtoa_r+0x274>
 800c6c8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800c6cc:	46da      	mov	sl, fp
 800c6ce:	465a      	mov	r2, fp
 800c6d0:	e7c6      	b.n	800c660 <_dtoa_r+0x220>
 800c6d2:	3101      	adds	r1, #1
 800c6d4:	0040      	lsls	r0, r0, #1
 800c6d6:	e7c7      	b.n	800c668 <_dtoa_r+0x228>
 800c6d8:	636f4361 	.word	0x636f4361
 800c6dc:	3fd287a7 	.word	0x3fd287a7
 800c6e0:	8b60c8b3 	.word	0x8b60c8b3
 800c6e4:	3fc68a28 	.word	0x3fc68a28
 800c6e8:	509f79fb 	.word	0x509f79fb
 800c6ec:	3fd34413 	.word	0x3fd34413
 800c6f0:	0800f846 	.word	0x0800f846
 800c6f4:	0800f85d 	.word	0x0800f85d
 800c6f8:	7ff00000 	.word	0x7ff00000
 800c6fc:	0800f842 	.word	0x0800f842
 800c700:	0800f811 	.word	0x0800f811
 800c704:	0800f810 	.word	0x0800f810
 800c708:	0800f958 	.word	0x0800f958
 800c70c:	0800f8b5 	.word	0x0800f8b5
 800c710:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c714:	f1ba 0f0e 	cmp.w	sl, #14
 800c718:	6010      	str	r0, [r2, #0]
 800c71a:	d86f      	bhi.n	800c7fc <_dtoa_r+0x3bc>
 800c71c:	2c00      	cmp	r4, #0
 800c71e:	d06d      	beq.n	800c7fc <_dtoa_r+0x3bc>
 800c720:	f1b8 0f00 	cmp.w	r8, #0
 800c724:	f340 80c2 	ble.w	800c8ac <_dtoa_r+0x46c>
 800c728:	4aca      	ldr	r2, [pc, #808]	@ (800ca54 <_dtoa_r+0x614>)
 800c72a:	f008 010f 	and.w	r1, r8, #15
 800c72e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c732:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c736:	ed92 7b00 	vldr	d7, [r2]
 800c73a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c73e:	f000 80a9 	beq.w	800c894 <_dtoa_r+0x454>
 800c742:	4ac5      	ldr	r2, [pc, #788]	@ (800ca58 <_dtoa_r+0x618>)
 800c744:	ed92 6b08 	vldr	d6, [r2, #32]
 800c748:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c74c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c750:	f001 010f 	and.w	r1, r1, #15
 800c754:	2203      	movs	r2, #3
 800c756:	48c0      	ldr	r0, [pc, #768]	@ (800ca58 <_dtoa_r+0x618>)
 800c758:	2900      	cmp	r1, #0
 800c75a:	f040 809d 	bne.w	800c898 <_dtoa_r+0x458>
 800c75e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c762:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c766:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c76a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c76c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c770:	2900      	cmp	r1, #0
 800c772:	f000 80c1 	beq.w	800c8f8 <_dtoa_r+0x4b8>
 800c776:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c77a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c782:	f140 80b9 	bpl.w	800c8f8 <_dtoa_r+0x4b8>
 800c786:	f1ba 0f00 	cmp.w	sl, #0
 800c78a:	f000 80b5 	beq.w	800c8f8 <_dtoa_r+0x4b8>
 800c78e:	f1bb 0f00 	cmp.w	fp, #0
 800c792:	dd31      	ble.n	800c7f8 <_dtoa_r+0x3b8>
 800c794:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c798:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c79c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c7a0:	f108 31ff 	add.w	r1, r8, #4294967295
 800c7a4:	9104      	str	r1, [sp, #16]
 800c7a6:	3201      	adds	r2, #1
 800c7a8:	465c      	mov	r4, fp
 800c7aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c7ae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c7b2:	ee07 2a90 	vmov	s15, r2
 800c7b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c7ba:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c7be:	ee15 2a90 	vmov	r2, s11
 800c7c2:	ec51 0b15 	vmov	r0, r1, d5
 800c7c6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c7ca:	2c00      	cmp	r4, #0
 800c7cc:	f040 8098 	bne.w	800c900 <_dtoa_r+0x4c0>
 800c7d0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c7d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c7d8:	ec41 0b17 	vmov	d7, r0, r1
 800c7dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e4:	f300 8261 	bgt.w	800ccaa <_dtoa_r+0x86a>
 800c7e8:	eeb1 7b47 	vneg.f64	d7, d7
 800c7ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f4:	f100 80f5 	bmi.w	800c9e2 <_dtoa_r+0x5a2>
 800c7f8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c7fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c7fe:	2a00      	cmp	r2, #0
 800c800:	f2c0 812c 	blt.w	800ca5c <_dtoa_r+0x61c>
 800c804:	f1b8 0f0e 	cmp.w	r8, #14
 800c808:	f300 8128 	bgt.w	800ca5c <_dtoa_r+0x61c>
 800c80c:	4b91      	ldr	r3, [pc, #580]	@ (800ca54 <_dtoa_r+0x614>)
 800c80e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c812:	ed93 6b00 	vldr	d6, [r3]
 800c816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c818:	2b00      	cmp	r3, #0
 800c81a:	da03      	bge.n	800c824 <_dtoa_r+0x3e4>
 800c81c:	f1ba 0f00 	cmp.w	sl, #0
 800c820:	f340 80d2 	ble.w	800c9c8 <_dtoa_r+0x588>
 800c824:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c828:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c82c:	463e      	mov	r6, r7
 800c82e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c832:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c836:	ee15 3a10 	vmov	r3, s10
 800c83a:	3330      	adds	r3, #48	@ 0x30
 800c83c:	f806 3b01 	strb.w	r3, [r6], #1
 800c840:	1bf3      	subs	r3, r6, r7
 800c842:	459a      	cmp	sl, r3
 800c844:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c848:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c84c:	f040 80f8 	bne.w	800ca40 <_dtoa_r+0x600>
 800c850:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c854:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c85c:	f300 80dd 	bgt.w	800ca1a <_dtoa_r+0x5da>
 800c860:	eeb4 7b46 	vcmp.f64	d7, d6
 800c864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c868:	d104      	bne.n	800c874 <_dtoa_r+0x434>
 800c86a:	ee15 3a10 	vmov	r3, s10
 800c86e:	07db      	lsls	r3, r3, #31
 800c870:	f100 80d3 	bmi.w	800ca1a <_dtoa_r+0x5da>
 800c874:	9901      	ldr	r1, [sp, #4]
 800c876:	4648      	mov	r0, r9
 800c878:	f000 fc78 	bl	800d16c <_Bfree>
 800c87c:	2300      	movs	r3, #0
 800c87e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c880:	7033      	strb	r3, [r6, #0]
 800c882:	f108 0301 	add.w	r3, r8, #1
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f000 8304 	beq.w	800ce98 <_dtoa_r+0xa58>
 800c890:	601e      	str	r6, [r3, #0]
 800c892:	e301      	b.n	800ce98 <_dtoa_r+0xa58>
 800c894:	2202      	movs	r2, #2
 800c896:	e75e      	b.n	800c756 <_dtoa_r+0x316>
 800c898:	07cc      	lsls	r4, r1, #31
 800c89a:	d504      	bpl.n	800c8a6 <_dtoa_r+0x466>
 800c89c:	ed90 6b00 	vldr	d6, [r0]
 800c8a0:	3201      	adds	r2, #1
 800c8a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8a6:	1049      	asrs	r1, r1, #1
 800c8a8:	3008      	adds	r0, #8
 800c8aa:	e755      	b.n	800c758 <_dtoa_r+0x318>
 800c8ac:	d022      	beq.n	800c8f4 <_dtoa_r+0x4b4>
 800c8ae:	f1c8 0100 	rsb	r1, r8, #0
 800c8b2:	4a68      	ldr	r2, [pc, #416]	@ (800ca54 <_dtoa_r+0x614>)
 800c8b4:	f001 000f 	and.w	r0, r1, #15
 800c8b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c8bc:	ed92 7b00 	vldr	d7, [r2]
 800c8c0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c8c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c8c8:	4863      	ldr	r0, [pc, #396]	@ (800ca58 <_dtoa_r+0x618>)
 800c8ca:	1109      	asrs	r1, r1, #4
 800c8cc:	2400      	movs	r4, #0
 800c8ce:	2202      	movs	r2, #2
 800c8d0:	b929      	cbnz	r1, 800c8de <_dtoa_r+0x49e>
 800c8d2:	2c00      	cmp	r4, #0
 800c8d4:	f43f af49 	beq.w	800c76a <_dtoa_r+0x32a>
 800c8d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c8dc:	e745      	b.n	800c76a <_dtoa_r+0x32a>
 800c8de:	07ce      	lsls	r6, r1, #31
 800c8e0:	d505      	bpl.n	800c8ee <_dtoa_r+0x4ae>
 800c8e2:	ed90 6b00 	vldr	d6, [r0]
 800c8e6:	3201      	adds	r2, #1
 800c8e8:	2401      	movs	r4, #1
 800c8ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8ee:	1049      	asrs	r1, r1, #1
 800c8f0:	3008      	adds	r0, #8
 800c8f2:	e7ed      	b.n	800c8d0 <_dtoa_r+0x490>
 800c8f4:	2202      	movs	r2, #2
 800c8f6:	e738      	b.n	800c76a <_dtoa_r+0x32a>
 800c8f8:	f8cd 8010 	str.w	r8, [sp, #16]
 800c8fc:	4654      	mov	r4, sl
 800c8fe:	e754      	b.n	800c7aa <_dtoa_r+0x36a>
 800c900:	4a54      	ldr	r2, [pc, #336]	@ (800ca54 <_dtoa_r+0x614>)
 800c902:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c906:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c90a:	9a08      	ldr	r2, [sp, #32]
 800c90c:	ec41 0b17 	vmov	d7, r0, r1
 800c910:	443c      	add	r4, r7
 800c912:	b34a      	cbz	r2, 800c968 <_dtoa_r+0x528>
 800c914:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c918:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c91c:	463e      	mov	r6, r7
 800c91e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c922:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c926:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c92a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c92e:	ee14 2a90 	vmov	r2, s9
 800c932:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c936:	3230      	adds	r2, #48	@ 0x30
 800c938:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c93c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c944:	f806 2b01 	strb.w	r2, [r6], #1
 800c948:	d438      	bmi.n	800c9bc <_dtoa_r+0x57c>
 800c94a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c94e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c956:	d462      	bmi.n	800ca1e <_dtoa_r+0x5de>
 800c958:	42a6      	cmp	r6, r4
 800c95a:	f43f af4d 	beq.w	800c7f8 <_dtoa_r+0x3b8>
 800c95e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c962:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c966:	e7e0      	b.n	800c92a <_dtoa_r+0x4ea>
 800c968:	4621      	mov	r1, r4
 800c96a:	463e      	mov	r6, r7
 800c96c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c970:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c974:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c978:	ee14 2a90 	vmov	r2, s9
 800c97c:	3230      	adds	r2, #48	@ 0x30
 800c97e:	f806 2b01 	strb.w	r2, [r6], #1
 800c982:	42a6      	cmp	r6, r4
 800c984:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c988:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c98c:	d119      	bne.n	800c9c2 <_dtoa_r+0x582>
 800c98e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c992:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c996:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c99e:	dc3e      	bgt.n	800ca1e <_dtoa_r+0x5de>
 800c9a0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c9a4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ac:	f57f af24 	bpl.w	800c7f8 <_dtoa_r+0x3b8>
 800c9b0:	460e      	mov	r6, r1
 800c9b2:	3901      	subs	r1, #1
 800c9b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c9b8:	2b30      	cmp	r3, #48	@ 0x30
 800c9ba:	d0f9      	beq.n	800c9b0 <_dtoa_r+0x570>
 800c9bc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c9c0:	e758      	b.n	800c874 <_dtoa_r+0x434>
 800c9c2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c9c6:	e7d5      	b.n	800c974 <_dtoa_r+0x534>
 800c9c8:	d10b      	bne.n	800c9e2 <_dtoa_r+0x5a2>
 800c9ca:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c9ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c9d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9de:	f2c0 8161 	blt.w	800cca4 <_dtoa_r+0x864>
 800c9e2:	2400      	movs	r4, #0
 800c9e4:	4625      	mov	r5, r4
 800c9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9e8:	43db      	mvns	r3, r3
 800c9ea:	9304      	str	r3, [sp, #16]
 800c9ec:	463e      	mov	r6, r7
 800c9ee:	f04f 0800 	mov.w	r8, #0
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	4648      	mov	r0, r9
 800c9f6:	f000 fbb9 	bl	800d16c <_Bfree>
 800c9fa:	2d00      	cmp	r5, #0
 800c9fc:	d0de      	beq.n	800c9bc <_dtoa_r+0x57c>
 800c9fe:	f1b8 0f00 	cmp.w	r8, #0
 800ca02:	d005      	beq.n	800ca10 <_dtoa_r+0x5d0>
 800ca04:	45a8      	cmp	r8, r5
 800ca06:	d003      	beq.n	800ca10 <_dtoa_r+0x5d0>
 800ca08:	4641      	mov	r1, r8
 800ca0a:	4648      	mov	r0, r9
 800ca0c:	f000 fbae 	bl	800d16c <_Bfree>
 800ca10:	4629      	mov	r1, r5
 800ca12:	4648      	mov	r0, r9
 800ca14:	f000 fbaa 	bl	800d16c <_Bfree>
 800ca18:	e7d0      	b.n	800c9bc <_dtoa_r+0x57c>
 800ca1a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ca1e:	4633      	mov	r3, r6
 800ca20:	461e      	mov	r6, r3
 800ca22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca26:	2a39      	cmp	r2, #57	@ 0x39
 800ca28:	d106      	bne.n	800ca38 <_dtoa_r+0x5f8>
 800ca2a:	429f      	cmp	r7, r3
 800ca2c:	d1f8      	bne.n	800ca20 <_dtoa_r+0x5e0>
 800ca2e:	9a04      	ldr	r2, [sp, #16]
 800ca30:	3201      	adds	r2, #1
 800ca32:	9204      	str	r2, [sp, #16]
 800ca34:	2230      	movs	r2, #48	@ 0x30
 800ca36:	703a      	strb	r2, [r7, #0]
 800ca38:	781a      	ldrb	r2, [r3, #0]
 800ca3a:	3201      	adds	r2, #1
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	e7bd      	b.n	800c9bc <_dtoa_r+0x57c>
 800ca40:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ca44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca4c:	f47f aeef 	bne.w	800c82e <_dtoa_r+0x3ee>
 800ca50:	e710      	b.n	800c874 <_dtoa_r+0x434>
 800ca52:	bf00      	nop
 800ca54:	0800f958 	.word	0x0800f958
 800ca58:	0800f930 	.word	0x0800f930
 800ca5c:	9908      	ldr	r1, [sp, #32]
 800ca5e:	2900      	cmp	r1, #0
 800ca60:	f000 80e3 	beq.w	800cc2a <_dtoa_r+0x7ea>
 800ca64:	9907      	ldr	r1, [sp, #28]
 800ca66:	2901      	cmp	r1, #1
 800ca68:	f300 80c8 	bgt.w	800cbfc <_dtoa_r+0x7bc>
 800ca6c:	2d00      	cmp	r5, #0
 800ca6e:	f000 80c1 	beq.w	800cbf4 <_dtoa_r+0x7b4>
 800ca72:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ca76:	9e05      	ldr	r6, [sp, #20]
 800ca78:	461c      	mov	r4, r3
 800ca7a:	9304      	str	r3, [sp, #16]
 800ca7c:	9b05      	ldr	r3, [sp, #20]
 800ca7e:	4413      	add	r3, r2
 800ca80:	9305      	str	r3, [sp, #20]
 800ca82:	9b06      	ldr	r3, [sp, #24]
 800ca84:	2101      	movs	r1, #1
 800ca86:	4413      	add	r3, r2
 800ca88:	4648      	mov	r0, r9
 800ca8a:	9306      	str	r3, [sp, #24]
 800ca8c:	f000 fc6c 	bl	800d368 <__i2b>
 800ca90:	9b04      	ldr	r3, [sp, #16]
 800ca92:	4605      	mov	r5, r0
 800ca94:	b166      	cbz	r6, 800cab0 <_dtoa_r+0x670>
 800ca96:	9a06      	ldr	r2, [sp, #24]
 800ca98:	2a00      	cmp	r2, #0
 800ca9a:	dd09      	ble.n	800cab0 <_dtoa_r+0x670>
 800ca9c:	42b2      	cmp	r2, r6
 800ca9e:	9905      	ldr	r1, [sp, #20]
 800caa0:	bfa8      	it	ge
 800caa2:	4632      	movge	r2, r6
 800caa4:	1a89      	subs	r1, r1, r2
 800caa6:	9105      	str	r1, [sp, #20]
 800caa8:	9906      	ldr	r1, [sp, #24]
 800caaa:	1ab6      	subs	r6, r6, r2
 800caac:	1a8a      	subs	r2, r1, r2
 800caae:	9206      	str	r2, [sp, #24]
 800cab0:	b1fb      	cbz	r3, 800caf2 <_dtoa_r+0x6b2>
 800cab2:	9a08      	ldr	r2, [sp, #32]
 800cab4:	2a00      	cmp	r2, #0
 800cab6:	f000 80bc 	beq.w	800cc32 <_dtoa_r+0x7f2>
 800caba:	b19c      	cbz	r4, 800cae4 <_dtoa_r+0x6a4>
 800cabc:	4629      	mov	r1, r5
 800cabe:	4622      	mov	r2, r4
 800cac0:	4648      	mov	r0, r9
 800cac2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cac4:	f000 fd10 	bl	800d4e8 <__pow5mult>
 800cac8:	9a01      	ldr	r2, [sp, #4]
 800caca:	4601      	mov	r1, r0
 800cacc:	4605      	mov	r5, r0
 800cace:	4648      	mov	r0, r9
 800cad0:	f000 fc60 	bl	800d394 <__multiply>
 800cad4:	9901      	ldr	r1, [sp, #4]
 800cad6:	9004      	str	r0, [sp, #16]
 800cad8:	4648      	mov	r0, r9
 800cada:	f000 fb47 	bl	800d16c <_Bfree>
 800cade:	9a04      	ldr	r2, [sp, #16]
 800cae0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cae2:	9201      	str	r2, [sp, #4]
 800cae4:	1b1a      	subs	r2, r3, r4
 800cae6:	d004      	beq.n	800caf2 <_dtoa_r+0x6b2>
 800cae8:	9901      	ldr	r1, [sp, #4]
 800caea:	4648      	mov	r0, r9
 800caec:	f000 fcfc 	bl	800d4e8 <__pow5mult>
 800caf0:	9001      	str	r0, [sp, #4]
 800caf2:	2101      	movs	r1, #1
 800caf4:	4648      	mov	r0, r9
 800caf6:	f000 fc37 	bl	800d368 <__i2b>
 800cafa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cafc:	4604      	mov	r4, r0
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 81d0 	beq.w	800cea4 <_dtoa_r+0xa64>
 800cb04:	461a      	mov	r2, r3
 800cb06:	4601      	mov	r1, r0
 800cb08:	4648      	mov	r0, r9
 800cb0a:	f000 fced 	bl	800d4e8 <__pow5mult>
 800cb0e:	9b07      	ldr	r3, [sp, #28]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	4604      	mov	r4, r0
 800cb14:	f300 8095 	bgt.w	800cc42 <_dtoa_r+0x802>
 800cb18:	9b02      	ldr	r3, [sp, #8]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f040 808b 	bne.w	800cc36 <_dtoa_r+0x7f6>
 800cb20:	9b03      	ldr	r3, [sp, #12]
 800cb22:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cb26:	2a00      	cmp	r2, #0
 800cb28:	f040 8087 	bne.w	800cc3a <_dtoa_r+0x7fa>
 800cb2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800cb30:	0d12      	lsrs	r2, r2, #20
 800cb32:	0512      	lsls	r2, r2, #20
 800cb34:	2a00      	cmp	r2, #0
 800cb36:	f000 8082 	beq.w	800cc3e <_dtoa_r+0x7fe>
 800cb3a:	9b05      	ldr	r3, [sp, #20]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	9305      	str	r3, [sp, #20]
 800cb40:	9b06      	ldr	r3, [sp, #24]
 800cb42:	3301      	adds	r3, #1
 800cb44:	9306      	str	r3, [sp, #24]
 800cb46:	2301      	movs	r3, #1
 800cb48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f000 81af 	beq.w	800ceb0 <_dtoa_r+0xa70>
 800cb52:	6922      	ldr	r2, [r4, #16]
 800cb54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cb58:	6910      	ldr	r0, [r2, #16]
 800cb5a:	f000 fbb9 	bl	800d2d0 <__hi0bits>
 800cb5e:	f1c0 0020 	rsb	r0, r0, #32
 800cb62:	9b06      	ldr	r3, [sp, #24]
 800cb64:	4418      	add	r0, r3
 800cb66:	f010 001f 	ands.w	r0, r0, #31
 800cb6a:	d076      	beq.n	800cc5a <_dtoa_r+0x81a>
 800cb6c:	f1c0 0220 	rsb	r2, r0, #32
 800cb70:	2a04      	cmp	r2, #4
 800cb72:	dd69      	ble.n	800cc48 <_dtoa_r+0x808>
 800cb74:	9b05      	ldr	r3, [sp, #20]
 800cb76:	f1c0 001c 	rsb	r0, r0, #28
 800cb7a:	4403      	add	r3, r0
 800cb7c:	9305      	str	r3, [sp, #20]
 800cb7e:	9b06      	ldr	r3, [sp, #24]
 800cb80:	4406      	add	r6, r0
 800cb82:	4403      	add	r3, r0
 800cb84:	9306      	str	r3, [sp, #24]
 800cb86:	9b05      	ldr	r3, [sp, #20]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	dd05      	ble.n	800cb98 <_dtoa_r+0x758>
 800cb8c:	9901      	ldr	r1, [sp, #4]
 800cb8e:	461a      	mov	r2, r3
 800cb90:	4648      	mov	r0, r9
 800cb92:	f000 fd03 	bl	800d59c <__lshift>
 800cb96:	9001      	str	r0, [sp, #4]
 800cb98:	9b06      	ldr	r3, [sp, #24]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	dd05      	ble.n	800cbaa <_dtoa_r+0x76a>
 800cb9e:	4621      	mov	r1, r4
 800cba0:	461a      	mov	r2, r3
 800cba2:	4648      	mov	r0, r9
 800cba4:	f000 fcfa 	bl	800d59c <__lshift>
 800cba8:	4604      	mov	r4, r0
 800cbaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d056      	beq.n	800cc5e <_dtoa_r+0x81e>
 800cbb0:	9801      	ldr	r0, [sp, #4]
 800cbb2:	4621      	mov	r1, r4
 800cbb4:	f000 fd5e 	bl	800d674 <__mcmp>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	da50      	bge.n	800cc5e <_dtoa_r+0x81e>
 800cbbc:	f108 33ff 	add.w	r3, r8, #4294967295
 800cbc0:	9304      	str	r3, [sp, #16]
 800cbc2:	9901      	ldr	r1, [sp, #4]
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	220a      	movs	r2, #10
 800cbc8:	4648      	mov	r0, r9
 800cbca:	f000 faf1 	bl	800d1b0 <__multadd>
 800cbce:	9b08      	ldr	r3, [sp, #32]
 800cbd0:	9001      	str	r0, [sp, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f000 816e 	beq.w	800ceb4 <_dtoa_r+0xa74>
 800cbd8:	4629      	mov	r1, r5
 800cbda:	2300      	movs	r3, #0
 800cbdc:	220a      	movs	r2, #10
 800cbde:	4648      	mov	r0, r9
 800cbe0:	f000 fae6 	bl	800d1b0 <__multadd>
 800cbe4:	f1bb 0f00 	cmp.w	fp, #0
 800cbe8:	4605      	mov	r5, r0
 800cbea:	dc64      	bgt.n	800ccb6 <_dtoa_r+0x876>
 800cbec:	9b07      	ldr	r3, [sp, #28]
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	dc3e      	bgt.n	800cc70 <_dtoa_r+0x830>
 800cbf2:	e060      	b.n	800ccb6 <_dtoa_r+0x876>
 800cbf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbf6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cbfa:	e73c      	b.n	800ca76 <_dtoa_r+0x636>
 800cbfc:	f10a 34ff 	add.w	r4, sl, #4294967295
 800cc00:	42a3      	cmp	r3, r4
 800cc02:	bfbf      	itttt	lt
 800cc04:	1ae2      	sublt	r2, r4, r3
 800cc06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cc08:	189b      	addlt	r3, r3, r2
 800cc0a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800cc0c:	bfae      	itee	ge
 800cc0e:	1b1c      	subge	r4, r3, r4
 800cc10:	4623      	movlt	r3, r4
 800cc12:	2400      	movlt	r4, #0
 800cc14:	f1ba 0f00 	cmp.w	sl, #0
 800cc18:	bfb5      	itete	lt
 800cc1a:	9a05      	ldrlt	r2, [sp, #20]
 800cc1c:	9e05      	ldrge	r6, [sp, #20]
 800cc1e:	eba2 060a 	sublt.w	r6, r2, sl
 800cc22:	4652      	movge	r2, sl
 800cc24:	bfb8      	it	lt
 800cc26:	2200      	movlt	r2, #0
 800cc28:	e727      	b.n	800ca7a <_dtoa_r+0x63a>
 800cc2a:	9e05      	ldr	r6, [sp, #20]
 800cc2c:	9d08      	ldr	r5, [sp, #32]
 800cc2e:	461c      	mov	r4, r3
 800cc30:	e730      	b.n	800ca94 <_dtoa_r+0x654>
 800cc32:	461a      	mov	r2, r3
 800cc34:	e758      	b.n	800cae8 <_dtoa_r+0x6a8>
 800cc36:	2300      	movs	r3, #0
 800cc38:	e786      	b.n	800cb48 <_dtoa_r+0x708>
 800cc3a:	9b02      	ldr	r3, [sp, #8]
 800cc3c:	e784      	b.n	800cb48 <_dtoa_r+0x708>
 800cc3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cc40:	e783      	b.n	800cb4a <_dtoa_r+0x70a>
 800cc42:	2300      	movs	r3, #0
 800cc44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc46:	e784      	b.n	800cb52 <_dtoa_r+0x712>
 800cc48:	d09d      	beq.n	800cb86 <_dtoa_r+0x746>
 800cc4a:	9b05      	ldr	r3, [sp, #20]
 800cc4c:	321c      	adds	r2, #28
 800cc4e:	4413      	add	r3, r2
 800cc50:	9305      	str	r3, [sp, #20]
 800cc52:	9b06      	ldr	r3, [sp, #24]
 800cc54:	4416      	add	r6, r2
 800cc56:	4413      	add	r3, r2
 800cc58:	e794      	b.n	800cb84 <_dtoa_r+0x744>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	e7f5      	b.n	800cc4a <_dtoa_r+0x80a>
 800cc5e:	f1ba 0f00 	cmp.w	sl, #0
 800cc62:	f8cd 8010 	str.w	r8, [sp, #16]
 800cc66:	46d3      	mov	fp, sl
 800cc68:	dc21      	bgt.n	800ccae <_dtoa_r+0x86e>
 800cc6a:	9b07      	ldr	r3, [sp, #28]
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	dd1e      	ble.n	800ccae <_dtoa_r+0x86e>
 800cc70:	f1bb 0f00 	cmp.w	fp, #0
 800cc74:	f47f aeb7 	bne.w	800c9e6 <_dtoa_r+0x5a6>
 800cc78:	4621      	mov	r1, r4
 800cc7a:	465b      	mov	r3, fp
 800cc7c:	2205      	movs	r2, #5
 800cc7e:	4648      	mov	r0, r9
 800cc80:	f000 fa96 	bl	800d1b0 <__multadd>
 800cc84:	4601      	mov	r1, r0
 800cc86:	4604      	mov	r4, r0
 800cc88:	9801      	ldr	r0, [sp, #4]
 800cc8a:	f000 fcf3 	bl	800d674 <__mcmp>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	f77f aea9 	ble.w	800c9e6 <_dtoa_r+0x5a6>
 800cc94:	463e      	mov	r6, r7
 800cc96:	2331      	movs	r3, #49	@ 0x31
 800cc98:	f806 3b01 	strb.w	r3, [r6], #1
 800cc9c:	9b04      	ldr	r3, [sp, #16]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	9304      	str	r3, [sp, #16]
 800cca2:	e6a4      	b.n	800c9ee <_dtoa_r+0x5ae>
 800cca4:	f8cd 8010 	str.w	r8, [sp, #16]
 800cca8:	4654      	mov	r4, sl
 800ccaa:	4625      	mov	r5, r4
 800ccac:	e7f2      	b.n	800cc94 <_dtoa_r+0x854>
 800ccae:	9b08      	ldr	r3, [sp, #32]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 8103 	beq.w	800cebc <_dtoa_r+0xa7c>
 800ccb6:	2e00      	cmp	r6, #0
 800ccb8:	dd05      	ble.n	800ccc6 <_dtoa_r+0x886>
 800ccba:	4629      	mov	r1, r5
 800ccbc:	4632      	mov	r2, r6
 800ccbe:	4648      	mov	r0, r9
 800ccc0:	f000 fc6c 	bl	800d59c <__lshift>
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d058      	beq.n	800cd7e <_dtoa_r+0x93e>
 800cccc:	6869      	ldr	r1, [r5, #4]
 800ccce:	4648      	mov	r0, r9
 800ccd0:	f000 fa0c 	bl	800d0ec <_Balloc>
 800ccd4:	4606      	mov	r6, r0
 800ccd6:	b928      	cbnz	r0, 800cce4 <_dtoa_r+0x8a4>
 800ccd8:	4b82      	ldr	r3, [pc, #520]	@ (800cee4 <_dtoa_r+0xaa4>)
 800ccda:	4602      	mov	r2, r0
 800ccdc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cce0:	f7ff bbc7 	b.w	800c472 <_dtoa_r+0x32>
 800cce4:	692a      	ldr	r2, [r5, #16]
 800cce6:	3202      	adds	r2, #2
 800cce8:	0092      	lsls	r2, r2, #2
 800ccea:	f105 010c 	add.w	r1, r5, #12
 800ccee:	300c      	adds	r0, #12
 800ccf0:	f7ff fb07 	bl	800c302 <memcpy>
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	4631      	mov	r1, r6
 800ccf8:	4648      	mov	r0, r9
 800ccfa:	f000 fc4f 	bl	800d59c <__lshift>
 800ccfe:	1c7b      	adds	r3, r7, #1
 800cd00:	9305      	str	r3, [sp, #20]
 800cd02:	eb07 030b 	add.w	r3, r7, fp
 800cd06:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd08:	9b02      	ldr	r3, [sp, #8]
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	46a8      	mov	r8, r5
 800cd10:	9308      	str	r3, [sp, #32]
 800cd12:	4605      	mov	r5, r0
 800cd14:	9b05      	ldr	r3, [sp, #20]
 800cd16:	9801      	ldr	r0, [sp, #4]
 800cd18:	4621      	mov	r1, r4
 800cd1a:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd1e:	f7ff fb05 	bl	800c32c <quorem>
 800cd22:	4641      	mov	r1, r8
 800cd24:	9002      	str	r0, [sp, #8]
 800cd26:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cd2a:	9801      	ldr	r0, [sp, #4]
 800cd2c:	f000 fca2 	bl	800d674 <__mcmp>
 800cd30:	462a      	mov	r2, r5
 800cd32:	9006      	str	r0, [sp, #24]
 800cd34:	4621      	mov	r1, r4
 800cd36:	4648      	mov	r0, r9
 800cd38:	f000 fcb8 	bl	800d6ac <__mdiff>
 800cd3c:	68c2      	ldr	r2, [r0, #12]
 800cd3e:	4606      	mov	r6, r0
 800cd40:	b9fa      	cbnz	r2, 800cd82 <_dtoa_r+0x942>
 800cd42:	4601      	mov	r1, r0
 800cd44:	9801      	ldr	r0, [sp, #4]
 800cd46:	f000 fc95 	bl	800d674 <__mcmp>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4648      	mov	r0, r9
 800cd50:	920a      	str	r2, [sp, #40]	@ 0x28
 800cd52:	f000 fa0b 	bl	800d16c <_Bfree>
 800cd56:	9b07      	ldr	r3, [sp, #28]
 800cd58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd5a:	9e05      	ldr	r6, [sp, #20]
 800cd5c:	ea43 0102 	orr.w	r1, r3, r2
 800cd60:	9b08      	ldr	r3, [sp, #32]
 800cd62:	4319      	orrs	r1, r3
 800cd64:	d10f      	bne.n	800cd86 <_dtoa_r+0x946>
 800cd66:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cd6a:	d028      	beq.n	800cdbe <_dtoa_r+0x97e>
 800cd6c:	9b06      	ldr	r3, [sp, #24]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	dd02      	ble.n	800cd78 <_dtoa_r+0x938>
 800cd72:	9b02      	ldr	r3, [sp, #8]
 800cd74:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800cd78:	f88b a000 	strb.w	sl, [fp]
 800cd7c:	e639      	b.n	800c9f2 <_dtoa_r+0x5b2>
 800cd7e:	4628      	mov	r0, r5
 800cd80:	e7bd      	b.n	800ccfe <_dtoa_r+0x8be>
 800cd82:	2201      	movs	r2, #1
 800cd84:	e7e2      	b.n	800cd4c <_dtoa_r+0x90c>
 800cd86:	9b06      	ldr	r3, [sp, #24]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	db04      	blt.n	800cd96 <_dtoa_r+0x956>
 800cd8c:	9907      	ldr	r1, [sp, #28]
 800cd8e:	430b      	orrs	r3, r1
 800cd90:	9908      	ldr	r1, [sp, #32]
 800cd92:	430b      	orrs	r3, r1
 800cd94:	d120      	bne.n	800cdd8 <_dtoa_r+0x998>
 800cd96:	2a00      	cmp	r2, #0
 800cd98:	ddee      	ble.n	800cd78 <_dtoa_r+0x938>
 800cd9a:	9901      	ldr	r1, [sp, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	4648      	mov	r0, r9
 800cda0:	f000 fbfc 	bl	800d59c <__lshift>
 800cda4:	4621      	mov	r1, r4
 800cda6:	9001      	str	r0, [sp, #4]
 800cda8:	f000 fc64 	bl	800d674 <__mcmp>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	dc03      	bgt.n	800cdb8 <_dtoa_r+0x978>
 800cdb0:	d1e2      	bne.n	800cd78 <_dtoa_r+0x938>
 800cdb2:	f01a 0f01 	tst.w	sl, #1
 800cdb6:	d0df      	beq.n	800cd78 <_dtoa_r+0x938>
 800cdb8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cdbc:	d1d9      	bne.n	800cd72 <_dtoa_r+0x932>
 800cdbe:	2339      	movs	r3, #57	@ 0x39
 800cdc0:	f88b 3000 	strb.w	r3, [fp]
 800cdc4:	4633      	mov	r3, r6
 800cdc6:	461e      	mov	r6, r3
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cdce:	2a39      	cmp	r2, #57	@ 0x39
 800cdd0:	d053      	beq.n	800ce7a <_dtoa_r+0xa3a>
 800cdd2:	3201      	adds	r2, #1
 800cdd4:	701a      	strb	r2, [r3, #0]
 800cdd6:	e60c      	b.n	800c9f2 <_dtoa_r+0x5b2>
 800cdd8:	2a00      	cmp	r2, #0
 800cdda:	dd07      	ble.n	800cdec <_dtoa_r+0x9ac>
 800cddc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cde0:	d0ed      	beq.n	800cdbe <_dtoa_r+0x97e>
 800cde2:	f10a 0301 	add.w	r3, sl, #1
 800cde6:	f88b 3000 	strb.w	r3, [fp]
 800cdea:	e602      	b.n	800c9f2 <_dtoa_r+0x5b2>
 800cdec:	9b05      	ldr	r3, [sp, #20]
 800cdee:	9a05      	ldr	r2, [sp, #20]
 800cdf0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800cdf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d029      	beq.n	800ce4e <_dtoa_r+0xa0e>
 800cdfa:	9901      	ldr	r1, [sp, #4]
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	220a      	movs	r2, #10
 800ce00:	4648      	mov	r0, r9
 800ce02:	f000 f9d5 	bl	800d1b0 <__multadd>
 800ce06:	45a8      	cmp	r8, r5
 800ce08:	9001      	str	r0, [sp, #4]
 800ce0a:	f04f 0300 	mov.w	r3, #0
 800ce0e:	f04f 020a 	mov.w	r2, #10
 800ce12:	4641      	mov	r1, r8
 800ce14:	4648      	mov	r0, r9
 800ce16:	d107      	bne.n	800ce28 <_dtoa_r+0x9e8>
 800ce18:	f000 f9ca 	bl	800d1b0 <__multadd>
 800ce1c:	4680      	mov	r8, r0
 800ce1e:	4605      	mov	r5, r0
 800ce20:	9b05      	ldr	r3, [sp, #20]
 800ce22:	3301      	adds	r3, #1
 800ce24:	9305      	str	r3, [sp, #20]
 800ce26:	e775      	b.n	800cd14 <_dtoa_r+0x8d4>
 800ce28:	f000 f9c2 	bl	800d1b0 <__multadd>
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4680      	mov	r8, r0
 800ce30:	2300      	movs	r3, #0
 800ce32:	220a      	movs	r2, #10
 800ce34:	4648      	mov	r0, r9
 800ce36:	f000 f9bb 	bl	800d1b0 <__multadd>
 800ce3a:	4605      	mov	r5, r0
 800ce3c:	e7f0      	b.n	800ce20 <_dtoa_r+0x9e0>
 800ce3e:	f1bb 0f00 	cmp.w	fp, #0
 800ce42:	bfcc      	ite	gt
 800ce44:	465e      	movgt	r6, fp
 800ce46:	2601      	movle	r6, #1
 800ce48:	443e      	add	r6, r7
 800ce4a:	f04f 0800 	mov.w	r8, #0
 800ce4e:	9901      	ldr	r1, [sp, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	4648      	mov	r0, r9
 800ce54:	f000 fba2 	bl	800d59c <__lshift>
 800ce58:	4621      	mov	r1, r4
 800ce5a:	9001      	str	r0, [sp, #4]
 800ce5c:	f000 fc0a 	bl	800d674 <__mcmp>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	dcaf      	bgt.n	800cdc4 <_dtoa_r+0x984>
 800ce64:	d102      	bne.n	800ce6c <_dtoa_r+0xa2c>
 800ce66:	f01a 0f01 	tst.w	sl, #1
 800ce6a:	d1ab      	bne.n	800cdc4 <_dtoa_r+0x984>
 800ce6c:	4633      	mov	r3, r6
 800ce6e:	461e      	mov	r6, r3
 800ce70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce74:	2a30      	cmp	r2, #48	@ 0x30
 800ce76:	d0fa      	beq.n	800ce6e <_dtoa_r+0xa2e>
 800ce78:	e5bb      	b.n	800c9f2 <_dtoa_r+0x5b2>
 800ce7a:	429f      	cmp	r7, r3
 800ce7c:	d1a3      	bne.n	800cdc6 <_dtoa_r+0x986>
 800ce7e:	9b04      	ldr	r3, [sp, #16]
 800ce80:	3301      	adds	r3, #1
 800ce82:	9304      	str	r3, [sp, #16]
 800ce84:	2331      	movs	r3, #49	@ 0x31
 800ce86:	703b      	strb	r3, [r7, #0]
 800ce88:	e5b3      	b.n	800c9f2 <_dtoa_r+0x5b2>
 800ce8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce8c:	4f16      	ldr	r7, [pc, #88]	@ (800cee8 <_dtoa_r+0xaa8>)
 800ce8e:	b11b      	cbz	r3, 800ce98 <_dtoa_r+0xa58>
 800ce90:	f107 0308 	add.w	r3, r7, #8
 800ce94:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ce96:	6013      	str	r3, [r2, #0]
 800ce98:	4638      	mov	r0, r7
 800ce9a:	b011      	add	sp, #68	@ 0x44
 800ce9c:	ecbd 8b02 	vpop	{d8}
 800cea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea4:	9b07      	ldr	r3, [sp, #28]
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	f77f ae36 	ble.w	800cb18 <_dtoa_r+0x6d8>
 800ceac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ceb0:	2001      	movs	r0, #1
 800ceb2:	e656      	b.n	800cb62 <_dtoa_r+0x722>
 800ceb4:	f1bb 0f00 	cmp.w	fp, #0
 800ceb8:	f77f aed7 	ble.w	800cc6a <_dtoa_r+0x82a>
 800cebc:	463e      	mov	r6, r7
 800cebe:	9801      	ldr	r0, [sp, #4]
 800cec0:	4621      	mov	r1, r4
 800cec2:	f7ff fa33 	bl	800c32c <quorem>
 800cec6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ceca:	f806 ab01 	strb.w	sl, [r6], #1
 800cece:	1bf2      	subs	r2, r6, r7
 800ced0:	4593      	cmp	fp, r2
 800ced2:	ddb4      	ble.n	800ce3e <_dtoa_r+0x9fe>
 800ced4:	9901      	ldr	r1, [sp, #4]
 800ced6:	2300      	movs	r3, #0
 800ced8:	220a      	movs	r2, #10
 800ceda:	4648      	mov	r0, r9
 800cedc:	f000 f968 	bl	800d1b0 <__multadd>
 800cee0:	9001      	str	r0, [sp, #4]
 800cee2:	e7ec      	b.n	800cebe <_dtoa_r+0xa7e>
 800cee4:	0800f8b5 	.word	0x0800f8b5
 800cee8:	0800f839 	.word	0x0800f839

0800ceec <_free_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4605      	mov	r5, r0
 800cef0:	2900      	cmp	r1, #0
 800cef2:	d041      	beq.n	800cf78 <_free_r+0x8c>
 800cef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cef8:	1f0c      	subs	r4, r1, #4
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	bfb8      	it	lt
 800cefe:	18e4      	addlt	r4, r4, r3
 800cf00:	f000 f8e8 	bl	800d0d4 <__malloc_lock>
 800cf04:	4a1d      	ldr	r2, [pc, #116]	@ (800cf7c <_free_r+0x90>)
 800cf06:	6813      	ldr	r3, [r2, #0]
 800cf08:	b933      	cbnz	r3, 800cf18 <_free_r+0x2c>
 800cf0a:	6063      	str	r3, [r4, #4]
 800cf0c:	6014      	str	r4, [r2, #0]
 800cf0e:	4628      	mov	r0, r5
 800cf10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf14:	f000 b8e4 	b.w	800d0e0 <__malloc_unlock>
 800cf18:	42a3      	cmp	r3, r4
 800cf1a:	d908      	bls.n	800cf2e <_free_r+0x42>
 800cf1c:	6820      	ldr	r0, [r4, #0]
 800cf1e:	1821      	adds	r1, r4, r0
 800cf20:	428b      	cmp	r3, r1
 800cf22:	bf01      	itttt	eq
 800cf24:	6819      	ldreq	r1, [r3, #0]
 800cf26:	685b      	ldreq	r3, [r3, #4]
 800cf28:	1809      	addeq	r1, r1, r0
 800cf2a:	6021      	streq	r1, [r4, #0]
 800cf2c:	e7ed      	b.n	800cf0a <_free_r+0x1e>
 800cf2e:	461a      	mov	r2, r3
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	b10b      	cbz	r3, 800cf38 <_free_r+0x4c>
 800cf34:	42a3      	cmp	r3, r4
 800cf36:	d9fa      	bls.n	800cf2e <_free_r+0x42>
 800cf38:	6811      	ldr	r1, [r2, #0]
 800cf3a:	1850      	adds	r0, r2, r1
 800cf3c:	42a0      	cmp	r0, r4
 800cf3e:	d10b      	bne.n	800cf58 <_free_r+0x6c>
 800cf40:	6820      	ldr	r0, [r4, #0]
 800cf42:	4401      	add	r1, r0
 800cf44:	1850      	adds	r0, r2, r1
 800cf46:	4283      	cmp	r3, r0
 800cf48:	6011      	str	r1, [r2, #0]
 800cf4a:	d1e0      	bne.n	800cf0e <_free_r+0x22>
 800cf4c:	6818      	ldr	r0, [r3, #0]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	6053      	str	r3, [r2, #4]
 800cf52:	4408      	add	r0, r1
 800cf54:	6010      	str	r0, [r2, #0]
 800cf56:	e7da      	b.n	800cf0e <_free_r+0x22>
 800cf58:	d902      	bls.n	800cf60 <_free_r+0x74>
 800cf5a:	230c      	movs	r3, #12
 800cf5c:	602b      	str	r3, [r5, #0]
 800cf5e:	e7d6      	b.n	800cf0e <_free_r+0x22>
 800cf60:	6820      	ldr	r0, [r4, #0]
 800cf62:	1821      	adds	r1, r4, r0
 800cf64:	428b      	cmp	r3, r1
 800cf66:	bf04      	itt	eq
 800cf68:	6819      	ldreq	r1, [r3, #0]
 800cf6a:	685b      	ldreq	r3, [r3, #4]
 800cf6c:	6063      	str	r3, [r4, #4]
 800cf6e:	bf04      	itt	eq
 800cf70:	1809      	addeq	r1, r1, r0
 800cf72:	6021      	streq	r1, [r4, #0]
 800cf74:	6054      	str	r4, [r2, #4]
 800cf76:	e7ca      	b.n	800cf0e <_free_r+0x22>
 800cf78:	bd38      	pop	{r3, r4, r5, pc}
 800cf7a:	bf00      	nop
 800cf7c:	24000794 	.word	0x24000794

0800cf80 <malloc>:
 800cf80:	4b02      	ldr	r3, [pc, #8]	@ (800cf8c <malloc+0xc>)
 800cf82:	4601      	mov	r1, r0
 800cf84:	6818      	ldr	r0, [r3, #0]
 800cf86:	f000 b825 	b.w	800cfd4 <_malloc_r>
 800cf8a:	bf00      	nop
 800cf8c:	2400001c 	.word	0x2400001c

0800cf90 <sbrk_aligned>:
 800cf90:	b570      	push	{r4, r5, r6, lr}
 800cf92:	4e0f      	ldr	r6, [pc, #60]	@ (800cfd0 <sbrk_aligned+0x40>)
 800cf94:	460c      	mov	r4, r1
 800cf96:	6831      	ldr	r1, [r6, #0]
 800cf98:	4605      	mov	r5, r0
 800cf9a:	b911      	cbnz	r1, 800cfa2 <sbrk_aligned+0x12>
 800cf9c:	f001 ff7e 	bl	800ee9c <_sbrk_r>
 800cfa0:	6030      	str	r0, [r6, #0]
 800cfa2:	4621      	mov	r1, r4
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f001 ff79 	bl	800ee9c <_sbrk_r>
 800cfaa:	1c43      	adds	r3, r0, #1
 800cfac:	d103      	bne.n	800cfb6 <sbrk_aligned+0x26>
 800cfae:	f04f 34ff 	mov.w	r4, #4294967295
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	bd70      	pop	{r4, r5, r6, pc}
 800cfb6:	1cc4      	adds	r4, r0, #3
 800cfb8:	f024 0403 	bic.w	r4, r4, #3
 800cfbc:	42a0      	cmp	r0, r4
 800cfbe:	d0f8      	beq.n	800cfb2 <sbrk_aligned+0x22>
 800cfc0:	1a21      	subs	r1, r4, r0
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	f001 ff6a 	bl	800ee9c <_sbrk_r>
 800cfc8:	3001      	adds	r0, #1
 800cfca:	d1f2      	bne.n	800cfb2 <sbrk_aligned+0x22>
 800cfcc:	e7ef      	b.n	800cfae <sbrk_aligned+0x1e>
 800cfce:	bf00      	nop
 800cfd0:	24000790 	.word	0x24000790

0800cfd4 <_malloc_r>:
 800cfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd8:	1ccd      	adds	r5, r1, #3
 800cfda:	f025 0503 	bic.w	r5, r5, #3
 800cfde:	3508      	adds	r5, #8
 800cfe0:	2d0c      	cmp	r5, #12
 800cfe2:	bf38      	it	cc
 800cfe4:	250c      	movcc	r5, #12
 800cfe6:	2d00      	cmp	r5, #0
 800cfe8:	4606      	mov	r6, r0
 800cfea:	db01      	blt.n	800cff0 <_malloc_r+0x1c>
 800cfec:	42a9      	cmp	r1, r5
 800cfee:	d904      	bls.n	800cffa <_malloc_r+0x26>
 800cff0:	230c      	movs	r3, #12
 800cff2:	6033      	str	r3, [r6, #0]
 800cff4:	2000      	movs	r0, #0
 800cff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cffa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0d0 <_malloc_r+0xfc>
 800cffe:	f000 f869 	bl	800d0d4 <__malloc_lock>
 800d002:	f8d8 3000 	ldr.w	r3, [r8]
 800d006:	461c      	mov	r4, r3
 800d008:	bb44      	cbnz	r4, 800d05c <_malloc_r+0x88>
 800d00a:	4629      	mov	r1, r5
 800d00c:	4630      	mov	r0, r6
 800d00e:	f7ff ffbf 	bl	800cf90 <sbrk_aligned>
 800d012:	1c43      	adds	r3, r0, #1
 800d014:	4604      	mov	r4, r0
 800d016:	d158      	bne.n	800d0ca <_malloc_r+0xf6>
 800d018:	f8d8 4000 	ldr.w	r4, [r8]
 800d01c:	4627      	mov	r7, r4
 800d01e:	2f00      	cmp	r7, #0
 800d020:	d143      	bne.n	800d0aa <_malloc_r+0xd6>
 800d022:	2c00      	cmp	r4, #0
 800d024:	d04b      	beq.n	800d0be <_malloc_r+0xea>
 800d026:	6823      	ldr	r3, [r4, #0]
 800d028:	4639      	mov	r1, r7
 800d02a:	4630      	mov	r0, r6
 800d02c:	eb04 0903 	add.w	r9, r4, r3
 800d030:	f001 ff34 	bl	800ee9c <_sbrk_r>
 800d034:	4581      	cmp	r9, r0
 800d036:	d142      	bne.n	800d0be <_malloc_r+0xea>
 800d038:	6821      	ldr	r1, [r4, #0]
 800d03a:	1a6d      	subs	r5, r5, r1
 800d03c:	4629      	mov	r1, r5
 800d03e:	4630      	mov	r0, r6
 800d040:	f7ff ffa6 	bl	800cf90 <sbrk_aligned>
 800d044:	3001      	adds	r0, #1
 800d046:	d03a      	beq.n	800d0be <_malloc_r+0xea>
 800d048:	6823      	ldr	r3, [r4, #0]
 800d04a:	442b      	add	r3, r5
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	f8d8 3000 	ldr.w	r3, [r8]
 800d052:	685a      	ldr	r2, [r3, #4]
 800d054:	bb62      	cbnz	r2, 800d0b0 <_malloc_r+0xdc>
 800d056:	f8c8 7000 	str.w	r7, [r8]
 800d05a:	e00f      	b.n	800d07c <_malloc_r+0xa8>
 800d05c:	6822      	ldr	r2, [r4, #0]
 800d05e:	1b52      	subs	r2, r2, r5
 800d060:	d420      	bmi.n	800d0a4 <_malloc_r+0xd0>
 800d062:	2a0b      	cmp	r2, #11
 800d064:	d917      	bls.n	800d096 <_malloc_r+0xc2>
 800d066:	1961      	adds	r1, r4, r5
 800d068:	42a3      	cmp	r3, r4
 800d06a:	6025      	str	r5, [r4, #0]
 800d06c:	bf18      	it	ne
 800d06e:	6059      	strne	r1, [r3, #4]
 800d070:	6863      	ldr	r3, [r4, #4]
 800d072:	bf08      	it	eq
 800d074:	f8c8 1000 	streq.w	r1, [r8]
 800d078:	5162      	str	r2, [r4, r5]
 800d07a:	604b      	str	r3, [r1, #4]
 800d07c:	4630      	mov	r0, r6
 800d07e:	f000 f82f 	bl	800d0e0 <__malloc_unlock>
 800d082:	f104 000b 	add.w	r0, r4, #11
 800d086:	1d23      	adds	r3, r4, #4
 800d088:	f020 0007 	bic.w	r0, r0, #7
 800d08c:	1ac2      	subs	r2, r0, r3
 800d08e:	bf1c      	itt	ne
 800d090:	1a1b      	subne	r3, r3, r0
 800d092:	50a3      	strne	r3, [r4, r2]
 800d094:	e7af      	b.n	800cff6 <_malloc_r+0x22>
 800d096:	6862      	ldr	r2, [r4, #4]
 800d098:	42a3      	cmp	r3, r4
 800d09a:	bf0c      	ite	eq
 800d09c:	f8c8 2000 	streq.w	r2, [r8]
 800d0a0:	605a      	strne	r2, [r3, #4]
 800d0a2:	e7eb      	b.n	800d07c <_malloc_r+0xa8>
 800d0a4:	4623      	mov	r3, r4
 800d0a6:	6864      	ldr	r4, [r4, #4]
 800d0a8:	e7ae      	b.n	800d008 <_malloc_r+0x34>
 800d0aa:	463c      	mov	r4, r7
 800d0ac:	687f      	ldr	r7, [r7, #4]
 800d0ae:	e7b6      	b.n	800d01e <_malloc_r+0x4a>
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	42a3      	cmp	r3, r4
 800d0b6:	d1fb      	bne.n	800d0b0 <_malloc_r+0xdc>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	6053      	str	r3, [r2, #4]
 800d0bc:	e7de      	b.n	800d07c <_malloc_r+0xa8>
 800d0be:	230c      	movs	r3, #12
 800d0c0:	6033      	str	r3, [r6, #0]
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f000 f80c 	bl	800d0e0 <__malloc_unlock>
 800d0c8:	e794      	b.n	800cff4 <_malloc_r+0x20>
 800d0ca:	6005      	str	r5, [r0, #0]
 800d0cc:	e7d6      	b.n	800d07c <_malloc_r+0xa8>
 800d0ce:	bf00      	nop
 800d0d0:	24000794 	.word	0x24000794

0800d0d4 <__malloc_lock>:
 800d0d4:	4801      	ldr	r0, [pc, #4]	@ (800d0dc <__malloc_lock+0x8>)
 800d0d6:	f7ff b912 	b.w	800c2fe <__retarget_lock_acquire_recursive>
 800d0da:	bf00      	nop
 800d0dc:	2400078c 	.word	0x2400078c

0800d0e0 <__malloc_unlock>:
 800d0e0:	4801      	ldr	r0, [pc, #4]	@ (800d0e8 <__malloc_unlock+0x8>)
 800d0e2:	f7ff b90d 	b.w	800c300 <__retarget_lock_release_recursive>
 800d0e6:	bf00      	nop
 800d0e8:	2400078c 	.word	0x2400078c

0800d0ec <_Balloc>:
 800d0ec:	b570      	push	{r4, r5, r6, lr}
 800d0ee:	69c6      	ldr	r6, [r0, #28]
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	460d      	mov	r5, r1
 800d0f4:	b976      	cbnz	r6, 800d114 <_Balloc+0x28>
 800d0f6:	2010      	movs	r0, #16
 800d0f8:	f7ff ff42 	bl	800cf80 <malloc>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	61e0      	str	r0, [r4, #28]
 800d100:	b920      	cbnz	r0, 800d10c <_Balloc+0x20>
 800d102:	4b18      	ldr	r3, [pc, #96]	@ (800d164 <_Balloc+0x78>)
 800d104:	4818      	ldr	r0, [pc, #96]	@ (800d168 <_Balloc+0x7c>)
 800d106:	216b      	movs	r1, #107	@ 0x6b
 800d108:	f001 fee2 	bl	800eed0 <__assert_func>
 800d10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d110:	6006      	str	r6, [r0, #0]
 800d112:	60c6      	str	r6, [r0, #12]
 800d114:	69e6      	ldr	r6, [r4, #28]
 800d116:	68f3      	ldr	r3, [r6, #12]
 800d118:	b183      	cbz	r3, 800d13c <_Balloc+0x50>
 800d11a:	69e3      	ldr	r3, [r4, #28]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d122:	b9b8      	cbnz	r0, 800d154 <_Balloc+0x68>
 800d124:	2101      	movs	r1, #1
 800d126:	fa01 f605 	lsl.w	r6, r1, r5
 800d12a:	1d72      	adds	r2, r6, #5
 800d12c:	0092      	lsls	r2, r2, #2
 800d12e:	4620      	mov	r0, r4
 800d130:	f001 feec 	bl	800ef0c <_calloc_r>
 800d134:	b160      	cbz	r0, 800d150 <_Balloc+0x64>
 800d136:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d13a:	e00e      	b.n	800d15a <_Balloc+0x6e>
 800d13c:	2221      	movs	r2, #33	@ 0x21
 800d13e:	2104      	movs	r1, #4
 800d140:	4620      	mov	r0, r4
 800d142:	f001 fee3 	bl	800ef0c <_calloc_r>
 800d146:	69e3      	ldr	r3, [r4, #28]
 800d148:	60f0      	str	r0, [r6, #12]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1e4      	bne.n	800d11a <_Balloc+0x2e>
 800d150:	2000      	movs	r0, #0
 800d152:	bd70      	pop	{r4, r5, r6, pc}
 800d154:	6802      	ldr	r2, [r0, #0]
 800d156:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d15a:	2300      	movs	r3, #0
 800d15c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d160:	e7f7      	b.n	800d152 <_Balloc+0x66>
 800d162:	bf00      	nop
 800d164:	0800f846 	.word	0x0800f846
 800d168:	0800f8c6 	.word	0x0800f8c6

0800d16c <_Bfree>:
 800d16c:	b570      	push	{r4, r5, r6, lr}
 800d16e:	69c6      	ldr	r6, [r0, #28]
 800d170:	4605      	mov	r5, r0
 800d172:	460c      	mov	r4, r1
 800d174:	b976      	cbnz	r6, 800d194 <_Bfree+0x28>
 800d176:	2010      	movs	r0, #16
 800d178:	f7ff ff02 	bl	800cf80 <malloc>
 800d17c:	4602      	mov	r2, r0
 800d17e:	61e8      	str	r0, [r5, #28]
 800d180:	b920      	cbnz	r0, 800d18c <_Bfree+0x20>
 800d182:	4b09      	ldr	r3, [pc, #36]	@ (800d1a8 <_Bfree+0x3c>)
 800d184:	4809      	ldr	r0, [pc, #36]	@ (800d1ac <_Bfree+0x40>)
 800d186:	218f      	movs	r1, #143	@ 0x8f
 800d188:	f001 fea2 	bl	800eed0 <__assert_func>
 800d18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d190:	6006      	str	r6, [r0, #0]
 800d192:	60c6      	str	r6, [r0, #12]
 800d194:	b13c      	cbz	r4, 800d1a6 <_Bfree+0x3a>
 800d196:	69eb      	ldr	r3, [r5, #28]
 800d198:	6862      	ldr	r2, [r4, #4]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1a0:	6021      	str	r1, [r4, #0]
 800d1a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}
 800d1a8:	0800f846 	.word	0x0800f846
 800d1ac:	0800f8c6 	.word	0x0800f8c6

0800d1b0 <__multadd>:
 800d1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b4:	690d      	ldr	r5, [r1, #16]
 800d1b6:	4607      	mov	r7, r0
 800d1b8:	460c      	mov	r4, r1
 800d1ba:	461e      	mov	r6, r3
 800d1bc:	f101 0c14 	add.w	ip, r1, #20
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	f8dc 3000 	ldr.w	r3, [ip]
 800d1c6:	b299      	uxth	r1, r3
 800d1c8:	fb02 6101 	mla	r1, r2, r1, r6
 800d1cc:	0c1e      	lsrs	r6, r3, #16
 800d1ce:	0c0b      	lsrs	r3, r1, #16
 800d1d0:	fb02 3306 	mla	r3, r2, r6, r3
 800d1d4:	b289      	uxth	r1, r1
 800d1d6:	3001      	adds	r0, #1
 800d1d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d1dc:	4285      	cmp	r5, r0
 800d1de:	f84c 1b04 	str.w	r1, [ip], #4
 800d1e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1e6:	dcec      	bgt.n	800d1c2 <__multadd+0x12>
 800d1e8:	b30e      	cbz	r6, 800d22e <__multadd+0x7e>
 800d1ea:	68a3      	ldr	r3, [r4, #8]
 800d1ec:	42ab      	cmp	r3, r5
 800d1ee:	dc19      	bgt.n	800d224 <__multadd+0x74>
 800d1f0:	6861      	ldr	r1, [r4, #4]
 800d1f2:	4638      	mov	r0, r7
 800d1f4:	3101      	adds	r1, #1
 800d1f6:	f7ff ff79 	bl	800d0ec <_Balloc>
 800d1fa:	4680      	mov	r8, r0
 800d1fc:	b928      	cbnz	r0, 800d20a <__multadd+0x5a>
 800d1fe:	4602      	mov	r2, r0
 800d200:	4b0c      	ldr	r3, [pc, #48]	@ (800d234 <__multadd+0x84>)
 800d202:	480d      	ldr	r0, [pc, #52]	@ (800d238 <__multadd+0x88>)
 800d204:	21ba      	movs	r1, #186	@ 0xba
 800d206:	f001 fe63 	bl	800eed0 <__assert_func>
 800d20a:	6922      	ldr	r2, [r4, #16]
 800d20c:	3202      	adds	r2, #2
 800d20e:	f104 010c 	add.w	r1, r4, #12
 800d212:	0092      	lsls	r2, r2, #2
 800d214:	300c      	adds	r0, #12
 800d216:	f7ff f874 	bl	800c302 <memcpy>
 800d21a:	4621      	mov	r1, r4
 800d21c:	4638      	mov	r0, r7
 800d21e:	f7ff ffa5 	bl	800d16c <_Bfree>
 800d222:	4644      	mov	r4, r8
 800d224:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d228:	3501      	adds	r5, #1
 800d22a:	615e      	str	r6, [r3, #20]
 800d22c:	6125      	str	r5, [r4, #16]
 800d22e:	4620      	mov	r0, r4
 800d230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d234:	0800f8b5 	.word	0x0800f8b5
 800d238:	0800f8c6 	.word	0x0800f8c6

0800d23c <__s2b>:
 800d23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d240:	460c      	mov	r4, r1
 800d242:	4615      	mov	r5, r2
 800d244:	461f      	mov	r7, r3
 800d246:	2209      	movs	r2, #9
 800d248:	3308      	adds	r3, #8
 800d24a:	4606      	mov	r6, r0
 800d24c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d250:	2100      	movs	r1, #0
 800d252:	2201      	movs	r2, #1
 800d254:	429a      	cmp	r2, r3
 800d256:	db09      	blt.n	800d26c <__s2b+0x30>
 800d258:	4630      	mov	r0, r6
 800d25a:	f7ff ff47 	bl	800d0ec <_Balloc>
 800d25e:	b940      	cbnz	r0, 800d272 <__s2b+0x36>
 800d260:	4602      	mov	r2, r0
 800d262:	4b19      	ldr	r3, [pc, #100]	@ (800d2c8 <__s2b+0x8c>)
 800d264:	4819      	ldr	r0, [pc, #100]	@ (800d2cc <__s2b+0x90>)
 800d266:	21d3      	movs	r1, #211	@ 0xd3
 800d268:	f001 fe32 	bl	800eed0 <__assert_func>
 800d26c:	0052      	lsls	r2, r2, #1
 800d26e:	3101      	adds	r1, #1
 800d270:	e7f0      	b.n	800d254 <__s2b+0x18>
 800d272:	9b08      	ldr	r3, [sp, #32]
 800d274:	6143      	str	r3, [r0, #20]
 800d276:	2d09      	cmp	r5, #9
 800d278:	f04f 0301 	mov.w	r3, #1
 800d27c:	6103      	str	r3, [r0, #16]
 800d27e:	dd16      	ble.n	800d2ae <__s2b+0x72>
 800d280:	f104 0909 	add.w	r9, r4, #9
 800d284:	46c8      	mov	r8, r9
 800d286:	442c      	add	r4, r5
 800d288:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d28c:	4601      	mov	r1, r0
 800d28e:	3b30      	subs	r3, #48	@ 0x30
 800d290:	220a      	movs	r2, #10
 800d292:	4630      	mov	r0, r6
 800d294:	f7ff ff8c 	bl	800d1b0 <__multadd>
 800d298:	45a0      	cmp	r8, r4
 800d29a:	d1f5      	bne.n	800d288 <__s2b+0x4c>
 800d29c:	f1a5 0408 	sub.w	r4, r5, #8
 800d2a0:	444c      	add	r4, r9
 800d2a2:	1b2d      	subs	r5, r5, r4
 800d2a4:	1963      	adds	r3, r4, r5
 800d2a6:	42bb      	cmp	r3, r7
 800d2a8:	db04      	blt.n	800d2b4 <__s2b+0x78>
 800d2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2ae:	340a      	adds	r4, #10
 800d2b0:	2509      	movs	r5, #9
 800d2b2:	e7f6      	b.n	800d2a2 <__s2b+0x66>
 800d2b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2b8:	4601      	mov	r1, r0
 800d2ba:	3b30      	subs	r3, #48	@ 0x30
 800d2bc:	220a      	movs	r2, #10
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f7ff ff76 	bl	800d1b0 <__multadd>
 800d2c4:	e7ee      	b.n	800d2a4 <__s2b+0x68>
 800d2c6:	bf00      	nop
 800d2c8:	0800f8b5 	.word	0x0800f8b5
 800d2cc:	0800f8c6 	.word	0x0800f8c6

0800d2d0 <__hi0bits>:
 800d2d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	bf36      	itet	cc
 800d2d8:	0403      	lslcc	r3, r0, #16
 800d2da:	2000      	movcs	r0, #0
 800d2dc:	2010      	movcc	r0, #16
 800d2de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2e2:	bf3c      	itt	cc
 800d2e4:	021b      	lslcc	r3, r3, #8
 800d2e6:	3008      	addcc	r0, #8
 800d2e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2ec:	bf3c      	itt	cc
 800d2ee:	011b      	lslcc	r3, r3, #4
 800d2f0:	3004      	addcc	r0, #4
 800d2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2f6:	bf3c      	itt	cc
 800d2f8:	009b      	lslcc	r3, r3, #2
 800d2fa:	3002      	addcc	r0, #2
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	db05      	blt.n	800d30c <__hi0bits+0x3c>
 800d300:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d304:	f100 0001 	add.w	r0, r0, #1
 800d308:	bf08      	it	eq
 800d30a:	2020      	moveq	r0, #32
 800d30c:	4770      	bx	lr

0800d30e <__lo0bits>:
 800d30e:	6803      	ldr	r3, [r0, #0]
 800d310:	4602      	mov	r2, r0
 800d312:	f013 0007 	ands.w	r0, r3, #7
 800d316:	d00b      	beq.n	800d330 <__lo0bits+0x22>
 800d318:	07d9      	lsls	r1, r3, #31
 800d31a:	d421      	bmi.n	800d360 <__lo0bits+0x52>
 800d31c:	0798      	lsls	r0, r3, #30
 800d31e:	bf49      	itett	mi
 800d320:	085b      	lsrmi	r3, r3, #1
 800d322:	089b      	lsrpl	r3, r3, #2
 800d324:	2001      	movmi	r0, #1
 800d326:	6013      	strmi	r3, [r2, #0]
 800d328:	bf5c      	itt	pl
 800d32a:	6013      	strpl	r3, [r2, #0]
 800d32c:	2002      	movpl	r0, #2
 800d32e:	4770      	bx	lr
 800d330:	b299      	uxth	r1, r3
 800d332:	b909      	cbnz	r1, 800d338 <__lo0bits+0x2a>
 800d334:	0c1b      	lsrs	r3, r3, #16
 800d336:	2010      	movs	r0, #16
 800d338:	b2d9      	uxtb	r1, r3
 800d33a:	b909      	cbnz	r1, 800d340 <__lo0bits+0x32>
 800d33c:	3008      	adds	r0, #8
 800d33e:	0a1b      	lsrs	r3, r3, #8
 800d340:	0719      	lsls	r1, r3, #28
 800d342:	bf04      	itt	eq
 800d344:	091b      	lsreq	r3, r3, #4
 800d346:	3004      	addeq	r0, #4
 800d348:	0799      	lsls	r1, r3, #30
 800d34a:	bf04      	itt	eq
 800d34c:	089b      	lsreq	r3, r3, #2
 800d34e:	3002      	addeq	r0, #2
 800d350:	07d9      	lsls	r1, r3, #31
 800d352:	d403      	bmi.n	800d35c <__lo0bits+0x4e>
 800d354:	085b      	lsrs	r3, r3, #1
 800d356:	f100 0001 	add.w	r0, r0, #1
 800d35a:	d003      	beq.n	800d364 <__lo0bits+0x56>
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	4770      	bx	lr
 800d360:	2000      	movs	r0, #0
 800d362:	4770      	bx	lr
 800d364:	2020      	movs	r0, #32
 800d366:	4770      	bx	lr

0800d368 <__i2b>:
 800d368:	b510      	push	{r4, lr}
 800d36a:	460c      	mov	r4, r1
 800d36c:	2101      	movs	r1, #1
 800d36e:	f7ff febd 	bl	800d0ec <_Balloc>
 800d372:	4602      	mov	r2, r0
 800d374:	b928      	cbnz	r0, 800d382 <__i2b+0x1a>
 800d376:	4b05      	ldr	r3, [pc, #20]	@ (800d38c <__i2b+0x24>)
 800d378:	4805      	ldr	r0, [pc, #20]	@ (800d390 <__i2b+0x28>)
 800d37a:	f240 1145 	movw	r1, #325	@ 0x145
 800d37e:	f001 fda7 	bl	800eed0 <__assert_func>
 800d382:	2301      	movs	r3, #1
 800d384:	6144      	str	r4, [r0, #20]
 800d386:	6103      	str	r3, [r0, #16]
 800d388:	bd10      	pop	{r4, pc}
 800d38a:	bf00      	nop
 800d38c:	0800f8b5 	.word	0x0800f8b5
 800d390:	0800f8c6 	.word	0x0800f8c6

0800d394 <__multiply>:
 800d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d398:	4614      	mov	r4, r2
 800d39a:	690a      	ldr	r2, [r1, #16]
 800d39c:	6923      	ldr	r3, [r4, #16]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	bfa8      	it	ge
 800d3a2:	4623      	movge	r3, r4
 800d3a4:	460f      	mov	r7, r1
 800d3a6:	bfa4      	itt	ge
 800d3a8:	460c      	movge	r4, r1
 800d3aa:	461f      	movge	r7, r3
 800d3ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d3b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d3b4:	68a3      	ldr	r3, [r4, #8]
 800d3b6:	6861      	ldr	r1, [r4, #4]
 800d3b8:	eb0a 0609 	add.w	r6, sl, r9
 800d3bc:	42b3      	cmp	r3, r6
 800d3be:	b085      	sub	sp, #20
 800d3c0:	bfb8      	it	lt
 800d3c2:	3101      	addlt	r1, #1
 800d3c4:	f7ff fe92 	bl	800d0ec <_Balloc>
 800d3c8:	b930      	cbnz	r0, 800d3d8 <__multiply+0x44>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	4b44      	ldr	r3, [pc, #272]	@ (800d4e0 <__multiply+0x14c>)
 800d3ce:	4845      	ldr	r0, [pc, #276]	@ (800d4e4 <__multiply+0x150>)
 800d3d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d3d4:	f001 fd7c 	bl	800eed0 <__assert_func>
 800d3d8:	f100 0514 	add.w	r5, r0, #20
 800d3dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3e0:	462b      	mov	r3, r5
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	4543      	cmp	r3, r8
 800d3e6:	d321      	bcc.n	800d42c <__multiply+0x98>
 800d3e8:	f107 0114 	add.w	r1, r7, #20
 800d3ec:	f104 0214 	add.w	r2, r4, #20
 800d3f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d3f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d3f8:	9302      	str	r3, [sp, #8]
 800d3fa:	1b13      	subs	r3, r2, r4
 800d3fc:	3b15      	subs	r3, #21
 800d3fe:	f023 0303 	bic.w	r3, r3, #3
 800d402:	3304      	adds	r3, #4
 800d404:	f104 0715 	add.w	r7, r4, #21
 800d408:	42ba      	cmp	r2, r7
 800d40a:	bf38      	it	cc
 800d40c:	2304      	movcc	r3, #4
 800d40e:	9301      	str	r3, [sp, #4]
 800d410:	9b02      	ldr	r3, [sp, #8]
 800d412:	9103      	str	r1, [sp, #12]
 800d414:	428b      	cmp	r3, r1
 800d416:	d80c      	bhi.n	800d432 <__multiply+0x9e>
 800d418:	2e00      	cmp	r6, #0
 800d41a:	dd03      	ble.n	800d424 <__multiply+0x90>
 800d41c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d420:	2b00      	cmp	r3, #0
 800d422:	d05b      	beq.n	800d4dc <__multiply+0x148>
 800d424:	6106      	str	r6, [r0, #16]
 800d426:	b005      	add	sp, #20
 800d428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42c:	f843 2b04 	str.w	r2, [r3], #4
 800d430:	e7d8      	b.n	800d3e4 <__multiply+0x50>
 800d432:	f8b1 a000 	ldrh.w	sl, [r1]
 800d436:	f1ba 0f00 	cmp.w	sl, #0
 800d43a:	d024      	beq.n	800d486 <__multiply+0xf2>
 800d43c:	f104 0e14 	add.w	lr, r4, #20
 800d440:	46a9      	mov	r9, r5
 800d442:	f04f 0c00 	mov.w	ip, #0
 800d446:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d44a:	f8d9 3000 	ldr.w	r3, [r9]
 800d44e:	fa1f fb87 	uxth.w	fp, r7
 800d452:	b29b      	uxth	r3, r3
 800d454:	fb0a 330b 	mla	r3, sl, fp, r3
 800d458:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d45c:	f8d9 7000 	ldr.w	r7, [r9]
 800d460:	4463      	add	r3, ip
 800d462:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d466:	fb0a c70b 	mla	r7, sl, fp, ip
 800d46a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d46e:	b29b      	uxth	r3, r3
 800d470:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d474:	4572      	cmp	r2, lr
 800d476:	f849 3b04 	str.w	r3, [r9], #4
 800d47a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d47e:	d8e2      	bhi.n	800d446 <__multiply+0xb2>
 800d480:	9b01      	ldr	r3, [sp, #4]
 800d482:	f845 c003 	str.w	ip, [r5, r3]
 800d486:	9b03      	ldr	r3, [sp, #12]
 800d488:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d48c:	3104      	adds	r1, #4
 800d48e:	f1b9 0f00 	cmp.w	r9, #0
 800d492:	d021      	beq.n	800d4d8 <__multiply+0x144>
 800d494:	682b      	ldr	r3, [r5, #0]
 800d496:	f104 0c14 	add.w	ip, r4, #20
 800d49a:	46ae      	mov	lr, r5
 800d49c:	f04f 0a00 	mov.w	sl, #0
 800d4a0:	f8bc b000 	ldrh.w	fp, [ip]
 800d4a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d4a8:	fb09 770b 	mla	r7, r9, fp, r7
 800d4ac:	4457      	add	r7, sl
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d4b4:	f84e 3b04 	str.w	r3, [lr], #4
 800d4b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d4bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4c0:	f8be 3000 	ldrh.w	r3, [lr]
 800d4c4:	fb09 330a 	mla	r3, r9, sl, r3
 800d4c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d4cc:	4562      	cmp	r2, ip
 800d4ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4d2:	d8e5      	bhi.n	800d4a0 <__multiply+0x10c>
 800d4d4:	9f01      	ldr	r7, [sp, #4]
 800d4d6:	51eb      	str	r3, [r5, r7]
 800d4d8:	3504      	adds	r5, #4
 800d4da:	e799      	b.n	800d410 <__multiply+0x7c>
 800d4dc:	3e01      	subs	r6, #1
 800d4de:	e79b      	b.n	800d418 <__multiply+0x84>
 800d4e0:	0800f8b5 	.word	0x0800f8b5
 800d4e4:	0800f8c6 	.word	0x0800f8c6

0800d4e8 <__pow5mult>:
 800d4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4ec:	4615      	mov	r5, r2
 800d4ee:	f012 0203 	ands.w	r2, r2, #3
 800d4f2:	4607      	mov	r7, r0
 800d4f4:	460e      	mov	r6, r1
 800d4f6:	d007      	beq.n	800d508 <__pow5mult+0x20>
 800d4f8:	4c25      	ldr	r4, [pc, #148]	@ (800d590 <__pow5mult+0xa8>)
 800d4fa:	3a01      	subs	r2, #1
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d502:	f7ff fe55 	bl	800d1b0 <__multadd>
 800d506:	4606      	mov	r6, r0
 800d508:	10ad      	asrs	r5, r5, #2
 800d50a:	d03d      	beq.n	800d588 <__pow5mult+0xa0>
 800d50c:	69fc      	ldr	r4, [r7, #28]
 800d50e:	b97c      	cbnz	r4, 800d530 <__pow5mult+0x48>
 800d510:	2010      	movs	r0, #16
 800d512:	f7ff fd35 	bl	800cf80 <malloc>
 800d516:	4602      	mov	r2, r0
 800d518:	61f8      	str	r0, [r7, #28]
 800d51a:	b928      	cbnz	r0, 800d528 <__pow5mult+0x40>
 800d51c:	4b1d      	ldr	r3, [pc, #116]	@ (800d594 <__pow5mult+0xac>)
 800d51e:	481e      	ldr	r0, [pc, #120]	@ (800d598 <__pow5mult+0xb0>)
 800d520:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d524:	f001 fcd4 	bl	800eed0 <__assert_func>
 800d528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d52c:	6004      	str	r4, [r0, #0]
 800d52e:	60c4      	str	r4, [r0, #12]
 800d530:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d538:	b94c      	cbnz	r4, 800d54e <__pow5mult+0x66>
 800d53a:	f240 2171 	movw	r1, #625	@ 0x271
 800d53e:	4638      	mov	r0, r7
 800d540:	f7ff ff12 	bl	800d368 <__i2b>
 800d544:	2300      	movs	r3, #0
 800d546:	f8c8 0008 	str.w	r0, [r8, #8]
 800d54a:	4604      	mov	r4, r0
 800d54c:	6003      	str	r3, [r0, #0]
 800d54e:	f04f 0900 	mov.w	r9, #0
 800d552:	07eb      	lsls	r3, r5, #31
 800d554:	d50a      	bpl.n	800d56c <__pow5mult+0x84>
 800d556:	4631      	mov	r1, r6
 800d558:	4622      	mov	r2, r4
 800d55a:	4638      	mov	r0, r7
 800d55c:	f7ff ff1a 	bl	800d394 <__multiply>
 800d560:	4631      	mov	r1, r6
 800d562:	4680      	mov	r8, r0
 800d564:	4638      	mov	r0, r7
 800d566:	f7ff fe01 	bl	800d16c <_Bfree>
 800d56a:	4646      	mov	r6, r8
 800d56c:	106d      	asrs	r5, r5, #1
 800d56e:	d00b      	beq.n	800d588 <__pow5mult+0xa0>
 800d570:	6820      	ldr	r0, [r4, #0]
 800d572:	b938      	cbnz	r0, 800d584 <__pow5mult+0x9c>
 800d574:	4622      	mov	r2, r4
 800d576:	4621      	mov	r1, r4
 800d578:	4638      	mov	r0, r7
 800d57a:	f7ff ff0b 	bl	800d394 <__multiply>
 800d57e:	6020      	str	r0, [r4, #0]
 800d580:	f8c0 9000 	str.w	r9, [r0]
 800d584:	4604      	mov	r4, r0
 800d586:	e7e4      	b.n	800d552 <__pow5mult+0x6a>
 800d588:	4630      	mov	r0, r6
 800d58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d58e:	bf00      	nop
 800d590:	0800f920 	.word	0x0800f920
 800d594:	0800f846 	.word	0x0800f846
 800d598:	0800f8c6 	.word	0x0800f8c6

0800d59c <__lshift>:
 800d59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	6849      	ldr	r1, [r1, #4]
 800d5a4:	6923      	ldr	r3, [r4, #16]
 800d5a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	4607      	mov	r7, r0
 800d5ae:	4691      	mov	r9, r2
 800d5b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5b4:	f108 0601 	add.w	r6, r8, #1
 800d5b8:	42b3      	cmp	r3, r6
 800d5ba:	db0b      	blt.n	800d5d4 <__lshift+0x38>
 800d5bc:	4638      	mov	r0, r7
 800d5be:	f7ff fd95 	bl	800d0ec <_Balloc>
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	b948      	cbnz	r0, 800d5da <__lshift+0x3e>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	4b28      	ldr	r3, [pc, #160]	@ (800d66c <__lshift+0xd0>)
 800d5ca:	4829      	ldr	r0, [pc, #164]	@ (800d670 <__lshift+0xd4>)
 800d5cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d5d0:	f001 fc7e 	bl	800eed0 <__assert_func>
 800d5d4:	3101      	adds	r1, #1
 800d5d6:	005b      	lsls	r3, r3, #1
 800d5d8:	e7ee      	b.n	800d5b8 <__lshift+0x1c>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f100 0114 	add.w	r1, r0, #20
 800d5e0:	f100 0210 	add.w	r2, r0, #16
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	4553      	cmp	r3, sl
 800d5e8:	db33      	blt.n	800d652 <__lshift+0xb6>
 800d5ea:	6920      	ldr	r0, [r4, #16]
 800d5ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5f0:	f104 0314 	add.w	r3, r4, #20
 800d5f4:	f019 091f 	ands.w	r9, r9, #31
 800d5f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d600:	d02b      	beq.n	800d65a <__lshift+0xbe>
 800d602:	f1c9 0e20 	rsb	lr, r9, #32
 800d606:	468a      	mov	sl, r1
 800d608:	2200      	movs	r2, #0
 800d60a:	6818      	ldr	r0, [r3, #0]
 800d60c:	fa00 f009 	lsl.w	r0, r0, r9
 800d610:	4310      	orrs	r0, r2
 800d612:	f84a 0b04 	str.w	r0, [sl], #4
 800d616:	f853 2b04 	ldr.w	r2, [r3], #4
 800d61a:	459c      	cmp	ip, r3
 800d61c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d620:	d8f3      	bhi.n	800d60a <__lshift+0x6e>
 800d622:	ebac 0304 	sub.w	r3, ip, r4
 800d626:	3b15      	subs	r3, #21
 800d628:	f023 0303 	bic.w	r3, r3, #3
 800d62c:	3304      	adds	r3, #4
 800d62e:	f104 0015 	add.w	r0, r4, #21
 800d632:	4584      	cmp	ip, r0
 800d634:	bf38      	it	cc
 800d636:	2304      	movcc	r3, #4
 800d638:	50ca      	str	r2, [r1, r3]
 800d63a:	b10a      	cbz	r2, 800d640 <__lshift+0xa4>
 800d63c:	f108 0602 	add.w	r6, r8, #2
 800d640:	3e01      	subs	r6, #1
 800d642:	4638      	mov	r0, r7
 800d644:	612e      	str	r6, [r5, #16]
 800d646:	4621      	mov	r1, r4
 800d648:	f7ff fd90 	bl	800d16c <_Bfree>
 800d64c:	4628      	mov	r0, r5
 800d64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d652:	f842 0f04 	str.w	r0, [r2, #4]!
 800d656:	3301      	adds	r3, #1
 800d658:	e7c5      	b.n	800d5e6 <__lshift+0x4a>
 800d65a:	3904      	subs	r1, #4
 800d65c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d660:	f841 2f04 	str.w	r2, [r1, #4]!
 800d664:	459c      	cmp	ip, r3
 800d666:	d8f9      	bhi.n	800d65c <__lshift+0xc0>
 800d668:	e7ea      	b.n	800d640 <__lshift+0xa4>
 800d66a:	bf00      	nop
 800d66c:	0800f8b5 	.word	0x0800f8b5
 800d670:	0800f8c6 	.word	0x0800f8c6

0800d674 <__mcmp>:
 800d674:	690a      	ldr	r2, [r1, #16]
 800d676:	4603      	mov	r3, r0
 800d678:	6900      	ldr	r0, [r0, #16]
 800d67a:	1a80      	subs	r0, r0, r2
 800d67c:	b530      	push	{r4, r5, lr}
 800d67e:	d10e      	bne.n	800d69e <__mcmp+0x2a>
 800d680:	3314      	adds	r3, #20
 800d682:	3114      	adds	r1, #20
 800d684:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d688:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d68c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d690:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d694:	4295      	cmp	r5, r2
 800d696:	d003      	beq.n	800d6a0 <__mcmp+0x2c>
 800d698:	d205      	bcs.n	800d6a6 <__mcmp+0x32>
 800d69a:	f04f 30ff 	mov.w	r0, #4294967295
 800d69e:	bd30      	pop	{r4, r5, pc}
 800d6a0:	42a3      	cmp	r3, r4
 800d6a2:	d3f3      	bcc.n	800d68c <__mcmp+0x18>
 800d6a4:	e7fb      	b.n	800d69e <__mcmp+0x2a>
 800d6a6:	2001      	movs	r0, #1
 800d6a8:	e7f9      	b.n	800d69e <__mcmp+0x2a>
	...

0800d6ac <__mdiff>:
 800d6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b0:	4689      	mov	r9, r1
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	4611      	mov	r1, r2
 800d6b6:	4648      	mov	r0, r9
 800d6b8:	4614      	mov	r4, r2
 800d6ba:	f7ff ffdb 	bl	800d674 <__mcmp>
 800d6be:	1e05      	subs	r5, r0, #0
 800d6c0:	d112      	bne.n	800d6e8 <__mdiff+0x3c>
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f7ff fd11 	bl	800d0ec <_Balloc>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	b928      	cbnz	r0, 800d6da <__mdiff+0x2e>
 800d6ce:	4b3f      	ldr	r3, [pc, #252]	@ (800d7cc <__mdiff+0x120>)
 800d6d0:	f240 2137 	movw	r1, #567	@ 0x237
 800d6d4:	483e      	ldr	r0, [pc, #248]	@ (800d7d0 <__mdiff+0x124>)
 800d6d6:	f001 fbfb 	bl	800eed0 <__assert_func>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	b003      	add	sp, #12
 800d6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e8:	bfbc      	itt	lt
 800d6ea:	464b      	movlt	r3, r9
 800d6ec:	46a1      	movlt	r9, r4
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d6f4:	bfba      	itte	lt
 800d6f6:	461c      	movlt	r4, r3
 800d6f8:	2501      	movlt	r5, #1
 800d6fa:	2500      	movge	r5, #0
 800d6fc:	f7ff fcf6 	bl	800d0ec <_Balloc>
 800d700:	4602      	mov	r2, r0
 800d702:	b918      	cbnz	r0, 800d70c <__mdiff+0x60>
 800d704:	4b31      	ldr	r3, [pc, #196]	@ (800d7cc <__mdiff+0x120>)
 800d706:	f240 2145 	movw	r1, #581	@ 0x245
 800d70a:	e7e3      	b.n	800d6d4 <__mdiff+0x28>
 800d70c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d710:	6926      	ldr	r6, [r4, #16]
 800d712:	60c5      	str	r5, [r0, #12]
 800d714:	f109 0310 	add.w	r3, r9, #16
 800d718:	f109 0514 	add.w	r5, r9, #20
 800d71c:	f104 0e14 	add.w	lr, r4, #20
 800d720:	f100 0b14 	add.w	fp, r0, #20
 800d724:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d728:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	46d9      	mov	r9, fp
 800d730:	f04f 0c00 	mov.w	ip, #0
 800d734:	9b01      	ldr	r3, [sp, #4]
 800d736:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d73a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d73e:	9301      	str	r3, [sp, #4]
 800d740:	fa1f f38a 	uxth.w	r3, sl
 800d744:	4619      	mov	r1, r3
 800d746:	b283      	uxth	r3, r0
 800d748:	1acb      	subs	r3, r1, r3
 800d74a:	0c00      	lsrs	r0, r0, #16
 800d74c:	4463      	add	r3, ip
 800d74e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d752:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d756:	b29b      	uxth	r3, r3
 800d758:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d75c:	4576      	cmp	r6, lr
 800d75e:	f849 3b04 	str.w	r3, [r9], #4
 800d762:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d766:	d8e5      	bhi.n	800d734 <__mdiff+0x88>
 800d768:	1b33      	subs	r3, r6, r4
 800d76a:	3b15      	subs	r3, #21
 800d76c:	f023 0303 	bic.w	r3, r3, #3
 800d770:	3415      	adds	r4, #21
 800d772:	3304      	adds	r3, #4
 800d774:	42a6      	cmp	r6, r4
 800d776:	bf38      	it	cc
 800d778:	2304      	movcc	r3, #4
 800d77a:	441d      	add	r5, r3
 800d77c:	445b      	add	r3, fp
 800d77e:	461e      	mov	r6, r3
 800d780:	462c      	mov	r4, r5
 800d782:	4544      	cmp	r4, r8
 800d784:	d30e      	bcc.n	800d7a4 <__mdiff+0xf8>
 800d786:	f108 0103 	add.w	r1, r8, #3
 800d78a:	1b49      	subs	r1, r1, r5
 800d78c:	f021 0103 	bic.w	r1, r1, #3
 800d790:	3d03      	subs	r5, #3
 800d792:	45a8      	cmp	r8, r5
 800d794:	bf38      	it	cc
 800d796:	2100      	movcc	r1, #0
 800d798:	440b      	add	r3, r1
 800d79a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d79e:	b191      	cbz	r1, 800d7c6 <__mdiff+0x11a>
 800d7a0:	6117      	str	r7, [r2, #16]
 800d7a2:	e79d      	b.n	800d6e0 <__mdiff+0x34>
 800d7a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d7a8:	46e6      	mov	lr, ip
 800d7aa:	0c08      	lsrs	r0, r1, #16
 800d7ac:	fa1c fc81 	uxtah	ip, ip, r1
 800d7b0:	4471      	add	r1, lr
 800d7b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d7b6:	b289      	uxth	r1, r1
 800d7b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d7bc:	f846 1b04 	str.w	r1, [r6], #4
 800d7c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7c4:	e7dd      	b.n	800d782 <__mdiff+0xd6>
 800d7c6:	3f01      	subs	r7, #1
 800d7c8:	e7e7      	b.n	800d79a <__mdiff+0xee>
 800d7ca:	bf00      	nop
 800d7cc:	0800f8b5 	.word	0x0800f8b5
 800d7d0:	0800f8c6 	.word	0x0800f8c6

0800d7d4 <__ulp>:
 800d7d4:	b082      	sub	sp, #8
 800d7d6:	ed8d 0b00 	vstr	d0, [sp]
 800d7da:	9a01      	ldr	r2, [sp, #4]
 800d7dc:	4b0f      	ldr	r3, [pc, #60]	@ (800d81c <__ulp+0x48>)
 800d7de:	4013      	ands	r3, r2
 800d7e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	dc08      	bgt.n	800d7fa <__ulp+0x26>
 800d7e8:	425b      	negs	r3, r3
 800d7ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d7ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d7f2:	da04      	bge.n	800d7fe <__ulp+0x2a>
 800d7f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d7f8:	4113      	asrs	r3, r2
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	e008      	b.n	800d810 <__ulp+0x3c>
 800d7fe:	f1a2 0314 	sub.w	r3, r2, #20
 800d802:	2b1e      	cmp	r3, #30
 800d804:	bfda      	itte	le
 800d806:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d80a:	40da      	lsrle	r2, r3
 800d80c:	2201      	movgt	r2, #1
 800d80e:	2300      	movs	r3, #0
 800d810:	4619      	mov	r1, r3
 800d812:	4610      	mov	r0, r2
 800d814:	ec41 0b10 	vmov	d0, r0, r1
 800d818:	b002      	add	sp, #8
 800d81a:	4770      	bx	lr
 800d81c:	7ff00000 	.word	0x7ff00000

0800d820 <__b2d>:
 800d820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d824:	6906      	ldr	r6, [r0, #16]
 800d826:	f100 0814 	add.w	r8, r0, #20
 800d82a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d82e:	1f37      	subs	r7, r6, #4
 800d830:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d834:	4610      	mov	r0, r2
 800d836:	f7ff fd4b 	bl	800d2d0 <__hi0bits>
 800d83a:	f1c0 0320 	rsb	r3, r0, #32
 800d83e:	280a      	cmp	r0, #10
 800d840:	600b      	str	r3, [r1, #0]
 800d842:	491b      	ldr	r1, [pc, #108]	@ (800d8b0 <__b2d+0x90>)
 800d844:	dc15      	bgt.n	800d872 <__b2d+0x52>
 800d846:	f1c0 0c0b 	rsb	ip, r0, #11
 800d84a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d84e:	45b8      	cmp	r8, r7
 800d850:	ea43 0501 	orr.w	r5, r3, r1
 800d854:	bf34      	ite	cc
 800d856:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d85a:	2300      	movcs	r3, #0
 800d85c:	3015      	adds	r0, #21
 800d85e:	fa02 f000 	lsl.w	r0, r2, r0
 800d862:	fa23 f30c 	lsr.w	r3, r3, ip
 800d866:	4303      	orrs	r3, r0
 800d868:	461c      	mov	r4, r3
 800d86a:	ec45 4b10 	vmov	d0, r4, r5
 800d86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d872:	45b8      	cmp	r8, r7
 800d874:	bf3a      	itte	cc
 800d876:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d87a:	f1a6 0708 	subcc.w	r7, r6, #8
 800d87e:	2300      	movcs	r3, #0
 800d880:	380b      	subs	r0, #11
 800d882:	d012      	beq.n	800d8aa <__b2d+0x8a>
 800d884:	f1c0 0120 	rsb	r1, r0, #32
 800d888:	fa23 f401 	lsr.w	r4, r3, r1
 800d88c:	4082      	lsls	r2, r0
 800d88e:	4322      	orrs	r2, r4
 800d890:	4547      	cmp	r7, r8
 800d892:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d896:	bf8c      	ite	hi
 800d898:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d89c:	2200      	movls	r2, #0
 800d89e:	4083      	lsls	r3, r0
 800d8a0:	40ca      	lsrs	r2, r1
 800d8a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	e7de      	b.n	800d868 <__b2d+0x48>
 800d8aa:	ea42 0501 	orr.w	r5, r2, r1
 800d8ae:	e7db      	b.n	800d868 <__b2d+0x48>
 800d8b0:	3ff00000 	.word	0x3ff00000

0800d8b4 <__d2b>:
 800d8b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8b8:	460f      	mov	r7, r1
 800d8ba:	2101      	movs	r1, #1
 800d8bc:	ec59 8b10 	vmov	r8, r9, d0
 800d8c0:	4616      	mov	r6, r2
 800d8c2:	f7ff fc13 	bl	800d0ec <_Balloc>
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	b930      	cbnz	r0, 800d8d8 <__d2b+0x24>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	4b23      	ldr	r3, [pc, #140]	@ (800d95c <__d2b+0xa8>)
 800d8ce:	4824      	ldr	r0, [pc, #144]	@ (800d960 <__d2b+0xac>)
 800d8d0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d8d4:	f001 fafc 	bl	800eed0 <__assert_func>
 800d8d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8e0:	b10d      	cbz	r5, 800d8e6 <__d2b+0x32>
 800d8e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	f1b8 0300 	subs.w	r3, r8, #0
 800d8ec:	d023      	beq.n	800d936 <__d2b+0x82>
 800d8ee:	4668      	mov	r0, sp
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	f7ff fd0c 	bl	800d30e <__lo0bits>
 800d8f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8fa:	b1d0      	cbz	r0, 800d932 <__d2b+0x7e>
 800d8fc:	f1c0 0320 	rsb	r3, r0, #32
 800d900:	fa02 f303 	lsl.w	r3, r2, r3
 800d904:	430b      	orrs	r3, r1
 800d906:	40c2      	lsrs	r2, r0
 800d908:	6163      	str	r3, [r4, #20]
 800d90a:	9201      	str	r2, [sp, #4]
 800d90c:	9b01      	ldr	r3, [sp, #4]
 800d90e:	61a3      	str	r3, [r4, #24]
 800d910:	2b00      	cmp	r3, #0
 800d912:	bf0c      	ite	eq
 800d914:	2201      	moveq	r2, #1
 800d916:	2202      	movne	r2, #2
 800d918:	6122      	str	r2, [r4, #16]
 800d91a:	b1a5      	cbz	r5, 800d946 <__d2b+0x92>
 800d91c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d920:	4405      	add	r5, r0
 800d922:	603d      	str	r5, [r7, #0]
 800d924:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d928:	6030      	str	r0, [r6, #0]
 800d92a:	4620      	mov	r0, r4
 800d92c:	b003      	add	sp, #12
 800d92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d932:	6161      	str	r1, [r4, #20]
 800d934:	e7ea      	b.n	800d90c <__d2b+0x58>
 800d936:	a801      	add	r0, sp, #4
 800d938:	f7ff fce9 	bl	800d30e <__lo0bits>
 800d93c:	9b01      	ldr	r3, [sp, #4]
 800d93e:	6163      	str	r3, [r4, #20]
 800d940:	3020      	adds	r0, #32
 800d942:	2201      	movs	r2, #1
 800d944:	e7e8      	b.n	800d918 <__d2b+0x64>
 800d946:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d94a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d94e:	6038      	str	r0, [r7, #0]
 800d950:	6918      	ldr	r0, [r3, #16]
 800d952:	f7ff fcbd 	bl	800d2d0 <__hi0bits>
 800d956:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d95a:	e7e5      	b.n	800d928 <__d2b+0x74>
 800d95c:	0800f8b5 	.word	0x0800f8b5
 800d960:	0800f8c6 	.word	0x0800f8c6

0800d964 <__ratio>:
 800d964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d968:	4688      	mov	r8, r1
 800d96a:	4669      	mov	r1, sp
 800d96c:	4681      	mov	r9, r0
 800d96e:	f7ff ff57 	bl	800d820 <__b2d>
 800d972:	a901      	add	r1, sp, #4
 800d974:	4640      	mov	r0, r8
 800d976:	ec55 4b10 	vmov	r4, r5, d0
 800d97a:	f7ff ff51 	bl	800d820 <__b2d>
 800d97e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d982:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d986:	1ad2      	subs	r2, r2, r3
 800d988:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d98c:	1a5b      	subs	r3, r3, r1
 800d98e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d992:	ec57 6b10 	vmov	r6, r7, d0
 800d996:	2b00      	cmp	r3, #0
 800d998:	bfd6      	itet	le
 800d99a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d99e:	462a      	movgt	r2, r5
 800d9a0:	463a      	movle	r2, r7
 800d9a2:	46ab      	mov	fp, r5
 800d9a4:	46a2      	mov	sl, r4
 800d9a6:	bfce      	itee	gt
 800d9a8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d9ac:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d9b0:	ee00 3a90 	vmovle	s1, r3
 800d9b4:	ec4b ab17 	vmov	d7, sl, fp
 800d9b8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d9bc:	b003      	add	sp, #12
 800d9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9c2 <__copybits>:
 800d9c2:	3901      	subs	r1, #1
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	1149      	asrs	r1, r1, #5
 800d9c8:	6914      	ldr	r4, [r2, #16]
 800d9ca:	3101      	adds	r1, #1
 800d9cc:	f102 0314 	add.w	r3, r2, #20
 800d9d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d9d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9d8:	1f05      	subs	r5, r0, #4
 800d9da:	42a3      	cmp	r3, r4
 800d9dc:	d30c      	bcc.n	800d9f8 <__copybits+0x36>
 800d9de:	1aa3      	subs	r3, r4, r2
 800d9e0:	3b11      	subs	r3, #17
 800d9e2:	f023 0303 	bic.w	r3, r3, #3
 800d9e6:	3211      	adds	r2, #17
 800d9e8:	42a2      	cmp	r2, r4
 800d9ea:	bf88      	it	hi
 800d9ec:	2300      	movhi	r3, #0
 800d9ee:	4418      	add	r0, r3
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4288      	cmp	r0, r1
 800d9f4:	d305      	bcc.n	800da02 <__copybits+0x40>
 800d9f6:	bd70      	pop	{r4, r5, r6, pc}
 800d9f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d9fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800da00:	e7eb      	b.n	800d9da <__copybits+0x18>
 800da02:	f840 3b04 	str.w	r3, [r0], #4
 800da06:	e7f4      	b.n	800d9f2 <__copybits+0x30>

0800da08 <__any_on>:
 800da08:	f100 0214 	add.w	r2, r0, #20
 800da0c:	6900      	ldr	r0, [r0, #16]
 800da0e:	114b      	asrs	r3, r1, #5
 800da10:	4298      	cmp	r0, r3
 800da12:	b510      	push	{r4, lr}
 800da14:	db11      	blt.n	800da3a <__any_on+0x32>
 800da16:	dd0a      	ble.n	800da2e <__any_on+0x26>
 800da18:	f011 011f 	ands.w	r1, r1, #31
 800da1c:	d007      	beq.n	800da2e <__any_on+0x26>
 800da1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da22:	fa24 f001 	lsr.w	r0, r4, r1
 800da26:	fa00 f101 	lsl.w	r1, r0, r1
 800da2a:	428c      	cmp	r4, r1
 800da2c:	d10b      	bne.n	800da46 <__any_on+0x3e>
 800da2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da32:	4293      	cmp	r3, r2
 800da34:	d803      	bhi.n	800da3e <__any_on+0x36>
 800da36:	2000      	movs	r0, #0
 800da38:	bd10      	pop	{r4, pc}
 800da3a:	4603      	mov	r3, r0
 800da3c:	e7f7      	b.n	800da2e <__any_on+0x26>
 800da3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da42:	2900      	cmp	r1, #0
 800da44:	d0f5      	beq.n	800da32 <__any_on+0x2a>
 800da46:	2001      	movs	r0, #1
 800da48:	e7f6      	b.n	800da38 <__any_on+0x30>

0800da4a <sulp>:
 800da4a:	b570      	push	{r4, r5, r6, lr}
 800da4c:	4604      	mov	r4, r0
 800da4e:	460d      	mov	r5, r1
 800da50:	4616      	mov	r6, r2
 800da52:	ec45 4b10 	vmov	d0, r4, r5
 800da56:	f7ff febd 	bl	800d7d4 <__ulp>
 800da5a:	b17e      	cbz	r6, 800da7c <sulp+0x32>
 800da5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800da64:	2b00      	cmp	r3, #0
 800da66:	dd09      	ble.n	800da7c <sulp+0x32>
 800da68:	051b      	lsls	r3, r3, #20
 800da6a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800da6e:	2000      	movs	r0, #0
 800da70:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800da74:	ec41 0b17 	vmov	d7, r0, r1
 800da78:	ee20 0b07 	vmul.f64	d0, d0, d7
 800da7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800da80 <_strtod_l>:
 800da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da84:	ed2d 8b0a 	vpush	{d8-d12}
 800da88:	b097      	sub	sp, #92	@ 0x5c
 800da8a:	4688      	mov	r8, r1
 800da8c:	920e      	str	r2, [sp, #56]	@ 0x38
 800da8e:	2200      	movs	r2, #0
 800da90:	9212      	str	r2, [sp, #72]	@ 0x48
 800da92:	9005      	str	r0, [sp, #20]
 800da94:	f04f 0a00 	mov.w	sl, #0
 800da98:	f04f 0b00 	mov.w	fp, #0
 800da9c:	460a      	mov	r2, r1
 800da9e:	9211      	str	r2, [sp, #68]	@ 0x44
 800daa0:	7811      	ldrb	r1, [r2, #0]
 800daa2:	292b      	cmp	r1, #43	@ 0x2b
 800daa4:	d04c      	beq.n	800db40 <_strtod_l+0xc0>
 800daa6:	d839      	bhi.n	800db1c <_strtod_l+0x9c>
 800daa8:	290d      	cmp	r1, #13
 800daaa:	d833      	bhi.n	800db14 <_strtod_l+0x94>
 800daac:	2908      	cmp	r1, #8
 800daae:	d833      	bhi.n	800db18 <_strtod_l+0x98>
 800dab0:	2900      	cmp	r1, #0
 800dab2:	d03c      	beq.n	800db2e <_strtod_l+0xae>
 800dab4:	2200      	movs	r2, #0
 800dab6:	9208      	str	r2, [sp, #32]
 800dab8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800daba:	782a      	ldrb	r2, [r5, #0]
 800dabc:	2a30      	cmp	r2, #48	@ 0x30
 800dabe:	f040 80b5 	bne.w	800dc2c <_strtod_l+0x1ac>
 800dac2:	786a      	ldrb	r2, [r5, #1]
 800dac4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dac8:	2a58      	cmp	r2, #88	@ 0x58
 800daca:	d170      	bne.n	800dbae <_strtod_l+0x12e>
 800dacc:	9302      	str	r3, [sp, #8]
 800dace:	9b08      	ldr	r3, [sp, #32]
 800dad0:	9301      	str	r3, [sp, #4]
 800dad2:	ab12      	add	r3, sp, #72	@ 0x48
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	4a8b      	ldr	r2, [pc, #556]	@ (800dd04 <_strtod_l+0x284>)
 800dad8:	9805      	ldr	r0, [sp, #20]
 800dada:	ab13      	add	r3, sp, #76	@ 0x4c
 800dadc:	a911      	add	r1, sp, #68	@ 0x44
 800dade:	f001 fa91 	bl	800f004 <__gethex>
 800dae2:	f010 060f 	ands.w	r6, r0, #15
 800dae6:	4604      	mov	r4, r0
 800dae8:	d005      	beq.n	800daf6 <_strtod_l+0x76>
 800daea:	2e06      	cmp	r6, #6
 800daec:	d12a      	bne.n	800db44 <_strtod_l+0xc4>
 800daee:	3501      	adds	r5, #1
 800daf0:	2300      	movs	r3, #0
 800daf2:	9511      	str	r5, [sp, #68]	@ 0x44
 800daf4:	9308      	str	r3, [sp, #32]
 800daf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f040 852f 	bne.w	800e55c <_strtod_l+0xadc>
 800dafe:	9b08      	ldr	r3, [sp, #32]
 800db00:	ec4b ab10 	vmov	d0, sl, fp
 800db04:	b1cb      	cbz	r3, 800db3a <_strtod_l+0xba>
 800db06:	eeb1 0b40 	vneg.f64	d0, d0
 800db0a:	b017      	add	sp, #92	@ 0x5c
 800db0c:	ecbd 8b0a 	vpop	{d8-d12}
 800db10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db14:	2920      	cmp	r1, #32
 800db16:	d1cd      	bne.n	800dab4 <_strtod_l+0x34>
 800db18:	3201      	adds	r2, #1
 800db1a:	e7c0      	b.n	800da9e <_strtod_l+0x1e>
 800db1c:	292d      	cmp	r1, #45	@ 0x2d
 800db1e:	d1c9      	bne.n	800dab4 <_strtod_l+0x34>
 800db20:	2101      	movs	r1, #1
 800db22:	9108      	str	r1, [sp, #32]
 800db24:	1c51      	adds	r1, r2, #1
 800db26:	9111      	str	r1, [sp, #68]	@ 0x44
 800db28:	7852      	ldrb	r2, [r2, #1]
 800db2a:	2a00      	cmp	r2, #0
 800db2c:	d1c4      	bne.n	800dab8 <_strtod_l+0x38>
 800db2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db30:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800db34:	2b00      	cmp	r3, #0
 800db36:	f040 850f 	bne.w	800e558 <_strtod_l+0xad8>
 800db3a:	ec4b ab10 	vmov	d0, sl, fp
 800db3e:	e7e4      	b.n	800db0a <_strtod_l+0x8a>
 800db40:	2100      	movs	r1, #0
 800db42:	e7ee      	b.n	800db22 <_strtod_l+0xa2>
 800db44:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800db46:	b13a      	cbz	r2, 800db58 <_strtod_l+0xd8>
 800db48:	2135      	movs	r1, #53	@ 0x35
 800db4a:	a814      	add	r0, sp, #80	@ 0x50
 800db4c:	f7ff ff39 	bl	800d9c2 <__copybits>
 800db50:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800db52:	9805      	ldr	r0, [sp, #20]
 800db54:	f7ff fb0a 	bl	800d16c <_Bfree>
 800db58:	1e73      	subs	r3, r6, #1
 800db5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800db5c:	2b04      	cmp	r3, #4
 800db5e:	d806      	bhi.n	800db6e <_strtod_l+0xee>
 800db60:	e8df f003 	tbb	[pc, r3]
 800db64:	201d0314 	.word	0x201d0314
 800db68:	14          	.byte	0x14
 800db69:	00          	.byte	0x00
 800db6a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800db6e:	05e3      	lsls	r3, r4, #23
 800db70:	bf48      	it	mi
 800db72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800db76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db7a:	0d1b      	lsrs	r3, r3, #20
 800db7c:	051b      	lsls	r3, r3, #20
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1b9      	bne.n	800daf6 <_strtod_l+0x76>
 800db82:	f7fe fb91 	bl	800c2a8 <__errno>
 800db86:	2322      	movs	r3, #34	@ 0x22
 800db88:	6003      	str	r3, [r0, #0]
 800db8a:	e7b4      	b.n	800daf6 <_strtod_l+0x76>
 800db8c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800db90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800db94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800db98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800db9c:	e7e7      	b.n	800db6e <_strtod_l+0xee>
 800db9e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800dd0c <_strtod_l+0x28c>
 800dba2:	e7e4      	b.n	800db6e <_strtod_l+0xee>
 800dba4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dba8:	f04f 3aff 	mov.w	sl, #4294967295
 800dbac:	e7df      	b.n	800db6e <_strtod_l+0xee>
 800dbae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbb0:	1c5a      	adds	r2, r3, #1
 800dbb2:	9211      	str	r2, [sp, #68]	@ 0x44
 800dbb4:	785b      	ldrb	r3, [r3, #1]
 800dbb6:	2b30      	cmp	r3, #48	@ 0x30
 800dbb8:	d0f9      	beq.n	800dbae <_strtod_l+0x12e>
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d09b      	beq.n	800daf6 <_strtod_l+0x76>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	2600      	movs	r6, #0
 800dbc2:	9307      	str	r3, [sp, #28]
 800dbc4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbc8:	46b1      	mov	r9, r6
 800dbca:	4635      	mov	r5, r6
 800dbcc:	220a      	movs	r2, #10
 800dbce:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800dbd0:	7804      	ldrb	r4, [r0, #0]
 800dbd2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800dbd6:	b2d9      	uxtb	r1, r3
 800dbd8:	2909      	cmp	r1, #9
 800dbda:	d929      	bls.n	800dc30 <_strtod_l+0x1b0>
 800dbdc:	494a      	ldr	r1, [pc, #296]	@ (800dd08 <_strtod_l+0x288>)
 800dbde:	2201      	movs	r2, #1
 800dbe0:	f001 f928 	bl	800ee34 <strncmp>
 800dbe4:	b378      	cbz	r0, 800dc46 <_strtod_l+0x1c6>
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	4622      	mov	r2, r4
 800dbea:	462b      	mov	r3, r5
 800dbec:	4607      	mov	r7, r0
 800dbee:	9006      	str	r0, [sp, #24]
 800dbf0:	2a65      	cmp	r2, #101	@ 0x65
 800dbf2:	d001      	beq.n	800dbf8 <_strtod_l+0x178>
 800dbf4:	2a45      	cmp	r2, #69	@ 0x45
 800dbf6:	d117      	bne.n	800dc28 <_strtod_l+0x1a8>
 800dbf8:	b91b      	cbnz	r3, 800dc02 <_strtod_l+0x182>
 800dbfa:	9b07      	ldr	r3, [sp, #28]
 800dbfc:	4303      	orrs	r3, r0
 800dbfe:	d096      	beq.n	800db2e <_strtod_l+0xae>
 800dc00:	2300      	movs	r3, #0
 800dc02:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800dc06:	f108 0201 	add.w	r2, r8, #1
 800dc0a:	9211      	str	r2, [sp, #68]	@ 0x44
 800dc0c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800dc10:	2a2b      	cmp	r2, #43	@ 0x2b
 800dc12:	d06b      	beq.n	800dcec <_strtod_l+0x26c>
 800dc14:	2a2d      	cmp	r2, #45	@ 0x2d
 800dc16:	d071      	beq.n	800dcfc <_strtod_l+0x27c>
 800dc18:	f04f 0e00 	mov.w	lr, #0
 800dc1c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800dc20:	2c09      	cmp	r4, #9
 800dc22:	d979      	bls.n	800dd18 <_strtod_l+0x298>
 800dc24:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800dc28:	2400      	movs	r4, #0
 800dc2a:	e094      	b.n	800dd56 <_strtod_l+0x2d6>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	e7c7      	b.n	800dbc0 <_strtod_l+0x140>
 800dc30:	2d08      	cmp	r5, #8
 800dc32:	f100 0001 	add.w	r0, r0, #1
 800dc36:	bfd4      	ite	le
 800dc38:	fb02 3909 	mlale	r9, r2, r9, r3
 800dc3c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800dc40:	3501      	adds	r5, #1
 800dc42:	9011      	str	r0, [sp, #68]	@ 0x44
 800dc44:	e7c3      	b.n	800dbce <_strtod_l+0x14e>
 800dc46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	9211      	str	r2, [sp, #68]	@ 0x44
 800dc4c:	785a      	ldrb	r2, [r3, #1]
 800dc4e:	b375      	cbz	r5, 800dcae <_strtod_l+0x22e>
 800dc50:	4607      	mov	r7, r0
 800dc52:	462b      	mov	r3, r5
 800dc54:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dc58:	2909      	cmp	r1, #9
 800dc5a:	d913      	bls.n	800dc84 <_strtod_l+0x204>
 800dc5c:	2101      	movs	r1, #1
 800dc5e:	9106      	str	r1, [sp, #24]
 800dc60:	e7c6      	b.n	800dbf0 <_strtod_l+0x170>
 800dc62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc64:	1c5a      	adds	r2, r3, #1
 800dc66:	9211      	str	r2, [sp, #68]	@ 0x44
 800dc68:	785a      	ldrb	r2, [r3, #1]
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	2a30      	cmp	r2, #48	@ 0x30
 800dc6e:	d0f8      	beq.n	800dc62 <_strtod_l+0x1e2>
 800dc70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dc74:	2b08      	cmp	r3, #8
 800dc76:	f200 8476 	bhi.w	800e566 <_strtod_l+0xae6>
 800dc7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc7c:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc7e:	4607      	mov	r7, r0
 800dc80:	2000      	movs	r0, #0
 800dc82:	4603      	mov	r3, r0
 800dc84:	3a30      	subs	r2, #48	@ 0x30
 800dc86:	f100 0101 	add.w	r1, r0, #1
 800dc8a:	d023      	beq.n	800dcd4 <_strtod_l+0x254>
 800dc8c:	440f      	add	r7, r1
 800dc8e:	eb00 0c03 	add.w	ip, r0, r3
 800dc92:	4619      	mov	r1, r3
 800dc94:	240a      	movs	r4, #10
 800dc96:	4561      	cmp	r1, ip
 800dc98:	d10b      	bne.n	800dcb2 <_strtod_l+0x232>
 800dc9a:	1c5c      	adds	r4, r3, #1
 800dc9c:	4403      	add	r3, r0
 800dc9e:	2b08      	cmp	r3, #8
 800dca0:	4404      	add	r4, r0
 800dca2:	dc11      	bgt.n	800dcc8 <_strtod_l+0x248>
 800dca4:	230a      	movs	r3, #10
 800dca6:	fb03 2909 	mla	r9, r3, r9, r2
 800dcaa:	2100      	movs	r1, #0
 800dcac:	e013      	b.n	800dcd6 <_strtod_l+0x256>
 800dcae:	4628      	mov	r0, r5
 800dcb0:	e7dc      	b.n	800dc6c <_strtod_l+0x1ec>
 800dcb2:	2908      	cmp	r1, #8
 800dcb4:	f101 0101 	add.w	r1, r1, #1
 800dcb8:	dc02      	bgt.n	800dcc0 <_strtod_l+0x240>
 800dcba:	fb04 f909 	mul.w	r9, r4, r9
 800dcbe:	e7ea      	b.n	800dc96 <_strtod_l+0x216>
 800dcc0:	2910      	cmp	r1, #16
 800dcc2:	bfd8      	it	le
 800dcc4:	4366      	mulle	r6, r4
 800dcc6:	e7e6      	b.n	800dc96 <_strtod_l+0x216>
 800dcc8:	2b0f      	cmp	r3, #15
 800dcca:	dcee      	bgt.n	800dcaa <_strtod_l+0x22a>
 800dccc:	230a      	movs	r3, #10
 800dcce:	fb03 2606 	mla	r6, r3, r6, r2
 800dcd2:	e7ea      	b.n	800dcaa <_strtod_l+0x22a>
 800dcd4:	461c      	mov	r4, r3
 800dcd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dcd8:	1c5a      	adds	r2, r3, #1
 800dcda:	9211      	str	r2, [sp, #68]	@ 0x44
 800dcdc:	785a      	ldrb	r2, [r3, #1]
 800dcde:	4608      	mov	r0, r1
 800dce0:	4623      	mov	r3, r4
 800dce2:	e7b7      	b.n	800dc54 <_strtod_l+0x1d4>
 800dce4:	2301      	movs	r3, #1
 800dce6:	2700      	movs	r7, #0
 800dce8:	9306      	str	r3, [sp, #24]
 800dcea:	e786      	b.n	800dbfa <_strtod_l+0x17a>
 800dcec:	f04f 0e00 	mov.w	lr, #0
 800dcf0:	f108 0202 	add.w	r2, r8, #2
 800dcf4:	9211      	str	r2, [sp, #68]	@ 0x44
 800dcf6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dcfa:	e78f      	b.n	800dc1c <_strtod_l+0x19c>
 800dcfc:	f04f 0e01 	mov.w	lr, #1
 800dd00:	e7f6      	b.n	800dcf0 <_strtod_l+0x270>
 800dd02:	bf00      	nop
 800dd04:	0800fa38 	.word	0x0800fa38
 800dd08:	0800fa20 	.word	0x0800fa20
 800dd0c:	7ff00000 	.word	0x7ff00000
 800dd10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dd12:	1c54      	adds	r4, r2, #1
 800dd14:	9411      	str	r4, [sp, #68]	@ 0x44
 800dd16:	7852      	ldrb	r2, [r2, #1]
 800dd18:	2a30      	cmp	r2, #48	@ 0x30
 800dd1a:	d0f9      	beq.n	800dd10 <_strtod_l+0x290>
 800dd1c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800dd20:	2c08      	cmp	r4, #8
 800dd22:	d881      	bhi.n	800dc28 <_strtod_l+0x1a8>
 800dd24:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800dd28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dd2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd2c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dd2e:	1c51      	adds	r1, r2, #1
 800dd30:	9111      	str	r1, [sp, #68]	@ 0x44
 800dd32:	7852      	ldrb	r2, [r2, #1]
 800dd34:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800dd38:	2c09      	cmp	r4, #9
 800dd3a:	d938      	bls.n	800ddae <_strtod_l+0x32e>
 800dd3c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800dd3e:	1b0c      	subs	r4, r1, r4
 800dd40:	2c08      	cmp	r4, #8
 800dd42:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800dd46:	dc02      	bgt.n	800dd4e <_strtod_l+0x2ce>
 800dd48:	4564      	cmp	r4, ip
 800dd4a:	bfa8      	it	ge
 800dd4c:	4664      	movge	r4, ip
 800dd4e:	f1be 0f00 	cmp.w	lr, #0
 800dd52:	d000      	beq.n	800dd56 <_strtod_l+0x2d6>
 800dd54:	4264      	negs	r4, r4
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d14e      	bne.n	800ddf8 <_strtod_l+0x378>
 800dd5a:	9b07      	ldr	r3, [sp, #28]
 800dd5c:	4318      	orrs	r0, r3
 800dd5e:	f47f aeca 	bne.w	800daf6 <_strtod_l+0x76>
 800dd62:	9b06      	ldr	r3, [sp, #24]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f47f aee2 	bne.w	800db2e <_strtod_l+0xae>
 800dd6a:	2a69      	cmp	r2, #105	@ 0x69
 800dd6c:	d027      	beq.n	800ddbe <_strtod_l+0x33e>
 800dd6e:	dc24      	bgt.n	800ddba <_strtod_l+0x33a>
 800dd70:	2a49      	cmp	r2, #73	@ 0x49
 800dd72:	d024      	beq.n	800ddbe <_strtod_l+0x33e>
 800dd74:	2a4e      	cmp	r2, #78	@ 0x4e
 800dd76:	f47f aeda 	bne.w	800db2e <_strtod_l+0xae>
 800dd7a:	4997      	ldr	r1, [pc, #604]	@ (800dfd8 <_strtod_l+0x558>)
 800dd7c:	a811      	add	r0, sp, #68	@ 0x44
 800dd7e:	f001 fb63 	bl	800f448 <__match>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	f43f aed3 	beq.w	800db2e <_strtod_l+0xae>
 800dd88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	2b28      	cmp	r3, #40	@ 0x28
 800dd8e:	d12d      	bne.n	800ddec <_strtod_l+0x36c>
 800dd90:	4992      	ldr	r1, [pc, #584]	@ (800dfdc <_strtod_l+0x55c>)
 800dd92:	aa14      	add	r2, sp, #80	@ 0x50
 800dd94:	a811      	add	r0, sp, #68	@ 0x44
 800dd96:	f001 fb6b 	bl	800f470 <__hexnan>
 800dd9a:	2805      	cmp	r0, #5
 800dd9c:	d126      	bne.n	800ddec <_strtod_l+0x36c>
 800dd9e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dda0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800dda4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dda8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ddac:	e6a3      	b.n	800daf6 <_strtod_l+0x76>
 800ddae:	240a      	movs	r4, #10
 800ddb0:	fb04 2c0c 	mla	ip, r4, ip, r2
 800ddb4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800ddb8:	e7b8      	b.n	800dd2c <_strtod_l+0x2ac>
 800ddba:	2a6e      	cmp	r2, #110	@ 0x6e
 800ddbc:	e7db      	b.n	800dd76 <_strtod_l+0x2f6>
 800ddbe:	4988      	ldr	r1, [pc, #544]	@ (800dfe0 <_strtod_l+0x560>)
 800ddc0:	a811      	add	r0, sp, #68	@ 0x44
 800ddc2:	f001 fb41 	bl	800f448 <__match>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	f43f aeb1 	beq.w	800db2e <_strtod_l+0xae>
 800ddcc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ddce:	4985      	ldr	r1, [pc, #532]	@ (800dfe4 <_strtod_l+0x564>)
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	a811      	add	r0, sp, #68	@ 0x44
 800ddd4:	9311      	str	r3, [sp, #68]	@ 0x44
 800ddd6:	f001 fb37 	bl	800f448 <__match>
 800ddda:	b910      	cbnz	r0, 800dde2 <_strtod_l+0x362>
 800dddc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ddde:	3301      	adds	r3, #1
 800dde0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dde2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800dff8 <_strtod_l+0x578>
 800dde6:	f04f 0a00 	mov.w	sl, #0
 800ddea:	e684      	b.n	800daf6 <_strtod_l+0x76>
 800ddec:	487e      	ldr	r0, [pc, #504]	@ (800dfe8 <_strtod_l+0x568>)
 800ddee:	f001 f867 	bl	800eec0 <nan>
 800ddf2:	ec5b ab10 	vmov	sl, fp, d0
 800ddf6:	e67e      	b.n	800daf6 <_strtod_l+0x76>
 800ddf8:	ee07 9a90 	vmov	s15, r9
 800ddfc:	1be2      	subs	r2, r4, r7
 800ddfe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800de02:	2d00      	cmp	r5, #0
 800de04:	bf08      	it	eq
 800de06:	461d      	moveq	r5, r3
 800de08:	2b10      	cmp	r3, #16
 800de0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800de0c:	461a      	mov	r2, r3
 800de0e:	bfa8      	it	ge
 800de10:	2210      	movge	r2, #16
 800de12:	2b09      	cmp	r3, #9
 800de14:	ec5b ab17 	vmov	sl, fp, d7
 800de18:	dc15      	bgt.n	800de46 <_strtod_l+0x3c6>
 800de1a:	1be1      	subs	r1, r4, r7
 800de1c:	2900      	cmp	r1, #0
 800de1e:	f43f ae6a 	beq.w	800daf6 <_strtod_l+0x76>
 800de22:	eba4 0107 	sub.w	r1, r4, r7
 800de26:	dd72      	ble.n	800df0e <_strtod_l+0x48e>
 800de28:	2916      	cmp	r1, #22
 800de2a:	dc59      	bgt.n	800dee0 <_strtod_l+0x460>
 800de2c:	4b6f      	ldr	r3, [pc, #444]	@ (800dfec <_strtod_l+0x56c>)
 800de2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de34:	ed93 7b00 	vldr	d7, [r3]
 800de38:	ec4b ab16 	vmov	d6, sl, fp
 800de3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de40:	ec5b ab17 	vmov	sl, fp, d7
 800de44:	e657      	b.n	800daf6 <_strtod_l+0x76>
 800de46:	4969      	ldr	r1, [pc, #420]	@ (800dfec <_strtod_l+0x56c>)
 800de48:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800de4c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800de50:	ee06 6a90 	vmov	s13, r6
 800de54:	2b0f      	cmp	r3, #15
 800de56:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800de5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800de5e:	ec5b ab16 	vmov	sl, fp, d6
 800de62:	ddda      	ble.n	800de1a <_strtod_l+0x39a>
 800de64:	1a9a      	subs	r2, r3, r2
 800de66:	1be1      	subs	r1, r4, r7
 800de68:	440a      	add	r2, r1
 800de6a:	2a00      	cmp	r2, #0
 800de6c:	f340 8094 	ble.w	800df98 <_strtod_l+0x518>
 800de70:	f012 000f 	ands.w	r0, r2, #15
 800de74:	d00a      	beq.n	800de8c <_strtod_l+0x40c>
 800de76:	495d      	ldr	r1, [pc, #372]	@ (800dfec <_strtod_l+0x56c>)
 800de78:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800de7c:	ed91 7b00 	vldr	d7, [r1]
 800de80:	ec4b ab16 	vmov	d6, sl, fp
 800de84:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de88:	ec5b ab17 	vmov	sl, fp, d7
 800de8c:	f032 020f 	bics.w	r2, r2, #15
 800de90:	d073      	beq.n	800df7a <_strtod_l+0x4fa>
 800de92:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800de96:	dd47      	ble.n	800df28 <_strtod_l+0x4a8>
 800de98:	2400      	movs	r4, #0
 800de9a:	4625      	mov	r5, r4
 800de9c:	9407      	str	r4, [sp, #28]
 800de9e:	4626      	mov	r6, r4
 800dea0:	9a05      	ldr	r2, [sp, #20]
 800dea2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dff8 <_strtod_l+0x578>
 800dea6:	2322      	movs	r3, #34	@ 0x22
 800dea8:	6013      	str	r3, [r2, #0]
 800deaa:	f04f 0a00 	mov.w	sl, #0
 800deae:	9b07      	ldr	r3, [sp, #28]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f43f ae20 	beq.w	800daf6 <_strtod_l+0x76>
 800deb6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800deb8:	9805      	ldr	r0, [sp, #20]
 800deba:	f7ff f957 	bl	800d16c <_Bfree>
 800debe:	9805      	ldr	r0, [sp, #20]
 800dec0:	4631      	mov	r1, r6
 800dec2:	f7ff f953 	bl	800d16c <_Bfree>
 800dec6:	9805      	ldr	r0, [sp, #20]
 800dec8:	4629      	mov	r1, r5
 800deca:	f7ff f94f 	bl	800d16c <_Bfree>
 800dece:	9907      	ldr	r1, [sp, #28]
 800ded0:	9805      	ldr	r0, [sp, #20]
 800ded2:	f7ff f94b 	bl	800d16c <_Bfree>
 800ded6:	9805      	ldr	r0, [sp, #20]
 800ded8:	4621      	mov	r1, r4
 800deda:	f7ff f947 	bl	800d16c <_Bfree>
 800dede:	e60a      	b.n	800daf6 <_strtod_l+0x76>
 800dee0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800dee4:	1be0      	subs	r0, r4, r7
 800dee6:	4281      	cmp	r1, r0
 800dee8:	dbbc      	blt.n	800de64 <_strtod_l+0x3e4>
 800deea:	4a40      	ldr	r2, [pc, #256]	@ (800dfec <_strtod_l+0x56c>)
 800deec:	f1c3 030f 	rsb	r3, r3, #15
 800def0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800def4:	ed91 7b00 	vldr	d7, [r1]
 800def8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800defa:	ec4b ab16 	vmov	d6, sl, fp
 800defe:	1acb      	subs	r3, r1, r3
 800df00:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800df04:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df08:	ed92 6b00 	vldr	d6, [r2]
 800df0c:	e796      	b.n	800de3c <_strtod_l+0x3bc>
 800df0e:	3116      	adds	r1, #22
 800df10:	dba8      	blt.n	800de64 <_strtod_l+0x3e4>
 800df12:	4b36      	ldr	r3, [pc, #216]	@ (800dfec <_strtod_l+0x56c>)
 800df14:	1b3c      	subs	r4, r7, r4
 800df16:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800df1a:	ed94 7b00 	vldr	d7, [r4]
 800df1e:	ec4b ab16 	vmov	d6, sl, fp
 800df22:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800df26:	e78b      	b.n	800de40 <_strtod_l+0x3c0>
 800df28:	2000      	movs	r0, #0
 800df2a:	ec4b ab17 	vmov	d7, sl, fp
 800df2e:	4e30      	ldr	r6, [pc, #192]	@ (800dff0 <_strtod_l+0x570>)
 800df30:	1112      	asrs	r2, r2, #4
 800df32:	4601      	mov	r1, r0
 800df34:	2a01      	cmp	r2, #1
 800df36:	dc23      	bgt.n	800df80 <_strtod_l+0x500>
 800df38:	b108      	cbz	r0, 800df3e <_strtod_l+0x4be>
 800df3a:	ec5b ab17 	vmov	sl, fp, d7
 800df3e:	4a2c      	ldr	r2, [pc, #176]	@ (800dff0 <_strtod_l+0x570>)
 800df40:	482c      	ldr	r0, [pc, #176]	@ (800dff4 <_strtod_l+0x574>)
 800df42:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800df46:	ed92 7b00 	vldr	d7, [r2]
 800df4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800df4e:	ec4b ab16 	vmov	d6, sl, fp
 800df52:	4a29      	ldr	r2, [pc, #164]	@ (800dff8 <_strtod_l+0x578>)
 800df54:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df58:	ee17 1a90 	vmov	r1, s15
 800df5c:	400a      	ands	r2, r1
 800df5e:	4282      	cmp	r2, r0
 800df60:	ec5b ab17 	vmov	sl, fp, d7
 800df64:	d898      	bhi.n	800de98 <_strtod_l+0x418>
 800df66:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800df6a:	4282      	cmp	r2, r0
 800df6c:	bf86      	itte	hi
 800df6e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800dffc <_strtod_l+0x57c>
 800df72:	f04f 3aff 	movhi.w	sl, #4294967295
 800df76:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800df7a:	2200      	movs	r2, #0
 800df7c:	9206      	str	r2, [sp, #24]
 800df7e:	e076      	b.n	800e06e <_strtod_l+0x5ee>
 800df80:	f012 0f01 	tst.w	r2, #1
 800df84:	d004      	beq.n	800df90 <_strtod_l+0x510>
 800df86:	ed96 6b00 	vldr	d6, [r6]
 800df8a:	2001      	movs	r0, #1
 800df8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df90:	3101      	adds	r1, #1
 800df92:	1052      	asrs	r2, r2, #1
 800df94:	3608      	adds	r6, #8
 800df96:	e7cd      	b.n	800df34 <_strtod_l+0x4b4>
 800df98:	d0ef      	beq.n	800df7a <_strtod_l+0x4fa>
 800df9a:	4252      	negs	r2, r2
 800df9c:	f012 000f 	ands.w	r0, r2, #15
 800dfa0:	d00a      	beq.n	800dfb8 <_strtod_l+0x538>
 800dfa2:	4912      	ldr	r1, [pc, #72]	@ (800dfec <_strtod_l+0x56c>)
 800dfa4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dfa8:	ed91 7b00 	vldr	d7, [r1]
 800dfac:	ec4b ab16 	vmov	d6, sl, fp
 800dfb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dfb4:	ec5b ab17 	vmov	sl, fp, d7
 800dfb8:	1112      	asrs	r2, r2, #4
 800dfba:	d0de      	beq.n	800df7a <_strtod_l+0x4fa>
 800dfbc:	2a1f      	cmp	r2, #31
 800dfbe:	dd1f      	ble.n	800e000 <_strtod_l+0x580>
 800dfc0:	2400      	movs	r4, #0
 800dfc2:	4625      	mov	r5, r4
 800dfc4:	9407      	str	r4, [sp, #28]
 800dfc6:	4626      	mov	r6, r4
 800dfc8:	9a05      	ldr	r2, [sp, #20]
 800dfca:	2322      	movs	r3, #34	@ 0x22
 800dfcc:	f04f 0a00 	mov.w	sl, #0
 800dfd0:	f04f 0b00 	mov.w	fp, #0
 800dfd4:	6013      	str	r3, [r2, #0]
 800dfd6:	e76a      	b.n	800deae <_strtod_l+0x42e>
 800dfd8:	0800f80d 	.word	0x0800f80d
 800dfdc:	0800fa24 	.word	0x0800fa24
 800dfe0:	0800f805 	.word	0x0800f805
 800dfe4:	0800f83c 	.word	0x0800f83c
 800dfe8:	0800fbcd 	.word	0x0800fbcd
 800dfec:	0800f958 	.word	0x0800f958
 800dff0:	0800f930 	.word	0x0800f930
 800dff4:	7ca00000 	.word	0x7ca00000
 800dff8:	7ff00000 	.word	0x7ff00000
 800dffc:	7fefffff 	.word	0x7fefffff
 800e000:	f012 0110 	ands.w	r1, r2, #16
 800e004:	bf18      	it	ne
 800e006:	216a      	movne	r1, #106	@ 0x6a
 800e008:	9106      	str	r1, [sp, #24]
 800e00a:	ec4b ab17 	vmov	d7, sl, fp
 800e00e:	49b0      	ldr	r1, [pc, #704]	@ (800e2d0 <_strtod_l+0x850>)
 800e010:	2000      	movs	r0, #0
 800e012:	07d6      	lsls	r6, r2, #31
 800e014:	d504      	bpl.n	800e020 <_strtod_l+0x5a0>
 800e016:	ed91 6b00 	vldr	d6, [r1]
 800e01a:	2001      	movs	r0, #1
 800e01c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e020:	1052      	asrs	r2, r2, #1
 800e022:	f101 0108 	add.w	r1, r1, #8
 800e026:	d1f4      	bne.n	800e012 <_strtod_l+0x592>
 800e028:	b108      	cbz	r0, 800e02e <_strtod_l+0x5ae>
 800e02a:	ec5b ab17 	vmov	sl, fp, d7
 800e02e:	9a06      	ldr	r2, [sp, #24]
 800e030:	b1b2      	cbz	r2, 800e060 <_strtod_l+0x5e0>
 800e032:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e036:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e03a:	2a00      	cmp	r2, #0
 800e03c:	4658      	mov	r0, fp
 800e03e:	dd0f      	ble.n	800e060 <_strtod_l+0x5e0>
 800e040:	2a1f      	cmp	r2, #31
 800e042:	dd55      	ble.n	800e0f0 <_strtod_l+0x670>
 800e044:	2a34      	cmp	r2, #52	@ 0x34
 800e046:	bfde      	ittt	le
 800e048:	f04f 32ff 	movle.w	r2, #4294967295
 800e04c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e050:	408a      	lslle	r2, r1
 800e052:	f04f 0a00 	mov.w	sl, #0
 800e056:	bfcc      	ite	gt
 800e058:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e05c:	ea02 0b00 	andle.w	fp, r2, r0
 800e060:	ec4b ab17 	vmov	d7, sl, fp
 800e064:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e06c:	d0a8      	beq.n	800dfc0 <_strtod_l+0x540>
 800e06e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e070:	9805      	ldr	r0, [sp, #20]
 800e072:	f8cd 9000 	str.w	r9, [sp]
 800e076:	462a      	mov	r2, r5
 800e078:	f7ff f8e0 	bl	800d23c <__s2b>
 800e07c:	9007      	str	r0, [sp, #28]
 800e07e:	2800      	cmp	r0, #0
 800e080:	f43f af0a 	beq.w	800de98 <_strtod_l+0x418>
 800e084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e086:	1b3f      	subs	r7, r7, r4
 800e088:	2b00      	cmp	r3, #0
 800e08a:	bfb4      	ite	lt
 800e08c:	463b      	movlt	r3, r7
 800e08e:	2300      	movge	r3, #0
 800e090:	930a      	str	r3, [sp, #40]	@ 0x28
 800e092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e094:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800e2c0 <_strtod_l+0x840>
 800e098:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e09c:	2400      	movs	r4, #0
 800e09e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e0a0:	4625      	mov	r5, r4
 800e0a2:	9b07      	ldr	r3, [sp, #28]
 800e0a4:	9805      	ldr	r0, [sp, #20]
 800e0a6:	6859      	ldr	r1, [r3, #4]
 800e0a8:	f7ff f820 	bl	800d0ec <_Balloc>
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f43f aef6 	beq.w	800dea0 <_strtod_l+0x420>
 800e0b4:	9b07      	ldr	r3, [sp, #28]
 800e0b6:	691a      	ldr	r2, [r3, #16]
 800e0b8:	ec4b ab19 	vmov	d9, sl, fp
 800e0bc:	3202      	adds	r2, #2
 800e0be:	f103 010c 	add.w	r1, r3, #12
 800e0c2:	0092      	lsls	r2, r2, #2
 800e0c4:	300c      	adds	r0, #12
 800e0c6:	f7fe f91c 	bl	800c302 <memcpy>
 800e0ca:	eeb0 0b49 	vmov.f64	d0, d9
 800e0ce:	9805      	ldr	r0, [sp, #20]
 800e0d0:	aa14      	add	r2, sp, #80	@ 0x50
 800e0d2:	a913      	add	r1, sp, #76	@ 0x4c
 800e0d4:	f7ff fbee 	bl	800d8b4 <__d2b>
 800e0d8:	9012      	str	r0, [sp, #72]	@ 0x48
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	f43f aee0 	beq.w	800dea0 <_strtod_l+0x420>
 800e0e0:	9805      	ldr	r0, [sp, #20]
 800e0e2:	2101      	movs	r1, #1
 800e0e4:	f7ff f940 	bl	800d368 <__i2b>
 800e0e8:	4605      	mov	r5, r0
 800e0ea:	b940      	cbnz	r0, 800e0fe <_strtod_l+0x67e>
 800e0ec:	2500      	movs	r5, #0
 800e0ee:	e6d7      	b.n	800dea0 <_strtod_l+0x420>
 800e0f0:	f04f 31ff 	mov.w	r1, #4294967295
 800e0f4:	fa01 f202 	lsl.w	r2, r1, r2
 800e0f8:	ea02 0a0a 	and.w	sl, r2, sl
 800e0fc:	e7b0      	b.n	800e060 <_strtod_l+0x5e0>
 800e0fe:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e100:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e102:	2f00      	cmp	r7, #0
 800e104:	bfab      	itete	ge
 800e106:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e108:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e10a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e10e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e112:	bfac      	ite	ge
 800e114:	eb07 0903 	addge.w	r9, r7, r3
 800e118:	eba3 0807 	sublt.w	r8, r3, r7
 800e11c:	9b06      	ldr	r3, [sp, #24]
 800e11e:	1aff      	subs	r7, r7, r3
 800e120:	4417      	add	r7, r2
 800e122:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e126:	4a6b      	ldr	r2, [pc, #428]	@ (800e2d4 <_strtod_l+0x854>)
 800e128:	3f01      	subs	r7, #1
 800e12a:	4297      	cmp	r7, r2
 800e12c:	da51      	bge.n	800e1d2 <_strtod_l+0x752>
 800e12e:	1bd1      	subs	r1, r2, r7
 800e130:	291f      	cmp	r1, #31
 800e132:	eba3 0301 	sub.w	r3, r3, r1
 800e136:	f04f 0201 	mov.w	r2, #1
 800e13a:	dc3e      	bgt.n	800e1ba <_strtod_l+0x73a>
 800e13c:	408a      	lsls	r2, r1
 800e13e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e140:	2200      	movs	r2, #0
 800e142:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e144:	eb09 0703 	add.w	r7, r9, r3
 800e148:	4498      	add	r8, r3
 800e14a:	9b06      	ldr	r3, [sp, #24]
 800e14c:	45b9      	cmp	r9, r7
 800e14e:	4498      	add	r8, r3
 800e150:	464b      	mov	r3, r9
 800e152:	bfa8      	it	ge
 800e154:	463b      	movge	r3, r7
 800e156:	4543      	cmp	r3, r8
 800e158:	bfa8      	it	ge
 800e15a:	4643      	movge	r3, r8
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	bfc2      	ittt	gt
 800e160:	1aff      	subgt	r7, r7, r3
 800e162:	eba8 0803 	subgt.w	r8, r8, r3
 800e166:	eba9 0903 	subgt.w	r9, r9, r3
 800e16a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	dd16      	ble.n	800e19e <_strtod_l+0x71e>
 800e170:	4629      	mov	r1, r5
 800e172:	9805      	ldr	r0, [sp, #20]
 800e174:	461a      	mov	r2, r3
 800e176:	f7ff f9b7 	bl	800d4e8 <__pow5mult>
 800e17a:	4605      	mov	r5, r0
 800e17c:	2800      	cmp	r0, #0
 800e17e:	d0b5      	beq.n	800e0ec <_strtod_l+0x66c>
 800e180:	4601      	mov	r1, r0
 800e182:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e184:	9805      	ldr	r0, [sp, #20]
 800e186:	f7ff f905 	bl	800d394 <__multiply>
 800e18a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e18c:	2800      	cmp	r0, #0
 800e18e:	f43f ae87 	beq.w	800dea0 <_strtod_l+0x420>
 800e192:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e194:	9805      	ldr	r0, [sp, #20]
 800e196:	f7fe ffe9 	bl	800d16c <_Bfree>
 800e19a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e19c:	9312      	str	r3, [sp, #72]	@ 0x48
 800e19e:	2f00      	cmp	r7, #0
 800e1a0:	dc1b      	bgt.n	800e1da <_strtod_l+0x75a>
 800e1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	dd21      	ble.n	800e1ec <_strtod_l+0x76c>
 800e1a8:	4631      	mov	r1, r6
 800e1aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1ac:	9805      	ldr	r0, [sp, #20]
 800e1ae:	f7ff f99b 	bl	800d4e8 <__pow5mult>
 800e1b2:	4606      	mov	r6, r0
 800e1b4:	b9d0      	cbnz	r0, 800e1ec <_strtod_l+0x76c>
 800e1b6:	2600      	movs	r6, #0
 800e1b8:	e672      	b.n	800dea0 <_strtod_l+0x420>
 800e1ba:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e1be:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e1c2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e1c6:	37e2      	adds	r7, #226	@ 0xe2
 800e1c8:	fa02 f107 	lsl.w	r1, r2, r7
 800e1cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e1ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800e1d0:	e7b8      	b.n	800e144 <_strtod_l+0x6c4>
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	e7f9      	b.n	800e1ce <_strtod_l+0x74e>
 800e1da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e1dc:	9805      	ldr	r0, [sp, #20]
 800e1de:	463a      	mov	r2, r7
 800e1e0:	f7ff f9dc 	bl	800d59c <__lshift>
 800e1e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	d1db      	bne.n	800e1a2 <_strtod_l+0x722>
 800e1ea:	e659      	b.n	800dea0 <_strtod_l+0x420>
 800e1ec:	f1b8 0f00 	cmp.w	r8, #0
 800e1f0:	dd07      	ble.n	800e202 <_strtod_l+0x782>
 800e1f2:	4631      	mov	r1, r6
 800e1f4:	9805      	ldr	r0, [sp, #20]
 800e1f6:	4642      	mov	r2, r8
 800e1f8:	f7ff f9d0 	bl	800d59c <__lshift>
 800e1fc:	4606      	mov	r6, r0
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d0d9      	beq.n	800e1b6 <_strtod_l+0x736>
 800e202:	f1b9 0f00 	cmp.w	r9, #0
 800e206:	dd08      	ble.n	800e21a <_strtod_l+0x79a>
 800e208:	4629      	mov	r1, r5
 800e20a:	9805      	ldr	r0, [sp, #20]
 800e20c:	464a      	mov	r2, r9
 800e20e:	f7ff f9c5 	bl	800d59c <__lshift>
 800e212:	4605      	mov	r5, r0
 800e214:	2800      	cmp	r0, #0
 800e216:	f43f ae43 	beq.w	800dea0 <_strtod_l+0x420>
 800e21a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e21c:	9805      	ldr	r0, [sp, #20]
 800e21e:	4632      	mov	r2, r6
 800e220:	f7ff fa44 	bl	800d6ac <__mdiff>
 800e224:	4604      	mov	r4, r0
 800e226:	2800      	cmp	r0, #0
 800e228:	f43f ae3a 	beq.w	800dea0 <_strtod_l+0x420>
 800e22c:	2300      	movs	r3, #0
 800e22e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e232:	60c3      	str	r3, [r0, #12]
 800e234:	4629      	mov	r1, r5
 800e236:	f7ff fa1d 	bl	800d674 <__mcmp>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	da4e      	bge.n	800e2dc <_strtod_l+0x85c>
 800e23e:	ea58 080a 	orrs.w	r8, r8, sl
 800e242:	d174      	bne.n	800e32e <_strtod_l+0x8ae>
 800e244:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d170      	bne.n	800e32e <_strtod_l+0x8ae>
 800e24c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e250:	0d1b      	lsrs	r3, r3, #20
 800e252:	051b      	lsls	r3, r3, #20
 800e254:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e258:	d969      	bls.n	800e32e <_strtod_l+0x8ae>
 800e25a:	6963      	ldr	r3, [r4, #20]
 800e25c:	b913      	cbnz	r3, 800e264 <_strtod_l+0x7e4>
 800e25e:	6923      	ldr	r3, [r4, #16]
 800e260:	2b01      	cmp	r3, #1
 800e262:	dd64      	ble.n	800e32e <_strtod_l+0x8ae>
 800e264:	4621      	mov	r1, r4
 800e266:	2201      	movs	r2, #1
 800e268:	9805      	ldr	r0, [sp, #20]
 800e26a:	f7ff f997 	bl	800d59c <__lshift>
 800e26e:	4629      	mov	r1, r5
 800e270:	4604      	mov	r4, r0
 800e272:	f7ff f9ff 	bl	800d674 <__mcmp>
 800e276:	2800      	cmp	r0, #0
 800e278:	dd59      	ble.n	800e32e <_strtod_l+0x8ae>
 800e27a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e27e:	9a06      	ldr	r2, [sp, #24]
 800e280:	0d1b      	lsrs	r3, r3, #20
 800e282:	051b      	lsls	r3, r3, #20
 800e284:	2a00      	cmp	r2, #0
 800e286:	d070      	beq.n	800e36a <_strtod_l+0x8ea>
 800e288:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e28c:	d86d      	bhi.n	800e36a <_strtod_l+0x8ea>
 800e28e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e292:	f67f ae99 	bls.w	800dfc8 <_strtod_l+0x548>
 800e296:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800e2c8 <_strtod_l+0x848>
 800e29a:	ec4b ab16 	vmov	d6, sl, fp
 800e29e:	4b0e      	ldr	r3, [pc, #56]	@ (800e2d8 <_strtod_l+0x858>)
 800e2a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e2a4:	ee17 2a90 	vmov	r2, s15
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	ec5b ab17 	vmov	sl, fp, d7
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f47f ae01 	bne.w	800deb6 <_strtod_l+0x436>
 800e2b4:	9a05      	ldr	r2, [sp, #20]
 800e2b6:	2322      	movs	r3, #34	@ 0x22
 800e2b8:	6013      	str	r3, [r2, #0]
 800e2ba:	e5fc      	b.n	800deb6 <_strtod_l+0x436>
 800e2bc:	f3af 8000 	nop.w
 800e2c0:	ffc00000 	.word	0xffc00000
 800e2c4:	41dfffff 	.word	0x41dfffff
 800e2c8:	00000000 	.word	0x00000000
 800e2cc:	39500000 	.word	0x39500000
 800e2d0:	0800fa50 	.word	0x0800fa50
 800e2d4:	fffffc02 	.word	0xfffffc02
 800e2d8:	7ff00000 	.word	0x7ff00000
 800e2dc:	46d9      	mov	r9, fp
 800e2de:	d15d      	bne.n	800e39c <_strtod_l+0x91c>
 800e2e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2e4:	f1b8 0f00 	cmp.w	r8, #0
 800e2e8:	d02a      	beq.n	800e340 <_strtod_l+0x8c0>
 800e2ea:	4aab      	ldr	r2, [pc, #684]	@ (800e598 <_strtod_l+0xb18>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d12a      	bne.n	800e346 <_strtod_l+0x8c6>
 800e2f0:	9b06      	ldr	r3, [sp, #24]
 800e2f2:	4652      	mov	r2, sl
 800e2f4:	b1fb      	cbz	r3, 800e336 <_strtod_l+0x8b6>
 800e2f6:	4ba9      	ldr	r3, [pc, #676]	@ (800e59c <_strtod_l+0xb1c>)
 800e2f8:	ea0b 0303 	and.w	r3, fp, r3
 800e2fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e300:	f04f 31ff 	mov.w	r1, #4294967295
 800e304:	d81a      	bhi.n	800e33c <_strtod_l+0x8bc>
 800e306:	0d1b      	lsrs	r3, r3, #20
 800e308:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e30c:	fa01 f303 	lsl.w	r3, r1, r3
 800e310:	429a      	cmp	r2, r3
 800e312:	d118      	bne.n	800e346 <_strtod_l+0x8c6>
 800e314:	4ba2      	ldr	r3, [pc, #648]	@ (800e5a0 <_strtod_l+0xb20>)
 800e316:	4599      	cmp	r9, r3
 800e318:	d102      	bne.n	800e320 <_strtod_l+0x8a0>
 800e31a:	3201      	adds	r2, #1
 800e31c:	f43f adc0 	beq.w	800dea0 <_strtod_l+0x420>
 800e320:	4b9e      	ldr	r3, [pc, #632]	@ (800e59c <_strtod_l+0xb1c>)
 800e322:	ea09 0303 	and.w	r3, r9, r3
 800e326:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e32a:	f04f 0a00 	mov.w	sl, #0
 800e32e:	9b06      	ldr	r3, [sp, #24]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1b0      	bne.n	800e296 <_strtod_l+0x816>
 800e334:	e5bf      	b.n	800deb6 <_strtod_l+0x436>
 800e336:	f04f 33ff 	mov.w	r3, #4294967295
 800e33a:	e7e9      	b.n	800e310 <_strtod_l+0x890>
 800e33c:	460b      	mov	r3, r1
 800e33e:	e7e7      	b.n	800e310 <_strtod_l+0x890>
 800e340:	ea53 030a 	orrs.w	r3, r3, sl
 800e344:	d099      	beq.n	800e27a <_strtod_l+0x7fa>
 800e346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e348:	b1c3      	cbz	r3, 800e37c <_strtod_l+0x8fc>
 800e34a:	ea13 0f09 	tst.w	r3, r9
 800e34e:	d0ee      	beq.n	800e32e <_strtod_l+0x8ae>
 800e350:	9a06      	ldr	r2, [sp, #24]
 800e352:	4650      	mov	r0, sl
 800e354:	4659      	mov	r1, fp
 800e356:	f1b8 0f00 	cmp.w	r8, #0
 800e35a:	d013      	beq.n	800e384 <_strtod_l+0x904>
 800e35c:	f7ff fb75 	bl	800da4a <sulp>
 800e360:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e364:	ec5b ab17 	vmov	sl, fp, d7
 800e368:	e7e1      	b.n	800e32e <_strtod_l+0x8ae>
 800e36a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e36e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e372:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e376:	f04f 3aff 	mov.w	sl, #4294967295
 800e37a:	e7d8      	b.n	800e32e <_strtod_l+0x8ae>
 800e37c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e37e:	ea13 0f0a 	tst.w	r3, sl
 800e382:	e7e4      	b.n	800e34e <_strtod_l+0x8ce>
 800e384:	f7ff fb61 	bl	800da4a <sulp>
 800e388:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e38c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e394:	ec5b ab10 	vmov	sl, fp, d0
 800e398:	d1c9      	bne.n	800e32e <_strtod_l+0x8ae>
 800e39a:	e615      	b.n	800dfc8 <_strtod_l+0x548>
 800e39c:	4629      	mov	r1, r5
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f7ff fae0 	bl	800d964 <__ratio>
 800e3a4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e3a8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b0:	d85d      	bhi.n	800e46e <_strtod_l+0x9ee>
 800e3b2:	f1b8 0f00 	cmp.w	r8, #0
 800e3b6:	d164      	bne.n	800e482 <_strtod_l+0xa02>
 800e3b8:	f1ba 0f00 	cmp.w	sl, #0
 800e3bc:	d14b      	bne.n	800e456 <_strtod_l+0x9d6>
 800e3be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3c2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d160      	bne.n	800e48c <_strtod_l+0xa0c>
 800e3ca:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e3ce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d6:	d401      	bmi.n	800e3dc <_strtod_l+0x95c>
 800e3d8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e3dc:	eeb1 ab48 	vneg.f64	d10, d8
 800e3e0:	486e      	ldr	r0, [pc, #440]	@ (800e59c <_strtod_l+0xb1c>)
 800e3e2:	4970      	ldr	r1, [pc, #448]	@ (800e5a4 <_strtod_l+0xb24>)
 800e3e4:	ea09 0700 	and.w	r7, r9, r0
 800e3e8:	428f      	cmp	r7, r1
 800e3ea:	ec53 2b1a 	vmov	r2, r3, d10
 800e3ee:	d17d      	bne.n	800e4ec <_strtod_l+0xa6c>
 800e3f0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e3f4:	ec4b ab1c 	vmov	d12, sl, fp
 800e3f8:	eeb0 0b4c 	vmov.f64	d0, d12
 800e3fc:	f7ff f9ea 	bl	800d7d4 <__ulp>
 800e400:	4866      	ldr	r0, [pc, #408]	@ (800e59c <_strtod_l+0xb1c>)
 800e402:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e406:	ee1c 3a90 	vmov	r3, s25
 800e40a:	4a67      	ldr	r2, [pc, #412]	@ (800e5a8 <_strtod_l+0xb28>)
 800e40c:	ea03 0100 	and.w	r1, r3, r0
 800e410:	4291      	cmp	r1, r2
 800e412:	ec5b ab1c 	vmov	sl, fp, d12
 800e416:	d93c      	bls.n	800e492 <_strtod_l+0xa12>
 800e418:	ee19 2a90 	vmov	r2, s19
 800e41c:	4b60      	ldr	r3, [pc, #384]	@ (800e5a0 <_strtod_l+0xb20>)
 800e41e:	429a      	cmp	r2, r3
 800e420:	d104      	bne.n	800e42c <_strtod_l+0x9ac>
 800e422:	ee19 3a10 	vmov	r3, s18
 800e426:	3301      	adds	r3, #1
 800e428:	f43f ad3a 	beq.w	800dea0 <_strtod_l+0x420>
 800e42c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800e5a0 <_strtod_l+0xb20>
 800e430:	f04f 3aff 	mov.w	sl, #4294967295
 800e434:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e436:	9805      	ldr	r0, [sp, #20]
 800e438:	f7fe fe98 	bl	800d16c <_Bfree>
 800e43c:	9805      	ldr	r0, [sp, #20]
 800e43e:	4631      	mov	r1, r6
 800e440:	f7fe fe94 	bl	800d16c <_Bfree>
 800e444:	9805      	ldr	r0, [sp, #20]
 800e446:	4629      	mov	r1, r5
 800e448:	f7fe fe90 	bl	800d16c <_Bfree>
 800e44c:	9805      	ldr	r0, [sp, #20]
 800e44e:	4621      	mov	r1, r4
 800e450:	f7fe fe8c 	bl	800d16c <_Bfree>
 800e454:	e625      	b.n	800e0a2 <_strtod_l+0x622>
 800e456:	f1ba 0f01 	cmp.w	sl, #1
 800e45a:	d103      	bne.n	800e464 <_strtod_l+0x9e4>
 800e45c:	f1bb 0f00 	cmp.w	fp, #0
 800e460:	f43f adb2 	beq.w	800dfc8 <_strtod_l+0x548>
 800e464:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e468:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e46c:	e7b8      	b.n	800e3e0 <_strtod_l+0x960>
 800e46e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e472:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e476:	f1b8 0f00 	cmp.w	r8, #0
 800e47a:	d0af      	beq.n	800e3dc <_strtod_l+0x95c>
 800e47c:	eeb0 ab48 	vmov.f64	d10, d8
 800e480:	e7ae      	b.n	800e3e0 <_strtod_l+0x960>
 800e482:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e486:	eeb0 8b4a 	vmov.f64	d8, d10
 800e48a:	e7a9      	b.n	800e3e0 <_strtod_l+0x960>
 800e48c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e490:	e7a6      	b.n	800e3e0 <_strtod_l+0x960>
 800e492:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e496:	9b06      	ldr	r3, [sp, #24]
 800e498:	46d9      	mov	r9, fp
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1ca      	bne.n	800e434 <_strtod_l+0x9b4>
 800e49e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4a2:	0d1b      	lsrs	r3, r3, #20
 800e4a4:	051b      	lsls	r3, r3, #20
 800e4a6:	429f      	cmp	r7, r3
 800e4a8:	d1c4      	bne.n	800e434 <_strtod_l+0x9b4>
 800e4aa:	ec51 0b18 	vmov	r0, r1, d8
 800e4ae:	f7f2 f95b 	bl	8000768 <__aeabi_d2lz>
 800e4b2:	f7f2 f913 	bl	80006dc <__aeabi_l2d>
 800e4b6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e4ba:	ec41 0b17 	vmov	d7, r0, r1
 800e4be:	ea49 090a 	orr.w	r9, r9, sl
 800e4c2:	ea59 0908 	orrs.w	r9, r9, r8
 800e4c6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e4ca:	d03c      	beq.n	800e546 <_strtod_l+0xac6>
 800e4cc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e580 <_strtod_l+0xb00>
 800e4d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d8:	f53f aced 	bmi.w	800deb6 <_strtod_l+0x436>
 800e4dc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e588 <_strtod_l+0xb08>
 800e4e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e8:	dda4      	ble.n	800e434 <_strtod_l+0x9b4>
 800e4ea:	e4e4      	b.n	800deb6 <_strtod_l+0x436>
 800e4ec:	9906      	ldr	r1, [sp, #24]
 800e4ee:	b1e1      	cbz	r1, 800e52a <_strtod_l+0xaaa>
 800e4f0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e4f4:	d819      	bhi.n	800e52a <_strtod_l+0xaaa>
 800e4f6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4fe:	d811      	bhi.n	800e524 <_strtod_l+0xaa4>
 800e500:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e504:	ee18 3a10 	vmov	r3, s16
 800e508:	2b01      	cmp	r3, #1
 800e50a:	bf38      	it	cc
 800e50c:	2301      	movcc	r3, #1
 800e50e:	ee08 3a10 	vmov	s16, r3
 800e512:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e516:	f1b8 0f00 	cmp.w	r8, #0
 800e51a:	d111      	bne.n	800e540 <_strtod_l+0xac0>
 800e51c:	eeb1 7b48 	vneg.f64	d7, d8
 800e520:	ec53 2b17 	vmov	r2, r3, d7
 800e524:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e528:	1bcb      	subs	r3, r1, r7
 800e52a:	eeb0 0b49 	vmov.f64	d0, d9
 800e52e:	ec43 2b1a 	vmov	d10, r2, r3
 800e532:	f7ff f94f 	bl	800d7d4 <__ulp>
 800e536:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e53a:	ec5b ab19 	vmov	sl, fp, d9
 800e53e:	e7aa      	b.n	800e496 <_strtod_l+0xa16>
 800e540:	eeb0 7b48 	vmov.f64	d7, d8
 800e544:	e7ec      	b.n	800e520 <_strtod_l+0xaa0>
 800e546:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800e590 <_strtod_l+0xb10>
 800e54a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e552:	f57f af6f 	bpl.w	800e434 <_strtod_l+0x9b4>
 800e556:	e4ae      	b.n	800deb6 <_strtod_l+0x436>
 800e558:	2300      	movs	r3, #0
 800e55a:	9308      	str	r3, [sp, #32]
 800e55c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e55e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e560:	6013      	str	r3, [r2, #0]
 800e562:	f7ff bacc 	b.w	800dafe <_strtod_l+0x7e>
 800e566:	2a65      	cmp	r2, #101	@ 0x65
 800e568:	f43f abbc 	beq.w	800dce4 <_strtod_l+0x264>
 800e56c:	2a45      	cmp	r2, #69	@ 0x45
 800e56e:	f43f abb9 	beq.w	800dce4 <_strtod_l+0x264>
 800e572:	2301      	movs	r3, #1
 800e574:	9306      	str	r3, [sp, #24]
 800e576:	f7ff bbf0 	b.w	800dd5a <_strtod_l+0x2da>
 800e57a:	bf00      	nop
 800e57c:	f3af 8000 	nop.w
 800e580:	94a03595 	.word	0x94a03595
 800e584:	3fdfffff 	.word	0x3fdfffff
 800e588:	35afe535 	.word	0x35afe535
 800e58c:	3fe00000 	.word	0x3fe00000
 800e590:	94a03595 	.word	0x94a03595
 800e594:	3fcfffff 	.word	0x3fcfffff
 800e598:	000fffff 	.word	0x000fffff
 800e59c:	7ff00000 	.word	0x7ff00000
 800e5a0:	7fefffff 	.word	0x7fefffff
 800e5a4:	7fe00000 	.word	0x7fe00000
 800e5a8:	7c9fffff 	.word	0x7c9fffff

0800e5ac <_strtod_r>:
 800e5ac:	4b01      	ldr	r3, [pc, #4]	@ (800e5b4 <_strtod_r+0x8>)
 800e5ae:	f7ff ba67 	b.w	800da80 <_strtod_l>
 800e5b2:	bf00      	nop
 800e5b4:	2400006c 	.word	0x2400006c

0800e5b8 <_strtol_l.constprop.0>:
 800e5b8:	2b24      	cmp	r3, #36	@ 0x24
 800e5ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5be:	4686      	mov	lr, r0
 800e5c0:	4690      	mov	r8, r2
 800e5c2:	d801      	bhi.n	800e5c8 <_strtol_l.constprop.0+0x10>
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d106      	bne.n	800e5d6 <_strtol_l.constprop.0+0x1e>
 800e5c8:	f7fd fe6e 	bl	800c2a8 <__errno>
 800e5cc:	2316      	movs	r3, #22
 800e5ce:	6003      	str	r3, [r0, #0]
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5d6:	4834      	ldr	r0, [pc, #208]	@ (800e6a8 <_strtol_l.constprop.0+0xf0>)
 800e5d8:	460d      	mov	r5, r1
 800e5da:	462a      	mov	r2, r5
 800e5dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5e0:	5d06      	ldrb	r6, [r0, r4]
 800e5e2:	f016 0608 	ands.w	r6, r6, #8
 800e5e6:	d1f8      	bne.n	800e5da <_strtol_l.constprop.0+0x22>
 800e5e8:	2c2d      	cmp	r4, #45	@ 0x2d
 800e5ea:	d12d      	bne.n	800e648 <_strtol_l.constprop.0+0x90>
 800e5ec:	782c      	ldrb	r4, [r5, #0]
 800e5ee:	2601      	movs	r6, #1
 800e5f0:	1c95      	adds	r5, r2, #2
 800e5f2:	f033 0210 	bics.w	r2, r3, #16
 800e5f6:	d109      	bne.n	800e60c <_strtol_l.constprop.0+0x54>
 800e5f8:	2c30      	cmp	r4, #48	@ 0x30
 800e5fa:	d12a      	bne.n	800e652 <_strtol_l.constprop.0+0x9a>
 800e5fc:	782a      	ldrb	r2, [r5, #0]
 800e5fe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e602:	2a58      	cmp	r2, #88	@ 0x58
 800e604:	d125      	bne.n	800e652 <_strtol_l.constprop.0+0x9a>
 800e606:	786c      	ldrb	r4, [r5, #1]
 800e608:	2310      	movs	r3, #16
 800e60a:	3502      	adds	r5, #2
 800e60c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e610:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e614:	2200      	movs	r2, #0
 800e616:	fbbc f9f3 	udiv	r9, ip, r3
 800e61a:	4610      	mov	r0, r2
 800e61c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e620:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e624:	2f09      	cmp	r7, #9
 800e626:	d81b      	bhi.n	800e660 <_strtol_l.constprop.0+0xa8>
 800e628:	463c      	mov	r4, r7
 800e62a:	42a3      	cmp	r3, r4
 800e62c:	dd27      	ble.n	800e67e <_strtol_l.constprop.0+0xc6>
 800e62e:	1c57      	adds	r7, r2, #1
 800e630:	d007      	beq.n	800e642 <_strtol_l.constprop.0+0x8a>
 800e632:	4581      	cmp	r9, r0
 800e634:	d320      	bcc.n	800e678 <_strtol_l.constprop.0+0xc0>
 800e636:	d101      	bne.n	800e63c <_strtol_l.constprop.0+0x84>
 800e638:	45a2      	cmp	sl, r4
 800e63a:	db1d      	blt.n	800e678 <_strtol_l.constprop.0+0xc0>
 800e63c:	fb00 4003 	mla	r0, r0, r3, r4
 800e640:	2201      	movs	r2, #1
 800e642:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e646:	e7eb      	b.n	800e620 <_strtol_l.constprop.0+0x68>
 800e648:	2c2b      	cmp	r4, #43	@ 0x2b
 800e64a:	bf04      	itt	eq
 800e64c:	782c      	ldrbeq	r4, [r5, #0]
 800e64e:	1c95      	addeq	r5, r2, #2
 800e650:	e7cf      	b.n	800e5f2 <_strtol_l.constprop.0+0x3a>
 800e652:	2b00      	cmp	r3, #0
 800e654:	d1da      	bne.n	800e60c <_strtol_l.constprop.0+0x54>
 800e656:	2c30      	cmp	r4, #48	@ 0x30
 800e658:	bf0c      	ite	eq
 800e65a:	2308      	moveq	r3, #8
 800e65c:	230a      	movne	r3, #10
 800e65e:	e7d5      	b.n	800e60c <_strtol_l.constprop.0+0x54>
 800e660:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e664:	2f19      	cmp	r7, #25
 800e666:	d801      	bhi.n	800e66c <_strtol_l.constprop.0+0xb4>
 800e668:	3c37      	subs	r4, #55	@ 0x37
 800e66a:	e7de      	b.n	800e62a <_strtol_l.constprop.0+0x72>
 800e66c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e670:	2f19      	cmp	r7, #25
 800e672:	d804      	bhi.n	800e67e <_strtol_l.constprop.0+0xc6>
 800e674:	3c57      	subs	r4, #87	@ 0x57
 800e676:	e7d8      	b.n	800e62a <_strtol_l.constprop.0+0x72>
 800e678:	f04f 32ff 	mov.w	r2, #4294967295
 800e67c:	e7e1      	b.n	800e642 <_strtol_l.constprop.0+0x8a>
 800e67e:	1c53      	adds	r3, r2, #1
 800e680:	d108      	bne.n	800e694 <_strtol_l.constprop.0+0xdc>
 800e682:	2322      	movs	r3, #34	@ 0x22
 800e684:	f8ce 3000 	str.w	r3, [lr]
 800e688:	4660      	mov	r0, ip
 800e68a:	f1b8 0f00 	cmp.w	r8, #0
 800e68e:	d0a0      	beq.n	800e5d2 <_strtol_l.constprop.0+0x1a>
 800e690:	1e69      	subs	r1, r5, #1
 800e692:	e006      	b.n	800e6a2 <_strtol_l.constprop.0+0xea>
 800e694:	b106      	cbz	r6, 800e698 <_strtol_l.constprop.0+0xe0>
 800e696:	4240      	negs	r0, r0
 800e698:	f1b8 0f00 	cmp.w	r8, #0
 800e69c:	d099      	beq.n	800e5d2 <_strtol_l.constprop.0+0x1a>
 800e69e:	2a00      	cmp	r2, #0
 800e6a0:	d1f6      	bne.n	800e690 <_strtol_l.constprop.0+0xd8>
 800e6a2:	f8c8 1000 	str.w	r1, [r8]
 800e6a6:	e794      	b.n	800e5d2 <_strtol_l.constprop.0+0x1a>
 800e6a8:	0800fa79 	.word	0x0800fa79

0800e6ac <_strtol_r>:
 800e6ac:	f7ff bf84 	b.w	800e5b8 <_strtol_l.constprop.0>

0800e6b0 <__ssputs_r>:
 800e6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b4:	688e      	ldr	r6, [r1, #8]
 800e6b6:	461f      	mov	r7, r3
 800e6b8:	42be      	cmp	r6, r7
 800e6ba:	680b      	ldr	r3, [r1, #0]
 800e6bc:	4682      	mov	sl, r0
 800e6be:	460c      	mov	r4, r1
 800e6c0:	4690      	mov	r8, r2
 800e6c2:	d82d      	bhi.n	800e720 <__ssputs_r+0x70>
 800e6c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e6cc:	d026      	beq.n	800e71c <__ssputs_r+0x6c>
 800e6ce:	6965      	ldr	r5, [r4, #20]
 800e6d0:	6909      	ldr	r1, [r1, #16]
 800e6d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6d6:	eba3 0901 	sub.w	r9, r3, r1
 800e6da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6de:	1c7b      	adds	r3, r7, #1
 800e6e0:	444b      	add	r3, r9
 800e6e2:	106d      	asrs	r5, r5, #1
 800e6e4:	429d      	cmp	r5, r3
 800e6e6:	bf38      	it	cc
 800e6e8:	461d      	movcc	r5, r3
 800e6ea:	0553      	lsls	r3, r2, #21
 800e6ec:	d527      	bpl.n	800e73e <__ssputs_r+0x8e>
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	f7fe fc70 	bl	800cfd4 <_malloc_r>
 800e6f4:	4606      	mov	r6, r0
 800e6f6:	b360      	cbz	r0, 800e752 <__ssputs_r+0xa2>
 800e6f8:	6921      	ldr	r1, [r4, #16]
 800e6fa:	464a      	mov	r2, r9
 800e6fc:	f7fd fe01 	bl	800c302 <memcpy>
 800e700:	89a3      	ldrh	r3, [r4, #12]
 800e702:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e70a:	81a3      	strh	r3, [r4, #12]
 800e70c:	6126      	str	r6, [r4, #16]
 800e70e:	6165      	str	r5, [r4, #20]
 800e710:	444e      	add	r6, r9
 800e712:	eba5 0509 	sub.w	r5, r5, r9
 800e716:	6026      	str	r6, [r4, #0]
 800e718:	60a5      	str	r5, [r4, #8]
 800e71a:	463e      	mov	r6, r7
 800e71c:	42be      	cmp	r6, r7
 800e71e:	d900      	bls.n	800e722 <__ssputs_r+0x72>
 800e720:	463e      	mov	r6, r7
 800e722:	6820      	ldr	r0, [r4, #0]
 800e724:	4632      	mov	r2, r6
 800e726:	4641      	mov	r1, r8
 800e728:	f000 fb6a 	bl	800ee00 <memmove>
 800e72c:	68a3      	ldr	r3, [r4, #8]
 800e72e:	1b9b      	subs	r3, r3, r6
 800e730:	60a3      	str	r3, [r4, #8]
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	4433      	add	r3, r6
 800e736:	6023      	str	r3, [r4, #0]
 800e738:	2000      	movs	r0, #0
 800e73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e73e:	462a      	mov	r2, r5
 800e740:	f000 ff43 	bl	800f5ca <_realloc_r>
 800e744:	4606      	mov	r6, r0
 800e746:	2800      	cmp	r0, #0
 800e748:	d1e0      	bne.n	800e70c <__ssputs_r+0x5c>
 800e74a:	6921      	ldr	r1, [r4, #16]
 800e74c:	4650      	mov	r0, sl
 800e74e:	f7fe fbcd 	bl	800ceec <_free_r>
 800e752:	230c      	movs	r3, #12
 800e754:	f8ca 3000 	str.w	r3, [sl]
 800e758:	89a3      	ldrh	r3, [r4, #12]
 800e75a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e75e:	81a3      	strh	r3, [r4, #12]
 800e760:	f04f 30ff 	mov.w	r0, #4294967295
 800e764:	e7e9      	b.n	800e73a <__ssputs_r+0x8a>
	...

0800e768 <_svfiprintf_r>:
 800e768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76c:	4698      	mov	r8, r3
 800e76e:	898b      	ldrh	r3, [r1, #12]
 800e770:	061b      	lsls	r3, r3, #24
 800e772:	b09d      	sub	sp, #116	@ 0x74
 800e774:	4607      	mov	r7, r0
 800e776:	460d      	mov	r5, r1
 800e778:	4614      	mov	r4, r2
 800e77a:	d510      	bpl.n	800e79e <_svfiprintf_r+0x36>
 800e77c:	690b      	ldr	r3, [r1, #16]
 800e77e:	b973      	cbnz	r3, 800e79e <_svfiprintf_r+0x36>
 800e780:	2140      	movs	r1, #64	@ 0x40
 800e782:	f7fe fc27 	bl	800cfd4 <_malloc_r>
 800e786:	6028      	str	r0, [r5, #0]
 800e788:	6128      	str	r0, [r5, #16]
 800e78a:	b930      	cbnz	r0, 800e79a <_svfiprintf_r+0x32>
 800e78c:	230c      	movs	r3, #12
 800e78e:	603b      	str	r3, [r7, #0]
 800e790:	f04f 30ff 	mov.w	r0, #4294967295
 800e794:	b01d      	add	sp, #116	@ 0x74
 800e796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e79a:	2340      	movs	r3, #64	@ 0x40
 800e79c:	616b      	str	r3, [r5, #20]
 800e79e:	2300      	movs	r3, #0
 800e7a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7a2:	2320      	movs	r3, #32
 800e7a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7ac:	2330      	movs	r3, #48	@ 0x30
 800e7ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e94c <_svfiprintf_r+0x1e4>
 800e7b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e7b6:	f04f 0901 	mov.w	r9, #1
 800e7ba:	4623      	mov	r3, r4
 800e7bc:	469a      	mov	sl, r3
 800e7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7c2:	b10a      	cbz	r2, 800e7c8 <_svfiprintf_r+0x60>
 800e7c4:	2a25      	cmp	r2, #37	@ 0x25
 800e7c6:	d1f9      	bne.n	800e7bc <_svfiprintf_r+0x54>
 800e7c8:	ebba 0b04 	subs.w	fp, sl, r4
 800e7cc:	d00b      	beq.n	800e7e6 <_svfiprintf_r+0x7e>
 800e7ce:	465b      	mov	r3, fp
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	4638      	mov	r0, r7
 800e7d6:	f7ff ff6b 	bl	800e6b0 <__ssputs_r>
 800e7da:	3001      	adds	r0, #1
 800e7dc:	f000 80a7 	beq.w	800e92e <_svfiprintf_r+0x1c6>
 800e7e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7e2:	445a      	add	r2, fp
 800e7e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e7e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f000 809f 	beq.w	800e92e <_svfiprintf_r+0x1c6>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7fa:	f10a 0a01 	add.w	sl, sl, #1
 800e7fe:	9304      	str	r3, [sp, #16]
 800e800:	9307      	str	r3, [sp, #28]
 800e802:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e806:	931a      	str	r3, [sp, #104]	@ 0x68
 800e808:	4654      	mov	r4, sl
 800e80a:	2205      	movs	r2, #5
 800e80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e810:	484e      	ldr	r0, [pc, #312]	@ (800e94c <_svfiprintf_r+0x1e4>)
 800e812:	f7f1 fd7d 	bl	8000310 <memchr>
 800e816:	9a04      	ldr	r2, [sp, #16]
 800e818:	b9d8      	cbnz	r0, 800e852 <_svfiprintf_r+0xea>
 800e81a:	06d0      	lsls	r0, r2, #27
 800e81c:	bf44      	itt	mi
 800e81e:	2320      	movmi	r3, #32
 800e820:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e824:	0711      	lsls	r1, r2, #28
 800e826:	bf44      	itt	mi
 800e828:	232b      	movmi	r3, #43	@ 0x2b
 800e82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e82e:	f89a 3000 	ldrb.w	r3, [sl]
 800e832:	2b2a      	cmp	r3, #42	@ 0x2a
 800e834:	d015      	beq.n	800e862 <_svfiprintf_r+0xfa>
 800e836:	9a07      	ldr	r2, [sp, #28]
 800e838:	4654      	mov	r4, sl
 800e83a:	2000      	movs	r0, #0
 800e83c:	f04f 0c0a 	mov.w	ip, #10
 800e840:	4621      	mov	r1, r4
 800e842:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e846:	3b30      	subs	r3, #48	@ 0x30
 800e848:	2b09      	cmp	r3, #9
 800e84a:	d94b      	bls.n	800e8e4 <_svfiprintf_r+0x17c>
 800e84c:	b1b0      	cbz	r0, 800e87c <_svfiprintf_r+0x114>
 800e84e:	9207      	str	r2, [sp, #28]
 800e850:	e014      	b.n	800e87c <_svfiprintf_r+0x114>
 800e852:	eba0 0308 	sub.w	r3, r0, r8
 800e856:	fa09 f303 	lsl.w	r3, r9, r3
 800e85a:	4313      	orrs	r3, r2
 800e85c:	9304      	str	r3, [sp, #16]
 800e85e:	46a2      	mov	sl, r4
 800e860:	e7d2      	b.n	800e808 <_svfiprintf_r+0xa0>
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	1d19      	adds	r1, r3, #4
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	9103      	str	r1, [sp, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	bfbb      	ittet	lt
 800e86e:	425b      	neglt	r3, r3
 800e870:	f042 0202 	orrlt.w	r2, r2, #2
 800e874:	9307      	strge	r3, [sp, #28]
 800e876:	9307      	strlt	r3, [sp, #28]
 800e878:	bfb8      	it	lt
 800e87a:	9204      	strlt	r2, [sp, #16]
 800e87c:	7823      	ldrb	r3, [r4, #0]
 800e87e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e880:	d10a      	bne.n	800e898 <_svfiprintf_r+0x130>
 800e882:	7863      	ldrb	r3, [r4, #1]
 800e884:	2b2a      	cmp	r3, #42	@ 0x2a
 800e886:	d132      	bne.n	800e8ee <_svfiprintf_r+0x186>
 800e888:	9b03      	ldr	r3, [sp, #12]
 800e88a:	1d1a      	adds	r2, r3, #4
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	9203      	str	r2, [sp, #12]
 800e890:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e894:	3402      	adds	r4, #2
 800e896:	9305      	str	r3, [sp, #20]
 800e898:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e95c <_svfiprintf_r+0x1f4>
 800e89c:	7821      	ldrb	r1, [r4, #0]
 800e89e:	2203      	movs	r2, #3
 800e8a0:	4650      	mov	r0, sl
 800e8a2:	f7f1 fd35 	bl	8000310 <memchr>
 800e8a6:	b138      	cbz	r0, 800e8b8 <_svfiprintf_r+0x150>
 800e8a8:	9b04      	ldr	r3, [sp, #16]
 800e8aa:	eba0 000a 	sub.w	r0, r0, sl
 800e8ae:	2240      	movs	r2, #64	@ 0x40
 800e8b0:	4082      	lsls	r2, r0
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	3401      	adds	r4, #1
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8bc:	4824      	ldr	r0, [pc, #144]	@ (800e950 <_svfiprintf_r+0x1e8>)
 800e8be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e8c2:	2206      	movs	r2, #6
 800e8c4:	f7f1 fd24 	bl	8000310 <memchr>
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d036      	beq.n	800e93a <_svfiprintf_r+0x1d2>
 800e8cc:	4b21      	ldr	r3, [pc, #132]	@ (800e954 <_svfiprintf_r+0x1ec>)
 800e8ce:	bb1b      	cbnz	r3, 800e918 <_svfiprintf_r+0x1b0>
 800e8d0:	9b03      	ldr	r3, [sp, #12]
 800e8d2:	3307      	adds	r3, #7
 800e8d4:	f023 0307 	bic.w	r3, r3, #7
 800e8d8:	3308      	adds	r3, #8
 800e8da:	9303      	str	r3, [sp, #12]
 800e8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8de:	4433      	add	r3, r6
 800e8e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8e2:	e76a      	b.n	800e7ba <_svfiprintf_r+0x52>
 800e8e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8e8:	460c      	mov	r4, r1
 800e8ea:	2001      	movs	r0, #1
 800e8ec:	e7a8      	b.n	800e840 <_svfiprintf_r+0xd8>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	3401      	adds	r4, #1
 800e8f2:	9305      	str	r3, [sp, #20]
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	f04f 0c0a 	mov.w	ip, #10
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e900:	3a30      	subs	r2, #48	@ 0x30
 800e902:	2a09      	cmp	r2, #9
 800e904:	d903      	bls.n	800e90e <_svfiprintf_r+0x1a6>
 800e906:	2b00      	cmp	r3, #0
 800e908:	d0c6      	beq.n	800e898 <_svfiprintf_r+0x130>
 800e90a:	9105      	str	r1, [sp, #20]
 800e90c:	e7c4      	b.n	800e898 <_svfiprintf_r+0x130>
 800e90e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e912:	4604      	mov	r4, r0
 800e914:	2301      	movs	r3, #1
 800e916:	e7f0      	b.n	800e8fa <_svfiprintf_r+0x192>
 800e918:	ab03      	add	r3, sp, #12
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	462a      	mov	r2, r5
 800e91e:	4b0e      	ldr	r3, [pc, #56]	@ (800e958 <_svfiprintf_r+0x1f0>)
 800e920:	a904      	add	r1, sp, #16
 800e922:	4638      	mov	r0, r7
 800e924:	f7fc fd00 	bl	800b328 <_printf_float>
 800e928:	1c42      	adds	r2, r0, #1
 800e92a:	4606      	mov	r6, r0
 800e92c:	d1d6      	bne.n	800e8dc <_svfiprintf_r+0x174>
 800e92e:	89ab      	ldrh	r3, [r5, #12]
 800e930:	065b      	lsls	r3, r3, #25
 800e932:	f53f af2d 	bmi.w	800e790 <_svfiprintf_r+0x28>
 800e936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e938:	e72c      	b.n	800e794 <_svfiprintf_r+0x2c>
 800e93a:	ab03      	add	r3, sp, #12
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	462a      	mov	r2, r5
 800e940:	4b05      	ldr	r3, [pc, #20]	@ (800e958 <_svfiprintf_r+0x1f0>)
 800e942:	a904      	add	r1, sp, #16
 800e944:	4638      	mov	r0, r7
 800e946:	f7fc ff77 	bl	800b838 <_printf_i>
 800e94a:	e7ed      	b.n	800e928 <_svfiprintf_r+0x1c0>
 800e94c:	0800fb79 	.word	0x0800fb79
 800e950:	0800fb83 	.word	0x0800fb83
 800e954:	0800b329 	.word	0x0800b329
 800e958:	0800e6b1 	.word	0x0800e6b1
 800e95c:	0800fb7f 	.word	0x0800fb7f

0800e960 <__sfputc_r>:
 800e960:	6893      	ldr	r3, [r2, #8]
 800e962:	3b01      	subs	r3, #1
 800e964:	2b00      	cmp	r3, #0
 800e966:	b410      	push	{r4}
 800e968:	6093      	str	r3, [r2, #8]
 800e96a:	da08      	bge.n	800e97e <__sfputc_r+0x1e>
 800e96c:	6994      	ldr	r4, [r2, #24]
 800e96e:	42a3      	cmp	r3, r4
 800e970:	db01      	blt.n	800e976 <__sfputc_r+0x16>
 800e972:	290a      	cmp	r1, #10
 800e974:	d103      	bne.n	800e97e <__sfputc_r+0x1e>
 800e976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e97a:	f7fd bbae 	b.w	800c0da <__swbuf_r>
 800e97e:	6813      	ldr	r3, [r2, #0]
 800e980:	1c58      	adds	r0, r3, #1
 800e982:	6010      	str	r0, [r2, #0]
 800e984:	7019      	strb	r1, [r3, #0]
 800e986:	4608      	mov	r0, r1
 800e988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e98c:	4770      	bx	lr

0800e98e <__sfputs_r>:
 800e98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e990:	4606      	mov	r6, r0
 800e992:	460f      	mov	r7, r1
 800e994:	4614      	mov	r4, r2
 800e996:	18d5      	adds	r5, r2, r3
 800e998:	42ac      	cmp	r4, r5
 800e99a:	d101      	bne.n	800e9a0 <__sfputs_r+0x12>
 800e99c:	2000      	movs	r0, #0
 800e99e:	e007      	b.n	800e9b0 <__sfputs_r+0x22>
 800e9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a4:	463a      	mov	r2, r7
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	f7ff ffda 	bl	800e960 <__sfputc_r>
 800e9ac:	1c43      	adds	r3, r0, #1
 800e9ae:	d1f3      	bne.n	800e998 <__sfputs_r+0xa>
 800e9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9b4 <_vfiprintf_r>:
 800e9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b8:	460d      	mov	r5, r1
 800e9ba:	b09d      	sub	sp, #116	@ 0x74
 800e9bc:	4614      	mov	r4, r2
 800e9be:	4698      	mov	r8, r3
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	b118      	cbz	r0, 800e9cc <_vfiprintf_r+0x18>
 800e9c4:	6a03      	ldr	r3, [r0, #32]
 800e9c6:	b90b      	cbnz	r3, 800e9cc <_vfiprintf_r+0x18>
 800e9c8:	f7fd faee 	bl	800bfa8 <__sinit>
 800e9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9ce:	07d9      	lsls	r1, r3, #31
 800e9d0:	d405      	bmi.n	800e9de <_vfiprintf_r+0x2a>
 800e9d2:	89ab      	ldrh	r3, [r5, #12]
 800e9d4:	059a      	lsls	r2, r3, #22
 800e9d6:	d402      	bmi.n	800e9de <_vfiprintf_r+0x2a>
 800e9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9da:	f7fd fc90 	bl	800c2fe <__retarget_lock_acquire_recursive>
 800e9de:	89ab      	ldrh	r3, [r5, #12]
 800e9e0:	071b      	lsls	r3, r3, #28
 800e9e2:	d501      	bpl.n	800e9e8 <_vfiprintf_r+0x34>
 800e9e4:	692b      	ldr	r3, [r5, #16]
 800e9e6:	b99b      	cbnz	r3, 800ea10 <_vfiprintf_r+0x5c>
 800e9e8:	4629      	mov	r1, r5
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f7fd fbb4 	bl	800c158 <__swsetup_r>
 800e9f0:	b170      	cbz	r0, 800ea10 <_vfiprintf_r+0x5c>
 800e9f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9f4:	07dc      	lsls	r4, r3, #31
 800e9f6:	d504      	bpl.n	800ea02 <_vfiprintf_r+0x4e>
 800e9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9fc:	b01d      	add	sp, #116	@ 0x74
 800e9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea02:	89ab      	ldrh	r3, [r5, #12]
 800ea04:	0598      	lsls	r0, r3, #22
 800ea06:	d4f7      	bmi.n	800e9f8 <_vfiprintf_r+0x44>
 800ea08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea0a:	f7fd fc79 	bl	800c300 <__retarget_lock_release_recursive>
 800ea0e:	e7f3      	b.n	800e9f8 <_vfiprintf_r+0x44>
 800ea10:	2300      	movs	r3, #0
 800ea12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea14:	2320      	movs	r3, #32
 800ea16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea1e:	2330      	movs	r3, #48	@ 0x30
 800ea20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ebd0 <_vfiprintf_r+0x21c>
 800ea24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea28:	f04f 0901 	mov.w	r9, #1
 800ea2c:	4623      	mov	r3, r4
 800ea2e:	469a      	mov	sl, r3
 800ea30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea34:	b10a      	cbz	r2, 800ea3a <_vfiprintf_r+0x86>
 800ea36:	2a25      	cmp	r2, #37	@ 0x25
 800ea38:	d1f9      	bne.n	800ea2e <_vfiprintf_r+0x7a>
 800ea3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ea3e:	d00b      	beq.n	800ea58 <_vfiprintf_r+0xa4>
 800ea40:	465b      	mov	r3, fp
 800ea42:	4622      	mov	r2, r4
 800ea44:	4629      	mov	r1, r5
 800ea46:	4630      	mov	r0, r6
 800ea48:	f7ff ffa1 	bl	800e98e <__sfputs_r>
 800ea4c:	3001      	adds	r0, #1
 800ea4e:	f000 80a7 	beq.w	800eba0 <_vfiprintf_r+0x1ec>
 800ea52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea54:	445a      	add	r2, fp
 800ea56:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea58:	f89a 3000 	ldrb.w	r3, [sl]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f000 809f 	beq.w	800eba0 <_vfiprintf_r+0x1ec>
 800ea62:	2300      	movs	r3, #0
 800ea64:	f04f 32ff 	mov.w	r2, #4294967295
 800ea68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea6c:	f10a 0a01 	add.w	sl, sl, #1
 800ea70:	9304      	str	r3, [sp, #16]
 800ea72:	9307      	str	r3, [sp, #28]
 800ea74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea78:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea7a:	4654      	mov	r4, sl
 800ea7c:	2205      	movs	r2, #5
 800ea7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea82:	4853      	ldr	r0, [pc, #332]	@ (800ebd0 <_vfiprintf_r+0x21c>)
 800ea84:	f7f1 fc44 	bl	8000310 <memchr>
 800ea88:	9a04      	ldr	r2, [sp, #16]
 800ea8a:	b9d8      	cbnz	r0, 800eac4 <_vfiprintf_r+0x110>
 800ea8c:	06d1      	lsls	r1, r2, #27
 800ea8e:	bf44      	itt	mi
 800ea90:	2320      	movmi	r3, #32
 800ea92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea96:	0713      	lsls	r3, r2, #28
 800ea98:	bf44      	itt	mi
 800ea9a:	232b      	movmi	r3, #43	@ 0x2b
 800ea9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eaa0:	f89a 3000 	ldrb.w	r3, [sl]
 800eaa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800eaa6:	d015      	beq.n	800ead4 <_vfiprintf_r+0x120>
 800eaa8:	9a07      	ldr	r2, [sp, #28]
 800eaaa:	4654      	mov	r4, sl
 800eaac:	2000      	movs	r0, #0
 800eaae:	f04f 0c0a 	mov.w	ip, #10
 800eab2:	4621      	mov	r1, r4
 800eab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eab8:	3b30      	subs	r3, #48	@ 0x30
 800eaba:	2b09      	cmp	r3, #9
 800eabc:	d94b      	bls.n	800eb56 <_vfiprintf_r+0x1a2>
 800eabe:	b1b0      	cbz	r0, 800eaee <_vfiprintf_r+0x13a>
 800eac0:	9207      	str	r2, [sp, #28]
 800eac2:	e014      	b.n	800eaee <_vfiprintf_r+0x13a>
 800eac4:	eba0 0308 	sub.w	r3, r0, r8
 800eac8:	fa09 f303 	lsl.w	r3, r9, r3
 800eacc:	4313      	orrs	r3, r2
 800eace:	9304      	str	r3, [sp, #16]
 800ead0:	46a2      	mov	sl, r4
 800ead2:	e7d2      	b.n	800ea7a <_vfiprintf_r+0xc6>
 800ead4:	9b03      	ldr	r3, [sp, #12]
 800ead6:	1d19      	adds	r1, r3, #4
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	9103      	str	r1, [sp, #12]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	bfbb      	ittet	lt
 800eae0:	425b      	neglt	r3, r3
 800eae2:	f042 0202 	orrlt.w	r2, r2, #2
 800eae6:	9307      	strge	r3, [sp, #28]
 800eae8:	9307      	strlt	r3, [sp, #28]
 800eaea:	bfb8      	it	lt
 800eaec:	9204      	strlt	r2, [sp, #16]
 800eaee:	7823      	ldrb	r3, [r4, #0]
 800eaf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800eaf2:	d10a      	bne.n	800eb0a <_vfiprintf_r+0x156>
 800eaf4:	7863      	ldrb	r3, [r4, #1]
 800eaf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eaf8:	d132      	bne.n	800eb60 <_vfiprintf_r+0x1ac>
 800eafa:	9b03      	ldr	r3, [sp, #12]
 800eafc:	1d1a      	adds	r2, r3, #4
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	9203      	str	r2, [sp, #12]
 800eb02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb06:	3402      	adds	r4, #2
 800eb08:	9305      	str	r3, [sp, #20]
 800eb0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ebe0 <_vfiprintf_r+0x22c>
 800eb0e:	7821      	ldrb	r1, [r4, #0]
 800eb10:	2203      	movs	r2, #3
 800eb12:	4650      	mov	r0, sl
 800eb14:	f7f1 fbfc 	bl	8000310 <memchr>
 800eb18:	b138      	cbz	r0, 800eb2a <_vfiprintf_r+0x176>
 800eb1a:	9b04      	ldr	r3, [sp, #16]
 800eb1c:	eba0 000a 	sub.w	r0, r0, sl
 800eb20:	2240      	movs	r2, #64	@ 0x40
 800eb22:	4082      	lsls	r2, r0
 800eb24:	4313      	orrs	r3, r2
 800eb26:	3401      	adds	r4, #1
 800eb28:	9304      	str	r3, [sp, #16]
 800eb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb2e:	4829      	ldr	r0, [pc, #164]	@ (800ebd4 <_vfiprintf_r+0x220>)
 800eb30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb34:	2206      	movs	r2, #6
 800eb36:	f7f1 fbeb 	bl	8000310 <memchr>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d03f      	beq.n	800ebbe <_vfiprintf_r+0x20a>
 800eb3e:	4b26      	ldr	r3, [pc, #152]	@ (800ebd8 <_vfiprintf_r+0x224>)
 800eb40:	bb1b      	cbnz	r3, 800eb8a <_vfiprintf_r+0x1d6>
 800eb42:	9b03      	ldr	r3, [sp, #12]
 800eb44:	3307      	adds	r3, #7
 800eb46:	f023 0307 	bic.w	r3, r3, #7
 800eb4a:	3308      	adds	r3, #8
 800eb4c:	9303      	str	r3, [sp, #12]
 800eb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb50:	443b      	add	r3, r7
 800eb52:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb54:	e76a      	b.n	800ea2c <_vfiprintf_r+0x78>
 800eb56:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	e7a8      	b.n	800eab2 <_vfiprintf_r+0xfe>
 800eb60:	2300      	movs	r3, #0
 800eb62:	3401      	adds	r4, #1
 800eb64:	9305      	str	r3, [sp, #20]
 800eb66:	4619      	mov	r1, r3
 800eb68:	f04f 0c0a 	mov.w	ip, #10
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb72:	3a30      	subs	r2, #48	@ 0x30
 800eb74:	2a09      	cmp	r2, #9
 800eb76:	d903      	bls.n	800eb80 <_vfiprintf_r+0x1cc>
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d0c6      	beq.n	800eb0a <_vfiprintf_r+0x156>
 800eb7c:	9105      	str	r1, [sp, #20]
 800eb7e:	e7c4      	b.n	800eb0a <_vfiprintf_r+0x156>
 800eb80:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb84:	4604      	mov	r4, r0
 800eb86:	2301      	movs	r3, #1
 800eb88:	e7f0      	b.n	800eb6c <_vfiprintf_r+0x1b8>
 800eb8a:	ab03      	add	r3, sp, #12
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	462a      	mov	r2, r5
 800eb90:	4b12      	ldr	r3, [pc, #72]	@ (800ebdc <_vfiprintf_r+0x228>)
 800eb92:	a904      	add	r1, sp, #16
 800eb94:	4630      	mov	r0, r6
 800eb96:	f7fc fbc7 	bl	800b328 <_printf_float>
 800eb9a:	4607      	mov	r7, r0
 800eb9c:	1c78      	adds	r0, r7, #1
 800eb9e:	d1d6      	bne.n	800eb4e <_vfiprintf_r+0x19a>
 800eba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eba2:	07d9      	lsls	r1, r3, #31
 800eba4:	d405      	bmi.n	800ebb2 <_vfiprintf_r+0x1fe>
 800eba6:	89ab      	ldrh	r3, [r5, #12]
 800eba8:	059a      	lsls	r2, r3, #22
 800ebaa:	d402      	bmi.n	800ebb2 <_vfiprintf_r+0x1fe>
 800ebac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebae:	f7fd fba7 	bl	800c300 <__retarget_lock_release_recursive>
 800ebb2:	89ab      	ldrh	r3, [r5, #12]
 800ebb4:	065b      	lsls	r3, r3, #25
 800ebb6:	f53f af1f 	bmi.w	800e9f8 <_vfiprintf_r+0x44>
 800ebba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebbc:	e71e      	b.n	800e9fc <_vfiprintf_r+0x48>
 800ebbe:	ab03      	add	r3, sp, #12
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	462a      	mov	r2, r5
 800ebc4:	4b05      	ldr	r3, [pc, #20]	@ (800ebdc <_vfiprintf_r+0x228>)
 800ebc6:	a904      	add	r1, sp, #16
 800ebc8:	4630      	mov	r0, r6
 800ebca:	f7fc fe35 	bl	800b838 <_printf_i>
 800ebce:	e7e4      	b.n	800eb9a <_vfiprintf_r+0x1e6>
 800ebd0:	0800fb79 	.word	0x0800fb79
 800ebd4:	0800fb83 	.word	0x0800fb83
 800ebd8:	0800b329 	.word	0x0800b329
 800ebdc:	0800e98f 	.word	0x0800e98f
 800ebe0:	0800fb7f 	.word	0x0800fb7f

0800ebe4 <__sflush_r>:
 800ebe4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebec:	0716      	lsls	r6, r2, #28
 800ebee:	4605      	mov	r5, r0
 800ebf0:	460c      	mov	r4, r1
 800ebf2:	d454      	bmi.n	800ec9e <__sflush_r+0xba>
 800ebf4:	684b      	ldr	r3, [r1, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	dc02      	bgt.n	800ec00 <__sflush_r+0x1c>
 800ebfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	dd48      	ble.n	800ec92 <__sflush_r+0xae>
 800ec00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec02:	2e00      	cmp	r6, #0
 800ec04:	d045      	beq.n	800ec92 <__sflush_r+0xae>
 800ec06:	2300      	movs	r3, #0
 800ec08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec0c:	682f      	ldr	r7, [r5, #0]
 800ec0e:	6a21      	ldr	r1, [r4, #32]
 800ec10:	602b      	str	r3, [r5, #0]
 800ec12:	d030      	beq.n	800ec76 <__sflush_r+0x92>
 800ec14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec16:	89a3      	ldrh	r3, [r4, #12]
 800ec18:	0759      	lsls	r1, r3, #29
 800ec1a:	d505      	bpl.n	800ec28 <__sflush_r+0x44>
 800ec1c:	6863      	ldr	r3, [r4, #4]
 800ec1e:	1ad2      	subs	r2, r2, r3
 800ec20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec22:	b10b      	cbz	r3, 800ec28 <__sflush_r+0x44>
 800ec24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec26:	1ad2      	subs	r2, r2, r3
 800ec28:	2300      	movs	r3, #0
 800ec2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec2c:	6a21      	ldr	r1, [r4, #32]
 800ec2e:	4628      	mov	r0, r5
 800ec30:	47b0      	blx	r6
 800ec32:	1c43      	adds	r3, r0, #1
 800ec34:	89a3      	ldrh	r3, [r4, #12]
 800ec36:	d106      	bne.n	800ec46 <__sflush_r+0x62>
 800ec38:	6829      	ldr	r1, [r5, #0]
 800ec3a:	291d      	cmp	r1, #29
 800ec3c:	d82b      	bhi.n	800ec96 <__sflush_r+0xb2>
 800ec3e:	4a2a      	ldr	r2, [pc, #168]	@ (800ece8 <__sflush_r+0x104>)
 800ec40:	410a      	asrs	r2, r1
 800ec42:	07d6      	lsls	r6, r2, #31
 800ec44:	d427      	bmi.n	800ec96 <__sflush_r+0xb2>
 800ec46:	2200      	movs	r2, #0
 800ec48:	6062      	str	r2, [r4, #4]
 800ec4a:	04d9      	lsls	r1, r3, #19
 800ec4c:	6922      	ldr	r2, [r4, #16]
 800ec4e:	6022      	str	r2, [r4, #0]
 800ec50:	d504      	bpl.n	800ec5c <__sflush_r+0x78>
 800ec52:	1c42      	adds	r2, r0, #1
 800ec54:	d101      	bne.n	800ec5a <__sflush_r+0x76>
 800ec56:	682b      	ldr	r3, [r5, #0]
 800ec58:	b903      	cbnz	r3, 800ec5c <__sflush_r+0x78>
 800ec5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec5e:	602f      	str	r7, [r5, #0]
 800ec60:	b1b9      	cbz	r1, 800ec92 <__sflush_r+0xae>
 800ec62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec66:	4299      	cmp	r1, r3
 800ec68:	d002      	beq.n	800ec70 <__sflush_r+0x8c>
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	f7fe f93e 	bl	800ceec <_free_r>
 800ec70:	2300      	movs	r3, #0
 800ec72:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec74:	e00d      	b.n	800ec92 <__sflush_r+0xae>
 800ec76:	2301      	movs	r3, #1
 800ec78:	4628      	mov	r0, r5
 800ec7a:	47b0      	blx	r6
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	1c50      	adds	r0, r2, #1
 800ec80:	d1c9      	bne.n	800ec16 <__sflush_r+0x32>
 800ec82:	682b      	ldr	r3, [r5, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d0c6      	beq.n	800ec16 <__sflush_r+0x32>
 800ec88:	2b1d      	cmp	r3, #29
 800ec8a:	d001      	beq.n	800ec90 <__sflush_r+0xac>
 800ec8c:	2b16      	cmp	r3, #22
 800ec8e:	d11e      	bne.n	800ecce <__sflush_r+0xea>
 800ec90:	602f      	str	r7, [r5, #0]
 800ec92:	2000      	movs	r0, #0
 800ec94:	e022      	b.n	800ecdc <__sflush_r+0xf8>
 800ec96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec9a:	b21b      	sxth	r3, r3
 800ec9c:	e01b      	b.n	800ecd6 <__sflush_r+0xf2>
 800ec9e:	690f      	ldr	r7, [r1, #16]
 800eca0:	2f00      	cmp	r7, #0
 800eca2:	d0f6      	beq.n	800ec92 <__sflush_r+0xae>
 800eca4:	0793      	lsls	r3, r2, #30
 800eca6:	680e      	ldr	r6, [r1, #0]
 800eca8:	bf08      	it	eq
 800ecaa:	694b      	ldreq	r3, [r1, #20]
 800ecac:	600f      	str	r7, [r1, #0]
 800ecae:	bf18      	it	ne
 800ecb0:	2300      	movne	r3, #0
 800ecb2:	eba6 0807 	sub.w	r8, r6, r7
 800ecb6:	608b      	str	r3, [r1, #8]
 800ecb8:	f1b8 0f00 	cmp.w	r8, #0
 800ecbc:	dde9      	ble.n	800ec92 <__sflush_r+0xae>
 800ecbe:	6a21      	ldr	r1, [r4, #32]
 800ecc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ecc2:	4643      	mov	r3, r8
 800ecc4:	463a      	mov	r2, r7
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	47b0      	blx	r6
 800ecca:	2800      	cmp	r0, #0
 800eccc:	dc08      	bgt.n	800ece0 <__sflush_r+0xfc>
 800ecce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecd6:	81a3      	strh	r3, [r4, #12]
 800ecd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece0:	4407      	add	r7, r0
 800ece2:	eba8 0800 	sub.w	r8, r8, r0
 800ece6:	e7e7      	b.n	800ecb8 <__sflush_r+0xd4>
 800ece8:	dfbffffe 	.word	0xdfbffffe

0800ecec <_fflush_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	690b      	ldr	r3, [r1, #16]
 800ecf0:	4605      	mov	r5, r0
 800ecf2:	460c      	mov	r4, r1
 800ecf4:	b913      	cbnz	r3, 800ecfc <_fflush_r+0x10>
 800ecf6:	2500      	movs	r5, #0
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	bd38      	pop	{r3, r4, r5, pc}
 800ecfc:	b118      	cbz	r0, 800ed06 <_fflush_r+0x1a>
 800ecfe:	6a03      	ldr	r3, [r0, #32]
 800ed00:	b90b      	cbnz	r3, 800ed06 <_fflush_r+0x1a>
 800ed02:	f7fd f951 	bl	800bfa8 <__sinit>
 800ed06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d0f3      	beq.n	800ecf6 <_fflush_r+0xa>
 800ed0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed10:	07d0      	lsls	r0, r2, #31
 800ed12:	d404      	bmi.n	800ed1e <_fflush_r+0x32>
 800ed14:	0599      	lsls	r1, r3, #22
 800ed16:	d402      	bmi.n	800ed1e <_fflush_r+0x32>
 800ed18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed1a:	f7fd faf0 	bl	800c2fe <__retarget_lock_acquire_recursive>
 800ed1e:	4628      	mov	r0, r5
 800ed20:	4621      	mov	r1, r4
 800ed22:	f7ff ff5f 	bl	800ebe4 <__sflush_r>
 800ed26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed28:	07da      	lsls	r2, r3, #31
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	d4e4      	bmi.n	800ecf8 <_fflush_r+0xc>
 800ed2e:	89a3      	ldrh	r3, [r4, #12]
 800ed30:	059b      	lsls	r3, r3, #22
 800ed32:	d4e1      	bmi.n	800ecf8 <_fflush_r+0xc>
 800ed34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed36:	f7fd fae3 	bl	800c300 <__retarget_lock_release_recursive>
 800ed3a:	e7dd      	b.n	800ecf8 <_fflush_r+0xc>

0800ed3c <__swhatbuf_r>:
 800ed3c:	b570      	push	{r4, r5, r6, lr}
 800ed3e:	460c      	mov	r4, r1
 800ed40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed44:	2900      	cmp	r1, #0
 800ed46:	b096      	sub	sp, #88	@ 0x58
 800ed48:	4615      	mov	r5, r2
 800ed4a:	461e      	mov	r6, r3
 800ed4c:	da0d      	bge.n	800ed6a <__swhatbuf_r+0x2e>
 800ed4e:	89a3      	ldrh	r3, [r4, #12]
 800ed50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed54:	f04f 0100 	mov.w	r1, #0
 800ed58:	bf14      	ite	ne
 800ed5a:	2340      	movne	r3, #64	@ 0x40
 800ed5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed60:	2000      	movs	r0, #0
 800ed62:	6031      	str	r1, [r6, #0]
 800ed64:	602b      	str	r3, [r5, #0]
 800ed66:	b016      	add	sp, #88	@ 0x58
 800ed68:	bd70      	pop	{r4, r5, r6, pc}
 800ed6a:	466a      	mov	r2, sp
 800ed6c:	f000 f874 	bl	800ee58 <_fstat_r>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	dbec      	blt.n	800ed4e <__swhatbuf_r+0x12>
 800ed74:	9901      	ldr	r1, [sp, #4]
 800ed76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed7e:	4259      	negs	r1, r3
 800ed80:	4159      	adcs	r1, r3
 800ed82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed86:	e7eb      	b.n	800ed60 <__swhatbuf_r+0x24>

0800ed88 <__smakebuf_r>:
 800ed88:	898b      	ldrh	r3, [r1, #12]
 800ed8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed8c:	079d      	lsls	r5, r3, #30
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460c      	mov	r4, r1
 800ed92:	d507      	bpl.n	800eda4 <__smakebuf_r+0x1c>
 800ed94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed98:	6023      	str	r3, [r4, #0]
 800ed9a:	6123      	str	r3, [r4, #16]
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	6163      	str	r3, [r4, #20]
 800eda0:	b003      	add	sp, #12
 800eda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eda4:	ab01      	add	r3, sp, #4
 800eda6:	466a      	mov	r2, sp
 800eda8:	f7ff ffc8 	bl	800ed3c <__swhatbuf_r>
 800edac:	9f00      	ldr	r7, [sp, #0]
 800edae:	4605      	mov	r5, r0
 800edb0:	4639      	mov	r1, r7
 800edb2:	4630      	mov	r0, r6
 800edb4:	f7fe f90e 	bl	800cfd4 <_malloc_r>
 800edb8:	b948      	cbnz	r0, 800edce <__smakebuf_r+0x46>
 800edba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edbe:	059a      	lsls	r2, r3, #22
 800edc0:	d4ee      	bmi.n	800eda0 <__smakebuf_r+0x18>
 800edc2:	f023 0303 	bic.w	r3, r3, #3
 800edc6:	f043 0302 	orr.w	r3, r3, #2
 800edca:	81a3      	strh	r3, [r4, #12]
 800edcc:	e7e2      	b.n	800ed94 <__smakebuf_r+0xc>
 800edce:	89a3      	ldrh	r3, [r4, #12]
 800edd0:	6020      	str	r0, [r4, #0]
 800edd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edd6:	81a3      	strh	r3, [r4, #12]
 800edd8:	9b01      	ldr	r3, [sp, #4]
 800edda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edde:	b15b      	cbz	r3, 800edf8 <__smakebuf_r+0x70>
 800ede0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ede4:	4630      	mov	r0, r6
 800ede6:	f000 f849 	bl	800ee7c <_isatty_r>
 800edea:	b128      	cbz	r0, 800edf8 <__smakebuf_r+0x70>
 800edec:	89a3      	ldrh	r3, [r4, #12]
 800edee:	f023 0303 	bic.w	r3, r3, #3
 800edf2:	f043 0301 	orr.w	r3, r3, #1
 800edf6:	81a3      	strh	r3, [r4, #12]
 800edf8:	89a3      	ldrh	r3, [r4, #12]
 800edfa:	431d      	orrs	r5, r3
 800edfc:	81a5      	strh	r5, [r4, #12]
 800edfe:	e7cf      	b.n	800eda0 <__smakebuf_r+0x18>

0800ee00 <memmove>:
 800ee00:	4288      	cmp	r0, r1
 800ee02:	b510      	push	{r4, lr}
 800ee04:	eb01 0402 	add.w	r4, r1, r2
 800ee08:	d902      	bls.n	800ee10 <memmove+0x10>
 800ee0a:	4284      	cmp	r4, r0
 800ee0c:	4623      	mov	r3, r4
 800ee0e:	d807      	bhi.n	800ee20 <memmove+0x20>
 800ee10:	1e43      	subs	r3, r0, #1
 800ee12:	42a1      	cmp	r1, r4
 800ee14:	d008      	beq.n	800ee28 <memmove+0x28>
 800ee16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee1e:	e7f8      	b.n	800ee12 <memmove+0x12>
 800ee20:	4402      	add	r2, r0
 800ee22:	4601      	mov	r1, r0
 800ee24:	428a      	cmp	r2, r1
 800ee26:	d100      	bne.n	800ee2a <memmove+0x2a>
 800ee28:	bd10      	pop	{r4, pc}
 800ee2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee32:	e7f7      	b.n	800ee24 <memmove+0x24>

0800ee34 <strncmp>:
 800ee34:	b510      	push	{r4, lr}
 800ee36:	b16a      	cbz	r2, 800ee54 <strncmp+0x20>
 800ee38:	3901      	subs	r1, #1
 800ee3a:	1884      	adds	r4, r0, r2
 800ee3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d103      	bne.n	800ee50 <strncmp+0x1c>
 800ee48:	42a0      	cmp	r0, r4
 800ee4a:	d001      	beq.n	800ee50 <strncmp+0x1c>
 800ee4c:	2a00      	cmp	r2, #0
 800ee4e:	d1f5      	bne.n	800ee3c <strncmp+0x8>
 800ee50:	1ad0      	subs	r0, r2, r3
 800ee52:	bd10      	pop	{r4, pc}
 800ee54:	4610      	mov	r0, r2
 800ee56:	e7fc      	b.n	800ee52 <strncmp+0x1e>

0800ee58 <_fstat_r>:
 800ee58:	b538      	push	{r3, r4, r5, lr}
 800ee5a:	4d07      	ldr	r5, [pc, #28]	@ (800ee78 <_fstat_r+0x20>)
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	4604      	mov	r4, r0
 800ee60:	4608      	mov	r0, r1
 800ee62:	4611      	mov	r1, r2
 800ee64:	602b      	str	r3, [r5, #0]
 800ee66:	f7f2 ff3f 	bl	8001ce8 <_fstat>
 800ee6a:	1c43      	adds	r3, r0, #1
 800ee6c:	d102      	bne.n	800ee74 <_fstat_r+0x1c>
 800ee6e:	682b      	ldr	r3, [r5, #0]
 800ee70:	b103      	cbz	r3, 800ee74 <_fstat_r+0x1c>
 800ee72:	6023      	str	r3, [r4, #0]
 800ee74:	bd38      	pop	{r3, r4, r5, pc}
 800ee76:	bf00      	nop
 800ee78:	24000788 	.word	0x24000788

0800ee7c <_isatty_r>:
 800ee7c:	b538      	push	{r3, r4, r5, lr}
 800ee7e:	4d06      	ldr	r5, [pc, #24]	@ (800ee98 <_isatty_r+0x1c>)
 800ee80:	2300      	movs	r3, #0
 800ee82:	4604      	mov	r4, r0
 800ee84:	4608      	mov	r0, r1
 800ee86:	602b      	str	r3, [r5, #0]
 800ee88:	f7f2 ff3e 	bl	8001d08 <_isatty>
 800ee8c:	1c43      	adds	r3, r0, #1
 800ee8e:	d102      	bne.n	800ee96 <_isatty_r+0x1a>
 800ee90:	682b      	ldr	r3, [r5, #0]
 800ee92:	b103      	cbz	r3, 800ee96 <_isatty_r+0x1a>
 800ee94:	6023      	str	r3, [r4, #0]
 800ee96:	bd38      	pop	{r3, r4, r5, pc}
 800ee98:	24000788 	.word	0x24000788

0800ee9c <_sbrk_r>:
 800ee9c:	b538      	push	{r3, r4, r5, lr}
 800ee9e:	4d06      	ldr	r5, [pc, #24]	@ (800eeb8 <_sbrk_r+0x1c>)
 800eea0:	2300      	movs	r3, #0
 800eea2:	4604      	mov	r4, r0
 800eea4:	4608      	mov	r0, r1
 800eea6:	602b      	str	r3, [r5, #0]
 800eea8:	f7f2 ff46 	bl	8001d38 <_sbrk>
 800eeac:	1c43      	adds	r3, r0, #1
 800eeae:	d102      	bne.n	800eeb6 <_sbrk_r+0x1a>
 800eeb0:	682b      	ldr	r3, [r5, #0]
 800eeb2:	b103      	cbz	r3, 800eeb6 <_sbrk_r+0x1a>
 800eeb4:	6023      	str	r3, [r4, #0]
 800eeb6:	bd38      	pop	{r3, r4, r5, pc}
 800eeb8:	24000788 	.word	0x24000788
 800eebc:	00000000 	.word	0x00000000

0800eec0 <nan>:
 800eec0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eec8 <nan+0x8>
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	00000000 	.word	0x00000000
 800eecc:	7ff80000 	.word	0x7ff80000

0800eed0 <__assert_func>:
 800eed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eed2:	4614      	mov	r4, r2
 800eed4:	461a      	mov	r2, r3
 800eed6:	4b09      	ldr	r3, [pc, #36]	@ (800eefc <__assert_func+0x2c>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4605      	mov	r5, r0
 800eedc:	68d8      	ldr	r0, [r3, #12]
 800eede:	b954      	cbnz	r4, 800eef6 <__assert_func+0x26>
 800eee0:	4b07      	ldr	r3, [pc, #28]	@ (800ef00 <__assert_func+0x30>)
 800eee2:	461c      	mov	r4, r3
 800eee4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eee8:	9100      	str	r1, [sp, #0]
 800eeea:	462b      	mov	r3, r5
 800eeec:	4905      	ldr	r1, [pc, #20]	@ (800ef04 <__assert_func+0x34>)
 800eeee:	f000 fba7 	bl	800f640 <fiprintf>
 800eef2:	f000 fbb7 	bl	800f664 <abort>
 800eef6:	4b04      	ldr	r3, [pc, #16]	@ (800ef08 <__assert_func+0x38>)
 800eef8:	e7f4      	b.n	800eee4 <__assert_func+0x14>
 800eefa:	bf00      	nop
 800eefc:	2400001c 	.word	0x2400001c
 800ef00:	0800fbcd 	.word	0x0800fbcd
 800ef04:	0800fb9f 	.word	0x0800fb9f
 800ef08:	0800fb92 	.word	0x0800fb92

0800ef0c <_calloc_r>:
 800ef0c:	b570      	push	{r4, r5, r6, lr}
 800ef0e:	fba1 5402 	umull	r5, r4, r1, r2
 800ef12:	b93c      	cbnz	r4, 800ef24 <_calloc_r+0x18>
 800ef14:	4629      	mov	r1, r5
 800ef16:	f7fe f85d 	bl	800cfd4 <_malloc_r>
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	b928      	cbnz	r0, 800ef2a <_calloc_r+0x1e>
 800ef1e:	2600      	movs	r6, #0
 800ef20:	4630      	mov	r0, r6
 800ef22:	bd70      	pop	{r4, r5, r6, pc}
 800ef24:	220c      	movs	r2, #12
 800ef26:	6002      	str	r2, [r0, #0]
 800ef28:	e7f9      	b.n	800ef1e <_calloc_r+0x12>
 800ef2a:	462a      	mov	r2, r5
 800ef2c:	4621      	mov	r1, r4
 800ef2e:	f7fd f969 	bl	800c204 <memset>
 800ef32:	e7f5      	b.n	800ef20 <_calloc_r+0x14>

0800ef34 <rshift>:
 800ef34:	6903      	ldr	r3, [r0, #16]
 800ef36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ef3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ef42:	f100 0414 	add.w	r4, r0, #20
 800ef46:	dd45      	ble.n	800efd4 <rshift+0xa0>
 800ef48:	f011 011f 	ands.w	r1, r1, #31
 800ef4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ef50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ef54:	d10c      	bne.n	800ef70 <rshift+0x3c>
 800ef56:	f100 0710 	add.w	r7, r0, #16
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	42b1      	cmp	r1, r6
 800ef5e:	d334      	bcc.n	800efca <rshift+0x96>
 800ef60:	1a9b      	subs	r3, r3, r2
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	1eea      	subs	r2, r5, #3
 800ef66:	4296      	cmp	r6, r2
 800ef68:	bf38      	it	cc
 800ef6a:	2300      	movcc	r3, #0
 800ef6c:	4423      	add	r3, r4
 800ef6e:	e015      	b.n	800ef9c <rshift+0x68>
 800ef70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ef74:	f1c1 0820 	rsb	r8, r1, #32
 800ef78:	40cf      	lsrs	r7, r1
 800ef7a:	f105 0e04 	add.w	lr, r5, #4
 800ef7e:	46a1      	mov	r9, r4
 800ef80:	4576      	cmp	r6, lr
 800ef82:	46f4      	mov	ip, lr
 800ef84:	d815      	bhi.n	800efb2 <rshift+0x7e>
 800ef86:	1a9a      	subs	r2, r3, r2
 800ef88:	0092      	lsls	r2, r2, #2
 800ef8a:	3a04      	subs	r2, #4
 800ef8c:	3501      	adds	r5, #1
 800ef8e:	42ae      	cmp	r6, r5
 800ef90:	bf38      	it	cc
 800ef92:	2200      	movcc	r2, #0
 800ef94:	18a3      	adds	r3, r4, r2
 800ef96:	50a7      	str	r7, [r4, r2]
 800ef98:	b107      	cbz	r7, 800ef9c <rshift+0x68>
 800ef9a:	3304      	adds	r3, #4
 800ef9c:	1b1a      	subs	r2, r3, r4
 800ef9e:	42a3      	cmp	r3, r4
 800efa0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800efa4:	bf08      	it	eq
 800efa6:	2300      	moveq	r3, #0
 800efa8:	6102      	str	r2, [r0, #16]
 800efaa:	bf08      	it	eq
 800efac:	6143      	streq	r3, [r0, #20]
 800efae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efb2:	f8dc c000 	ldr.w	ip, [ip]
 800efb6:	fa0c fc08 	lsl.w	ip, ip, r8
 800efba:	ea4c 0707 	orr.w	r7, ip, r7
 800efbe:	f849 7b04 	str.w	r7, [r9], #4
 800efc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800efc6:	40cf      	lsrs	r7, r1
 800efc8:	e7da      	b.n	800ef80 <rshift+0x4c>
 800efca:	f851 cb04 	ldr.w	ip, [r1], #4
 800efce:	f847 cf04 	str.w	ip, [r7, #4]!
 800efd2:	e7c3      	b.n	800ef5c <rshift+0x28>
 800efd4:	4623      	mov	r3, r4
 800efd6:	e7e1      	b.n	800ef9c <rshift+0x68>

0800efd8 <__hexdig_fun>:
 800efd8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800efdc:	2b09      	cmp	r3, #9
 800efde:	d802      	bhi.n	800efe6 <__hexdig_fun+0xe>
 800efe0:	3820      	subs	r0, #32
 800efe2:	b2c0      	uxtb	r0, r0
 800efe4:	4770      	bx	lr
 800efe6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800efea:	2b05      	cmp	r3, #5
 800efec:	d801      	bhi.n	800eff2 <__hexdig_fun+0x1a>
 800efee:	3847      	subs	r0, #71	@ 0x47
 800eff0:	e7f7      	b.n	800efe2 <__hexdig_fun+0xa>
 800eff2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eff6:	2b05      	cmp	r3, #5
 800eff8:	d801      	bhi.n	800effe <__hexdig_fun+0x26>
 800effa:	3827      	subs	r0, #39	@ 0x27
 800effc:	e7f1      	b.n	800efe2 <__hexdig_fun+0xa>
 800effe:	2000      	movs	r0, #0
 800f000:	4770      	bx	lr
	...

0800f004 <__gethex>:
 800f004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f008:	b085      	sub	sp, #20
 800f00a:	468a      	mov	sl, r1
 800f00c:	9302      	str	r3, [sp, #8]
 800f00e:	680b      	ldr	r3, [r1, #0]
 800f010:	9001      	str	r0, [sp, #4]
 800f012:	4690      	mov	r8, r2
 800f014:	1c9c      	adds	r4, r3, #2
 800f016:	46a1      	mov	r9, r4
 800f018:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f01c:	2830      	cmp	r0, #48	@ 0x30
 800f01e:	d0fa      	beq.n	800f016 <__gethex+0x12>
 800f020:	eba9 0303 	sub.w	r3, r9, r3
 800f024:	f1a3 0b02 	sub.w	fp, r3, #2
 800f028:	f7ff ffd6 	bl	800efd8 <__hexdig_fun>
 800f02c:	4605      	mov	r5, r0
 800f02e:	2800      	cmp	r0, #0
 800f030:	d168      	bne.n	800f104 <__gethex+0x100>
 800f032:	49a0      	ldr	r1, [pc, #640]	@ (800f2b4 <__gethex+0x2b0>)
 800f034:	2201      	movs	r2, #1
 800f036:	4648      	mov	r0, r9
 800f038:	f7ff fefc 	bl	800ee34 <strncmp>
 800f03c:	4607      	mov	r7, r0
 800f03e:	2800      	cmp	r0, #0
 800f040:	d167      	bne.n	800f112 <__gethex+0x10e>
 800f042:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f046:	4626      	mov	r6, r4
 800f048:	f7ff ffc6 	bl	800efd8 <__hexdig_fun>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d062      	beq.n	800f116 <__gethex+0x112>
 800f050:	4623      	mov	r3, r4
 800f052:	7818      	ldrb	r0, [r3, #0]
 800f054:	2830      	cmp	r0, #48	@ 0x30
 800f056:	4699      	mov	r9, r3
 800f058:	f103 0301 	add.w	r3, r3, #1
 800f05c:	d0f9      	beq.n	800f052 <__gethex+0x4e>
 800f05e:	f7ff ffbb 	bl	800efd8 <__hexdig_fun>
 800f062:	fab0 f580 	clz	r5, r0
 800f066:	096d      	lsrs	r5, r5, #5
 800f068:	f04f 0b01 	mov.w	fp, #1
 800f06c:	464a      	mov	r2, r9
 800f06e:	4616      	mov	r6, r2
 800f070:	3201      	adds	r2, #1
 800f072:	7830      	ldrb	r0, [r6, #0]
 800f074:	f7ff ffb0 	bl	800efd8 <__hexdig_fun>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d1f8      	bne.n	800f06e <__gethex+0x6a>
 800f07c:	498d      	ldr	r1, [pc, #564]	@ (800f2b4 <__gethex+0x2b0>)
 800f07e:	2201      	movs	r2, #1
 800f080:	4630      	mov	r0, r6
 800f082:	f7ff fed7 	bl	800ee34 <strncmp>
 800f086:	2800      	cmp	r0, #0
 800f088:	d13f      	bne.n	800f10a <__gethex+0x106>
 800f08a:	b944      	cbnz	r4, 800f09e <__gethex+0x9a>
 800f08c:	1c74      	adds	r4, r6, #1
 800f08e:	4622      	mov	r2, r4
 800f090:	4616      	mov	r6, r2
 800f092:	3201      	adds	r2, #1
 800f094:	7830      	ldrb	r0, [r6, #0]
 800f096:	f7ff ff9f 	bl	800efd8 <__hexdig_fun>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	d1f8      	bne.n	800f090 <__gethex+0x8c>
 800f09e:	1ba4      	subs	r4, r4, r6
 800f0a0:	00a7      	lsls	r7, r4, #2
 800f0a2:	7833      	ldrb	r3, [r6, #0]
 800f0a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f0a8:	2b50      	cmp	r3, #80	@ 0x50
 800f0aa:	d13e      	bne.n	800f12a <__gethex+0x126>
 800f0ac:	7873      	ldrb	r3, [r6, #1]
 800f0ae:	2b2b      	cmp	r3, #43	@ 0x2b
 800f0b0:	d033      	beq.n	800f11a <__gethex+0x116>
 800f0b2:	2b2d      	cmp	r3, #45	@ 0x2d
 800f0b4:	d034      	beq.n	800f120 <__gethex+0x11c>
 800f0b6:	1c71      	adds	r1, r6, #1
 800f0b8:	2400      	movs	r4, #0
 800f0ba:	7808      	ldrb	r0, [r1, #0]
 800f0bc:	f7ff ff8c 	bl	800efd8 <__hexdig_fun>
 800f0c0:	1e43      	subs	r3, r0, #1
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	2b18      	cmp	r3, #24
 800f0c6:	d830      	bhi.n	800f12a <__gethex+0x126>
 800f0c8:	f1a0 0210 	sub.w	r2, r0, #16
 800f0cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f0d0:	f7ff ff82 	bl	800efd8 <__hexdig_fun>
 800f0d4:	f100 3cff 	add.w	ip, r0, #4294967295
 800f0d8:	fa5f fc8c 	uxtb.w	ip, ip
 800f0dc:	f1bc 0f18 	cmp.w	ip, #24
 800f0e0:	f04f 030a 	mov.w	r3, #10
 800f0e4:	d91e      	bls.n	800f124 <__gethex+0x120>
 800f0e6:	b104      	cbz	r4, 800f0ea <__gethex+0xe6>
 800f0e8:	4252      	negs	r2, r2
 800f0ea:	4417      	add	r7, r2
 800f0ec:	f8ca 1000 	str.w	r1, [sl]
 800f0f0:	b1ed      	cbz	r5, 800f12e <__gethex+0x12a>
 800f0f2:	f1bb 0f00 	cmp.w	fp, #0
 800f0f6:	bf0c      	ite	eq
 800f0f8:	2506      	moveq	r5, #6
 800f0fa:	2500      	movne	r5, #0
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	b005      	add	sp, #20
 800f100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f104:	2500      	movs	r5, #0
 800f106:	462c      	mov	r4, r5
 800f108:	e7b0      	b.n	800f06c <__gethex+0x68>
 800f10a:	2c00      	cmp	r4, #0
 800f10c:	d1c7      	bne.n	800f09e <__gethex+0x9a>
 800f10e:	4627      	mov	r7, r4
 800f110:	e7c7      	b.n	800f0a2 <__gethex+0x9e>
 800f112:	464e      	mov	r6, r9
 800f114:	462f      	mov	r7, r5
 800f116:	2501      	movs	r5, #1
 800f118:	e7c3      	b.n	800f0a2 <__gethex+0x9e>
 800f11a:	2400      	movs	r4, #0
 800f11c:	1cb1      	adds	r1, r6, #2
 800f11e:	e7cc      	b.n	800f0ba <__gethex+0xb6>
 800f120:	2401      	movs	r4, #1
 800f122:	e7fb      	b.n	800f11c <__gethex+0x118>
 800f124:	fb03 0002 	mla	r0, r3, r2, r0
 800f128:	e7ce      	b.n	800f0c8 <__gethex+0xc4>
 800f12a:	4631      	mov	r1, r6
 800f12c:	e7de      	b.n	800f0ec <__gethex+0xe8>
 800f12e:	eba6 0309 	sub.w	r3, r6, r9
 800f132:	3b01      	subs	r3, #1
 800f134:	4629      	mov	r1, r5
 800f136:	2b07      	cmp	r3, #7
 800f138:	dc0a      	bgt.n	800f150 <__gethex+0x14c>
 800f13a:	9801      	ldr	r0, [sp, #4]
 800f13c:	f7fd ffd6 	bl	800d0ec <_Balloc>
 800f140:	4604      	mov	r4, r0
 800f142:	b940      	cbnz	r0, 800f156 <__gethex+0x152>
 800f144:	4b5c      	ldr	r3, [pc, #368]	@ (800f2b8 <__gethex+0x2b4>)
 800f146:	4602      	mov	r2, r0
 800f148:	21e4      	movs	r1, #228	@ 0xe4
 800f14a:	485c      	ldr	r0, [pc, #368]	@ (800f2bc <__gethex+0x2b8>)
 800f14c:	f7ff fec0 	bl	800eed0 <__assert_func>
 800f150:	3101      	adds	r1, #1
 800f152:	105b      	asrs	r3, r3, #1
 800f154:	e7ef      	b.n	800f136 <__gethex+0x132>
 800f156:	f100 0a14 	add.w	sl, r0, #20
 800f15a:	2300      	movs	r3, #0
 800f15c:	4655      	mov	r5, sl
 800f15e:	469b      	mov	fp, r3
 800f160:	45b1      	cmp	r9, r6
 800f162:	d337      	bcc.n	800f1d4 <__gethex+0x1d0>
 800f164:	f845 bb04 	str.w	fp, [r5], #4
 800f168:	eba5 050a 	sub.w	r5, r5, sl
 800f16c:	10ad      	asrs	r5, r5, #2
 800f16e:	6125      	str	r5, [r4, #16]
 800f170:	4658      	mov	r0, fp
 800f172:	f7fe f8ad 	bl	800d2d0 <__hi0bits>
 800f176:	016d      	lsls	r5, r5, #5
 800f178:	f8d8 6000 	ldr.w	r6, [r8]
 800f17c:	1a2d      	subs	r5, r5, r0
 800f17e:	42b5      	cmp	r5, r6
 800f180:	dd54      	ble.n	800f22c <__gethex+0x228>
 800f182:	1bad      	subs	r5, r5, r6
 800f184:	4629      	mov	r1, r5
 800f186:	4620      	mov	r0, r4
 800f188:	f7fe fc3e 	bl	800da08 <__any_on>
 800f18c:	4681      	mov	r9, r0
 800f18e:	b178      	cbz	r0, 800f1b0 <__gethex+0x1ac>
 800f190:	1e6b      	subs	r3, r5, #1
 800f192:	1159      	asrs	r1, r3, #5
 800f194:	f003 021f 	and.w	r2, r3, #31
 800f198:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f19c:	f04f 0901 	mov.w	r9, #1
 800f1a0:	fa09 f202 	lsl.w	r2, r9, r2
 800f1a4:	420a      	tst	r2, r1
 800f1a6:	d003      	beq.n	800f1b0 <__gethex+0x1ac>
 800f1a8:	454b      	cmp	r3, r9
 800f1aa:	dc36      	bgt.n	800f21a <__gethex+0x216>
 800f1ac:	f04f 0902 	mov.w	r9, #2
 800f1b0:	4629      	mov	r1, r5
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f7ff febe 	bl	800ef34 <rshift>
 800f1b8:	442f      	add	r7, r5
 800f1ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f1be:	42bb      	cmp	r3, r7
 800f1c0:	da42      	bge.n	800f248 <__gethex+0x244>
 800f1c2:	9801      	ldr	r0, [sp, #4]
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	f7fd ffd1 	bl	800d16c <_Bfree>
 800f1ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	25a3      	movs	r5, #163	@ 0xa3
 800f1d2:	e793      	b.n	800f0fc <__gethex+0xf8>
 800f1d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f1d8:	2a2e      	cmp	r2, #46	@ 0x2e
 800f1da:	d012      	beq.n	800f202 <__gethex+0x1fe>
 800f1dc:	2b20      	cmp	r3, #32
 800f1de:	d104      	bne.n	800f1ea <__gethex+0x1e6>
 800f1e0:	f845 bb04 	str.w	fp, [r5], #4
 800f1e4:	f04f 0b00 	mov.w	fp, #0
 800f1e8:	465b      	mov	r3, fp
 800f1ea:	7830      	ldrb	r0, [r6, #0]
 800f1ec:	9303      	str	r3, [sp, #12]
 800f1ee:	f7ff fef3 	bl	800efd8 <__hexdig_fun>
 800f1f2:	9b03      	ldr	r3, [sp, #12]
 800f1f4:	f000 000f 	and.w	r0, r0, #15
 800f1f8:	4098      	lsls	r0, r3
 800f1fa:	ea4b 0b00 	orr.w	fp, fp, r0
 800f1fe:	3304      	adds	r3, #4
 800f200:	e7ae      	b.n	800f160 <__gethex+0x15c>
 800f202:	45b1      	cmp	r9, r6
 800f204:	d8ea      	bhi.n	800f1dc <__gethex+0x1d8>
 800f206:	492b      	ldr	r1, [pc, #172]	@ (800f2b4 <__gethex+0x2b0>)
 800f208:	9303      	str	r3, [sp, #12]
 800f20a:	2201      	movs	r2, #1
 800f20c:	4630      	mov	r0, r6
 800f20e:	f7ff fe11 	bl	800ee34 <strncmp>
 800f212:	9b03      	ldr	r3, [sp, #12]
 800f214:	2800      	cmp	r0, #0
 800f216:	d1e1      	bne.n	800f1dc <__gethex+0x1d8>
 800f218:	e7a2      	b.n	800f160 <__gethex+0x15c>
 800f21a:	1ea9      	subs	r1, r5, #2
 800f21c:	4620      	mov	r0, r4
 800f21e:	f7fe fbf3 	bl	800da08 <__any_on>
 800f222:	2800      	cmp	r0, #0
 800f224:	d0c2      	beq.n	800f1ac <__gethex+0x1a8>
 800f226:	f04f 0903 	mov.w	r9, #3
 800f22a:	e7c1      	b.n	800f1b0 <__gethex+0x1ac>
 800f22c:	da09      	bge.n	800f242 <__gethex+0x23e>
 800f22e:	1b75      	subs	r5, r6, r5
 800f230:	4621      	mov	r1, r4
 800f232:	9801      	ldr	r0, [sp, #4]
 800f234:	462a      	mov	r2, r5
 800f236:	f7fe f9b1 	bl	800d59c <__lshift>
 800f23a:	1b7f      	subs	r7, r7, r5
 800f23c:	4604      	mov	r4, r0
 800f23e:	f100 0a14 	add.w	sl, r0, #20
 800f242:	f04f 0900 	mov.w	r9, #0
 800f246:	e7b8      	b.n	800f1ba <__gethex+0x1b6>
 800f248:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f24c:	42bd      	cmp	r5, r7
 800f24e:	dd6f      	ble.n	800f330 <__gethex+0x32c>
 800f250:	1bed      	subs	r5, r5, r7
 800f252:	42ae      	cmp	r6, r5
 800f254:	dc34      	bgt.n	800f2c0 <__gethex+0x2bc>
 800f256:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f25a:	2b02      	cmp	r3, #2
 800f25c:	d022      	beq.n	800f2a4 <__gethex+0x2a0>
 800f25e:	2b03      	cmp	r3, #3
 800f260:	d024      	beq.n	800f2ac <__gethex+0x2a8>
 800f262:	2b01      	cmp	r3, #1
 800f264:	d115      	bne.n	800f292 <__gethex+0x28e>
 800f266:	42ae      	cmp	r6, r5
 800f268:	d113      	bne.n	800f292 <__gethex+0x28e>
 800f26a:	2e01      	cmp	r6, #1
 800f26c:	d10b      	bne.n	800f286 <__gethex+0x282>
 800f26e:	9a02      	ldr	r2, [sp, #8]
 800f270:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f274:	6013      	str	r3, [r2, #0]
 800f276:	2301      	movs	r3, #1
 800f278:	6123      	str	r3, [r4, #16]
 800f27a:	f8ca 3000 	str.w	r3, [sl]
 800f27e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f280:	2562      	movs	r5, #98	@ 0x62
 800f282:	601c      	str	r4, [r3, #0]
 800f284:	e73a      	b.n	800f0fc <__gethex+0xf8>
 800f286:	1e71      	subs	r1, r6, #1
 800f288:	4620      	mov	r0, r4
 800f28a:	f7fe fbbd 	bl	800da08 <__any_on>
 800f28e:	2800      	cmp	r0, #0
 800f290:	d1ed      	bne.n	800f26e <__gethex+0x26a>
 800f292:	9801      	ldr	r0, [sp, #4]
 800f294:	4621      	mov	r1, r4
 800f296:	f7fd ff69 	bl	800d16c <_Bfree>
 800f29a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f29c:	2300      	movs	r3, #0
 800f29e:	6013      	str	r3, [r2, #0]
 800f2a0:	2550      	movs	r5, #80	@ 0x50
 800f2a2:	e72b      	b.n	800f0fc <__gethex+0xf8>
 800f2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1f3      	bne.n	800f292 <__gethex+0x28e>
 800f2aa:	e7e0      	b.n	800f26e <__gethex+0x26a>
 800f2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1dd      	bne.n	800f26e <__gethex+0x26a>
 800f2b2:	e7ee      	b.n	800f292 <__gethex+0x28e>
 800f2b4:	0800fa20 	.word	0x0800fa20
 800f2b8:	0800f8b5 	.word	0x0800f8b5
 800f2bc:	0800fbce 	.word	0x0800fbce
 800f2c0:	1e6f      	subs	r7, r5, #1
 800f2c2:	f1b9 0f00 	cmp.w	r9, #0
 800f2c6:	d130      	bne.n	800f32a <__gethex+0x326>
 800f2c8:	b127      	cbz	r7, 800f2d4 <__gethex+0x2d0>
 800f2ca:	4639      	mov	r1, r7
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f7fe fb9b 	bl	800da08 <__any_on>
 800f2d2:	4681      	mov	r9, r0
 800f2d4:	117a      	asrs	r2, r7, #5
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f2dc:	f007 071f 	and.w	r7, r7, #31
 800f2e0:	40bb      	lsls	r3, r7
 800f2e2:	4213      	tst	r3, r2
 800f2e4:	4629      	mov	r1, r5
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	bf18      	it	ne
 800f2ea:	f049 0902 	orrne.w	r9, r9, #2
 800f2ee:	f7ff fe21 	bl	800ef34 <rshift>
 800f2f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f2f6:	1b76      	subs	r6, r6, r5
 800f2f8:	2502      	movs	r5, #2
 800f2fa:	f1b9 0f00 	cmp.w	r9, #0
 800f2fe:	d047      	beq.n	800f390 <__gethex+0x38c>
 800f300:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f304:	2b02      	cmp	r3, #2
 800f306:	d015      	beq.n	800f334 <__gethex+0x330>
 800f308:	2b03      	cmp	r3, #3
 800f30a:	d017      	beq.n	800f33c <__gethex+0x338>
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d109      	bne.n	800f324 <__gethex+0x320>
 800f310:	f019 0f02 	tst.w	r9, #2
 800f314:	d006      	beq.n	800f324 <__gethex+0x320>
 800f316:	f8da 3000 	ldr.w	r3, [sl]
 800f31a:	ea49 0903 	orr.w	r9, r9, r3
 800f31e:	f019 0f01 	tst.w	r9, #1
 800f322:	d10e      	bne.n	800f342 <__gethex+0x33e>
 800f324:	f045 0510 	orr.w	r5, r5, #16
 800f328:	e032      	b.n	800f390 <__gethex+0x38c>
 800f32a:	f04f 0901 	mov.w	r9, #1
 800f32e:	e7d1      	b.n	800f2d4 <__gethex+0x2d0>
 800f330:	2501      	movs	r5, #1
 800f332:	e7e2      	b.n	800f2fa <__gethex+0x2f6>
 800f334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f336:	f1c3 0301 	rsb	r3, r3, #1
 800f33a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f33c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d0f0      	beq.n	800f324 <__gethex+0x320>
 800f342:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f346:	f104 0314 	add.w	r3, r4, #20
 800f34a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f34e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f352:	f04f 0c00 	mov.w	ip, #0
 800f356:	4618      	mov	r0, r3
 800f358:	f853 2b04 	ldr.w	r2, [r3], #4
 800f35c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f360:	d01b      	beq.n	800f39a <__gethex+0x396>
 800f362:	3201      	adds	r2, #1
 800f364:	6002      	str	r2, [r0, #0]
 800f366:	2d02      	cmp	r5, #2
 800f368:	f104 0314 	add.w	r3, r4, #20
 800f36c:	d13c      	bne.n	800f3e8 <__gethex+0x3e4>
 800f36e:	f8d8 2000 	ldr.w	r2, [r8]
 800f372:	3a01      	subs	r2, #1
 800f374:	42b2      	cmp	r2, r6
 800f376:	d109      	bne.n	800f38c <__gethex+0x388>
 800f378:	1171      	asrs	r1, r6, #5
 800f37a:	2201      	movs	r2, #1
 800f37c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f380:	f006 061f 	and.w	r6, r6, #31
 800f384:	fa02 f606 	lsl.w	r6, r2, r6
 800f388:	421e      	tst	r6, r3
 800f38a:	d13a      	bne.n	800f402 <__gethex+0x3fe>
 800f38c:	f045 0520 	orr.w	r5, r5, #32
 800f390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f392:	601c      	str	r4, [r3, #0]
 800f394:	9b02      	ldr	r3, [sp, #8]
 800f396:	601f      	str	r7, [r3, #0]
 800f398:	e6b0      	b.n	800f0fc <__gethex+0xf8>
 800f39a:	4299      	cmp	r1, r3
 800f39c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f3a0:	d8d9      	bhi.n	800f356 <__gethex+0x352>
 800f3a2:	68a3      	ldr	r3, [r4, #8]
 800f3a4:	459b      	cmp	fp, r3
 800f3a6:	db17      	blt.n	800f3d8 <__gethex+0x3d4>
 800f3a8:	6861      	ldr	r1, [r4, #4]
 800f3aa:	9801      	ldr	r0, [sp, #4]
 800f3ac:	3101      	adds	r1, #1
 800f3ae:	f7fd fe9d 	bl	800d0ec <_Balloc>
 800f3b2:	4681      	mov	r9, r0
 800f3b4:	b918      	cbnz	r0, 800f3be <__gethex+0x3ba>
 800f3b6:	4b1a      	ldr	r3, [pc, #104]	@ (800f420 <__gethex+0x41c>)
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	2184      	movs	r1, #132	@ 0x84
 800f3bc:	e6c5      	b.n	800f14a <__gethex+0x146>
 800f3be:	6922      	ldr	r2, [r4, #16]
 800f3c0:	3202      	adds	r2, #2
 800f3c2:	f104 010c 	add.w	r1, r4, #12
 800f3c6:	0092      	lsls	r2, r2, #2
 800f3c8:	300c      	adds	r0, #12
 800f3ca:	f7fc ff9a 	bl	800c302 <memcpy>
 800f3ce:	4621      	mov	r1, r4
 800f3d0:	9801      	ldr	r0, [sp, #4]
 800f3d2:	f7fd fecb 	bl	800d16c <_Bfree>
 800f3d6:	464c      	mov	r4, r9
 800f3d8:	6923      	ldr	r3, [r4, #16]
 800f3da:	1c5a      	adds	r2, r3, #1
 800f3dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f3e0:	6122      	str	r2, [r4, #16]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	615a      	str	r2, [r3, #20]
 800f3e6:	e7be      	b.n	800f366 <__gethex+0x362>
 800f3e8:	6922      	ldr	r2, [r4, #16]
 800f3ea:	455a      	cmp	r2, fp
 800f3ec:	dd0b      	ble.n	800f406 <__gethex+0x402>
 800f3ee:	2101      	movs	r1, #1
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f7ff fd9f 	bl	800ef34 <rshift>
 800f3f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3fa:	3701      	adds	r7, #1
 800f3fc:	42bb      	cmp	r3, r7
 800f3fe:	f6ff aee0 	blt.w	800f1c2 <__gethex+0x1be>
 800f402:	2501      	movs	r5, #1
 800f404:	e7c2      	b.n	800f38c <__gethex+0x388>
 800f406:	f016 061f 	ands.w	r6, r6, #31
 800f40a:	d0fa      	beq.n	800f402 <__gethex+0x3fe>
 800f40c:	4453      	add	r3, sl
 800f40e:	f1c6 0620 	rsb	r6, r6, #32
 800f412:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f416:	f7fd ff5b 	bl	800d2d0 <__hi0bits>
 800f41a:	42b0      	cmp	r0, r6
 800f41c:	dbe7      	blt.n	800f3ee <__gethex+0x3ea>
 800f41e:	e7f0      	b.n	800f402 <__gethex+0x3fe>
 800f420:	0800f8b5 	.word	0x0800f8b5

0800f424 <L_shift>:
 800f424:	f1c2 0208 	rsb	r2, r2, #8
 800f428:	0092      	lsls	r2, r2, #2
 800f42a:	b570      	push	{r4, r5, r6, lr}
 800f42c:	f1c2 0620 	rsb	r6, r2, #32
 800f430:	6843      	ldr	r3, [r0, #4]
 800f432:	6804      	ldr	r4, [r0, #0]
 800f434:	fa03 f506 	lsl.w	r5, r3, r6
 800f438:	432c      	orrs	r4, r5
 800f43a:	40d3      	lsrs	r3, r2
 800f43c:	6004      	str	r4, [r0, #0]
 800f43e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f442:	4288      	cmp	r0, r1
 800f444:	d3f4      	bcc.n	800f430 <L_shift+0xc>
 800f446:	bd70      	pop	{r4, r5, r6, pc}

0800f448 <__match>:
 800f448:	b530      	push	{r4, r5, lr}
 800f44a:	6803      	ldr	r3, [r0, #0]
 800f44c:	3301      	adds	r3, #1
 800f44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f452:	b914      	cbnz	r4, 800f45a <__match+0x12>
 800f454:	6003      	str	r3, [r0, #0]
 800f456:	2001      	movs	r0, #1
 800f458:	bd30      	pop	{r4, r5, pc}
 800f45a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f45e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f462:	2d19      	cmp	r5, #25
 800f464:	bf98      	it	ls
 800f466:	3220      	addls	r2, #32
 800f468:	42a2      	cmp	r2, r4
 800f46a:	d0f0      	beq.n	800f44e <__match+0x6>
 800f46c:	2000      	movs	r0, #0
 800f46e:	e7f3      	b.n	800f458 <__match+0x10>

0800f470 <__hexnan>:
 800f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	680b      	ldr	r3, [r1, #0]
 800f476:	6801      	ldr	r1, [r0, #0]
 800f478:	115e      	asrs	r6, r3, #5
 800f47a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f47e:	f013 031f 	ands.w	r3, r3, #31
 800f482:	b087      	sub	sp, #28
 800f484:	bf18      	it	ne
 800f486:	3604      	addne	r6, #4
 800f488:	2500      	movs	r5, #0
 800f48a:	1f37      	subs	r7, r6, #4
 800f48c:	4682      	mov	sl, r0
 800f48e:	4690      	mov	r8, r2
 800f490:	9301      	str	r3, [sp, #4]
 800f492:	f846 5c04 	str.w	r5, [r6, #-4]
 800f496:	46b9      	mov	r9, r7
 800f498:	463c      	mov	r4, r7
 800f49a:	9502      	str	r5, [sp, #8]
 800f49c:	46ab      	mov	fp, r5
 800f49e:	784a      	ldrb	r2, [r1, #1]
 800f4a0:	1c4b      	adds	r3, r1, #1
 800f4a2:	9303      	str	r3, [sp, #12]
 800f4a4:	b342      	cbz	r2, 800f4f8 <__hexnan+0x88>
 800f4a6:	4610      	mov	r0, r2
 800f4a8:	9105      	str	r1, [sp, #20]
 800f4aa:	9204      	str	r2, [sp, #16]
 800f4ac:	f7ff fd94 	bl	800efd8 <__hexdig_fun>
 800f4b0:	2800      	cmp	r0, #0
 800f4b2:	d151      	bne.n	800f558 <__hexnan+0xe8>
 800f4b4:	9a04      	ldr	r2, [sp, #16]
 800f4b6:	9905      	ldr	r1, [sp, #20]
 800f4b8:	2a20      	cmp	r2, #32
 800f4ba:	d818      	bhi.n	800f4ee <__hexnan+0x7e>
 800f4bc:	9b02      	ldr	r3, [sp, #8]
 800f4be:	459b      	cmp	fp, r3
 800f4c0:	dd13      	ble.n	800f4ea <__hexnan+0x7a>
 800f4c2:	454c      	cmp	r4, r9
 800f4c4:	d206      	bcs.n	800f4d4 <__hexnan+0x64>
 800f4c6:	2d07      	cmp	r5, #7
 800f4c8:	dc04      	bgt.n	800f4d4 <__hexnan+0x64>
 800f4ca:	462a      	mov	r2, r5
 800f4cc:	4649      	mov	r1, r9
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f7ff ffa8 	bl	800f424 <L_shift>
 800f4d4:	4544      	cmp	r4, r8
 800f4d6:	d952      	bls.n	800f57e <__hexnan+0x10e>
 800f4d8:	2300      	movs	r3, #0
 800f4da:	f1a4 0904 	sub.w	r9, r4, #4
 800f4de:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4e2:	f8cd b008 	str.w	fp, [sp, #8]
 800f4e6:	464c      	mov	r4, r9
 800f4e8:	461d      	mov	r5, r3
 800f4ea:	9903      	ldr	r1, [sp, #12]
 800f4ec:	e7d7      	b.n	800f49e <__hexnan+0x2e>
 800f4ee:	2a29      	cmp	r2, #41	@ 0x29
 800f4f0:	d157      	bne.n	800f5a2 <__hexnan+0x132>
 800f4f2:	3102      	adds	r1, #2
 800f4f4:	f8ca 1000 	str.w	r1, [sl]
 800f4f8:	f1bb 0f00 	cmp.w	fp, #0
 800f4fc:	d051      	beq.n	800f5a2 <__hexnan+0x132>
 800f4fe:	454c      	cmp	r4, r9
 800f500:	d206      	bcs.n	800f510 <__hexnan+0xa0>
 800f502:	2d07      	cmp	r5, #7
 800f504:	dc04      	bgt.n	800f510 <__hexnan+0xa0>
 800f506:	462a      	mov	r2, r5
 800f508:	4649      	mov	r1, r9
 800f50a:	4620      	mov	r0, r4
 800f50c:	f7ff ff8a 	bl	800f424 <L_shift>
 800f510:	4544      	cmp	r4, r8
 800f512:	d936      	bls.n	800f582 <__hexnan+0x112>
 800f514:	f1a8 0204 	sub.w	r2, r8, #4
 800f518:	4623      	mov	r3, r4
 800f51a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f51e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f522:	429f      	cmp	r7, r3
 800f524:	d2f9      	bcs.n	800f51a <__hexnan+0xaa>
 800f526:	1b3b      	subs	r3, r7, r4
 800f528:	f023 0303 	bic.w	r3, r3, #3
 800f52c:	3304      	adds	r3, #4
 800f52e:	3401      	adds	r4, #1
 800f530:	3e03      	subs	r6, #3
 800f532:	42b4      	cmp	r4, r6
 800f534:	bf88      	it	hi
 800f536:	2304      	movhi	r3, #4
 800f538:	4443      	add	r3, r8
 800f53a:	2200      	movs	r2, #0
 800f53c:	f843 2b04 	str.w	r2, [r3], #4
 800f540:	429f      	cmp	r7, r3
 800f542:	d2fb      	bcs.n	800f53c <__hexnan+0xcc>
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	b91b      	cbnz	r3, 800f550 <__hexnan+0xe0>
 800f548:	4547      	cmp	r7, r8
 800f54a:	d128      	bne.n	800f59e <__hexnan+0x12e>
 800f54c:	2301      	movs	r3, #1
 800f54e:	603b      	str	r3, [r7, #0]
 800f550:	2005      	movs	r0, #5
 800f552:	b007      	add	sp, #28
 800f554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f558:	3501      	adds	r5, #1
 800f55a:	2d08      	cmp	r5, #8
 800f55c:	f10b 0b01 	add.w	fp, fp, #1
 800f560:	dd06      	ble.n	800f570 <__hexnan+0x100>
 800f562:	4544      	cmp	r4, r8
 800f564:	d9c1      	bls.n	800f4ea <__hexnan+0x7a>
 800f566:	2300      	movs	r3, #0
 800f568:	f844 3c04 	str.w	r3, [r4, #-4]
 800f56c:	2501      	movs	r5, #1
 800f56e:	3c04      	subs	r4, #4
 800f570:	6822      	ldr	r2, [r4, #0]
 800f572:	f000 000f 	and.w	r0, r0, #15
 800f576:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f57a:	6020      	str	r0, [r4, #0]
 800f57c:	e7b5      	b.n	800f4ea <__hexnan+0x7a>
 800f57e:	2508      	movs	r5, #8
 800f580:	e7b3      	b.n	800f4ea <__hexnan+0x7a>
 800f582:	9b01      	ldr	r3, [sp, #4]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d0dd      	beq.n	800f544 <__hexnan+0xd4>
 800f588:	f1c3 0320 	rsb	r3, r3, #32
 800f58c:	f04f 32ff 	mov.w	r2, #4294967295
 800f590:	40da      	lsrs	r2, r3
 800f592:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f596:	4013      	ands	r3, r2
 800f598:	f846 3c04 	str.w	r3, [r6, #-4]
 800f59c:	e7d2      	b.n	800f544 <__hexnan+0xd4>
 800f59e:	3f04      	subs	r7, #4
 800f5a0:	e7d0      	b.n	800f544 <__hexnan+0xd4>
 800f5a2:	2004      	movs	r0, #4
 800f5a4:	e7d5      	b.n	800f552 <__hexnan+0xe2>

0800f5a6 <__ascii_mbtowc>:
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	b901      	cbnz	r1, 800f5ac <__ascii_mbtowc+0x6>
 800f5aa:	a901      	add	r1, sp, #4
 800f5ac:	b142      	cbz	r2, 800f5c0 <__ascii_mbtowc+0x1a>
 800f5ae:	b14b      	cbz	r3, 800f5c4 <__ascii_mbtowc+0x1e>
 800f5b0:	7813      	ldrb	r3, [r2, #0]
 800f5b2:	600b      	str	r3, [r1, #0]
 800f5b4:	7812      	ldrb	r2, [r2, #0]
 800f5b6:	1e10      	subs	r0, r2, #0
 800f5b8:	bf18      	it	ne
 800f5ba:	2001      	movne	r0, #1
 800f5bc:	b002      	add	sp, #8
 800f5be:	4770      	bx	lr
 800f5c0:	4610      	mov	r0, r2
 800f5c2:	e7fb      	b.n	800f5bc <__ascii_mbtowc+0x16>
 800f5c4:	f06f 0001 	mvn.w	r0, #1
 800f5c8:	e7f8      	b.n	800f5bc <__ascii_mbtowc+0x16>

0800f5ca <_realloc_r>:
 800f5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ce:	4680      	mov	r8, r0
 800f5d0:	4615      	mov	r5, r2
 800f5d2:	460c      	mov	r4, r1
 800f5d4:	b921      	cbnz	r1, 800f5e0 <_realloc_r+0x16>
 800f5d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5da:	4611      	mov	r1, r2
 800f5dc:	f7fd bcfa 	b.w	800cfd4 <_malloc_r>
 800f5e0:	b92a      	cbnz	r2, 800f5ee <_realloc_r+0x24>
 800f5e2:	f7fd fc83 	bl	800ceec <_free_r>
 800f5e6:	2400      	movs	r4, #0
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ee:	f000 f840 	bl	800f672 <_malloc_usable_size_r>
 800f5f2:	4285      	cmp	r5, r0
 800f5f4:	4606      	mov	r6, r0
 800f5f6:	d802      	bhi.n	800f5fe <_realloc_r+0x34>
 800f5f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f5fc:	d8f4      	bhi.n	800f5e8 <_realloc_r+0x1e>
 800f5fe:	4629      	mov	r1, r5
 800f600:	4640      	mov	r0, r8
 800f602:	f7fd fce7 	bl	800cfd4 <_malloc_r>
 800f606:	4607      	mov	r7, r0
 800f608:	2800      	cmp	r0, #0
 800f60a:	d0ec      	beq.n	800f5e6 <_realloc_r+0x1c>
 800f60c:	42b5      	cmp	r5, r6
 800f60e:	462a      	mov	r2, r5
 800f610:	4621      	mov	r1, r4
 800f612:	bf28      	it	cs
 800f614:	4632      	movcs	r2, r6
 800f616:	f7fc fe74 	bl	800c302 <memcpy>
 800f61a:	4621      	mov	r1, r4
 800f61c:	4640      	mov	r0, r8
 800f61e:	f7fd fc65 	bl	800ceec <_free_r>
 800f622:	463c      	mov	r4, r7
 800f624:	e7e0      	b.n	800f5e8 <_realloc_r+0x1e>

0800f626 <__ascii_wctomb>:
 800f626:	4603      	mov	r3, r0
 800f628:	4608      	mov	r0, r1
 800f62a:	b141      	cbz	r1, 800f63e <__ascii_wctomb+0x18>
 800f62c:	2aff      	cmp	r2, #255	@ 0xff
 800f62e:	d904      	bls.n	800f63a <__ascii_wctomb+0x14>
 800f630:	228a      	movs	r2, #138	@ 0x8a
 800f632:	601a      	str	r2, [r3, #0]
 800f634:	f04f 30ff 	mov.w	r0, #4294967295
 800f638:	4770      	bx	lr
 800f63a:	700a      	strb	r2, [r1, #0]
 800f63c:	2001      	movs	r0, #1
 800f63e:	4770      	bx	lr

0800f640 <fiprintf>:
 800f640:	b40e      	push	{r1, r2, r3}
 800f642:	b503      	push	{r0, r1, lr}
 800f644:	4601      	mov	r1, r0
 800f646:	ab03      	add	r3, sp, #12
 800f648:	4805      	ldr	r0, [pc, #20]	@ (800f660 <fiprintf+0x20>)
 800f64a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f64e:	6800      	ldr	r0, [r0, #0]
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	f7ff f9af 	bl	800e9b4 <_vfiprintf_r>
 800f656:	b002      	add	sp, #8
 800f658:	f85d eb04 	ldr.w	lr, [sp], #4
 800f65c:	b003      	add	sp, #12
 800f65e:	4770      	bx	lr
 800f660:	2400001c 	.word	0x2400001c

0800f664 <abort>:
 800f664:	b508      	push	{r3, lr}
 800f666:	2006      	movs	r0, #6
 800f668:	f000 f834 	bl	800f6d4 <raise>
 800f66c:	2001      	movs	r0, #1
 800f66e:	f7f2 fb07 	bl	8001c80 <_exit>

0800f672 <_malloc_usable_size_r>:
 800f672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f676:	1f18      	subs	r0, r3, #4
 800f678:	2b00      	cmp	r3, #0
 800f67a:	bfbc      	itt	lt
 800f67c:	580b      	ldrlt	r3, [r1, r0]
 800f67e:	18c0      	addlt	r0, r0, r3
 800f680:	4770      	bx	lr

0800f682 <_raise_r>:
 800f682:	291f      	cmp	r1, #31
 800f684:	b538      	push	{r3, r4, r5, lr}
 800f686:	4605      	mov	r5, r0
 800f688:	460c      	mov	r4, r1
 800f68a:	d904      	bls.n	800f696 <_raise_r+0x14>
 800f68c:	2316      	movs	r3, #22
 800f68e:	6003      	str	r3, [r0, #0]
 800f690:	f04f 30ff 	mov.w	r0, #4294967295
 800f694:	bd38      	pop	{r3, r4, r5, pc}
 800f696:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f698:	b112      	cbz	r2, 800f6a0 <_raise_r+0x1e>
 800f69a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f69e:	b94b      	cbnz	r3, 800f6b4 <_raise_r+0x32>
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	f000 f831 	bl	800f708 <_getpid_r>
 800f6a6:	4622      	mov	r2, r4
 800f6a8:	4601      	mov	r1, r0
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6b0:	f000 b818 	b.w	800f6e4 <_kill_r>
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d00a      	beq.n	800f6ce <_raise_r+0x4c>
 800f6b8:	1c59      	adds	r1, r3, #1
 800f6ba:	d103      	bne.n	800f6c4 <_raise_r+0x42>
 800f6bc:	2316      	movs	r3, #22
 800f6be:	6003      	str	r3, [r0, #0]
 800f6c0:	2001      	movs	r0, #1
 800f6c2:	e7e7      	b.n	800f694 <_raise_r+0x12>
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	4798      	blx	r3
 800f6ce:	2000      	movs	r0, #0
 800f6d0:	e7e0      	b.n	800f694 <_raise_r+0x12>
	...

0800f6d4 <raise>:
 800f6d4:	4b02      	ldr	r3, [pc, #8]	@ (800f6e0 <raise+0xc>)
 800f6d6:	4601      	mov	r1, r0
 800f6d8:	6818      	ldr	r0, [r3, #0]
 800f6da:	f7ff bfd2 	b.w	800f682 <_raise_r>
 800f6de:	bf00      	nop
 800f6e0:	2400001c 	.word	0x2400001c

0800f6e4 <_kill_r>:
 800f6e4:	b538      	push	{r3, r4, r5, lr}
 800f6e6:	4d07      	ldr	r5, [pc, #28]	@ (800f704 <_kill_r+0x20>)
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	4608      	mov	r0, r1
 800f6ee:	4611      	mov	r1, r2
 800f6f0:	602b      	str	r3, [r5, #0]
 800f6f2:	f7f2 fab5 	bl	8001c60 <_kill>
 800f6f6:	1c43      	adds	r3, r0, #1
 800f6f8:	d102      	bne.n	800f700 <_kill_r+0x1c>
 800f6fa:	682b      	ldr	r3, [r5, #0]
 800f6fc:	b103      	cbz	r3, 800f700 <_kill_r+0x1c>
 800f6fe:	6023      	str	r3, [r4, #0]
 800f700:	bd38      	pop	{r3, r4, r5, pc}
 800f702:	bf00      	nop
 800f704:	24000788 	.word	0x24000788

0800f708 <_getpid_r>:
 800f708:	f7f2 baa2 	b.w	8001c50 <_getpid>

0800f70c <_init>:
 800f70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70e:	bf00      	nop
 800f710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f712:	bc08      	pop	{r3}
 800f714:	469e      	mov	lr, r3
 800f716:	4770      	bx	lr

0800f718 <_fini>:
 800f718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f71a:	bf00      	nop
 800f71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f71e:	bc08      	pop	{r3}
 800f720:	469e      	mov	lr, r3
 800f722:	4770      	bx	lr
