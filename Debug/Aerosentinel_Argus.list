
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f58  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec0  08012228  08012228  00013228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080140e8  080140e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080140f0  080140f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080140f4  080140f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  080140f8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000964  240001e0  080142d8  000161e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000b44  080142d8  00016b44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000161e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ec16  00000000  00000000  0001620e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004104  00000000  00000000  00034e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001810  00000000  00000000  00038f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001291  00000000  00000000  0003a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00006939  00000000  00000000  0003b9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025157  00000000  00000000  00042302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001668cc  00000000  00000000  00067459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cdd25  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b20  00000000  00000000  001cdd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001d5888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012210 	.word	0x08012210

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	08012210 	.word	0x08012210

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <ms5607_delay_func>:
#define STANDARD_TEMP 288.15         // Standard temperature at sea level in K
#define PASCAL_TO_HECTOPASCAL 100 	 //Divide the pressure by this number to get hPa
#define PASCAL_TO_KILOPASCAL 1000	 //Divide the pressure by this number to get kPa

void ms5607_delay_func(uint32_t period)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8000aa0:	e008      	b.n	8000ab4 <ms5607_delay_func+0x1c>
	{
		for(i = 0; i < 84; i++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e002      	b.n	8000aae <ms5607_delay_func+0x16>
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b53      	cmp	r3, #83	@ 0x53
 8000ab2:	d9f9      	bls.n	8000aa8 <ms5607_delay_func+0x10>
	while(period--)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f1      	bne.n	8000aa2 <ms5607_delay_func+0xa>
		{
			;
		}
	}
	//HAL_Delay(period/1000);
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  enableCSB();
 8000ad0:	f000 fc00 	bl	80012d4 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MS5607_Init+0x54>)
 8000ad6:	221e      	movs	r2, #30
 8000ad8:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8000ada:	230a      	movs	r3, #10
 8000adc:	2201      	movs	r2, #1
 8000ade:	4910      	ldr	r1, [pc, #64]	@ (8000b20 <MS5607_Init+0x54>)
 8000ae0:	4810      	ldr	r0, [pc, #64]	@ (8000b24 <MS5607_Init+0x58>)
 8000ae2:	f008 fa8f 	bl	8009004 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000ae6:	bf00      	nop
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MS5607_Init+0x58>)
 8000aea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d0f9      	beq.n	8000ae8 <MS5607_Init+0x1c>
//  HAL_Delay(3);
  ms5607_delay_func(3000);
 8000af4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000af8:	f7ff ffce 	bl	8000a98 <ms5607_delay_func>
  disableCSB();
 8000afc:	f000 fbf6 	bl	80012ec <disableCSB>

  MS5607PromRead(&promData);
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <MS5607_Init+0x5c>)
 8000b02:	f000 f813 	bl	8000b2c <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 8000b06:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <MS5607_Init+0x5c>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <MS5607_Init+0x4a>
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MS5607_Init+0x5c>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	2bff      	cmp	r3, #255	@ 0xff
 8000b14:	d101      	bne.n	8000b1a <MS5607_Init+0x4e>
	 //printf("MS5607 Init fail! \n");
    return MS5607_STATE_FAILED;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <MS5607_Init+0x50>
  } else {
	  //printf("MS5607 Init success! \n");
    return MS5607_STATE_READY;
 8000b1a:	2300      	movs	r3, #0
  }
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	240001fc 	.word	0x240001fc
 8000b24:	240004a8 	.word	0x240004a8
 8000b28:	24000200 	.word	0x24000200

08000b2c <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	75fb      	strb	r3, [r7, #23]
 8000b3c:	e01e      	b.n	8000b7c <MS5607PromRead+0x50>
    SPITransmitData = PROM_READ(address);
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <MS5607PromRead+0x98>)
 8000b4e:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8000b50:	f000 fbc0 	bl	80012d4 <enableCSB>
    HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8000b54:	230a      	movs	r3, #10
 8000b56:	2201      	movs	r2, #1
 8000b58:	491a      	ldr	r1, [pc, #104]	@ (8000bc4 <MS5607PromRead+0x98>)
 8000b5a:	481b      	ldr	r0, [pc, #108]	@ (8000bc8 <MS5607PromRead+0x9c>)
 8000b5c:	f008 fa52 	bl	8009004 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(&hspi4, structPointer, 2, 10);
 8000b60:	230a      	movs	r3, #10
 8000b62:	2202      	movs	r2, #2
 8000b64:	6939      	ldr	r1, [r7, #16]
 8000b66:	4818      	ldr	r0, [pc, #96]	@ (8000bc8 <MS5607PromRead+0x9c>)
 8000b68:	f008 fc3a 	bl	80093e0 <HAL_SPI_Receive>
    disableCSB();
 8000b6c:	f000 fbbe 	bl	80012ec <disableCSB>
    structPointer++;
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	3302      	adds	r3, #2
 8000b74:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8000b76:	7dfb      	ldrb	r3, [r7, #23]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	75fb      	strb	r3, [r7, #23]
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
 8000b7e:	2b07      	cmp	r3, #7
 8000b80:	d9dd      	bls.n	8000b3e <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	75fb      	strb	r3, [r7, #23]
 8000b8a:	e012      	b.n	8000bb2 <MS5607PromRead+0x86>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	785a      	ldrb	r2, [r3, #1]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	7afa      	ldrb	r2, [r7, #11]
 8000ba4:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	75fb      	strb	r3, [r7, #23]
 8000bb2:	7dfb      	ldrb	r3, [r7, #23]
 8000bb4:	2b07      	cmp	r3, #7
 8000bb6:	d9e9      	bls.n	8000b8c <MS5607PromRead+0x60>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	240001fc 	.word	0x240001fc
 8000bc8:	240004a8 	.word	0x240004a8

08000bcc <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 8000bd4:	f000 fb7e 	bl	80012d4 <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 8000bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8000d44 <MS5607UncompensatedRead+0x178>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b59      	ldr	r3, [pc, #356]	@ (8000d48 <MS5607UncompensatedRead+0x17c>)
 8000be4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8000be6:	230a      	movs	r3, #10
 8000be8:	2201      	movs	r2, #1
 8000bea:	4957      	ldr	r1, [pc, #348]	@ (8000d48 <MS5607UncompensatedRead+0x17c>)
 8000bec:	4857      	ldr	r0, [pc, #348]	@ (8000d4c <MS5607UncompensatedRead+0x180>)
 8000bee:	f008 fa09 	bl	8009004 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000bf2:	bf00      	nop
 8000bf4:	4b55      	ldr	r3, [pc, #340]	@ (8000d4c <MS5607UncompensatedRead+0x180>)
 8000bf6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d0f9      	beq.n	8000bf4 <MS5607UncompensatedRead+0x28>

  if(Pressure_OSR == 0x00)
 8000c00:	4b50      	ldr	r3, [pc, #320]	@ (8000d44 <MS5607UncompensatedRead+0x178>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d104      	bne.n	8000c12 <MS5607UncompensatedRead+0x46>
//    HAL_Delay(1);
  	ms5607_delay_func(1000);
 8000c08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0c:	f7ff ff44 	bl	8000a98 <ms5607_delay_func>
 8000c10:	e01e      	b.n	8000c50 <MS5607UncompensatedRead+0x84>
  else if(Pressure_OSR == 0x02)
 8000c12:	4b4c      	ldr	r3, [pc, #304]	@ (8000d44 <MS5607UncompensatedRead+0x178>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d104      	bne.n	8000c24 <MS5607UncompensatedRead+0x58>
//    HAL_Delay(2);
  ms5607_delay_func(2000);
 8000c1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c1e:	f7ff ff3b 	bl	8000a98 <ms5607_delay_func>
 8000c22:	e015      	b.n	8000c50 <MS5607UncompensatedRead+0x84>
  else if(Pressure_OSR == 0x04)
 8000c24:	4b47      	ldr	r3, [pc, #284]	@ (8000d44 <MS5607UncompensatedRead+0x178>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d104      	bne.n	8000c36 <MS5607UncompensatedRead+0x6a>
//    HAL_Delay(3);
  ms5607_delay_func(3000);
 8000c2c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c30:	f7ff ff32 	bl	8000a98 <ms5607_delay_func>
 8000c34:	e00c      	b.n	8000c50 <MS5607UncompensatedRead+0x84>
  else if(Pressure_OSR == 0x06)
 8000c36:	4b43      	ldr	r3, [pc, #268]	@ (8000d44 <MS5607UncompensatedRead+0x178>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d104      	bne.n	8000c48 <MS5607UncompensatedRead+0x7c>
//    HAL_Delay(5);
  ms5607_delay_func(5000);
 8000c3e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c42:	f7ff ff29 	bl	8000a98 <ms5607_delay_func>
 8000c46:	e003      	b.n	8000c50 <MS5607UncompensatedRead+0x84>
  else
//    HAL_Delay(10);
  ms5607_delay_func(10000);
 8000c48:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000c4c:	f7ff ff24 	bl	8000a98 <ms5607_delay_func>

  disableCSB();
 8000c50:	f000 fb4c 	bl	80012ec <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 8000c54:	f000 fb3e 	bl	80012d4 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8000c58:	4b3b      	ldr	r3, [pc, #236]	@ (8000d48 <MS5607UncompensatedRead+0x17c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8000c5e:	230a      	movs	r3, #10
 8000c60:	2201      	movs	r2, #1
 8000c62:	4939      	ldr	r1, [pc, #228]	@ (8000d48 <MS5607UncompensatedRead+0x17c>)
 8000c64:	4839      	ldr	r0, [pc, #228]	@ (8000d4c <MS5607UncompensatedRead+0x180>)
 8000c66:	f008 f9cd 	bl	8009004 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi4, reply, 3, 10);
 8000c6a:	f107 010c 	add.w	r1, r7, #12
 8000c6e:	230a      	movs	r3, #10
 8000c70:	2203      	movs	r2, #3
 8000c72:	4836      	ldr	r0, [pc, #216]	@ (8000d4c <MS5607UncompensatedRead+0x180>)
 8000c74:	f008 fbb4 	bl	80093e0 <HAL_SPI_Receive>

  disableCSB();
 8000c78:	f000 fb38 	bl	80012ec <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8000c7c:	7b3b      	ldrb	r3, [r7, #12]
 8000c7e:	041a      	lsls	r2, r3, #16
 8000c80:	7b7b      	ldrb	r3, [r7, #13]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	4313      	orrs	r3, r2
 8000c86:	7bba      	ldrb	r2, [r7, #14]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	601a      	str	r2, [r3, #0]

  enableCSB();
 8000c8e:	f000 fb21 	bl	80012d4 <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8000c92:	4b2f      	ldr	r3, [pc, #188]	@ (8000d50 <MS5607UncompensatedRead+0x184>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d48 <MS5607UncompensatedRead+0x17c>)
 8000c9e:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8000ca0:	230a      	movs	r3, #10
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4928      	ldr	r1, [pc, #160]	@ (8000d48 <MS5607UncompensatedRead+0x17c>)
 8000ca6:	4829      	ldr	r0, [pc, #164]	@ (8000d4c <MS5607UncompensatedRead+0x180>)
 8000ca8:	f008 f9ac 	bl	8009004 <HAL_SPI_Transmit>

  if(Temperature_OSR == 0x00)
 8000cac:	4b28      	ldr	r3, [pc, #160]	@ (8000d50 <MS5607UncompensatedRead+0x184>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d104      	bne.n	8000cbe <MS5607UncompensatedRead+0xf2>
//    HAL_Delay(1);
  ms5607_delay_func(1000);
 8000cb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cb8:	f7ff feee 	bl	8000a98 <ms5607_delay_func>
 8000cbc:	e01e      	b.n	8000cfc <MS5607UncompensatedRead+0x130>
  else if(Temperature_OSR == 0x02)
 8000cbe:	4b24      	ldr	r3, [pc, #144]	@ (8000d50 <MS5607UncompensatedRead+0x184>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d104      	bne.n	8000cd0 <MS5607UncompensatedRead+0x104>
//    HAL_Delay(2);
  ms5607_delay_func(2000);
 8000cc6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cca:	f7ff fee5 	bl	8000a98 <ms5607_delay_func>
 8000cce:	e015      	b.n	8000cfc <MS5607UncompensatedRead+0x130>
  else if(Temperature_OSR == 0x04)
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <MS5607UncompensatedRead+0x184>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d104      	bne.n	8000ce2 <MS5607UncompensatedRead+0x116>
//    HAL_Delay(3);
  ms5607_delay_func(3000);
 8000cd8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000cdc:	f7ff fedc 	bl	8000a98 <ms5607_delay_func>
 8000ce0:	e00c      	b.n	8000cfc <MS5607UncompensatedRead+0x130>
  else if(Temperature_OSR == 0x06)
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MS5607UncompensatedRead+0x184>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d104      	bne.n	8000cf4 <MS5607UncompensatedRead+0x128>
//    HAL_Delay(5);
  ms5607_delay_func(5000);
 8000cea:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cee:	f7ff fed3 	bl	8000a98 <ms5607_delay_func>
 8000cf2:	e003      	b.n	8000cfc <MS5607UncompensatedRead+0x130>
  else
//    HAL_Delay(10);
  ms5607_delay_func(10000);
 8000cf4:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000cf8:	f7ff fece 	bl	8000a98 <ms5607_delay_func>

  disableCSB();
 8000cfc:	f000 faf6 	bl	80012ec <disableCSB>


  enableCSB();
 8000d00:	f000 fae8 	bl	80012d4 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8000d04:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <MS5607UncompensatedRead+0x17c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	490e      	ldr	r1, [pc, #56]	@ (8000d48 <MS5607UncompensatedRead+0x17c>)
 8000d10:	480e      	ldr	r0, [pc, #56]	@ (8000d4c <MS5607UncompensatedRead+0x180>)
 8000d12:	f008 f977 	bl	8009004 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi4, reply, 3, 10);
 8000d16:	f107 010c 	add.w	r1, r7, #12
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	480b      	ldr	r0, [pc, #44]	@ (8000d4c <MS5607UncompensatedRead+0x180>)
 8000d20:	f008 fb5e 	bl	80093e0 <HAL_SPI_Receive>

  disableCSB();
 8000d24:	f000 fae2 	bl	80012ec <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8000d28:	7b3b      	ldrb	r3, [r7, #12]
 8000d2a:	041a      	lsls	r2, r3, #16
 8000d2c:	7b7b      	ldrb	r3, [r7, #13]
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	4313      	orrs	r3, r2
 8000d32:	7bba      	ldrb	r2, [r7, #14]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	605a      	str	r2, [r3, #4]
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	240001fd 	.word	0x240001fd
 8000d48:	240001fc 	.word	0x240001fc
 8000d4c:	240004a8 	.word	0x240004a8
 8000d50:	240001fe 	.word	0x240001fe

08000d54 <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607Readings *value){
 8000d54:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000d58:	b0d7      	sub	sp, #348	@ 0x15c
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8000d60:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t) (promData.tref << 8));
 8000d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	4bda      	ldr	r3, [pc, #872]	@ (80010d4 <MS5607Convert+0x380>)
 8000d6c:	895b      	ldrh	r3, [r3, #10]
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t) dT * promData.tempsens) >> 23);
 8000d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000d7a:	17da      	asrs	r2, r3, #31
 8000d7c:	469a      	mov	sl, r3
 8000d7e:	4693      	mov	fp, r2
 8000d80:	4bd4      	ldr	r3, [pc, #848]	@ (80010d4 <MS5607Convert+0x380>)
 8000d82:	899b      	ldrh	r3, [r3, #12]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2200      	movs	r2, #0
 8000d88:	4698      	mov	r8, r3
 8000d8a:	4691      	mov	r9, r2
 8000d8c:	fb08 f20b 	mul.w	r2, r8, fp
 8000d90:	fb0a f309 	mul.w	r3, sl, r9
 8000d94:	4413      	add	r3, r2
 8000d96:	fbaa 4508 	umull	r4, r5, sl, r8
 8000d9a:	442b      	add	r3, r5
 8000d9c:	461d      	mov	r5, r3
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	0de2      	lsrs	r2, r4, #23
 8000da8:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8000dac:	15eb      	asrs	r3, r5, #23
 8000dae:	4613      	mov	r3, r2
 8000db0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000db4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t) promData.off << 17) + (((int64_t) promData.tco * dT) >> 6);
 8000db8:	4bc6      	ldr	r3, [pc, #792]	@ (80010d4 <MS5607Convert+0x380>)
 8000dba:	889b      	ldrh	r3, [r3, #4]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000dc4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dc8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8000dcc:	460b      	mov	r3, r1
 8000dce:	0bdb      	lsrs	r3, r3, #15
 8000dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	045b      	lsls	r3, r3, #17
 8000dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8000ddc:	4bbd      	ldr	r3, [pc, #756]	@ (80010d4 <MS5607Convert+0x380>)
 8000dde:	891b      	ldrh	r3, [r3, #8]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	2200      	movs	r2, #0
 8000de4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000de8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000df0:	17da      	asrs	r2, r3, #31
 8000df2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000df6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000dfa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000dfe:	462b      	mov	r3, r5
 8000e00:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8000e04:	4642      	mov	r2, r8
 8000e06:	fb02 f203 	mul.w	r2, r2, r3
 8000e0a:	464b      	mov	r3, r9
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	fb01 f303 	mul.w	r3, r1, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	4622      	mov	r2, r4
 8000e16:	4641      	mov	r1, r8
 8000e18:	fba2 1201 	umull	r1, r2, r2, r1
 8000e1c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8000e20:	460a      	mov	r2, r1
 8000e22:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8000e26:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000e2a:	4413      	add	r3, r2
 8000e2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	098a      	lsrs	r2, r1, #6
 8000e40:	4629      	mov	r1, r5
 8000e42:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8000e46:	4629      	mov	r1, r5
 8000e48:	118b      	asrs	r3, r1, #6
 8000e4a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4e:	4621      	mov	r1, r4
 8000e50:	1889      	adds	r1, r1, r2
 8000e52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8000e54:	4629      	mov	r1, r5
 8000e56:	eb43 0101 	adc.w	r1, r3, r1
 8000e5a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8000e5c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000e60:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t) promData.sens << 16) + (((int64_t) promData.tcs * dT) >> 7);
 8000e64:	4b9b      	ldr	r3, [pc, #620]	@ (80010d4 <MS5607Convert+0x380>)
 8000e66:	885b      	ldrh	r3, [r3, #2]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000e70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000e74:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8000e78:	460b      	mov	r3, r1
 8000e7a:	0c1b      	lsrs	r3, r3, #16
 8000e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000e80:	460b      	mov	r3, r1
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000e88:	4b92      	ldr	r3, [pc, #584]	@ (80010d4 <MS5607Convert+0x380>)
 8000e8a:	88db      	ldrh	r3, [r3, #6]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e9c:	17da      	asrs	r2, r3, #31
 8000e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ea2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000ea6:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8000eaa:	462b      	mov	r3, r5
 8000eac:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000eb0:	4642      	mov	r2, r8
 8000eb2:	fb02 f203 	mul.w	r2, r2, r3
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	4621      	mov	r1, r4
 8000eba:	fb01 f303 	mul.w	r3, r1, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	4641      	mov	r1, r8
 8000ec4:	fba2 1201 	umull	r1, r2, r2, r1
 8000ec8:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8000ecc:	460a      	mov	r2, r1
 8000ece:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8000ed2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ee8:	4621      	mov	r1, r4
 8000eea:	09ca      	lsrs	r2, r1, #7
 8000eec:	4629      	mov	r1, r5
 8000eee:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	11cb      	asrs	r3, r1, #7
 8000ef6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000efa:	4621      	mov	r1, r4
 8000efc:	1889      	adds	r1, r1, r2
 8000efe:	6339      	str	r1, [r7, #48]	@ 0x30
 8000f00:	4629      	mov	r1, r5
 8000f02:	eb43 0101 	adc.w	r1, r3, r1
 8000f06:	6379      	str	r1, [r7, #52]	@ 0x34
 8000f08:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000f0c:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000) {
 8000f10:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000f14:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f18:	f280 8152 	bge.w	80011c0 <MS5607Convert+0x46c>
    int32_t T2 = ((int64_t) dT * (int64_t) dT) >> 31;
 8000f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f20:	17da      	asrs	r2, r3, #31
 8000f22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f26:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f2e:	17da      	asrs	r2, r3, #31
 8000f30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000f34:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8000f38:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8000f3c:	462b      	mov	r3, r5
 8000f3e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8000f42:	4642      	mov	r2, r8
 8000f44:	fb02 f203 	mul.w	r2, r2, r3
 8000f48:	464b      	mov	r3, r9
 8000f4a:	4621      	mov	r1, r4
 8000f4c:	fb01 f303 	mul.w	r3, r1, r3
 8000f50:	4413      	add	r3, r2
 8000f52:	4622      	mov	r2, r4
 8000f54:	4641      	mov	r1, r8
 8000f56:	fba2 1201 	umull	r1, r2, r2, r1
 8000f5a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8000f5e:	460a      	mov	r2, r1
 8000f60:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8000f64:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8000f68:	4413      	add	r3, r2
 8000f6a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	0fca      	lsrs	r2, r1, #31
 8000f7e:	4629      	mov	r1, r5
 8000f80:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000f84:	4629      	mov	r1, r5
 8000f86:	17cb      	asrs	r3, r1, #31
 8000f88:	4613      	mov	r3, r2
 8000f8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 8000f8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000f92:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8000f96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t) TEMPM * (int64_t) TEMPM) >> 4;
 8000f9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f9e:	17da      	asrs	r2, r3, #31
 8000fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000fa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000fa8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000fac:	17da      	asrs	r2, r3, #31
 8000fae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000fb2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000fb6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8000fba:	462b      	mov	r3, r5
 8000fbc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	fb02 f203 	mul.w	r2, r2, r3
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	4621      	mov	r1, r4
 8000fca:	fb01 f303 	mul.w	r3, r1, r3
 8000fce:	4413      	add	r3, r2
 8000fd0:	4622      	mov	r2, r4
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	fba2 1201 	umull	r1, r2, r2, r1
 8000fd8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000fdc:	460a      	mov	r2, r1
 8000fde:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000fe2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000fe6:	4413      	add	r3, r2
 8000fe8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000fec:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	462b      	mov	r3, r5
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	f04f 0100 	mov.w	r1, #0
 8000ffc:	0119      	lsls	r1, r3, #4
 8000ffe:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001002:	0110      	lsls	r0, r2, #4
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4621      	mov	r1, r4
 800100a:	1a51      	subs	r1, r2, r1
 800100c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800100e:	4629      	mov	r1, r5
 8001010:	eb63 0301 	sbc.w	r3, r3, r1
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001022:	4649      	mov	r1, r9
 8001024:	008b      	lsls	r3, r1, #2
 8001026:	4641      	mov	r1, r8
 8001028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800102c:	4641      	mov	r1, r8
 800102e:	008a      	lsls	r2, r1, #2
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	4603      	mov	r3, r0
 8001036:	4622      	mov	r2, r4
 8001038:	189b      	adds	r3, r3, r2
 800103a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800103c:	462b      	mov	r3, r5
 800103e:	460a      	mov	r2, r1
 8001040:	eb42 0303 	adc.w	r3, r2, r3
 8001044:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	f04f 0300 	mov.w	r3, #0
 800104e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001052:	4621      	mov	r1, r4
 8001054:	090a      	lsrs	r2, r1, #4
 8001056:	4629      	mov	r1, r5
 8001058:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800105c:	4629      	mov	r1, r5
 800105e:	110b      	asrs	r3, r1, #4
 8001060:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t) TEMPM * (int64_t) TEMPM;
 8001064:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001068:	17da      	asrs	r2, r3, #31
 800106a:	673b      	str	r3, [r7, #112]	@ 0x70
 800106c:	677a      	str	r2, [r7, #116]	@ 0x74
 800106e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001072:	17da      	asrs	r2, r3, #31
 8001074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001076:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001078:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800107c:	462b      	mov	r3, r5
 800107e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001082:	4642      	mov	r2, r8
 8001084:	fb02 f203 	mul.w	r2, r2, r3
 8001088:	464b      	mov	r3, r9
 800108a:	4621      	mov	r1, r4
 800108c:	fb01 f303 	mul.w	r3, r1, r3
 8001090:	4413      	add	r3, r2
 8001092:	4622      	mov	r2, r4
 8001094:	4641      	mov	r1, r8
 8001096:	fba2 1201 	umull	r1, r2, r2, r1
 800109a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800109e:	460a      	mov	r2, r1
 80010a0:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80010a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80010a8:	4413      	add	r3, r2
 80010aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80010ae:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80010b2:	460b      	mov	r3, r1
 80010b4:	18db      	adds	r3, r3, r3
 80010b6:	623b      	str	r3, [r7, #32]
 80010b8:	4613      	mov	r3, r2
 80010ba:	eb42 0303 	adc.w	r3, r2, r3
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80010c4:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500) {
 80010c8:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80010cc:	4b02      	ldr	r3, [pc, #8]	@ (80010d8 <MS5607Convert+0x384>)
 80010ce:	429a      	cmp	r2, r3
 80010d0:	da55      	bge.n	800117e <MS5607Convert+0x42a>
 80010d2:	e003      	b.n	80010dc <MS5607Convert+0x388>
 80010d4:	24000200 	.word	0x24000200
 80010d8:	fffffa24 	.word	0xfffffa24
      int32_t TEMPP = TEMP + 1500;
 80010dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80010e0:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80010e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 80010e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80010ec:	fb03 f303 	mul.w	r3, r3, r3
 80010f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t) 15 * TEMPP2;
 80010f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80010f8:	17da      	asrs	r2, r3, #31
 80010fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80010fc:	667a      	str	r2, [r7, #100]	@ 0x64
 80010fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001102:	4622      	mov	r2, r4
 8001104:	462b      	mov	r3, r5
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	f04f 0100 	mov.w	r1, #0
 800110e:	0119      	lsls	r1, r3, #4
 8001110:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001114:	0110      	lsls	r0, r2, #4
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4621      	mov	r1, r4
 800111c:	1a51      	subs	r1, r2, r1
 800111e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001120:	4629      	mov	r1, r5
 8001122:	eb63 0301 	sbc.w	r3, r3, r1
 8001126:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001128:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800112c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001130:	4621      	mov	r1, r4
 8001132:	1851      	adds	r1, r2, r1
 8001134:	61b9      	str	r1, [r7, #24]
 8001136:	4629      	mov	r1, r5
 8001138:	eb43 0101 	adc.w	r1, r3, r1
 800113c:	61f9      	str	r1, [r7, #28]
 800113e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001142:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t) 8 * TEMPP2;
 8001146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800114a:	17da      	asrs	r2, r3, #31
 800114c:	653b      	str	r3, [r7, #80]	@ 0x50
 800114e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	f04f 0100 	mov.w	r1, #0
 8001158:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800115c:	462b      	mov	r3, r5
 800115e:	00d9      	lsls	r1, r3, #3
 8001160:	4623      	mov	r3, r4
 8001162:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001166:	4623      	mov	r3, r4
 8001168:	00d8      	lsls	r0, r3, #3
 800116a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800116e:	1814      	adds	r4, r2, r0
 8001170:	613c      	str	r4, [r7, #16]
 8001172:	414b      	adcs	r3, r1
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800117a:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 800117e:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8001182:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 800118c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8001190:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001194:	1a84      	subs	r4, r0, r2
 8001196:	60bc      	str	r4, [r7, #8]
 8001198:	eb61 0303 	sbc.w	r3, r1, r3
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80011a2:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 80011a6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80011aa:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80011ae:	1a84      	subs	r4, r0, r2
 80011b0:	603c      	str	r4, [r7, #0]
 80011b2:	eb61 0303 	sbc.w	r3, r1, r3
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011bc:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t) sample->pressure * SENS) >> 21) - OFF) >> 15;
 80011c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2200      	movs	r2, #0
 80011c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80011cc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80011d0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80011d4:	462a      	mov	r2, r5
 80011d6:	fb02 f203 	mul.w	r2, r2, r3
 80011da:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80011de:	4621      	mov	r1, r4
 80011e0:	fb01 f303 	mul.w	r3, r1, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80011ea:	4621      	mov	r1, r4
 80011ec:	fba2 1201 	umull	r1, r2, r2, r1
 80011f0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80011f4:	460a      	mov	r2, r1
 80011f6:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80011fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80011fe:	4413      	add	r3, r2
 8001200:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001210:	4621      	mov	r1, r4
 8001212:	0d4a      	lsrs	r2, r1, #21
 8001214:	4629      	mov	r1, r5
 8001216:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800121a:	4629      	mov	r1, r5
 800121c:	154b      	asrs	r3, r1, #21
 800121e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8001222:	1a14      	subs	r4, r2, r0
 8001224:	643c      	str	r4, [r7, #64]	@ 0x40
 8001226:	eb63 0301 	sbc.w	r3, r3, r1
 800122a:	647b      	str	r3, [r7, #68]	@ 0x44
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001238:	4621      	mov	r1, r4
 800123a:	0bca      	lsrs	r2, r1, #15
 800123c:	4629      	mov	r1, r5
 800123e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001242:	4629      	mov	r1, r5
 8001244:	13cb      	asrs	r3, r1, #15
 8001246:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800124a:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 800124c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001250:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8001254:	605a      	str	r2, [r3, #4]
}
 8001256:	bf00      	nop
 8001258:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800125c:	46bd      	mov	sp, r7
 800125e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001262:	4770      	bx	lr

08001264 <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void){
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MS5607Update+0x18>)
 800126a:	f7ff fcaf 	bl	8000bcc <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 800126e:	4904      	ldr	r1, [pc, #16]	@ (8001280 <MS5607Update+0x1c>)
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <MS5607Update+0x18>)
 8001272:	f7ff fd6f 	bl	8000d54 <MS5607Convert>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	24000210 	.word	0x24000210
 8001280:	24000218 	.word	0x24000218
 8001284:	00000000 	.word	0x00000000

08001288 <MS5607GetTemperatureC>:

/* Gets the temperature from the sensor reading */
double MS5607GetTemperatureC(void){
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return (double)readings.temperature/(double)100.0;
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <MS5607GetTemperatureC+0x30>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001298:	ed9f 6b05 	vldr	d6, [pc, #20]	@ 80012b0 <MS5607GetTemperatureC+0x28>
 800129c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80012a0:	eeb0 7b45 	vmov.f64	d7, d5
}
 80012a4:	eeb0 0b47 	vmov.f64	d0, d7
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40590000 	.word	0x40590000
 80012b8:	24000218 	.word	0x24000218

080012bc <MS5607GetPressurePa>:

/* Gets the pressure from the sensor reading */
int32_t MS5607GetPressurePa(void){
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return readings.pressure;
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <MS5607GetPressurePa+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	24000218 	.word	0x24000218

080012d4 <enableCSB>:

/* Sets the CS pin */
void enableCSB(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2110      	movs	r1, #16
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <enableCSB+0x14>)
 80012de:	f002 fce7 	bl	8003cb0 <HAL_GPIO_WritePin>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	58021000 	.word	0x58021000

080012ec <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2110      	movs	r1, #16
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <disableCSB+0x14>)
 80012f6:	f002 fcdb 	bl	8003cb0 <HAL_GPIO_WritePin>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	58021000 	.word	0x58021000
 8001304:	00000000 	.word	0x00000000

08001308 <calculate_altitude>:
void MS5607SetPressureOSR(MS5607OSRFactors pOSR){
  Pressure_OSR = pOSR;
}

// Function to calculate altitude from pressure and temperature
double calculate_altitude(double pressure, double temperature_celsius) {
 8001308:	b580      	push	{r7, lr}
 800130a:	ed2d 8b02 	vpush	{d8}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	ed87 0b02 	vstr	d0, [r7, #8]
 8001316:	ed87 1b00 	vstr	d1, [r7]
	//Method 1 : Variables to tweak
    double temperature_kelvin = temperature_celsius + 273.15; // Convert temperature to Kelvin
 800131a:	ed97 7b00 	vldr	d7, [r7]
 800131e:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8001378 <calculate_altitude+0x70>
 8001322:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001326:	ed87 7b06 	vstr	d7, [r7, #24]
    double altitude = (temperature_kelvin / TEMP_LAPSE_RATE) *
 800132a:	ed97 7b06 	vldr	d7, [r7, #24]
 800132e:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8001380 <calculate_altitude+0x78>
 8001332:	ee87 8b06 	vdiv.f64	d8, d7, d6
                      (1 - pow((pressure / SEA_LEVEL_PRESSURE), (GRAVITY * MOLAR_MASS) / (GAS_CONSTANT * TEMP_LAPSE_RATE)));
 8001336:	ed97 7b02 	vldr	d7, [r7, #8]
 800133a:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 8001388 <calculate_altitude+0x80>
 800133e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001342:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8001390 <calculate_altitude+0x88>
 8001346:	eeb0 0b46 	vmov.f64	d0, d6
 800134a:	f010 fc9d 	bl	8011c88 <pow>
 800134e:	eeb0 7b40 	vmov.f64	d7, d0
 8001352:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001356:	ee36 7b47 	vsub.f64	d7, d6, d7
    double altitude = (temperature_kelvin / TEMP_LAPSE_RATE) *
 800135a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800135e:	ed87 7b04 	vstr	d7, [r7, #16]

	//Method 2 : Not accurate
	//double altitude = ((((((10 * log10((pressure / 100.0) / 1013.25)) / 5.2558797) - 1) / (-6.8755856 * pow(10, -6))) / 1000) * 0.30);

	return altitude;
 8001362:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001366:	ec43 2b17 	vmov	d7, r2, r3
}
 800136a:	eeb0 0b47 	vmov.f64	d0, d7
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	ecbd 8b02 	vpop	{d8}
 8001376:	bd80      	pop	{r7, pc}
 8001378:	66666666 	.word	0x66666666
 800137c:	40711266 	.word	0x40711266
 8001380:	bc01a36e 	.word	0xbc01a36e
 8001384:	3f841205 	.word	0x3f841205
 8001388:	00000000 	.word	0x00000000
 800138c:	40f8bcd0 	.word	0x40f8bcd0
 8001390:	15fe261c 	.word	0x15fe261c
 8001394:	400be369 	.word	0x400be369

08001398 <MS5607_ReadData>:


Barometer_2_Axis MS5607_ReadData(){
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	Barometer_2_Axis data = {0};
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	615a      	str	r2, [r3, #20]
	MS5607UncompensatedRead(&uncompValues);
 80013b2:	4819      	ldr	r0, [pc, #100]	@ (8001418 <MS5607_ReadData+0x80>)
 80013b4:	f7ff fc0a 	bl	8000bcc <MS5607UncompensatedRead>
	MS5607Convert(&uncompValues, &readings);
 80013b8:	4918      	ldr	r1, [pc, #96]	@ (800141c <MS5607_ReadData+0x84>)
 80013ba:	4817      	ldr	r0, [pc, #92]	@ (8001418 <MS5607_ReadData+0x80>)
 80013bc:	f7ff fcca 	bl	8000d54 <MS5607Convert>
	data.temperature = MS5607GetTemperatureC();
 80013c0:	f7ff ff62 	bl	8001288 <MS5607GetTemperatureC>
 80013c4:	eeb0 7b40 	vmov.f64	d7, d0
 80013c8:	ed87 7b04 	vstr	d7, [r7, #16]
	data.pressure = MS5607GetPressurePa();
 80013cc:	f7ff ff76 	bl	80012bc <MS5607GetPressurePa>
 80013d0:	4603      	mov	r3, r0
 80013d2:	60bb      	str	r3, [r7, #8]
	data.altitude = calculate_altitude(data.pressure, data.temperature);
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013de:	ed97 6b04 	vldr	d6, [r7, #16]
 80013e2:	eeb0 1b46 	vmov.f64	d1, d6
 80013e6:	eeb0 0b47 	vmov.f64	d0, d7
 80013ea:	f7ff ff8d 	bl	8001308 <calculate_altitude>
 80013ee:	eeb0 7b40 	vmov.f64	d7, d0
 80013f2:	ed87 7b06 	vstr	d7, [r7, #24]
	MS5607Update();
 80013f6:	f7ff ff35 	bl	8001264 <MS5607Update>
	return data;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	461d      	mov	r5, r3
 80013fe:	f107 0408 	add.w	r4, r7, #8
 8001402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800140a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bdb0      	pop	{r4, r5, r7, pc}
 8001416:	bf00      	nop
 8001418:	24000210 	.word	0x24000210
 800141c:	24000218 	.word	0x24000218

08001420 <ms5607_print_barometer_data>:


void ms5607_print_barometer_data(Barometer_2_Axis *data) {
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af02      	add	r7, sp, #8
 8001426:	6078      	str	r0, [r7, #4]
	printf("MS5607 Barometer: \n");
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <ms5607_print_barometer_data+0x3c>)
 800142a:	f00d f873 	bl	800e514 <puts>
	printf("Pressure: %ld Pa, Temperature: %f degC, Altitude: %f meters \n", data->pressure, data->temperature, data->altitude);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681c      	ldr	r4, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800143e:	e9cd 2300 	strd	r2, r3, [sp]
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4621      	mov	r1, r4
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <ms5607_print_barometer_data+0x40>)
 800144a:	f00c fffb 	bl	800e444 <iprintf>
    printf("----- \n");
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <ms5607_print_barometer_data+0x44>)
 8001450:	f00d f860 	bl	800e514 <puts>
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	08012228 	.word	0x08012228
 8001460:	0801223c 	.word	0x0801223c
 8001464:	0801227c 	.word	0x0801227c

08001468 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001470:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001474:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001480:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001484:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001488:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001490:	e000      	b.n	8001494 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001492:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001494:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f9      	beq.n	8001492 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800149e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
	int i=0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e009      	b.n	80014e0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ffc7 	bl	8001468 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbf1      	blt.n	80014cc <_write+0x16>
	}
	return len;
 80014e8:	687b      	ldr	r3, [r7, #4]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80014f6:	f000 fc2b 	bl	8001d50 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fa:	f001 fa77 	bl	80029ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fe:	f000 f81d 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001502:	f000 fb13 	bl	8001b2c <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8001506:	f000 f947 	bl	8001798 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 800150a:	f000 f885 	bl	8001618 <MX_I2C1_Init>
  MX_I2C2_Init();
 800150e:	f000 f8c3 	bl	8001698 <MX_I2C2_Init>
  MX_I2C4_Init();
 8001512:	f000 f901 	bl	8001718 <MX_I2C4_Init>
  MX_SPI1_Init();
 8001516:	f000 f95d 	bl	80017d4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800151a:	f000 f9b1 	bl	8001880 <MX_SPI2_Init>
  MX_UART8_Init();
 800151e:	f000 fa5b 	bl	80019d8 <MX_UART8_Init>
  MX_USART1_Init();
 8001522:	f000 faa5 	bl	8001a70 <MX_USART1_Init>
  MX_SPI4_Init();
 8001526:	f000 fa01 	bl	800192c <MX_SPI4_Init>
  MX_FATFS_Init();
 800152a:	f00b fe8d 	bl	800d248 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
  SensorManager_Init();
 800152e:	f001 f97d 	bl	800282c <SensorManager_Init>
  TestTelemetry();
 8001532:	f001 fa0b 	bl	800294c <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001536:	bf00      	nop
 8001538:	e7fd      	b.n	8001536 <main+0x44>
	...

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b09c      	sub	sp, #112	@ 0x70
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	224c      	movs	r2, #76	@ 0x4c
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f00d f8e2 	bl	800e714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2220      	movs	r2, #32
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f00d f8dc 	bl	800e714 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800155c:	2002      	movs	r0, #2
 800155e:	f002 fcf5 	bl	8003f4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <SystemClock_Config+0xd8>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4a2a      	ldr	r2, [pc, #168]	@ (8001614 <SystemClock_Config+0xd8>)
 800156c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001570:	6193      	str	r3, [r2, #24]
 8001572:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <SystemClock_Config+0xd8>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800157e:	bf00      	nop
 8001580:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <SystemClock_Config+0xd8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800158c:	d1f8      	bne.n	8001580 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158e:	2301      	movs	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001592:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001598:	2302      	movs	r3, #2
 800159a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159c:	2302      	movs	r3, #2
 800159e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80015a0:	2303      	movs	r3, #3
 80015a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 80015a4:	231f      	movs	r3, #31
 80015a6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015b4:	230c      	movs	r3, #12
 80015b6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 80015bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fcfa 	bl	8003fc0 <HAL_RCC_OscConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015d2:	f000 fbe9 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d6:	233f      	movs	r3, #63	@ 0x3f
 80015d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015da:	2303      	movs	r3, #3
 80015dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015e2:	2308      	movs	r3, #8
 80015e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015e6:	2340      	movs	r3, #64	@ 0x40
 80015e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015ea:	2340      	movs	r3, #64	@ 0x40
 80015ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015f4:	2340      	movs	r3, #64	@ 0x40
 80015f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2103      	movs	r1, #3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 f8b9 	bl	8004774 <HAL_RCC_ClockConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001608:	f000 fbce 	bl	8001da8 <Error_Handler>
  }
}
 800160c:	bf00      	nop
 800160e:	3770      	adds	r7, #112	@ 0x70
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	58024800 	.word	0x58024800

08001618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800161c:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <MX_I2C1_Init+0x74>)
 800161e:	4a1c      	ldr	r2, [pc, #112]	@ (8001690 <MX_I2C1_Init+0x78>)
 8001620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 8001622:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_I2C1_Init+0x74>)
 8001624:	4a1b      	ldr	r2, [pc, #108]	@ (8001694 <MX_I2C1_Init+0x7c>)
 8001626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162e:	4b17      	ldr	r3, [pc, #92]	@ (800168c <MX_I2C1_Init+0x74>)
 8001630:	2201      	movs	r2, #1
 8001632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001634:	4b15      	ldr	r3, [pc, #84]	@ (800168c <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800163a:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_I2C1_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <MX_I2C1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_I2C1_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <MX_I2C1_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001652:	480e      	ldr	r0, [pc, #56]	@ (800168c <MX_I2C1_Init+0x74>)
 8001654:	f002 fb46 	bl	8003ce4 <HAL_I2C_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800165e:	f000 fba3 	bl	8001da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001662:	2100      	movs	r1, #0
 8001664:	4809      	ldr	r0, [pc, #36]	@ (800168c <MX_I2C1_Init+0x74>)
 8001666:	f002 fbd9 	bl	8003e1c <HAL_I2CEx_ConfigAnalogFilter>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001670:	f000 fb9a 	bl	8001da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_I2C1_Init+0x74>)
 8001678:	f002 fc1b 	bl	8003eb2 <HAL_I2CEx_ConfigDigitalFilter>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001682:	f000 fb91 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	24000220 	.word	0x24000220
 8001690:	40005400 	.word	0x40005400
 8001694:	20a0a3f6 	.word	0x20a0a3f6

08001698 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <MX_I2C2_Init+0x74>)
 800169e:	4a1c      	ldr	r2, [pc, #112]	@ (8001710 <MX_I2C2_Init+0x78>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_I2C2_Init+0x74>)
 80016a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001714 <MX_I2C2_Init+0x7c>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <MX_I2C2_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <MX_I2C2_Init+0x74>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <MX_I2C2_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016ba:	4b14      	ldr	r3, [pc, #80]	@ (800170c <MX_I2C2_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <MX_I2C2_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_I2C2_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <MX_I2C2_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016d2:	480e      	ldr	r0, [pc, #56]	@ (800170c <MX_I2C2_Init+0x74>)
 80016d4:	f002 fb06 	bl	8003ce4 <HAL_I2C_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016de:	f000 fb63 	bl	8001da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4809      	ldr	r0, [pc, #36]	@ (800170c <MX_I2C2_Init+0x74>)
 80016e6:	f002 fb99 	bl	8003e1c <HAL_I2CEx_ConfigAnalogFilter>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016f0:	f000 fb5a 	bl	8001da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016f4:	2100      	movs	r1, #0
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_I2C2_Init+0x74>)
 80016f8:	f002 fbdb 	bl	8003eb2 <HAL_I2CEx_ConfigDigitalFilter>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001702:	f000 fb51 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	24000274 	.word	0x24000274
 8001710:	40005800 	.word	0x40005800
 8001714:	20a0a3f6 	.word	0x20a0a3f6

08001718 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <MX_I2C4_Init+0x74>)
 800171e:	4a1c      	ldr	r2, [pc, #112]	@ (8001790 <MX_I2C4_Init+0x78>)
 8001720:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_I2C4_Init+0x74>)
 8001724:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <MX_I2C4_Init+0x7c>)
 8001726:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <MX_I2C4_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172e:	4b17      	ldr	r3, [pc, #92]	@ (800178c <MX_I2C4_Init+0x74>)
 8001730:	2201      	movs	r2, #1
 8001732:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <MX_I2C4_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <MX_I2C4_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <MX_I2C4_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_I2C4_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_I2C4_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001752:	480e      	ldr	r0, [pc, #56]	@ (800178c <MX_I2C4_Init+0x74>)
 8001754:	f002 fac6 	bl	8003ce4 <HAL_I2C_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800175e:	f000 fb23 	bl	8001da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001766:	4809      	ldr	r0, [pc, #36]	@ (800178c <MX_I2C4_Init+0x74>)
 8001768:	f002 fb58 	bl	8003e1c <HAL_I2CEx_ConfigAnalogFilter>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8001772:	f000 fb19 	bl	8001da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4804      	ldr	r0, [pc, #16]	@ (800178c <MX_I2C4_Init+0x74>)
 800177a:	f002 fb9a 	bl	8003eb2 <HAL_I2CEx_ConfigDigitalFilter>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8001784:	f000 fb10 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	240002c8 	.word	0x240002c8
 8001790:	58001c00 	.word	0x58001c00
 8001794:	60405858 	.word	0x60405858

08001798 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <MX_SDMMC1_SD_Init+0x34>)
 800179e:	4a0c      	ldr	r2, [pc, #48]	@ (80017d0 <MX_SDMMC1_SD_Init+0x38>)
 80017a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <MX_SDMMC1_SD_Init+0x34>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <MX_SDMMC1_SD_Init+0x34>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <MX_SDMMC1_SD_Init+0x34>)
 80017b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017b4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <MX_SDMMC1_SD_Init+0x34>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <MX_SDMMC1_SD_Init+0x34>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	2400031c 	.word	0x2400031c
 80017d0:	52007000 	.word	0x52007000

080017d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017d8:	4b27      	ldr	r3, [pc, #156]	@ (8001878 <MX_SPI1_Init+0xa4>)
 80017da:	4a28      	ldr	r2, [pc, #160]	@ (800187c <MX_SPI1_Init+0xa8>)
 80017dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017de:	4b26      	ldr	r3, [pc, #152]	@ (8001878 <MX_SPI1_Init+0xa4>)
 80017e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017e6:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <MX_SPI1_Init+0xa4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <MX_SPI1_Init+0xa4>)
 80017ee:	2207      	movs	r2, #7
 80017f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f2:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <MX_SPI1_Init+0xa4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <MX_SPI1_Init+0xa4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001800:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001806:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001808:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800180c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800180e:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181a:	4b17      	ldr	r3, [pc, #92]	@ (8001878 <MX_SPI1_Init+0xa4>)
 800181c:	2200      	movs	r2, #0
 800181e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001820:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001822:	2200      	movs	r2, #0
 8001824:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001826:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001828:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001834:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <MX_SPI1_Init+0xa4>)
 800183c:	2200      	movs	r2, #0
 800183e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001840:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800184c:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <MX_SPI1_Init+0xa4>)
 800184e:	2200      	movs	r2, #0
 8001850:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001854:	2200      	movs	r2, #0
 8001856:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001858:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <MX_SPI1_Init+0xa4>)
 800185a:	2200      	movs	r2, #0
 800185c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001860:	2200      	movs	r2, #0
 8001862:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001864:	4804      	ldr	r0, [pc, #16]	@ (8001878 <MX_SPI1_Init+0xa4>)
 8001866:	f007 faa9 	bl	8008dbc <HAL_SPI_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001870:	f000 fa9a 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	24000398 	.word	0x24000398
 800187c:	40013000 	.word	0x40013000

08001880 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001884:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <MX_SPI2_Init+0xa4>)
 8001886:	4a28      	ldr	r2, [pc, #160]	@ (8001928 <MX_SPI2_Init+0xa8>)
 8001888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800188a:	4b26      	ldr	r3, [pc, #152]	@ (8001924 <MX_SPI2_Init+0xa4>)
 800188c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001892:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <MX_SPI2_Init+0xa4>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <MX_SPI2_Init+0xa4>)
 800189a:	2207      	movs	r2, #7
 800189c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018b4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80018b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c0:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c6:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018d2:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018da:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018e0:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <MX_SPI2_Init+0xa4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <MX_SPI2_Init+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001904:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <MX_SPI2_Init+0xa4>)
 8001906:	2200      	movs	r2, #0
 8001908:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <MX_SPI2_Init+0xa4>)
 800190c:	2200      	movs	r2, #0
 800190e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	@ (8001924 <MX_SPI2_Init+0xa4>)
 8001912:	f007 fa53 	bl	8008dbc <HAL_SPI_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800191c:	f000 fa44 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	24000420 	.word	0x24000420
 8001928:	40003800 	.word	0x40003800

0800192c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001930:	4b27      	ldr	r3, [pc, #156]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001932:	4a28      	ldr	r2, [pc, #160]	@ (80019d4 <MX_SPI4_Init+0xa8>)
 8001934:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001938:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800193c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800193e:	4b24      	ldr	r3, [pc, #144]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001944:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001946:	2207      	movs	r2, #7
 8001948:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800194a:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001950:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001956:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001958:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800195c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800195e:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001960:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001964:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001966:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800196c:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001972:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001974:	2200      	movs	r2, #0
 8001976:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001978:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 800197a:	2200      	movs	r2, #0
 800197c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800197e:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001980:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001984:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800198c:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001992:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001998:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800199e:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	@ (80019d0 <MX_SPI4_Init+0xa4>)
 80019be:	f007 f9fd 	bl	8008dbc <HAL_SPI_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80019c8:	f000 f9ee 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	240004a8 	.word	0x240004a8
 80019d4:	40013400 	.word	0x40013400

080019d8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80019dc:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <MX_UART8_Init+0x90>)
 80019de:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <MX_UART8_Init+0x94>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80019e2:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <MX_UART8_Init+0x90>)
 80019e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019e8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <MX_UART8_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <MX_UART8_Init+0x90>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <MX_UART8_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <MX_UART8_Init+0x90>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <MX_UART8_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <MX_UART8_Init+0x90>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <MX_UART8_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <MX_UART8_Init+0x90>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <MX_UART8_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001a20:	4811      	ldr	r0, [pc, #68]	@ (8001a68 <MX_UART8_Init+0x90>)
 8001a22:	f008 f838 	bl	8009a96 <HAL_UART_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001a2c:	f000 f9bc 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a30:	2100      	movs	r1, #0
 8001a32:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <MX_UART8_Init+0x90>)
 8001a34:	f009 fd7e 	bl	800b534 <HAL_UARTEx_SetTxFifoThreshold>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001a3e:	f000 f9b3 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4808      	ldr	r0, [pc, #32]	@ (8001a68 <MX_UART8_Init+0x90>)
 8001a46:	f009 fdb3 	bl	800b5b0 <HAL_UARTEx_SetRxFifoThreshold>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001a50:	f000 f9aa 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <MX_UART8_Init+0x90>)
 8001a56:	f009 fd34 	bl	800b4c2 <HAL_UARTEx_DisableFifoMode>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001a60:	f000 f9a2 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	24000530 	.word	0x24000530
 8001a6c:	40007c00 	.word	0x40007c00

08001a70 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001a74:	4b2b      	ldr	r3, [pc, #172]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001a76:	4a2c      	ldr	r2, [pc, #176]	@ (8001b28 <MX_USART1_Init+0xb8>)
 8001a78:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001a82:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001a88:	4b26      	ldr	r3, [pc, #152]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001a8e:	4b25      	ldr	r3, [pc, #148]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001a94:	4b23      	ldr	r3, [pc, #140]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001a9a:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001aa0:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001ab8:	481a      	ldr	r0, [pc, #104]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001aba:	f009 fe05 	bl	800b6c8 <HAL_USART_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8001ac4:	f000 f970 	bl	8001da8 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4816      	ldr	r0, [pc, #88]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001acc:	f00a fd2c 	bl	800c528 <HAL_USARTEx_SetTxFifoThreshold>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001ad6:	f000 f967 	bl	8001da8 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4811      	ldr	r0, [pc, #68]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001ade:	f00a fd61 	bl	800c5a4 <HAL_USARTEx_SetRxFifoThreshold>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8001ae8:	f000 f95e 	bl	8001da8 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8001aec:	2100      	movs	r1, #0
 8001aee:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001af0:	f00a fca4 	bl	800c43c <HAL_USARTEx_ConfigNSS>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8001afa:	f000 f955 	bl	8001da8 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8001afe:	4809      	ldr	r0, [pc, #36]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001b00:	f00a fcd9 	bl	800c4b6 <HAL_USARTEx_DisableFifoMode>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 8001b0a:	f000 f94d 	bl	8001da8 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_USART1_Init+0xb4>)
 8001b10:	f00a fc3f 	bl	800c392 <HAL_USARTEx_EnableSlaveMode>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART1_Init+0xae>
  {
    Error_Handler();
 8001b1a:	f000 f945 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	240005c4 	.word	0x240005c4
 8001b28:	40011000 	.word	0x40011000

08001b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	@ 0x30
 8001b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	4b7d      	ldr	r3, [pc, #500]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b48:	4a7b      	ldr	r2, [pc, #492]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b52:	4b79      	ldr	r3, [pc, #484]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b60:	4b75      	ldr	r3, [pc, #468]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b66:	4a74      	ldr	r2, [pc, #464]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b70:	4b71      	ldr	r3, [pc, #452]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b84:	4a6c      	ldr	r2, [pc, #432]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b66      	ldr	r3, [pc, #408]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba2:	4a65      	ldr	r2, [pc, #404]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bac:	4b62      	ldr	r3, [pc, #392]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bba:	4b5f      	ldr	r3, [pc, #380]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc0:	4a5d      	ldr	r2, [pc, #372]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001bc2:	f043 0308 	orr.w	r3, r3, #8
 8001bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bca:	4b5b      	ldr	r3, [pc, #364]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd8:	4b57      	ldr	r3, [pc, #348]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bde:	4a56      	ldr	r2, [pc, #344]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be8:	4b53      	ldr	r3, [pc, #332]	@ (8001d38 <MX_GPIO_Init+0x20c>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	4850      	ldr	r0, [pc, #320]	@ (8001d3c <MX_GPIO_Init+0x210>)
 8001bfc:	f002 f858 	bl	8003cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2110      	movs	r1, #16
 8001c04:	484e      	ldr	r0, [pc, #312]	@ (8001d40 <MX_GPIO_Init+0x214>)
 8001c06:	f002 f853 	bl	8003cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001c10:	484c      	ldr	r0, [pc, #304]	@ (8001d44 <MX_GPIO_Init+0x218>)
 8001c12:	f002 f84d 	bl	8003cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001c16:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4847      	ldr	r0, [pc, #284]	@ (8001d48 <MX_GPIO_Init+0x21c>)
 8001c2c:	f001 fe80 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001c30:	2310      	movs	r3, #16
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	483d      	ldr	r0, [pc, #244]	@ (8001d3c <MX_GPIO_Init+0x210>)
 8001c48:	f001 fe72 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c50:	2303      	movs	r3, #3
 8001c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	483b      	ldr	r0, [pc, #236]	@ (8001d4c <MX_GPIO_Init+0x220>)
 8001c60:	f001 fe66 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c64:	2308      	movs	r3, #8
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4834      	ldr	r0, [pc, #208]	@ (8001d48 <MX_GPIO_Init+0x21c>)
 8001c78:	f001 fe5a 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	482b      	ldr	r0, [pc, #172]	@ (8001d40 <MX_GPIO_Init+0x214>)
 8001c94:	f001 fe4c 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4826      	ldr	r0, [pc, #152]	@ (8001d44 <MX_GPIO_Init+0x218>)
 8001cac:	f001 fe40 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8001cb0:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481d      	ldr	r0, [pc, #116]	@ (8001d3c <MX_GPIO_Init+0x210>)
 8001cc6:	f001 fe33 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 8001cca:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4818      	ldr	r0, [pc, #96]	@ (8001d44 <MX_GPIO_Init+0x218>)
 8001ce4:	f001 fe24 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ce8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480f      	ldr	r0, [pc, #60]	@ (8001d3c <MX_GPIO_Init+0x210>)
 8001cfe:	f001 fe17 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d02:	2308      	movs	r3, #8
 8001d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	480a      	ldr	r0, [pc, #40]	@ (8001d40 <MX_GPIO_Init+0x214>)
 8001d16:	f001 fe0b 	bl	8003930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d20:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <MX_GPIO_Init+0x218>)
 8001d22:	f001 ffc5 	bl	8003cb0 <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2110      	movs	r1, #16
 8001d2a:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_GPIO_Init+0x214>)
 8001d2c:	f001 ffc0 	bl	8003cb0 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d30:	bf00      	nop
 8001d32:	3730      	adds	r7, #48	@ 0x30
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	58021000 	.word	0x58021000
 8001d40:	58020000 	.word	0x58020000
 8001d44:	58020400 	.word	0x58020400
 8001d48:	58020800 	.word	0x58020800
 8001d4c:	58020c00 	.word	0x58020c00

08001d50 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d56:	463b      	mov	r3, r7
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d62:	f001 f809 	bl	8002d78 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d72:	231f      	movs	r3, #31
 8001d74:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001d76:	2387      	movs	r3, #135	@ 0x87
 8001d78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d82:	2301      	movs	r3, #1
 8001d84:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d86:	2301      	movs	r3, #1
 8001d88:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d92:	463b      	mov	r3, r7
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 f827 	bl	8002de8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d9a:	2004      	movs	r0, #4
 8001d9c:	f001 f804 	bl	8002da8 <HAL_MPU_Enable>

}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <Error_Handler+0x8>

08001db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_MspInit+0x30>)
 8001dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dc0:	4a08      	ldr	r2, [pc, #32]	@ (8001de4 <HAL_MspInit+0x30>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_MspInit+0x30>)
 8001dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	58024400 	.word	0x58024400

08001de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0bc      	sub	sp, #240	@ 0xf0
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e00:	f107 0320 	add.w	r3, r7, #32
 8001e04:	22b8      	movs	r2, #184	@ 0xb8
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00c fc83 	bl	800e714 <memset>
  if(hi2c->Instance==I2C1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a74      	ldr	r2, [pc, #464]	@ (8001fe4 <HAL_I2C_MspInit+0x1fc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d147      	bne.n	8001ea8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e18:	f04f 0208 	mov.w	r2, #8
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2a:	f107 0320 	add.w	r3, r7, #32
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 f82c 	bl	8004e8c <HAL_RCCEx_PeriphCLKConfig>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001e3a:	f7ff ffb5 	bl	8001da8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e44:	4a68      	ldr	r2, [pc, #416]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4e:	4b66      	ldr	r3, [pc, #408]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001e5c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001e60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e64:	2312      	movs	r3, #18
 8001e66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e76:	2304      	movs	r3, #4
 8001e78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e80:	4619      	mov	r1, r3
 8001e82:	485a      	ldr	r0, [pc, #360]	@ (8001fec <HAL_I2C_MspInit+0x204>)
 8001e84:	f001 fd54 	bl	8003930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e88:	4b57      	ldr	r3, [pc, #348]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e8e:	4a56      	ldr	r2, [pc, #344]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001e90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e98:	4b53      	ldr	r3, [pc, #332]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001ea6:	e098      	b.n	8001fda <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a50      	ldr	r2, [pc, #320]	@ (8001ff0 <HAL_I2C_MspInit+0x208>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d147      	bne.n	8001f42 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001eb2:	f04f 0208 	mov.w	r2, #8
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec4:	f107 0320 	add.w	r3, r7, #32
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 ffdf 	bl	8004e8c <HAL_RCCEx_PeriphCLKConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001ed4:	f7ff ff68 	bl	8001da8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed8:	4b43      	ldr	r3, [pc, #268]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	4a42      	ldr	r2, [pc, #264]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ef6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efe:	2312      	movs	r3, #18
 8001f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f10:	2304      	movs	r3, #4
 8001f12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f16:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4833      	ldr	r0, [pc, #204]	@ (8001fec <HAL_I2C_MspInit+0x204>)
 8001f1e:	f001 fd07 	bl	8003930 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f22:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f28:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001f2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f32:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
}
 8001f40:	e04b      	b.n	8001fda <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff4 <HAL_I2C_MspInit+0x20c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d146      	bne.n	8001fda <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001f4c:	f04f 0210 	mov.w	r2, #16
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5e:	f107 0320 	add.w	r3, r7, #32
 8001f62:	4618      	mov	r0, r3
 8001f64:	f002 ff92 	bl	8004e8c <HAL_RCCEx_PeriphCLKConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8001f6e:	f7ff ff1b 	bl	8001da8 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f72:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f82:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001f90:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f98:	2312      	movs	r3, #18
 8001f9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001faa:	2304      	movs	r3, #4
 8001fac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4810      	ldr	r0, [pc, #64]	@ (8001ff8 <HAL_I2C_MspInit+0x210>)
 8001fb8:	f001 fcba 	bl	8003930 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001fbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fc2:	4a09      	ldr	r2, [pc, #36]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fc8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_I2C_MspInit+0x200>)
 8001fce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
}
 8001fda:	bf00      	nop
 8001fdc:	37f0      	adds	r7, #240	@ 0xf0
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	58024400 	.word	0x58024400
 8001fec:	58020400 	.word	0x58020400
 8001ff0:	40005800 	.word	0x40005800
 8001ff4:	58001c00 	.word	0x58001c00
 8001ff8:	58020c00 	.word	0x58020c00

08001ffc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b0ba      	sub	sp, #232	@ 0xe8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	22b8      	movs	r2, #184	@ 0xb8
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f00c fb79 	bl	800e714 <memset>
  if(hsd->Instance==SDMMC1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a38      	ldr	r2, [pc, #224]	@ (8002108 <HAL_SD_MspInit+0x10c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d169      	bne.n	8002100 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800202c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002038:	2300      	movs	r3, #0
 800203a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800203c:	f107 0318 	add.w	r3, r7, #24
 8002040:	4618      	mov	r0, r3
 8002042:	f002 ff23 	bl	8004e8c <HAL_RCCEx_PeriphCLKConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800204c:	f7ff feac 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002050:	4b2e      	ldr	r3, [pc, #184]	@ (800210c <HAL_SD_MspInit+0x110>)
 8002052:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002056:	4a2d      	ldr	r2, [pc, #180]	@ (800210c <HAL_SD_MspInit+0x110>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002060:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <HAL_SD_MspInit+0x110>)
 8002062:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800206e:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_SD_MspInit+0x110>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002074:	4a25      	ldr	r2, [pc, #148]	@ (800210c <HAL_SD_MspInit+0x110>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207e:	4b23      	ldr	r3, [pc, #140]	@ (800210c <HAL_SD_MspInit+0x110>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800208c:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <HAL_SD_MspInit+0x110>)
 800208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002092:	4a1e      	ldr	r2, [pc, #120]	@ (800210c <HAL_SD_MspInit+0x110>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800209c:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <HAL_SD_MspInit+0x110>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020aa:	2304      	movs	r3, #4
 80020ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020c2:	230c      	movs	r3, #12
 80020c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4810      	ldr	r0, [pc, #64]	@ (8002110 <HAL_SD_MspInit+0x114>)
 80020d0:	f001 fc2e 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 80020d4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80020d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020ee:	230c      	movs	r3, #12
 80020f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4806      	ldr	r0, [pc, #24]	@ (8002114 <HAL_SD_MspInit+0x118>)
 80020fc:	f001 fc18 	bl	8003930 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002100:	bf00      	nop
 8002102:	37e8      	adds	r7, #232	@ 0xe8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	52007000 	.word	0x52007000
 800210c:	58024400 	.word	0x58024400
 8002110:	58020c00 	.word	0x58020c00
 8002114:	58020800 	.word	0x58020800

08002118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0be      	sub	sp, #248	@ 0xf8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002130:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002134:	22b8      	movs	r2, #184	@ 0xb8
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f00c faeb 	bl	800e714 <memset>
  if(hspi->Instance==SPI1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a97      	ldr	r2, [pc, #604]	@ (80023a0 <HAL_SPI_MspInit+0x288>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d16a      	bne.n	800221e <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002148:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800215e:	4618      	mov	r0, r3
 8002160:	f002 fe94 	bl	8004e8c <HAL_RCCEx_PeriphCLKConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800216a:	f7ff fe1d 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800216e:	4b8d      	ldr	r3, [pc, #564]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002174:	4a8b      	ldr	r2, [pc, #556]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002176:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800217a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800217e:	4b89      	ldr	r3, [pc, #548]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002184:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218c:	4b85      	ldr	r3, [pc, #532]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002192:	4a84      	ldr	r2, [pc, #528]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800219c:	4b81      	ldr	r3, [pc, #516]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 800219e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	623b      	str	r3, [r7, #32]
 80021a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b7e      	ldr	r3, [pc, #504]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b0:	4a7c      	ldr	r2, [pc, #496]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ba:	4b7a      	ldr	r3, [pc, #488]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021c8:	2310      	movs	r3, #16
 80021ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e0:	2305      	movs	r3, #5
 80021e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021ea:	4619      	mov	r1, r3
 80021ec:	486e      	ldr	r0, [pc, #440]	@ (80023a8 <HAL_SPI_MspInit+0x290>)
 80021ee:	f001 fb9f 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021f2:	23a0      	movs	r3, #160	@ 0xa0
 80021f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800220a:	2305      	movs	r3, #5
 800220c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002214:	4619      	mov	r1, r3
 8002216:	4865      	ldr	r0, [pc, #404]	@ (80023ac <HAL_SPI_MspInit+0x294>)
 8002218:	f001 fb8a 	bl	8003930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800221c:	e0bb      	b.n	8002396 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a63      	ldr	r2, [pc, #396]	@ (80023b0 <HAL_SPI_MspInit+0x298>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d16b      	bne.n	8002300 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002228:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800223a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fe24 	bl	8004e8c <HAL_RCCEx_PeriphCLKConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_SPI_MspInit+0x136>
      Error_Handler();
 800224a:	f7ff fdad 	bl	8001da8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800224e:	4b55      	ldr	r3, [pc, #340]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002254:	4a53      	ldr	r2, [pc, #332]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800225a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800225e:	4b51      	ldr	r3, [pc, #324]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226c:	4b4d      	ldr	r3, [pc, #308]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 800226e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002272:	4a4c      	ldr	r2, [pc, #304]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800227c:	4b49      	ldr	r3, [pc, #292]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 800227e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800228a:	4b46      	ldr	r3, [pc, #280]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 800228c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002290:	4a44      	ldr	r2, [pc, #272]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800229a:	4b42      	ldr	r3, [pc, #264]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022c2:	2305      	movs	r3, #5
 80022c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4837      	ldr	r0, [pc, #220]	@ (80023ac <HAL_SPI_MspInit+0x294>)
 80022d0:	f001 fb2e 	bl	8003930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 80022d4:	2306      	movs	r3, #6
 80022d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022ec:	2305      	movs	r3, #5
 80022ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80022f6:	4619      	mov	r1, r3
 80022f8:	482e      	ldr	r0, [pc, #184]	@ (80023b4 <HAL_SPI_MspInit+0x29c>)
 80022fa:	f001 fb19 	bl	8003930 <HAL_GPIO_Init>
}
 80022fe:	e04a      	b.n	8002396 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a2c      	ldr	r2, [pc, #176]	@ (80023b8 <HAL_SPI_MspInit+0x2a0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d145      	bne.n	8002396 <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800230a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002320:	4618      	mov	r0, r3
 8002322:	f002 fdb3 	bl	8004e8c <HAL_RCCEx_PeriphCLKConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 800232c:	f7ff fd3c 	bl	8001da8 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002330:	4b1c      	ldr	r3, [pc, #112]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002336:	4a1b      	ldr	r2, [pc, #108]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002338:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800233c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002340:	4b18      	ldr	r3, [pc, #96]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002354:	4a13      	ldr	r2, [pc, #76]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002356:	f043 0310 	orr.w	r3, r3, #16
 800235a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800235e:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <HAL_SPI_MspInit+0x28c>)
 8002360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800236c:	2364      	movs	r3, #100	@ 0x64
 800236e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002384:	2305      	movs	r3, #5
 8002386:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800238a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800238e:	4619      	mov	r1, r3
 8002390:	480a      	ldr	r0, [pc, #40]	@ (80023bc <HAL_SPI_MspInit+0x2a4>)
 8002392:	f001 facd 	bl	8003930 <HAL_GPIO_Init>
}
 8002396:	bf00      	nop
 8002398:	37f8      	adds	r7, #248	@ 0xf8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40013000 	.word	0x40013000
 80023a4:	58024400 	.word	0x58024400
 80023a8:	58020400 	.word	0x58020400
 80023ac:	58020000 	.word	0x58020000
 80023b0:	40003800 	.word	0x40003800
 80023b4:	58020800 	.word	0x58020800
 80023b8:	40013400 	.word	0x40013400
 80023bc:	58021000 	.word	0x58021000

080023c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b0b8      	sub	sp, #224	@ 0xe0
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	22b8      	movs	r2, #184	@ 0xb8
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00c f997 	bl	800e714 <memset>
  if(huart->Instance==UART8)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002494 <HAL_UART_MspInit+0xd4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d14d      	bne.n	800248c <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80023f0:	f04f 0202 	mov.w	r2, #2
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	4618      	mov	r0, r3
 8002408:	f002 fd40 	bl	8004e8c <HAL_RCCEx_PeriphCLKConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002412:	f7ff fcc9 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 8002418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800241c:	4a1e      	ldr	r2, [pc, #120]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 800241e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002422:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002426:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 8002428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800242c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002434:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800243a:	4a17      	ldr	r2, [pc, #92]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002452:	2303      	movs	r3, #3
 8002454:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800246a:	2308      	movs	r3, #8
 800246c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002470:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002474:	4619      	mov	r1, r3
 8002476:	4809      	ldr	r0, [pc, #36]	@ (800249c <HAL_UART_MspInit+0xdc>)
 8002478:	f001 fa5a 	bl	8003930 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	2053      	movs	r0, #83	@ 0x53
 8002482:	f000 fc44 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002486:	2053      	movs	r0, #83	@ 0x53
 8002488:	f000 fc5b 	bl	8002d42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 800248c:	bf00      	nop
 800248e:	37e0      	adds	r7, #224	@ 0xe0
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40007c00 	.word	0x40007c00
 8002498:	58024400 	.word	0x58024400
 800249c:	58021000 	.word	0x58021000

080024a0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b0b8      	sub	sp, #224	@ 0xe0
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	22b8      	movs	r2, #184	@ 0xb8
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f00c f927 	bl	800e714 <memset>
  if(husart->Instance==USART1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a27      	ldr	r2, [pc, #156]	@ (8002568 <HAL_USART_MspInit+0xc8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d146      	bne.n	800255e <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024d0:	f04f 0201 	mov.w	r2, #1
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fcd0 	bl	8004e8c <HAL_RCCEx_PeriphCLKConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 80024f2:	f7ff fc59 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f6:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <HAL_USART_MspInit+0xcc>)
 80024f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024fc:	4a1b      	ldr	r2, [pc, #108]	@ (800256c <HAL_USART_MspInit+0xcc>)
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002506:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_USART_MspInit+0xcc>)
 8002508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	4b15      	ldr	r3, [pc, #84]	@ (800256c <HAL_USART_MspInit+0xcc>)
 8002516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251a:	4a14      	ldr	r2, [pc, #80]	@ (800256c <HAL_USART_MspInit+0xcc>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <HAL_USART_MspInit+0xcc>)
 8002526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 8002532:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002536:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800254c:	2307      	movs	r3, #7
 800254e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002556:	4619      	mov	r1, r3
 8002558:	4805      	ldr	r0, [pc, #20]	@ (8002570 <HAL_USART_MspInit+0xd0>)
 800255a:	f001 f9e9 	bl	8003930 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800255e:	bf00      	nop
 8002560:	37e0      	adds	r7, #224	@ 0xe0
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40011000 	.word	0x40011000
 800256c:	58024400 	.word	0x58024400
 8002570:	58020000 	.word	0x58020000

08002574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <NMI_Handler+0x4>

0800257c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <HardFault_Handler+0x4>

08002584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <MemManage_Handler+0x4>

0800258c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <BusFault_Handler+0x4>

08002594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <UsageFault_Handler+0x4>

0800259c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ca:	f000 fa81 	bl	8002ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80025d8:	4802      	ldr	r0, [pc, #8]	@ (80025e4 <UART8_IRQHandler+0x10>)
 80025da:	f007 faad 	bl	8009b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	24000530 	.word	0x24000530

080025e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return 1;
 80025ec:	2301      	movs	r3, #1
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_kill>:

int _kill(int pid, int sig)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002602:	f00c f8d9 	bl	800e7b8 <__errno>
 8002606:	4603      	mov	r3, r0
 8002608:	2216      	movs	r2, #22
 800260a:	601a      	str	r2, [r3, #0]
  return -1;
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_exit>:

void _exit (int status)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ffe7 	bl	80025f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800262a:	bf00      	nop
 800262c:	e7fd      	b.n	800262a <_exit+0x12>

0800262e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e00a      	b.n	8002656 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002640:	f3af 8000 	nop.w
 8002644:	4601      	mov	r1, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	60ba      	str	r2, [r7, #8]
 800264c:	b2ca      	uxtb	r2, r1
 800264e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	429a      	cmp	r2, r3
 800265c:	dbf0      	blt.n	8002640 <_read+0x12>
  }

  return len;
 800265e:	687b      	ldr	r3, [r7, #4]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002690:	605a      	str	r2, [r3, #4]
  return 0;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_isatty>:

int _isatty(int file)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026a8:	2301      	movs	r3, #1
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d8:	4a14      	ldr	r2, [pc, #80]	@ (800272c <_sbrk+0x5c>)
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <_sbrk+0x60>)
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <_sbrk+0x64>)
 80026ee:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <_sbrk+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d207      	bcs.n	8002710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002700:	f00c f85a 	bl	800e7b8 <__errno>
 8002704:	4603      	mov	r3, r0
 8002706:	220c      	movs	r2, #12
 8002708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	e009      	b.n	8002724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002716:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	4a05      	ldr	r2, [pc, #20]	@ (8002734 <_sbrk+0x64>)
 8002720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	24050000 	.word	0x24050000
 8002730:	00000400 	.word	0x00000400
 8002734:	24000624 	.word	0x24000624
 8002738:	24000b48 	.word	0x24000b48

0800273c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002740:	4b32      	ldr	r3, [pc, #200]	@ (800280c <SystemInit+0xd0>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002746:	4a31      	ldr	r2, [pc, #196]	@ (800280c <SystemInit+0xd0>)
 8002748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800274c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002750:	4b2f      	ldr	r3, [pc, #188]	@ (8002810 <SystemInit+0xd4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	2b06      	cmp	r3, #6
 800275a:	d807      	bhi.n	800276c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800275c:	4b2c      	ldr	r3, [pc, #176]	@ (8002810 <SystemInit+0xd4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 030f 	bic.w	r3, r3, #15
 8002764:	4a2a      	ldr	r2, [pc, #168]	@ (8002810 <SystemInit+0xd4>)
 8002766:	f043 0307 	orr.w	r3, r3, #7
 800276a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800276c:	4b29      	ldr	r3, [pc, #164]	@ (8002814 <SystemInit+0xd8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a28      	ldr	r2, [pc, #160]	@ (8002814 <SystemInit+0xd8>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002778:	4b26      	ldr	r3, [pc, #152]	@ (8002814 <SystemInit+0xd8>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800277e:	4b25      	ldr	r3, [pc, #148]	@ (8002814 <SystemInit+0xd8>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4924      	ldr	r1, [pc, #144]	@ (8002814 <SystemInit+0xd8>)
 8002784:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <SystemInit+0xdc>)
 8002786:	4013      	ands	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800278a:	4b21      	ldr	r3, [pc, #132]	@ (8002810 <SystemInit+0xd4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002796:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <SystemInit+0xd4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 030f 	bic.w	r3, r3, #15
 800279e:	4a1c      	ldr	r2, [pc, #112]	@ (8002810 <SystemInit+0xd4>)
 80027a0:	f043 0307 	orr.w	r3, r3, #7
 80027a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <SystemInit+0xd8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027ac:	4b19      	ldr	r3, [pc, #100]	@ (8002814 <SystemInit+0xd8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027b2:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <SystemInit+0xd8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027b8:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <SystemInit+0xd8>)
 80027ba:	4a18      	ldr	r2, [pc, #96]	@ (800281c <SystemInit+0xe0>)
 80027bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <SystemInit+0xd8>)
 80027c0:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <SystemInit+0xe4>)
 80027c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027c4:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <SystemInit+0xd8>)
 80027c6:	4a17      	ldr	r2, [pc, #92]	@ (8002824 <SystemInit+0xe8>)
 80027c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027ca:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <SystemInit+0xd8>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027d0:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <SystemInit+0xd8>)
 80027d2:	4a14      	ldr	r2, [pc, #80]	@ (8002824 <SystemInit+0xe8>)
 80027d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <SystemInit+0xd8>)
 80027d8:	2200      	movs	r2, #0
 80027da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <SystemInit+0xd8>)
 80027de:	4a11      	ldr	r2, [pc, #68]	@ (8002824 <SystemInit+0xe8>)
 80027e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <SystemInit+0xd8>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <SystemInit+0xd8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <SystemInit+0xd8>)
 80027ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027f4:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <SystemInit+0xd8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <SystemInit+0xec>)
 80027fc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002800:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00
 8002810:	52002000 	.word	0x52002000
 8002814:	58024400 	.word	0x58024400
 8002818:	eaf6ed7f 	.word	0xeaf6ed7f
 800281c:	02020200 	.word	0x02020200
 8002820:	01ff0000 	.word	0x01ff0000
 8002824:	01010280 	.word	0x01010280
 8002828:	52004000 	.word	0x52004000

0800282c <SensorManager_Init>:
//	"BME680",
	"MS5607",
//	"ATGM336H",
};

telemetry_init_status SensorManager_Init(void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
	printf("Sensors Initialization routine started. \n");
 8002832:	4825      	ldr	r0, [pc, #148]	@ (80028c8 <SensorManager_Init+0x9c>)
 8002834:	f00b fe6e 	bl	800e514 <puts>

    size_t num_sensors = sizeof(init_functions) / sizeof(init_functions[0]);
 8002838:	2301      	movs	r3, #1
 800283a:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8002840:	2300      	movs	r3, #0
 8002842:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	e022      	b.n	8002890 <SensorManager_Init+0x64>
        int8_t status = init_functions[i]();
 800284a:	4a20      	ldr	r2, [pc, #128]	@ (80028cc <SensorManager_Init+0xa0>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	4798      	blx	r3
 8002854:	4603      	mov	r3, r0
 8002856:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 8002858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <SensorManager_Init+0x4a>
            printf("%s initialization failed.\n", sensor_names[i]);
 8002860:	4a1b      	ldr	r2, [pc, #108]	@ (80028d0 <SensorManager_Init+0xa4>)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002868:	4619      	mov	r1, r3
 800286a:	481a      	ldr	r0, [pc, #104]	@ (80028d4 <SensorManager_Init+0xa8>)
 800286c:	f00b fdea 	bl	800e444 <iprintf>
            all_success = false;
 8002870:	2300      	movs	r3, #0
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e009      	b.n	800288a <SensorManager_Init+0x5e>
        } else {
        	printf("[%s] device found! Initialization succeded.\n", sensor_names[i]);
 8002876:	4a16      	ldr	r2, [pc, #88]	@ (80028d0 <SensorManager_Init+0xa4>)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	4619      	mov	r1, r3
 8002880:	4815      	ldr	r0, [pc, #84]	@ (80028d8 <SensorManager_Init+0xac>)
 8002882:	f00b fddf 	bl	800e444 <iprintf>
            any_success = true;
 8002886:	2301      	movs	r3, #1
 8002888:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3301      	adds	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	d3d8      	bcc.n	800284a <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d004      	beq.n	80028a8 <SensorManager_Init+0x7c>
        printf("All sensors initialized successfully.\n");
 800289e:	480f      	ldr	r0, [pc, #60]	@ (80028dc <SensorManager_Init+0xb0>)
 80028a0:	f00b fe38 	bl	800e514 <puts>
        return TELEMETRY_INIT_SUCCESS;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e00b      	b.n	80028c0 <SensorManager_Init+0x94>
    } else if (any_success) {
 80028a8:	7bbb      	ldrb	r3, [r7, #14]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <SensorManager_Init+0x8c>
        printf("Partial initialization success.\n");
 80028ae:	480c      	ldr	r0, [pc, #48]	@ (80028e0 <SensorManager_Init+0xb4>)
 80028b0:	f00b fe30 	bl	800e514 <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e003      	b.n	80028c0 <SensorManager_Init+0x94>
    } else {
        printf("All sensors initialization failed.\n");
 80028b8:	480a      	ldr	r0, [pc, #40]	@ (80028e4 <SensorManager_Init+0xb8>)
 80028ba:	f00b fe2b 	bl	800e514 <puts>
        return TELEMETRY_INIT_FAILURE;
 80028be:	2302      	movs	r3, #2
    }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	0801228c 	.word	0x0801228c
 80028cc:	24000008 	.word	0x24000008
 80028d0:	2400000c 	.word	0x2400000c
 80028d4:	080122b8 	.word	0x080122b8
 80028d8:	080122d4 	.word	0x080122d4
 80028dc:	08012304 	.word	0x08012304
 80028e0:	0801232c 	.word	0x0801232c
 80028e4:	0801234c 	.word	0x0801234c

080028e8 <SensorManager_UpdateData>:

void SensorManager_UpdateData(TelemetryData *data) {
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	61f8      	str	r0, [r7, #28]
    // Update data from each sensor
//	telemetry.bmi323_data = bmi323_data_poll();
//	telemetry.bno055_data = bno_read_fusion_data();
//	telemetry.bme680_data = bme680_data_poll();
    telemetry.ms5607_data = MS5607_ReadData();
 80028f0:	4c08      	ldr	r4, [pc, #32]	@ (8002914 <SensorManager_UpdateData+0x2c>)
 80028f2:	463b      	mov	r3, r7
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fd4f 	bl	8001398 <MS5607_ReadData>
 80028fa:	f504 7468 	add.w	r4, r4, #928	@ 0x3a0
 80028fe:	463d      	mov	r5, r7
 8002900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002904:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002908:	e884 0003 	stmia.w	r4, {r0, r1}

    //FOR VERSION 2 OF ARGUS
//    ASM330LHH_ReadData(&data->asm330lhh_data);
//    LIS2MDLTR_ReadData(&data->lis2mdltr_data);

}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bdb0      	pop	{r4, r5, r7, pc}
 8002914:	24000628 	.word	0x24000628

08002918 <delay_us_func>:

void delay_us_func(uint32_t period)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8002920:	e008      	b.n	8002934 <delay_us_func+0x1c>
	{
		for(i = 0; i < 96; i++)
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e002      	b.n	800292e <delay_us_func+0x16>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3301      	adds	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b5f      	cmp	r3, #95	@ 0x5f
 8002932:	d9f9      	bls.n	8002928 <delay_us_func+0x10>
	while(period--)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f1      	bne.n	8002922 <delay_us_func+0xa>
		{
			;
		}
	}
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <TestTelemetry>:

void TestTelemetry(){
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1000 ; i++){
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	e00e      	b.n	8002976 <TestTelemetry+0x2a>

	// Sensor Data Read
	SensorManager_UpdateData(&telemetry);
 8002958:	480b      	ldr	r0, [pc, #44]	@ (8002988 <TestTelemetry+0x3c>)
 800295a:	f7ff ffc5 	bl	80028e8 <SensorManager_UpdateData>

	// Sensor Data Print
//	bmi323_print_sensor_data(&telemetry.bmi323_data);
//	bno055_print_fusion_data(&telemetry.bno055_data);
	ms5607_print_barometer_data(&telemetry.ms5607_data);
 800295e:	480b      	ldr	r0, [pc, #44]	@ (800298c <TestTelemetry+0x40>)
 8002960:	f7fe fd5e 	bl	8001420 <ms5607_print_barometer_data>
//	bme680_print_barometer_data(&telemetry.bme680_data);
//	gps_print_positionning_data(&telemetry.gps_data);

	printf("// --------------------------------------------- // \n");
 8002964:	480a      	ldr	r0, [pc, #40]	@ (8002990 <TestTelemetry+0x44>)
 8002966:	f00b fdd5 	bl	800e514 <puts>
	//DELAY BETWEEN READINGS TO DESIGN CORRECTLY
//    HAL_Delay(150);
//    delay_us_func(50000);  //50 ms
//    delay_us_func(100000); //100 ms
//    delay_us_func(200000); //200 ms
      delay_us_func(1000000); //1 s
 800296a:	480a      	ldr	r0, [pc, #40]	@ (8002994 <TestTelemetry+0x48>)
 800296c:	f7ff ffd4 	bl	8002918 <delay_us_func>
	for(int i = 0; i < 1000 ; i++){
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3301      	adds	r3, #1
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800297c:	dbec      	blt.n	8002958 <TestTelemetry+0xc>
    	}
}
 800297e:	bf00      	nop
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	24000628 	.word	0x24000628
 800298c:	240009c8 	.word	0x240009c8
 8002990:	08012370 	.word	0x08012370
 8002994:	000f4240 	.word	0x000f4240

08002998 <Reset_Handler>:
 8002998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029d0 <LoopFillZerobss+0xe>
 800299c:	f7ff fece 	bl	800273c <SystemInit>
 80029a0:	480c      	ldr	r0, [pc, #48]	@ (80029d4 <LoopFillZerobss+0x12>)
 80029a2:	490d      	ldr	r1, [pc, #52]	@ (80029d8 <LoopFillZerobss+0x16>)
 80029a4:	4a0d      	ldr	r2, [pc, #52]	@ (80029dc <LoopFillZerobss+0x1a>)
 80029a6:	2300      	movs	r3, #0
 80029a8:	e002      	b.n	80029b0 <LoopCopyDataInit>

080029aa <CopyDataInit>:
 80029aa:	58d4      	ldr	r4, [r2, r3]
 80029ac:	50c4      	str	r4, [r0, r3]
 80029ae:	3304      	adds	r3, #4

080029b0 <LoopCopyDataInit>:
 80029b0:	18c4      	adds	r4, r0, r3
 80029b2:	428c      	cmp	r4, r1
 80029b4:	d3f9      	bcc.n	80029aa <CopyDataInit>
 80029b6:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <LoopFillZerobss+0x1e>)
 80029b8:	4c0a      	ldr	r4, [pc, #40]	@ (80029e4 <LoopFillZerobss+0x22>)
 80029ba:	2300      	movs	r3, #0
 80029bc:	e001      	b.n	80029c2 <LoopFillZerobss>

080029be <FillZerobss>:
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	3204      	adds	r2, #4

080029c2 <LoopFillZerobss>:
 80029c2:	42a2      	cmp	r2, r4
 80029c4:	d3fb      	bcc.n	80029be <FillZerobss>
 80029c6:	f00b fefd 	bl	800e7c4 <__libc_init_array>
 80029ca:	f7fe fd92 	bl	80014f2 <main>
 80029ce:	4770      	bx	lr
 80029d0:	24050000 	.word	0x24050000
 80029d4:	24000000 	.word	0x24000000
 80029d8:	240001e0 	.word	0x240001e0
 80029dc:	080140f8 	.word	0x080140f8
 80029e0:	240001e0 	.word	0x240001e0
 80029e4:	24000b44 	.word	0x24000b44

080029e8 <ADC3_IRQHandler>:
 80029e8:	e7fe      	b.n	80029e8 <ADC3_IRQHandler>
	...

080029ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f2:	2003      	movs	r0, #3
 80029f4:	f000 f980 	bl	8002cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029f8:	f002 f872 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <HAL_Init+0x68>)
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	4913      	ldr	r1, [pc, #76]	@ (8002a58 <HAL_Init+0x6c>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a16:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <HAL_Init+0x68>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a58 <HAL_Init+0x6c>)
 8002a20:	5cd3      	ldrb	r3, [r2, r3]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a5c <HAL_Init+0x70>)
 8002a2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a30:	4a0b      	ldr	r2, [pc, #44]	@ (8002a60 <HAL_Init+0x74>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a36:	2000      	movs	r0, #0
 8002a38:	f000 f814 	bl	8002a64 <HAL_InitTick>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e002      	b.n	8002a4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a46:	f7ff f9b5 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	58024400 	.word	0x58024400
 8002a58:	080123a8 	.word	0x080123a8
 8002a5c:	24000004 	.word	0x24000004
 8002a60:	24000000 	.word	0x24000000

08002a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <HAL_InitTick+0x60>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e021      	b.n	8002abc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a78:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <HAL_InitTick+0x64>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <HAL_InitTick+0x60>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f965 	bl	8002d5e <HAL_SYSTICK_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00e      	b.n	8002abc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d80a      	bhi.n	8002aba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f000 f92f 	bl	8002d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab0:	4a06      	ldr	r2, [pc, #24]	@ (8002acc <HAL_InitTick+0x68>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	24000014 	.word	0x24000014
 8002ac8:	24000000 	.word	0x24000000
 8002acc:	24000010 	.word	0x24000010

08002ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_IncTick+0x20>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <HAL_IncTick+0x24>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a04      	ldr	r2, [pc, #16]	@ (8002af4 <HAL_IncTick+0x24>)
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	24000014 	.word	0x24000014
 8002af4:	240009e0 	.word	0x240009e0

08002af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return uwTick;
 8002afc:	4b03      	ldr	r3, [pc, #12]	@ (8002b0c <HAL_GetTick+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	240009e0 	.word	0x240009e0

08002b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff ffee 	bl	8002af8 <HAL_GetTick>
 8002b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d005      	beq.n	8002b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <HAL_Delay+0x44>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b36:	bf00      	nop
 8002b38:	f7ff ffde 	bl	8002af8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d8f7      	bhi.n	8002b38 <HAL_Delay+0x28>
  {
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	24000014 	.word	0x24000014

08002b58 <__NVIC_SetPriorityGrouping>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <__NVIC_SetPriorityGrouping+0x40>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b80:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b86:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <__NVIC_SetPriorityGrouping+0x40>)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	60d3      	str	r3, [r2, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00
 8002b9c:	05fa0000 	.word	0x05fa0000

08002ba0 <__NVIC_GetPriorityGrouping>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba4:	4b04      	ldr	r3, [pc, #16]	@ (8002bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0307 	and.w	r3, r3, #7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_EnableIRQ>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db0b      	blt.n	8002be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4907      	ldr	r1, [pc, #28]	@ (8002bf4 <__NVIC_EnableIRQ+0x38>)
 8002bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2001      	movs	r0, #1
 8002bde:	fa00 f202 	lsl.w	r2, r0, r2
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000e100 	.word	0xe000e100

08002bf8 <__NVIC_SetPriority>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	db0a      	blt.n	8002c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	490c      	ldr	r1, [pc, #48]	@ (8002c44 <__NVIC_SetPriority+0x4c>)
 8002c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c20:	e00a      	b.n	8002c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4908      	ldr	r1, [pc, #32]	@ (8002c48 <__NVIC_SetPriority+0x50>)
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3b04      	subs	r3, #4
 8002c30:	0112      	lsls	r2, r2, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	440b      	add	r3, r1
 8002c36:	761a      	strb	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <NVIC_EncodePriority>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	@ 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f1c3 0307 	rsb	r3, r3, #7
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf28      	it	cs
 8002c6a:	2304      	movcs	r3, #4
 8002c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d902      	bls.n	8002c7c <NVIC_EncodePriority+0x30>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3b03      	subs	r3, #3
 8002c7a:	e000      	b.n	8002c7e <NVIC_EncodePriority+0x32>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	401a      	ands	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	43d9      	mvns	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	4313      	orrs	r3, r2
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	@ 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <SysTick_Config>:
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cc4:	d301      	bcc.n	8002cca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00f      	b.n	8002cea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cca:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf4 <SysTick_Config+0x40>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f7ff ff8e 	bl	8002bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <SysTick_Config+0x40>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce2:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <SysTick_Config+0x40>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000e010 	.word	0xe000e010

08002cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff29 	bl	8002b58 <__NVIC_SetPriorityGrouping>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d1c:	f7ff ff40 	bl	8002ba0 <__NVIC_GetPriorityGrouping>
 8002d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	6978      	ldr	r0, [r7, #20]
 8002d28:	f7ff ff90 	bl	8002c4c <NVIC_EncodePriority>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff5f 	bl	8002bf8 <__NVIC_SetPriority>
}
 8002d3a:	bf00      	nop
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	4603      	mov	r3, r0
 8002d4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff33 	bl	8002bbc <__NVIC_EnableIRQ>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ffa4 	bl	8002cb4 <SysTick_Config>
 8002d6c:	4603      	mov	r3, r0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002d7c:	f3bf 8f5f 	dmb	sy
}
 8002d80:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <HAL_MPU_Disable+0x28>)
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	4a06      	ldr	r2, [pc, #24]	@ (8002da0 <HAL_MPU_Disable+0x28>)
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d8c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002d8e:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <HAL_MPU_Disable+0x2c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	605a      	str	r2, [r3, #4]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000ed00 	.word	0xe000ed00
 8002da4:	e000ed90 	.word	0xe000ed90

08002da8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002db0:	4a0b      	ldr	r2, [pc, #44]	@ (8002de0 <HAL_MPU_Enable+0x38>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002dba:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_MPU_Enable+0x3c>)
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <HAL_MPU_Enable+0x3c>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002dc6:	f3bf 8f4f 	dsb	sy
}
 8002dca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002dcc:	f3bf 8f6f 	isb	sy
}
 8002dd0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000ed90 	.word	0xe000ed90
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	785a      	ldrb	r2, [r3, #1]
 8002df4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <HAL_MPU_ConfigRegion+0x7c>)
 8002df6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002df8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <HAL_MPU_ConfigRegion+0x7c>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	@ (8002e64 <HAL_MPU_ConfigRegion+0x7c>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002e04:	4a17      	ldr	r2, [pc, #92]	@ (8002e64 <HAL_MPU_ConfigRegion+0x7c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7b1b      	ldrb	r3, [r3, #12]
 8002e10:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7adb      	ldrb	r3, [r3, #11]
 8002e16:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7a9b      	ldrb	r3, [r3, #10]
 8002e1e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7b5b      	ldrb	r3, [r3, #13]
 8002e26:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7b9b      	ldrb	r3, [r3, #14]
 8002e2e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002e30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7bdb      	ldrb	r3, [r3, #15]
 8002e36:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002e38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7a5b      	ldrb	r3, [r3, #9]
 8002e3e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002e40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7a1b      	ldrb	r3, [r3, #8]
 8002e46:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002e48:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e50:	4a04      	ldr	r2, [pc, #16]	@ (8002e64 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002e52:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e54:	6113      	str	r3, [r2, #16]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000ed90 	.word	0xe000ed90

08002e68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff fe42 	bl	8002af8 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e2dc      	b.n	800343a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d008      	beq.n	8002e9e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2280      	movs	r2, #128	@ 0x80
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e2cd      	b.n	800343a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a76      	ldr	r2, [pc, #472]	@ (800307c <HAL_DMA_Abort+0x214>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d04a      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a74      	ldr	r2, [pc, #464]	@ (8003080 <HAL_DMA_Abort+0x218>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d045      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a73      	ldr	r2, [pc, #460]	@ (8003084 <HAL_DMA_Abort+0x21c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d040      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a71      	ldr	r2, [pc, #452]	@ (8003088 <HAL_DMA_Abort+0x220>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d03b      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a70      	ldr	r2, [pc, #448]	@ (800308c <HAL_DMA_Abort+0x224>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d036      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8003090 <HAL_DMA_Abort+0x228>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6d      	ldr	r2, [pc, #436]	@ (8003094 <HAL_DMA_Abort+0x22c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d02c      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8003098 <HAL_DMA_Abort+0x230>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d027      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6a      	ldr	r2, [pc, #424]	@ (800309c <HAL_DMA_Abort+0x234>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a68      	ldr	r2, [pc, #416]	@ (80030a0 <HAL_DMA_Abort+0x238>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01d      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a67      	ldr	r2, [pc, #412]	@ (80030a4 <HAL_DMA_Abort+0x23c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d018      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a65      	ldr	r2, [pc, #404]	@ (80030a8 <HAL_DMA_Abort+0x240>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a64      	ldr	r2, [pc, #400]	@ (80030ac <HAL_DMA_Abort+0x244>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a62      	ldr	r2, [pc, #392]	@ (80030b0 <HAL_DMA_Abort+0x248>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a61      	ldr	r2, [pc, #388]	@ (80030b4 <HAL_DMA_Abort+0x24c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_DMA_Abort+0xd6>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a5f      	ldr	r2, [pc, #380]	@ (80030b8 <HAL_DMA_Abort+0x250>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_DMA_Abort+0xda>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_DMA_Abort+0xdc>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 021e 	bic.w	r2, r2, #30
 8002f56:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f66:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e00a      	b.n	8002f86 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 020e 	bic.w	r2, r2, #14
 8002f7e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a3c      	ldr	r2, [pc, #240]	@ (800307c <HAL_DMA_Abort+0x214>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d072      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3a      	ldr	r2, [pc, #232]	@ (8003080 <HAL_DMA_Abort+0x218>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d06d      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a39      	ldr	r2, [pc, #228]	@ (8003084 <HAL_DMA_Abort+0x21c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d068      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a37      	ldr	r2, [pc, #220]	@ (8003088 <HAL_DMA_Abort+0x220>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d063      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a36      	ldr	r2, [pc, #216]	@ (800308c <HAL_DMA_Abort+0x224>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d05e      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a34      	ldr	r2, [pc, #208]	@ (8003090 <HAL_DMA_Abort+0x228>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d059      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a33      	ldr	r2, [pc, #204]	@ (8003094 <HAL_DMA_Abort+0x22c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d054      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a31      	ldr	r2, [pc, #196]	@ (8003098 <HAL_DMA_Abort+0x230>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d04f      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a30      	ldr	r2, [pc, #192]	@ (800309c <HAL_DMA_Abort+0x234>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d04a      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80030a0 <HAL_DMA_Abort+0x238>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d045      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a2d      	ldr	r2, [pc, #180]	@ (80030a4 <HAL_DMA_Abort+0x23c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d040      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80030a8 <HAL_DMA_Abort+0x240>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d03b      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2a      	ldr	r2, [pc, #168]	@ (80030ac <HAL_DMA_Abort+0x244>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d036      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a28      	ldr	r2, [pc, #160]	@ (80030b0 <HAL_DMA_Abort+0x248>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d031      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a27      	ldr	r2, [pc, #156]	@ (80030b4 <HAL_DMA_Abort+0x24c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d02c      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a25      	ldr	r2, [pc, #148]	@ (80030b8 <HAL_DMA_Abort+0x250>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d027      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a24      	ldr	r2, [pc, #144]	@ (80030bc <HAL_DMA_Abort+0x254>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a22      	ldr	r2, [pc, #136]	@ (80030c0 <HAL_DMA_Abort+0x258>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01d      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a21      	ldr	r2, [pc, #132]	@ (80030c4 <HAL_DMA_Abort+0x25c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d018      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1f      	ldr	r2, [pc, #124]	@ (80030c8 <HAL_DMA_Abort+0x260>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1e      	ldr	r2, [pc, #120]	@ (80030cc <HAL_DMA_Abort+0x264>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1c      	ldr	r2, [pc, #112]	@ (80030d0 <HAL_DMA_Abort+0x268>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1b      	ldr	r2, [pc, #108]	@ (80030d4 <HAL_DMA_Abort+0x26c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_DMA_Abort+0x20e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a19      	ldr	r2, [pc, #100]	@ (80030d8 <HAL_DMA_Abort+0x270>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d132      	bne.n	80030dc <HAL_DMA_Abort+0x274>
 8003076:	2301      	movs	r3, #1
 8003078:	e031      	b.n	80030de <HAL_DMA_Abort+0x276>
 800307a:	bf00      	nop
 800307c:	40020010 	.word	0x40020010
 8003080:	40020028 	.word	0x40020028
 8003084:	40020040 	.word	0x40020040
 8003088:	40020058 	.word	0x40020058
 800308c:	40020070 	.word	0x40020070
 8003090:	40020088 	.word	0x40020088
 8003094:	400200a0 	.word	0x400200a0
 8003098:	400200b8 	.word	0x400200b8
 800309c:	40020410 	.word	0x40020410
 80030a0:	40020428 	.word	0x40020428
 80030a4:	40020440 	.word	0x40020440
 80030a8:	40020458 	.word	0x40020458
 80030ac:	40020470 	.word	0x40020470
 80030b0:	40020488 	.word	0x40020488
 80030b4:	400204a0 	.word	0x400204a0
 80030b8:	400204b8 	.word	0x400204b8
 80030bc:	58025408 	.word	0x58025408
 80030c0:	5802541c 	.word	0x5802541c
 80030c4:	58025430 	.word	0x58025430
 80030c8:	58025444 	.word	0x58025444
 80030cc:	58025458 	.word	0x58025458
 80030d0:	5802546c 	.word	0x5802546c
 80030d4:	58025480 	.word	0x58025480
 80030d8:	58025494 	.word	0x58025494
 80030dc:	2300      	movs	r3, #0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6d      	ldr	r2, [pc, #436]	@ (80032ac <HAL_DMA_Abort+0x444>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d04a      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6b      	ldr	r2, [pc, #428]	@ (80032b0 <HAL_DMA_Abort+0x448>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d045      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6a      	ldr	r2, [pc, #424]	@ (80032b4 <HAL_DMA_Abort+0x44c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d040      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a68      	ldr	r2, [pc, #416]	@ (80032b8 <HAL_DMA_Abort+0x450>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d03b      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a67      	ldr	r2, [pc, #412]	@ (80032bc <HAL_DMA_Abort+0x454>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d036      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a65      	ldr	r2, [pc, #404]	@ (80032c0 <HAL_DMA_Abort+0x458>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d031      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a64      	ldr	r2, [pc, #400]	@ (80032c4 <HAL_DMA_Abort+0x45c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d02c      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a62      	ldr	r2, [pc, #392]	@ (80032c8 <HAL_DMA_Abort+0x460>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d027      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a61      	ldr	r2, [pc, #388]	@ (80032cc <HAL_DMA_Abort+0x464>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d022      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5f      	ldr	r2, [pc, #380]	@ (80032d0 <HAL_DMA_Abort+0x468>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01d      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5e      	ldr	r2, [pc, #376]	@ (80032d4 <HAL_DMA_Abort+0x46c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d018      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5c      	ldr	r2, [pc, #368]	@ (80032d8 <HAL_DMA_Abort+0x470>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a5b      	ldr	r2, [pc, #364]	@ (80032dc <HAL_DMA_Abort+0x474>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a59      	ldr	r2, [pc, #356]	@ (80032e0 <HAL_DMA_Abort+0x478>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a58      	ldr	r2, [pc, #352]	@ (80032e4 <HAL_DMA_Abort+0x47c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_DMA_Abort+0x32a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a56      	ldr	r2, [pc, #344]	@ (80032e8 <HAL_DMA_Abort+0x480>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d108      	bne.n	80031a4 <HAL_DMA_Abort+0x33c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	e007      	b.n	80031b4 <HAL_DMA_Abort+0x34c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031b4:	e013      	b.n	80031de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031b6:	f7ff fc9f 	bl	8002af8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d90c      	bls.n	80031de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2203      	movs	r2, #3
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e12d      	b.n	800343a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1e5      	bne.n	80031b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a2f      	ldr	r2, [pc, #188]	@ (80032ac <HAL_DMA_Abort+0x444>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d04a      	beq.n	800328a <HAL_DMA_Abort+0x422>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a2d      	ldr	r2, [pc, #180]	@ (80032b0 <HAL_DMA_Abort+0x448>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d045      	beq.n	800328a <HAL_DMA_Abort+0x422>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2c      	ldr	r2, [pc, #176]	@ (80032b4 <HAL_DMA_Abort+0x44c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d040      	beq.n	800328a <HAL_DMA_Abort+0x422>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2a      	ldr	r2, [pc, #168]	@ (80032b8 <HAL_DMA_Abort+0x450>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d03b      	beq.n	800328a <HAL_DMA_Abort+0x422>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a29      	ldr	r2, [pc, #164]	@ (80032bc <HAL_DMA_Abort+0x454>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d036      	beq.n	800328a <HAL_DMA_Abort+0x422>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a27      	ldr	r2, [pc, #156]	@ (80032c0 <HAL_DMA_Abort+0x458>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d031      	beq.n	800328a <HAL_DMA_Abort+0x422>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a26      	ldr	r2, [pc, #152]	@ (80032c4 <HAL_DMA_Abort+0x45c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d02c      	beq.n	800328a <HAL_DMA_Abort+0x422>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a24      	ldr	r2, [pc, #144]	@ (80032c8 <HAL_DMA_Abort+0x460>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d027      	beq.n	800328a <HAL_DMA_Abort+0x422>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a23      	ldr	r2, [pc, #140]	@ (80032cc <HAL_DMA_Abort+0x464>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d022      	beq.n	800328a <HAL_DMA_Abort+0x422>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a21      	ldr	r2, [pc, #132]	@ (80032d0 <HAL_DMA_Abort+0x468>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01d      	beq.n	800328a <HAL_DMA_Abort+0x422>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a20      	ldr	r2, [pc, #128]	@ (80032d4 <HAL_DMA_Abort+0x46c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d018      	beq.n	800328a <HAL_DMA_Abort+0x422>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1e      	ldr	r2, [pc, #120]	@ (80032d8 <HAL_DMA_Abort+0x470>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_DMA_Abort+0x422>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <HAL_DMA_Abort+0x474>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00e      	beq.n	800328a <HAL_DMA_Abort+0x422>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1b      	ldr	r2, [pc, #108]	@ (80032e0 <HAL_DMA_Abort+0x478>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d009      	beq.n	800328a <HAL_DMA_Abort+0x422>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1a      	ldr	r2, [pc, #104]	@ (80032e4 <HAL_DMA_Abort+0x47c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_DMA_Abort+0x422>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a18      	ldr	r2, [pc, #96]	@ (80032e8 <HAL_DMA_Abort+0x480>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d101      	bne.n	800328e <HAL_DMA_Abort+0x426>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_DMA_Abort+0x428>
 800328e:	2300      	movs	r3, #0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d02b      	beq.n	80032ec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	223f      	movs	r2, #63	@ 0x3f
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	e02a      	b.n	8003302 <HAL_DMA_Abort+0x49a>
 80032ac:	40020010 	.word	0x40020010
 80032b0:	40020028 	.word	0x40020028
 80032b4:	40020040 	.word	0x40020040
 80032b8:	40020058 	.word	0x40020058
 80032bc:	40020070 	.word	0x40020070
 80032c0:	40020088 	.word	0x40020088
 80032c4:	400200a0 	.word	0x400200a0
 80032c8:	400200b8 	.word	0x400200b8
 80032cc:	40020410 	.word	0x40020410
 80032d0:	40020428 	.word	0x40020428
 80032d4:	40020440 	.word	0x40020440
 80032d8:	40020458 	.word	0x40020458
 80032dc:	40020470 	.word	0x40020470
 80032e0:	40020488 	.word	0x40020488
 80032e4:	400204a0 	.word	0x400204a0
 80032e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2201      	movs	r2, #1
 80032fc:	409a      	lsls	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a4f      	ldr	r2, [pc, #316]	@ (8003444 <HAL_DMA_Abort+0x5dc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d072      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a4d      	ldr	r2, [pc, #308]	@ (8003448 <HAL_DMA_Abort+0x5e0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d06d      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a4c      	ldr	r2, [pc, #304]	@ (800344c <HAL_DMA_Abort+0x5e4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d068      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a4a      	ldr	r2, [pc, #296]	@ (8003450 <HAL_DMA_Abort+0x5e8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d063      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a49      	ldr	r2, [pc, #292]	@ (8003454 <HAL_DMA_Abort+0x5ec>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d05e      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a47      	ldr	r2, [pc, #284]	@ (8003458 <HAL_DMA_Abort+0x5f0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d059      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a46      	ldr	r2, [pc, #280]	@ (800345c <HAL_DMA_Abort+0x5f4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d054      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a44      	ldr	r2, [pc, #272]	@ (8003460 <HAL_DMA_Abort+0x5f8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d04f      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a43      	ldr	r2, [pc, #268]	@ (8003464 <HAL_DMA_Abort+0x5fc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d04a      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a41      	ldr	r2, [pc, #260]	@ (8003468 <HAL_DMA_Abort+0x600>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d045      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a40      	ldr	r2, [pc, #256]	@ (800346c <HAL_DMA_Abort+0x604>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d040      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3e      	ldr	r2, [pc, #248]	@ (8003470 <HAL_DMA_Abort+0x608>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d03b      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a3d      	ldr	r2, [pc, #244]	@ (8003474 <HAL_DMA_Abort+0x60c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d036      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a3b      	ldr	r2, [pc, #236]	@ (8003478 <HAL_DMA_Abort+0x610>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d031      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a3a      	ldr	r2, [pc, #232]	@ (800347c <HAL_DMA_Abort+0x614>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d02c      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a38      	ldr	r2, [pc, #224]	@ (8003480 <HAL_DMA_Abort+0x618>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d027      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a37      	ldr	r2, [pc, #220]	@ (8003484 <HAL_DMA_Abort+0x61c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d022      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a35      	ldr	r2, [pc, #212]	@ (8003488 <HAL_DMA_Abort+0x620>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d01d      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a34      	ldr	r2, [pc, #208]	@ (800348c <HAL_DMA_Abort+0x624>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d018      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a32      	ldr	r2, [pc, #200]	@ (8003490 <HAL_DMA_Abort+0x628>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a31      	ldr	r2, [pc, #196]	@ (8003494 <HAL_DMA_Abort+0x62c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00e      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003498 <HAL_DMA_Abort+0x630>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2e      	ldr	r2, [pc, #184]	@ (800349c <HAL_DMA_Abort+0x634>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_DMA_Abort+0x58a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2c      	ldr	r2, [pc, #176]	@ (80034a0 <HAL_DMA_Abort+0x638>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_DMA_Abort+0x58e>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_DMA_Abort+0x590>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d015      	beq.n	8003428 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003404:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00c      	beq.n	8003428 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003418:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800341c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003426:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40020010 	.word	0x40020010
 8003448:	40020028 	.word	0x40020028
 800344c:	40020040 	.word	0x40020040
 8003450:	40020058 	.word	0x40020058
 8003454:	40020070 	.word	0x40020070
 8003458:	40020088 	.word	0x40020088
 800345c:	400200a0 	.word	0x400200a0
 8003460:	400200b8 	.word	0x400200b8
 8003464:	40020410 	.word	0x40020410
 8003468:	40020428 	.word	0x40020428
 800346c:	40020440 	.word	0x40020440
 8003470:	40020458 	.word	0x40020458
 8003474:	40020470 	.word	0x40020470
 8003478:	40020488 	.word	0x40020488
 800347c:	400204a0 	.word	0x400204a0
 8003480:	400204b8 	.word	0x400204b8
 8003484:	58025408 	.word	0x58025408
 8003488:	5802541c 	.word	0x5802541c
 800348c:	58025430 	.word	0x58025430
 8003490:	58025444 	.word	0x58025444
 8003494:	58025458 	.word	0x58025458
 8003498:	5802546c 	.word	0x5802546c
 800349c:	58025480 	.word	0x58025480
 80034a0:	58025494 	.word	0x58025494

080034a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e237      	b.n	8003926 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d004      	beq.n	80034cc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2280      	movs	r2, #128	@ 0x80
 80034c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e22c      	b.n	8003926 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003644 <HAL_DMA_Abort_IT+0x1a0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d04a      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a5b      	ldr	r2, [pc, #364]	@ (8003648 <HAL_DMA_Abort_IT+0x1a4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d045      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a59      	ldr	r2, [pc, #356]	@ (800364c <HAL_DMA_Abort_IT+0x1a8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d040      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a58      	ldr	r2, [pc, #352]	@ (8003650 <HAL_DMA_Abort_IT+0x1ac>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d03b      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a56      	ldr	r2, [pc, #344]	@ (8003654 <HAL_DMA_Abort_IT+0x1b0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d036      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a55      	ldr	r2, [pc, #340]	@ (8003658 <HAL_DMA_Abort_IT+0x1b4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d031      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a53      	ldr	r2, [pc, #332]	@ (800365c <HAL_DMA_Abort_IT+0x1b8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02c      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a52      	ldr	r2, [pc, #328]	@ (8003660 <HAL_DMA_Abort_IT+0x1bc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d027      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a50      	ldr	r2, [pc, #320]	@ (8003664 <HAL_DMA_Abort_IT+0x1c0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d022      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a4f      	ldr	r2, [pc, #316]	@ (8003668 <HAL_DMA_Abort_IT+0x1c4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d01d      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a4d      	ldr	r2, [pc, #308]	@ (800366c <HAL_DMA_Abort_IT+0x1c8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d018      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a4c      	ldr	r2, [pc, #304]	@ (8003670 <HAL_DMA_Abort_IT+0x1cc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a4a      	ldr	r2, [pc, #296]	@ (8003674 <HAL_DMA_Abort_IT+0x1d0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a49      	ldr	r2, [pc, #292]	@ (8003678 <HAL_DMA_Abort_IT+0x1d4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a47      	ldr	r2, [pc, #284]	@ (800367c <HAL_DMA_Abort_IT+0x1d8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_DMA_Abort_IT+0xc8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a46      	ldr	r2, [pc, #280]	@ (8003680 <HAL_DMA_Abort_IT+0x1dc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d101      	bne.n	8003570 <HAL_DMA_Abort_IT+0xcc>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_DMA_Abort_IT+0xce>
 8003570:	2300      	movs	r3, #0
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8086 	beq.w	8003684 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2204      	movs	r2, #4
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2f      	ldr	r2, [pc, #188]	@ (8003644 <HAL_DMA_Abort_IT+0x1a0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d04a      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2e      	ldr	r2, [pc, #184]	@ (8003648 <HAL_DMA_Abort_IT+0x1a4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d045      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2c      	ldr	r2, [pc, #176]	@ (800364c <HAL_DMA_Abort_IT+0x1a8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d040      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003650 <HAL_DMA_Abort_IT+0x1ac>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d03b      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a29      	ldr	r2, [pc, #164]	@ (8003654 <HAL_DMA_Abort_IT+0x1b0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d036      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a28      	ldr	r2, [pc, #160]	@ (8003658 <HAL_DMA_Abort_IT+0x1b4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d031      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a26      	ldr	r2, [pc, #152]	@ (800365c <HAL_DMA_Abort_IT+0x1b8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d02c      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a25      	ldr	r2, [pc, #148]	@ (8003660 <HAL_DMA_Abort_IT+0x1bc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d027      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a23      	ldr	r2, [pc, #140]	@ (8003664 <HAL_DMA_Abort_IT+0x1c0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d022      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a22      	ldr	r2, [pc, #136]	@ (8003668 <HAL_DMA_Abort_IT+0x1c4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d01d      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a20      	ldr	r2, [pc, #128]	@ (800366c <HAL_DMA_Abort_IT+0x1c8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d018      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003670 <HAL_DMA_Abort_IT+0x1cc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d013      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003674 <HAL_DMA_Abort_IT+0x1d0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00e      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1c      	ldr	r2, [pc, #112]	@ (8003678 <HAL_DMA_Abort_IT+0x1d4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d009      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1a      	ldr	r2, [pc, #104]	@ (800367c <HAL_DMA_Abort_IT+0x1d8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <HAL_DMA_Abort_IT+0x17c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <HAL_DMA_Abort_IT+0x1dc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d108      	bne.n	8003632 <HAL_DMA_Abort_IT+0x18e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e178      	b.n	8003924 <HAL_DMA_Abort_IT+0x480>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e16f      	b.n	8003924 <HAL_DMA_Abort_IT+0x480>
 8003644:	40020010 	.word	0x40020010
 8003648:	40020028 	.word	0x40020028
 800364c:	40020040 	.word	0x40020040
 8003650:	40020058 	.word	0x40020058
 8003654:	40020070 	.word	0x40020070
 8003658:	40020088 	.word	0x40020088
 800365c:	400200a0 	.word	0x400200a0
 8003660:	400200b8 	.word	0x400200b8
 8003664:	40020410 	.word	0x40020410
 8003668:	40020428 	.word	0x40020428
 800366c:	40020440 	.word	0x40020440
 8003670:	40020458 	.word	0x40020458
 8003674:	40020470 	.word	0x40020470
 8003678:	40020488 	.word	0x40020488
 800367c:	400204a0 	.word	0x400204a0
 8003680:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 020e 	bic.w	r2, r2, #14
 8003692:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6c      	ldr	r2, [pc, #432]	@ (800384c <HAL_DMA_Abort_IT+0x3a8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d04a      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6b      	ldr	r2, [pc, #428]	@ (8003850 <HAL_DMA_Abort_IT+0x3ac>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d045      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a69      	ldr	r2, [pc, #420]	@ (8003854 <HAL_DMA_Abort_IT+0x3b0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d040      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a68      	ldr	r2, [pc, #416]	@ (8003858 <HAL_DMA_Abort_IT+0x3b4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d03b      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a66      	ldr	r2, [pc, #408]	@ (800385c <HAL_DMA_Abort_IT+0x3b8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d036      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a65      	ldr	r2, [pc, #404]	@ (8003860 <HAL_DMA_Abort_IT+0x3bc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d031      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a63      	ldr	r2, [pc, #396]	@ (8003864 <HAL_DMA_Abort_IT+0x3c0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02c      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a62      	ldr	r2, [pc, #392]	@ (8003868 <HAL_DMA_Abort_IT+0x3c4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d027      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a60      	ldr	r2, [pc, #384]	@ (800386c <HAL_DMA_Abort_IT+0x3c8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d022      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a5f      	ldr	r2, [pc, #380]	@ (8003870 <HAL_DMA_Abort_IT+0x3cc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01d      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003874 <HAL_DMA_Abort_IT+0x3d0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5c      	ldr	r2, [pc, #368]	@ (8003878 <HAL_DMA_Abort_IT+0x3d4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a5a      	ldr	r2, [pc, #360]	@ (800387c <HAL_DMA_Abort_IT+0x3d8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a59      	ldr	r2, [pc, #356]	@ (8003880 <HAL_DMA_Abort_IT+0x3dc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a57      	ldr	r2, [pc, #348]	@ (8003884 <HAL_DMA_Abort_IT+0x3e0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_DMA_Abort_IT+0x290>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a56      	ldr	r2, [pc, #344]	@ (8003888 <HAL_DMA_Abort_IT+0x3e4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d108      	bne.n	8003746 <HAL_DMA_Abort_IT+0x2a2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e007      	b.n	8003756 <HAL_DMA_Abort_IT+0x2b2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3c      	ldr	r2, [pc, #240]	@ (800384c <HAL_DMA_Abort_IT+0x3a8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d072      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3a      	ldr	r2, [pc, #232]	@ (8003850 <HAL_DMA_Abort_IT+0x3ac>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d06d      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a39      	ldr	r2, [pc, #228]	@ (8003854 <HAL_DMA_Abort_IT+0x3b0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d068      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a37      	ldr	r2, [pc, #220]	@ (8003858 <HAL_DMA_Abort_IT+0x3b4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d063      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a36      	ldr	r2, [pc, #216]	@ (800385c <HAL_DMA_Abort_IT+0x3b8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d05e      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a34      	ldr	r2, [pc, #208]	@ (8003860 <HAL_DMA_Abort_IT+0x3bc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d059      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a33      	ldr	r2, [pc, #204]	@ (8003864 <HAL_DMA_Abort_IT+0x3c0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d054      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a31      	ldr	r2, [pc, #196]	@ (8003868 <HAL_DMA_Abort_IT+0x3c4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d04f      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a30      	ldr	r2, [pc, #192]	@ (800386c <HAL_DMA_Abort_IT+0x3c8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d04a      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003870 <HAL_DMA_Abort_IT+0x3cc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d045      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2d      	ldr	r2, [pc, #180]	@ (8003874 <HAL_DMA_Abort_IT+0x3d0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d040      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003878 <HAL_DMA_Abort_IT+0x3d4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d03b      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2a      	ldr	r2, [pc, #168]	@ (800387c <HAL_DMA_Abort_IT+0x3d8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d036      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a28      	ldr	r2, [pc, #160]	@ (8003880 <HAL_DMA_Abort_IT+0x3dc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d031      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a27      	ldr	r2, [pc, #156]	@ (8003884 <HAL_DMA_Abort_IT+0x3e0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d02c      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a25      	ldr	r2, [pc, #148]	@ (8003888 <HAL_DMA_Abort_IT+0x3e4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d027      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a24      	ldr	r2, [pc, #144]	@ (800388c <HAL_DMA_Abort_IT+0x3e8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d022      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <HAL_DMA_Abort_IT+0x3ec>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01d      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a21      	ldr	r2, [pc, #132]	@ (8003894 <HAL_DMA_Abort_IT+0x3f0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d018      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1f      	ldr	r2, [pc, #124]	@ (8003898 <HAL_DMA_Abort_IT+0x3f4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1e      	ldr	r2, [pc, #120]	@ (800389c <HAL_DMA_Abort_IT+0x3f8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00e      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1c      	ldr	r2, [pc, #112]	@ (80038a0 <HAL_DMA_Abort_IT+0x3fc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d009      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1b      	ldr	r2, [pc, #108]	@ (80038a4 <HAL_DMA_Abort_IT+0x400>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_DMA_Abort_IT+0x3a2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a19      	ldr	r2, [pc, #100]	@ (80038a8 <HAL_DMA_Abort_IT+0x404>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d132      	bne.n	80038ac <HAL_DMA_Abort_IT+0x408>
 8003846:	2301      	movs	r3, #1
 8003848:	e031      	b.n	80038ae <HAL_DMA_Abort_IT+0x40a>
 800384a:	bf00      	nop
 800384c:	40020010 	.word	0x40020010
 8003850:	40020028 	.word	0x40020028
 8003854:	40020040 	.word	0x40020040
 8003858:	40020058 	.word	0x40020058
 800385c:	40020070 	.word	0x40020070
 8003860:	40020088 	.word	0x40020088
 8003864:	400200a0 	.word	0x400200a0
 8003868:	400200b8 	.word	0x400200b8
 800386c:	40020410 	.word	0x40020410
 8003870:	40020428 	.word	0x40020428
 8003874:	40020440 	.word	0x40020440
 8003878:	40020458 	.word	0x40020458
 800387c:	40020470 	.word	0x40020470
 8003880:	40020488 	.word	0x40020488
 8003884:	400204a0 	.word	0x400204a0
 8003888:	400204b8 	.word	0x400204b8
 800388c:	58025408 	.word	0x58025408
 8003890:	5802541c 	.word	0x5802541c
 8003894:	58025430 	.word	0x58025430
 8003898:	58025444 	.word	0x58025444
 800389c:	58025458 	.word	0x58025458
 80038a0:	5802546c 	.word	0x5802546c
 80038a4:	58025480 	.word	0x58025480
 80038a8:	58025494 	.word	0x58025494
 80038ac:	2300      	movs	r3, #0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d028      	beq.n	8003904 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038e0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00c      	beq.n	8003904 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038f8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003902:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop

08003930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003930:	b480      	push	{r7}
 8003932:	b089      	sub	sp, #36	@ 0x24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800393e:	4b86      	ldr	r3, [pc, #536]	@ (8003b58 <HAL_GPIO_Init+0x228>)
 8003940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003942:	e18c      	b.n	8003c5e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa01 f303 	lsl.w	r3, r1, r3
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 817e 	beq.w	8003c58 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d005      	beq.n	8003974 <HAL_GPIO_Init+0x44>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d130      	bne.n	80039d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	2203      	movs	r2, #3
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039aa:	2201      	movs	r2, #1
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	f003 0201 	and.w	r2, r3, #1
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d017      	beq.n	8003a12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	2203      	movs	r2, #3
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d123      	bne.n	8003a66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	08da      	lsrs	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3208      	adds	r2, #8
 8003a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	220f      	movs	r2, #15
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3208      	adds	r2, #8
 8003a60:	69b9      	ldr	r1, [r7, #24]
 8003a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	2203      	movs	r2, #3
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0203 	and.w	r2, r3, #3
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80d8 	beq.w	8003c58 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b5c <HAL_GPIO_Init+0x22c>)
 8003aaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003aae:	4a2b      	ldr	r2, [pc, #172]	@ (8003b5c <HAL_GPIO_Init+0x22c>)
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ab8:	4b28      	ldr	r3, [pc, #160]	@ (8003b5c <HAL_GPIO_Init+0x22c>)
 8003aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ac6:	4a26      	ldr	r2, [pc, #152]	@ (8003b60 <HAL_GPIO_Init+0x230>)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	089b      	lsrs	r3, r3, #2
 8003acc:	3302      	adds	r3, #2
 8003ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	220f      	movs	r2, #15
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <HAL_GPIO_Init+0x234>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d04a      	beq.n	8003b88 <HAL_GPIO_Init+0x258>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b68 <HAL_GPIO_Init+0x238>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02b      	beq.n	8003b52 <HAL_GPIO_Init+0x222>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b6c <HAL_GPIO_Init+0x23c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d025      	beq.n	8003b4e <HAL_GPIO_Init+0x21e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1a      	ldr	r2, [pc, #104]	@ (8003b70 <HAL_GPIO_Init+0x240>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01f      	beq.n	8003b4a <HAL_GPIO_Init+0x21a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	@ (8003b74 <HAL_GPIO_Init+0x244>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d019      	beq.n	8003b46 <HAL_GPIO_Init+0x216>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <HAL_GPIO_Init+0x248>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_GPIO_Init+0x212>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <HAL_GPIO_Init+0x24c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00d      	beq.n	8003b3e <HAL_GPIO_Init+0x20e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <HAL_GPIO_Init+0x250>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <HAL_GPIO_Init+0x20a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	@ (8003b84 <HAL_GPIO_Init+0x254>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_GPIO_Init+0x206>
 8003b32:	2309      	movs	r3, #9
 8003b34:	e029      	b.n	8003b8a <HAL_GPIO_Init+0x25a>
 8003b36:	230a      	movs	r3, #10
 8003b38:	e027      	b.n	8003b8a <HAL_GPIO_Init+0x25a>
 8003b3a:	2307      	movs	r3, #7
 8003b3c:	e025      	b.n	8003b8a <HAL_GPIO_Init+0x25a>
 8003b3e:	2306      	movs	r3, #6
 8003b40:	e023      	b.n	8003b8a <HAL_GPIO_Init+0x25a>
 8003b42:	2305      	movs	r3, #5
 8003b44:	e021      	b.n	8003b8a <HAL_GPIO_Init+0x25a>
 8003b46:	2304      	movs	r3, #4
 8003b48:	e01f      	b.n	8003b8a <HAL_GPIO_Init+0x25a>
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e01d      	b.n	8003b8a <HAL_GPIO_Init+0x25a>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e01b      	b.n	8003b8a <HAL_GPIO_Init+0x25a>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e019      	b.n	8003b8a <HAL_GPIO_Init+0x25a>
 8003b56:	bf00      	nop
 8003b58:	58000080 	.word	0x58000080
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	58000400 	.word	0x58000400
 8003b64:	58020000 	.word	0x58020000
 8003b68:	58020400 	.word	0x58020400
 8003b6c:	58020800 	.word	0x58020800
 8003b70:	58020c00 	.word	0x58020c00
 8003b74:	58021000 	.word	0x58021000
 8003b78:	58021400 	.word	0x58021400
 8003b7c:	58021800 	.word	0x58021800
 8003b80:	58021c00 	.word	0x58021c00
 8003b84:	58022400 	.word	0x58022400
 8003b88:	2300      	movs	r3, #0
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	f002 0203 	and.w	r2, r2, #3
 8003b90:	0092      	lsls	r2, r2, #2
 8003b92:	4093      	lsls	r3, r2
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b9a:	4938      	ldr	r1, [pc, #224]	@ (8003c7c <HAL_GPIO_Init+0x34c>)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f ae6b 	bne.w	8003944 <HAL_GPIO_Init+0x14>
  }
}
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	3724      	adds	r7, #36	@ 0x24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	58000400 	.word	0x58000400

08003c80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
 8003c9c:	e001      	b.n	8003ca2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	807b      	strh	r3, [r7, #2]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc0:	787b      	ldrb	r3, [r7, #1]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ccc:	e003      	b.n	8003cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cce:	887b      	ldrh	r3, [r7, #2]
 8003cd0:	041a      	lsls	r2, r3, #16
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	619a      	str	r2, [r3, #24]
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e08b      	b.n	8003e0e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fe f86c 	bl	8001de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	@ 0x24
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	e006      	b.n	8003d6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d108      	bne.n	8003d86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	e007      	b.n	8003d96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <HAL_I2C_Init+0x134>)
 8003da2:	430b      	orrs	r3, r1
 8003da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69d9      	ldr	r1, [r3, #28]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1a      	ldr	r2, [r3, #32]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	02008000 	.word	0x02008000

08003e1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d138      	bne.n	8003ea4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e032      	b.n	8003ea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2224      	movs	r2, #36	@ 0x24
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d139      	bne.n	8003f3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e033      	b.n	8003f3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2224      	movs	r2, #36	@ 0x24
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f54:	4b19      	ldr	r3, [pc, #100]	@ (8003fbc <HAL_PWREx_ConfigSupply+0x70>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d00a      	beq.n	8003f76 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f60:	4b16      	ldr	r3, [pc, #88]	@ (8003fbc <HAL_PWREx_ConfigSupply+0x70>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e01f      	b.n	8003fb2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e01d      	b.n	8003fb2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f76:	4b11      	ldr	r3, [pc, #68]	@ (8003fbc <HAL_PWREx_ConfigSupply+0x70>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f023 0207 	bic.w	r2, r3, #7
 8003f7e:	490f      	ldr	r1, [pc, #60]	@ (8003fbc <HAL_PWREx_ConfigSupply+0x70>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f86:	f7fe fdb7 	bl	8002af8 <HAL_GetTick>
 8003f8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f8c:	e009      	b.n	8003fa2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f8e:	f7fe fdb3 	bl	8002af8 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f9c:	d901      	bls.n	8003fa2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e007      	b.n	8003fb2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fa2:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <HAL_PWREx_ConfigSupply+0x70>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fae:	d1ee      	bne.n	8003f8e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	58024800 	.word	0x58024800

08003fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08c      	sub	sp, #48	@ 0x30
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e3c8      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8087 	beq.w	80040ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe0:	4b88      	ldr	r3, [pc, #544]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fea:	4b86      	ldr	r3, [pc, #536]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff2:	2b10      	cmp	r3, #16
 8003ff4:	d007      	beq.n	8004006 <HAL_RCC_OscConfig+0x46>
 8003ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff8:	2b18      	cmp	r3, #24
 8003ffa:	d110      	bne.n	800401e <HAL_RCC_OscConfig+0x5e>
 8003ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d10b      	bne.n	800401e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004006:	4b7f      	ldr	r3, [pc, #508]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d06c      	beq.n	80040ec <HAL_RCC_OscConfig+0x12c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d168      	bne.n	80040ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e3a2      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004026:	d106      	bne.n	8004036 <HAL_RCC_OscConfig+0x76>
 8004028:	4b76      	ldr	r3, [pc, #472]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a75      	ldr	r2, [pc, #468]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 800402e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e02e      	b.n	8004094 <HAL_RCC_OscConfig+0xd4>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0x98>
 800403e:	4b71      	ldr	r3, [pc, #452]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a70      	ldr	r2, [pc, #448]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b6e      	ldr	r3, [pc, #440]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a6d      	ldr	r2, [pc, #436]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004050:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e01d      	b.n	8004094 <HAL_RCC_OscConfig+0xd4>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0xbc>
 8004062:	4b68      	ldr	r3, [pc, #416]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a67      	ldr	r2, [pc, #412]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b65      	ldr	r3, [pc, #404]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a64      	ldr	r2, [pc, #400]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e00b      	b.n	8004094 <HAL_RCC_OscConfig+0xd4>
 800407c:	4b61      	ldr	r3, [pc, #388]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a60      	ldr	r2, [pc, #384]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b5e      	ldr	r3, [pc, #376]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a5d      	ldr	r2, [pc, #372]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 800408e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fe fd2c 	bl	8002af8 <HAL_GetTick>
 80040a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fe fd28 	bl	8002af8 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	@ 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e356      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040b6:	4b53      	ldr	r3, [pc, #332]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0xe4>
 80040c2:	e014      	b.n	80040ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fe fd18 	bl	8002af8 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fe fd14 	bl	8002af8 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	@ 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e342      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040de:	4b49      	ldr	r3, [pc, #292]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x10c>
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 808c 	beq.w	8004214 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fc:	4b41      	ldr	r3, [pc, #260]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004104:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004106:	4b3f      	ldr	r3, [pc, #252]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_RCC_OscConfig+0x162>
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	2b18      	cmp	r3, #24
 8004116:	d137      	bne.n	8004188 <HAL_RCC_OscConfig+0x1c8>
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d132      	bne.n	8004188 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004122:	4b38      	ldr	r3, [pc, #224]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_RCC_OscConfig+0x17a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e314      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800413a:	4b32      	ldr	r3, [pc, #200]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0219 	bic.w	r2, r3, #25
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	492f      	ldr	r1, [pc, #188]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004148:	4313      	orrs	r3, r2
 800414a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe fcd4 	bl	8002af8 <HAL_GetTick>
 8004150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004154:	f7fe fcd0 	bl	8002af8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e2fe      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004166:	4b27      	ldr	r3, [pc, #156]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004172:	4b24      	ldr	r3, [pc, #144]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	061b      	lsls	r3, r3, #24
 8004180:	4920      	ldr	r1, [pc, #128]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004186:	e045      	b.n	8004214 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d026      	beq.n	80041de <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004190:	4b1c      	ldr	r3, [pc, #112]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f023 0219 	bic.w	r2, r3, #25
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4919      	ldr	r1, [pc, #100]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fe fca9 	bl	8002af8 <HAL_GetTick>
 80041a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fe fca5 	bl	8002af8 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e2d3      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	061b      	lsls	r3, r3, #24
 80041d6:	490b      	ldr	r1, [pc, #44]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	604b      	str	r3, [r1, #4]
 80041dc:	e01a      	b.n	8004214 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041de:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a08      	ldr	r2, [pc, #32]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fe fc85 	bl	8002af8 <HAL_GetTick>
 80041ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f2:	f7fe fc81 	bl	8002af8 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d903      	bls.n	8004208 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e2af      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
 8004204:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004208:	4b96      	ldr	r3, [pc, #600]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ee      	bne.n	80041f2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d06a      	beq.n	80042f6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004220:	4b90      	ldr	r3, [pc, #576]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004228:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800422a:	4b8e      	ldr	r3, [pc, #568]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b08      	cmp	r3, #8
 8004234:	d007      	beq.n	8004246 <HAL_RCC_OscConfig+0x286>
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b18      	cmp	r3, #24
 800423a:	d11b      	bne.n	8004274 <HAL_RCC_OscConfig+0x2b4>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b01      	cmp	r3, #1
 8004244:	d116      	bne.n	8004274 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004246:	4b87      	ldr	r3, [pc, #540]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_RCC_OscConfig+0x29e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	2b80      	cmp	r3, #128	@ 0x80
 8004258:	d001      	beq.n	800425e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e282      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800425e:	4b81      	ldr	r3, [pc, #516]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	497d      	ldr	r1, [pc, #500]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004272:	e040      	b.n	80042f6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d023      	beq.n	80042c4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800427c:	4b79      	ldr	r3, [pc, #484]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a78      	ldr	r2, [pc, #480]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fe fc36 	bl	8002af8 <HAL_GetTick>
 800428c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004290:	f7fe fc32 	bl	8002af8 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e260      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042a2:	4b70      	ldr	r3, [pc, #448]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	061b      	lsls	r3, r3, #24
 80042bc:	4969      	ldr	r1, [pc, #420]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	60cb      	str	r3, [r1, #12]
 80042c2:	e018      	b.n	80042f6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80042c4:	4b67      	ldr	r3, [pc, #412]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a66      	ldr	r2, [pc, #408]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 80042ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fe fc12 	bl	8002af8 <HAL_GetTick>
 80042d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042d8:	f7fe fc0e 	bl	8002af8 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e23c      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042ea:	4b5e      	ldr	r3, [pc, #376]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d036      	beq.n	8004370 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d019      	beq.n	800433e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430a:	4b56      	ldr	r3, [pc, #344]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 800430c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430e:	4a55      	ldr	r2, [pc, #340]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004316:	f7fe fbef 	bl	8002af8 <HAL_GetTick>
 800431a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431e:	f7fe fbeb 	bl	8002af8 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e219      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004330:	4b4c      	ldr	r3, [pc, #304]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x35e>
 800433c:	e018      	b.n	8004370 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800433e:	4b49      	ldr	r3, [pc, #292]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004342:	4a48      	ldr	r2, [pc, #288]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434a:	f7fe fbd5 	bl	8002af8 <HAL_GetTick>
 800434e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004352:	f7fe fbd1 	bl	8002af8 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e1ff      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004364:	4b3f      	ldr	r3, [pc, #252]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d036      	beq.n	80043ea <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d019      	beq.n	80043b8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004384:	4b37      	ldr	r3, [pc, #220]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a36      	ldr	r2, [pc, #216]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 800438a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800438e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004390:	f7fe fbb2 	bl	8002af8 <HAL_GetTick>
 8004394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004398:	f7fe fbae 	bl	8002af8 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1dc      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x3d8>
 80043b6:	e018      	b.n	80043ea <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a29      	ldr	r2, [pc, #164]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 80043be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043c4:	f7fe fb98 	bl	8002af8 <HAL_GetTick>
 80043c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043cc:	f7fe fb94 	bl	8002af8 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1c2      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043de:	4b21      	ldr	r3, [pc, #132]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8086 	beq.w	8004504 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004468 <HAL_RCC_OscConfig+0x4a8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004468 <HAL_RCC_OscConfig+0x4a8>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004402:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004404:	f7fe fb78 	bl	8002af8 <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440c:	f7fe fb74 	bl	8002af8 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1a2      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800441e:	4b12      	ldr	r3, [pc, #72]	@ (8004468 <HAL_RCC_OscConfig+0x4a8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d106      	bne.n	8004440 <HAL_RCC_OscConfig+0x480>
 8004432:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004436:	4a0b      	ldr	r2, [pc, #44]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6713      	str	r3, [r2, #112]	@ 0x70
 800443e:	e032      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d111      	bne.n	800446c <HAL_RCC_OscConfig+0x4ac>
 8004448:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	4a05      	ldr	r2, [pc, #20]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	@ 0x70
 8004454:	4b03      	ldr	r3, [pc, #12]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004458:	4a02      	ldr	r2, [pc, #8]	@ (8004464 <HAL_RCC_OscConfig+0x4a4>)
 800445a:	f023 0304 	bic.w	r3, r3, #4
 800445e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004460:	e021      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e6>
 8004462:	bf00      	nop
 8004464:	58024400 	.word	0x58024400
 8004468:	58024800 	.word	0x58024800
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b05      	cmp	r3, #5
 8004472:	d10c      	bne.n	800448e <HAL_RCC_OscConfig+0x4ce>
 8004474:	4b83      	ldr	r3, [pc, #524]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004478:	4a82      	ldr	r2, [pc, #520]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 800447a:	f043 0304 	orr.w	r3, r3, #4
 800447e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004480:	4b80      	ldr	r3, [pc, #512]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004484:	4a7f      	ldr	r2, [pc, #508]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6713      	str	r3, [r2, #112]	@ 0x70
 800448c:	e00b      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e6>
 800448e:	4b7d      	ldr	r3, [pc, #500]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	4a7c      	ldr	r2, [pc, #496]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6713      	str	r3, [r2, #112]	@ 0x70
 800449a:	4b7a      	ldr	r3, [pc, #488]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449e:	4a79      	ldr	r2, [pc, #484]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80044a0:	f023 0304 	bic.w	r3, r3, #4
 80044a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d015      	beq.n	80044da <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ae:	f7fe fb23 	bl	8002af8 <HAL_GetTick>
 80044b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044b4:	e00a      	b.n	80044cc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fe fb1f 	bl	8002af8 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e14b      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044cc:	4b6d      	ldr	r3, [pc, #436]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ee      	beq.n	80044b6 <HAL_RCC_OscConfig+0x4f6>
 80044d8:	e014      	b.n	8004504 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fe fb0d 	bl	8002af8 <HAL_GetTick>
 80044de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044e0:	e00a      	b.n	80044f8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e2:	f7fe fb09 	bl	8002af8 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e135      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044f8:	4b62      	ldr	r3, [pc, #392]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1ee      	bne.n	80044e2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 812a 	beq.w	8004762 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800450e:	4b5d      	ldr	r3, [pc, #372]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004516:	2b18      	cmp	r3, #24
 8004518:	f000 80ba 	beq.w	8004690 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	2b02      	cmp	r3, #2
 8004522:	f040 8095 	bne.w	8004650 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b57      	ldr	r3, [pc, #348]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a56      	ldr	r2, [pc, #344]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 800452c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004532:	f7fe fae1 	bl	8002af8 <HAL_GetTick>
 8004536:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453a:	f7fe fadd 	bl	8002af8 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e10b      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800454c:	4b4d      	ldr	r3, [pc, #308]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004558:	4b4a      	ldr	r3, [pc, #296]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 800455a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800455c:	4b4a      	ldr	r3, [pc, #296]	@ (8004688 <HAL_RCC_OscConfig+0x6c8>)
 800455e:	4013      	ands	r3, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004568:	0112      	lsls	r2, r2, #4
 800456a:	430a      	orrs	r2, r1
 800456c:	4945      	ldr	r1, [pc, #276]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	628b      	str	r3, [r1, #40]	@ 0x28
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	3b01      	subs	r3, #1
 8004578:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004580:	3b01      	subs	r3, #1
 8004582:	025b      	lsls	r3, r3, #9
 8004584:	b29b      	uxth	r3, r3
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	3b01      	subs	r3, #1
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459a:	3b01      	subs	r3, #1
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045a2:	4938      	ldr	r1, [pc, #224]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80045a8:	4b36      	ldr	r3, [pc, #216]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	4a35      	ldr	r2, [pc, #212]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045b4:	4b33      	ldr	r3, [pc, #204]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045b8:	4b34      	ldr	r3, [pc, #208]	@ (800468c <HAL_RCC_OscConfig+0x6cc>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80045c0:	00d2      	lsls	r2, r2, #3
 80045c2:	4930      	ldr	r1, [pc, #192]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80045c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	f023 020c 	bic.w	r2, r3, #12
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	492b      	ldr	r1, [pc, #172]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045da:	4b2a      	ldr	r3, [pc, #168]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	f023 0202 	bic.w	r2, r3, #2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e6:	4927      	ldr	r1, [pc, #156]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045ec:	4b25      	ldr	r3, [pc, #148]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	4a24      	ldr	r2, [pc, #144]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4b22      	ldr	r3, [pc, #136]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4a21      	ldr	r2, [pc, #132]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004604:	4b1f      	ldr	r3, [pc, #124]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	4a1e      	ldr	r2, [pc, #120]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 800460a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800460e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004610:	4b1c      	ldr	r3, [pc, #112]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	4a1b      	ldr	r2, [pc, #108]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800461c:	4b19      	ldr	r3, [pc, #100]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a18      	ldr	r2, [pc, #96]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fe fa66 	bl	8002af8 <HAL_GetTick>
 800462c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004630:	f7fe fa62 	bl	8002af8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e090      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004642:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x670>
 800464e:	e088      	b.n	8004762 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004650:	4b0c      	ldr	r3, [pc, #48]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0b      	ldr	r2, [pc, #44]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800465a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fe fa4c 	bl	8002af8 <HAL_GetTick>
 8004660:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7fe fa48 	bl	8002af8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e076      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004676:	4b03      	ldr	r3, [pc, #12]	@ (8004684 <HAL_RCC_OscConfig+0x6c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x6a4>
 8004682:	e06e      	b.n	8004762 <HAL_RCC_OscConfig+0x7a2>
 8004684:	58024400 	.word	0x58024400
 8004688:	fffffc0c 	.word	0xfffffc0c
 800468c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004690:	4b36      	ldr	r3, [pc, #216]	@ (800476c <HAL_RCC_OscConfig+0x7ac>)
 8004692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004694:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004696:	4b35      	ldr	r3, [pc, #212]	@ (800476c <HAL_RCC_OscConfig+0x7ac>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d031      	beq.n	8004708 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f003 0203 	and.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d12a      	bne.n	8004708 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d122      	bne.n	8004708 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d11a      	bne.n	8004708 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	0a5b      	lsrs	r3, r3, #9
 80046d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d111      	bne.n	8004708 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	0c1b      	lsrs	r3, r3, #16
 80046e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d108      	bne.n	8004708 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	0e1b      	lsrs	r3, r3, #24
 80046fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004702:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e02b      	b.n	8004764 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800470c:	4b17      	ldr	r3, [pc, #92]	@ (800476c <HAL_RCC_OscConfig+0x7ac>)
 800470e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004716:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	429a      	cmp	r2, r3
 8004720:	d01f      	beq.n	8004762 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004722:	4b12      	ldr	r3, [pc, #72]	@ (800476c <HAL_RCC_OscConfig+0x7ac>)
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	4a11      	ldr	r2, [pc, #68]	@ (800476c <HAL_RCC_OscConfig+0x7ac>)
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800472e:	f7fe f9e3 	bl	8002af8 <HAL_GetTick>
 8004732:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004734:	bf00      	nop
 8004736:	f7fe f9df 	bl	8002af8 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	4293      	cmp	r3, r2
 8004740:	d0f9      	beq.n	8004736 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004742:	4b0a      	ldr	r3, [pc, #40]	@ (800476c <HAL_RCC_OscConfig+0x7ac>)
 8004744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004746:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <HAL_RCC_OscConfig+0x7b0>)
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800474e:	00d2      	lsls	r2, r2, #3
 8004750:	4906      	ldr	r1, [pc, #24]	@ (800476c <HAL_RCC_OscConfig+0x7ac>)
 8004752:	4313      	orrs	r3, r2
 8004754:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004756:	4b05      	ldr	r3, [pc, #20]	@ (800476c <HAL_RCC_OscConfig+0x7ac>)
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	4a04      	ldr	r2, [pc, #16]	@ (800476c <HAL_RCC_OscConfig+0x7ac>)
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3730      	adds	r7, #48	@ 0x30
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	58024400 	.word	0x58024400
 8004770:	ffff0007 	.word	0xffff0007

08004774 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e19c      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	4b8a      	ldr	r3, [pc, #552]	@ (80049b4 <HAL_RCC_ClockConfig+0x240>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d910      	bls.n	80047b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b87      	ldr	r3, [pc, #540]	@ (80049b4 <HAL_RCC_ClockConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 020f 	bic.w	r2, r3, #15
 800479e:	4985      	ldr	r1, [pc, #532]	@ (80049b4 <HAL_RCC_ClockConfig+0x240>)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b83      	ldr	r3, [pc, #524]	@ (80049b4 <HAL_RCC_ClockConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e184      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d010      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	4b7b      	ldr	r3, [pc, #492]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d908      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047d4:	4b78      	ldr	r3, [pc, #480]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	4975      	ldr	r1, [pc, #468]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d010      	beq.n	8004814 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	4b70      	ldr	r3, [pc, #448]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047fe:	429a      	cmp	r2, r3
 8004800:	d908      	bls.n	8004814 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004802:	4b6d      	ldr	r3, [pc, #436]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	496a      	ldr	r1, [pc, #424]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004810:	4313      	orrs	r3, r2
 8004812:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d010      	beq.n	8004842 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	4b64      	ldr	r3, [pc, #400]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800482c:	429a      	cmp	r2, r3
 800482e:	d908      	bls.n	8004842 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004830:	4b61      	ldr	r3, [pc, #388]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	495e      	ldr	r1, [pc, #376]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 800483e:	4313      	orrs	r3, r2
 8004840:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d010      	beq.n	8004870 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	4b59      	ldr	r3, [pc, #356]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800485a:	429a      	cmp	r2, r3
 800485c:	d908      	bls.n	8004870 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800485e:	4b56      	ldr	r3, [pc, #344]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	4953      	ldr	r1, [pc, #332]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 800486c:	4313      	orrs	r3, r2
 800486e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	4b4d      	ldr	r3, [pc, #308]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	429a      	cmp	r2, r3
 800488a:	d908      	bls.n	800489e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b4a      	ldr	r3, [pc, #296]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f023 020f 	bic.w	r2, r3, #15
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4947      	ldr	r1, [pc, #284]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 800489a:	4313      	orrs	r3, r2
 800489c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d055      	beq.n	8004956 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80048aa:	4b43      	ldr	r3, [pc, #268]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	4940      	ldr	r1, [pc, #256]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048c4:	4b3c      	ldr	r3, [pc, #240]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d121      	bne.n	8004914 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0f6      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d107      	bne.n	80048ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048dc:	4b36      	ldr	r3, [pc, #216]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d115      	bne.n	8004914 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0ea      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d107      	bne.n	8004904 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048f4:	4b30      	ldr	r3, [pc, #192]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e0de      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004904:	4b2c      	ldr	r3, [pc, #176]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0d6      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004914:	4b28      	ldr	r3, [pc, #160]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f023 0207 	bic.w	r2, r3, #7
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4925      	ldr	r1, [pc, #148]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004922:	4313      	orrs	r3, r2
 8004924:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004926:	f7fe f8e7 	bl	8002af8 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492c:	e00a      	b.n	8004944 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492e:	f7fe f8e3 	bl	8002af8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493c:	4293      	cmp	r3, r2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e0be      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004944:	4b1c      	ldr	r3, [pc, #112]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	429a      	cmp	r2, r3
 8004954:	d1eb      	bne.n	800492e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d010      	beq.n	8004984 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	429a      	cmp	r2, r3
 8004970:	d208      	bcs.n	8004984 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004972:	4b11      	ldr	r3, [pc, #68]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f023 020f 	bic.w	r2, r3, #15
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	490e      	ldr	r1, [pc, #56]	@ (80049b8 <HAL_RCC_ClockConfig+0x244>)
 8004980:	4313      	orrs	r3, r2
 8004982:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004984:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <HAL_RCC_ClockConfig+0x240>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d214      	bcs.n	80049bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b08      	ldr	r3, [pc, #32]	@ (80049b4 <HAL_RCC_ClockConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 020f 	bic.w	r2, r3, #15
 800499a:	4906      	ldr	r1, [pc, #24]	@ (80049b4 <HAL_RCC_ClockConfig+0x240>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b04      	ldr	r3, [pc, #16]	@ (80049b4 <HAL_RCC_ClockConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e086      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x34e>
 80049b4:	52002000 	.word	0x52002000
 80049b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d010      	beq.n	80049ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	4b3f      	ldr	r3, [pc, #252]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d208      	bcs.n	80049ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049d8:	4b3c      	ldr	r3, [pc, #240]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	4939      	ldr	r1, [pc, #228]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d010      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	4b34      	ldr	r3, [pc, #208]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d208      	bcs.n	8004a18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a06:	4b31      	ldr	r3, [pc, #196]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	492e      	ldr	r1, [pc, #184]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d010      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699a      	ldr	r2, [r3, #24]
 8004a28:	4b28      	ldr	r3, [pc, #160]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d208      	bcs.n	8004a46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a34:	4b25      	ldr	r3, [pc, #148]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	4922      	ldr	r1, [pc, #136]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d010      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	4b1d      	ldr	r3, [pc, #116]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d208      	bcs.n	8004a74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a62:	4b1a      	ldr	r3, [pc, #104]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	4917      	ldr	r1, [pc, #92]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a74:	f000 f834 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4b14      	ldr	r3, [pc, #80]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	0a1b      	lsrs	r3, r3, #8
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	4912      	ldr	r1, [pc, #72]	@ (8004ad0 <HAL_RCC_ClockConfig+0x35c>)
 8004a86:	5ccb      	ldrb	r3, [r1, r3]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a92:	4b0e      	ldr	r3, [pc, #56]	@ (8004acc <HAL_RCC_ClockConfig+0x358>)
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad0 <HAL_RCC_ClockConfig+0x35c>)
 8004a9c:	5cd3      	ldrb	r3, [r2, r3]
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad4 <HAL_RCC_ClockConfig+0x360>)
 8004aaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004aac:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad8 <HAL_RCC_ClockConfig+0x364>)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <HAL_RCC_ClockConfig+0x368>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fd ffd4 	bl	8002a64 <HAL_InitTick>
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	080123a8 	.word	0x080123a8
 8004ad4:	24000004 	.word	0x24000004
 8004ad8:	24000000 	.word	0x24000000
 8004adc:	24000010 	.word	0x24000010

08004ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b089      	sub	sp, #36	@ 0x24
 8004ae4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae6:	4bb3      	ldr	r3, [pc, #716]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aee:	2b18      	cmp	r3, #24
 8004af0:	f200 8155 	bhi.w	8004d9e <HAL_RCC_GetSysClockFreq+0x2be>
 8004af4:	a201      	add	r2, pc, #4	@ (adr r2, 8004afc <HAL_RCC_GetSysClockFreq+0x1c>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b61 	.word	0x08004b61
 8004b00:	08004d9f 	.word	0x08004d9f
 8004b04:	08004d9f 	.word	0x08004d9f
 8004b08:	08004d9f 	.word	0x08004d9f
 8004b0c:	08004d9f 	.word	0x08004d9f
 8004b10:	08004d9f 	.word	0x08004d9f
 8004b14:	08004d9f 	.word	0x08004d9f
 8004b18:	08004d9f 	.word	0x08004d9f
 8004b1c:	08004b87 	.word	0x08004b87
 8004b20:	08004d9f 	.word	0x08004d9f
 8004b24:	08004d9f 	.word	0x08004d9f
 8004b28:	08004d9f 	.word	0x08004d9f
 8004b2c:	08004d9f 	.word	0x08004d9f
 8004b30:	08004d9f 	.word	0x08004d9f
 8004b34:	08004d9f 	.word	0x08004d9f
 8004b38:	08004d9f 	.word	0x08004d9f
 8004b3c:	08004b8d 	.word	0x08004b8d
 8004b40:	08004d9f 	.word	0x08004d9f
 8004b44:	08004d9f 	.word	0x08004d9f
 8004b48:	08004d9f 	.word	0x08004d9f
 8004b4c:	08004d9f 	.word	0x08004d9f
 8004b50:	08004d9f 	.word	0x08004d9f
 8004b54:	08004d9f 	.word	0x08004d9f
 8004b58:	08004d9f 	.word	0x08004d9f
 8004b5c:	08004b93 	.word	0x08004b93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b60:	4b94      	ldr	r3, [pc, #592]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b6c:	4b91      	ldr	r3, [pc, #580]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	08db      	lsrs	r3, r3, #3
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	4a90      	ldr	r2, [pc, #576]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b7e:	e111      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b80:	4b8d      	ldr	r3, [pc, #564]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b82:	61bb      	str	r3, [r7, #24]
      break;
 8004b84:	e10e      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b86:	4b8d      	ldr	r3, [pc, #564]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b88:	61bb      	str	r3, [r7, #24]
      break;
 8004b8a:	e10b      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b8c:	4b8c      	ldr	r3, [pc, #560]	@ (8004dc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b8e:	61bb      	str	r3, [r7, #24]
      break;
 8004b90:	e108      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b92:	4b88      	ldr	r3, [pc, #544]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b9c:	4b85      	ldr	r3, [pc, #532]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ba6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ba8:	4b82      	ldr	r3, [pc, #520]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004bb2:	4b80      	ldr	r3, [pc, #512]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb6:	08db      	lsrs	r3, r3, #3
 8004bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80e1 	beq.w	8004d98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	f000 8083 	beq.w	8004ce4 <HAL_RCC_GetSysClockFreq+0x204>
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	f200 80a1 	bhi.w	8004d28 <HAL_RCC_GetSysClockFreq+0x248>
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x114>
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d056      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bf2:	e099      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d02d      	beq.n	8004c5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c00:	4b6c      	ldr	r3, [pc, #432]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	4a6b      	ldr	r2, [pc, #428]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	ee07 3a90 	vmov	s15, r3
 8004c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2a:	4b62      	ldr	r3, [pc, #392]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c3e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c5a:	e087      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004dc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6e:	4b51      	ldr	r3, [pc, #324]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c82:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c9e:	e065      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004dcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb2:	4b40      	ldr	r3, [pc, #256]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cc6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ce2:	e043      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004dd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d0a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d26:	e021      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004dcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d4e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d70:	0a5b      	lsrs	r3, r3, #9
 8004d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d76:	3301      	adds	r3, #1
 8004d78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d90:	ee17 3a90 	vmov	r3, s15
 8004d94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d96:	e005      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
      break;
 8004d9c:	e002      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d9e:	4b07      	ldr	r3, [pc, #28]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004da0:	61bb      	str	r3, [r7, #24]
      break;
 8004da2:	bf00      	nop
  }

  return sysclockfreq;
 8004da4:	69bb      	ldr	r3, [r7, #24]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3724      	adds	r7, #36	@ 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	58024400 	.word	0x58024400
 8004db8:	03d09000 	.word	0x03d09000
 8004dbc:	003d0900 	.word	0x003d0900
 8004dc0:	02dc6c00 	.word	0x02dc6c00
 8004dc4:	46000000 	.word	0x46000000
 8004dc8:	4c742400 	.word	0x4c742400
 8004dcc:	4a742400 	.word	0x4a742400
 8004dd0:	4c371b00 	.word	0x4c371b00

08004dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004dda:	f7ff fe81 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8004dde:	4602      	mov	r2, r0
 8004de0:	4b10      	ldr	r3, [pc, #64]	@ (8004e24 <HAL_RCC_GetHCLKFreq+0x50>)
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	490f      	ldr	r1, [pc, #60]	@ (8004e28 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dec:	5ccb      	ldrb	r3, [r1, r3]
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004df8:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	4a09      	ldr	r2, [pc, #36]	@ (8004e28 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e02:	5cd3      	ldrb	r3, [r2, r3]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0e:	4a07      	ldr	r2, [pc, #28]	@ (8004e2c <HAL_RCC_GetHCLKFreq+0x58>)
 8004e10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e12:	4a07      	ldr	r2, [pc, #28]	@ (8004e30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e18:	4b04      	ldr	r3, [pc, #16]	@ (8004e2c <HAL_RCC_GetHCLKFreq+0x58>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	58024400 	.word	0x58024400
 8004e28:	080123a8 	.word	0x080123a8
 8004e2c:	24000004 	.word	0x24000004
 8004e30:	24000000 	.word	0x24000000

08004e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e38:	f7ff ffcc 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4904      	ldr	r1, [pc, #16]	@ (8004e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	080123a8 	.word	0x080123a8

08004e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e64:	f7ff ffb6 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	0a1b      	lsrs	r3, r3, #8
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4904      	ldr	r1, [pc, #16]	@ (8004e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	58024400 	.word	0x58024400
 8004e88:	080123a8 	.word	0x080123a8

08004e8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b0c6      	sub	sp, #280	@ 0x118
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004eb0:	2500      	movs	r5, #0
 8004eb2:	ea54 0305 	orrs.w	r3, r4, r5
 8004eb6:	d049      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ebe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ec2:	d02f      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ec4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ec8:	d828      	bhi.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004eca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ece:	d01a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ed0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ed4:	d822      	bhi.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ede:	d007      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ee0:	e01c      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee2:	4bab      	ldr	r3, [pc, #684]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	4aaa      	ldr	r2, [pc, #680]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004eee:	e01a      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f002 fa49 	bl	8007390 <RCCEx_PLL2_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f04:	e00f      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0a:	3328      	adds	r3, #40	@ 0x28
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f002 faf0 	bl	80074f4 <RCCEx_PLL3_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f1a:	e004      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f22:	e000      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f2e:	4b98      	ldr	r3, [pc, #608]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f3c:	4a94      	ldr	r2, [pc, #592]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f42:	e003      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004f58:	f04f 0900 	mov.w	r9, #0
 8004f5c:	ea58 0309 	orrs.w	r3, r8, r9
 8004f60:	d047      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d82a      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f72:	bf00      	nop
 8004f74:	08004f89 	.word	0x08004f89
 8004f78:	08004f97 	.word	0x08004f97
 8004f7c:	08004fad 	.word	0x08004fad
 8004f80:	08004fcb 	.word	0x08004fcb
 8004f84:	08004fcb 	.word	0x08004fcb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f88:	4b81      	ldr	r3, [pc, #516]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	4a80      	ldr	r2, [pc, #512]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f94:	e01a      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f002 f9f6 	bl	8007390 <RCCEx_PLL2_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004faa:	e00f      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb0:	3328      	adds	r3, #40	@ 0x28
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f002 fa9d 	bl	80074f4 <RCCEx_PLL3_Config>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fc0:	e004      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fc8:	e000      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd4:	4b6e      	ldr	r3, [pc, #440]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd8:	f023 0107 	bic.w	r1, r3, #7
 8004fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe2:	4a6b      	ldr	r2, [pc, #428]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fe8:	e003      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004ffe:	f04f 0b00 	mov.w	fp, #0
 8005002:	ea5a 030b 	orrs.w	r3, sl, fp
 8005006:	d05b      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005010:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005014:	d03b      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005016:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800501a:	d834      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800501c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005020:	d037      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005022:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005026:	d82e      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005028:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800502c:	d033      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800502e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005032:	d828      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005038:	d01a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800503a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800503e:	d822      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005044:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005048:	d007      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800504a:	e01c      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800504c:	4b50      	ldr	r3, [pc, #320]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	4a4f      	ldr	r2, [pc, #316]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005056:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005058:	e01e      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800505a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505e:	3308      	adds	r3, #8
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f002 f994 	bl	8007390 <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800506e:	e013      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005074:	3328      	adds	r3, #40	@ 0x28
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f002 fa3b 	bl	80074f4 <RCCEx_PLL3_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005084:	e008      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800508c:	e004      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800508e:	bf00      	nop
 8005090:	e002      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005092:	bf00      	nop
 8005094:	e000      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80050a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050b0:	4a37      	ldr	r2, [pc, #220]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050b2:	430b      	orrs	r3, r1
 80050b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80050b6:	e003      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80050c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80050d0:	2300      	movs	r3, #0
 80050d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80050da:	460b      	mov	r3, r1
 80050dc:	4313      	orrs	r3, r2
 80050de:	d05d      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80050e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050e8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050ec:	d03b      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80050ee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050f2:	d834      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050f8:	d037      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80050fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050fe:	d82e      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005100:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005104:	d033      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005106:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800510a:	d828      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800510c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005110:	d01a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005116:	d822      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800511c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005120:	d007      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005122:	e01c      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005124:	4b1a      	ldr	r3, [pc, #104]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	4a19      	ldr	r2, [pc, #100]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800512a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800512e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005130:	e01e      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005136:	3308      	adds	r3, #8
 8005138:	2100      	movs	r1, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f002 f928 	bl	8007390 <RCCEx_PLL2_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005146:	e013      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800514c:	3328      	adds	r3, #40	@ 0x28
 800514e:	2100      	movs	r1, #0
 8005150:	4618      	mov	r0, r3
 8005152:	f002 f9cf 	bl	80074f4 <RCCEx_PLL3_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800515c:	e008      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005164:	e004      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005166:	bf00      	nop
 8005168:	e002      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800516a:	bf00      	nop
 800516c:	e000      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800516e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10d      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005178:	4b05      	ldr	r3, [pc, #20]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800517a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005184:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005188:	4a01      	ldr	r2, [pc, #4]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800518a:	430b      	orrs	r3, r1
 800518c:	6593      	str	r3, [r2, #88]	@ 0x58
 800518e:	e005      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800519c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80051a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051ac:	2300      	movs	r3, #0
 80051ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051b2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	d03a      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c2:	2b30      	cmp	r3, #48	@ 0x30
 80051c4:	d01f      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80051c6:	2b30      	cmp	r3, #48	@ 0x30
 80051c8:	d819      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x372>
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d00c      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d815      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x372>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d019      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d111      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051da:	4baa      	ldr	r3, [pc, #680]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051de:	4aa9      	ldr	r2, [pc, #676]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80051e6:	e011      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ec:	3308      	adds	r3, #8
 80051ee:	2102      	movs	r1, #2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f002 f8cd 	bl	8007390 <RCCEx_PLL2_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80051fc:	e006      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005204:	e002      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800520a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005214:	4b9b      	ldr	r3, [pc, #620]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005218:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800521c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005222:	4a98      	ldr	r2, [pc, #608]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005224:	430b      	orrs	r3, r1
 8005226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005228:	e003      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800522e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800523e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005242:	2300      	movs	r3, #0
 8005244:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005248:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800524c:	460b      	mov	r3, r1
 800524e:	4313      	orrs	r3, r2
 8005250:	d051      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800525c:	d035      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800525e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005262:	d82e      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005264:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005268:	d031      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x442>
 800526a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800526e:	d828      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005274:	d01a      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800527a:	d822      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005284:	d007      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005286:	e01c      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005288:	4b7e      	ldr	r3, [pc, #504]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	4a7d      	ldr	r2, [pc, #500]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800528e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005294:	e01c      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529a:	3308      	adds	r3, #8
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f002 f876 	bl	8007390 <RCCEx_PLL2_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052aa:	e011      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b0:	3328      	adds	r3, #40	@ 0x28
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f002 f91d 	bl	80074f4 <RCCEx_PLL3_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052c0:	e006      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052c8:	e002      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80052ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e6:	4a67      	ldr	r2, [pc, #412]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80052ec:	e003      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005302:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005306:	2300      	movs	r3, #0
 8005308:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800530c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005310:	460b      	mov	r3, r1
 8005312:	4313      	orrs	r3, r2
 8005314:	d053      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005320:	d033      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005322:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005326:	d82c      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005328:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800532c:	d02f      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800532e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005332:	d826      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005334:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005338:	d02b      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800533a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800533e:	d820      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005344:	d012      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800534a:	d81a      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d022      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005354:	d115      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535a:	3308      	adds	r3, #8
 800535c:	2101      	movs	r1, #1
 800535e:	4618      	mov	r0, r3
 8005360:	f002 f816 	bl	8007390 <RCCEx_PLL2_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800536a:	e015      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800536c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005370:	3328      	adds	r3, #40	@ 0x28
 8005372:	2101      	movs	r1, #1
 8005374:	4618      	mov	r0, r3
 8005376:	f002 f8bd 	bl	80074f4 <RCCEx_PLL3_Config>
 800537a:	4603      	mov	r3, r0
 800537c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005380:	e00a      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005388:	e006      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800538a:	bf00      	nop
 800538c:	e004      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800538e:	bf00      	nop
 8005390:	e002      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005392:	bf00      	nop
 8005394:	e000      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053a0:	4b38      	ldr	r3, [pc, #224]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80053a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ae:	4a35      	ldr	r2, [pc, #212]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80053b4:	e003      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80053ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053ce:	2300      	movs	r3, #0
 80053d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053d4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053d8:	460b      	mov	r3, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	d058      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80053de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80053e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053ea:	d033      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80053ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053f0:	d82c      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f6:	d02f      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fc:	d826      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005402:	d02b      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005404:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005408:	d820      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800540a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800540e:	d012      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005414:	d81a      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d022      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800541a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800541e:	d115      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005424:	3308      	adds	r3, #8
 8005426:	2101      	movs	r1, #1
 8005428:	4618      	mov	r0, r3
 800542a:	f001 ffb1 	bl	8007390 <RCCEx_PLL2_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005434:	e015      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543a:	3328      	adds	r3, #40	@ 0x28
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f002 f858 	bl	80074f4 <RCCEx_PLL3_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800544a:	e00a      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005452:	e006      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005454:	bf00      	nop
 8005456:	e004      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005458:	bf00      	nop
 800545a:	e002      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005462:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10e      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800546c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800547a:	4a02      	ldr	r2, [pc, #8]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800547c:	430b      	orrs	r3, r1
 800547e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005482:	bf00      	nop
 8005484:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800548c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800549c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054a0:	2300      	movs	r3, #0
 80054a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80054a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4313      	orrs	r3, r2
 80054ae:	d037      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80054b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054ba:	d00e      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80054bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054c0:	d816      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d018      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80054c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ca:	d111      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054cc:	4bc4      	ldr	r3, [pc, #784]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	4ac3      	ldr	r2, [pc, #780]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054d8:	e00f      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054de:	3308      	adds	r3, #8
 80054e0:	2101      	movs	r1, #1
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 ff54 	bl	8007390 <RCCEx_PLL2_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054ee:	e004      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80054f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005502:	4bb7      	ldr	r3, [pc, #732]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005506:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005510:	4ab3      	ldr	r2, [pc, #716]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005512:	430b      	orrs	r3, r1
 8005514:	6513      	str	r3, [r2, #80]	@ 0x50
 8005516:	e003      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800551c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800552c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005530:	2300      	movs	r3, #0
 8005532:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005536:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800553a:	460b      	mov	r3, r1
 800553c:	4313      	orrs	r3, r2
 800553e:	d039      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005546:	2b03      	cmp	r3, #3
 8005548:	d81c      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800554a:	a201      	add	r2, pc, #4	@ (adr r2, 8005550 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	0800558d 	.word	0x0800558d
 8005554:	08005561 	.word	0x08005561
 8005558:	0800556f 	.word	0x0800556f
 800555c:	0800558d 	.word	0x0800558d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4b9f      	ldr	r3, [pc, #636]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	4a9e      	ldr	r2, [pc, #632]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800556c:	e00f      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800556e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005572:	3308      	adds	r3, #8
 8005574:	2102      	movs	r1, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f001 ff0a 	bl	8007390 <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005582:	e004      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800558a:	e000      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800558c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005596:	4b92      	ldr	r3, [pc, #584]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800559a:	f023 0103 	bic.w	r1, r3, #3
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a4:	4a8e      	ldr	r2, [pc, #568]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055a6:	430b      	orrs	r3, r1
 80055a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055aa:	e003      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055c4:	2300      	movs	r3, #0
 80055c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f000 8099 	beq.w	8005708 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d6:	4b83      	ldr	r3, [pc, #524]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a82      	ldr	r2, [pc, #520]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055e2:	f7fd fa89 	bl	8002af8 <HAL_GetTick>
 80055e6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ea:	e00b      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ec:	f7fd fa84 	bl	8002af8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b64      	cmp	r3, #100	@ 0x64
 80055fa:	d903      	bls.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005602:	e005      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005604:	4b77      	ldr	r3, [pc, #476]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0ed      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005614:	2b00      	cmp	r3, #0
 8005616:	d173      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005618:	4b71      	ldr	r3, [pc, #452]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800561a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005624:	4053      	eors	r3, r2
 8005626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800562a:	2b00      	cmp	r3, #0
 800562c:	d015      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800562e:	4b6c      	ldr	r3, [pc, #432]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005636:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800563a:	4b69      	ldr	r3, [pc, #420]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	4a68      	ldr	r2, [pc, #416]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005644:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005646:	4b66      	ldr	r3, [pc, #408]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564a:	4a65      	ldr	r2, [pc, #404]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800564c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005650:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005652:	4a63      	ldr	r2, [pc, #396]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005658:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800565a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005666:	d118      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fd fa46 	bl	8002af8 <HAL_GetTick>
 800566c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005670:	e00d      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005672:	f7fd fa41 	bl	8002af8 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800567c:	1ad2      	subs	r2, r2, r3
 800567e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005682:	429a      	cmp	r2, r3
 8005684:	d903      	bls.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800568c:	e005      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800568e:	4b54      	ldr	r3, [pc, #336]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0eb      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800569a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d129      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056b2:	d10e      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80056b4:	4b4a      	ldr	r3, [pc, #296]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056c4:	091a      	lsrs	r2, r3, #4
 80056c6:	4b48      	ldr	r3, [pc, #288]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	4a45      	ldr	r2, [pc, #276]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056cc:	430b      	orrs	r3, r1
 80056ce:	6113      	str	r3, [r2, #16]
 80056d0:	e005      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x852>
 80056d2:	4b43      	ldr	r3, [pc, #268]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	4a42      	ldr	r2, [pc, #264]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056dc:	6113      	str	r3, [r2, #16]
 80056de:	4b40      	ldr	r3, [pc, #256]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80056e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ee:	4a3c      	ldr	r2, [pc, #240]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80056f4:	e008      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80056fe:	e003      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005704:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f002 0301 	and.w	r3, r2, #1
 8005714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005718:	2300      	movs	r3, #0
 800571a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800571e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005722:	460b      	mov	r3, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	f000 808f 	beq.w	8005848 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005730:	2b28      	cmp	r3, #40	@ 0x28
 8005732:	d871      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005734:	a201      	add	r2, pc, #4	@ (adr r2, 800573c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	08005821 	.word	0x08005821
 8005740:	08005819 	.word	0x08005819
 8005744:	08005819 	.word	0x08005819
 8005748:	08005819 	.word	0x08005819
 800574c:	08005819 	.word	0x08005819
 8005750:	08005819 	.word	0x08005819
 8005754:	08005819 	.word	0x08005819
 8005758:	08005819 	.word	0x08005819
 800575c:	080057ed 	.word	0x080057ed
 8005760:	08005819 	.word	0x08005819
 8005764:	08005819 	.word	0x08005819
 8005768:	08005819 	.word	0x08005819
 800576c:	08005819 	.word	0x08005819
 8005770:	08005819 	.word	0x08005819
 8005774:	08005819 	.word	0x08005819
 8005778:	08005819 	.word	0x08005819
 800577c:	08005803 	.word	0x08005803
 8005780:	08005819 	.word	0x08005819
 8005784:	08005819 	.word	0x08005819
 8005788:	08005819 	.word	0x08005819
 800578c:	08005819 	.word	0x08005819
 8005790:	08005819 	.word	0x08005819
 8005794:	08005819 	.word	0x08005819
 8005798:	08005819 	.word	0x08005819
 800579c:	08005821 	.word	0x08005821
 80057a0:	08005819 	.word	0x08005819
 80057a4:	08005819 	.word	0x08005819
 80057a8:	08005819 	.word	0x08005819
 80057ac:	08005819 	.word	0x08005819
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005819 	.word	0x08005819
 80057b8:	08005819 	.word	0x08005819
 80057bc:	08005821 	.word	0x08005821
 80057c0:	08005819 	.word	0x08005819
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005819 	.word	0x08005819
 80057cc:	08005819 	.word	0x08005819
 80057d0:	08005819 	.word	0x08005819
 80057d4:	08005819 	.word	0x08005819
 80057d8:	08005819 	.word	0x08005819
 80057dc:	08005821 	.word	0x08005821
 80057e0:	58024400 	.word	0x58024400
 80057e4:	58024800 	.word	0x58024800
 80057e8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	3308      	adds	r3, #8
 80057f2:	2101      	movs	r1, #1
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 fdcb 	bl	8007390 <RCCEx_PLL2_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005800:	e00f      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005806:	3328      	adds	r3, #40	@ 0x28
 8005808:	2101      	movs	r1, #1
 800580a:	4618      	mov	r0, r3
 800580c:	f001 fe72 	bl	80074f4 <RCCEx_PLL3_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005816:	e004      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800581e:	e000      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005822:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800582a:	4bbf      	ldr	r3, [pc, #764]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800582c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005838:	4abb      	ldr	r2, [pc, #748]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800583a:	430b      	orrs	r3, r1
 800583c:	6553      	str	r3, [r2, #84]	@ 0x54
 800583e:	e003      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005844:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f002 0302 	and.w	r3, r2, #2
 8005854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005858:	2300      	movs	r3, #0
 800585a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800585e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d041      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800586e:	2b05      	cmp	r3, #5
 8005870:	d824      	bhi.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005872:	a201      	add	r2, pc, #4	@ (adr r2, 8005878 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	080058c5 	.word	0x080058c5
 800587c:	08005891 	.word	0x08005891
 8005880:	080058a7 	.word	0x080058a7
 8005884:	080058c5 	.word	0x080058c5
 8005888:	080058c5 	.word	0x080058c5
 800588c:	080058c5 	.word	0x080058c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005894:	3308      	adds	r3, #8
 8005896:	2101      	movs	r1, #1
 8005898:	4618      	mov	r0, r3
 800589a:	f001 fd79 	bl	8007390 <RCCEx_PLL2_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058a4:	e00f      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058aa:	3328      	adds	r3, #40	@ 0x28
 80058ac:	2101      	movs	r1, #1
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 fe20 	bl	80074f4 <RCCEx_PLL3_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058ba:	e004      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80058c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058ce:	4b96      	ldr	r3, [pc, #600]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80058d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d2:	f023 0107 	bic.w	r1, r3, #7
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058dc:	4a92      	ldr	r2, [pc, #584]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80058de:	430b      	orrs	r3, r1
 80058e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80058e2:	e003      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f002 0304 	and.w	r3, r2, #4
 80058f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058fc:	2300      	movs	r3, #0
 80058fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005902:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005906:	460b      	mov	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	d044      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800590c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005914:	2b05      	cmp	r3, #5
 8005916:	d825      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005918:	a201      	add	r2, pc, #4	@ (adr r2, 8005920 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	0800596d 	.word	0x0800596d
 8005924:	08005939 	.word	0x08005939
 8005928:	0800594f 	.word	0x0800594f
 800592c:	0800596d 	.word	0x0800596d
 8005930:	0800596d 	.word	0x0800596d
 8005934:	0800596d 	.word	0x0800596d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593c:	3308      	adds	r3, #8
 800593e:	2101      	movs	r1, #1
 8005940:	4618      	mov	r0, r3
 8005942:	f001 fd25 	bl	8007390 <RCCEx_PLL2_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800594c:	e00f      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800594e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005952:	3328      	adds	r3, #40	@ 0x28
 8005954:	2101      	movs	r1, #1
 8005956:	4618      	mov	r0, r3
 8005958:	f001 fdcc 	bl	80074f4 <RCCEx_PLL3_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005962:	e004      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800596a:	e000      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800596c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10b      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005976:	4b6c      	ldr	r3, [pc, #432]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597a:	f023 0107 	bic.w	r1, r3, #7
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005986:	4a68      	ldr	r2, [pc, #416]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005988:	430b      	orrs	r3, r1
 800598a:	6593      	str	r3, [r2, #88]	@ 0x58
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005992:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f002 0320 	and.w	r3, r2, #32
 80059a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059a6:	2300      	movs	r3, #0
 80059a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4313      	orrs	r3, r2
 80059b4:	d055      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80059b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059c2:	d033      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80059c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059c8:	d82c      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ce:	d02f      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80059d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d4:	d826      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059da:	d02b      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80059dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059e0:	d820      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059e6:	d012      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80059e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ec:	d81a      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d022      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80059f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059f6:	d115      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059fc:	3308      	adds	r3, #8
 80059fe:	2100      	movs	r1, #0
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 fcc5 	bl	8007390 <RCCEx_PLL2_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a0c:	e015      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a12:	3328      	adds	r3, #40	@ 0x28
 8005a14:	2102      	movs	r1, #2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 fd6c 	bl	80074f4 <RCCEx_PLL3_Config>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a22:	e00a      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a2a:	e006      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a2c:	bf00      	nop
 8005a2e:	e004      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a30:	bf00      	nop
 8005a32:	e002      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a34:	bf00      	nop
 8005a36:	e000      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a42:	4b39      	ldr	r3, [pc, #228]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a52:	4a35      	ldr	r2, [pc, #212]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a54:	430b      	orrs	r3, r1
 8005a56:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a58:	e003      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a72:	2300      	movs	r3, #0
 8005a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a78:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	d058      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a8a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a8e:	d033      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005a90:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a94:	d82c      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a9a:	d02f      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa0:	d826      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005aa2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005aa6:	d02b      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005aa8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005aac:	d820      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab2:	d012      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab8:	d81a      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d022      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ac2:	d115      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac8:	3308      	adds	r3, #8
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fc5f 	bl	8007390 <RCCEx_PLL2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ad8:	e015      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ade:	3328      	adds	r3, #40	@ 0x28
 8005ae0:	2102      	movs	r1, #2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 fd06 	bl	80074f4 <RCCEx_PLL3_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005aee:	e00a      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005af6:	e006      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005af8:	bf00      	nop
 8005afa:	e004      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10e      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b0e:	4b06      	ldr	r3, [pc, #24]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b1e:	4a02      	ldr	r2, [pc, #8]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b24:	e006      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005b26:	bf00      	nop
 8005b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4313      	orrs	r3, r2
 8005b52:	d055      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b60:	d033      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005b62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b66:	d82c      	bhi.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b6c:	d02f      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b72:	d826      	bhi.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b78:	d02b      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005b7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b7e:	d820      	bhi.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b84:	d012      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005b86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b8a:	d81a      	bhi.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d022      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b94:	d115      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 fbf6 	bl	8007390 <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005baa:	e015      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb0:	3328      	adds	r3, #40	@ 0x28
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 fc9d 	bl	80074f4 <RCCEx_PLL3_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bc0:	e00a      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bc8:	e006      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005bca:	bf00      	nop
 8005bcc:	e004      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005bce:	bf00      	nop
 8005bd0:	e002      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005bd2:	bf00      	nop
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005be0:	4ba0      	ldr	r3, [pc, #640]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bf0:	4a9c      	ldr	r2, [pc, #624]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bf6:	e003      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f002 0308 	and.w	r3, r2, #8
 8005c0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	d01e      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c2c:	d10c      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c32:	3328      	adds	r3, #40	@ 0x28
 8005c34:	2102      	movs	r1, #2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 fc5c 	bl	80074f4 <RCCEx_PLL3_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005c48:	4b86      	ldr	r3, [pc, #536]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c58:	4a82      	ldr	r2, [pc, #520]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f002 0310 	and.w	r3, r2, #16
 8005c6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c74:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	d01e      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c8a:	d10c      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c90:	3328      	adds	r3, #40	@ 0x28
 8005c92:	2102      	movs	r1, #2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 fc2d 	bl	80074f4 <RCCEx_PLL3_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ca6:	4b6f      	ldr	r3, [pc, #444]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005caa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cb6:	4a6b      	ldr	r2, [pc, #428]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005cc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cca:	2300      	movs	r3, #0
 8005ccc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cce:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	d03e      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ce4:	d022      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005ce6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cea:	d81b      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf4:	d00b      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005cf6:	e015      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 fb45 	bl	8007390 <RCCEx_PLL2_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d0c:	e00f      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d12:	3328      	adds	r3, #40	@ 0x28
 8005d14:	2102      	movs	r1, #2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 fbec 	bl	80074f4 <RCCEx_PLL3_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d22:	e004      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d2a:	e000      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d36:	4b4b      	ldr	r3, [pc, #300]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d46:	4a47      	ldr	r2, [pc, #284]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d4c:	e003      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d62:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d64:	2300      	movs	r3, #0
 8005d66:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	d03b      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d7e:	d01f      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005d80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d84:	d818      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d8a:	d003      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005d8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d90:	d007      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005d92:	e011      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d94:	4b33      	ldr	r3, [pc, #204]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	4a32      	ldr	r2, [pc, #200]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005da0:	e00f      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da6:	3328      	adds	r3, #40	@ 0x28
 8005da8:	2101      	movs	r1, #1
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fba2 	bl	80074f4 <RCCEx_PLL3_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005db6:	e004      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dbe:	e000      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dca:	4b26      	ldr	r3, [pc, #152]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dda:	4a22      	ldr	r2, [pc, #136]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	6553      	str	r3, [r2, #84]	@ 0x54
 8005de0:	e003      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005de6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005df6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005df8:	2300      	movs	r3, #0
 8005dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dfc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e00:	460b      	mov	r3, r1
 8005e02:	4313      	orrs	r3, r2
 8005e04:	d034      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e14:	d007      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005e16:	e011      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e18:	4b12      	ldr	r3, [pc, #72]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	4a11      	ldr	r2, [pc, #68]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e24:	e00e      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	2102      	movs	r1, #2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 faae 	bl	8007390 <RCCEx_PLL2_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e3a:	e003      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10d      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e4c:	4b05      	ldr	r3, [pc, #20]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5a:	4a02      	ldr	r2, [pc, #8]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005e62:	bf00      	nop
 8005e64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e7e:	2300      	movs	r3, #0
 8005e80:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e82:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e86:	460b      	mov	r3, r1
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	d00c      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e90:	3328      	adds	r3, #40	@ 0x28
 8005e92:	2102      	movs	r1, #2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f001 fb2d 	bl	80074f4 <RCCEx_PLL3_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eb8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	d036      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ec8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ecc:	d018      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005ece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed2:	d811      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed8:	d014      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ede:	d80b      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d011      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ee8:	d106      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eea:	4bb7      	ldr	r3, [pc, #732]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eee:	4ab6      	ldr	r2, [pc, #728]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005ef6:	e008      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005efe:	e004      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005f00:	bf00      	nop
 8005f02:	e002      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005f04:	bf00      	nop
 8005f06:	e000      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f12:	4bad      	ldr	r3, [pc, #692]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f20:	4aa9      	ldr	r2, [pc, #676]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f22:	430b      	orrs	r3, r1
 8005f24:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f26:	e003      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f3e:	2300      	movs	r3, #0
 8005f40:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f46:	460b      	mov	r3, r1
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	d009      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f4c:	4b9e      	ldr	r3, [pc, #632]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5a:	4a9b      	ldr	r2, [pc, #620]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f6e:	2300      	movs	r3, #0
 8005f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f72:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d009      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f7c:	4b92      	ldr	r3, [pc, #584]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f80:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f8a:	4a8f      	ldr	r2, [pc, #572]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fa2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	d00e      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fac:	4b86      	ldr	r3, [pc, #536]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	4a85      	ldr	r2, [pc, #532]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fb6:	6113      	str	r3, [r2, #16]
 8005fb8:	4b83      	ldr	r3, [pc, #524]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fba:	6919      	ldr	r1, [r3, #16]
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fc4:	4a80      	ldr	r2, [pc, #512]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fd8:	2300      	movs	r3, #0
 8005fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fdc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fe6:	4b78      	ldr	r3, [pc, #480]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff4:	4a74      	ldr	r2, [pc, #464]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ff6:	430b      	orrs	r3, r1
 8005ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006006:	633b      	str	r3, [r7, #48]	@ 0x30
 8006008:	2300      	movs	r3, #0
 800600a:	637b      	str	r3, [r7, #52]	@ 0x34
 800600c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006010:	460b      	mov	r3, r1
 8006012:	4313      	orrs	r3, r2
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006016:	4b6c      	ldr	r3, [pc, #432]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006026:	4a68      	ldr	r2, [pc, #416]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006028:	430b      	orrs	r3, r1
 800602a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800602c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	2100      	movs	r1, #0
 8006036:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800603e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006042:	460b      	mov	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	d011      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604c:	3308      	adds	r3, #8
 800604e:	2100      	movs	r1, #0
 8006050:	4618      	mov	r0, r3
 8006052:	f001 f99d 	bl	8007390 <RCCEx_PLL2_Config>
 8006056:	4603      	mov	r3, r0
 8006058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800605c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006068:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	2100      	movs	r1, #0
 8006076:	6239      	str	r1, [r7, #32]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	627b      	str	r3, [r7, #36]	@ 0x24
 800607e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006082:	460b      	mov	r3, r1
 8006084:	4313      	orrs	r3, r2
 8006086:	d011      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608c:	3308      	adds	r3, #8
 800608e:	2101      	movs	r1, #1
 8006090:	4618      	mov	r0, r3
 8006092:	f001 f97d 	bl	8007390 <RCCEx_PLL2_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800609c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	2100      	movs	r1, #0
 80060b6:	61b9      	str	r1, [r7, #24]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	61fb      	str	r3, [r7, #28]
 80060be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060c2:	460b      	mov	r3, r1
 80060c4:	4313      	orrs	r3, r2
 80060c6:	d011      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060cc:	3308      	adds	r3, #8
 80060ce:	2102      	movs	r1, #2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f001 f95d 	bl	8007390 <RCCEx_PLL2_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80060dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	2100      	movs	r1, #0
 80060f6:	6139      	str	r1, [r7, #16]
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006102:	460b      	mov	r3, r1
 8006104:	4313      	orrs	r3, r2
 8006106:	d011      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610c:	3328      	adds	r3, #40	@ 0x28
 800610e:	2100      	movs	r1, #0
 8006110:	4618      	mov	r0, r3
 8006112:	f001 f9ef 	bl	80074f4 <RCCEx_PLL3_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800611c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006128:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800612c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	2100      	movs	r1, #0
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006142:	460b      	mov	r3, r1
 8006144:	4313      	orrs	r3, r2
 8006146:	d011      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614c:	3328      	adds	r3, #40	@ 0x28
 800614e:	2101      	movs	r1, #1
 8006150:	4618      	mov	r0, r3
 8006152:	f001 f9cf 	bl	80074f4 <RCCEx_PLL3_Config>
 8006156:	4603      	mov	r3, r0
 8006158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800615c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006168:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	2100      	movs	r1, #0
 8006176:	6039      	str	r1, [r7, #0]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d011      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	3328      	adds	r3, #40	@ 0x28
 800618e:	2102      	movs	r1, #2
 8006190:	4618      	mov	r0, r3
 8006192:	f001 f9af 	bl	80074f4 <RCCEx_PLL3_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800619c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80061ac:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e000      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80061c0:	46bd      	mov	sp, r7
 80061c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061c6:	bf00      	nop
 80061c8:	58024400 	.word	0x58024400

080061cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b090      	sub	sp, #64	@ 0x40
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80061d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061da:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80061de:	430b      	orrs	r3, r1
 80061e0:	f040 8094 	bne.w	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80061e4:	4b9b      	ldr	r3, [pc, #620]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	f200 8087 	bhi.w	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80061f6:	a201      	add	r2, pc, #4	@ (adr r2, 80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006211 	.word	0x08006211
 8006200:	08006239 	.word	0x08006239
 8006204:	08006261 	.word	0x08006261
 8006208:	080062fd 	.word	0x080062fd
 800620c:	08006289 	.word	0x08006289
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006210:	4b90      	ldr	r3, [pc, #576]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006218:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800621c:	d108      	bne.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800621e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006222:	4618      	mov	r0, r3
 8006224:	f000 ff62 	bl	80070ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800622c:	f000 bc93 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006234:	f000 bc8f 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006238:	4b86      	ldr	r3, [pc, #536]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006244:	d108      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006246:	f107 0318 	add.w	r3, r7, #24
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fca6 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006254:	f000 bc7f 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800625c:	f000 bc7b 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006260:	4b7c      	ldr	r3, [pc, #496]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800626c:	d108      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800626e:	f107 030c 	add.w	r3, r7, #12
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fde6 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800627c:	f000 bc6b 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006284:	f000 bc67 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006288:	4b72      	ldr	r3, [pc, #456]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800628a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800628c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006290:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006292:	4b70      	ldr	r3, [pc, #448]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b04      	cmp	r3, #4
 800629c:	d10c      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800629e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062a4:	4b6b      	ldr	r3, [pc, #428]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	08db      	lsrs	r3, r3, #3
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	4a6a      	ldr	r2, [pc, #424]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
 80062b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062b6:	e01f      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062b8:	4b66      	ldr	r3, [pc, #408]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c4:	d106      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80062c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062cc:	d102      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062ce:	4b63      	ldr	r3, [pc, #396]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80062d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d2:	e011      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062d4:	4b5f      	ldr	r3, [pc, #380]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062e0:	d106      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80062e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062e8:	d102      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ee:	e003      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062f4:	f000 bc2f 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80062f8:	f000 bc2d 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062fc:	4b59      	ldr	r3, [pc, #356]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80062fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006300:	f000 bc29 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006308:	f000 bc25 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800630c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006310:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006314:	430b      	orrs	r3, r1
 8006316:	f040 80a7 	bne.w	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800631a:	4b4e      	ldr	r3, [pc, #312]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800631c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006322:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800632a:	d054      	beq.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006332:	f200 808b 	bhi.w	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800633c:	f000 8083 	beq.w	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8006340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006342:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006346:	f200 8081 	bhi.w	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006350:	d02f      	beq.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006358:	d878      	bhi.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006366:	d012      	beq.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006368:	e070      	b.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800636a:	4b3a      	ldr	r3, [pc, #232]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006372:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006376:	d107      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800637c:	4618      	mov	r0, r3
 800637e:	f000 feb5 	bl	80070ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006386:	e3e6      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638c:	e3e3      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800638e:	4b31      	ldr	r3, [pc, #196]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006396:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800639a:	d107      	bne.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800639c:	f107 0318 	add.w	r3, r7, #24
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fbfb 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063aa:	e3d4      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063b0:	e3d1      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063b2:	4b28      	ldr	r3, [pc, #160]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063be:	d107      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063c0:	f107 030c 	add.w	r3, r7, #12
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 fd3d 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063ce:	e3c2      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d4:	e3bf      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d10c      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80063ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063f2:	4b18      	ldr	r3, [pc, #96]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	08db      	lsrs	r3, r3, #3
 80063f8:	f003 0303 	and.w	r3, r3, #3
 80063fc:	4a16      	ldr	r2, [pc, #88]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80063fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006404:	e01e      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006406:	4b13      	ldr	r3, [pc, #76]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006412:	d106      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800641a:	d102      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800641c:	4b0f      	ldr	r3, [pc, #60]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800641e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006420:	e010      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006422:	4b0c      	ldr	r3, [pc, #48]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800642e:	d106      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006436:	d102      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006438:	4b09      	ldr	r3, [pc, #36]	@ (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800643c:	e002      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006442:	e388      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006444:	e387      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006446:	4b07      	ldr	r3, [pc, #28]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800644a:	e384      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006450:	e381      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006452:	bf00      	nop
 8006454:	58024400 	.word	0x58024400
 8006458:	03d09000 	.word	0x03d09000
 800645c:	003d0900 	.word	0x003d0900
 8006460:	02dc6c00 	.word	0x02dc6c00
 8006464:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006470:	430b      	orrs	r3, r1
 8006472:	f040 809c 	bne.w	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006476:	4b9e      	ldr	r3, [pc, #632]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800647e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006482:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006486:	d054      	beq.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800648e:	f200 808b 	bhi.w	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006494:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006498:	f000 8083 	beq.w	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064a2:	f200 8081 	bhi.w	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064ac:	d02f      	beq.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064b4:	d878      	bhi.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80064b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064c2:	d012      	beq.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80064c4:	e070      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064c6:	4b8a      	ldr	r3, [pc, #552]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064d2:	d107      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fe07 	bl	80070ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064e2:	e338      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e8:	e335      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064ea:	4b81      	ldr	r3, [pc, #516]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f6:	d107      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064f8:	f107 0318 	add.w	r3, r7, #24
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fb4d 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006506:	e326      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800650c:	e323      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800650e:	4b78      	ldr	r3, [pc, #480]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800651a:	d107      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800651c:	f107 030c 	add.w	r3, r7, #12
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fc8f 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800652a:	e314      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006530:	e311      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006532:	4b6f      	ldr	r3, [pc, #444]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006536:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800653a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800653c:	4b6c      	ldr	r3, [pc, #432]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b04      	cmp	r3, #4
 8006546:	d10c      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800654e:	4b68      	ldr	r3, [pc, #416]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	08db      	lsrs	r3, r3, #3
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	4a66      	ldr	r2, [pc, #408]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800655a:	fa22 f303 	lsr.w	r3, r2, r3
 800655e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006560:	e01e      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006562:	4b63      	ldr	r3, [pc, #396]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800656e:	d106      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006576:	d102      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006578:	4b5f      	ldr	r3, [pc, #380]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800657a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800657c:	e010      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800657e:	4b5c      	ldr	r3, [pc, #368]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800658a:	d106      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800658c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006592:	d102      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006594:	4b59      	ldr	r3, [pc, #356]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006598:	e002      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800659e:	e2da      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80065a0:	e2d9      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065a2:	4b57      	ldr	r3, [pc, #348]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80065a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065a6:	e2d6      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ac:	e2d3      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80065ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80065b6:	430b      	orrs	r3, r1
 80065b8:	f040 80a7 	bne.w	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80065bc:	4b4c      	ldr	r3, [pc, #304]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80065c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065cc:	d055      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065d4:	f200 8096 	bhi.w	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065de:	f000 8084 	beq.w	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065e8:	f200 808c 	bhi.w	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80065ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f2:	d030      	beq.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80065f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065fa:	f200 8083 	bhi.w	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80065fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800660a:	d012      	beq.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800660c:	e07a      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800660e:	4b38      	ldr	r3, [pc, #224]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800661a:	d107      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800661c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fd63 	bl	80070ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800662a:	e294      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006630:	e291      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006632:	4b2f      	ldr	r3, [pc, #188]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800663a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800663e:	d107      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006640:	f107 0318 	add.w	r3, r7, #24
 8006644:	4618      	mov	r0, r3
 8006646:	f000 faa9 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800664e:	e282      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006654:	e27f      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006656:	4b26      	ldr	r3, [pc, #152]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800665e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006662:	d107      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006664:	f107 030c 	add.w	r3, r7, #12
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fbeb 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006672:	e270      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006678:	e26d      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800667a:	4b1d      	ldr	r3, [pc, #116]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800667c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800667e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006682:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006684:	4b1a      	ldr	r3, [pc, #104]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b04      	cmp	r3, #4
 800668e:	d10c      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006696:	4b16      	ldr	r3, [pc, #88]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	08db      	lsrs	r3, r3, #3
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	4a14      	ldr	r2, [pc, #80]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80066a2:	fa22 f303 	lsr.w	r3, r2, r3
 80066a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066a8:	e01e      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066aa:	4b11      	ldr	r3, [pc, #68]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b6:	d106      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80066b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066be:	d102      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066c0:	4b0d      	ldr	r3, [pc, #52]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80066c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066c4:	e010      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066c6:	4b0a      	ldr	r3, [pc, #40]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066d2:	d106      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80066d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066da:	d102      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066dc:	4b07      	ldr	r3, [pc, #28]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e0:	e002      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80066e6:	e236      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80066e8:	e235      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066ea:	4b05      	ldr	r3, [pc, #20]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80066ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ee:	e232      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80066f0:	58024400 	.word	0x58024400
 80066f4:	03d09000 	.word	0x03d09000
 80066f8:	003d0900 	.word	0x003d0900
 80066fc:	02dc6c00 	.word	0x02dc6c00
 8006700:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006708:	e225      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800670a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800670e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006712:	430b      	orrs	r3, r1
 8006714:	f040 8085 	bne.w	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006718:	4b9c      	ldr	r3, [pc, #624]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800671a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800671c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006720:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006728:	d06b      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006730:	d874      	bhi.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006734:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006738:	d056      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800673a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006740:	d86c      	bhi.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006744:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006748:	d03b      	beq.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800674a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006750:	d864      	bhi.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006758:	d021      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800675a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006760:	d85c      	bhi.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676e:	d004      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8006770:	e054      	b.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006772:	f7fe fb5f 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8006776:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006778:	e1ed      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800677a:	4b84      	ldr	r3, [pc, #528]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006786:	d107      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006788:	f107 0318 	add.w	r3, r7, #24
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fa05 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006796:	e1de      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800679c:	e1db      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800679e:	4b7b      	ldr	r3, [pc, #492]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067aa:	d107      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ac:	f107 030c 	add.w	r3, r7, #12
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fb47 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ba:	e1cc      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067c0:	e1c9      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c2:	4b72      	ldr	r3, [pc, #456]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d109      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067ce:	4b6f      	ldr	r3, [pc, #444]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	08db      	lsrs	r3, r3, #3
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	4a6d      	ldr	r2, [pc, #436]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80067da:	fa22 f303 	lsr.w	r3, r2, r3
 80067de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067e0:	e1b9      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067e6:	e1b6      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80067e8:	4b68      	ldr	r3, [pc, #416]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067f4:	d102      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80067f6:	4b67      	ldr	r3, [pc, #412]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80067f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067fa:	e1ac      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006800:	e1a9      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006802:	4b62      	ldr	r3, [pc, #392]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800680e:	d102      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006810:	4b61      	ldr	r3, [pc, #388]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006814:	e19f      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800681a:	e19c      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006820:	e199      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006826:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800682a:	430b      	orrs	r3, r1
 800682c:	d173      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800682e:	4b57      	ldr	r3, [pc, #348]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006832:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006836:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800683e:	d02f      	beq.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006846:	d863      	bhi.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800684e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006854:	d012      	beq.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006856:	e05b      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006858:	4b4c      	ldr	r3, [pc, #304]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006864:	d107      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006866:	f107 0318 	add.w	r3, r7, #24
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f996 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006874:	e16f      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800687a:	e16c      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800687c:	4b43      	ldr	r3, [pc, #268]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006888:	d107      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800688a:	f107 030c 	add.w	r3, r7, #12
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fad8 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006898:	e15d      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689e:	e15a      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068a0:	4b3a      	ldr	r3, [pc, #232]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068aa:	4b38      	ldr	r3, [pc, #224]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d10c      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80068b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d109      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068bc:	4b33      	ldr	r3, [pc, #204]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	08db      	lsrs	r3, r3, #3
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	4a32      	ldr	r2, [pc, #200]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
 80068cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068ce:	e01e      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068d0:	4b2e      	ldr	r3, [pc, #184]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068dc:	d106      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80068de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e4:	d102      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80068e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068ea:	e010      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ec:	4b27      	ldr	r3, [pc, #156]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f8:	d106      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80068fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006900:	d102      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006902:	4b25      	ldr	r3, [pc, #148]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006906:	e002      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800690c:	e123      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800690e:	e122      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006914:	e11f      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800691e:	430b      	orrs	r3, r1
 8006920:	d13c      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006922:	4b1a      	ldr	r3, [pc, #104]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800692a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006938:	d012      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800693a:	e023      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800693c:	4b13      	ldr	r3, [pc, #76]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006944:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006948:	d107      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800694a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fbcc 	bl	80070ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006958:	e0fd      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800695e:	e0fa      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006960:	4b0a      	ldr	r3, [pc, #40]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800696c:	d107      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800696e:	f107 0318 	add.w	r3, r7, #24
 8006972:	4618      	mov	r0, r3
 8006974:	f000 f912 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800697c:	e0eb      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006982:	e0e8      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006988:	e0e5      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800698a:	bf00      	nop
 800698c:	58024400 	.word	0x58024400
 8006990:	03d09000 	.word	0x03d09000
 8006994:	003d0900 	.word	0x003d0900
 8006998:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800699c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80069a4:	430b      	orrs	r3, r1
 80069a6:	f040 8085 	bne.w	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80069aa:	4b6d      	ldr	r3, [pc, #436]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80069b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80069b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069ba:	d06b      	beq.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069c2:	d874      	bhi.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80069c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ca:	d056      	beq.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80069cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d2:	d86c      	bhi.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069da:	d03b      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80069dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069e2:	d864      	bhi.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80069e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ea:	d021      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069f2:	d85c      	bhi.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a00:	d004      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006a02:	e054      	b.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a04:	f000 f8b4 	bl	8006b70 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a08:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a0a:	e0a4      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a0c:	4b54      	ldr	r3, [pc, #336]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a18:	d107      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a1a:	f107 0318 	add.w	r3, r7, #24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f8bc 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a28:	e095      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a2e:	e092      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a30:	4b4b      	ldr	r3, [pc, #300]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a3e:	f107 030c 	add.w	r3, r7, #12
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f9fe 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a4c:	e083      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a52:	e080      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a54:	4b42      	ldr	r3, [pc, #264]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d109      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a60:	4b3f      	ldr	r3, [pc, #252]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	08db      	lsrs	r3, r3, #3
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a72:	e070      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a78:	e06d      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a7a:	4b39      	ldr	r3, [pc, #228]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a86:	d102      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006a88:	4b37      	ldr	r3, [pc, #220]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a8c:	e063      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a92:	e060      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a94:	4b32      	ldr	r3, [pc, #200]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aa0:	d102      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006aa2:	4b32      	ldr	r3, [pc, #200]	@ (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa6:	e056      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aac:	e053      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ab2:	e050      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006abc:	430b      	orrs	r3, r1
 8006abe:	d148      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006ac0:	4b27      	ldr	r3, [pc, #156]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ac8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ad0:	d02a      	beq.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ad8:	d838      	bhi.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ae6:	d00d      	beq.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006ae8:	e030      	b.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006aea:	4b1d      	ldr	r3, [pc, #116]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006af6:	d102      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006af8:	4b1c      	ldr	r3, [pc, #112]	@ (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006afc:	e02b      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b02:	e028      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b04:	4b16      	ldr	r3, [pc, #88]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b10:	d107      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 fae8 	bl	80070ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b20:	e019      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b26:	e016      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b28:	4b0d      	ldr	r3, [pc, #52]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b34:	d107      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b36:	f107 0318 	add.w	r3, r7, #24
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f82e 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b44:	e007      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b4a:	e004      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b50:	e001      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3740      	adds	r7, #64	@ 0x40
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	58024400 	.word	0x58024400
 8006b64:	03d09000 	.word	0x03d09000
 8006b68:	003d0900 	.word	0x003d0900
 8006b6c:	02dc6c00 	.word	0x02dc6c00

08006b70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b74:	f7fe f92e 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	4b06      	ldr	r3, [pc, #24]	@ (8006b94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	091b      	lsrs	r3, r3, #4
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	4904      	ldr	r1, [pc, #16]	@ (8006b98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b86:	5ccb      	ldrb	r3, [r1, r3]
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	58024400 	.word	0x58024400
 8006b98:	080123a8 	.word	0x080123a8

08006b9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	@ 0x24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ba4:	4ba1      	ldr	r3, [pc, #644]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006bae:	4b9f      	ldr	r3, [pc, #636]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb2:	0b1b      	lsrs	r3, r3, #12
 8006bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bba:	4b9c      	ldr	r3, [pc, #624]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbe:	091b      	lsrs	r3, r3, #4
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006bc6:	4b99      	ldr	r3, [pc, #612]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8111 	beq.w	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	f000 8083 	beq.w	8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	f200 80a1 	bhi.w	8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d056      	beq.n	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c06:	e099      	b.n	8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c08:	4b88      	ldr	r3, [pc, #544]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02d      	beq.n	8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c14:	4b85      	ldr	r3, [pc, #532]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	08db      	lsrs	r3, r3, #3
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	4a84      	ldr	r2, [pc, #528]	@ (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
 8006c24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3e:	4b7b      	ldr	r3, [pc, #492]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c6e:	e087      	b.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b6a      	ldr	r3, [pc, #424]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb2:	e065      	b.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc6:	4b59      	ldr	r3, [pc, #356]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cf6:	e043      	b.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0a:	4b48      	ldr	r3, [pc, #288]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d3a:	e021      	b.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4e:	4b37      	ldr	r3, [pc, #220]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d80:	4b2a      	ldr	r3, [pc, #168]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	0a5b      	lsrs	r3, r3, #9
 8006d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006dae:	4b1f      	ldr	r3, [pc, #124]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd4:	ee17 2a90 	vmov	r2, s15
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ddc:	4b13      	ldr	r3, [pc, #76]	@ (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de0:	0e1b      	lsrs	r3, r3, #24
 8006de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e02:	ee17 2a90 	vmov	r2, s15
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e0a:	e008      	b.n	8006e1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	609a      	str	r2, [r3, #8]
}
 8006e1e:	bf00      	nop
 8006e20:	3724      	adds	r7, #36	@ 0x24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	46000000 	.word	0x46000000
 8006e38:	4c742400 	.word	0x4c742400
 8006e3c:	4a742400 	.word	0x4a742400
 8006e40:	4c371b00 	.word	0x4c371b00

08006e44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b089      	sub	sp, #36	@ 0x24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e4c:	4ba1      	ldr	r3, [pc, #644]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e56:	4b9f      	ldr	r3, [pc, #636]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5a:	0d1b      	lsrs	r3, r3, #20
 8006e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e62:	4b9c      	ldr	r3, [pc, #624]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e6e:	4b99      	ldr	r3, [pc, #612]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8111 	beq.w	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	f000 8083 	beq.w	8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	f200 80a1 	bhi.w	8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d056      	beq.n	8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006eae:	e099      	b.n	8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eb0:	4b88      	ldr	r3, [pc, #544]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d02d      	beq.n	8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ebc:	4b85      	ldr	r3, [pc, #532]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	08db      	lsrs	r3, r3, #3
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	4a84      	ldr	r2, [pc, #528]	@ (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ecc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee6:	4b7b      	ldr	r3, [pc, #492]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006efa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f16:	e087      	b.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f5a:	e065      	b.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6e:	4b59      	ldr	r3, [pc, #356]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f9e:	e043      	b.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb2:	4b48      	ldr	r3, [pc, #288]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fe2:	e021      	b.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff6:	4b37      	ldr	r3, [pc, #220]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007006:	ed97 6a03 	vldr	s12, [r7, #12]
 800700a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800700e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800701a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007026:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007028:	4b2a      	ldr	r3, [pc, #168]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702c:	0a5b      	lsrs	r3, r3, #9
 800702e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800703e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007042:	edd7 6a07 	vldr	s13, [r7, #28]
 8007046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704e:	ee17 2a90 	vmov	r2, s15
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007056:	4b1f      	ldr	r3, [pc, #124]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705a:	0c1b      	lsrs	r3, r3, #16
 800705c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007060:	ee07 3a90 	vmov	s15, r3
 8007064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007068:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800706c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007070:	edd7 6a07 	vldr	s13, [r7, #28]
 8007074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707c:	ee17 2a90 	vmov	r2, s15
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007084:	4b13      	ldr	r3, [pc, #76]	@ (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007088:	0e1b      	lsrs	r3, r3, #24
 800708a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800709a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800709e:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070aa:	ee17 2a90 	vmov	r2, s15
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070b2:	e008      	b.n	80070c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
}
 80070c6:	bf00      	nop
 80070c8:	3724      	adds	r7, #36	@ 0x24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	58024400 	.word	0x58024400
 80070d8:	03d09000 	.word	0x03d09000
 80070dc:	46000000 	.word	0x46000000
 80070e0:	4c742400 	.word	0x4c742400
 80070e4:	4a742400 	.word	0x4a742400
 80070e8:	4c371b00 	.word	0x4c371b00

080070ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b089      	sub	sp, #36	@ 0x24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070f4:	4ba0      	ldr	r3, [pc, #640]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80070fe:	4b9e      	ldr	r3, [pc, #632]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007102:	091b      	lsrs	r3, r3, #4
 8007104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007108:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800710a:	4b9b      	ldr	r3, [pc, #620]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007114:	4b98      	ldr	r3, [pc, #608]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007118:	08db      	lsrs	r3, r3, #3
 800711a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 8111 	beq.w	800735a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	2b02      	cmp	r3, #2
 800713c:	f000 8083 	beq.w	8007246 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2b02      	cmp	r3, #2
 8007144:	f200 80a1 	bhi.w	800728a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d056      	beq.n	8007202 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007154:	e099      	b.n	800728a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007156:	4b88      	ldr	r3, [pc, #544]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d02d      	beq.n	80071be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007162:	4b85      	ldr	r3, [pc, #532]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	4a83      	ldr	r2, [pc, #524]	@ (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800716e:	fa22 f303 	lsr.w	r3, r2, r3
 8007172:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	ee07 3a90 	vmov	s15, r3
 8007184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718c:	4b7a      	ldr	r3, [pc, #488]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800718e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719c:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007380 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071bc:	e087      	b.n	80072ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007384 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80071cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d0:	4b69      	ldr	r3, [pc, #420]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d8:	ee07 3a90 	vmov	s15, r3
 80071dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007380 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007200:	e065      	b.n	80072ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007214:	4b58      	ldr	r3, [pc, #352]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007224:	ed97 6a03 	vldr	s12, [r7, #12]
 8007228:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007380 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800722c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007234:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007240:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007244:	e043      	b.n	80072ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007250:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800738c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007258:	4b47      	ldr	r3, [pc, #284]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800725a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007268:	ed97 6a03 	vldr	s12, [r7, #12]
 800726c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007380 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007270:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007274:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007278:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007284:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007288:	e021      	b.n	80072ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	ee07 3a90 	vmov	s15, r3
 8007290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007294:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007384 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729c:	4b36      	ldr	r3, [pc, #216]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800729e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a4:	ee07 3a90 	vmov	s15, r3
 80072a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007380 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80072ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	0a5b      	lsrs	r3, r3, #9
 80072d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f4:	ee17 2a90 	vmov	r2, s15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80072fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007316:	edd7 6a07 	vldr	s13, [r7, #28]
 800731a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800731e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007322:	ee17 2a90 	vmov	r2, s15
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800732a:	4b13      	ldr	r3, [pc, #76]	@ (8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732e:	0e1b      	lsrs	r3, r3, #24
 8007330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007334:	ee07 3a90 	vmov	s15, r3
 8007338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007340:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007344:	edd7 6a07 	vldr	s13, [r7, #28]
 8007348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800734c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007350:	ee17 2a90 	vmov	r2, s15
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007358:	e008      	b.n	800736c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	609a      	str	r2, [r3, #8]
}
 800736c:	bf00      	nop
 800736e:	3724      	adds	r7, #36	@ 0x24
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	58024400 	.word	0x58024400
 800737c:	03d09000 	.word	0x03d09000
 8007380:	46000000 	.word	0x46000000
 8007384:	4c742400 	.word	0x4c742400
 8007388:	4a742400 	.word	0x4a742400
 800738c:	4c371b00 	.word	0x4c371b00

08007390 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800739e:	4b53      	ldr	r3, [pc, #332]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d101      	bne.n	80073ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e099      	b.n	80074e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073ae:	4b4f      	ldr	r3, [pc, #316]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a4e      	ldr	r2, [pc, #312]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ba:	f7fb fb9d 	bl	8002af8 <HAL_GetTick>
 80073be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073c0:	e008      	b.n	80073d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073c2:	f7fb fb99 	bl	8002af8 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e086      	b.n	80074e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073d4:	4b45      	ldr	r3, [pc, #276]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1f0      	bne.n	80073c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073e0:	4b42      	ldr	r3, [pc, #264]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	031b      	lsls	r3, r3, #12
 80073ee:	493f      	ldr	r1, [pc, #252]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	3b01      	subs	r3, #1
 8007404:	025b      	lsls	r3, r3, #9
 8007406:	b29b      	uxth	r3, r3
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	3b01      	subs	r3, #1
 8007410:	041b      	lsls	r3, r3, #16
 8007412:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	3b01      	subs	r3, #1
 800741e:	061b      	lsls	r3, r3, #24
 8007420:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007424:	4931      	ldr	r1, [pc, #196]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007426:	4313      	orrs	r3, r2
 8007428:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800742a:	4b30      	ldr	r3, [pc, #192]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	492d      	ldr	r1, [pc, #180]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007438:	4313      	orrs	r3, r2
 800743a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800743c:	4b2b      	ldr	r3, [pc, #172]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007440:	f023 0220 	bic.w	r2, r3, #32
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	4928      	ldr	r1, [pc, #160]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800744a:	4313      	orrs	r3, r2
 800744c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800744e:	4b27      	ldr	r3, [pc, #156]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	4a26      	ldr	r2, [pc, #152]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007454:	f023 0310 	bic.w	r3, r3, #16
 8007458:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800745a:	4b24      	ldr	r3, [pc, #144]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800745c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800745e:	4b24      	ldr	r3, [pc, #144]	@ (80074f0 <RCCEx_PLL2_Config+0x160>)
 8007460:	4013      	ands	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	69d2      	ldr	r2, [r2, #28]
 8007466:	00d2      	lsls	r2, r2, #3
 8007468:	4920      	ldr	r1, [pc, #128]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800746a:	4313      	orrs	r3, r2
 800746c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800746e:	4b1f      	ldr	r3, [pc, #124]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	4a1e      	ldr	r2, [pc, #120]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007474:	f043 0310 	orr.w	r3, r3, #16
 8007478:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007480:	4b1a      	ldr	r3, [pc, #104]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	4a19      	ldr	r2, [pc, #100]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007486:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800748a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800748c:	e00f      	b.n	80074ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d106      	bne.n	80074a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007494:	4b15      	ldr	r3, [pc, #84]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007498:	4a14      	ldr	r2, [pc, #80]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800749a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800749e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074a0:	e005      	b.n	80074ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074a2:	4b12      	ldr	r3, [pc, #72]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80074a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a6:	4a11      	ldr	r2, [pc, #68]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80074a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074ae:	4b0f      	ldr	r3, [pc, #60]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a0e      	ldr	r2, [pc, #56]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80074b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ba:	f7fb fb1d 	bl	8002af8 <HAL_GetTick>
 80074be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074c0:	e008      	b.n	80074d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074c2:	f7fb fb19 	bl	8002af8 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e006      	b.n	80074e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074d4:	4b05      	ldr	r3, [pc, #20]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	58024400 	.word	0x58024400
 80074f0:	ffff0007 	.word	0xffff0007

080074f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007502:	4b53      	ldr	r3, [pc, #332]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	2b03      	cmp	r3, #3
 800750c:	d101      	bne.n	8007512 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e099      	b.n	8007646 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007512:	4b4f      	ldr	r3, [pc, #316]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a4e      	ldr	r2, [pc, #312]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800751c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751e:	f7fb faeb 	bl	8002af8 <HAL_GetTick>
 8007522:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007524:	e008      	b.n	8007538 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007526:	f7fb fae7 	bl	8002af8 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d901      	bls.n	8007538 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e086      	b.n	8007646 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007538:	4b45      	ldr	r3, [pc, #276]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1f0      	bne.n	8007526 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007544:	4b42      	ldr	r3, [pc, #264]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007548:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	051b      	lsls	r3, r3, #20
 8007552:	493f      	ldr	r1, [pc, #252]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007554:	4313      	orrs	r3, r2
 8007556:	628b      	str	r3, [r1, #40]	@ 0x28
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	3b01      	subs	r3, #1
 800755e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	3b01      	subs	r3, #1
 8007568:	025b      	lsls	r3, r3, #9
 800756a:	b29b      	uxth	r3, r3
 800756c:	431a      	orrs	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	3b01      	subs	r3, #1
 8007574:	041b      	lsls	r3, r3, #16
 8007576:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	3b01      	subs	r3, #1
 8007582:	061b      	lsls	r3, r3, #24
 8007584:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007588:	4931      	ldr	r1, [pc, #196]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 800758a:	4313      	orrs	r3, r2
 800758c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800758e:	4b30      	ldr	r3, [pc, #192]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007592:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	492d      	ldr	r1, [pc, #180]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 800759c:	4313      	orrs	r3, r2
 800759e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	4928      	ldr	r1, [pc, #160]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075b2:	4b27      	ldr	r3, [pc, #156]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b6:	4a26      	ldr	r2, [pc, #152]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075be:	4b24      	ldr	r3, [pc, #144]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075c2:	4b24      	ldr	r3, [pc, #144]	@ (8007654 <RCCEx_PLL3_Config+0x160>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	69d2      	ldr	r2, [r2, #28]
 80075ca:	00d2      	lsls	r2, r2, #3
 80075cc:	4920      	ldr	r1, [pc, #128]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e8:	4a19      	ldr	r2, [pc, #100]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075f0:	e00f      	b.n	8007612 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d106      	bne.n	8007606 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075f8:	4b15      	ldr	r3, [pc, #84]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	4a14      	ldr	r2, [pc, #80]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007602:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007604:	e005      	b.n	8007612 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007606:	4b12      	ldr	r3, [pc, #72]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	4a11      	ldr	r2, [pc, #68]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 800760c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007610:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007612:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a0e      	ldr	r2, [pc, #56]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800761c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800761e:	f7fb fa6b 	bl	8002af8 <HAL_GetTick>
 8007622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007624:	e008      	b.n	8007638 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007626:	f7fb fa67 	bl	8002af8 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d901      	bls.n	8007638 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e006      	b.n	8007646 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007638:	4b05      	ldr	r3, [pc, #20]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0f0      	beq.n	8007626 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	58024400 	.word	0x58024400
 8007654:	ffff0007 	.word	0xffff0007

08007658 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	@ 0x28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e075      	b.n	8007756 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d105      	bne.n	8007682 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7fa fcbd 	bl	8001ffc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2204      	movs	r2, #4
 8007686:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f868 	bl	8007760 <HAL_SD_InitCard>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e05d      	b.n	8007756 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800769a:	f107 0308 	add.w	r3, r7, #8
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fdb5 	bl	8008210 <HAL_SD_GetCardStatus>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e052      	b.n	8007756 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80076b0:	7e3b      	ldrb	r3, [r7, #24]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80076b6:	7e7b      	ldrb	r3, [r7, #25]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d10a      	bne.n	80076da <HAL_SD_Init+0x82>
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d102      	bne.n	80076d0 <HAL_SD_Init+0x78>
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80076d8:	e00b      	b.n	80076f2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d104      	bne.n	80076ec <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80076ea:	e002      	b.n	80076f2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fe73 	bl	80083e4 <HAL_SD_ConfigWideBusOperation>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e026      	b.n	8007756 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007708:	f7fb f9f6 	bl	8002af8 <HAL_GetTick>
 800770c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800770e:	e011      	b.n	8007734 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007710:	f7fb f9f2 	bl	8002af8 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d109      	bne.n	8007734 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007726:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e010      	b.n	8007756 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 ff67 	bl	8008608 <HAL_SD_GetCardState>
 800773a:	4603      	mov	r3, r0
 800773c:	2b04      	cmp	r3, #4
 800773e:	d1e7      	bne.n	8007710 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3728      	adds	r7, #40	@ 0x28
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007760:	b590      	push	{r4, r7, lr}
 8007762:	b08d      	sub	sp, #52	@ 0x34
 8007764:	af02      	add	r7, sp, #8
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007768:	2300      	movs	r3, #0
 800776a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800776c:	2300      	movs	r3, #0
 800776e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007774:	2300      	movs	r3, #0
 8007776:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007778:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800777c:	f04f 0100 	mov.w	r1, #0
 8007780:	f7fe fd24 	bl	80061cc <HAL_RCCEx_GetPeriphCLKFreq>
 8007784:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800779a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e070      	b.n	8007882 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	0a1b      	lsrs	r3, r3, #8
 80077a4:	4a39      	ldr	r2, [pc, #228]	@ (800788c <HAL_SD_InitCard+0x12c>)
 80077a6:	fba2 2303 	umull	r2, r3, r2, r3
 80077aa:	091b      	lsrs	r3, r3, #4
 80077ac:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681c      	ldr	r4, [r3, #0]
 80077b2:	466a      	mov	r2, sp
 80077b4:	f107 0318 	add.w	r3, r7, #24
 80077b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80077bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80077c0:	f107 030c 	add.w	r3, r7, #12
 80077c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077c6:	4620      	mov	r0, r4
 80077c8:	f004 ff74 	bl	800c6b4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f004 ffb7 	bl	800c744 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d007      	beq.n	80077fe <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80077ee:	4a28      	ldr	r2, [pc, #160]	@ (8007890 <HAL_SD_InitCard+0x130>)
 80077f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f6:	3301      	adds	r3, #1
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fb f989 	bl	8002b10 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fff0 	bl	80087e4 <SD_PowerON>
 8007804:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00b      	beq.n	8007824 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e02e      	b.n	8007882 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 ff0f 	bl	8008648 <SD_InitCard>
 800782a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	431a      	orrs	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e01b      	b.n	8007882 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007852:	4618      	mov	r0, r3
 8007854:	f005 f80c 	bl	800c870 <SDMMC_CmdBlockLength>
 8007858:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00f      	beq.n	8007880 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a0b      	ldr	r2, [pc, #44]	@ (8007894 <HAL_SD_InitCard+0x134>)
 8007866:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e000      	b.n	8007882 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	372c      	adds	r7, #44	@ 0x2c
 8007886:	46bd      	mov	sp, r7
 8007888:	bd90      	pop	{r4, r7, pc}
 800788a:	bf00      	nop
 800788c:	014f8b59 	.word	0x014f8b59
 8007890:	00012110 	.word	0x00012110
 8007894:	1fe00fff 	.word	0x1fe00fff

08007898 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b092      	sub	sp, #72	@ 0x48
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80078a6:	f7fb f927 	bl	8002af8 <HAL_GetTick>
 80078aa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d107      	bne.n	80078ca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e167      	b.n	8007b9a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	f040 815a 	bne.w	8007b8c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80078de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	441a      	add	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d907      	bls.n	80078fc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e14e      	b.n	8007b9a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2203      	movs	r2, #3
 8007900:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2200      	movs	r2, #0
 800790a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007910:	2b01      	cmp	r3, #1
 8007912:	d002      	beq.n	800791a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007916:	025b      	lsls	r3, r3, #9
 8007918:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800791a:	f04f 33ff 	mov.w	r3, #4294967295
 800791e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	025b      	lsls	r3, r3, #9
 8007924:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007926:	2390      	movs	r3, #144	@ 0x90
 8007928:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800792a:	2302      	movs	r3, #2
 800792c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800792e:	2300      	movs	r3, #0
 8007930:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007932:	2300      	movs	r3, #0
 8007934:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f107 0214 	add.w	r2, r7, #20
 800793e:	4611      	mov	r1, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f004 ff69 	bl	800c818 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007954:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d90a      	bls.n	8007972 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2202      	movs	r2, #2
 8007960:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007968:	4618      	mov	r0, r3
 800796a:	f004 ffc7 	bl	800c8fc <SDMMC_CmdReadMultiBlock>
 800796e:	6478      	str	r0, [r7, #68]	@ 0x44
 8007970:	e009      	b.n	8007986 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800797e:	4618      	mov	r0, r3
 8007980:	f004 ff99 	bl	800c8b6 <SDMMC_CmdReadSingleBlock>
 8007984:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007988:	2b00      	cmp	r3, #0
 800798a:	d012      	beq.n	80079b2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a84      	ldr	r2, [pc, #528]	@ (8007ba4 <HAL_SD_ReadBlocks+0x30c>)
 8007992:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800799a:	431a      	orrs	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e0f3      	b.n	8007b9a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80079b6:	e058      	b.n	8007a6a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d033      	beq.n	8007a2e <HAL_SD_ReadBlocks+0x196>
 80079c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c8:	2b1f      	cmp	r3, #31
 80079ca:	d930      	bls.n	8007a2e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 80079cc:	2300      	movs	r3, #0
 80079ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80079d0:	e027      	b.n	8007a22 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f004 fe96 	bl	800c708 <SDMMC_ReadFIFO>
 80079dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80079de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80079e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e8:	3301      	adds	r3, #1
 80079ea:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80079ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ee:	0a1b      	lsrs	r3, r3, #8
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80079f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f8:	3301      	adds	r3, #1
 80079fa:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80079fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fe:	0c1b      	lsrs	r3, r3, #16
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a08:	3301      	adds	r3, #1
 8007a0a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0e:	0e1b      	lsrs	r3, r3, #24
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a18:	3301      	adds	r3, #1
 8007a1a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8007a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a1e:	3301      	adds	r3, #1
 8007a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a24:	2b07      	cmp	r3, #7
 8007a26:	d9d4      	bls.n	80079d2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a2a:	3b20      	subs	r3, #32
 8007a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007a2e:	f7fb f863 	bl	8002af8 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d902      	bls.n	8007a44 <HAL_SD_ReadBlocks+0x1ac>
 8007a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d112      	bne.n	8007a6a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a56      	ldr	r2, [pc, #344]	@ (8007ba4 <HAL_SD_ReadBlocks+0x30c>)
 8007a4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e097      	b.n	8007b9a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a70:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d09f      	beq.n	80079b8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a86:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d022      	beq.n	8007adc <HAL_SD_ReadBlocks+0x244>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d91f      	bls.n	8007adc <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d01b      	beq.n	8007adc <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f004 ff91 	bl	800c9d0 <SDMMC_CmdStopTransfer>
 8007aae:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d012      	beq.n	8007adc <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a3a      	ldr	r2, [pc, #232]	@ (8007ba4 <HAL_SD_ReadBlocks+0x30c>)
 8007abc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e05e      	b.n	8007b9a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d012      	beq.n	8007b10 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a2d      	ldr	r2, [pc, #180]	@ (8007ba4 <HAL_SD_ReadBlocks+0x30c>)
 8007af0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007af6:	f043 0208 	orr.w	r2, r3, #8
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e044      	b.n	8007b9a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d012      	beq.n	8007b44 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a20      	ldr	r2, [pc, #128]	@ (8007ba4 <HAL_SD_ReadBlocks+0x30c>)
 8007b24:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b2a:	f043 0202 	orr.w	r2, r3, #2
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e02a      	b.n	8007b9a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d012      	beq.n	8007b78 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a13      	ldr	r2, [pc, #76]	@ (8007ba4 <HAL_SD_ReadBlocks+0x30c>)
 8007b58:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e010      	b.n	8007b9a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ba8 <HAL_SD_ReadBlocks+0x310>)
 8007b7e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e006      	b.n	8007b9a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b90:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
  }
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3748      	adds	r7, #72	@ 0x48
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	1fe00fff 	.word	0x1fe00fff
 8007ba8:	18000f3a 	.word	0x18000f3a

08007bac <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b092      	sub	sp, #72	@ 0x48
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007bba:	f7fa ff9d 	bl	8002af8 <HAL_GetTick>
 8007bbe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d107      	bne.n	8007bde <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bd2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e16b      	b.n	8007eb6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	f040 815e 	bne.w	8007ea8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007bf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	441a      	add	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d907      	bls.n	8007c10 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c04:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e152      	b.n	8007eb6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2203      	movs	r2, #3
 8007c14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d002      	beq.n	8007c2e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2a:	025b      	lsls	r3, r3, #9
 8007c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c32:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	025b      	lsls	r3, r3, #9
 8007c38:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007c3a:	2390      	movs	r3, #144	@ 0x90
 8007c3c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f107 0218 	add.w	r2, r7, #24
 8007c52:	4611      	mov	r1, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f004 fddf 	bl	800c818 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c68:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d90a      	bls.n	8007c86 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2220      	movs	r2, #32
 8007c74:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f004 fe83 	bl	800c988 <SDMMC_CmdWriteMultiBlock>
 8007c82:	6478      	str	r0, [r7, #68]	@ 0x44
 8007c84:	e009      	b.n	8007c9a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2210      	movs	r2, #16
 8007c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c92:	4618      	mov	r0, r3
 8007c94:	f004 fe55 	bl	800c942 <SDMMC_CmdWriteSingleBlock>
 8007c98:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d012      	beq.n	8007cc6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a86      	ldr	r2, [pc, #536]	@ (8007ec0 <HAL_SD_WriteBlocks+0x314>)
 8007ca6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e0f7      	b.n	8007eb6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007cca:	e05c      	b.n	8007d86 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d037      	beq.n	8007d4a <HAL_SD_WriteBlocks+0x19e>
 8007cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cdc:	2b1f      	cmp	r3, #31
 8007cde:	d934      	bls.n	8007d4a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ce4:	e02b      	b.n	8007d3e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cee:	3301      	adds	r3, #1
 8007cf0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	021a      	lsls	r2, r3, #8
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d00:	3301      	adds	r3, #1
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	041a      	lsls	r2, r3, #16
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d12:	3301      	adds	r3, #1
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	061a      	lsls	r2, r3, #24
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d24:	3301      	adds	r3, #1
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f107 0214 	add.w	r2, r7, #20
 8007d30:	4611      	mov	r1, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f004 fcf5 	bl	800c722 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8007d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d40:	2b07      	cmp	r3, #7
 8007d42:	d9d0      	bls.n	8007ce6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d46:	3b20      	subs	r3, #32
 8007d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007d4a:	f7fa fed5 	bl	8002af8 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d902      	bls.n	8007d60 <HAL_SD_WriteBlocks+0x1b4>
 8007d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d112      	bne.n	8007d86 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a56      	ldr	r2, [pc, #344]	@ (8007ec0 <HAL_SD_WriteBlocks+0x314>)
 8007d66:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e097      	b.n	8007eb6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d8c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d09b      	beq.n	8007ccc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007da2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d022      	beq.n	8007df8 <HAL_SD_WriteBlocks+0x24c>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d91f      	bls.n	8007df8 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d01b      	beq.n	8007df8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f004 fe03 	bl	800c9d0 <SDMMC_CmdStopTransfer>
 8007dca:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d012      	beq.n	8007df8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a3a      	ldr	r2, [pc, #232]	@ (8007ec0 <HAL_SD_WriteBlocks+0x314>)
 8007dd8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007de0:	431a      	orrs	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e05e      	b.n	8007eb6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dfe:	f003 0308 	and.w	r3, r3, #8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d012      	beq.n	8007e2c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8007ec0 <HAL_SD_WriteBlocks+0x314>)
 8007e0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e12:	f043 0208 	orr.w	r2, r3, #8
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e044      	b.n	8007eb6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d012      	beq.n	8007e60 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a20      	ldr	r2, [pc, #128]	@ (8007ec0 <HAL_SD_WriteBlocks+0x314>)
 8007e40:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e46:	f043 0202 	orr.w	r2, r3, #2
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e02a      	b.n	8007eb6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d012      	beq.n	8007e94 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a13      	ldr	r2, [pc, #76]	@ (8007ec0 <HAL_SD_WriteBlocks+0x314>)
 8007e74:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e7a:	f043 0210 	orr.w	r2, r3, #16
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e010      	b.n	8007eb6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a0a      	ldr	r2, [pc, #40]	@ (8007ec4 <HAL_SD_WriteBlocks+0x318>)
 8007e9a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e006      	b.n	8007eb6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
  }
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3748      	adds	r7, #72	@ 0x48
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	1fe00fff 	.word	0x1fe00fff
 8007ec4:	18000f3a 	.word	0x18000f3a

08007ec8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed6:	0f9b      	lsrs	r3, r3, #30
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ee2:	0e9b      	lsrs	r3, r3, #26
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ef4:	0e1b      	lsrs	r3, r3, #24
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 0303 	and.w	r3, r3, #3
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f06:	0c1b      	lsrs	r3, r3, #16
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f12:	0a1b      	lsrs	r3, r3, #8
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f28:	0d1b      	lsrs	r3, r3, #20
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f34:	0c1b      	lsrs	r3, r3, #16
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f46:	0bdb      	lsrs	r3, r3, #15
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f58:	0b9b      	lsrs	r3, r3, #14
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f6a:	0b5b      	lsrs	r3, r3, #13
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f7c:	0b1b      	lsrs	r3, r3, #12
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d163      	bne.n	8008060 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f9c:	009a      	lsls	r2, r3, #2
 8007f9e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8007fa8:	0f92      	lsrs	r2, r2, #30
 8007faa:	431a      	orrs	r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fb4:	0edb      	lsrs	r3, r3, #27
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fc6:	0e1b      	lsrs	r3, r3, #24
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fd8:	0d5b      	lsrs	r3, r3, #21
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 0307 	and.w	r3, r3, #7
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fea:	0c9b      	lsrs	r3, r3, #18
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ffc:	0bdb      	lsrs	r3, r3, #15
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	b2da      	uxtb	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	7e1b      	ldrb	r3, [r3, #24]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	3302      	adds	r3, #2
 8008020:	2201      	movs	r2, #1
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800802a:	fb03 f202 	mul.w	r2, r3, r2
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	7a1b      	ldrb	r3, [r3, #8]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	2201      	movs	r2, #1
 800803e:	409a      	lsls	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800804c:	0a52      	lsrs	r2, r2, #9
 800804e:	fb03 f202 	mul.w	r2, r3, r2
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800805c:	655a      	str	r2, [r3, #84]	@ 0x54
 800805e:	e031      	b.n	80080c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008064:	2b01      	cmp	r3, #1
 8008066:	d11d      	bne.n	80080a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800806c:	041b      	lsls	r3, r3, #16
 800806e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	431a      	orrs	r2, r3
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	3301      	adds	r3, #1
 8008084:	029a      	lsls	r2, r3, #10
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008098:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80080a2:	e00f      	b.n	80080c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a58      	ldr	r2, [pc, #352]	@ (800820c <HAL_SD_GetCardCSD+0x344>)
 80080aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e09d      	b.n	8008200 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080c8:	0b9b      	lsrs	r3, r3, #14
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080da:	09db      	lsrs	r3, r3, #7
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080fc:	0fdb      	lsrs	r3, r3, #31
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008108:	0f5b      	lsrs	r3, r3, #29
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	b2da      	uxtb	r2, r3
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800811a:	0e9b      	lsrs	r3, r3, #26
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	b2da      	uxtb	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800812c:	0d9b      	lsrs	r3, r3, #22
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 030f 	and.w	r3, r3, #15
 8008134:	b2da      	uxtb	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800813e:	0d5b      	lsrs	r3, r3, #21
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	b2da      	uxtb	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800815a:	0c1b      	lsrs	r3, r3, #16
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	b2da      	uxtb	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800816e:	0bdb      	lsrs	r3, r3, #15
 8008170:	b2db      	uxtb	r3, r3
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	b2da      	uxtb	r2, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008182:	0b9b      	lsrs	r3, r3, #14
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	b2da      	uxtb	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008196:	0b5b      	lsrs	r3, r3, #13
 8008198:	b2db      	uxtb	r3, r3
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081aa:	0b1b      	lsrs	r3, r3, #12
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081be:	0a9b      	lsrs	r3, r3, #10
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081d2:	0a1b      	lsrs	r3, r3, #8
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	1fe00fff 	.word	0x1fe00fff

08008210 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b094      	sub	sp, #80	@ 0x50
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b03      	cmp	r3, #3
 800822a:	d101      	bne.n	8008230 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e0a7      	b.n	8008380 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008230:	f107 0308 	add.w	r3, r7, #8
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fb62 	bl	8008900 <SD_SendSDStatus>
 800823c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800823e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008240:	2b00      	cmp	r3, #0
 8008242:	d011      	beq.n	8008268 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a4f      	ldr	r2, [pc, #316]	@ (8008388 <HAL_SD_GetCardStatus+0x178>)
 800824a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008266:	e070      	b.n	800834a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	099b      	lsrs	r3, r3, #6
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	b2da      	uxtb	r2, r3
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	b29b      	uxth	r3, r3
 800828e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008292:	b29a      	uxth	r2, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	0e1b      	lsrs	r3, r3, #24
 8008298:	b29b      	uxth	r3, r3
 800829a:	4313      	orrs	r3, r2
 800829c:	b29a      	uxth	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	061a      	lsls	r2, r3, #24
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80082ae:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	0a1b      	lsrs	r3, r3, #8
 80082b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80082b8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	0e1b      	lsrs	r3, r3, #24
 80082be:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	0a1b      	lsrs	r3, r3, #8
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	0d1b      	lsrs	r3, r3, #20
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	0c1b      	lsrs	r3, r3, #16
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	4313      	orrs	r3, r2
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	0a9b      	lsrs	r3, r3, #10
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800830c:	b2da      	uxtb	r2, r3
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	0a1b      	lsrs	r3, r3, #8
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f003 0303 	and.w	r3, r3, #3
 800831c:	b2da      	uxtb	r2, r3
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	091b      	lsrs	r3, r3, #4
 8008326:	b2db      	uxtb	r3, r3
 8008328:	f003 030f 	and.w	r3, r3, #15
 800832c:	b2da      	uxtb	r2, r3
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	f003 030f 	and.w	r3, r3, #15
 800833a:	b2da      	uxtb	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	0e1b      	lsrs	r3, r3, #24
 8008344:	b2da      	uxtb	r2, r3
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008352:	4618      	mov	r0, r3
 8008354:	f004 fa8c 	bl	800c870 <SDMMC_CmdBlockLength>
 8008358:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800835a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00d      	beq.n	800837c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a08      	ldr	r2, [pc, #32]	@ (8008388 <HAL_SD_GetCardStatus+0x178>)
 8008366:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800836c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800837c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008380:	4618      	mov	r0, r3
 8008382:	3750      	adds	r7, #80	@ 0x50
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	1fe00fff 	.word	0x1fe00fff

0800838c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80083e4:	b590      	push	{r4, r7, lr}
 80083e6:	b08d      	sub	sp, #52	@ 0x34
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2203      	movs	r2, #3
 80083f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008400:	2b03      	cmp	r3, #3
 8008402:	d02e      	beq.n	8008462 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800840a:	d106      	bne.n	800841a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008410:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	635a      	str	r2, [r3, #52]	@ 0x34
 8008418:	e029      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008420:	d10a      	bne.n	8008438 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fb64 	bl	8008af0 <SD_WideBus_Enable>
 8008428:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	635a      	str	r2, [r3, #52]	@ 0x34
 8008436:	e01a      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fba1 	bl	8008b86 <SD_WideBus_Disable>
 8008444:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	635a      	str	r2, [r3, #52]	@ 0x34
 8008452:	e00c      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008458:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008460:	e005      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008466:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008472:	2b00      	cmp	r3, #0
 8008474:	d007      	beq.n	8008486 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a5f      	ldr	r2, [pc, #380]	@ (80085f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800847c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008484:	e096      	b.n	80085b4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008486:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800848a:	f04f 0100 	mov.w	r1, #0
 800848e:	f7fd fe9d 	bl	80061cc <HAL_RCCEx_GetPeriphCLKFreq>
 8008492:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 8083 	beq.w	80085a2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	4950      	ldr	r1, [pc, #320]	@ (80085fc <HAL_SD_ConfigWideBusOperation+0x218>)
 80084ba:	fba1 1303 	umull	r1, r3, r1, r3
 80084be:	0e1b      	lsrs	r3, r3, #24
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d303      	bcc.n	80084cc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	e05a      	b.n	8008582 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084d4:	d103      	bne.n	80084de <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	61bb      	str	r3, [r7, #24]
 80084dc:	e051      	b.n	8008582 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084e6:	d126      	bne.n	8008536 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10e      	bne.n	800850e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	4a43      	ldr	r2, [pc, #268]	@ (8008600 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d906      	bls.n	8008506 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	4a40      	ldr	r2, [pc, #256]	@ (80085fc <HAL_SD_ConfigWideBusOperation+0x218>)
 80084fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008500:	0e5b      	lsrs	r3, r3, #25
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	e03d      	b.n	8008582 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	e039      	b.n	8008582 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	fbb2 f3f3 	udiv	r3, r2, r3
 800851a:	4a39      	ldr	r2, [pc, #228]	@ (8008600 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d906      	bls.n	800852e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4a36      	ldr	r2, [pc, #216]	@ (80085fc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008524:	fba2 2303 	umull	r2, r3, r2, r3
 8008528:	0e5b      	lsrs	r3, r3, #25
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	e029      	b.n	8008582 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	e025      	b.n	8008582 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10e      	bne.n	800855c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4a30      	ldr	r2, [pc, #192]	@ (8008604 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d906      	bls.n	8008554 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	4a2c      	ldr	r2, [pc, #176]	@ (80085fc <HAL_SD_ConfigWideBusOperation+0x218>)
 800854a:	fba2 2303 	umull	r2, r3, r2, r3
 800854e:	0e1b      	lsrs	r3, r3, #24
 8008550:	61bb      	str	r3, [r7, #24]
 8008552:	e016      	b.n	8008582 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	61bb      	str	r3, [r7, #24]
 800855a:	e012      	b.n	8008582 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	fbb2 f3f3 	udiv	r3, r2, r3
 8008568:	4a26      	ldr	r2, [pc, #152]	@ (8008604 <HAL_SD_ConfigWideBusOperation+0x220>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d906      	bls.n	800857c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	4a22      	ldr	r2, [pc, #136]	@ (80085fc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008572:	fba2 2303 	umull	r2, r3, r2, r3
 8008576:	0e1b      	lsrs	r3, r3, #24
 8008578:	61bb      	str	r3, [r7, #24]
 800857a:	e002      	b.n	8008582 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681c      	ldr	r4, [r3, #0]
 8008586:	466a      	mov	r2, sp
 8008588:	f107 0314 	add.w	r3, r7, #20
 800858c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008590:	e882 0003 	stmia.w	r2, {r0, r1}
 8008594:	f107 0308 	add.w	r3, r7, #8
 8008598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800859a:	4620      	mov	r0, r4
 800859c:	f004 f88a 	bl	800c6b4 <SDMMC_Init>
 80085a0:	e008      	b.n	80085b4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80085bc:	4618      	mov	r0, r3
 80085be:	f004 f957 	bl	800c870 <SDMMC_CmdBlockLength>
 80085c2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a0a      	ldr	r2, [pc, #40]	@ (80085f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 80085d0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	431a      	orrs	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80085ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	372c      	adds	r7, #44	@ 0x2c
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd90      	pop	{r4, r7, pc}
 80085f8:	1fe00fff 	.word	0x1fe00fff
 80085fc:	55e63b89 	.word	0x55e63b89
 8008600:	02faf080 	.word	0x02faf080
 8008604:	017d7840 	.word	0x017d7840

08008608 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008614:	f107 030c 	add.w	r3, r7, #12
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fa40 	bl	8008aa0 <SD_SendStatus>
 8008620:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	0a5b      	lsrs	r3, r3, #9
 8008638:	f003 030f 	and.w	r3, r3, #15
 800863c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800863e:	693b      	ldr	r3, [r7, #16]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b090      	sub	sp, #64	@ 0x40
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008654:	f7fa fa50 	bl	8002af8 <HAL_GetTick>
 8008658:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f004 f881 	bl	800c766 <SDMMC_GetPowerState>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800866a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800866e:	e0b5      	b.n	80087dc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008674:	2b03      	cmp	r3, #3
 8008676:	d02e      	beq.n	80086d6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4618      	mov	r0, r3
 800867e:	f004 facc 	bl	800cc1a <SDMMC_CmdSendCID>
 8008682:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <SD_InitCard+0x46>
    {
      return errorstate;
 800868a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868c:	e0a6      	b.n	80087dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2100      	movs	r1, #0
 8008694:	4618      	mov	r0, r3
 8008696:	f004 f8ac 	bl	800c7f2 <SDMMC_GetResponse>
 800869a:	4602      	mov	r2, r0
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2104      	movs	r1, #4
 80086a6:	4618      	mov	r0, r3
 80086a8:	f004 f8a3 	bl	800c7f2 <SDMMC_GetResponse>
 80086ac:	4602      	mov	r2, r0
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2108      	movs	r1, #8
 80086b8:	4618      	mov	r0, r3
 80086ba:	f004 f89a 	bl	800c7f2 <SDMMC_GetResponse>
 80086be:	4602      	mov	r2, r0
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	210c      	movs	r1, #12
 80086ca:	4618      	mov	r0, r3
 80086cc:	f004 f891 	bl	800c7f2 <SDMMC_GetResponse>
 80086d0:	4602      	mov	r2, r0
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d01d      	beq.n	800871a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80086de:	e019      	b.n	8008714 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f107 020a 	add.w	r2, r7, #10
 80086e8:	4611      	mov	r1, r2
 80086ea:	4618      	mov	r0, r3
 80086ec:	f004 fad4 	bl	800cc98 <SDMMC_CmdSetRelAdd>
 80086f0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80086f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <SD_InitCard+0xb4>
      {
        return errorstate;
 80086f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fa:	e06f      	b.n	80087dc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80086fc:	f7fa f9fc 	bl	8002af8 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	f241 3287 	movw	r2, #4999	@ 0x1387
 800870a:	4293      	cmp	r3, r2
 800870c:	d902      	bls.n	8008714 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800870e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008712:	e063      	b.n	80087dc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008714:	897b      	ldrh	r3, [r7, #10]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0e2      	beq.n	80086e0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871e:	2b03      	cmp	r3, #3
 8008720:	d036      	beq.n	8008790 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008722:	897b      	ldrh	r3, [r7, #10]
 8008724:	461a      	mov	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008732:	041b      	lsls	r3, r3, #16
 8008734:	4619      	mov	r1, r3
 8008736:	4610      	mov	r0, r2
 8008738:	f004 fa8e 	bl	800cc58 <SDMMC_CmdSendCSD>
 800873c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800873e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <SD_InitCard+0x100>
    {
      return errorstate;
 8008744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008746:	e049      	b.n	80087dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2100      	movs	r1, #0
 800874e:	4618      	mov	r0, r3
 8008750:	f004 f84f 	bl	800c7f2 <SDMMC_GetResponse>
 8008754:	4602      	mov	r2, r0
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2104      	movs	r1, #4
 8008760:	4618      	mov	r0, r3
 8008762:	f004 f846 	bl	800c7f2 <SDMMC_GetResponse>
 8008766:	4602      	mov	r2, r0
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2108      	movs	r1, #8
 8008772:	4618      	mov	r0, r3
 8008774:	f004 f83d 	bl	800c7f2 <SDMMC_GetResponse>
 8008778:	4602      	mov	r2, r0
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	210c      	movs	r1, #12
 8008784:	4618      	mov	r0, r3
 8008786:	f004 f834 	bl	800c7f2 <SDMMC_GetResponse>
 800878a:	4602      	mov	r2, r0
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2104      	movs	r1, #4
 8008796:	4618      	mov	r0, r3
 8008798:	f004 f82b 	bl	800c7f2 <SDMMC_GetResponse>
 800879c:	4603      	mov	r3, r0
 800879e:	0d1a      	lsrs	r2, r3, #20
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80087a4:	f107 030c 	add.w	r3, r7, #12
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff fb8c 	bl	8007ec8 <HAL_SD_GetCardCSD>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80087ba:	e00f      	b.n	80087dc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c4:	041b      	lsls	r3, r3, #16
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f004 f93d 	bl	800ca48 <SDMMC_CmdSelDesel>
 80087ce:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <SD_InitCard+0x192>
  {
    return errorstate;
 80087d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d8:	e000      	b.n	80087dc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3740      	adds	r7, #64	@ 0x40
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f004 f946 	bl	800ca8e <SDMMC_CmdGoIdleState>
 8008802:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <SD_PowerON+0x2a>
  {
    return errorstate;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	e072      	b.n	80088f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4618      	mov	r0, r3
 8008814:	f004 f959 	bl	800caca <SDMMC_CmdOperCond>
 8008818:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008820:	d10d      	bne.n	800883e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f004 f92e 	bl	800ca8e <SDMMC_CmdGoIdleState>
 8008832:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <SD_PowerON+0x60>
    {
      return errorstate;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	e05a      	b.n	80088f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008848:	2b01      	cmp	r3, #1
 800884a:	d137      	bne.n	80088bc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2100      	movs	r1, #0
 8008852:	4618      	mov	r0, r3
 8008854:	f004 f959 	bl	800cb0a <SDMMC_CmdAppCommand>
 8008858:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d02d      	beq.n	80088bc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008860:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008864:	e046      	b.n	80088f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2100      	movs	r1, #0
 800886c:	4618      	mov	r0, r3
 800886e:	f004 f94c 	bl	800cb0a <SDMMC_CmdAppCommand>
 8008872:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <SD_PowerON+0x9a>
    {
      return errorstate;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	e03a      	b.n	80088f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	491e      	ldr	r1, [pc, #120]	@ (80088fc <SD_PowerON+0x118>)
 8008884:	4618      	mov	r0, r3
 8008886:	f004 f963 	bl	800cb50 <SDMMC_CmdAppOperCommand>
 800888a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008892:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008896:	e02d      	b.n	80088f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f003 ffa7 	bl	800c7f2 <SDMMC_GetResponse>
 80088a4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	0fdb      	lsrs	r3, r3, #31
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <SD_PowerON+0xce>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <SD_PowerON+0xd0>
 80088b2:	2300      	movs	r3, #0
 80088b4:	613b      	str	r3, [r7, #16]

    count++;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d802      	bhi.n	80088cc <SD_PowerON+0xe8>
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0cc      	beq.n	8008866 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d902      	bls.n	80088dc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80088d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088da:	e00b      	b.n	80088f4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	c1100000 	.word	0xc1100000

08008900 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08c      	sub	sp, #48	@ 0x30
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800890a:	f7fa f8f5 	bl	8002af8 <HAL_GetTick>
 800890e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2100      	movs	r1, #0
 800891a:	4618      	mov	r0, r3
 800891c:	f003 ff69 	bl	800c7f2 <SDMMC_GetResponse>
 8008920:	4603      	mov	r3, r0
 8008922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800892a:	d102      	bne.n	8008932 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800892c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008930:	e0b0      	b.n	8008a94 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2140      	movs	r1, #64	@ 0x40
 8008938:	4618      	mov	r0, r3
 800893a:	f003 ff99 	bl	800c870 <SDMMC_CmdBlockLength>
 800893e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	e0a0      	b.n	8008a94 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800895a:	041b      	lsls	r3, r3, #16
 800895c:	4619      	mov	r1, r3
 800895e:	4610      	mov	r0, r2
 8008960:	f004 f8d3 	bl	800cb0a <SDMMC_CmdAppCommand>
 8008964:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	e08d      	b.n	8008a94 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008978:	f04f 33ff 	mov.w	r3, #4294967295
 800897c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800897e:	2340      	movs	r3, #64	@ 0x40
 8008980:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008982:	2360      	movs	r3, #96	@ 0x60
 8008984:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008986:	2302      	movs	r3, #2
 8008988:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800898a:	2300      	movs	r3, #0
 800898c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800898e:	2301      	movs	r3, #1
 8008990:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f107 0208 	add.w	r2, r7, #8
 800899a:	4611      	mov	r1, r2
 800899c:	4618      	mov	r0, r3
 800899e:	f003 ff3b 	bl	800c818 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f004 f9bb 	bl	800cd22 <SDMMC_CmdStatusRegister>
 80089ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d02b      	beq.n	8008a0c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	e069      	b.n	8008a94 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d013      	beq.n	80089f6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80089ce:	2300      	movs	r3, #0
 80089d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089d2:	e00d      	b.n	80089f0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4618      	mov	r0, r3
 80089da:	f003 fe95 	bl	800c708 <SDMMC_ReadFIFO>
 80089de:	4602      	mov	r2, r0
 80089e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e2:	601a      	str	r2, [r3, #0]
        pData++;
 80089e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e6:	3304      	adds	r3, #4
 80089e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80089ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ec:	3301      	adds	r3, #1
 80089ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	2b07      	cmp	r3, #7
 80089f4:	d9ee      	bls.n	80089d4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089f6:	f7fa f87f 	bl	8002af8 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d102      	bne.n	8008a0c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a06:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a0a:	e043      	b.n	8008a94 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a12:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0d2      	beq.n	80089c0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a28:	2308      	movs	r3, #8
 8008a2a:	e033      	b.n	8008a94 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e02a      	b.n	8008a94 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a44:	f003 0320 	and.w	r3, r3, #32
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d017      	beq.n	8008a7c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008a4c:	2320      	movs	r3, #32
 8008a4e:	e021      	b.n	8008a94 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f003 fe57 	bl	800c708 <SDMMC_ReadFIFO>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5e:	601a      	str	r2, [r3, #0]
    pData++;
 8008a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a62:	3304      	adds	r3, #4
 8008a64:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a66:	f7fa f847 	bl	8002af8 <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a74:	d102      	bne.n	8008a7c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a76:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a7a:	e00b      	b.n	8008a94 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e2      	bne.n	8008a50 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a03      	ldr	r2, [pc, #12]	@ (8008a9c <SD_SendSDStatus+0x19c>)
 8008a90:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3730      	adds	r7, #48	@ 0x30
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	18000f3a 	.word	0x18000f3a

08008aa0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d102      	bne.n	8008ab6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008ab0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ab4:	e018      	b.n	8008ae8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008abe:	041b      	lsls	r3, r3, #16
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	f004 f90a 	bl	800ccdc <SDMMC_CmdSendStatus>
 8008ac8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	e009      	b.n	8008ae8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2100      	movs	r1, #0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f003 fe89 	bl	800c7f2 <SDMMC_GetResponse>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	2300      	movs	r3, #0
 8008afe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f003 fe73 	bl	800c7f2 <SDMMC_GetResponse>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b16:	d102      	bne.n	8008b1e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008b1c:	e02f      	b.n	8008b7e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b1e:	f107 030c 	add.w	r3, r7, #12
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f879 	bl	8008c1c <SD_FindSCR>
 8008b2a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	e023      	b.n	8008b7e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01c      	beq.n	8008b7a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b48:	041b      	lsls	r3, r3, #16
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	f003 ffdc 	bl	800cb0a <SDMMC_CmdAppCommand>
 8008b52:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	e00f      	b.n	8008b7e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2102      	movs	r1, #2
 8008b64:	4618      	mov	r0, r3
 8008b66:	f004 f813 	bl	800cb90 <SDMMC_CmdBusWidth>
 8008b6a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	e003      	b.n	8008b7e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	e001      	b.n	8008b7e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b7a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b086      	sub	sp, #24
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	2300      	movs	r3, #0
 8008b94:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f003 fe28 	bl	800c7f2 <SDMMC_GetResponse>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ba8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bac:	d102      	bne.n	8008bb4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008bae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008bb2:	e02f      	b.n	8008c14 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008bb4:	f107 030c 	add.w	r3, r7, #12
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f82e 	bl	8008c1c <SD_FindSCR>
 8008bc0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	e023      	b.n	8008c14 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01c      	beq.n	8008c10 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bde:	041b      	lsls	r3, r3, #16
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f003 ff91 	bl	800cb0a <SDMMC_CmdAppCommand>
 8008be8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	e00f      	b.n	8008c14 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f003 ffc8 	bl	800cb90 <SDMMC_CmdBusWidth>
 8008c00:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	e003      	b.n	8008c14 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e001      	b.n	8008c14 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c10:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08e      	sub	sp, #56	@ 0x38
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c26:	f7f9 ff67 	bl	8002af8 <HAL_GetTick>
 8008c2a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008c30:	2300      	movs	r3, #0
 8008c32:	60bb      	str	r3, [r7, #8]
 8008c34:	2300      	movs	r3, #0
 8008c36:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2108      	movs	r1, #8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f003 fe14 	bl	800c870 <SDMMC_CmdBlockLength>
 8008c48:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c52:	e0ad      	b.n	8008db0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c5c:	041b      	lsls	r3, r3, #16
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4610      	mov	r0, r2
 8008c62:	f003 ff52 	bl	800cb0a <SDMMC_CmdAppCommand>
 8008c66:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c70:	e09e      	b.n	8008db0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c72:	f04f 33ff 	mov.w	r3, #4294967295
 8008c76:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c78:	2308      	movs	r3, #8
 8008c7a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008c7c:	2330      	movs	r3, #48	@ 0x30
 8008c7e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c80:	2302      	movs	r3, #2
 8008c82:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f107 0210 	add.w	r2, r7, #16
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f003 fdbe 	bl	800c818 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f003 ff98 	bl	800cbd6 <SDMMC_CmdSendSCR>
 8008ca6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d027      	beq.n	8008cfe <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	e07e      	b.n	8008db0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d113      	bne.n	8008ce8 <SD_FindSCR+0xcc>
 8008cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d110      	bne.n	8008ce8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f003 fd1c 	bl	800c708 <SDMMC_ReadFIFO>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f003 fd15 	bl	800c708 <SDMMC_ReadFIFO>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	60fb      	str	r3, [r7, #12]
      index++;
 8008ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ce8:	f7f9 ff06 	bl	8002af8 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf6:	d102      	bne.n	8008cfe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cf8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008cfc:	e058      	b.n	8008db0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d04:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008d08:	4013      	ands	r3, r2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0d1      	beq.n	8008cb2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d14:	f003 0308 	and.w	r3, r3, #8
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d005      	beq.n	8008d28 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2208      	movs	r2, #8
 8008d22:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d24:	2308      	movs	r3, #8
 8008d26:	e043      	b.n	8008db0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e036      	b.n	8008db0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d48:	f003 0320 	and.w	r3, r3, #32
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2220      	movs	r2, #32
 8008d56:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d58:	2320      	movs	r3, #32
 8008d5a:	e029      	b.n	8008db0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a15      	ldr	r2, [pc, #84]	@ (8008db8 <SD_FindSCR+0x19c>)
 8008d62:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	061a      	lsls	r2, r3, #24
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	021b      	lsls	r3, r3, #8
 8008d6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d70:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	0a1b      	lsrs	r3, r3, #8
 8008d76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d7a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	0e1b      	lsrs	r3, r3, #24
 8008d80:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d84:	601a      	str	r2, [r3, #0]
    scr++;
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	3304      	adds	r3, #4
 8008d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	061a      	lsls	r2, r3, #24
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d98:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	0a1b      	lsrs	r3, r3, #8
 8008d9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008da2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	0e1b      	lsrs	r3, r3, #24
 8008da8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3738      	adds	r7, #56	@ 0x38
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	18000f3a 	.word	0x18000f3a

08008dbc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e10f      	b.n	8008fee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a87      	ldr	r2, [pc, #540]	@ (8008ff8 <HAL_SPI_Init+0x23c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00f      	beq.n	8008dfe <HAL_SPI_Init+0x42>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a86      	ldr	r2, [pc, #536]	@ (8008ffc <HAL_SPI_Init+0x240>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d00a      	beq.n	8008dfe <HAL_SPI_Init+0x42>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a84      	ldr	r2, [pc, #528]	@ (8009000 <HAL_SPI_Init+0x244>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d005      	beq.n	8008dfe <HAL_SPI_Init+0x42>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	2b0f      	cmp	r3, #15
 8008df8:	d901      	bls.n	8008dfe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e0f7      	b.n	8008fee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fe2e 	bl	8009a60 <SPI_GetPacketSize>
 8008e04:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a7b      	ldr	r2, [pc, #492]	@ (8008ff8 <HAL_SPI_Init+0x23c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00c      	beq.n	8008e2a <HAL_SPI_Init+0x6e>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a79      	ldr	r2, [pc, #484]	@ (8008ffc <HAL_SPI_Init+0x240>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d007      	beq.n	8008e2a <HAL_SPI_Init+0x6e>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a78      	ldr	r2, [pc, #480]	@ (8009000 <HAL_SPI_Init+0x244>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d002      	beq.n	8008e2a <HAL_SPI_Init+0x6e>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b08      	cmp	r3, #8
 8008e28:	d811      	bhi.n	8008e4e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e2e:	4a72      	ldr	r2, [pc, #456]	@ (8008ff8 <HAL_SPI_Init+0x23c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d009      	beq.n	8008e48 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a70      	ldr	r2, [pc, #448]	@ (8008ffc <HAL_SPI_Init+0x240>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d004      	beq.n	8008e48 <HAL_SPI_Init+0x8c>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a6f      	ldr	r2, [pc, #444]	@ (8009000 <HAL_SPI_Init+0x244>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d104      	bne.n	8008e52 <HAL_SPI_Init+0x96>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b10      	cmp	r3, #16
 8008e4c:	d901      	bls.n	8008e52 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e0cd      	b.n	8008fee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d106      	bne.n	8008e6c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7f9 f956 	bl	8002118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0201 	bic.w	r2, r2, #1
 8008e82:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008e8e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e98:	d119      	bne.n	8008ece <HAL_SPI_Init+0x112>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ea2:	d103      	bne.n	8008eac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d008      	beq.n	8008ebe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10c      	bne.n	8008ece <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ebc:	d107      	bne.n	8008ece <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ecc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00f      	beq.n	8008efa <HAL_SPI_Init+0x13e>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	2b06      	cmp	r3, #6
 8008ee0:	d90b      	bls.n	8008efa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e007      	b.n	8008f0a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	69da      	ldr	r2, [r3, #28]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f12:	431a      	orrs	r2, r3
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1c:	ea42 0103 	orr.w	r1, r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	431a      	orrs	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f6a:	ea42 0103 	orr.w	r1, r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d113      	bne.n	8008faa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f94:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008fa8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0201 	bic.w	r2, r2, #1
 8008fb8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	40013000 	.word	0x40013000
 8008ffc:	40003800 	.word	0x40003800
 8009000:	40003c00 	.word	0x40003c00

08009004 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af02      	add	r7, sp, #8
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	4613      	mov	r3, r2
 8009012:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3320      	adds	r3, #32
 800901a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800901c:	f7f9 fd6c 	bl	8002af8 <HAL_GetTick>
 8009020:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b01      	cmp	r3, #1
 800902c:	d001      	beq.n	8009032 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800902e:	2302      	movs	r3, #2
 8009030:	e1d1      	b.n	80093d6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <HAL_SPI_Transmit+0x3a>
 8009038:	88fb      	ldrh	r3, [r7, #6]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e1c9      	b.n	80093d6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009048:	2b01      	cmp	r3, #1
 800904a:	d101      	bne.n	8009050 <HAL_SPI_Transmit+0x4c>
 800904c:	2302      	movs	r3, #2
 800904e:	e1c2      	b.n	80093d6 <HAL_SPI_Transmit+0x3d2>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2203      	movs	r2, #3
 800905c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	88fa      	ldrh	r2, [r7, #6]
 8009072:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	88fa      	ldrh	r2, [r7, #6]
 800907a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80090a8:	d108      	bne.n	80090bc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	e009      	b.n	80090d0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80090ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	4b96      	ldr	r3, [pc, #600]	@ (8009330 <HAL_SPI_Transmit+0x32c>)
 80090d8:	4013      	ands	r3, r2
 80090da:	88f9      	ldrh	r1, [r7, #6]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	6812      	ldr	r2, [r2, #0]
 80090e0:	430b      	orrs	r3, r1
 80090e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0201 	orr.w	r2, r2, #1
 80090f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090fc:	d107      	bne.n	800910e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800910c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	2b0f      	cmp	r3, #15
 8009114:	d947      	bls.n	80091a6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009116:	e03f      	b.n	8009198 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b02      	cmp	r3, #2
 8009124:	d114      	bne.n	8009150 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6812      	ldr	r2, [r2, #0]
 8009130:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009136:	1d1a      	adds	r2, r3, #4
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009142:	b29b      	uxth	r3, r3
 8009144:	3b01      	subs	r3, #1
 8009146:	b29a      	uxth	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800914e:	e023      	b.n	8009198 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009150:	f7f9 fcd2 	bl	8002af8 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	429a      	cmp	r2, r3
 800915e:	d803      	bhi.n	8009168 <HAL_SPI_Transmit+0x164>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009166:	d102      	bne.n	800916e <HAL_SPI_Transmit+0x16a>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d114      	bne.n	8009198 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 fba8 	bl	80098c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800917a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e11e      	b.n	80093d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800919e:	b29b      	uxth	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1b9      	bne.n	8009118 <HAL_SPI_Transmit+0x114>
 80091a4:	e0f1      	b.n	800938a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	2b07      	cmp	r3, #7
 80091ac:	f240 80e6 	bls.w	800937c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80091b0:	e05d      	b.n	800926e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d132      	bne.n	8009226 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d918      	bls.n	80091fe <HAL_SPI_Transmit+0x1fa>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d014      	beq.n	80091fe <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6812      	ldr	r2, [r2, #0]
 80091de:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091e4:	1d1a      	adds	r2, r3, #4
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b02      	subs	r3, #2
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80091fc:	e037      	b.n	800926e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009202:	881a      	ldrh	r2, [r3, #0]
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800920c:	1c9a      	adds	r2, r3, #2
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	b29a      	uxth	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009224:	e023      	b.n	800926e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009226:	f7f9 fc67 	bl	8002af8 <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	429a      	cmp	r2, r3
 8009234:	d803      	bhi.n	800923e <HAL_SPI_Transmit+0x23a>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923c:	d102      	bne.n	8009244 <HAL_SPI_Transmit+0x240>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d114      	bne.n	800926e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fb3d 	bl	80098c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009250:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e0b3      	b.n	80093d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009274:	b29b      	uxth	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d19b      	bne.n	80091b2 <HAL_SPI_Transmit+0x1ae>
 800927a:	e086      	b.n	800938a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b02      	cmp	r3, #2
 8009288:	d154      	bne.n	8009334 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009290:	b29b      	uxth	r3, r3
 8009292:	2b03      	cmp	r3, #3
 8009294:	d918      	bls.n	80092c8 <HAL_SPI_Transmit+0x2c4>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929a:	2b40      	cmp	r3, #64	@ 0x40
 800929c:	d914      	bls.n	80092c8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6812      	ldr	r2, [r2, #0]
 80092a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ae:	1d1a      	adds	r2, r3, #4
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	3b04      	subs	r3, #4
 80092be:	b29a      	uxth	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80092c6:	e059      	b.n	800937c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d917      	bls.n	8009304 <HAL_SPI_Transmit+0x300>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d013      	beq.n	8009304 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092e0:	881a      	ldrh	r2, [r3, #0]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ea:	1c9a      	adds	r2, r3, #2
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	3b02      	subs	r3, #2
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009302:	e03b      	b.n	800937c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3320      	adds	r3, #32
 800930e:	7812      	ldrb	r2, [r2, #0]
 8009310:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009322:	b29b      	uxth	r3, r3
 8009324:	3b01      	subs	r3, #1
 8009326:	b29a      	uxth	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800932e:	e025      	b.n	800937c <HAL_SPI_Transmit+0x378>
 8009330:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009334:	f7f9 fbe0 	bl	8002af8 <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	429a      	cmp	r2, r3
 8009342:	d803      	bhi.n	800934c <HAL_SPI_Transmit+0x348>
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934a:	d102      	bne.n	8009352 <HAL_SPI_Transmit+0x34e>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d114      	bne.n	800937c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 fab6 	bl	80098c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800935e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e02c      	b.n	80093d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009382:	b29b      	uxth	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	f47f af79 	bne.w	800927c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2200      	movs	r2, #0
 8009392:	2108      	movs	r1, #8
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 fb35 	bl	8009a04 <SPI_WaitOnFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d007      	beq.n	80093b0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093a6:	f043 0220 	orr.w	r2, r3, #32
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 fa87 	bl	80098c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e000      	b.n	80093d6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80093d4:	2300      	movs	r3, #0
  }
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop

080093e0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	603b      	str	r3, [r7, #0]
 80093ec:	4613      	mov	r3, r2
 80093ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	3301      	adds	r3, #1
 80093fa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3330      	adds	r3, #48	@ 0x30
 8009402:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009404:	f7f9 fb78 	bl	8002af8 <HAL_GetTick>
 8009408:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009410:	b2db      	uxtb	r3, r3
 8009412:	2b01      	cmp	r3, #1
 8009414:	d001      	beq.n	800941a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8009416:	2302      	movs	r3, #2
 8009418:	e250      	b.n	80098bc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <HAL_SPI_Receive+0x46>
 8009420:	88fb      	ldrh	r3, [r7, #6]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e248      	b.n	80098bc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009430:	2b01      	cmp	r3, #1
 8009432:	d101      	bne.n	8009438 <HAL_SPI_Receive+0x58>
 8009434:	2302      	movs	r3, #2
 8009436:	e241      	b.n	80098bc <HAL_SPI_Receive+0x4dc>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2204      	movs	r2, #4
 8009444:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	88fa      	ldrh	r2, [r7, #6]
 800945a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	88fa      	ldrh	r2, [r7, #6]
 8009462:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009490:	d108      	bne.n	80094a4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	e009      	b.n	80094b8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80094b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	4b95      	ldr	r3, [pc, #596]	@ (8009714 <HAL_SPI_Receive+0x334>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	88f9      	ldrh	r1, [r7, #6]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	6812      	ldr	r2, [r2, #0]
 80094c8:	430b      	orrs	r3, r1
 80094ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0201 	orr.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094e4:	d107      	bne.n	80094f6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	2b0f      	cmp	r3, #15
 80094fc:	d96c      	bls.n	80095d8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80094fe:	e064      	b.n	80095ca <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b01      	cmp	r3, #1
 8009514:	d114      	bne.n	8009540 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800951e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009520:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009526:	1d1a      	adds	r2, r3, #4
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009532:	b29b      	uxth	r3, r3
 8009534:	3b01      	subs	r3, #1
 8009536:	b29a      	uxth	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800953e:	e044      	b.n	80095ca <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009546:	b29b      	uxth	r3, r3
 8009548:	8bfa      	ldrh	r2, [r7, #30]
 800954a:	429a      	cmp	r2, r3
 800954c:	d919      	bls.n	8009582 <HAL_SPI_Receive+0x1a2>
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d014      	beq.n	8009582 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009560:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009562:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009568:	1d1a      	adds	r2, r3, #4
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009574:	b29b      	uxth	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009580:	e023      	b.n	80095ca <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009582:	f7f9 fab9 	bl	8002af8 <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	429a      	cmp	r2, r3
 8009590:	d803      	bhi.n	800959a <HAL_SPI_Receive+0x1ba>
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009598:	d102      	bne.n	80095a0 <HAL_SPI_Receive+0x1c0>
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d114      	bne.n	80095ca <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f000 f98f 	bl	80098c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e178      	b.n	80098bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d194      	bne.n	8009500 <HAL_SPI_Receive+0x120>
 80095d6:	e15e      	b.n	8009896 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	2b07      	cmp	r3, #7
 80095de:	f240 8153 	bls.w	8009888 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80095e2:	e08f      	b.n	8009704 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d114      	bne.n	8009624 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	8812      	ldrh	r2, [r2, #0]
 8009602:	b292      	uxth	r2, r2
 8009604:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800960a:	1c9a      	adds	r2, r3, #2
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009616:	b29b      	uxth	r3, r3
 8009618:	3b01      	subs	r3, #1
 800961a:	b29a      	uxth	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009622:	e06f      	b.n	8009704 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800962a:	b29b      	uxth	r3, r3
 800962c:	8bfa      	ldrh	r2, [r7, #30]
 800962e:	429a      	cmp	r2, r3
 8009630:	d924      	bls.n	800967c <HAL_SPI_Receive+0x29c>
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d01f      	beq.n	800967c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009640:	69ba      	ldr	r2, [r7, #24]
 8009642:	8812      	ldrh	r2, [r2, #0]
 8009644:	b292      	uxth	r2, r2
 8009646:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964c:	1c9a      	adds	r2, r3, #2
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009656:	69ba      	ldr	r2, [r7, #24]
 8009658:	8812      	ldrh	r2, [r2, #0]
 800965a:	b292      	uxth	r2, r2
 800965c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009662:	1c9a      	adds	r2, r3, #2
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800966e:	b29b      	uxth	r3, r3
 8009670:	3b02      	subs	r3, #2
 8009672:	b29a      	uxth	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800967a:	e043      	b.n	8009704 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009682:	b29b      	uxth	r3, r3
 8009684:	2b01      	cmp	r3, #1
 8009686:	d119      	bne.n	80096bc <HAL_SPI_Receive+0x2dc>
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d014      	beq.n	80096bc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	8812      	ldrh	r2, [r2, #0]
 800969a:	b292      	uxth	r2, r2
 800969c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096a2:	1c9a      	adds	r2, r3, #2
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	3b01      	subs	r3, #1
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80096ba:	e023      	b.n	8009704 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096bc:	f7f9 fa1c 	bl	8002af8 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d803      	bhi.n	80096d4 <HAL_SPI_Receive+0x2f4>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d2:	d102      	bne.n	80096da <HAL_SPI_Receive+0x2fa>
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d114      	bne.n	8009704 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f8f2 	bl	80098c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e0db      	b.n	80098bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800970a:	b29b      	uxth	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	f47f af69 	bne.w	80095e4 <HAL_SPI_Receive+0x204>
 8009712:	e0c0      	b.n	8009896 <HAL_SPI_Receive+0x4b6>
 8009714:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b01      	cmp	r3, #1
 800972c:	d117      	bne.n	800975e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800973a:	7812      	ldrb	r2, [r2, #0]
 800973c:	b2d2      	uxtb	r2, r2
 800973e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009750:	b29b      	uxth	r3, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	b29a      	uxth	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800975c:	e094      	b.n	8009888 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009764:	b29b      	uxth	r3, r3
 8009766:	8bfa      	ldrh	r2, [r7, #30]
 8009768:	429a      	cmp	r2, r3
 800976a:	d946      	bls.n	80097fa <HAL_SPI_Receive+0x41a>
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d041      	beq.n	80097fa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009782:	7812      	ldrb	r2, [r2, #0]
 8009784:	b2d2      	uxtb	r2, r2
 8009786:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800979e:	7812      	ldrb	r2, [r2, #0]
 80097a0:	b2d2      	uxtb	r2, r2
 80097a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ba:	7812      	ldrb	r2, [r2, #0]
 80097bc:	b2d2      	uxtb	r2, r2
 80097be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097d6:	7812      	ldrb	r2, [r2, #0]
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	3b04      	subs	r3, #4
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80097f8:	e046      	b.n	8009888 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009800:	b29b      	uxth	r3, r3
 8009802:	2b03      	cmp	r3, #3
 8009804:	d81c      	bhi.n	8009840 <HAL_SPI_Receive+0x460>
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d017      	beq.n	8009840 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800981c:	7812      	ldrb	r2, [r2, #0]
 800981e:	b2d2      	uxtb	r2, r2
 8009820:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009832:	b29b      	uxth	r3, r3
 8009834:	3b01      	subs	r3, #1
 8009836:	b29a      	uxth	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800983e:	e023      	b.n	8009888 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009840:	f7f9 f95a 	bl	8002af8 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	429a      	cmp	r2, r3
 800984e:	d803      	bhi.n	8009858 <HAL_SPI_Receive+0x478>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009856:	d102      	bne.n	800985e <HAL_SPI_Receive+0x47e>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d114      	bne.n	8009888 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 f830 	bl	80098c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800986a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e019      	b.n	80098bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800988e:	b29b      	uxth	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	f47f af41 	bne.w	8009718 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f000 f814 	bl	80098c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e000      	b.n	80098bc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80098ba:	2300      	movs	r3, #0
  }
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3720      	adds	r7, #32
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	699a      	ldr	r2, [r3, #24]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 0208 	orr.w	r2, r2, #8
 80098e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699a      	ldr	r2, [r3, #24]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0210 	orr.w	r2, r2, #16
 80098f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f022 0201 	bic.w	r2, r2, #1
 8009902:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6919      	ldr	r1, [r3, #16]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	4b3c      	ldr	r3, [pc, #240]	@ (8009a00 <SPI_CloseTransfer+0x13c>)
 8009910:	400b      	ands	r3, r1
 8009912:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009922:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b04      	cmp	r3, #4
 800992e:	d014      	beq.n	800995a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00f      	beq.n	800995a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009940:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	699a      	ldr	r2, [r3, #24]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 0220 	orr.w	r2, r2, #32
 8009958:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b03      	cmp	r3, #3
 8009964:	d014      	beq.n	8009990 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00f      	beq.n	8009990 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009976:	f043 0204 	orr.w	r2, r3, #4
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699a      	ldr	r2, [r3, #24]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800998e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00f      	beq.n	80099ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099a0:	f043 0201 	orr.w	r2, r3, #1
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	699a      	ldr	r2, [r3, #24]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00f      	beq.n	80099e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099ca:	f043 0208 	orr.w	r2, r3, #8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	699a      	ldr	r2, [r3, #24]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80099f4:	bf00      	nop
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	fffffc90 	.word	0xfffffc90

08009a04 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	4613      	mov	r3, r2
 8009a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009a14:	e010      	b.n	8009a38 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a16:	f7f9 f86f 	bl	8002af8 <HAL_GetTick>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d803      	bhi.n	8009a2e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2c:	d102      	bne.n	8009a34 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e00f      	b.n	8009a58 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	695a      	ldr	r2, [r3, #20]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	4013      	ands	r3, r2
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	bf0c      	ite	eq
 8009a48:	2301      	moveq	r3, #1
 8009a4a:	2300      	movne	r3, #0
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	461a      	mov	r2, r3
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d0df      	beq.n	8009a16 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a6c:	095b      	lsrs	r3, r3, #5
 8009a6e:	3301      	adds	r3, #1
 8009a70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	3301      	adds	r3, #1
 8009a78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	3307      	adds	r3, #7
 8009a7e:	08db      	lsrs	r3, r3, #3
 8009a80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	fb02 f303 	mul.w	r3, r2, r3
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e042      	b.n	8009b2e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d106      	bne.n	8009ac0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7f8 fc80 	bl	80023c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2224      	movs	r2, #36	@ 0x24
 8009ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 0201 	bic.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 fa6f 	bl	800afc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fc00 	bl	800a2ec <UART_SetConfig>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d101      	bne.n	8009af6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e01b      	b.n	8009b2e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f042 0201 	orr.w	r2, r2, #1
 8009b24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f001 faee 	bl	800b108 <UART_CheckIdleState>
 8009b2c:	4603      	mov	r3, r0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b0ba      	sub	sp, #232	@ 0xe8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	69db      	ldr	r3, [r3, #28]
 8009b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009b62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009b66:	4013      	ands	r3, r2
 8009b68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009b6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d11b      	bne.n	8009bac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d015      	beq.n	8009bac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b84:	f003 0320 	and.w	r3, r3, #32
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d105      	bne.n	8009b98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d009      	beq.n	8009bac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 8377 	beq.w	800a290 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	4798      	blx	r3
      }
      return;
 8009baa:	e371      	b.n	800a290 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 8123 	beq.w	8009dfc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009bb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009bba:	4b8d      	ldr	r3, [pc, #564]	@ (8009df0 <HAL_UART_IRQHandler+0x2b8>)
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d106      	bne.n	8009bd0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009bc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009bc6:	4b8b      	ldr	r3, [pc, #556]	@ (8009df4 <HAL_UART_IRQHandler+0x2bc>)
 8009bc8:	4013      	ands	r3, r2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f000 8116 	beq.w	8009dfc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bd4:	f003 0301 	and.w	r3, r3, #1
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d011      	beq.n	8009c00 <HAL_UART_IRQHandler+0xc8>
 8009bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2201      	movs	r2, #1
 8009bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf6:	f043 0201 	orr.w	r2, r3, #1
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d011      	beq.n	8009c30 <HAL_UART_IRQHandler+0xf8>
 8009c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00b      	beq.n	8009c30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c26:	f043 0204 	orr.w	r2, r3, #4
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d011      	beq.n	8009c60 <HAL_UART_IRQHandler+0x128>
 8009c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00b      	beq.n	8009c60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2204      	movs	r2, #4
 8009c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c56:	f043 0202 	orr.w	r2, r3, #2
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c64:	f003 0308 	and.w	r3, r3, #8
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d017      	beq.n	8009c9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c70:	f003 0320 	and.w	r3, r3, #32
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d105      	bne.n	8009c84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8009df0 <HAL_UART_IRQHandler+0x2b8>)
 8009c7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00b      	beq.n	8009c9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2208      	movs	r2, #8
 8009c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c92:	f043 0208 	orr.w	r2, r3, #8
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d012      	beq.n	8009cce <HAL_UART_IRQHandler+0x196>
 8009ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00c      	beq.n	8009cce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cc4:	f043 0220 	orr.w	r2, r3, #32
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 82dd 	beq.w	800a294 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cde:	f003 0320 	and.w	r3, r3, #32
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d013      	beq.n	8009d0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cea:	f003 0320 	and.w	r3, r3, #32
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d105      	bne.n	8009cfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d007      	beq.n	8009d0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d22:	2b40      	cmp	r3, #64	@ 0x40
 8009d24:	d005      	beq.n	8009d32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d054      	beq.n	8009ddc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 fb00 	bl	800b338 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d42:	2b40      	cmp	r3, #64	@ 0x40
 8009d44:	d146      	bne.n	8009dd4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1d9      	bne.n	8009d46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d017      	beq.n	8009dcc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da2:	4a15      	ldr	r2, [pc, #84]	@ (8009df8 <HAL_UART_IRQHandler+0x2c0>)
 8009da4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7f9 fb79 	bl	80034a4 <HAL_DMA_Abort_IT>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d019      	beq.n	8009dec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dca:	e00f      	b.n	8009dec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fa77 	bl	800a2c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd2:	e00b      	b.n	8009dec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fa73 	bl	800a2c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dda:	e007      	b.n	8009dec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fa6f 	bl	800a2c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009dea:	e253      	b.n	800a294 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dec:	bf00      	nop
    return;
 8009dee:	e251      	b.n	800a294 <HAL_UART_IRQHandler+0x75c>
 8009df0:	10000001 	.word	0x10000001
 8009df4:	04000120 	.word	0x04000120
 8009df8:	0800b405 	.word	0x0800b405

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	f040 81e7 	bne.w	800a1d4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e0a:	f003 0310 	and.w	r3, r3, #16
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 81e0 	beq.w	800a1d4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e18:	f003 0310 	and.w	r3, r3, #16
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 81d9 	beq.w	800a1d4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2210      	movs	r2, #16
 8009e28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e34:	2b40      	cmp	r3, #64	@ 0x40
 8009e36:	f040 8151 	bne.w	800a0dc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a96      	ldr	r2, [pc, #600]	@ (800a09c <HAL_UART_IRQHandler+0x564>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d068      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a93      	ldr	r2, [pc, #588]	@ (800a0a0 <HAL_UART_IRQHandler+0x568>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d061      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a91      	ldr	r2, [pc, #580]	@ (800a0a4 <HAL_UART_IRQHandler+0x56c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d05a      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a8e      	ldr	r2, [pc, #568]	@ (800a0a8 <HAL_UART_IRQHandler+0x570>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d053      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a8c      	ldr	r2, [pc, #560]	@ (800a0ac <HAL_UART_IRQHandler+0x574>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d04c      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a89      	ldr	r2, [pc, #548]	@ (800a0b0 <HAL_UART_IRQHandler+0x578>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d045      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a87      	ldr	r2, [pc, #540]	@ (800a0b4 <HAL_UART_IRQHandler+0x57c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d03e      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a84      	ldr	r2, [pc, #528]	@ (800a0b8 <HAL_UART_IRQHandler+0x580>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d037      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a82      	ldr	r2, [pc, #520]	@ (800a0bc <HAL_UART_IRQHandler+0x584>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d030      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a7f      	ldr	r2, [pc, #508]	@ (800a0c0 <HAL_UART_IRQHandler+0x588>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d029      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a7d      	ldr	r2, [pc, #500]	@ (800a0c4 <HAL_UART_IRQHandler+0x58c>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d022      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a7a      	ldr	r2, [pc, #488]	@ (800a0c8 <HAL_UART_IRQHandler+0x590>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d01b      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a78      	ldr	r2, [pc, #480]	@ (800a0cc <HAL_UART_IRQHandler+0x594>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d014      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a75      	ldr	r2, [pc, #468]	@ (800a0d0 <HAL_UART_IRQHandler+0x598>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d00d      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a73      	ldr	r2, [pc, #460]	@ (800a0d4 <HAL_UART_IRQHandler+0x59c>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d006      	beq.n	8009f1a <HAL_UART_IRQHandler+0x3e2>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a70      	ldr	r2, [pc, #448]	@ (800a0d8 <HAL_UART_IRQHandler+0x5a0>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d106      	bne.n	8009f28 <HAL_UART_IRQHandler+0x3f0>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	e005      	b.n	8009f34 <HAL_UART_IRQHandler+0x3fc>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 81ab 	beq.w	800a298 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	f080 81a3 	bcs.w	800a298 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f68:	f000 8087 	beq.w	800a07a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f78:	e853 3f00 	ldrex	r3, [r3]
 8009f7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f9a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009fa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009fa6:	e841 2300 	strex	r3, r2, [r1]
 8009faa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1da      	bne.n	8009f6c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	3308      	adds	r3, #8
 8009fbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009fc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fc8:	f023 0301 	bic.w	r3, r3, #1
 8009fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009fda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009fde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009fe2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009fe6:	e841 2300 	strex	r3, r2, [r1]
 8009fea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009fec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1e1      	bne.n	8009fb6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ffc:	e853 3f00 	ldrex	r3, [r3]
 800a000:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3308      	adds	r3, #8
 800a012:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a016:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a018:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a01c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a01e:	e841 2300 	strex	r3, r2, [r1]
 800a022:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1e3      	bne.n	8009ff2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2220      	movs	r2, #32
 800a02e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a040:	e853 3f00 	ldrex	r3, [r3]
 800a044:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a048:	f023 0310 	bic.w	r3, r3, #16
 800a04c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a05a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a05c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a060:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a062:	e841 2300 	strex	r3, r2, [r1]
 800a066:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1e4      	bne.n	800a038 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a074:	4618      	mov	r0, r3
 800a076:	f7f8 fef7 	bl	8002e68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2202      	movs	r2, #2
 800a07e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	b29b      	uxth	r3, r3
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f91d 	bl	800a2d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a09a:	e0fd      	b.n	800a298 <HAL_UART_IRQHandler+0x760>
 800a09c:	40020010 	.word	0x40020010
 800a0a0:	40020028 	.word	0x40020028
 800a0a4:	40020040 	.word	0x40020040
 800a0a8:	40020058 	.word	0x40020058
 800a0ac:	40020070 	.word	0x40020070
 800a0b0:	40020088 	.word	0x40020088
 800a0b4:	400200a0 	.word	0x400200a0
 800a0b8:	400200b8 	.word	0x400200b8
 800a0bc:	40020410 	.word	0x40020410
 800a0c0:	40020428 	.word	0x40020428
 800a0c4:	40020440 	.word	0x40020440
 800a0c8:	40020458 	.word	0x40020458
 800a0cc:	40020470 	.word	0x40020470
 800a0d0:	40020488 	.word	0x40020488
 800a0d4:	400204a0 	.word	0x400204a0
 800a0d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 80cf 	beq.w	800a29c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a0fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 80ca 	beq.w	800a29c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a11c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	461a      	mov	r2, r3
 800a126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a12a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a12c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a130:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a132:	e841 2300 	strex	r3, r2, [r1]
 800a136:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1e4      	bne.n	800a108 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3308      	adds	r3, #8
 800a144:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a148:	e853 3f00 	ldrex	r3, [r3]
 800a14c:	623b      	str	r3, [r7, #32]
   return(result);
 800a14e:	6a3a      	ldr	r2, [r7, #32]
 800a150:	4b55      	ldr	r3, [pc, #340]	@ (800a2a8 <HAL_UART_IRQHandler+0x770>)
 800a152:	4013      	ands	r3, r2
 800a154:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3308      	adds	r3, #8
 800a15e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a162:	633a      	str	r2, [r7, #48]	@ 0x30
 800a164:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a16a:	e841 2300 	strex	r3, r2, [r1]
 800a16e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1e3      	bne.n	800a13e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2220      	movs	r2, #32
 800a17a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	e853 3f00 	ldrex	r3, [r3]
 800a196:	60fb      	str	r3, [r7, #12]
   return(result);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 0310 	bic.w	r3, r3, #16
 800a19e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a1ac:	61fb      	str	r3, [r7, #28]
 800a1ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	69b9      	ldr	r1, [r7, #24]
 800a1b2:	69fa      	ldr	r2, [r7, #28]
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e4      	bne.n	800a18a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f881 	bl	800a2d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1d2:	e063      	b.n	800a29c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00e      	beq.n	800a1fe <HAL_UART_IRQHandler+0x6c6>
 800a1e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d008      	beq.n	800a1fe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a1f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f001 f945 	bl	800b486 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1fc:	e051      	b.n	800a2a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a206:	2b00      	cmp	r3, #0
 800a208:	d014      	beq.n	800a234 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a20a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a20e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a212:	2b00      	cmp	r3, #0
 800a214:	d105      	bne.n	800a222 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a21a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d008      	beq.n	800a234 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a226:	2b00      	cmp	r3, #0
 800a228:	d03a      	beq.n	800a2a0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	4798      	blx	r3
    }
    return;
 800a232:	e035      	b.n	800a2a0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d009      	beq.n	800a254 <HAL_UART_IRQHandler+0x71c>
 800a240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f001 f8ef 	bl	800b430 <UART_EndTransmit_IT>
    return;
 800a252:	e026      	b.n	800a2a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d009      	beq.n	800a274 <HAL_UART_IRQHandler+0x73c>
 800a260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a264:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 f91e 	bl	800b4ae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a272:	e016      	b.n	800a2a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a278:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d010      	beq.n	800a2a2 <HAL_UART_IRQHandler+0x76a>
 800a280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a284:	2b00      	cmp	r3, #0
 800a286:	da0c      	bge.n	800a2a2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 f906 	bl	800b49a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a28e:	e008      	b.n	800a2a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800a290:	bf00      	nop
 800a292:	e006      	b.n	800a2a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800a294:	bf00      	nop
 800a296:	e004      	b.n	800a2a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800a298:	bf00      	nop
 800a29a:	e002      	b.n	800a2a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800a29c:	bf00      	nop
 800a29e:	e000      	b.n	800a2a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800a2a0:	bf00      	nop
  }
}
 800a2a2:	37e8      	adds	r7, #232	@ 0xe8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	effffffe 	.word	0xeffffffe

0800a2ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2f0:	b092      	sub	sp, #72	@ 0x48
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	431a      	orrs	r2, r3
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	431a      	orrs	r2, r3
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	4313      	orrs	r3, r2
 800a312:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	4bbe      	ldr	r3, [pc, #760]	@ (800a614 <UART_SetConfig+0x328>)
 800a31c:	4013      	ands	r3, r2
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	6812      	ldr	r2, [r2, #0]
 800a322:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a324:	430b      	orrs	r3, r1
 800a326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4ab3      	ldr	r2, [pc, #716]	@ (800a618 <UART_SetConfig+0x32c>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d004      	beq.n	800a358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a354:	4313      	orrs	r3, r2
 800a356:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	4baf      	ldr	r3, [pc, #700]	@ (800a61c <UART_SetConfig+0x330>)
 800a360:	4013      	ands	r3, r2
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	6812      	ldr	r2, [r2, #0]
 800a366:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a368:	430b      	orrs	r3, r1
 800a36a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a372:	f023 010f 	bic.w	r1, r3, #15
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4aa6      	ldr	r2, [pc, #664]	@ (800a620 <UART_SetConfig+0x334>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d177      	bne.n	800a47c <UART_SetConfig+0x190>
 800a38c:	4ba5      	ldr	r3, [pc, #660]	@ (800a624 <UART_SetConfig+0x338>)
 800a38e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a390:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a394:	2b28      	cmp	r3, #40	@ 0x28
 800a396:	d86d      	bhi.n	800a474 <UART_SetConfig+0x188>
 800a398:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a0 <UART_SetConfig+0xb4>)
 800a39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39e:	bf00      	nop
 800a3a0:	0800a445 	.word	0x0800a445
 800a3a4:	0800a475 	.word	0x0800a475
 800a3a8:	0800a475 	.word	0x0800a475
 800a3ac:	0800a475 	.word	0x0800a475
 800a3b0:	0800a475 	.word	0x0800a475
 800a3b4:	0800a475 	.word	0x0800a475
 800a3b8:	0800a475 	.word	0x0800a475
 800a3bc:	0800a475 	.word	0x0800a475
 800a3c0:	0800a44d 	.word	0x0800a44d
 800a3c4:	0800a475 	.word	0x0800a475
 800a3c8:	0800a475 	.word	0x0800a475
 800a3cc:	0800a475 	.word	0x0800a475
 800a3d0:	0800a475 	.word	0x0800a475
 800a3d4:	0800a475 	.word	0x0800a475
 800a3d8:	0800a475 	.word	0x0800a475
 800a3dc:	0800a475 	.word	0x0800a475
 800a3e0:	0800a455 	.word	0x0800a455
 800a3e4:	0800a475 	.word	0x0800a475
 800a3e8:	0800a475 	.word	0x0800a475
 800a3ec:	0800a475 	.word	0x0800a475
 800a3f0:	0800a475 	.word	0x0800a475
 800a3f4:	0800a475 	.word	0x0800a475
 800a3f8:	0800a475 	.word	0x0800a475
 800a3fc:	0800a475 	.word	0x0800a475
 800a400:	0800a45d 	.word	0x0800a45d
 800a404:	0800a475 	.word	0x0800a475
 800a408:	0800a475 	.word	0x0800a475
 800a40c:	0800a475 	.word	0x0800a475
 800a410:	0800a475 	.word	0x0800a475
 800a414:	0800a475 	.word	0x0800a475
 800a418:	0800a475 	.word	0x0800a475
 800a41c:	0800a475 	.word	0x0800a475
 800a420:	0800a465 	.word	0x0800a465
 800a424:	0800a475 	.word	0x0800a475
 800a428:	0800a475 	.word	0x0800a475
 800a42c:	0800a475 	.word	0x0800a475
 800a430:	0800a475 	.word	0x0800a475
 800a434:	0800a475 	.word	0x0800a475
 800a438:	0800a475 	.word	0x0800a475
 800a43c:	0800a475 	.word	0x0800a475
 800a440:	0800a46d 	.word	0x0800a46d
 800a444:	2301      	movs	r3, #1
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e326      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a44c:	2304      	movs	r3, #4
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e322      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a454:	2308      	movs	r3, #8
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e31e      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a45c:	2310      	movs	r3, #16
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a462:	e31a      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a464:	2320      	movs	r3, #32
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46a:	e316      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a46c:	2340      	movs	r3, #64	@ 0x40
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a472:	e312      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a474:	2380      	movs	r3, #128	@ 0x80
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47a:	e30e      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a69      	ldr	r2, [pc, #420]	@ (800a628 <UART_SetConfig+0x33c>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d130      	bne.n	800a4e8 <UART_SetConfig+0x1fc>
 800a486:	4b67      	ldr	r3, [pc, #412]	@ (800a624 <UART_SetConfig+0x338>)
 800a488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	2b05      	cmp	r3, #5
 800a490:	d826      	bhi.n	800a4e0 <UART_SetConfig+0x1f4>
 800a492:	a201      	add	r2, pc, #4	@ (adr r2, 800a498 <UART_SetConfig+0x1ac>)
 800a494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a498:	0800a4b1 	.word	0x0800a4b1
 800a49c:	0800a4b9 	.word	0x0800a4b9
 800a4a0:	0800a4c1 	.word	0x0800a4c1
 800a4a4:	0800a4c9 	.word	0x0800a4c9
 800a4a8:	0800a4d1 	.word	0x0800a4d1
 800a4ac:	0800a4d9 	.word	0x0800a4d9
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e2f0      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4be:	e2ec      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a4c0:	2308      	movs	r3, #8
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c6:	e2e8      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a4c8:	2310      	movs	r3, #16
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ce:	e2e4      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a4d0:	2320      	movs	r3, #32
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d6:	e2e0      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a4d8:	2340      	movs	r3, #64	@ 0x40
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4de:	e2dc      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a4e0:	2380      	movs	r3, #128	@ 0x80
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e6:	e2d8      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a4f      	ldr	r2, [pc, #316]	@ (800a62c <UART_SetConfig+0x340>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d130      	bne.n	800a554 <UART_SetConfig+0x268>
 800a4f2:	4b4c      	ldr	r3, [pc, #304]	@ (800a624 <UART_SetConfig+0x338>)
 800a4f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b05      	cmp	r3, #5
 800a4fc:	d826      	bhi.n	800a54c <UART_SetConfig+0x260>
 800a4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a504 <UART_SetConfig+0x218>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a51d 	.word	0x0800a51d
 800a508:	0800a525 	.word	0x0800a525
 800a50c:	0800a52d 	.word	0x0800a52d
 800a510:	0800a535 	.word	0x0800a535
 800a514:	0800a53d 	.word	0x0800a53d
 800a518:	0800a545 	.word	0x0800a545
 800a51c:	2300      	movs	r3, #0
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a522:	e2ba      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a524:	2304      	movs	r3, #4
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52a:	e2b6      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a52c:	2308      	movs	r3, #8
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a532:	e2b2      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a534:	2310      	movs	r3, #16
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53a:	e2ae      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a53c:	2320      	movs	r3, #32
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a542:	e2aa      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a544:	2340      	movs	r3, #64	@ 0x40
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54a:	e2a6      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a54c:	2380      	movs	r3, #128	@ 0x80
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a552:	e2a2      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a35      	ldr	r2, [pc, #212]	@ (800a630 <UART_SetConfig+0x344>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d130      	bne.n	800a5c0 <UART_SetConfig+0x2d4>
 800a55e:	4b31      	ldr	r3, [pc, #196]	@ (800a624 <UART_SetConfig+0x338>)
 800a560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a562:	f003 0307 	and.w	r3, r3, #7
 800a566:	2b05      	cmp	r3, #5
 800a568:	d826      	bhi.n	800a5b8 <UART_SetConfig+0x2cc>
 800a56a:	a201      	add	r2, pc, #4	@ (adr r2, 800a570 <UART_SetConfig+0x284>)
 800a56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a570:	0800a589 	.word	0x0800a589
 800a574:	0800a591 	.word	0x0800a591
 800a578:	0800a599 	.word	0x0800a599
 800a57c:	0800a5a1 	.word	0x0800a5a1
 800a580:	0800a5a9 	.word	0x0800a5a9
 800a584:	0800a5b1 	.word	0x0800a5b1
 800a588:	2300      	movs	r3, #0
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e284      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a590:	2304      	movs	r3, #4
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e280      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a598:	2308      	movs	r3, #8
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e27c      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a5a0:	2310      	movs	r3, #16
 800a5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a6:	e278      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a5a8:	2320      	movs	r3, #32
 800a5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ae:	e274      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a5b0:	2340      	movs	r3, #64	@ 0x40
 800a5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b6:	e270      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a5b8:	2380      	movs	r3, #128	@ 0x80
 800a5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5be:	e26c      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a634 <UART_SetConfig+0x348>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d142      	bne.n	800a650 <UART_SetConfig+0x364>
 800a5ca:	4b16      	ldr	r3, [pc, #88]	@ (800a624 <UART_SetConfig+0x338>)
 800a5cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ce:	f003 0307 	and.w	r3, r3, #7
 800a5d2:	2b05      	cmp	r3, #5
 800a5d4:	d838      	bhi.n	800a648 <UART_SetConfig+0x35c>
 800a5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5dc <UART_SetConfig+0x2f0>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a5f5 	.word	0x0800a5f5
 800a5e0:	0800a5fd 	.word	0x0800a5fd
 800a5e4:	0800a605 	.word	0x0800a605
 800a5e8:	0800a60d 	.word	0x0800a60d
 800a5ec:	0800a639 	.word	0x0800a639
 800a5f0:	0800a641 	.word	0x0800a641
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fa:	e24e      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a602:	e24a      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a604:	2308      	movs	r3, #8
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60a:	e246      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a60c:	2310      	movs	r3, #16
 800a60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a612:	e242      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a614:	cfff69f3 	.word	0xcfff69f3
 800a618:	58000c00 	.word	0x58000c00
 800a61c:	11fff4ff 	.word	0x11fff4ff
 800a620:	40011000 	.word	0x40011000
 800a624:	58024400 	.word	0x58024400
 800a628:	40004400 	.word	0x40004400
 800a62c:	40004800 	.word	0x40004800
 800a630:	40004c00 	.word	0x40004c00
 800a634:	40005000 	.word	0x40005000
 800a638:	2320      	movs	r3, #32
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63e:	e22c      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a640:	2340      	movs	r3, #64	@ 0x40
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a646:	e228      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a648:	2380      	movs	r3, #128	@ 0x80
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64e:	e224      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4ab1      	ldr	r2, [pc, #708]	@ (800a91c <UART_SetConfig+0x630>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d176      	bne.n	800a748 <UART_SetConfig+0x45c>
 800a65a:	4bb1      	ldr	r3, [pc, #708]	@ (800a920 <UART_SetConfig+0x634>)
 800a65c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a65e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a662:	2b28      	cmp	r3, #40	@ 0x28
 800a664:	d86c      	bhi.n	800a740 <UART_SetConfig+0x454>
 800a666:	a201      	add	r2, pc, #4	@ (adr r2, 800a66c <UART_SetConfig+0x380>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a711 	.word	0x0800a711
 800a670:	0800a741 	.word	0x0800a741
 800a674:	0800a741 	.word	0x0800a741
 800a678:	0800a741 	.word	0x0800a741
 800a67c:	0800a741 	.word	0x0800a741
 800a680:	0800a741 	.word	0x0800a741
 800a684:	0800a741 	.word	0x0800a741
 800a688:	0800a741 	.word	0x0800a741
 800a68c:	0800a719 	.word	0x0800a719
 800a690:	0800a741 	.word	0x0800a741
 800a694:	0800a741 	.word	0x0800a741
 800a698:	0800a741 	.word	0x0800a741
 800a69c:	0800a741 	.word	0x0800a741
 800a6a0:	0800a741 	.word	0x0800a741
 800a6a4:	0800a741 	.word	0x0800a741
 800a6a8:	0800a741 	.word	0x0800a741
 800a6ac:	0800a721 	.word	0x0800a721
 800a6b0:	0800a741 	.word	0x0800a741
 800a6b4:	0800a741 	.word	0x0800a741
 800a6b8:	0800a741 	.word	0x0800a741
 800a6bc:	0800a741 	.word	0x0800a741
 800a6c0:	0800a741 	.word	0x0800a741
 800a6c4:	0800a741 	.word	0x0800a741
 800a6c8:	0800a741 	.word	0x0800a741
 800a6cc:	0800a729 	.word	0x0800a729
 800a6d0:	0800a741 	.word	0x0800a741
 800a6d4:	0800a741 	.word	0x0800a741
 800a6d8:	0800a741 	.word	0x0800a741
 800a6dc:	0800a741 	.word	0x0800a741
 800a6e0:	0800a741 	.word	0x0800a741
 800a6e4:	0800a741 	.word	0x0800a741
 800a6e8:	0800a741 	.word	0x0800a741
 800a6ec:	0800a731 	.word	0x0800a731
 800a6f0:	0800a741 	.word	0x0800a741
 800a6f4:	0800a741 	.word	0x0800a741
 800a6f8:	0800a741 	.word	0x0800a741
 800a6fc:	0800a741 	.word	0x0800a741
 800a700:	0800a741 	.word	0x0800a741
 800a704:	0800a741 	.word	0x0800a741
 800a708:	0800a741 	.word	0x0800a741
 800a70c:	0800a739 	.word	0x0800a739
 800a710:	2301      	movs	r3, #1
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a716:	e1c0      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a718:	2304      	movs	r3, #4
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71e:	e1bc      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a720:	2308      	movs	r3, #8
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a726:	e1b8      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a728:	2310      	movs	r3, #16
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72e:	e1b4      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a730:	2320      	movs	r3, #32
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a736:	e1b0      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a738:	2340      	movs	r3, #64	@ 0x40
 800a73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73e:	e1ac      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a740:	2380      	movs	r3, #128	@ 0x80
 800a742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a746:	e1a8      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a75      	ldr	r2, [pc, #468]	@ (800a924 <UART_SetConfig+0x638>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d130      	bne.n	800a7b4 <UART_SetConfig+0x4c8>
 800a752:	4b73      	ldr	r3, [pc, #460]	@ (800a920 <UART_SetConfig+0x634>)
 800a754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	2b05      	cmp	r3, #5
 800a75c:	d826      	bhi.n	800a7ac <UART_SetConfig+0x4c0>
 800a75e:	a201      	add	r2, pc, #4	@ (adr r2, 800a764 <UART_SetConfig+0x478>)
 800a760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a764:	0800a77d 	.word	0x0800a77d
 800a768:	0800a785 	.word	0x0800a785
 800a76c:	0800a78d 	.word	0x0800a78d
 800a770:	0800a795 	.word	0x0800a795
 800a774:	0800a79d 	.word	0x0800a79d
 800a778:	0800a7a5 	.word	0x0800a7a5
 800a77c:	2300      	movs	r3, #0
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a782:	e18a      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a784:	2304      	movs	r3, #4
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78a:	e186      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a78c:	2308      	movs	r3, #8
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a792:	e182      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a794:	2310      	movs	r3, #16
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79a:	e17e      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a79c:	2320      	movs	r3, #32
 800a79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a2:	e17a      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a7a4:	2340      	movs	r3, #64	@ 0x40
 800a7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7aa:	e176      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a7ac:	2380      	movs	r3, #128	@ 0x80
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b2:	e172      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a5b      	ldr	r2, [pc, #364]	@ (800a928 <UART_SetConfig+0x63c>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d130      	bne.n	800a820 <UART_SetConfig+0x534>
 800a7be:	4b58      	ldr	r3, [pc, #352]	@ (800a920 <UART_SetConfig+0x634>)
 800a7c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7c2:	f003 0307 	and.w	r3, r3, #7
 800a7c6:	2b05      	cmp	r3, #5
 800a7c8:	d826      	bhi.n	800a818 <UART_SetConfig+0x52c>
 800a7ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d0 <UART_SetConfig+0x4e4>)
 800a7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d0:	0800a7e9 	.word	0x0800a7e9
 800a7d4:	0800a7f1 	.word	0x0800a7f1
 800a7d8:	0800a7f9 	.word	0x0800a7f9
 800a7dc:	0800a801 	.word	0x0800a801
 800a7e0:	0800a809 	.word	0x0800a809
 800a7e4:	0800a811 	.word	0x0800a811
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e154      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a7f0:	2304      	movs	r3, #4
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e150      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a7f8:	2308      	movs	r3, #8
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e14c      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a800:	2310      	movs	r3, #16
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a806:	e148      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a808:	2320      	movs	r3, #32
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80e:	e144      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a810:	2340      	movs	r3, #64	@ 0x40
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a816:	e140      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a818:	2380      	movs	r3, #128	@ 0x80
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81e:	e13c      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a41      	ldr	r2, [pc, #260]	@ (800a92c <UART_SetConfig+0x640>)
 800a826:	4293      	cmp	r3, r2
 800a828:	f040 8082 	bne.w	800a930 <UART_SetConfig+0x644>
 800a82c:	4b3c      	ldr	r3, [pc, #240]	@ (800a920 <UART_SetConfig+0x634>)
 800a82e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a830:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a834:	2b28      	cmp	r3, #40	@ 0x28
 800a836:	d86d      	bhi.n	800a914 <UART_SetConfig+0x628>
 800a838:	a201      	add	r2, pc, #4	@ (adr r2, 800a840 <UART_SetConfig+0x554>)
 800a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83e:	bf00      	nop
 800a840:	0800a8e5 	.word	0x0800a8e5
 800a844:	0800a915 	.word	0x0800a915
 800a848:	0800a915 	.word	0x0800a915
 800a84c:	0800a915 	.word	0x0800a915
 800a850:	0800a915 	.word	0x0800a915
 800a854:	0800a915 	.word	0x0800a915
 800a858:	0800a915 	.word	0x0800a915
 800a85c:	0800a915 	.word	0x0800a915
 800a860:	0800a8ed 	.word	0x0800a8ed
 800a864:	0800a915 	.word	0x0800a915
 800a868:	0800a915 	.word	0x0800a915
 800a86c:	0800a915 	.word	0x0800a915
 800a870:	0800a915 	.word	0x0800a915
 800a874:	0800a915 	.word	0x0800a915
 800a878:	0800a915 	.word	0x0800a915
 800a87c:	0800a915 	.word	0x0800a915
 800a880:	0800a8f5 	.word	0x0800a8f5
 800a884:	0800a915 	.word	0x0800a915
 800a888:	0800a915 	.word	0x0800a915
 800a88c:	0800a915 	.word	0x0800a915
 800a890:	0800a915 	.word	0x0800a915
 800a894:	0800a915 	.word	0x0800a915
 800a898:	0800a915 	.word	0x0800a915
 800a89c:	0800a915 	.word	0x0800a915
 800a8a0:	0800a8fd 	.word	0x0800a8fd
 800a8a4:	0800a915 	.word	0x0800a915
 800a8a8:	0800a915 	.word	0x0800a915
 800a8ac:	0800a915 	.word	0x0800a915
 800a8b0:	0800a915 	.word	0x0800a915
 800a8b4:	0800a915 	.word	0x0800a915
 800a8b8:	0800a915 	.word	0x0800a915
 800a8bc:	0800a915 	.word	0x0800a915
 800a8c0:	0800a905 	.word	0x0800a905
 800a8c4:	0800a915 	.word	0x0800a915
 800a8c8:	0800a915 	.word	0x0800a915
 800a8cc:	0800a915 	.word	0x0800a915
 800a8d0:	0800a915 	.word	0x0800a915
 800a8d4:	0800a915 	.word	0x0800a915
 800a8d8:	0800a915 	.word	0x0800a915
 800a8dc:	0800a915 	.word	0x0800a915
 800a8e0:	0800a90d 	.word	0x0800a90d
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ea:	e0d6      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a8ec:	2304      	movs	r3, #4
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f2:	e0d2      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a8f4:	2308      	movs	r3, #8
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fa:	e0ce      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a902:	e0ca      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a904:	2320      	movs	r3, #32
 800a906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90a:	e0c6      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a90c:	2340      	movs	r3, #64	@ 0x40
 800a90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a912:	e0c2      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a914:	2380      	movs	r3, #128	@ 0x80
 800a916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91a:	e0be      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a91c:	40011400 	.word	0x40011400
 800a920:	58024400 	.word	0x58024400
 800a924:	40007800 	.word	0x40007800
 800a928:	40007c00 	.word	0x40007c00
 800a92c:	40011800 	.word	0x40011800
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4aad      	ldr	r2, [pc, #692]	@ (800abec <UART_SetConfig+0x900>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d176      	bne.n	800aa28 <UART_SetConfig+0x73c>
 800a93a:	4bad      	ldr	r3, [pc, #692]	@ (800abf0 <UART_SetConfig+0x904>)
 800a93c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a93e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a942:	2b28      	cmp	r3, #40	@ 0x28
 800a944:	d86c      	bhi.n	800aa20 <UART_SetConfig+0x734>
 800a946:	a201      	add	r2, pc, #4	@ (adr r2, 800a94c <UART_SetConfig+0x660>)
 800a948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94c:	0800a9f1 	.word	0x0800a9f1
 800a950:	0800aa21 	.word	0x0800aa21
 800a954:	0800aa21 	.word	0x0800aa21
 800a958:	0800aa21 	.word	0x0800aa21
 800a95c:	0800aa21 	.word	0x0800aa21
 800a960:	0800aa21 	.word	0x0800aa21
 800a964:	0800aa21 	.word	0x0800aa21
 800a968:	0800aa21 	.word	0x0800aa21
 800a96c:	0800a9f9 	.word	0x0800a9f9
 800a970:	0800aa21 	.word	0x0800aa21
 800a974:	0800aa21 	.word	0x0800aa21
 800a978:	0800aa21 	.word	0x0800aa21
 800a97c:	0800aa21 	.word	0x0800aa21
 800a980:	0800aa21 	.word	0x0800aa21
 800a984:	0800aa21 	.word	0x0800aa21
 800a988:	0800aa21 	.word	0x0800aa21
 800a98c:	0800aa01 	.word	0x0800aa01
 800a990:	0800aa21 	.word	0x0800aa21
 800a994:	0800aa21 	.word	0x0800aa21
 800a998:	0800aa21 	.word	0x0800aa21
 800a99c:	0800aa21 	.word	0x0800aa21
 800a9a0:	0800aa21 	.word	0x0800aa21
 800a9a4:	0800aa21 	.word	0x0800aa21
 800a9a8:	0800aa21 	.word	0x0800aa21
 800a9ac:	0800aa09 	.word	0x0800aa09
 800a9b0:	0800aa21 	.word	0x0800aa21
 800a9b4:	0800aa21 	.word	0x0800aa21
 800a9b8:	0800aa21 	.word	0x0800aa21
 800a9bc:	0800aa21 	.word	0x0800aa21
 800a9c0:	0800aa21 	.word	0x0800aa21
 800a9c4:	0800aa21 	.word	0x0800aa21
 800a9c8:	0800aa21 	.word	0x0800aa21
 800a9cc:	0800aa11 	.word	0x0800aa11
 800a9d0:	0800aa21 	.word	0x0800aa21
 800a9d4:	0800aa21 	.word	0x0800aa21
 800a9d8:	0800aa21 	.word	0x0800aa21
 800a9dc:	0800aa21 	.word	0x0800aa21
 800a9e0:	0800aa21 	.word	0x0800aa21
 800a9e4:	0800aa21 	.word	0x0800aa21
 800a9e8:	0800aa21 	.word	0x0800aa21
 800a9ec:	0800aa19 	.word	0x0800aa19
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f6:	e050      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fe:	e04c      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa00:	2308      	movs	r3, #8
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa06:	e048      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa08:	2310      	movs	r3, #16
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa0e:	e044      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa10:	2320      	movs	r3, #32
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa16:	e040      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa18:	2340      	movs	r3, #64	@ 0x40
 800aa1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa1e:	e03c      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa20:	2380      	movs	r3, #128	@ 0x80
 800aa22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa26:	e038      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a71      	ldr	r2, [pc, #452]	@ (800abf4 <UART_SetConfig+0x908>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d130      	bne.n	800aa94 <UART_SetConfig+0x7a8>
 800aa32:	4b6f      	ldr	r3, [pc, #444]	@ (800abf0 <UART_SetConfig+0x904>)
 800aa34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	2b05      	cmp	r3, #5
 800aa3c:	d826      	bhi.n	800aa8c <UART_SetConfig+0x7a0>
 800aa3e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa44 <UART_SetConfig+0x758>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aa5d 	.word	0x0800aa5d
 800aa48:	0800aa65 	.word	0x0800aa65
 800aa4c:	0800aa6d 	.word	0x0800aa6d
 800aa50:	0800aa75 	.word	0x0800aa75
 800aa54:	0800aa7d 	.word	0x0800aa7d
 800aa58:	0800aa85 	.word	0x0800aa85
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa62:	e01a      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa64:	2304      	movs	r3, #4
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6a:	e016      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa6c:	2308      	movs	r3, #8
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa72:	e012      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa74:	2310      	movs	r3, #16
 800aa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa7a:	e00e      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa82:	e00a      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa84:	2340      	movs	r3, #64	@ 0x40
 800aa86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa8a:	e006      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa8c:	2380      	movs	r3, #128	@ 0x80
 800aa8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa92:	e002      	b.n	800aa9a <UART_SetConfig+0x7ae>
 800aa94:	2380      	movs	r3, #128	@ 0x80
 800aa96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a55      	ldr	r2, [pc, #340]	@ (800abf4 <UART_SetConfig+0x908>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	f040 80f8 	bne.w	800ac96 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aaa6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aaaa:	2b20      	cmp	r3, #32
 800aaac:	dc46      	bgt.n	800ab3c <UART_SetConfig+0x850>
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	db75      	blt.n	800ab9e <UART_SetConfig+0x8b2>
 800aab2:	3b02      	subs	r3, #2
 800aab4:	2b1e      	cmp	r3, #30
 800aab6:	d872      	bhi.n	800ab9e <UART_SetConfig+0x8b2>
 800aab8:	a201      	add	r2, pc, #4	@ (adr r2, 800aac0 <UART_SetConfig+0x7d4>)
 800aaba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabe:	bf00      	nop
 800aac0:	0800ab43 	.word	0x0800ab43
 800aac4:	0800ab9f 	.word	0x0800ab9f
 800aac8:	0800ab4b 	.word	0x0800ab4b
 800aacc:	0800ab9f 	.word	0x0800ab9f
 800aad0:	0800ab9f 	.word	0x0800ab9f
 800aad4:	0800ab9f 	.word	0x0800ab9f
 800aad8:	0800ab5b 	.word	0x0800ab5b
 800aadc:	0800ab9f 	.word	0x0800ab9f
 800aae0:	0800ab9f 	.word	0x0800ab9f
 800aae4:	0800ab9f 	.word	0x0800ab9f
 800aae8:	0800ab9f 	.word	0x0800ab9f
 800aaec:	0800ab9f 	.word	0x0800ab9f
 800aaf0:	0800ab9f 	.word	0x0800ab9f
 800aaf4:	0800ab9f 	.word	0x0800ab9f
 800aaf8:	0800ab6b 	.word	0x0800ab6b
 800aafc:	0800ab9f 	.word	0x0800ab9f
 800ab00:	0800ab9f 	.word	0x0800ab9f
 800ab04:	0800ab9f 	.word	0x0800ab9f
 800ab08:	0800ab9f 	.word	0x0800ab9f
 800ab0c:	0800ab9f 	.word	0x0800ab9f
 800ab10:	0800ab9f 	.word	0x0800ab9f
 800ab14:	0800ab9f 	.word	0x0800ab9f
 800ab18:	0800ab9f 	.word	0x0800ab9f
 800ab1c:	0800ab9f 	.word	0x0800ab9f
 800ab20:	0800ab9f 	.word	0x0800ab9f
 800ab24:	0800ab9f 	.word	0x0800ab9f
 800ab28:	0800ab9f 	.word	0x0800ab9f
 800ab2c:	0800ab9f 	.word	0x0800ab9f
 800ab30:	0800ab9f 	.word	0x0800ab9f
 800ab34:	0800ab9f 	.word	0x0800ab9f
 800ab38:	0800ab91 	.word	0x0800ab91
 800ab3c:	2b40      	cmp	r3, #64	@ 0x40
 800ab3e:	d02a      	beq.n	800ab96 <UART_SetConfig+0x8aa>
 800ab40:	e02d      	b.n	800ab9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab42:	f7fc f815 	bl	8006b70 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab48:	e02f      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fc f824 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab58:	e027      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab5a:	f107 0318 	add.w	r3, r7, #24
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fc f970 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab68:	e01f      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab6a:	4b21      	ldr	r3, [pc, #132]	@ (800abf0 <UART_SetConfig+0x904>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 0320 	and.w	r3, r3, #32
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d009      	beq.n	800ab8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab76:	4b1e      	ldr	r3, [pc, #120]	@ (800abf0 <UART_SetConfig+0x904>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	08db      	lsrs	r3, r3, #3
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	4a1d      	ldr	r2, [pc, #116]	@ (800abf8 <UART_SetConfig+0x90c>)
 800ab82:	fa22 f303 	lsr.w	r3, r2, r3
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab88:	e00f      	b.n	800abaa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ab8a:	4b1b      	ldr	r3, [pc, #108]	@ (800abf8 <UART_SetConfig+0x90c>)
 800ab8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8e:	e00c      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab90:	4b1a      	ldr	r3, [pc, #104]	@ (800abfc <UART_SetConfig+0x910>)
 800ab92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab94:	e009      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab9c:	e005      	b.n	800abaa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aba8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 81ee 	beq.w	800af8e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb6:	4a12      	ldr	r2, [pc, #72]	@ (800ac00 <UART_SetConfig+0x914>)
 800abb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abbc:	461a      	mov	r2, r3
 800abbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800abc4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	4613      	mov	r3, r2
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	4413      	add	r3, r2
 800abd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d305      	bcc.n	800abe2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abde:	429a      	cmp	r2, r3
 800abe0:	d910      	bls.n	800ac04 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800abe8:	e1d1      	b.n	800af8e <UART_SetConfig+0xca2>
 800abea:	bf00      	nop
 800abec:	40011c00 	.word	0x40011c00
 800abf0:	58024400 	.word	0x58024400
 800abf4:	58000c00 	.word	0x58000c00
 800abf8:	03d09000 	.word	0x03d09000
 800abfc:	003d0900 	.word	0x003d0900
 800ac00:	080123b8 	.word	0x080123b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac06:	2200      	movs	r2, #0
 800ac08:	60bb      	str	r3, [r7, #8]
 800ac0a:	60fa      	str	r2, [r7, #12]
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac10:	4ac0      	ldr	r2, [pc, #768]	@ (800af14 <UART_SetConfig+0xc28>)
 800ac12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	2200      	movs	r2, #0
 800ac1a:	603b      	str	r3, [r7, #0]
 800ac1c:	607a      	str	r2, [r7, #4]
 800ac1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac26:	f7f5 fd87 	bl	8000738 <__aeabi_uldivmod>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4619      	mov	r1, r3
 800ac32:	f04f 0200 	mov.w	r2, #0
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	020b      	lsls	r3, r1, #8
 800ac3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac40:	0202      	lsls	r2, r0, #8
 800ac42:	6979      	ldr	r1, [r7, #20]
 800ac44:	6849      	ldr	r1, [r1, #4]
 800ac46:	0849      	lsrs	r1, r1, #1
 800ac48:	2000      	movs	r0, #0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	eb12 0804 	adds.w	r8, r2, r4
 800ac52:	eb43 0905 	adc.w	r9, r3, r5
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	469a      	mov	sl, r3
 800ac5e:	4693      	mov	fp, r2
 800ac60:	4652      	mov	r2, sl
 800ac62:	465b      	mov	r3, fp
 800ac64:	4640      	mov	r0, r8
 800ac66:	4649      	mov	r1, r9
 800ac68:	f7f5 fd66 	bl	8000738 <__aeabi_uldivmod>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4613      	mov	r3, r2
 800ac72:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac7a:	d308      	bcc.n	800ac8e <UART_SetConfig+0x9a2>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac82:	d204      	bcs.n	800ac8e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac8a:	60da      	str	r2, [r3, #12]
 800ac8c:	e17f      	b.n	800af8e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac94:	e17b      	b.n	800af8e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac9e:	f040 80bd 	bne.w	800ae1c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800aca2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aca6:	2b20      	cmp	r3, #32
 800aca8:	dc48      	bgt.n	800ad3c <UART_SetConfig+0xa50>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	db7b      	blt.n	800ada6 <UART_SetConfig+0xaba>
 800acae:	2b20      	cmp	r3, #32
 800acb0:	d879      	bhi.n	800ada6 <UART_SetConfig+0xaba>
 800acb2:	a201      	add	r2, pc, #4	@ (adr r2, 800acb8 <UART_SetConfig+0x9cc>)
 800acb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb8:	0800ad43 	.word	0x0800ad43
 800acbc:	0800ad4b 	.word	0x0800ad4b
 800acc0:	0800ada7 	.word	0x0800ada7
 800acc4:	0800ada7 	.word	0x0800ada7
 800acc8:	0800ad53 	.word	0x0800ad53
 800accc:	0800ada7 	.word	0x0800ada7
 800acd0:	0800ada7 	.word	0x0800ada7
 800acd4:	0800ada7 	.word	0x0800ada7
 800acd8:	0800ad63 	.word	0x0800ad63
 800acdc:	0800ada7 	.word	0x0800ada7
 800ace0:	0800ada7 	.word	0x0800ada7
 800ace4:	0800ada7 	.word	0x0800ada7
 800ace8:	0800ada7 	.word	0x0800ada7
 800acec:	0800ada7 	.word	0x0800ada7
 800acf0:	0800ada7 	.word	0x0800ada7
 800acf4:	0800ada7 	.word	0x0800ada7
 800acf8:	0800ad73 	.word	0x0800ad73
 800acfc:	0800ada7 	.word	0x0800ada7
 800ad00:	0800ada7 	.word	0x0800ada7
 800ad04:	0800ada7 	.word	0x0800ada7
 800ad08:	0800ada7 	.word	0x0800ada7
 800ad0c:	0800ada7 	.word	0x0800ada7
 800ad10:	0800ada7 	.word	0x0800ada7
 800ad14:	0800ada7 	.word	0x0800ada7
 800ad18:	0800ada7 	.word	0x0800ada7
 800ad1c:	0800ada7 	.word	0x0800ada7
 800ad20:	0800ada7 	.word	0x0800ada7
 800ad24:	0800ada7 	.word	0x0800ada7
 800ad28:	0800ada7 	.word	0x0800ada7
 800ad2c:	0800ada7 	.word	0x0800ada7
 800ad30:	0800ada7 	.word	0x0800ada7
 800ad34:	0800ada7 	.word	0x0800ada7
 800ad38:	0800ad99 	.word	0x0800ad99
 800ad3c:	2b40      	cmp	r3, #64	@ 0x40
 800ad3e:	d02e      	beq.n	800ad9e <UART_SetConfig+0xab2>
 800ad40:	e031      	b.n	800ada6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad42:	f7fa f877 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 800ad46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad48:	e033      	b.n	800adb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad4a:	f7fa f889 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 800ad4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad50:	e02f      	b.n	800adb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fb ff20 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad60:	e027      	b.n	800adb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad62:	f107 0318 	add.w	r3, r7, #24
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fc f86c 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad70:	e01f      	b.n	800adb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad72:	4b69      	ldr	r3, [pc, #420]	@ (800af18 <UART_SetConfig+0xc2c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0320 	and.w	r3, r3, #32
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d009      	beq.n	800ad92 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad7e:	4b66      	ldr	r3, [pc, #408]	@ (800af18 <UART_SetConfig+0xc2c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	08db      	lsrs	r3, r3, #3
 800ad84:	f003 0303 	and.w	r3, r3, #3
 800ad88:	4a64      	ldr	r2, [pc, #400]	@ (800af1c <UART_SetConfig+0xc30>)
 800ad8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad90:	e00f      	b.n	800adb2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ad92:	4b62      	ldr	r3, [pc, #392]	@ (800af1c <UART_SetConfig+0xc30>)
 800ad94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad96:	e00c      	b.n	800adb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad98:	4b61      	ldr	r3, [pc, #388]	@ (800af20 <UART_SetConfig+0xc34>)
 800ad9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad9c:	e009      	b.n	800adb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ada2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada4:	e005      	b.n	800adb2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800adb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80ea 	beq.w	800af8e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adbe:	4a55      	ldr	r2, [pc, #340]	@ (800af14 <UART_SetConfig+0xc28>)
 800adc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adc4:	461a      	mov	r2, r3
 800adc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800adcc:	005a      	lsls	r2, r3, #1
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	085b      	lsrs	r3, r3, #1
 800add4:	441a      	add	r2, r3
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	fbb2 f3f3 	udiv	r3, r2, r3
 800adde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ade0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade2:	2b0f      	cmp	r3, #15
 800ade4:	d916      	bls.n	800ae14 <UART_SetConfig+0xb28>
 800ade6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adec:	d212      	bcs.n	800ae14 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f023 030f 	bic.w	r3, r3, #15
 800adf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfa:	085b      	lsrs	r3, r3, #1
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae06:	4313      	orrs	r3, r2
 800ae08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ae10:	60da      	str	r2, [r3, #12]
 800ae12:	e0bc      	b.n	800af8e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ae1a:	e0b8      	b.n	800af8e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae1c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae20:	2b20      	cmp	r3, #32
 800ae22:	dc4b      	bgt.n	800aebc <UART_SetConfig+0xbd0>
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f2c0 8087 	blt.w	800af38 <UART_SetConfig+0xc4c>
 800ae2a:	2b20      	cmp	r3, #32
 800ae2c:	f200 8084 	bhi.w	800af38 <UART_SetConfig+0xc4c>
 800ae30:	a201      	add	r2, pc, #4	@ (adr r2, 800ae38 <UART_SetConfig+0xb4c>)
 800ae32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae36:	bf00      	nop
 800ae38:	0800aec3 	.word	0x0800aec3
 800ae3c:	0800aecb 	.word	0x0800aecb
 800ae40:	0800af39 	.word	0x0800af39
 800ae44:	0800af39 	.word	0x0800af39
 800ae48:	0800aed3 	.word	0x0800aed3
 800ae4c:	0800af39 	.word	0x0800af39
 800ae50:	0800af39 	.word	0x0800af39
 800ae54:	0800af39 	.word	0x0800af39
 800ae58:	0800aee3 	.word	0x0800aee3
 800ae5c:	0800af39 	.word	0x0800af39
 800ae60:	0800af39 	.word	0x0800af39
 800ae64:	0800af39 	.word	0x0800af39
 800ae68:	0800af39 	.word	0x0800af39
 800ae6c:	0800af39 	.word	0x0800af39
 800ae70:	0800af39 	.word	0x0800af39
 800ae74:	0800af39 	.word	0x0800af39
 800ae78:	0800aef3 	.word	0x0800aef3
 800ae7c:	0800af39 	.word	0x0800af39
 800ae80:	0800af39 	.word	0x0800af39
 800ae84:	0800af39 	.word	0x0800af39
 800ae88:	0800af39 	.word	0x0800af39
 800ae8c:	0800af39 	.word	0x0800af39
 800ae90:	0800af39 	.word	0x0800af39
 800ae94:	0800af39 	.word	0x0800af39
 800ae98:	0800af39 	.word	0x0800af39
 800ae9c:	0800af39 	.word	0x0800af39
 800aea0:	0800af39 	.word	0x0800af39
 800aea4:	0800af39 	.word	0x0800af39
 800aea8:	0800af39 	.word	0x0800af39
 800aeac:	0800af39 	.word	0x0800af39
 800aeb0:	0800af39 	.word	0x0800af39
 800aeb4:	0800af39 	.word	0x0800af39
 800aeb8:	0800af2b 	.word	0x0800af2b
 800aebc:	2b40      	cmp	r3, #64	@ 0x40
 800aebe:	d037      	beq.n	800af30 <UART_SetConfig+0xc44>
 800aec0:	e03a      	b.n	800af38 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aec2:	f7f9 ffb7 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 800aec6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aec8:	e03c      	b.n	800af44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aeca:	f7f9 ffc9 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 800aece:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aed0:	e038      	b.n	800af44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fb fe60 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee0:	e030      	b.n	800af44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aee2:	f107 0318 	add.w	r3, r7, #24
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fb ffac 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef0:	e028      	b.n	800af44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aef2:	4b09      	ldr	r3, [pc, #36]	@ (800af18 <UART_SetConfig+0xc2c>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0320 	and.w	r3, r3, #32
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d012      	beq.n	800af24 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aefe:	4b06      	ldr	r3, [pc, #24]	@ (800af18 <UART_SetConfig+0xc2c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	08db      	lsrs	r3, r3, #3
 800af04:	f003 0303 	and.w	r3, r3, #3
 800af08:	4a04      	ldr	r2, [pc, #16]	@ (800af1c <UART_SetConfig+0xc30>)
 800af0a:	fa22 f303 	lsr.w	r3, r2, r3
 800af0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af10:	e018      	b.n	800af44 <UART_SetConfig+0xc58>
 800af12:	bf00      	nop
 800af14:	080123b8 	.word	0x080123b8
 800af18:	58024400 	.word	0x58024400
 800af1c:	03d09000 	.word	0x03d09000
 800af20:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800af24:	4b24      	ldr	r3, [pc, #144]	@ (800afb8 <UART_SetConfig+0xccc>)
 800af26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af28:	e00c      	b.n	800af44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af2a:	4b24      	ldr	r3, [pc, #144]	@ (800afbc <UART_SetConfig+0xcd0>)
 800af2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2e:	e009      	b.n	800af44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af36:	e005      	b.n	800af44 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800af38:	2300      	movs	r3, #0
 800af3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af42:	bf00      	nop
    }

    if (pclk != 0U)
 800af44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af46:	2b00      	cmp	r3, #0
 800af48:	d021      	beq.n	800af8e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4e:	4a1c      	ldr	r2, [pc, #112]	@ (800afc0 <UART_SetConfig+0xcd4>)
 800af50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af54:	461a      	mov	r2, r3
 800af56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af58:	fbb3 f2f2 	udiv	r2, r3, r2
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	085b      	lsrs	r3, r3, #1
 800af62:	441a      	add	r2, r3
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	fbb2 f3f3 	udiv	r3, r2, r3
 800af6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af70:	2b0f      	cmp	r3, #15
 800af72:	d909      	bls.n	800af88 <UART_SetConfig+0xc9c>
 800af74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af7a:	d205      	bcs.n	800af88 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7e:	b29a      	uxth	r2, r3
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	60da      	str	r2, [r3, #12]
 800af86:	e002      	b.n	800af8e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2201      	movs	r2, #1
 800af92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2201      	movs	r2, #1
 800af9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2200      	movs	r2, #0
 800afa2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2200      	movs	r2, #0
 800afa8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800afaa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3748      	adds	r7, #72	@ 0x48
 800afb2:	46bd      	mov	sp, r7
 800afb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afb8:	03d09000 	.word	0x03d09000
 800afbc:	003d0900 	.word	0x003d0900
 800afc0:	080123b8 	.word	0x080123b8

0800afc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd0:	f003 0308 	and.w	r3, r3, #8
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00a      	beq.n	800afee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	430a      	orrs	r2, r1
 800b00e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b014:	f003 0302 	and.w	r3, r3, #2
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00a      	beq.n	800b032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	430a      	orrs	r2, r1
 800b030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	430a      	orrs	r2, r1
 800b052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b058:	f003 0310 	and.w	r3, r3, #16
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00a      	beq.n	800b076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07a:	f003 0320 	and.w	r3, r3, #32
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	430a      	orrs	r2, r1
 800b096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d01a      	beq.n	800b0da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0c2:	d10a      	bne.n	800b0da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00a      	beq.n	800b0fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	430a      	orrs	r2, r1
 800b0fa:	605a      	str	r2, [r3, #4]
  }
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b098      	sub	sp, #96	@ 0x60
 800b10c:	af02      	add	r7, sp, #8
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b118:	f7f7 fcee 	bl	8002af8 <HAL_GetTick>
 800b11c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 0308 	and.w	r3, r3, #8
 800b128:	2b08      	cmp	r3, #8
 800b12a:	d12f      	bne.n	800b18c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b12c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b134:	2200      	movs	r2, #0
 800b136:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f88e 	bl	800b25c <UART_WaitOnFlagUntilTimeout>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d022      	beq.n	800b18c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14e:	e853 3f00 	ldrex	r3, [r3]
 800b152:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b15a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	461a      	mov	r2, r3
 800b162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b164:	647b      	str	r3, [r7, #68]	@ 0x44
 800b166:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b168:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b16a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b16c:	e841 2300 	strex	r3, r2, [r1]
 800b170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1e6      	bne.n	800b146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2220      	movs	r2, #32
 800b17c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e063      	b.n	800b254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0304 	and.w	r3, r3, #4
 800b196:	2b04      	cmp	r3, #4
 800b198:	d149      	bne.n	800b22e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b19a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f857 	bl	800b25c <UART_WaitOnFlagUntilTimeout>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d03c      	beq.n	800b22e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1bc:	e853 3f00 	ldrex	r3, [r3]
 800b1c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1da:	e841 2300 	strex	r3, r2, [r1]
 800b1de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1e6      	bne.n	800b1b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3308      	adds	r3, #8
 800b1ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	e853 3f00 	ldrex	r3, [r3]
 800b1f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f023 0301 	bic.w	r3, r3, #1
 800b1fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3308      	adds	r3, #8
 800b204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b206:	61fa      	str	r2, [r7, #28]
 800b208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20a:	69b9      	ldr	r1, [r7, #24]
 800b20c:	69fa      	ldr	r2, [r7, #28]
 800b20e:	e841 2300 	strex	r3, r2, [r1]
 800b212:	617b      	str	r3, [r7, #20]
   return(result);
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1e5      	bne.n	800b1e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2220      	movs	r2, #32
 800b21e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e012      	b.n	800b254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2220      	movs	r2, #32
 800b232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2220      	movs	r2, #32
 800b23a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3758      	adds	r7, #88	@ 0x58
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	4613      	mov	r3, r2
 800b26a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b26c:	e04f      	b.n	800b30e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b274:	d04b      	beq.n	800b30e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b276:	f7f7 fc3f 	bl	8002af8 <HAL_GetTick>
 800b27a:	4602      	mov	r2, r0
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	69ba      	ldr	r2, [r7, #24]
 800b282:	429a      	cmp	r2, r3
 800b284:	d302      	bcc.n	800b28c <UART_WaitOnFlagUntilTimeout+0x30>
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e04e      	b.n	800b32e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 0304 	and.w	r3, r3, #4
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d037      	beq.n	800b30e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b80      	cmp	r3, #128	@ 0x80
 800b2a2:	d034      	beq.n	800b30e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b40      	cmp	r3, #64	@ 0x40
 800b2a8:	d031      	beq.n	800b30e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	69db      	ldr	r3, [r3, #28]
 800b2b0:	f003 0308 	and.w	r3, r3, #8
 800b2b4:	2b08      	cmp	r3, #8
 800b2b6:	d110      	bne.n	800b2da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2208      	movs	r2, #8
 800b2be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 f839 	bl	800b338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2208      	movs	r2, #8
 800b2ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e029      	b.n	800b32e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	69db      	ldr	r3, [r3, #28]
 800b2e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2e8:	d111      	bne.n	800b30e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 f81f 	bl	800b338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2220      	movs	r2, #32
 800b2fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b30a:	2303      	movs	r3, #3
 800b30c:	e00f      	b.n	800b32e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	69da      	ldr	r2, [r3, #28]
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	4013      	ands	r3, r2
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	bf0c      	ite	eq
 800b31e:	2301      	moveq	r3, #1
 800b320:	2300      	movne	r3, #0
 800b322:	b2db      	uxtb	r3, r3
 800b324:	461a      	mov	r2, r3
 800b326:	79fb      	ldrb	r3, [r7, #7]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d0a0      	beq.n	800b26e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b338:	b480      	push	{r7}
 800b33a:	b095      	sub	sp, #84	@ 0x54
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b348:	e853 3f00 	ldrex	r3, [r3]
 800b34c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	461a      	mov	r2, r3
 800b35c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b35e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b360:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b362:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b366:	e841 2300 	strex	r3, r2, [r1]
 800b36a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1e6      	bne.n	800b340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3308      	adds	r3, #8
 800b378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	e853 3f00 	ldrex	r3, [r3]
 800b380:	61fb      	str	r3, [r7, #28]
   return(result);
 800b382:	69fa      	ldr	r2, [r7, #28]
 800b384:	4b1e      	ldr	r3, [pc, #120]	@ (800b400 <UART_EndRxTransfer+0xc8>)
 800b386:	4013      	ands	r3, r2
 800b388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3308      	adds	r3, #8
 800b390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b39a:	e841 2300 	strex	r3, r2, [r1]
 800b39e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1e5      	bne.n	800b372 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d118      	bne.n	800b3e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	e853 3f00 	ldrex	r3, [r3]
 800b3ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f023 0310 	bic.w	r3, r3, #16
 800b3c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3cc:	61bb      	str	r3, [r7, #24]
 800b3ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d0:	6979      	ldr	r1, [r7, #20]
 800b3d2:	69ba      	ldr	r2, [r7, #24]
 800b3d4:	e841 2300 	strex	r3, r2, [r1]
 800b3d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1e6      	bne.n	800b3ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b3f4:	bf00      	nop
 800b3f6:	3754      	adds	r7, #84	@ 0x54
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	effffffe 	.word	0xeffffffe

0800b404 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b410:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f7fe ff4c 	bl	800a2c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b428:	bf00      	nop
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b088      	sub	sp, #32
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	e853 3f00 	ldrex	r3, [r3]
 800b444:	60bb      	str	r3, [r7, #8]
   return(result);
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b44c:	61fb      	str	r3, [r7, #28]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	61bb      	str	r3, [r7, #24]
 800b458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45a:	6979      	ldr	r1, [r7, #20]
 800b45c:	69ba      	ldr	r2, [r7, #24]
 800b45e:	e841 2300 	strex	r3, r2, [r1]
 800b462:	613b      	str	r3, [r7, #16]
   return(result);
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e6      	bne.n	800b438 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2220      	movs	r2, #32
 800b46e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7fe ff17 	bl	800a2ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b47e:	bf00      	nop
 800b480:	3720      	adds	r7, #32
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b486:	b480      	push	{r7}
 800b488:	b083      	sub	sp, #12
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b48e:	bf00      	nop
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b49a:	b480      	push	{r7}
 800b49c:	b083      	sub	sp, #12
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b4a2:	bf00      	nop
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b4b6:	bf00      	nop
 800b4b8:	370c      	adds	r7, #12
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d101      	bne.n	800b4d8 <HAL_UARTEx_DisableFifoMode+0x16>
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	e027      	b.n	800b528 <HAL_UARTEx_DisableFifoMode+0x66>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2224      	movs	r2, #36	@ 0x24
 800b4e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f022 0201 	bic.w	r2, r2, #1
 800b4fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b506:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2220      	movs	r2, #32
 800b51a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b544:	2b01      	cmp	r3, #1
 800b546:	d101      	bne.n	800b54c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b548:	2302      	movs	r3, #2
 800b54a:	e02d      	b.n	800b5a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2224      	movs	r2, #36	@ 0x24
 800b558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f022 0201 	bic.w	r2, r2, #1
 800b572:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	430a      	orrs	r2, r1
 800b586:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f84f 	bl	800b62c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2220      	movs	r2, #32
 800b59a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d101      	bne.n	800b5c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	e02d      	b.n	800b624 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2224      	movs	r2, #36	@ 0x24
 800b5d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f022 0201 	bic.w	r2, r2, #1
 800b5ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	430a      	orrs	r2, r1
 800b602:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 f811 	bl	800b62c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2220      	movs	r2, #32
 800b616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d108      	bne.n	800b64e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b64c:	e031      	b.n	800b6b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b64e:	2310      	movs	r3, #16
 800b650:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b652:	2310      	movs	r3, #16
 800b654:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	0e5b      	lsrs	r3, r3, #25
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	f003 0307 	and.w	r3, r3, #7
 800b664:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	0f5b      	lsrs	r3, r3, #29
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	f003 0307 	and.w	r3, r3, #7
 800b674:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	7b3a      	ldrb	r2, [r7, #12]
 800b67a:	4911      	ldr	r1, [pc, #68]	@ (800b6c0 <UARTEx_SetNbDataToProcess+0x94>)
 800b67c:	5c8a      	ldrb	r2, [r1, r2]
 800b67e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b682:	7b3a      	ldrb	r2, [r7, #12]
 800b684:	490f      	ldr	r1, [pc, #60]	@ (800b6c4 <UARTEx_SetNbDataToProcess+0x98>)
 800b686:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b688:	fb93 f3f2 	sdiv	r3, r3, r2
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b694:	7bfb      	ldrb	r3, [r7, #15]
 800b696:	7b7a      	ldrb	r2, [r7, #13]
 800b698:	4909      	ldr	r1, [pc, #36]	@ (800b6c0 <UARTEx_SetNbDataToProcess+0x94>)
 800b69a:	5c8a      	ldrb	r2, [r1, r2]
 800b69c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6a0:	7b7a      	ldrb	r2, [r7, #13]
 800b6a2:	4908      	ldr	r1, [pc, #32]	@ (800b6c4 <UARTEx_SetNbDataToProcess+0x98>)
 800b6a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b6b2:	bf00      	nop
 800b6b4:	3714      	adds	r7, #20
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	080123d0 	.word	0x080123d0
 800b6c4:	080123d8 	.word	0x080123d8

0800b6c8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d101      	bne.n	800b6da <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e03c      	b.n	800b754 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d106      	bne.n	800b6f4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7f6 fed6 	bl	80024a0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f022 0201 	bic.w	r2, r2, #1
 800b70a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f85b 	bl	800b7c8 <USART_SetConfig>
 800b712:	4603      	mov	r3, r0
 800b714:	2b01      	cmp	r3, #1
 800b716:	d101      	bne.n	800b71c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	e01b      	b.n	800b754 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b72a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689a      	ldr	r2, [r3, #8]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b73a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f042 0201 	orr.w	r2, r2, #1
 800b74a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fddd 	bl	800c30c <USART_CheckIdleState>
 800b752:	4603      	mov	r3, r0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	4613      	mov	r3, r2
 800b76a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800b76c:	e018      	b.n	800b7a0 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b774:	d014      	beq.n	800b7a0 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b776:	f7f7 f9bf 	bl	8002af8 <HAL_GetTick>
 800b77a:	4602      	mov	r2, r0
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	69ba      	ldr	r2, [r7, #24]
 800b782:	429a      	cmp	r2, r3
 800b784:	d302      	bcc.n	800b78c <USART_WaitOnFlagUntilTimeout+0x30>
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d109      	bne.n	800b7a0 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800b79c:	2303      	movs	r3, #3
 800b79e:	e00f      	b.n	800b7c0 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	69da      	ldr	r2, [r3, #28]
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	bf0c      	ite	eq
 800b7b0:	2301      	moveq	r3, #1
 800b7b2:	2300      	movne	r3, #0
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	79fb      	ldrb	r3, [r7, #7]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d0d7      	beq.n	800b76e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08e      	sub	sp, #56	@ 0x38
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	689a      	ldr	r2, [r3, #8]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	4bc9      	ldr	r3, [pc, #804]	@ (800bb1c <USART_SetConfig+0x354>)
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	6812      	ldr	r2, [r2, #0]
 800b7fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b800:	430b      	orrs	r3, r1
 800b802:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800b804:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b810:	4313      	orrs	r3, r2
 800b812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	699a      	ldr	r2, [r3, #24]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	69db      	ldr	r3, [r3, #28]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b820:	4313      	orrs	r3, r2
 800b822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b82a:	4313      	orrs	r3, r2
 800b82c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	4bba      	ldr	r3, [pc, #744]	@ (800bb20 <USART_SetConfig+0x358>)
 800b836:	4013      	ands	r3, r2
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	6812      	ldr	r2, [r2, #0]
 800b83c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b83e:	430b      	orrs	r3, r1
 800b840:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b848:	f023 010f 	bic.w	r1, r3, #15
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	430a      	orrs	r2, r1
 800b856:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4ab1      	ldr	r2, [pc, #708]	@ (800bb24 <USART_SetConfig+0x35c>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d176      	bne.n	800b950 <USART_SetConfig+0x188>
 800b862:	4bb1      	ldr	r3, [pc, #708]	@ (800bb28 <USART_SetConfig+0x360>)
 800b864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b86a:	2b28      	cmp	r3, #40	@ 0x28
 800b86c:	d86c      	bhi.n	800b948 <USART_SetConfig+0x180>
 800b86e:	a201      	add	r2, pc, #4	@ (adr r2, 800b874 <USART_SetConfig+0xac>)
 800b870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b874:	0800b919 	.word	0x0800b919
 800b878:	0800b949 	.word	0x0800b949
 800b87c:	0800b949 	.word	0x0800b949
 800b880:	0800b949 	.word	0x0800b949
 800b884:	0800b949 	.word	0x0800b949
 800b888:	0800b949 	.word	0x0800b949
 800b88c:	0800b949 	.word	0x0800b949
 800b890:	0800b949 	.word	0x0800b949
 800b894:	0800b921 	.word	0x0800b921
 800b898:	0800b949 	.word	0x0800b949
 800b89c:	0800b949 	.word	0x0800b949
 800b8a0:	0800b949 	.word	0x0800b949
 800b8a4:	0800b949 	.word	0x0800b949
 800b8a8:	0800b949 	.word	0x0800b949
 800b8ac:	0800b949 	.word	0x0800b949
 800b8b0:	0800b949 	.word	0x0800b949
 800b8b4:	0800b929 	.word	0x0800b929
 800b8b8:	0800b949 	.word	0x0800b949
 800b8bc:	0800b949 	.word	0x0800b949
 800b8c0:	0800b949 	.word	0x0800b949
 800b8c4:	0800b949 	.word	0x0800b949
 800b8c8:	0800b949 	.word	0x0800b949
 800b8cc:	0800b949 	.word	0x0800b949
 800b8d0:	0800b949 	.word	0x0800b949
 800b8d4:	0800b931 	.word	0x0800b931
 800b8d8:	0800b949 	.word	0x0800b949
 800b8dc:	0800b949 	.word	0x0800b949
 800b8e0:	0800b949 	.word	0x0800b949
 800b8e4:	0800b949 	.word	0x0800b949
 800b8e8:	0800b949 	.word	0x0800b949
 800b8ec:	0800b949 	.word	0x0800b949
 800b8f0:	0800b949 	.word	0x0800b949
 800b8f4:	0800b939 	.word	0x0800b939
 800b8f8:	0800b949 	.word	0x0800b949
 800b8fc:	0800b949 	.word	0x0800b949
 800b900:	0800b949 	.word	0x0800b949
 800b904:	0800b949 	.word	0x0800b949
 800b908:	0800b949 	.word	0x0800b949
 800b90c:	0800b949 	.word	0x0800b949
 800b910:	0800b949 	.word	0x0800b949
 800b914:	0800b941 	.word	0x0800b941
 800b918:	2301      	movs	r3, #1
 800b91a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b91e:	e18e      	b.n	800bc3e <USART_SetConfig+0x476>
 800b920:	2302      	movs	r3, #2
 800b922:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b926:	e18a      	b.n	800bc3e <USART_SetConfig+0x476>
 800b928:	2304      	movs	r3, #4
 800b92a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b92e:	e186      	b.n	800bc3e <USART_SetConfig+0x476>
 800b930:	2308      	movs	r3, #8
 800b932:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b936:	e182      	b.n	800bc3e <USART_SetConfig+0x476>
 800b938:	2310      	movs	r3, #16
 800b93a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b93e:	e17e      	b.n	800bc3e <USART_SetConfig+0x476>
 800b940:	2320      	movs	r3, #32
 800b942:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b946:	e17a      	b.n	800bc3e <USART_SetConfig+0x476>
 800b948:	2340      	movs	r3, #64	@ 0x40
 800b94a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b94e:	e176      	b.n	800bc3e <USART_SetConfig+0x476>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a75      	ldr	r2, [pc, #468]	@ (800bb2c <USART_SetConfig+0x364>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d130      	bne.n	800b9bc <USART_SetConfig+0x1f4>
 800b95a:	4b73      	ldr	r3, [pc, #460]	@ (800bb28 <USART_SetConfig+0x360>)
 800b95c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b95e:	f003 0307 	and.w	r3, r3, #7
 800b962:	2b05      	cmp	r3, #5
 800b964:	d826      	bhi.n	800b9b4 <USART_SetConfig+0x1ec>
 800b966:	a201      	add	r2, pc, #4	@ (adr r2, 800b96c <USART_SetConfig+0x1a4>)
 800b968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96c:	0800b985 	.word	0x0800b985
 800b970:	0800b98d 	.word	0x0800b98d
 800b974:	0800b995 	.word	0x0800b995
 800b978:	0800b99d 	.word	0x0800b99d
 800b97c:	0800b9a5 	.word	0x0800b9a5
 800b980:	0800b9ad 	.word	0x0800b9ad
 800b984:	2300      	movs	r3, #0
 800b986:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b98a:	e158      	b.n	800bc3e <USART_SetConfig+0x476>
 800b98c:	2302      	movs	r3, #2
 800b98e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b992:	e154      	b.n	800bc3e <USART_SetConfig+0x476>
 800b994:	2304      	movs	r3, #4
 800b996:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b99a:	e150      	b.n	800bc3e <USART_SetConfig+0x476>
 800b99c:	2308      	movs	r3, #8
 800b99e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b9a2:	e14c      	b.n	800bc3e <USART_SetConfig+0x476>
 800b9a4:	2310      	movs	r3, #16
 800b9a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b9aa:	e148      	b.n	800bc3e <USART_SetConfig+0x476>
 800b9ac:	2320      	movs	r3, #32
 800b9ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b9b2:	e144      	b.n	800bc3e <USART_SetConfig+0x476>
 800b9b4:	2340      	movs	r3, #64	@ 0x40
 800b9b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b9ba:	e140      	b.n	800bc3e <USART_SetConfig+0x476>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a5b      	ldr	r2, [pc, #364]	@ (800bb30 <USART_SetConfig+0x368>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d130      	bne.n	800ba28 <USART_SetConfig+0x260>
 800b9c6:	4b58      	ldr	r3, [pc, #352]	@ (800bb28 <USART_SetConfig+0x360>)
 800b9c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ca:	f003 0307 	and.w	r3, r3, #7
 800b9ce:	2b05      	cmp	r3, #5
 800b9d0:	d826      	bhi.n	800ba20 <USART_SetConfig+0x258>
 800b9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d8 <USART_SetConfig+0x210>)
 800b9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d8:	0800b9f1 	.word	0x0800b9f1
 800b9dc:	0800b9f9 	.word	0x0800b9f9
 800b9e0:	0800ba01 	.word	0x0800ba01
 800b9e4:	0800ba09 	.word	0x0800ba09
 800b9e8:	0800ba11 	.word	0x0800ba11
 800b9ec:	0800ba19 	.word	0x0800ba19
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b9f6:	e122      	b.n	800bc3e <USART_SetConfig+0x476>
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b9fe:	e11e      	b.n	800bc3e <USART_SetConfig+0x476>
 800ba00:	2304      	movs	r3, #4
 800ba02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ba06:	e11a      	b.n	800bc3e <USART_SetConfig+0x476>
 800ba08:	2308      	movs	r3, #8
 800ba0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ba0e:	e116      	b.n	800bc3e <USART_SetConfig+0x476>
 800ba10:	2310      	movs	r3, #16
 800ba12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ba16:	e112      	b.n	800bc3e <USART_SetConfig+0x476>
 800ba18:	2320      	movs	r3, #32
 800ba1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ba1e:	e10e      	b.n	800bc3e <USART_SetConfig+0x476>
 800ba20:	2340      	movs	r3, #64	@ 0x40
 800ba22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ba26:	e10a      	b.n	800bc3e <USART_SetConfig+0x476>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a41      	ldr	r2, [pc, #260]	@ (800bb34 <USART_SetConfig+0x36c>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	f040 8086 	bne.w	800bb40 <USART_SetConfig+0x378>
 800ba34:	4b3c      	ldr	r3, [pc, #240]	@ (800bb28 <USART_SetConfig+0x360>)
 800ba36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba3c:	2b28      	cmp	r3, #40	@ 0x28
 800ba3e:	d87b      	bhi.n	800bb38 <USART_SetConfig+0x370>
 800ba40:	a201      	add	r2, pc, #4	@ (adr r2, 800ba48 <USART_SetConfig+0x280>)
 800ba42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba46:	bf00      	nop
 800ba48:	0800baed 	.word	0x0800baed
 800ba4c:	0800bb39 	.word	0x0800bb39
 800ba50:	0800bb39 	.word	0x0800bb39
 800ba54:	0800bb39 	.word	0x0800bb39
 800ba58:	0800bb39 	.word	0x0800bb39
 800ba5c:	0800bb39 	.word	0x0800bb39
 800ba60:	0800bb39 	.word	0x0800bb39
 800ba64:	0800bb39 	.word	0x0800bb39
 800ba68:	0800baf5 	.word	0x0800baf5
 800ba6c:	0800bb39 	.word	0x0800bb39
 800ba70:	0800bb39 	.word	0x0800bb39
 800ba74:	0800bb39 	.word	0x0800bb39
 800ba78:	0800bb39 	.word	0x0800bb39
 800ba7c:	0800bb39 	.word	0x0800bb39
 800ba80:	0800bb39 	.word	0x0800bb39
 800ba84:	0800bb39 	.word	0x0800bb39
 800ba88:	0800bafd 	.word	0x0800bafd
 800ba8c:	0800bb39 	.word	0x0800bb39
 800ba90:	0800bb39 	.word	0x0800bb39
 800ba94:	0800bb39 	.word	0x0800bb39
 800ba98:	0800bb39 	.word	0x0800bb39
 800ba9c:	0800bb39 	.word	0x0800bb39
 800baa0:	0800bb39 	.word	0x0800bb39
 800baa4:	0800bb39 	.word	0x0800bb39
 800baa8:	0800bb05 	.word	0x0800bb05
 800baac:	0800bb39 	.word	0x0800bb39
 800bab0:	0800bb39 	.word	0x0800bb39
 800bab4:	0800bb39 	.word	0x0800bb39
 800bab8:	0800bb39 	.word	0x0800bb39
 800babc:	0800bb39 	.word	0x0800bb39
 800bac0:	0800bb39 	.word	0x0800bb39
 800bac4:	0800bb39 	.word	0x0800bb39
 800bac8:	0800bb0d 	.word	0x0800bb0d
 800bacc:	0800bb39 	.word	0x0800bb39
 800bad0:	0800bb39 	.word	0x0800bb39
 800bad4:	0800bb39 	.word	0x0800bb39
 800bad8:	0800bb39 	.word	0x0800bb39
 800badc:	0800bb39 	.word	0x0800bb39
 800bae0:	0800bb39 	.word	0x0800bb39
 800bae4:	0800bb39 	.word	0x0800bb39
 800bae8:	0800bb15 	.word	0x0800bb15
 800baec:	2301      	movs	r3, #1
 800baee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800baf2:	e0a4      	b.n	800bc3e <USART_SetConfig+0x476>
 800baf4:	2302      	movs	r3, #2
 800baf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bafa:	e0a0      	b.n	800bc3e <USART_SetConfig+0x476>
 800bafc:	2304      	movs	r3, #4
 800bafe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb02:	e09c      	b.n	800bc3e <USART_SetConfig+0x476>
 800bb04:	2308      	movs	r3, #8
 800bb06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb0a:	e098      	b.n	800bc3e <USART_SetConfig+0x476>
 800bb0c:	2310      	movs	r3, #16
 800bb0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb12:	e094      	b.n	800bc3e <USART_SetConfig+0x476>
 800bb14:	2320      	movs	r3, #32
 800bb16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb1a:	e090      	b.n	800bc3e <USART_SetConfig+0x476>
 800bb1c:	cfff69f3 	.word	0xcfff69f3
 800bb20:	ffffc0f6 	.word	0xffffc0f6
 800bb24:	40011000 	.word	0x40011000
 800bb28:	58024400 	.word	0x58024400
 800bb2c:	40004400 	.word	0x40004400
 800bb30:	40004800 	.word	0x40004800
 800bb34:	40011400 	.word	0x40011400
 800bb38:	2340      	movs	r3, #64	@ 0x40
 800bb3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb3e:	e07e      	b.n	800bc3e <USART_SetConfig+0x476>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4ab5      	ldr	r2, [pc, #724]	@ (800be1c <USART_SetConfig+0x654>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d176      	bne.n	800bc38 <USART_SetConfig+0x470>
 800bb4a:	4bb5      	ldr	r3, [pc, #724]	@ (800be20 <USART_SetConfig+0x658>)
 800bb4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb52:	2b28      	cmp	r3, #40	@ 0x28
 800bb54:	d86c      	bhi.n	800bc30 <USART_SetConfig+0x468>
 800bb56:	a201      	add	r2, pc, #4	@ (adr r2, 800bb5c <USART_SetConfig+0x394>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bc01 	.word	0x0800bc01
 800bb60:	0800bc31 	.word	0x0800bc31
 800bb64:	0800bc31 	.word	0x0800bc31
 800bb68:	0800bc31 	.word	0x0800bc31
 800bb6c:	0800bc31 	.word	0x0800bc31
 800bb70:	0800bc31 	.word	0x0800bc31
 800bb74:	0800bc31 	.word	0x0800bc31
 800bb78:	0800bc31 	.word	0x0800bc31
 800bb7c:	0800bc09 	.word	0x0800bc09
 800bb80:	0800bc31 	.word	0x0800bc31
 800bb84:	0800bc31 	.word	0x0800bc31
 800bb88:	0800bc31 	.word	0x0800bc31
 800bb8c:	0800bc31 	.word	0x0800bc31
 800bb90:	0800bc31 	.word	0x0800bc31
 800bb94:	0800bc31 	.word	0x0800bc31
 800bb98:	0800bc31 	.word	0x0800bc31
 800bb9c:	0800bc11 	.word	0x0800bc11
 800bba0:	0800bc31 	.word	0x0800bc31
 800bba4:	0800bc31 	.word	0x0800bc31
 800bba8:	0800bc31 	.word	0x0800bc31
 800bbac:	0800bc31 	.word	0x0800bc31
 800bbb0:	0800bc31 	.word	0x0800bc31
 800bbb4:	0800bc31 	.word	0x0800bc31
 800bbb8:	0800bc31 	.word	0x0800bc31
 800bbbc:	0800bc19 	.word	0x0800bc19
 800bbc0:	0800bc31 	.word	0x0800bc31
 800bbc4:	0800bc31 	.word	0x0800bc31
 800bbc8:	0800bc31 	.word	0x0800bc31
 800bbcc:	0800bc31 	.word	0x0800bc31
 800bbd0:	0800bc31 	.word	0x0800bc31
 800bbd4:	0800bc31 	.word	0x0800bc31
 800bbd8:	0800bc31 	.word	0x0800bc31
 800bbdc:	0800bc21 	.word	0x0800bc21
 800bbe0:	0800bc31 	.word	0x0800bc31
 800bbe4:	0800bc31 	.word	0x0800bc31
 800bbe8:	0800bc31 	.word	0x0800bc31
 800bbec:	0800bc31 	.word	0x0800bc31
 800bbf0:	0800bc31 	.word	0x0800bc31
 800bbf4:	0800bc31 	.word	0x0800bc31
 800bbf8:	0800bc31 	.word	0x0800bc31
 800bbfc:	0800bc29 	.word	0x0800bc29
 800bc00:	2301      	movs	r3, #1
 800bc02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc06:	e01a      	b.n	800bc3e <USART_SetConfig+0x476>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc0e:	e016      	b.n	800bc3e <USART_SetConfig+0x476>
 800bc10:	2304      	movs	r3, #4
 800bc12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc16:	e012      	b.n	800bc3e <USART_SetConfig+0x476>
 800bc18:	2308      	movs	r3, #8
 800bc1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc1e:	e00e      	b.n	800bc3e <USART_SetConfig+0x476>
 800bc20:	2310      	movs	r3, #16
 800bc22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc26:	e00a      	b.n	800bc3e <USART_SetConfig+0x476>
 800bc28:	2320      	movs	r3, #32
 800bc2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc2e:	e006      	b.n	800bc3e <USART_SetConfig+0x476>
 800bc30:	2340      	movs	r3, #64	@ 0x40
 800bc32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc36:	e002      	b.n	800bc3e <USART_SetConfig+0x476>
 800bc38:	2340      	movs	r3, #64	@ 0x40
 800bc3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800bc3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc42:	2b20      	cmp	r3, #32
 800bc44:	f200 832f 	bhi.w	800c2a6 <USART_SetConfig+0xade>
 800bc48:	a201      	add	r2, pc, #4	@ (adr r2, 800bc50 <USART_SetConfig+0x488>)
 800bc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc4e:	bf00      	nop
 800bc50:	0800bcd5 	.word	0x0800bcd5
 800bc54:	0800bd8b 	.word	0x0800bd8b
 800bc58:	0800be4b 	.word	0x0800be4b
 800bc5c:	0800c2a7 	.word	0x0800c2a7
 800bc60:	0800bf05 	.word	0x0800bf05
 800bc64:	0800c2a7 	.word	0x0800c2a7
 800bc68:	0800c2a7 	.word	0x0800c2a7
 800bc6c:	0800c2a7 	.word	0x0800c2a7
 800bc70:	0800bfbf 	.word	0x0800bfbf
 800bc74:	0800c2a7 	.word	0x0800c2a7
 800bc78:	0800c2a7 	.word	0x0800c2a7
 800bc7c:	0800c2a7 	.word	0x0800c2a7
 800bc80:	0800c2a7 	.word	0x0800c2a7
 800bc84:	0800c2a7 	.word	0x0800c2a7
 800bc88:	0800c2a7 	.word	0x0800c2a7
 800bc8c:	0800c2a7 	.word	0x0800c2a7
 800bc90:	0800c137 	.word	0x0800c137
 800bc94:	0800c2a7 	.word	0x0800c2a7
 800bc98:	0800c2a7 	.word	0x0800c2a7
 800bc9c:	0800c2a7 	.word	0x0800c2a7
 800bca0:	0800c2a7 	.word	0x0800c2a7
 800bca4:	0800c2a7 	.word	0x0800c2a7
 800bca8:	0800c2a7 	.word	0x0800c2a7
 800bcac:	0800c2a7 	.word	0x0800c2a7
 800bcb0:	0800c2a7 	.word	0x0800c2a7
 800bcb4:	0800c2a7 	.word	0x0800c2a7
 800bcb8:	0800c2a7 	.word	0x0800c2a7
 800bcbc:	0800c2a7 	.word	0x0800c2a7
 800bcc0:	0800c2a7 	.word	0x0800c2a7
 800bcc4:	0800c2a7 	.word	0x0800c2a7
 800bcc8:	0800c2a7 	.word	0x0800c2a7
 800bccc:	0800c2a7 	.word	0x0800c2a7
 800bcd0:	0800c1f5 	.word	0x0800c1f5
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bcd4:	f7f9 f8ae 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 800bcd8:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d044      	beq.n	800bd6c <USART_SetConfig+0x5a4>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d03e      	beq.n	800bd68 <USART_SetConfig+0x5a0>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d038      	beq.n	800bd64 <USART_SetConfig+0x59c>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d032      	beq.n	800bd60 <USART_SetConfig+0x598>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d02c      	beq.n	800bd5c <USART_SetConfig+0x594>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd06:	2b05      	cmp	r3, #5
 800bd08:	d026      	beq.n	800bd58 <USART_SetConfig+0x590>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd0e:	2b06      	cmp	r3, #6
 800bd10:	d020      	beq.n	800bd54 <USART_SetConfig+0x58c>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd16:	2b07      	cmp	r3, #7
 800bd18:	d01a      	beq.n	800bd50 <USART_SetConfig+0x588>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd1e:	2b08      	cmp	r3, #8
 800bd20:	d014      	beq.n	800bd4c <USART_SetConfig+0x584>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd26:	2b09      	cmp	r3, #9
 800bd28:	d00e      	beq.n	800bd48 <USART_SetConfig+0x580>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd2e:	2b0a      	cmp	r3, #10
 800bd30:	d008      	beq.n	800bd44 <USART_SetConfig+0x57c>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd36:	2b0b      	cmp	r3, #11
 800bd38:	d102      	bne.n	800bd40 <USART_SetConfig+0x578>
 800bd3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd3e:	e016      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd40:	2301      	movs	r3, #1
 800bd42:	e014      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd44:	2380      	movs	r3, #128	@ 0x80
 800bd46:	e012      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd48:	2340      	movs	r3, #64	@ 0x40
 800bd4a:	e010      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd4c:	2320      	movs	r3, #32
 800bd4e:	e00e      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd50:	2310      	movs	r3, #16
 800bd52:	e00c      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd54:	230c      	movs	r3, #12
 800bd56:	e00a      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd58:	230a      	movs	r3, #10
 800bd5a:	e008      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd5c:	2308      	movs	r3, #8
 800bd5e:	e006      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd60:	2306      	movs	r3, #6
 800bd62:	e004      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd64:	2304      	movs	r3, #4
 800bd66:	e002      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd68:	2302      	movs	r3, #2
 800bd6a:	e000      	b.n	800bd6e <USART_SetConfig+0x5a6>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd70:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd74:	005a      	lsls	r2, r3, #1
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	085b      	lsrs	r3, r3, #1
 800bd7c:	441a      	add	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd86:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800bd88:	e291      	b.n	800c2ae <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd8a:	f7f9 f869 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 800bd8e:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d049      	beq.n	800be2c <USART_SetConfig+0x664>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d043      	beq.n	800be28 <USART_SetConfig+0x660>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d03d      	beq.n	800be24 <USART_SetConfig+0x65c>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdac:	2b03      	cmp	r3, #3
 800bdae:	d032      	beq.n	800be16 <USART_SetConfig+0x64e>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	d02c      	beq.n	800be12 <USART_SetConfig+0x64a>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdbc:	2b05      	cmp	r3, #5
 800bdbe:	d026      	beq.n	800be0e <USART_SetConfig+0x646>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc4:	2b06      	cmp	r3, #6
 800bdc6:	d020      	beq.n	800be0a <USART_SetConfig+0x642>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdcc:	2b07      	cmp	r3, #7
 800bdce:	d01a      	beq.n	800be06 <USART_SetConfig+0x63e>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd4:	2b08      	cmp	r3, #8
 800bdd6:	d014      	beq.n	800be02 <USART_SetConfig+0x63a>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bddc:	2b09      	cmp	r3, #9
 800bdde:	d00e      	beq.n	800bdfe <USART_SetConfig+0x636>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde4:	2b0a      	cmp	r3, #10
 800bde6:	d008      	beq.n	800bdfa <USART_SetConfig+0x632>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdec:	2b0b      	cmp	r3, #11
 800bdee:	d102      	bne.n	800bdf6 <USART_SetConfig+0x62e>
 800bdf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bdf4:	e01b      	b.n	800be2e <USART_SetConfig+0x666>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e019      	b.n	800be2e <USART_SetConfig+0x666>
 800bdfa:	2380      	movs	r3, #128	@ 0x80
 800bdfc:	e017      	b.n	800be2e <USART_SetConfig+0x666>
 800bdfe:	2340      	movs	r3, #64	@ 0x40
 800be00:	e015      	b.n	800be2e <USART_SetConfig+0x666>
 800be02:	2320      	movs	r3, #32
 800be04:	e013      	b.n	800be2e <USART_SetConfig+0x666>
 800be06:	2310      	movs	r3, #16
 800be08:	e011      	b.n	800be2e <USART_SetConfig+0x666>
 800be0a:	230c      	movs	r3, #12
 800be0c:	e00f      	b.n	800be2e <USART_SetConfig+0x666>
 800be0e:	230a      	movs	r3, #10
 800be10:	e00d      	b.n	800be2e <USART_SetConfig+0x666>
 800be12:	2308      	movs	r3, #8
 800be14:	e00b      	b.n	800be2e <USART_SetConfig+0x666>
 800be16:	2306      	movs	r3, #6
 800be18:	e009      	b.n	800be2e <USART_SetConfig+0x666>
 800be1a:	bf00      	nop
 800be1c:	40011c00 	.word	0x40011c00
 800be20:	58024400 	.word	0x58024400
 800be24:	2304      	movs	r3, #4
 800be26:	e002      	b.n	800be2e <USART_SetConfig+0x666>
 800be28:	2302      	movs	r3, #2
 800be2a:	e000      	b.n	800be2e <USART_SetConfig+0x666>
 800be2c:	2301      	movs	r3, #1
 800be2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be30:	fbb2 f3f3 	udiv	r3, r2, r3
 800be34:	005a      	lsls	r2, r3, #1
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	085b      	lsrs	r3, r3, #1
 800be3c:	441a      	add	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	fbb2 f3f3 	udiv	r3, r2, r3
 800be46:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800be48:	e231      	b.n	800c2ae <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be4a:	f107 0318 	add.w	r3, r7, #24
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fa fea4 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800be54:	69fa      	ldr	r2, [r7, #28]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d044      	beq.n	800bee8 <USART_SetConfig+0x720>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be62:	2b01      	cmp	r3, #1
 800be64:	d03e      	beq.n	800bee4 <USART_SetConfig+0x71c>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be6a:	2b02      	cmp	r3, #2
 800be6c:	d038      	beq.n	800bee0 <USART_SetConfig+0x718>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be72:	2b03      	cmp	r3, #3
 800be74:	d032      	beq.n	800bedc <USART_SetConfig+0x714>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be7a:	2b04      	cmp	r3, #4
 800be7c:	d02c      	beq.n	800bed8 <USART_SetConfig+0x710>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be82:	2b05      	cmp	r3, #5
 800be84:	d026      	beq.n	800bed4 <USART_SetConfig+0x70c>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be8a:	2b06      	cmp	r3, #6
 800be8c:	d020      	beq.n	800bed0 <USART_SetConfig+0x708>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be92:	2b07      	cmp	r3, #7
 800be94:	d01a      	beq.n	800becc <USART_SetConfig+0x704>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be9a:	2b08      	cmp	r3, #8
 800be9c:	d014      	beq.n	800bec8 <USART_SetConfig+0x700>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea2:	2b09      	cmp	r3, #9
 800bea4:	d00e      	beq.n	800bec4 <USART_SetConfig+0x6fc>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beaa:	2b0a      	cmp	r3, #10
 800beac:	d008      	beq.n	800bec0 <USART_SetConfig+0x6f8>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beb2:	2b0b      	cmp	r3, #11
 800beb4:	d102      	bne.n	800bebc <USART_SetConfig+0x6f4>
 800beb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800beba:	e016      	b.n	800beea <USART_SetConfig+0x722>
 800bebc:	2301      	movs	r3, #1
 800bebe:	e014      	b.n	800beea <USART_SetConfig+0x722>
 800bec0:	2380      	movs	r3, #128	@ 0x80
 800bec2:	e012      	b.n	800beea <USART_SetConfig+0x722>
 800bec4:	2340      	movs	r3, #64	@ 0x40
 800bec6:	e010      	b.n	800beea <USART_SetConfig+0x722>
 800bec8:	2320      	movs	r3, #32
 800beca:	e00e      	b.n	800beea <USART_SetConfig+0x722>
 800becc:	2310      	movs	r3, #16
 800bece:	e00c      	b.n	800beea <USART_SetConfig+0x722>
 800bed0:	230c      	movs	r3, #12
 800bed2:	e00a      	b.n	800beea <USART_SetConfig+0x722>
 800bed4:	230a      	movs	r3, #10
 800bed6:	e008      	b.n	800beea <USART_SetConfig+0x722>
 800bed8:	2308      	movs	r3, #8
 800beda:	e006      	b.n	800beea <USART_SetConfig+0x722>
 800bedc:	2306      	movs	r3, #6
 800bede:	e004      	b.n	800beea <USART_SetConfig+0x722>
 800bee0:	2304      	movs	r3, #4
 800bee2:	e002      	b.n	800beea <USART_SetConfig+0x722>
 800bee4:	2302      	movs	r3, #2
 800bee6:	e000      	b.n	800beea <USART_SetConfig+0x722>
 800bee8:	2301      	movs	r3, #1
 800beea:	fbb2 f3f3 	udiv	r3, r2, r3
 800beee:	005a      	lsls	r2, r3, #1
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	085b      	lsrs	r3, r3, #1
 800bef6:	441a      	add	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf00:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800bf02:	e1d4      	b.n	800c2ae <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf04:	f107 030c 	add.w	r3, r7, #12
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fa ff9b 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d044      	beq.n	800bfa2 <USART_SetConfig+0x7da>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d03e      	beq.n	800bf9e <USART_SetConfig+0x7d6>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d038      	beq.n	800bf9a <USART_SetConfig+0x7d2>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d032      	beq.n	800bf96 <USART_SetConfig+0x7ce>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	d02c      	beq.n	800bf92 <USART_SetConfig+0x7ca>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3c:	2b05      	cmp	r3, #5
 800bf3e:	d026      	beq.n	800bf8e <USART_SetConfig+0x7c6>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf44:	2b06      	cmp	r3, #6
 800bf46:	d020      	beq.n	800bf8a <USART_SetConfig+0x7c2>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf4c:	2b07      	cmp	r3, #7
 800bf4e:	d01a      	beq.n	800bf86 <USART_SetConfig+0x7be>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf54:	2b08      	cmp	r3, #8
 800bf56:	d014      	beq.n	800bf82 <USART_SetConfig+0x7ba>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf5c:	2b09      	cmp	r3, #9
 800bf5e:	d00e      	beq.n	800bf7e <USART_SetConfig+0x7b6>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf64:	2b0a      	cmp	r3, #10
 800bf66:	d008      	beq.n	800bf7a <USART_SetConfig+0x7b2>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf6c:	2b0b      	cmp	r3, #11
 800bf6e:	d102      	bne.n	800bf76 <USART_SetConfig+0x7ae>
 800bf70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf74:	e016      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e014      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf7a:	2380      	movs	r3, #128	@ 0x80
 800bf7c:	e012      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf7e:	2340      	movs	r3, #64	@ 0x40
 800bf80:	e010      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf82:	2320      	movs	r3, #32
 800bf84:	e00e      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf86:	2310      	movs	r3, #16
 800bf88:	e00c      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf8a:	230c      	movs	r3, #12
 800bf8c:	e00a      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf8e:	230a      	movs	r3, #10
 800bf90:	e008      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf92:	2308      	movs	r3, #8
 800bf94:	e006      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf96:	2306      	movs	r3, #6
 800bf98:	e004      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf9a:	2304      	movs	r3, #4
 800bf9c:	e002      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	e000      	b.n	800bfa4 <USART_SetConfig+0x7dc>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa8:	005a      	lsls	r2, r3, #1
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	085b      	lsrs	r3, r3, #1
 800bfb0:	441a      	add	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfba:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800bfbc:	e177      	b.n	800c2ae <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfbe:	4b8a      	ldr	r3, [pc, #552]	@ (800c1e8 <USART_SetConfig+0xa20>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 0320 	and.w	r3, r3, #32
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d05d      	beq.n	800c086 <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800bfca:	4b87      	ldr	r3, [pc, #540]	@ (800c1e8 <USART_SetConfig+0xa20>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	08db      	lsrs	r3, r3, #3
 800bfd0:	f003 0303 	and.w	r3, r3, #3
 800bfd4:	4a85      	ldr	r2, [pc, #532]	@ (800c1ec <USART_SetConfig+0xa24>)
 800bfd6:	40da      	lsrs	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d044      	beq.n	800c06a <USART_SetConfig+0x8a2>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d03e      	beq.n	800c066 <USART_SetConfig+0x89e>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d038      	beq.n	800c062 <USART_SetConfig+0x89a>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff4:	2b03      	cmp	r3, #3
 800bff6:	d032      	beq.n	800c05e <USART_SetConfig+0x896>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bffc:	2b04      	cmp	r3, #4
 800bffe:	d02c      	beq.n	800c05a <USART_SetConfig+0x892>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c004:	2b05      	cmp	r3, #5
 800c006:	d026      	beq.n	800c056 <USART_SetConfig+0x88e>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c00c:	2b06      	cmp	r3, #6
 800c00e:	d020      	beq.n	800c052 <USART_SetConfig+0x88a>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c014:	2b07      	cmp	r3, #7
 800c016:	d01a      	beq.n	800c04e <USART_SetConfig+0x886>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c01c:	2b08      	cmp	r3, #8
 800c01e:	d014      	beq.n	800c04a <USART_SetConfig+0x882>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c024:	2b09      	cmp	r3, #9
 800c026:	d00e      	beq.n	800c046 <USART_SetConfig+0x87e>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c02c:	2b0a      	cmp	r3, #10
 800c02e:	d008      	beq.n	800c042 <USART_SetConfig+0x87a>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c034:	2b0b      	cmp	r3, #11
 800c036:	d102      	bne.n	800c03e <USART_SetConfig+0x876>
 800c038:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c03c:	e016      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c03e:	2301      	movs	r3, #1
 800c040:	e014      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c042:	2380      	movs	r3, #128	@ 0x80
 800c044:	e012      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c046:	2340      	movs	r3, #64	@ 0x40
 800c048:	e010      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c04a:	2320      	movs	r3, #32
 800c04c:	e00e      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c04e:	2310      	movs	r3, #16
 800c050:	e00c      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c052:	230c      	movs	r3, #12
 800c054:	e00a      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c056:	230a      	movs	r3, #10
 800c058:	e008      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c05a:	2308      	movs	r3, #8
 800c05c:	e006      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c05e:	2306      	movs	r3, #6
 800c060:	e004      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c062:	2304      	movs	r3, #4
 800c064:	e002      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c066:	2302      	movs	r3, #2
 800c068:	e000      	b.n	800c06c <USART_SetConfig+0x8a4>
 800c06a:	2301      	movs	r3, #1
 800c06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c070:	005a      	lsls	r2, r3, #1
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	085b      	lsrs	r3, r3, #1
 800c078:	441a      	add	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c082:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800c084:	e113      	b.n	800c2ae <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d044      	beq.n	800c118 <USART_SetConfig+0x950>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c092:	2b01      	cmp	r3, #1
 800c094:	d03e      	beq.n	800c114 <USART_SetConfig+0x94c>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d038      	beq.n	800c110 <USART_SetConfig+0x948>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	d032      	beq.n	800c10c <USART_SetConfig+0x944>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0aa:	2b04      	cmp	r3, #4
 800c0ac:	d02c      	beq.n	800c108 <USART_SetConfig+0x940>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b2:	2b05      	cmp	r3, #5
 800c0b4:	d026      	beq.n	800c104 <USART_SetConfig+0x93c>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ba:	2b06      	cmp	r3, #6
 800c0bc:	d020      	beq.n	800c100 <USART_SetConfig+0x938>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c2:	2b07      	cmp	r3, #7
 800c0c4:	d01a      	beq.n	800c0fc <USART_SetConfig+0x934>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ca:	2b08      	cmp	r3, #8
 800c0cc:	d014      	beq.n	800c0f8 <USART_SetConfig+0x930>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d2:	2b09      	cmp	r3, #9
 800c0d4:	d00e      	beq.n	800c0f4 <USART_SetConfig+0x92c>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0da:	2b0a      	cmp	r3, #10
 800c0dc:	d008      	beq.n	800c0f0 <USART_SetConfig+0x928>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e2:	2b0b      	cmp	r3, #11
 800c0e4:	d102      	bne.n	800c0ec <USART_SetConfig+0x924>
 800c0e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0ea:	e016      	b.n	800c11a <USART_SetConfig+0x952>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e014      	b.n	800c11a <USART_SetConfig+0x952>
 800c0f0:	2380      	movs	r3, #128	@ 0x80
 800c0f2:	e012      	b.n	800c11a <USART_SetConfig+0x952>
 800c0f4:	2340      	movs	r3, #64	@ 0x40
 800c0f6:	e010      	b.n	800c11a <USART_SetConfig+0x952>
 800c0f8:	2320      	movs	r3, #32
 800c0fa:	e00e      	b.n	800c11a <USART_SetConfig+0x952>
 800c0fc:	2310      	movs	r3, #16
 800c0fe:	e00c      	b.n	800c11a <USART_SetConfig+0x952>
 800c100:	230c      	movs	r3, #12
 800c102:	e00a      	b.n	800c11a <USART_SetConfig+0x952>
 800c104:	230a      	movs	r3, #10
 800c106:	e008      	b.n	800c11a <USART_SetConfig+0x952>
 800c108:	2308      	movs	r3, #8
 800c10a:	e006      	b.n	800c11a <USART_SetConfig+0x952>
 800c10c:	2306      	movs	r3, #6
 800c10e:	e004      	b.n	800c11a <USART_SetConfig+0x952>
 800c110:	2304      	movs	r3, #4
 800c112:	e002      	b.n	800c11a <USART_SetConfig+0x952>
 800c114:	2302      	movs	r3, #2
 800c116:	e000      	b.n	800c11a <USART_SetConfig+0x952>
 800c118:	2301      	movs	r3, #1
 800c11a:	4a34      	ldr	r2, [pc, #208]	@ (800c1ec <USART_SetConfig+0xa24>)
 800c11c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c120:	005a      	lsls	r2, r3, #1
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	085b      	lsrs	r3, r3, #1
 800c128:	441a      	add	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c132:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c134:	e0bb      	b.n	800c2ae <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d044      	beq.n	800c1c8 <USART_SetConfig+0xa00>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c142:	2b01      	cmp	r3, #1
 800c144:	d03e      	beq.n	800c1c4 <USART_SetConfig+0x9fc>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c14a:	2b02      	cmp	r3, #2
 800c14c:	d038      	beq.n	800c1c0 <USART_SetConfig+0x9f8>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c152:	2b03      	cmp	r3, #3
 800c154:	d032      	beq.n	800c1bc <USART_SetConfig+0x9f4>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	d02c      	beq.n	800c1b8 <USART_SetConfig+0x9f0>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c162:	2b05      	cmp	r3, #5
 800c164:	d026      	beq.n	800c1b4 <USART_SetConfig+0x9ec>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c16a:	2b06      	cmp	r3, #6
 800c16c:	d020      	beq.n	800c1b0 <USART_SetConfig+0x9e8>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c172:	2b07      	cmp	r3, #7
 800c174:	d01a      	beq.n	800c1ac <USART_SetConfig+0x9e4>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c17a:	2b08      	cmp	r3, #8
 800c17c:	d014      	beq.n	800c1a8 <USART_SetConfig+0x9e0>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c182:	2b09      	cmp	r3, #9
 800c184:	d00e      	beq.n	800c1a4 <USART_SetConfig+0x9dc>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c18a:	2b0a      	cmp	r3, #10
 800c18c:	d008      	beq.n	800c1a0 <USART_SetConfig+0x9d8>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c192:	2b0b      	cmp	r3, #11
 800c194:	d102      	bne.n	800c19c <USART_SetConfig+0x9d4>
 800c196:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c19a:	e016      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c19c:	2301      	movs	r3, #1
 800c19e:	e014      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1a0:	2380      	movs	r3, #128	@ 0x80
 800c1a2:	e012      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1a4:	2340      	movs	r3, #64	@ 0x40
 800c1a6:	e010      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1a8:	2320      	movs	r3, #32
 800c1aa:	e00e      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1ac:	2310      	movs	r3, #16
 800c1ae:	e00c      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1b0:	230c      	movs	r3, #12
 800c1b2:	e00a      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1b4:	230a      	movs	r3, #10
 800c1b6:	e008      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1b8:	2308      	movs	r3, #8
 800c1ba:	e006      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1bc:	2306      	movs	r3, #6
 800c1be:	e004      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1c0:	2304      	movs	r3, #4
 800c1c2:	e002      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	e000      	b.n	800c1ca <USART_SetConfig+0xa02>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	4a09      	ldr	r2, [pc, #36]	@ (800c1f0 <USART_SetConfig+0xa28>)
 800c1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1d0:	005a      	lsls	r2, r3, #1
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	085b      	lsrs	r3, r3, #1
 800c1d8:	441a      	add	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c1e4:	e063      	b.n	800c2ae <USART_SetConfig+0xae6>
 800c1e6:	bf00      	nop
 800c1e8:	58024400 	.word	0x58024400
 800c1ec:	03d09000 	.word	0x03d09000
 800c1f0:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d044      	beq.n	800c286 <USART_SetConfig+0xabe>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c200:	2b01      	cmp	r3, #1
 800c202:	d03e      	beq.n	800c282 <USART_SetConfig+0xaba>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d038      	beq.n	800c27e <USART_SetConfig+0xab6>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c210:	2b03      	cmp	r3, #3
 800c212:	d032      	beq.n	800c27a <USART_SetConfig+0xab2>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c218:	2b04      	cmp	r3, #4
 800c21a:	d02c      	beq.n	800c276 <USART_SetConfig+0xaae>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c220:	2b05      	cmp	r3, #5
 800c222:	d026      	beq.n	800c272 <USART_SetConfig+0xaaa>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c228:	2b06      	cmp	r3, #6
 800c22a:	d020      	beq.n	800c26e <USART_SetConfig+0xaa6>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c230:	2b07      	cmp	r3, #7
 800c232:	d01a      	beq.n	800c26a <USART_SetConfig+0xaa2>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c238:	2b08      	cmp	r3, #8
 800c23a:	d014      	beq.n	800c266 <USART_SetConfig+0xa9e>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c240:	2b09      	cmp	r3, #9
 800c242:	d00e      	beq.n	800c262 <USART_SetConfig+0xa9a>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c248:	2b0a      	cmp	r3, #10
 800c24a:	d008      	beq.n	800c25e <USART_SetConfig+0xa96>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c250:	2b0b      	cmp	r3, #11
 800c252:	d102      	bne.n	800c25a <USART_SetConfig+0xa92>
 800c254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c258:	e016      	b.n	800c288 <USART_SetConfig+0xac0>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e014      	b.n	800c288 <USART_SetConfig+0xac0>
 800c25e:	2380      	movs	r3, #128	@ 0x80
 800c260:	e012      	b.n	800c288 <USART_SetConfig+0xac0>
 800c262:	2340      	movs	r3, #64	@ 0x40
 800c264:	e010      	b.n	800c288 <USART_SetConfig+0xac0>
 800c266:	2320      	movs	r3, #32
 800c268:	e00e      	b.n	800c288 <USART_SetConfig+0xac0>
 800c26a:	2310      	movs	r3, #16
 800c26c:	e00c      	b.n	800c288 <USART_SetConfig+0xac0>
 800c26e:	230c      	movs	r3, #12
 800c270:	e00a      	b.n	800c288 <USART_SetConfig+0xac0>
 800c272:	230a      	movs	r3, #10
 800c274:	e008      	b.n	800c288 <USART_SetConfig+0xac0>
 800c276:	2308      	movs	r3, #8
 800c278:	e006      	b.n	800c288 <USART_SetConfig+0xac0>
 800c27a:	2306      	movs	r3, #6
 800c27c:	e004      	b.n	800c288 <USART_SetConfig+0xac0>
 800c27e:	2304      	movs	r3, #4
 800c280:	e002      	b.n	800c288 <USART_SetConfig+0xac0>
 800c282:	2302      	movs	r3, #2
 800c284:	e000      	b.n	800c288 <USART_SetConfig+0xac0>
 800c286:	2301      	movs	r3, #1
 800c288:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800c28c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c290:	005a      	lsls	r2, r3, #1
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	085b      	lsrs	r3, r3, #1
 800c298:	441a      	add	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2a2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c2a4:	e003      	b.n	800c2ae <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800c2ac:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b0:	2b0f      	cmp	r3, #15
 800c2b2:	d916      	bls.n	800c2e2 <USART_SetConfig+0xb1a>
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2ba:	d212      	bcs.n	800c2e2 <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	f023 030f 	bic.w	r3, r3, #15
 800c2c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	085b      	lsrs	r3, r3, #1
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	f003 0307 	and.w	r3, r3, #7
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c2de:	60da      	str	r2, [r3, #12]
 800c2e0:	e002      	b.n	800c2e8 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800c300:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800c304:	4618      	mov	r0, r3
 800c306:	3738      	adds	r7, #56	@ 0x38
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af02      	add	r7, sp, #8
 800c312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c31a:	f7f6 fbed 	bl	8002af8 <HAL_GetTick>
 800c31e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f003 0308 	and.w	r3, r3, #8
 800c32a:	2b08      	cmp	r3, #8
 800c32c:	d10e      	bne.n	800c34c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c32e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f7ff fa0d 	bl	800b75c <USART_WaitOnFlagUntilTimeout>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d001      	beq.n	800c34c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c348:	2303      	movs	r3, #3
 800c34a:	e01e      	b.n	800c38a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 0304 	and.w	r3, r3, #4
 800c356:	2b04      	cmp	r3, #4
 800c358:	d10e      	bne.n	800c378 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c35a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff f9f7 	bl	800b75c <USART_WaitOnFlagUntilTimeout>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d001      	beq.n	800c378 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c374:	2303      	movs	r3, #3
 800c376:	e008      	b.n	800c38a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800c392:	b480      	push	{r7}
 800c394:	b085      	sub	sp, #20
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d101      	bne.n	800c3a8 <HAL_USARTEx_EnableSlaveMode+0x16>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e043      	b.n	800c430 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f022 0201 	bic.w	r2, r2, #1
 800c3ce:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c3de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	689a      	ldr	r2, [r3, #8]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c3ee:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f042 0201 	orr.w	r2, r2, #1
 800c3fe:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f042 0201 	orr.w	r2, r2, #1
 800c424:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d101      	bne.n	800c454 <HAL_USARTEx_ConfigNSS+0x18>
 800c450:	2302      	movs	r3, #2
 800c452:	e02a      	b.n	800c4aa <HAL_USARTEx_ConfigNSS+0x6e>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2202      	movs	r2, #2
 800c460:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f022 0201 	bic.w	r2, r2, #1
 800c47a:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	f023 0108 	bic.w	r1, r3, #8
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	430a      	orrs	r2, r1
 800c48e:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3714      	adds	r7, #20
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b085      	sub	sp, #20
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d101      	bne.n	800c4cc <HAL_USARTEx_DisableFifoMode+0x16>
 800c4c8:	2302      	movs	r3, #2
 800c4ca:	e027      	b.n	800c51c <HAL_USARTEx_DisableFifoMode+0x66>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f022 0201 	bic.w	r2, r2, #1
 800c4f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c4fa:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d101      	bne.n	800c540 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800c53c:	2302      	movs	r3, #2
 800c53e:	e02d      	b.n	800c59c <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2201      	movs	r2, #1
 800c544:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2202      	movs	r2, #2
 800c54c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0201 	bic.w	r2, r2, #1
 800c566:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	430a      	orrs	r2, r1
 800c57a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f84f 	bl	800c620 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d101      	bne.n	800c5bc <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	e02d      	b.n	800c618 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f022 0201 	bic.w	r2, r2, #1
 800c5e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	683a      	ldr	r2, [r7, #0]
 800c5f4:	430a      	orrs	r2, r1
 800c5f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f811 	bl	800c620 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2201      	movs	r2, #1
 800c60a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d106      	bne.n	800c63e <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2201      	movs	r2, #1
 800c63a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c63c:	e02f      	b.n	800c69e <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c63e:	2310      	movs	r3, #16
 800c640:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c642:	2310      	movs	r3, #16
 800c644:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800c64c:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	f003 0307 	and.w	r3, r3, #7
 800c654:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800c65c:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	f003 0307 	and.w	r3, r3, #7
 800c664:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c666:	7bbb      	ldrb	r3, [r7, #14]
 800c668:	7b3a      	ldrb	r2, [r7, #12]
 800c66a:	4910      	ldr	r1, [pc, #64]	@ (800c6ac <USARTEx_SetNbDataToProcess+0x8c>)
 800c66c:	5c8a      	ldrb	r2, [r1, r2]
 800c66e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800c672:	7b3a      	ldrb	r2, [r7, #12]
 800c674:	490e      	ldr	r1, [pc, #56]	@ (800c6b0 <USARTEx_SetNbDataToProcess+0x90>)
 800c676:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c678:	fb93 f3f2 	sdiv	r3, r3, r2
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c682:	7bfb      	ldrb	r3, [r7, #15]
 800c684:	7b7a      	ldrb	r2, [r7, #13]
 800c686:	4909      	ldr	r1, [pc, #36]	@ (800c6ac <USARTEx_SetNbDataToProcess+0x8c>)
 800c688:	5c8a      	ldrb	r2, [r1, r2]
 800c68a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800c68e:	7b7a      	ldrb	r2, [r7, #13]
 800c690:	4907      	ldr	r1, [pc, #28]	@ (800c6b0 <USARTEx_SetNbDataToProcess+0x90>)
 800c692:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c694:	fb93 f3f2 	sdiv	r3, r3, r2
 800c698:	b29a      	uxth	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800c69e:	bf00      	nop
 800c6a0:	3714      	adds	r7, #20
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	080123e0 	.word	0x080123e0
 800c6b0:	080123e8 	.word	0x080123e8

0800c6b4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c6b4:	b084      	sub	sp, #16
 800c6b6:	b480      	push	{r7}
 800c6b8:	b085      	sub	sp, #20
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	f107 001c 	add.w	r0, r7, #28
 800c6c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c6ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c6ce:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800c6d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800c6d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800c6da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	4b07      	ldr	r3, [pc, #28]	@ (800c704 <SDMMC_Init+0x50>)
 800c6e8:	4013      	ands	r3, r2
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	431a      	orrs	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	b004      	add	sp, #16
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	ffc02c00 	.word	0xffc02c00

0800c708 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c716:	4618      	mov	r0, r3
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c722:	b480      	push	{r7}
 800c724:	b083      	sub	sp, #12
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f043 0203 	orr.w	r2, r3, #3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	370c      	adds	r7, #12
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr

0800c766 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c766:	b480      	push	{r7}
 800c768:	b083      	sub	sp, #12
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f003 0303 	and.w	r3, r3, #3
}
 800c776:	4618      	mov	r0, r3
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
	...

0800c784 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c7a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c7a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c7ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68da      	ldr	r2, [r3, #12]
 800c7ba:	4b06      	ldr	r3, [pc, #24]	@ (800c7d4 <SDMMC_SendCommand+0x50>)
 800c7bc:	4013      	ands	r3, r2
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	431a      	orrs	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	fffee0c0 	.word	0xfffee0c0

0800c7d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	b2db      	uxtb	r3, r3
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b085      	sub	sp, #20
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3314      	adds	r3, #20
 800c800:	461a      	mov	r2, r3
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	4413      	add	r3, r2
 800c806:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3714      	adds	r7, #20
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c822:	2300      	movs	r3, #0
 800c824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	685a      	ldr	r2, [r3, #4]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c83e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800c844:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800c84a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	4313      	orrs	r3, r2
 800c850:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c856:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	431a      	orrs	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c862:	2300      	movs	r3, #0

}
 800c864:	4618      	mov	r0, r3
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b088      	sub	sp, #32
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c87e:	2310      	movs	r3, #16
 800c880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c882:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c888:	2300      	movs	r3, #0
 800c88a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c88c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c890:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c892:	f107 0308 	add.w	r3, r7, #8
 800c896:	4619      	mov	r1, r3
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f7ff ff73 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c89e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8a2:	2110      	movs	r1, #16
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fa5f 	bl	800cd68 <SDMMC_GetCmdResp1>
 800c8aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8ac:	69fb      	ldr	r3, [r7, #28]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3720      	adds	r7, #32
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b088      	sub	sp, #32
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c8c4:	2311      	movs	r3, #17
 800c8c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c8cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c8d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8d8:	f107 0308 	add.w	r3, r7, #8
 800c8dc:	4619      	mov	r1, r3
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f7ff ff50 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c8e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8e8:	2111      	movs	r1, #17
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fa3c 	bl	800cd68 <SDMMC_GetCmdResp1>
 800c8f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8f2:	69fb      	ldr	r3, [r7, #28]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3720      	adds	r7, #32
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b088      	sub	sp, #32
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c90a:	2312      	movs	r3, #18
 800c90c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c90e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c914:	2300      	movs	r3, #0
 800c916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c91c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c91e:	f107 0308 	add.w	r3, r7, #8
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7ff ff2d 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c92a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c92e:	2112      	movs	r1, #18
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fa19 	bl	800cd68 <SDMMC_GetCmdResp1>
 800c936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c938:	69fb      	ldr	r3, [r7, #28]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3720      	adds	r7, #32
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b088      	sub	sp, #32
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c950:	2318      	movs	r3, #24
 800c952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c95a:	2300      	movs	r3, #0
 800c95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c95e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c964:	f107 0308 	add.w	r3, r7, #8
 800c968:	4619      	mov	r1, r3
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff ff0a 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c970:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c974:	2118      	movs	r1, #24
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f9f6 	bl	800cd68 <SDMMC_GetCmdResp1>
 800c97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c97e:	69fb      	ldr	r3, [r7, #28]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3720      	adds	r7, #32
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b088      	sub	sp, #32
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c996:	2319      	movs	r3, #25
 800c998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c99a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c99e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9aa:	f107 0308 	add.w	r3, r7, #8
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff fee7 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c9b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9ba:	2119      	movs	r1, #25
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 f9d3 	bl	800cd68 <SDMMC_GetCmdResp1>
 800c9c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9c4:	69fb      	ldr	r3, [r7, #28]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3720      	adds	r7, #32
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
	...

0800c9d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b088      	sub	sp, #32
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c9dc:	230c      	movs	r3, #12
 800c9de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c9e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9ee:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	68db      	ldr	r3, [r3, #12]
 800c9f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca08:	f107 0308 	add.w	r3, r7, #8
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff feb8 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ca14:	4a0b      	ldr	r2, [pc, #44]	@ (800ca44 <SDMMC_CmdStopTransfer+0x74>)
 800ca16:	210c      	movs	r1, #12
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 f9a5 	bl	800cd68 <SDMMC_GetCmdResp1>
 800ca1e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca32:	d101      	bne.n	800ca38 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ca34:	2300      	movs	r3, #0
 800ca36:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ca38:	69fb      	ldr	r3, [r7, #28]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3720      	adds	r7, #32
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	05f5e100 	.word	0x05f5e100

0800ca48 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b088      	sub	sp, #32
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ca56:	2307      	movs	r3, #7
 800ca58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca60:	2300      	movs	r3, #0
 800ca62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca6a:	f107 0308 	add.w	r3, r7, #8
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff fe87 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ca76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca7a:	2107      	movs	r1, #7
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f973 	bl	800cd68 <SDMMC_GetCmdResp1>
 800ca82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca84:	69fb      	ldr	r3, [r7, #28]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3720      	adds	r7, #32
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b088      	sub	sp, #32
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ca96:	2300      	movs	r3, #0
 800ca98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caa2:	2300      	movs	r3, #0
 800caa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800caaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caac:	f107 0308 	add.w	r3, r7, #8
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fe66 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fb97 	bl	800d1ec <SDMMC_GetCmdError>
 800cabe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cac0:	69fb      	ldr	r3, [r7, #28]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3720      	adds	r7, #32
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b088      	sub	sp, #32
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cad2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cad6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cad8:	2308      	movs	r3, #8
 800cada:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cadc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cae2:	2300      	movs	r3, #0
 800cae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800caea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caec:	f107 0308 	add.w	r3, r7, #8
 800caf0:	4619      	mov	r1, r3
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7ff fe46 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fb29 	bl	800d150 <SDMMC_GetCmdResp7>
 800cafe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb00:	69fb      	ldr	r3, [r7, #28]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3720      	adds	r7, #32
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b088      	sub	sp, #32
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cb18:	2337      	movs	r3, #55	@ 0x37
 800cb1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb22:	2300      	movs	r3, #0
 800cb24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb2c:	f107 0308 	add.w	r3, r7, #8
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7ff fe26 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cb38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb3c:	2137      	movs	r1, #55	@ 0x37
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f912 	bl	800cd68 <SDMMC_GetCmdResp1>
 800cb44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb46:	69fb      	ldr	r3, [r7, #28]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3720      	adds	r7, #32
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cb5e:	2329      	movs	r3, #41	@ 0x29
 800cb60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb72:	f107 0308 	add.w	r3, r7, #8
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff fe03 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fa2e 	bl	800cfe0 <SDMMC_GetCmdResp3>
 800cb84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb86:	69fb      	ldr	r3, [r7, #28]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3720      	adds	r7, #32
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b088      	sub	sp, #32
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cb9e:	2306      	movs	r3, #6
 800cba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbb2:	f107 0308 	add.w	r3, r7, #8
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff fde3 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cbbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbc2:	2106      	movs	r1, #6
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 f8cf 	bl	800cd68 <SDMMC_GetCmdResp1>
 800cbca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbcc:	69fb      	ldr	r3, [r7, #28]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3720      	adds	r7, #32
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b088      	sub	sp, #32
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cbe2:	2333      	movs	r3, #51	@ 0x33
 800cbe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbec:	2300      	movs	r3, #0
 800cbee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbf6:	f107 0308 	add.w	r3, r7, #8
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff fdc1 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cc02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc06:	2133      	movs	r1, #51	@ 0x33
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f8ad 	bl	800cd68 <SDMMC_GetCmdResp1>
 800cc0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc10:	69fb      	ldr	r3, [r7, #28]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3720      	adds	r7, #32
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b088      	sub	sp, #32
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cc22:	2300      	movs	r3, #0
 800cc24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cc26:	2302      	movs	r3, #2
 800cc28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cc2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cc2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc30:	2300      	movs	r3, #0
 800cc32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc3a:	f107 0308 	add.w	r3, r7, #8
 800cc3e:	4619      	mov	r1, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7ff fd9f 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f980 	bl	800cf4c <SDMMC_GetCmdResp2>
 800cc4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc4e:	69fb      	ldr	r3, [r7, #28]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3720      	adds	r7, #32
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b088      	sub	sp, #32
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cc66:	2309      	movs	r3, #9
 800cc68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cc6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cc6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc70:	2300      	movs	r3, #0
 800cc72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff fd7f 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 f960 	bl	800cf4c <SDMMC_GetCmdResp2>
 800cc8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc8e:	69fb      	ldr	r3, [r7, #28]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3720      	adds	r7, #32
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b088      	sub	sp, #32
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cca2:	2300      	movs	r3, #0
 800cca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cca6:	2303      	movs	r3, #3
 800cca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ccae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ccb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccba:	f107 0308 	add.w	r3, r7, #8
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f7ff fd5f 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	2103      	movs	r1, #3
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f9c8 	bl	800d060 <SDMMC_GetCmdResp6>
 800ccd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccd2:	69fb      	ldr	r3, [r7, #28]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3720      	adds	r7, #32
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b088      	sub	sp, #32
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ccea:	230d      	movs	r3, #13
 800ccec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ccf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ccfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccfe:	f107 0308 	add.w	r3, r7, #8
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff fd3d 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cd0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd0e:	210d      	movs	r1, #13
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f829 	bl	800cd68 <SDMMC_GetCmdResp1>
 800cd16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd18:	69fb      	ldr	r3, [r7, #28]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b088      	sub	sp, #32
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cd2e:	230d      	movs	r3, #13
 800cd30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd42:	f107 0308 	add.w	r3, r7, #8
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff fd1b 	bl	800c784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800cd4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd52:	210d      	movs	r1, #13
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f807 	bl	800cd68 <SDMMC_GetCmdResp1>
 800cd5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd5c:	69fb      	ldr	r3, [r7, #28]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3720      	adds	r7, #32
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
	...

0800cd68 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b088      	sub	sp, #32
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	460b      	mov	r3, r1
 800cd72:	607a      	str	r2, [r7, #4]
 800cd74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cd76:	4b70      	ldr	r3, [pc, #448]	@ (800cf38 <SDMMC_GetCmdResp1+0x1d0>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a70      	ldr	r2, [pc, #448]	@ (800cf3c <SDMMC_GetCmdResp1+0x1d4>)
 800cd7c:	fba2 2303 	umull	r2, r3, r2, r3
 800cd80:	0a5a      	lsrs	r2, r3, #9
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	fb02 f303 	mul.w	r3, r2, r3
 800cd88:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	1e5a      	subs	r2, r3, #1
 800cd8e:	61fa      	str	r2, [r7, #28]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d102      	bne.n	800cd9a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cd98:	e0c9      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd9e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cda0:	69ba      	ldr	r2, [r7, #24]
 800cda2:	4b67      	ldr	r3, [pc, #412]	@ (800cf40 <SDMMC_GetCmdResp1+0x1d8>)
 800cda4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d0ef      	beq.n	800cd8a <SDMMC_GetCmdResp1+0x22>
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d1ea      	bne.n	800cd8a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdb8:	f003 0304 	and.w	r3, r3, #4
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d004      	beq.n	800cdca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2204      	movs	r2, #4
 800cdc4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdc6:	2304      	movs	r3, #4
 800cdc8:	e0b1      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d004      	beq.n	800cde0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cddc:	2301      	movs	r3, #1
 800cdde:	e0a6      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	4a58      	ldr	r2, [pc, #352]	@ (800cf44 <SDMMC_GetCmdResp1+0x1dc>)
 800cde4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f7ff fcf6 	bl	800c7d8 <SDMMC_GetCommandResponse>
 800cdec:	4603      	mov	r3, r0
 800cdee:	461a      	mov	r2, r3
 800cdf0:	7afb      	ldrb	r3, [r7, #11]
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d001      	beq.n	800cdfa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e099      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f7ff fcf8 	bl	800c7f2 <SDMMC_GetResponse>
 800ce02:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ce04:	697a      	ldr	r2, [r7, #20]
 800ce06:	4b50      	ldr	r3, [pc, #320]	@ (800cf48 <SDMMC_GetCmdResp1+0x1e0>)
 800ce08:	4013      	ands	r3, r2
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e08d      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	da02      	bge.n	800ce1e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ce18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ce1c:	e087      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ce28:	2340      	movs	r3, #64	@ 0x40
 800ce2a:	e080      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ce36:	2380      	movs	r3, #128	@ 0x80
 800ce38:	e079      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d002      	beq.n	800ce4a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ce44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce48:	e071      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d002      	beq.n	800ce5a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ce54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce58:	e069      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d002      	beq.n	800ce6a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ce64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce68:	e061      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d002      	beq.n	800ce7a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ce74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ce78:	e059      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ce84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce88:	e051      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d002      	beq.n	800ce9a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ce94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ce98:	e049      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cea4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cea8:	e041      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ceb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ceb8:	e039      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cec4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cec8:	e031      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d002      	beq.n	800ceda <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ced4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ced8:	e029      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cee4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cee8:	e021      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cef4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cef8:	e019      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d002      	beq.n	800cf0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cf04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cf08:	e011      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d002      	beq.n	800cf1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cf14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cf18:	e009      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f003 0308 	and.w	r3, r3, #8
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d002      	beq.n	800cf2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cf24:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800cf28:	e001      	b.n	800cf2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cf2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3720      	adds	r7, #32
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	24000000 	.word	0x24000000
 800cf3c:	10624dd3 	.word	0x10624dd3
 800cf40:	00200045 	.word	0x00200045
 800cf44:	002000c5 	.word	0x002000c5
 800cf48:	fdffe008 	.word	0xfdffe008

0800cf4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cf54:	4b1f      	ldr	r3, [pc, #124]	@ (800cfd4 <SDMMC_GetCmdResp2+0x88>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a1f      	ldr	r2, [pc, #124]	@ (800cfd8 <SDMMC_GetCmdResp2+0x8c>)
 800cf5a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf5e:	0a5b      	lsrs	r3, r3, #9
 800cf60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf64:	fb02 f303 	mul.w	r3, r2, r3
 800cf68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	1e5a      	subs	r2, r3, #1
 800cf6e:	60fa      	str	r2, [r7, #12]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d102      	bne.n	800cf7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf78:	e026      	b.n	800cfc8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf7e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d0ef      	beq.n	800cf6a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1ea      	bne.n	800cf6a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf98:	f003 0304 	and.w	r3, r3, #4
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d004      	beq.n	800cfaa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2204      	movs	r2, #4
 800cfa4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cfa6:	2304      	movs	r3, #4
 800cfa8:	e00e      	b.n	800cfc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfae:	f003 0301 	and.w	r3, r3, #1
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d004      	beq.n	800cfc0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e003      	b.n	800cfc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a06      	ldr	r2, [pc, #24]	@ (800cfdc <SDMMC_GetCmdResp2+0x90>)
 800cfc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3714      	adds	r7, #20
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr
 800cfd4:	24000000 	.word	0x24000000
 800cfd8:	10624dd3 	.word	0x10624dd3
 800cfdc:	002000c5 	.word	0x002000c5

0800cfe0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cfe8:	4b1a      	ldr	r3, [pc, #104]	@ (800d054 <SDMMC_GetCmdResp3+0x74>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a1a      	ldr	r2, [pc, #104]	@ (800d058 <SDMMC_GetCmdResp3+0x78>)
 800cfee:	fba2 2303 	umull	r2, r3, r2, r3
 800cff2:	0a5b      	lsrs	r3, r3, #9
 800cff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cff8:	fb02 f303 	mul.w	r3, r2, r3
 800cffc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	1e5a      	subs	r2, r3, #1
 800d002:	60fa      	str	r2, [r7, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d102      	bne.n	800d00e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d008:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d00c:	e01b      	b.n	800d046 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d012:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d0ef      	beq.n	800cffe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1ea      	bne.n	800cffe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d02c:	f003 0304 	and.w	r3, r3, #4
 800d030:	2b00      	cmp	r3, #0
 800d032:	d004      	beq.n	800d03e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2204      	movs	r2, #4
 800d038:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d03a:	2304      	movs	r3, #4
 800d03c:	e003      	b.n	800d046 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4a06      	ldr	r2, [pc, #24]	@ (800d05c <SDMMC_GetCmdResp3+0x7c>)
 800d042:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d044:	2300      	movs	r3, #0
}
 800d046:	4618      	mov	r0, r3
 800d048:	3714      	adds	r7, #20
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	24000000 	.word	0x24000000
 800d058:	10624dd3 	.word	0x10624dd3
 800d05c:	002000c5 	.word	0x002000c5

0800d060 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b088      	sub	sp, #32
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	460b      	mov	r3, r1
 800d06a:	607a      	str	r2, [r7, #4]
 800d06c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d06e:	4b35      	ldr	r3, [pc, #212]	@ (800d144 <SDMMC_GetCmdResp6+0xe4>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a35      	ldr	r2, [pc, #212]	@ (800d148 <SDMMC_GetCmdResp6+0xe8>)
 800d074:	fba2 2303 	umull	r2, r3, r2, r3
 800d078:	0a5b      	lsrs	r3, r3, #9
 800d07a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d07e:	fb02 f303 	mul.w	r3, r2, r3
 800d082:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	1e5a      	subs	r2, r3, #1
 800d088:	61fa      	str	r2, [r7, #28]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d102      	bne.n	800d094 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d08e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d092:	e052      	b.n	800d13a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d098:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d0ef      	beq.n	800d084 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d1ea      	bne.n	800d084 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0b2:	f003 0304 	and.w	r3, r3, #4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d004      	beq.n	800d0c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2204      	movs	r2, #4
 800d0be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0c0:	2304      	movs	r3, #4
 800d0c2:	e03a      	b.n	800d13a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0c8:	f003 0301 	and.w	r3, r3, #1
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d004      	beq.n	800d0da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e02f      	b.n	800d13a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	f7ff fb7c 	bl	800c7d8 <SDMMC_GetCommandResponse>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	7afb      	ldrb	r3, [r7, #11]
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d001      	beq.n	800d0ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e025      	b.n	800d13a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	4a16      	ldr	r2, [pc, #88]	@ (800d14c <SDMMC_GetCmdResp6+0xec>)
 800d0f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f7ff fb7b 	bl	800c7f2 <SDMMC_GetResponse>
 800d0fc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d104:	2b00      	cmp	r3, #0
 800d106:	d106      	bne.n	800d116 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	0c1b      	lsrs	r3, r3, #16
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d112:	2300      	movs	r3, #0
 800d114:	e011      	b.n	800d13a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d120:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d124:	e009      	b.n	800d13a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d134:	e001      	b.n	800d13a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d136:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3720      	adds	r7, #32
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	24000000 	.word	0x24000000
 800d148:	10624dd3 	.word	0x10624dd3
 800d14c:	002000c5 	.word	0x002000c5

0800d150 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d150:	b480      	push	{r7}
 800d152:	b085      	sub	sp, #20
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d158:	4b22      	ldr	r3, [pc, #136]	@ (800d1e4 <SDMMC_GetCmdResp7+0x94>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a22      	ldr	r2, [pc, #136]	@ (800d1e8 <SDMMC_GetCmdResp7+0x98>)
 800d15e:	fba2 2303 	umull	r2, r3, r2, r3
 800d162:	0a5b      	lsrs	r3, r3, #9
 800d164:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d168:	fb02 f303 	mul.w	r3, r2, r3
 800d16c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	1e5a      	subs	r2, r3, #1
 800d172:	60fa      	str	r2, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d102      	bne.n	800d17e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d178:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d17c:	e02c      	b.n	800d1d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d182:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d0ef      	beq.n	800d16e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1ea      	bne.n	800d16e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d19c:	f003 0304 	and.w	r3, r3, #4
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d004      	beq.n	800d1ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2204      	movs	r2, #4
 800d1a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1aa:	2304      	movs	r3, #4
 800d1ac:	e014      	b.n	800d1d8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1b2:	f003 0301 	and.w	r3, r3, #1
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d004      	beq.n	800d1c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e009      	b.n	800d1d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2240      	movs	r2, #64	@ 0x40
 800d1d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d1d6:	2300      	movs	r3, #0

}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr
 800d1e4:	24000000 	.word	0x24000000
 800d1e8:	10624dd3 	.word	0x10624dd3

0800d1ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d1f4:	4b11      	ldr	r3, [pc, #68]	@ (800d23c <SDMMC_GetCmdError+0x50>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a11      	ldr	r2, [pc, #68]	@ (800d240 <SDMMC_GetCmdError+0x54>)
 800d1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d1fe:	0a5b      	lsrs	r3, r3, #9
 800d200:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d204:	fb02 f303 	mul.w	r3, r2, r3
 800d208:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	1e5a      	subs	r2, r3, #1
 800d20e:	60fa      	str	r2, [r7, #12]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d102      	bne.n	800d21a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d214:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d218:	e009      	b.n	800d22e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d21e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d222:	2b00      	cmp	r3, #0
 800d224:	d0f1      	beq.n	800d20a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4a06      	ldr	r2, [pc, #24]	@ (800d244 <SDMMC_GetCmdError+0x58>)
 800d22a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	24000000 	.word	0x24000000
 800d240:	10624dd3 	.word	0x10624dd3
 800d244:	002000c5 	.word	0x002000c5

0800d248 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d24c:	4904      	ldr	r1, [pc, #16]	@ (800d260 <MX_FATFS_Init+0x18>)
 800d24e:	4805      	ldr	r0, [pc, #20]	@ (800d264 <MX_FATFS_Init+0x1c>)
 800d250:	f000 f9e4 	bl	800d61c <FATFS_LinkDriver>
 800d254:	4603      	mov	r3, r0
 800d256:	461a      	mov	r2, r3
 800d258:	4b03      	ldr	r3, [pc, #12]	@ (800d268 <MX_FATFS_Init+0x20>)
 800d25a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d25c:	bf00      	nop
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	240009e8 	.word	0x240009e8
 800d264:	080123f0 	.word	0x080123f0
 800d268:	240009e4 	.word	0x240009e4

0800d26c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d272:	2300      	movs	r3, #0
 800d274:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d276:	f000 f879 	bl	800d36c <BSP_SD_IsDetected>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d001      	beq.n	800d284 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d280:	2302      	movs	r3, #2
 800d282:	e012      	b.n	800d2aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d284:	480b      	ldr	r0, [pc, #44]	@ (800d2b4 <BSP_SD_Init+0x48>)
 800d286:	f7fa f9e7 	bl	8007658 <HAL_SD_Init>
 800d28a:	4603      	mov	r3, r0
 800d28c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d28e:	79fb      	ldrb	r3, [r7, #7]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d109      	bne.n	800d2a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d294:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d298:	4806      	ldr	r0, [pc, #24]	@ (800d2b4 <BSP_SD_Init+0x48>)
 800d29a:	f7fb f8a3 	bl	80083e4 <HAL_SD_ConfigWideBusOperation>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d2a8:	79fb      	ldrb	r3, [r7, #7]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	2400031c 	.word	0x2400031c

0800d2b8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b088      	sub	sp, #32
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
 800d2c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	68f9      	ldr	r1, [r7, #12]
 800d2d4:	4806      	ldr	r0, [pc, #24]	@ (800d2f0 <BSP_SD_ReadBlocks+0x38>)
 800d2d6:	f7fa fadf 	bl	8007898 <HAL_SD_ReadBlocks>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	2400031c 	.word	0x2400031c

0800d2f4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b088      	sub	sp, #32
 800d2f8:	af02      	add	r7, sp, #8
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
 800d300:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	68f9      	ldr	r1, [r7, #12]
 800d310:	4806      	ldr	r0, [pc, #24]	@ (800d32c <BSP_SD_WriteBlocks+0x38>)
 800d312:	f7fa fc4b 	bl	8007bac <HAL_SD_WriteBlocks>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d001      	beq.n	800d320 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d320:	7dfb      	ldrb	r3, [r7, #23]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3718      	adds	r7, #24
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	2400031c 	.word	0x2400031c

0800d330 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d334:	4805      	ldr	r0, [pc, #20]	@ (800d34c <BSP_SD_GetCardState+0x1c>)
 800d336:	f7fb f967 	bl	8008608 <HAL_SD_GetCardState>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b04      	cmp	r3, #4
 800d33e:	bf14      	ite	ne
 800d340:	2301      	movne	r3, #1
 800d342:	2300      	moveq	r3, #0
 800d344:	b2db      	uxtb	r3, r3
}
 800d346:	4618      	mov	r0, r3
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	2400031c 	.word	0x2400031c

0800d350 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d358:	6879      	ldr	r1, [r7, #4]
 800d35a:	4803      	ldr	r0, [pc, #12]	@ (800d368 <BSP_SD_GetCardInfo+0x18>)
 800d35c:	f7fb f816 	bl	800838c <HAL_SD_GetCardInfo>
}
 800d360:	bf00      	nop
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	2400031c 	.word	0x2400031c

0800d36c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d372:	2301      	movs	r3, #1
 800d374:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d376:	f000 f80b 	bl	800d390 <BSP_PlatformIsDetected>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d101      	bne.n	800d384 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d380:	2300      	movs	r3, #0
 800d382:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d384:	79fb      	ldrb	r3, [r7, #7]
 800d386:	b2db      	uxtb	r3, r3
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d396:	2301      	movs	r3, #1
 800d398:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d39a:	2180      	movs	r1, #128	@ 0x80
 800d39c:	4806      	ldr	r0, [pc, #24]	@ (800d3b8 <BSP_PlatformIsDetected+0x28>)
 800d39e:	f7f6 fc6f 	bl	8003c80 <HAL_GPIO_ReadPin>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d001      	beq.n	800d3ac <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	58020800 	.word	0x58020800

0800d3bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d3f4 <SD_CheckStatus+0x38>)
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d3cc:	f7ff ffb0 	bl	800d330 <BSP_SD_GetCardState>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d107      	bne.n	800d3e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d3d6:	4b07      	ldr	r3, [pc, #28]	@ (800d3f4 <SD_CheckStatus+0x38>)
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	f023 0301 	bic.w	r3, r3, #1
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	4b04      	ldr	r3, [pc, #16]	@ (800d3f4 <SD_CheckStatus+0x38>)
 800d3e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d3e6:	4b03      	ldr	r3, [pc, #12]	@ (800d3f4 <SD_CheckStatus+0x38>)
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	b2db      	uxtb	r3, r3
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	24000015 	.word	0x24000015

0800d3f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d402:	4b0b      	ldr	r3, [pc, #44]	@ (800d430 <SD_initialize+0x38>)
 800d404:	2201      	movs	r2, #1
 800d406:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d408:	f7ff ff30 	bl	800d26c <BSP_SD_Init>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d107      	bne.n	800d422 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff ffd1 	bl	800d3bc <SD_CheckStatus>
 800d41a:	4603      	mov	r3, r0
 800d41c:	461a      	mov	r2, r3
 800d41e:	4b04      	ldr	r3, [pc, #16]	@ (800d430 <SD_initialize+0x38>)
 800d420:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d422:	4b03      	ldr	r3, [pc, #12]	@ (800d430 <SD_initialize+0x38>)
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	b2db      	uxtb	r3, r3
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	24000015 	.word	0x24000015

0800d434 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	4603      	mov	r3, r0
 800d43c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d43e:	79fb      	ldrb	r3, [r7, #7]
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff ffbb 	bl	800d3bc <SD_CheckStatus>
 800d446:	4603      	mov	r3, r0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af00      	add	r7, sp, #0
 800d456:	60b9      	str	r1, [r7, #8]
 800d458:	607a      	str	r2, [r7, #4]
 800d45a:	603b      	str	r3, [r7, #0]
 800d45c:	4603      	mov	r3, r0
 800d45e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d464:	f04f 33ff 	mov.w	r3, #4294967295
 800d468:	683a      	ldr	r2, [r7, #0]
 800d46a:	6879      	ldr	r1, [r7, #4]
 800d46c:	68b8      	ldr	r0, [r7, #8]
 800d46e:	f7ff ff23 	bl	800d2b8 <BSP_SD_ReadBlocks>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d107      	bne.n	800d488 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d478:	bf00      	nop
 800d47a:	f7ff ff59 	bl	800d330 <BSP_SD_GetCardState>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1fa      	bne.n	800d47a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d488:	7dfb      	ldrb	r3, [r7, #23]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3718      	adds	r7, #24
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b086      	sub	sp, #24
 800d496:	af00      	add	r7, sp, #0
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
 800d49c:	603b      	str	r3, [r7, #0]
 800d49e:	4603      	mov	r3, r0
 800d4a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d4aa:	683a      	ldr	r2, [r7, #0]
 800d4ac:	6879      	ldr	r1, [r7, #4]
 800d4ae:	68b8      	ldr	r0, [r7, #8]
 800d4b0:	f7ff ff20 	bl	800d2f4 <BSP_SD_WriteBlocks>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d107      	bne.n	800d4ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d4ba:	bf00      	nop
 800d4bc:	f7ff ff38 	bl	800d330 <BSP_SD_GetCardState>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d1fa      	bne.n	800d4bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d4ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3718      	adds	r7, #24
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08c      	sub	sp, #48	@ 0x30
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	603a      	str	r2, [r7, #0]
 800d4de:	71fb      	strb	r3, [r7, #7]
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d4ea:	4b25      	ldr	r3, [pc, #148]	@ (800d580 <SD_ioctl+0xac>)
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <SD_ioctl+0x28>
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	e03c      	b.n	800d576 <SD_ioctl+0xa2>

  switch (cmd)
 800d4fc:	79bb      	ldrb	r3, [r7, #6]
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d834      	bhi.n	800d56c <SD_ioctl+0x98>
 800d502:	a201      	add	r2, pc, #4	@ (adr r2, 800d508 <SD_ioctl+0x34>)
 800d504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d508:	0800d519 	.word	0x0800d519
 800d50c:	0800d521 	.word	0x0800d521
 800d510:	0800d539 	.word	0x0800d539
 800d514:	0800d553 	.word	0x0800d553
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d518:	2300      	movs	r3, #0
 800d51a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d51e:	e028      	b.n	800d572 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d520:	f107 0308 	add.w	r3, r7, #8
 800d524:	4618      	mov	r0, r3
 800d526:	f7ff ff13 	bl	800d350 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d52a:	6a3a      	ldr	r2, [r7, #32]
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d530:	2300      	movs	r3, #0
 800d532:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d536:	e01c      	b.n	800d572 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d538:	f107 0308 	add.w	r3, r7, #8
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7ff ff07 	bl	800d350 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d544:	b29a      	uxth	r2, r3
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d54a:	2300      	movs	r3, #0
 800d54c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d550:	e00f      	b.n	800d572 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d552:	f107 0308 	add.w	r3, r7, #8
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff fefa 	bl	800d350 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55e:	0a5a      	lsrs	r2, r3, #9
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d56a:	e002      	b.n	800d572 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d56c:	2304      	movs	r3, #4
 800d56e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d572:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d576:	4618      	mov	r0, r3
 800d578:	3730      	adds	r7, #48	@ 0x30
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	24000015 	.word	0x24000015

0800d584 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d584:	b480      	push	{r7}
 800d586:	b087      	sub	sp, #28
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	4613      	mov	r3, r2
 800d590:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d592:	2301      	movs	r3, #1
 800d594:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d596:	2300      	movs	r3, #0
 800d598:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d59a:	4b1f      	ldr	r3, [pc, #124]	@ (800d618 <FATFS_LinkDriverEx+0x94>)
 800d59c:	7a5b      	ldrb	r3, [r3, #9]
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d131      	bne.n	800d608 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d5a4:	4b1c      	ldr	r3, [pc, #112]	@ (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5a6:	7a5b      	ldrb	r3, [r3, #9]
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d5b2:	4b19      	ldr	r3, [pc, #100]	@ (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5b4:	7a5b      	ldrb	r3, [r3, #9]
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	4a17      	ldr	r2, [pc, #92]	@ (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4413      	add	r3, r2
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d5c2:	4b15      	ldr	r3, [pc, #84]	@ (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5c4:	7a5b      	ldrb	r3, [r3, #9]
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	4b13      	ldr	r3, [pc, #76]	@ (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5cc:	4413      	add	r3, r2
 800d5ce:	79fa      	ldrb	r2, [r7, #7]
 800d5d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d5d2:	4b11      	ldr	r3, [pc, #68]	@ (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5d4:	7a5b      	ldrb	r3, [r3, #9]
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	b2d1      	uxtb	r1, r2
 800d5dc:	4a0e      	ldr	r2, [pc, #56]	@ (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5de:	7251      	strb	r1, [r2, #9]
 800d5e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d5e2:	7dbb      	ldrb	r3, [r7, #22]
 800d5e4:	3330      	adds	r3, #48	@ 0x30
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	223a      	movs	r2, #58	@ 0x3a
 800d5f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	3302      	adds	r3, #2
 800d5f8:	222f      	movs	r2, #47	@ 0x2f
 800d5fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	3303      	adds	r3, #3
 800d600:	2200      	movs	r2, #0
 800d602:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d604:	2300      	movs	r3, #0
 800d606:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d608:	7dfb      	ldrb	r3, [r7, #23]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	371c      	adds	r7, #28
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	240009ec 	.word	0x240009ec

0800d61c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d626:	2200      	movs	r2, #0
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7ff ffaa 	bl	800d584 <FATFS_LinkDriverEx>
 800d630:	4603      	mov	r3, r0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <__cvt>:
 800d63a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d63c:	ed2d 8b02 	vpush	{d8}
 800d640:	eeb0 8b40 	vmov.f64	d8, d0
 800d644:	b085      	sub	sp, #20
 800d646:	4617      	mov	r7, r2
 800d648:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d64a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d64c:	ee18 2a90 	vmov	r2, s17
 800d650:	f025 0520 	bic.w	r5, r5, #32
 800d654:	2a00      	cmp	r2, #0
 800d656:	bfb6      	itet	lt
 800d658:	222d      	movlt	r2, #45	@ 0x2d
 800d65a:	2200      	movge	r2, #0
 800d65c:	eeb1 8b40 	vneglt.f64	d8, d0
 800d660:	2d46      	cmp	r5, #70	@ 0x46
 800d662:	460c      	mov	r4, r1
 800d664:	701a      	strb	r2, [r3, #0]
 800d666:	d004      	beq.n	800d672 <__cvt+0x38>
 800d668:	2d45      	cmp	r5, #69	@ 0x45
 800d66a:	d100      	bne.n	800d66e <__cvt+0x34>
 800d66c:	3401      	adds	r4, #1
 800d66e:	2102      	movs	r1, #2
 800d670:	e000      	b.n	800d674 <__cvt+0x3a>
 800d672:	2103      	movs	r1, #3
 800d674:	ab03      	add	r3, sp, #12
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	ab02      	add	r3, sp, #8
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	4622      	mov	r2, r4
 800d67e:	4633      	mov	r3, r6
 800d680:	eeb0 0b48 	vmov.f64	d0, d8
 800d684:	f001 f964 	bl	800e950 <_dtoa_r>
 800d688:	2d47      	cmp	r5, #71	@ 0x47
 800d68a:	d114      	bne.n	800d6b6 <__cvt+0x7c>
 800d68c:	07fb      	lsls	r3, r7, #31
 800d68e:	d50a      	bpl.n	800d6a6 <__cvt+0x6c>
 800d690:	1902      	adds	r2, r0, r4
 800d692:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d69a:	bf08      	it	eq
 800d69c:	9203      	streq	r2, [sp, #12]
 800d69e:	2130      	movs	r1, #48	@ 0x30
 800d6a0:	9b03      	ldr	r3, [sp, #12]
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d319      	bcc.n	800d6da <__cvt+0xa0>
 800d6a6:	9b03      	ldr	r3, [sp, #12]
 800d6a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6aa:	1a1b      	subs	r3, r3, r0
 800d6ac:	6013      	str	r3, [r2, #0]
 800d6ae:	b005      	add	sp, #20
 800d6b0:	ecbd 8b02 	vpop	{d8}
 800d6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6b6:	2d46      	cmp	r5, #70	@ 0x46
 800d6b8:	eb00 0204 	add.w	r2, r0, r4
 800d6bc:	d1e9      	bne.n	800d692 <__cvt+0x58>
 800d6be:	7803      	ldrb	r3, [r0, #0]
 800d6c0:	2b30      	cmp	r3, #48	@ 0x30
 800d6c2:	d107      	bne.n	800d6d4 <__cvt+0x9a>
 800d6c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6cc:	bf1c      	itt	ne
 800d6ce:	f1c4 0401 	rsbne	r4, r4, #1
 800d6d2:	6034      	strne	r4, [r6, #0]
 800d6d4:	6833      	ldr	r3, [r6, #0]
 800d6d6:	441a      	add	r2, r3
 800d6d8:	e7db      	b.n	800d692 <__cvt+0x58>
 800d6da:	1c5c      	adds	r4, r3, #1
 800d6dc:	9403      	str	r4, [sp, #12]
 800d6de:	7019      	strb	r1, [r3, #0]
 800d6e0:	e7de      	b.n	800d6a0 <__cvt+0x66>

0800d6e2 <__exponent>:
 800d6e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6e4:	2900      	cmp	r1, #0
 800d6e6:	bfba      	itte	lt
 800d6e8:	4249      	neglt	r1, r1
 800d6ea:	232d      	movlt	r3, #45	@ 0x2d
 800d6ec:	232b      	movge	r3, #43	@ 0x2b
 800d6ee:	2909      	cmp	r1, #9
 800d6f0:	7002      	strb	r2, [r0, #0]
 800d6f2:	7043      	strb	r3, [r0, #1]
 800d6f4:	dd29      	ble.n	800d74a <__exponent+0x68>
 800d6f6:	f10d 0307 	add.w	r3, sp, #7
 800d6fa:	461d      	mov	r5, r3
 800d6fc:	270a      	movs	r7, #10
 800d6fe:	461a      	mov	r2, r3
 800d700:	fbb1 f6f7 	udiv	r6, r1, r7
 800d704:	fb07 1416 	mls	r4, r7, r6, r1
 800d708:	3430      	adds	r4, #48	@ 0x30
 800d70a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d70e:	460c      	mov	r4, r1
 800d710:	2c63      	cmp	r4, #99	@ 0x63
 800d712:	f103 33ff 	add.w	r3, r3, #4294967295
 800d716:	4631      	mov	r1, r6
 800d718:	dcf1      	bgt.n	800d6fe <__exponent+0x1c>
 800d71a:	3130      	adds	r1, #48	@ 0x30
 800d71c:	1e94      	subs	r4, r2, #2
 800d71e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d722:	1c41      	adds	r1, r0, #1
 800d724:	4623      	mov	r3, r4
 800d726:	42ab      	cmp	r3, r5
 800d728:	d30a      	bcc.n	800d740 <__exponent+0x5e>
 800d72a:	f10d 0309 	add.w	r3, sp, #9
 800d72e:	1a9b      	subs	r3, r3, r2
 800d730:	42ac      	cmp	r4, r5
 800d732:	bf88      	it	hi
 800d734:	2300      	movhi	r3, #0
 800d736:	3302      	adds	r3, #2
 800d738:	4403      	add	r3, r0
 800d73a:	1a18      	subs	r0, r3, r0
 800d73c:	b003      	add	sp, #12
 800d73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d740:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d744:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d748:	e7ed      	b.n	800d726 <__exponent+0x44>
 800d74a:	2330      	movs	r3, #48	@ 0x30
 800d74c:	3130      	adds	r1, #48	@ 0x30
 800d74e:	7083      	strb	r3, [r0, #2]
 800d750:	70c1      	strb	r1, [r0, #3]
 800d752:	1d03      	adds	r3, r0, #4
 800d754:	e7f1      	b.n	800d73a <__exponent+0x58>
	...

0800d758 <_printf_float>:
 800d758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d75c:	b08d      	sub	sp, #52	@ 0x34
 800d75e:	460c      	mov	r4, r1
 800d760:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d764:	4616      	mov	r6, r2
 800d766:	461f      	mov	r7, r3
 800d768:	4605      	mov	r5, r0
 800d76a:	f000 ffdb 	bl	800e724 <_localeconv_r>
 800d76e:	f8d0 b000 	ldr.w	fp, [r0]
 800d772:	4658      	mov	r0, fp
 800d774:	f7f2 fe1c 	bl	80003b0 <strlen>
 800d778:	2300      	movs	r3, #0
 800d77a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d77c:	f8d8 3000 	ldr.w	r3, [r8]
 800d780:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d784:	6822      	ldr	r2, [r4, #0]
 800d786:	9005      	str	r0, [sp, #20]
 800d788:	3307      	adds	r3, #7
 800d78a:	f023 0307 	bic.w	r3, r3, #7
 800d78e:	f103 0108 	add.w	r1, r3, #8
 800d792:	f8c8 1000 	str.w	r1, [r8]
 800d796:	ed93 0b00 	vldr	d0, [r3]
 800d79a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800d9f8 <_printf_float+0x2a0>
 800d79e:	eeb0 7bc0 	vabs.f64	d7, d0
 800d7a2:	eeb4 7b46 	vcmp.f64	d7, d6
 800d7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7aa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800d7ae:	dd24      	ble.n	800d7fa <_printf_float+0xa2>
 800d7b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b8:	d502      	bpl.n	800d7c0 <_printf_float+0x68>
 800d7ba:	232d      	movs	r3, #45	@ 0x2d
 800d7bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7c0:	498f      	ldr	r1, [pc, #572]	@ (800da00 <_printf_float+0x2a8>)
 800d7c2:	4b90      	ldr	r3, [pc, #576]	@ (800da04 <_printf_float+0x2ac>)
 800d7c4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800d7c8:	bf94      	ite	ls
 800d7ca:	4688      	movls	r8, r1
 800d7cc:	4698      	movhi	r8, r3
 800d7ce:	f022 0204 	bic.w	r2, r2, #4
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	6123      	str	r3, [r4, #16]
 800d7d6:	6022      	str	r2, [r4, #0]
 800d7d8:	f04f 0a00 	mov.w	sl, #0
 800d7dc:	9700      	str	r7, [sp, #0]
 800d7de:	4633      	mov	r3, r6
 800d7e0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d7e2:	4621      	mov	r1, r4
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	f000 f9d1 	bl	800db8c <_printf_common>
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	f040 8089 	bne.w	800d902 <_printf_float+0x1aa>
 800d7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f4:	b00d      	add	sp, #52	@ 0x34
 800d7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7fa:	eeb4 0b40 	vcmp.f64	d0, d0
 800d7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d802:	d709      	bvc.n	800d818 <_printf_float+0xc0>
 800d804:	ee10 3a90 	vmov	r3, s1
 800d808:	2b00      	cmp	r3, #0
 800d80a:	bfbc      	itt	lt
 800d80c:	232d      	movlt	r3, #45	@ 0x2d
 800d80e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d812:	497d      	ldr	r1, [pc, #500]	@ (800da08 <_printf_float+0x2b0>)
 800d814:	4b7d      	ldr	r3, [pc, #500]	@ (800da0c <_printf_float+0x2b4>)
 800d816:	e7d5      	b.n	800d7c4 <_printf_float+0x6c>
 800d818:	6863      	ldr	r3, [r4, #4]
 800d81a:	1c59      	adds	r1, r3, #1
 800d81c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800d820:	d139      	bne.n	800d896 <_printf_float+0x13e>
 800d822:	2306      	movs	r3, #6
 800d824:	6063      	str	r3, [r4, #4]
 800d826:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d82a:	2300      	movs	r3, #0
 800d82c:	6022      	str	r2, [r4, #0]
 800d82e:	9303      	str	r3, [sp, #12]
 800d830:	ab0a      	add	r3, sp, #40	@ 0x28
 800d832:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d836:	ab09      	add	r3, sp, #36	@ 0x24
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	6861      	ldr	r1, [r4, #4]
 800d83c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d840:	4628      	mov	r0, r5
 800d842:	f7ff fefa 	bl	800d63a <__cvt>
 800d846:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d84a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d84c:	4680      	mov	r8, r0
 800d84e:	d129      	bne.n	800d8a4 <_printf_float+0x14c>
 800d850:	1cc8      	adds	r0, r1, #3
 800d852:	db02      	blt.n	800d85a <_printf_float+0x102>
 800d854:	6863      	ldr	r3, [r4, #4]
 800d856:	4299      	cmp	r1, r3
 800d858:	dd41      	ble.n	800d8de <_printf_float+0x186>
 800d85a:	f1a9 0902 	sub.w	r9, r9, #2
 800d85e:	fa5f f989 	uxtb.w	r9, r9
 800d862:	3901      	subs	r1, #1
 800d864:	464a      	mov	r2, r9
 800d866:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d86a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d86c:	f7ff ff39 	bl	800d6e2 <__exponent>
 800d870:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d872:	1813      	adds	r3, r2, r0
 800d874:	2a01      	cmp	r2, #1
 800d876:	4682      	mov	sl, r0
 800d878:	6123      	str	r3, [r4, #16]
 800d87a:	dc02      	bgt.n	800d882 <_printf_float+0x12a>
 800d87c:	6822      	ldr	r2, [r4, #0]
 800d87e:	07d2      	lsls	r2, r2, #31
 800d880:	d501      	bpl.n	800d886 <_printf_float+0x12e>
 800d882:	3301      	adds	r3, #1
 800d884:	6123      	str	r3, [r4, #16]
 800d886:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d0a6      	beq.n	800d7dc <_printf_float+0x84>
 800d88e:	232d      	movs	r3, #45	@ 0x2d
 800d890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d894:	e7a2      	b.n	800d7dc <_printf_float+0x84>
 800d896:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d89a:	d1c4      	bne.n	800d826 <_printf_float+0xce>
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d1c2      	bne.n	800d826 <_printf_float+0xce>
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e7bf      	b.n	800d824 <_printf_float+0xcc>
 800d8a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d8a8:	d9db      	bls.n	800d862 <_printf_float+0x10a>
 800d8aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800d8ae:	d118      	bne.n	800d8e2 <_printf_float+0x18a>
 800d8b0:	2900      	cmp	r1, #0
 800d8b2:	6863      	ldr	r3, [r4, #4]
 800d8b4:	dd0b      	ble.n	800d8ce <_printf_float+0x176>
 800d8b6:	6121      	str	r1, [r4, #16]
 800d8b8:	b913      	cbnz	r3, 800d8c0 <_printf_float+0x168>
 800d8ba:	6822      	ldr	r2, [r4, #0]
 800d8bc:	07d0      	lsls	r0, r2, #31
 800d8be:	d502      	bpl.n	800d8c6 <_printf_float+0x16e>
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	440b      	add	r3, r1
 800d8c4:	6123      	str	r3, [r4, #16]
 800d8c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d8c8:	f04f 0a00 	mov.w	sl, #0
 800d8cc:	e7db      	b.n	800d886 <_printf_float+0x12e>
 800d8ce:	b913      	cbnz	r3, 800d8d6 <_printf_float+0x17e>
 800d8d0:	6822      	ldr	r2, [r4, #0]
 800d8d2:	07d2      	lsls	r2, r2, #31
 800d8d4:	d501      	bpl.n	800d8da <_printf_float+0x182>
 800d8d6:	3302      	adds	r3, #2
 800d8d8:	e7f4      	b.n	800d8c4 <_printf_float+0x16c>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e7f2      	b.n	800d8c4 <_printf_float+0x16c>
 800d8de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800d8e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8e4:	4299      	cmp	r1, r3
 800d8e6:	db05      	blt.n	800d8f4 <_printf_float+0x19c>
 800d8e8:	6823      	ldr	r3, [r4, #0]
 800d8ea:	6121      	str	r1, [r4, #16]
 800d8ec:	07d8      	lsls	r0, r3, #31
 800d8ee:	d5ea      	bpl.n	800d8c6 <_printf_float+0x16e>
 800d8f0:	1c4b      	adds	r3, r1, #1
 800d8f2:	e7e7      	b.n	800d8c4 <_printf_float+0x16c>
 800d8f4:	2900      	cmp	r1, #0
 800d8f6:	bfd4      	ite	le
 800d8f8:	f1c1 0202 	rsble	r2, r1, #2
 800d8fc:	2201      	movgt	r2, #1
 800d8fe:	4413      	add	r3, r2
 800d900:	e7e0      	b.n	800d8c4 <_printf_float+0x16c>
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	055a      	lsls	r2, r3, #21
 800d906:	d407      	bmi.n	800d918 <_printf_float+0x1c0>
 800d908:	6923      	ldr	r3, [r4, #16]
 800d90a:	4642      	mov	r2, r8
 800d90c:	4631      	mov	r1, r6
 800d90e:	4628      	mov	r0, r5
 800d910:	47b8      	blx	r7
 800d912:	3001      	adds	r0, #1
 800d914:	d12a      	bne.n	800d96c <_printf_float+0x214>
 800d916:	e76b      	b.n	800d7f0 <_printf_float+0x98>
 800d918:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d91c:	f240 80e0 	bls.w	800dae0 <_printf_float+0x388>
 800d920:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d924:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d92c:	d133      	bne.n	800d996 <_printf_float+0x23e>
 800d92e:	4a38      	ldr	r2, [pc, #224]	@ (800da10 <_printf_float+0x2b8>)
 800d930:	2301      	movs	r3, #1
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	47b8      	blx	r7
 800d938:	3001      	adds	r0, #1
 800d93a:	f43f af59 	beq.w	800d7f0 <_printf_float+0x98>
 800d93e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d942:	4543      	cmp	r3, r8
 800d944:	db02      	blt.n	800d94c <_printf_float+0x1f4>
 800d946:	6823      	ldr	r3, [r4, #0]
 800d948:	07d8      	lsls	r0, r3, #31
 800d94a:	d50f      	bpl.n	800d96c <_printf_float+0x214>
 800d94c:	9b05      	ldr	r3, [sp, #20]
 800d94e:	465a      	mov	r2, fp
 800d950:	4631      	mov	r1, r6
 800d952:	4628      	mov	r0, r5
 800d954:	47b8      	blx	r7
 800d956:	3001      	adds	r0, #1
 800d958:	f43f af4a 	beq.w	800d7f0 <_printf_float+0x98>
 800d95c:	f04f 0900 	mov.w	r9, #0
 800d960:	f108 38ff 	add.w	r8, r8, #4294967295
 800d964:	f104 0a1a 	add.w	sl, r4, #26
 800d968:	45c8      	cmp	r8, r9
 800d96a:	dc09      	bgt.n	800d980 <_printf_float+0x228>
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	079b      	lsls	r3, r3, #30
 800d970:	f100 8107 	bmi.w	800db82 <_printf_float+0x42a>
 800d974:	68e0      	ldr	r0, [r4, #12]
 800d976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d978:	4298      	cmp	r0, r3
 800d97a:	bfb8      	it	lt
 800d97c:	4618      	movlt	r0, r3
 800d97e:	e739      	b.n	800d7f4 <_printf_float+0x9c>
 800d980:	2301      	movs	r3, #1
 800d982:	4652      	mov	r2, sl
 800d984:	4631      	mov	r1, r6
 800d986:	4628      	mov	r0, r5
 800d988:	47b8      	blx	r7
 800d98a:	3001      	adds	r0, #1
 800d98c:	f43f af30 	beq.w	800d7f0 <_printf_float+0x98>
 800d990:	f109 0901 	add.w	r9, r9, #1
 800d994:	e7e8      	b.n	800d968 <_printf_float+0x210>
 800d996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d998:	2b00      	cmp	r3, #0
 800d99a:	dc3b      	bgt.n	800da14 <_printf_float+0x2bc>
 800d99c:	4a1c      	ldr	r2, [pc, #112]	@ (800da10 <_printf_float+0x2b8>)
 800d99e:	2301      	movs	r3, #1
 800d9a0:	4631      	mov	r1, r6
 800d9a2:	4628      	mov	r0, r5
 800d9a4:	47b8      	blx	r7
 800d9a6:	3001      	adds	r0, #1
 800d9a8:	f43f af22 	beq.w	800d7f0 <_printf_float+0x98>
 800d9ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d9b0:	ea59 0303 	orrs.w	r3, r9, r3
 800d9b4:	d102      	bne.n	800d9bc <_printf_float+0x264>
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	07d9      	lsls	r1, r3, #31
 800d9ba:	d5d7      	bpl.n	800d96c <_printf_float+0x214>
 800d9bc:	9b05      	ldr	r3, [sp, #20]
 800d9be:	465a      	mov	r2, fp
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	47b8      	blx	r7
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	f43f af12 	beq.w	800d7f0 <_printf_float+0x98>
 800d9cc:	f04f 0a00 	mov.w	sl, #0
 800d9d0:	f104 0b1a 	add.w	fp, r4, #26
 800d9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9d6:	425b      	negs	r3, r3
 800d9d8:	4553      	cmp	r3, sl
 800d9da:	dc01      	bgt.n	800d9e0 <_printf_float+0x288>
 800d9dc:	464b      	mov	r3, r9
 800d9de:	e794      	b.n	800d90a <_printf_float+0x1b2>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	465a      	mov	r2, fp
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	47b8      	blx	r7
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	f43f af00 	beq.w	800d7f0 <_printf_float+0x98>
 800d9f0:	f10a 0a01 	add.w	sl, sl, #1
 800d9f4:	e7ee      	b.n	800d9d4 <_printf_float+0x27c>
 800d9f6:	bf00      	nop
 800d9f8:	ffffffff 	.word	0xffffffff
 800d9fc:	7fefffff 	.word	0x7fefffff
 800da00:	08012404 	.word	0x08012404
 800da04:	08012408 	.word	0x08012408
 800da08:	0801240c 	.word	0x0801240c
 800da0c:	08012410 	.word	0x08012410
 800da10:	08012414 	.word	0x08012414
 800da14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800da1a:	4553      	cmp	r3, sl
 800da1c:	bfa8      	it	ge
 800da1e:	4653      	movge	r3, sl
 800da20:	2b00      	cmp	r3, #0
 800da22:	4699      	mov	r9, r3
 800da24:	dc37      	bgt.n	800da96 <_printf_float+0x33e>
 800da26:	2300      	movs	r3, #0
 800da28:	9307      	str	r3, [sp, #28]
 800da2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da2e:	f104 021a 	add.w	r2, r4, #26
 800da32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da34:	9907      	ldr	r1, [sp, #28]
 800da36:	9306      	str	r3, [sp, #24]
 800da38:	eba3 0309 	sub.w	r3, r3, r9
 800da3c:	428b      	cmp	r3, r1
 800da3e:	dc31      	bgt.n	800daa4 <_printf_float+0x34c>
 800da40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da42:	459a      	cmp	sl, r3
 800da44:	dc3b      	bgt.n	800dabe <_printf_float+0x366>
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	07da      	lsls	r2, r3, #31
 800da4a:	d438      	bmi.n	800dabe <_printf_float+0x366>
 800da4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da4e:	ebaa 0903 	sub.w	r9, sl, r3
 800da52:	9b06      	ldr	r3, [sp, #24]
 800da54:	ebaa 0303 	sub.w	r3, sl, r3
 800da58:	4599      	cmp	r9, r3
 800da5a:	bfa8      	it	ge
 800da5c:	4699      	movge	r9, r3
 800da5e:	f1b9 0f00 	cmp.w	r9, #0
 800da62:	dc34      	bgt.n	800dace <_printf_float+0x376>
 800da64:	f04f 0800 	mov.w	r8, #0
 800da68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da6c:	f104 0b1a 	add.w	fp, r4, #26
 800da70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da72:	ebaa 0303 	sub.w	r3, sl, r3
 800da76:	eba3 0309 	sub.w	r3, r3, r9
 800da7a:	4543      	cmp	r3, r8
 800da7c:	f77f af76 	ble.w	800d96c <_printf_float+0x214>
 800da80:	2301      	movs	r3, #1
 800da82:	465a      	mov	r2, fp
 800da84:	4631      	mov	r1, r6
 800da86:	4628      	mov	r0, r5
 800da88:	47b8      	blx	r7
 800da8a:	3001      	adds	r0, #1
 800da8c:	f43f aeb0 	beq.w	800d7f0 <_printf_float+0x98>
 800da90:	f108 0801 	add.w	r8, r8, #1
 800da94:	e7ec      	b.n	800da70 <_printf_float+0x318>
 800da96:	4642      	mov	r2, r8
 800da98:	4631      	mov	r1, r6
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b8      	blx	r7
 800da9e:	3001      	adds	r0, #1
 800daa0:	d1c1      	bne.n	800da26 <_printf_float+0x2ce>
 800daa2:	e6a5      	b.n	800d7f0 <_printf_float+0x98>
 800daa4:	2301      	movs	r3, #1
 800daa6:	4631      	mov	r1, r6
 800daa8:	4628      	mov	r0, r5
 800daaa:	9206      	str	r2, [sp, #24]
 800daac:	47b8      	blx	r7
 800daae:	3001      	adds	r0, #1
 800dab0:	f43f ae9e 	beq.w	800d7f0 <_printf_float+0x98>
 800dab4:	9b07      	ldr	r3, [sp, #28]
 800dab6:	9a06      	ldr	r2, [sp, #24]
 800dab8:	3301      	adds	r3, #1
 800daba:	9307      	str	r3, [sp, #28]
 800dabc:	e7b9      	b.n	800da32 <_printf_float+0x2da>
 800dabe:	9b05      	ldr	r3, [sp, #20]
 800dac0:	465a      	mov	r2, fp
 800dac2:	4631      	mov	r1, r6
 800dac4:	4628      	mov	r0, r5
 800dac6:	47b8      	blx	r7
 800dac8:	3001      	adds	r0, #1
 800daca:	d1bf      	bne.n	800da4c <_printf_float+0x2f4>
 800dacc:	e690      	b.n	800d7f0 <_printf_float+0x98>
 800dace:	9a06      	ldr	r2, [sp, #24]
 800dad0:	464b      	mov	r3, r9
 800dad2:	4442      	add	r2, r8
 800dad4:	4631      	mov	r1, r6
 800dad6:	4628      	mov	r0, r5
 800dad8:	47b8      	blx	r7
 800dada:	3001      	adds	r0, #1
 800dadc:	d1c2      	bne.n	800da64 <_printf_float+0x30c>
 800dade:	e687      	b.n	800d7f0 <_printf_float+0x98>
 800dae0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800dae4:	f1b9 0f01 	cmp.w	r9, #1
 800dae8:	dc01      	bgt.n	800daee <_printf_float+0x396>
 800daea:	07db      	lsls	r3, r3, #31
 800daec:	d536      	bpl.n	800db5c <_printf_float+0x404>
 800daee:	2301      	movs	r3, #1
 800daf0:	4642      	mov	r2, r8
 800daf2:	4631      	mov	r1, r6
 800daf4:	4628      	mov	r0, r5
 800daf6:	47b8      	blx	r7
 800daf8:	3001      	adds	r0, #1
 800dafa:	f43f ae79 	beq.w	800d7f0 <_printf_float+0x98>
 800dafe:	9b05      	ldr	r3, [sp, #20]
 800db00:	465a      	mov	r2, fp
 800db02:	4631      	mov	r1, r6
 800db04:	4628      	mov	r0, r5
 800db06:	47b8      	blx	r7
 800db08:	3001      	adds	r0, #1
 800db0a:	f43f ae71 	beq.w	800d7f0 <_printf_float+0x98>
 800db0e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800db12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db1a:	f109 39ff 	add.w	r9, r9, #4294967295
 800db1e:	d018      	beq.n	800db52 <_printf_float+0x3fa>
 800db20:	464b      	mov	r3, r9
 800db22:	f108 0201 	add.w	r2, r8, #1
 800db26:	4631      	mov	r1, r6
 800db28:	4628      	mov	r0, r5
 800db2a:	47b8      	blx	r7
 800db2c:	3001      	adds	r0, #1
 800db2e:	d10c      	bne.n	800db4a <_printf_float+0x3f2>
 800db30:	e65e      	b.n	800d7f0 <_printf_float+0x98>
 800db32:	2301      	movs	r3, #1
 800db34:	465a      	mov	r2, fp
 800db36:	4631      	mov	r1, r6
 800db38:	4628      	mov	r0, r5
 800db3a:	47b8      	blx	r7
 800db3c:	3001      	adds	r0, #1
 800db3e:	f43f ae57 	beq.w	800d7f0 <_printf_float+0x98>
 800db42:	f108 0801 	add.w	r8, r8, #1
 800db46:	45c8      	cmp	r8, r9
 800db48:	dbf3      	blt.n	800db32 <_printf_float+0x3da>
 800db4a:	4653      	mov	r3, sl
 800db4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800db50:	e6dc      	b.n	800d90c <_printf_float+0x1b4>
 800db52:	f04f 0800 	mov.w	r8, #0
 800db56:	f104 0b1a 	add.w	fp, r4, #26
 800db5a:	e7f4      	b.n	800db46 <_printf_float+0x3ee>
 800db5c:	2301      	movs	r3, #1
 800db5e:	4642      	mov	r2, r8
 800db60:	e7e1      	b.n	800db26 <_printf_float+0x3ce>
 800db62:	2301      	movs	r3, #1
 800db64:	464a      	mov	r2, r9
 800db66:	4631      	mov	r1, r6
 800db68:	4628      	mov	r0, r5
 800db6a:	47b8      	blx	r7
 800db6c:	3001      	adds	r0, #1
 800db6e:	f43f ae3f 	beq.w	800d7f0 <_printf_float+0x98>
 800db72:	f108 0801 	add.w	r8, r8, #1
 800db76:	68e3      	ldr	r3, [r4, #12]
 800db78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db7a:	1a5b      	subs	r3, r3, r1
 800db7c:	4543      	cmp	r3, r8
 800db7e:	dcf0      	bgt.n	800db62 <_printf_float+0x40a>
 800db80:	e6f8      	b.n	800d974 <_printf_float+0x21c>
 800db82:	f04f 0800 	mov.w	r8, #0
 800db86:	f104 0919 	add.w	r9, r4, #25
 800db8a:	e7f4      	b.n	800db76 <_printf_float+0x41e>

0800db8c <_printf_common>:
 800db8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db90:	4616      	mov	r6, r2
 800db92:	4698      	mov	r8, r3
 800db94:	688a      	ldr	r2, [r1, #8]
 800db96:	690b      	ldr	r3, [r1, #16]
 800db98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db9c:	4293      	cmp	r3, r2
 800db9e:	bfb8      	it	lt
 800dba0:	4613      	movlt	r3, r2
 800dba2:	6033      	str	r3, [r6, #0]
 800dba4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dba8:	4607      	mov	r7, r0
 800dbaa:	460c      	mov	r4, r1
 800dbac:	b10a      	cbz	r2, 800dbb2 <_printf_common+0x26>
 800dbae:	3301      	adds	r3, #1
 800dbb0:	6033      	str	r3, [r6, #0]
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	0699      	lsls	r1, r3, #26
 800dbb6:	bf42      	ittt	mi
 800dbb8:	6833      	ldrmi	r3, [r6, #0]
 800dbba:	3302      	addmi	r3, #2
 800dbbc:	6033      	strmi	r3, [r6, #0]
 800dbbe:	6825      	ldr	r5, [r4, #0]
 800dbc0:	f015 0506 	ands.w	r5, r5, #6
 800dbc4:	d106      	bne.n	800dbd4 <_printf_common+0x48>
 800dbc6:	f104 0a19 	add.w	sl, r4, #25
 800dbca:	68e3      	ldr	r3, [r4, #12]
 800dbcc:	6832      	ldr	r2, [r6, #0]
 800dbce:	1a9b      	subs	r3, r3, r2
 800dbd0:	42ab      	cmp	r3, r5
 800dbd2:	dc26      	bgt.n	800dc22 <_printf_common+0x96>
 800dbd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dbd8:	6822      	ldr	r2, [r4, #0]
 800dbda:	3b00      	subs	r3, #0
 800dbdc:	bf18      	it	ne
 800dbde:	2301      	movne	r3, #1
 800dbe0:	0692      	lsls	r2, r2, #26
 800dbe2:	d42b      	bmi.n	800dc3c <_printf_common+0xb0>
 800dbe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dbe8:	4641      	mov	r1, r8
 800dbea:	4638      	mov	r0, r7
 800dbec:	47c8      	blx	r9
 800dbee:	3001      	adds	r0, #1
 800dbf0:	d01e      	beq.n	800dc30 <_printf_common+0xa4>
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	6922      	ldr	r2, [r4, #16]
 800dbf6:	f003 0306 	and.w	r3, r3, #6
 800dbfa:	2b04      	cmp	r3, #4
 800dbfc:	bf02      	ittt	eq
 800dbfe:	68e5      	ldreq	r5, [r4, #12]
 800dc00:	6833      	ldreq	r3, [r6, #0]
 800dc02:	1aed      	subeq	r5, r5, r3
 800dc04:	68a3      	ldr	r3, [r4, #8]
 800dc06:	bf0c      	ite	eq
 800dc08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc0c:	2500      	movne	r5, #0
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	bfc4      	itt	gt
 800dc12:	1a9b      	subgt	r3, r3, r2
 800dc14:	18ed      	addgt	r5, r5, r3
 800dc16:	2600      	movs	r6, #0
 800dc18:	341a      	adds	r4, #26
 800dc1a:	42b5      	cmp	r5, r6
 800dc1c:	d11a      	bne.n	800dc54 <_printf_common+0xc8>
 800dc1e:	2000      	movs	r0, #0
 800dc20:	e008      	b.n	800dc34 <_printf_common+0xa8>
 800dc22:	2301      	movs	r3, #1
 800dc24:	4652      	mov	r2, sl
 800dc26:	4641      	mov	r1, r8
 800dc28:	4638      	mov	r0, r7
 800dc2a:	47c8      	blx	r9
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	d103      	bne.n	800dc38 <_printf_common+0xac>
 800dc30:	f04f 30ff 	mov.w	r0, #4294967295
 800dc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc38:	3501      	adds	r5, #1
 800dc3a:	e7c6      	b.n	800dbca <_printf_common+0x3e>
 800dc3c:	18e1      	adds	r1, r4, r3
 800dc3e:	1c5a      	adds	r2, r3, #1
 800dc40:	2030      	movs	r0, #48	@ 0x30
 800dc42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc46:	4422      	add	r2, r4
 800dc48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc50:	3302      	adds	r3, #2
 800dc52:	e7c7      	b.n	800dbe4 <_printf_common+0x58>
 800dc54:	2301      	movs	r3, #1
 800dc56:	4622      	mov	r2, r4
 800dc58:	4641      	mov	r1, r8
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	47c8      	blx	r9
 800dc5e:	3001      	adds	r0, #1
 800dc60:	d0e6      	beq.n	800dc30 <_printf_common+0xa4>
 800dc62:	3601      	adds	r6, #1
 800dc64:	e7d9      	b.n	800dc1a <_printf_common+0x8e>
	...

0800dc68 <_printf_i>:
 800dc68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc6c:	7e0f      	ldrb	r7, [r1, #24]
 800dc6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc70:	2f78      	cmp	r7, #120	@ 0x78
 800dc72:	4691      	mov	r9, r2
 800dc74:	4680      	mov	r8, r0
 800dc76:	460c      	mov	r4, r1
 800dc78:	469a      	mov	sl, r3
 800dc7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc7e:	d807      	bhi.n	800dc90 <_printf_i+0x28>
 800dc80:	2f62      	cmp	r7, #98	@ 0x62
 800dc82:	d80a      	bhi.n	800dc9a <_printf_i+0x32>
 800dc84:	2f00      	cmp	r7, #0
 800dc86:	f000 80d2 	beq.w	800de2e <_printf_i+0x1c6>
 800dc8a:	2f58      	cmp	r7, #88	@ 0x58
 800dc8c:	f000 80b9 	beq.w	800de02 <_printf_i+0x19a>
 800dc90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc98:	e03a      	b.n	800dd10 <_printf_i+0xa8>
 800dc9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc9e:	2b15      	cmp	r3, #21
 800dca0:	d8f6      	bhi.n	800dc90 <_printf_i+0x28>
 800dca2:	a101      	add	r1, pc, #4	@ (adr r1, 800dca8 <_printf_i+0x40>)
 800dca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dca8:	0800dd01 	.word	0x0800dd01
 800dcac:	0800dd15 	.word	0x0800dd15
 800dcb0:	0800dc91 	.word	0x0800dc91
 800dcb4:	0800dc91 	.word	0x0800dc91
 800dcb8:	0800dc91 	.word	0x0800dc91
 800dcbc:	0800dc91 	.word	0x0800dc91
 800dcc0:	0800dd15 	.word	0x0800dd15
 800dcc4:	0800dc91 	.word	0x0800dc91
 800dcc8:	0800dc91 	.word	0x0800dc91
 800dccc:	0800dc91 	.word	0x0800dc91
 800dcd0:	0800dc91 	.word	0x0800dc91
 800dcd4:	0800de15 	.word	0x0800de15
 800dcd8:	0800dd3f 	.word	0x0800dd3f
 800dcdc:	0800ddcf 	.word	0x0800ddcf
 800dce0:	0800dc91 	.word	0x0800dc91
 800dce4:	0800dc91 	.word	0x0800dc91
 800dce8:	0800de37 	.word	0x0800de37
 800dcec:	0800dc91 	.word	0x0800dc91
 800dcf0:	0800dd3f 	.word	0x0800dd3f
 800dcf4:	0800dc91 	.word	0x0800dc91
 800dcf8:	0800dc91 	.word	0x0800dc91
 800dcfc:	0800ddd7 	.word	0x0800ddd7
 800dd00:	6833      	ldr	r3, [r6, #0]
 800dd02:	1d1a      	adds	r2, r3, #4
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	6032      	str	r2, [r6, #0]
 800dd08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd10:	2301      	movs	r3, #1
 800dd12:	e09d      	b.n	800de50 <_printf_i+0x1e8>
 800dd14:	6833      	ldr	r3, [r6, #0]
 800dd16:	6820      	ldr	r0, [r4, #0]
 800dd18:	1d19      	adds	r1, r3, #4
 800dd1a:	6031      	str	r1, [r6, #0]
 800dd1c:	0606      	lsls	r6, r0, #24
 800dd1e:	d501      	bpl.n	800dd24 <_printf_i+0xbc>
 800dd20:	681d      	ldr	r5, [r3, #0]
 800dd22:	e003      	b.n	800dd2c <_printf_i+0xc4>
 800dd24:	0645      	lsls	r5, r0, #25
 800dd26:	d5fb      	bpl.n	800dd20 <_printf_i+0xb8>
 800dd28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd2c:	2d00      	cmp	r5, #0
 800dd2e:	da03      	bge.n	800dd38 <_printf_i+0xd0>
 800dd30:	232d      	movs	r3, #45	@ 0x2d
 800dd32:	426d      	negs	r5, r5
 800dd34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd38:	4859      	ldr	r0, [pc, #356]	@ (800dea0 <_printf_i+0x238>)
 800dd3a:	230a      	movs	r3, #10
 800dd3c:	e011      	b.n	800dd62 <_printf_i+0xfa>
 800dd3e:	6821      	ldr	r1, [r4, #0]
 800dd40:	6833      	ldr	r3, [r6, #0]
 800dd42:	0608      	lsls	r0, r1, #24
 800dd44:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd48:	d402      	bmi.n	800dd50 <_printf_i+0xe8>
 800dd4a:	0649      	lsls	r1, r1, #25
 800dd4c:	bf48      	it	mi
 800dd4e:	b2ad      	uxthmi	r5, r5
 800dd50:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd52:	4853      	ldr	r0, [pc, #332]	@ (800dea0 <_printf_i+0x238>)
 800dd54:	6033      	str	r3, [r6, #0]
 800dd56:	bf14      	ite	ne
 800dd58:	230a      	movne	r3, #10
 800dd5a:	2308      	moveq	r3, #8
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd62:	6866      	ldr	r6, [r4, #4]
 800dd64:	60a6      	str	r6, [r4, #8]
 800dd66:	2e00      	cmp	r6, #0
 800dd68:	bfa2      	ittt	ge
 800dd6a:	6821      	ldrge	r1, [r4, #0]
 800dd6c:	f021 0104 	bicge.w	r1, r1, #4
 800dd70:	6021      	strge	r1, [r4, #0]
 800dd72:	b90d      	cbnz	r5, 800dd78 <_printf_i+0x110>
 800dd74:	2e00      	cmp	r6, #0
 800dd76:	d04b      	beq.n	800de10 <_printf_i+0x1a8>
 800dd78:	4616      	mov	r6, r2
 800dd7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd7e:	fb03 5711 	mls	r7, r3, r1, r5
 800dd82:	5dc7      	ldrb	r7, [r0, r7]
 800dd84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd88:	462f      	mov	r7, r5
 800dd8a:	42bb      	cmp	r3, r7
 800dd8c:	460d      	mov	r5, r1
 800dd8e:	d9f4      	bls.n	800dd7a <_printf_i+0x112>
 800dd90:	2b08      	cmp	r3, #8
 800dd92:	d10b      	bne.n	800ddac <_printf_i+0x144>
 800dd94:	6823      	ldr	r3, [r4, #0]
 800dd96:	07df      	lsls	r7, r3, #31
 800dd98:	d508      	bpl.n	800ddac <_printf_i+0x144>
 800dd9a:	6923      	ldr	r3, [r4, #16]
 800dd9c:	6861      	ldr	r1, [r4, #4]
 800dd9e:	4299      	cmp	r1, r3
 800dda0:	bfde      	ittt	le
 800dda2:	2330      	movle	r3, #48	@ 0x30
 800dda4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dda8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ddac:	1b92      	subs	r2, r2, r6
 800ddae:	6122      	str	r2, [r4, #16]
 800ddb0:	f8cd a000 	str.w	sl, [sp]
 800ddb4:	464b      	mov	r3, r9
 800ddb6:	aa03      	add	r2, sp, #12
 800ddb8:	4621      	mov	r1, r4
 800ddba:	4640      	mov	r0, r8
 800ddbc:	f7ff fee6 	bl	800db8c <_printf_common>
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	d14a      	bne.n	800de5a <_printf_i+0x1f2>
 800ddc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddc8:	b004      	add	sp, #16
 800ddca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddce:	6823      	ldr	r3, [r4, #0]
 800ddd0:	f043 0320 	orr.w	r3, r3, #32
 800ddd4:	6023      	str	r3, [r4, #0]
 800ddd6:	4833      	ldr	r0, [pc, #204]	@ (800dea4 <_printf_i+0x23c>)
 800ddd8:	2778      	movs	r7, #120	@ 0x78
 800ddda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ddde:	6823      	ldr	r3, [r4, #0]
 800dde0:	6831      	ldr	r1, [r6, #0]
 800dde2:	061f      	lsls	r7, r3, #24
 800dde4:	f851 5b04 	ldr.w	r5, [r1], #4
 800dde8:	d402      	bmi.n	800ddf0 <_printf_i+0x188>
 800ddea:	065f      	lsls	r7, r3, #25
 800ddec:	bf48      	it	mi
 800ddee:	b2ad      	uxthmi	r5, r5
 800ddf0:	6031      	str	r1, [r6, #0]
 800ddf2:	07d9      	lsls	r1, r3, #31
 800ddf4:	bf44      	itt	mi
 800ddf6:	f043 0320 	orrmi.w	r3, r3, #32
 800ddfa:	6023      	strmi	r3, [r4, #0]
 800ddfc:	b11d      	cbz	r5, 800de06 <_printf_i+0x19e>
 800ddfe:	2310      	movs	r3, #16
 800de00:	e7ac      	b.n	800dd5c <_printf_i+0xf4>
 800de02:	4827      	ldr	r0, [pc, #156]	@ (800dea0 <_printf_i+0x238>)
 800de04:	e7e9      	b.n	800ddda <_printf_i+0x172>
 800de06:	6823      	ldr	r3, [r4, #0]
 800de08:	f023 0320 	bic.w	r3, r3, #32
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	e7f6      	b.n	800ddfe <_printf_i+0x196>
 800de10:	4616      	mov	r6, r2
 800de12:	e7bd      	b.n	800dd90 <_printf_i+0x128>
 800de14:	6833      	ldr	r3, [r6, #0]
 800de16:	6825      	ldr	r5, [r4, #0]
 800de18:	6961      	ldr	r1, [r4, #20]
 800de1a:	1d18      	adds	r0, r3, #4
 800de1c:	6030      	str	r0, [r6, #0]
 800de1e:	062e      	lsls	r6, r5, #24
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	d501      	bpl.n	800de28 <_printf_i+0x1c0>
 800de24:	6019      	str	r1, [r3, #0]
 800de26:	e002      	b.n	800de2e <_printf_i+0x1c6>
 800de28:	0668      	lsls	r0, r5, #25
 800de2a:	d5fb      	bpl.n	800de24 <_printf_i+0x1bc>
 800de2c:	8019      	strh	r1, [r3, #0]
 800de2e:	2300      	movs	r3, #0
 800de30:	6123      	str	r3, [r4, #16]
 800de32:	4616      	mov	r6, r2
 800de34:	e7bc      	b.n	800ddb0 <_printf_i+0x148>
 800de36:	6833      	ldr	r3, [r6, #0]
 800de38:	1d1a      	adds	r2, r3, #4
 800de3a:	6032      	str	r2, [r6, #0]
 800de3c:	681e      	ldr	r6, [r3, #0]
 800de3e:	6862      	ldr	r2, [r4, #4]
 800de40:	2100      	movs	r1, #0
 800de42:	4630      	mov	r0, r6
 800de44:	f7f2 fa64 	bl	8000310 <memchr>
 800de48:	b108      	cbz	r0, 800de4e <_printf_i+0x1e6>
 800de4a:	1b80      	subs	r0, r0, r6
 800de4c:	6060      	str	r0, [r4, #4]
 800de4e:	6863      	ldr	r3, [r4, #4]
 800de50:	6123      	str	r3, [r4, #16]
 800de52:	2300      	movs	r3, #0
 800de54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de58:	e7aa      	b.n	800ddb0 <_printf_i+0x148>
 800de5a:	6923      	ldr	r3, [r4, #16]
 800de5c:	4632      	mov	r2, r6
 800de5e:	4649      	mov	r1, r9
 800de60:	4640      	mov	r0, r8
 800de62:	47d0      	blx	sl
 800de64:	3001      	adds	r0, #1
 800de66:	d0ad      	beq.n	800ddc4 <_printf_i+0x15c>
 800de68:	6823      	ldr	r3, [r4, #0]
 800de6a:	079b      	lsls	r3, r3, #30
 800de6c:	d413      	bmi.n	800de96 <_printf_i+0x22e>
 800de6e:	68e0      	ldr	r0, [r4, #12]
 800de70:	9b03      	ldr	r3, [sp, #12]
 800de72:	4298      	cmp	r0, r3
 800de74:	bfb8      	it	lt
 800de76:	4618      	movlt	r0, r3
 800de78:	e7a6      	b.n	800ddc8 <_printf_i+0x160>
 800de7a:	2301      	movs	r3, #1
 800de7c:	4632      	mov	r2, r6
 800de7e:	4649      	mov	r1, r9
 800de80:	4640      	mov	r0, r8
 800de82:	47d0      	blx	sl
 800de84:	3001      	adds	r0, #1
 800de86:	d09d      	beq.n	800ddc4 <_printf_i+0x15c>
 800de88:	3501      	adds	r5, #1
 800de8a:	68e3      	ldr	r3, [r4, #12]
 800de8c:	9903      	ldr	r1, [sp, #12]
 800de8e:	1a5b      	subs	r3, r3, r1
 800de90:	42ab      	cmp	r3, r5
 800de92:	dcf2      	bgt.n	800de7a <_printf_i+0x212>
 800de94:	e7eb      	b.n	800de6e <_printf_i+0x206>
 800de96:	2500      	movs	r5, #0
 800de98:	f104 0619 	add.w	r6, r4, #25
 800de9c:	e7f5      	b.n	800de8a <_printf_i+0x222>
 800de9e:	bf00      	nop
 800dea0:	08012416 	.word	0x08012416
 800dea4:	08012427 	.word	0x08012427

0800dea8 <_scanf_float>:
 800dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	b087      	sub	sp, #28
 800deae:	4617      	mov	r7, r2
 800deb0:	9303      	str	r3, [sp, #12]
 800deb2:	688b      	ldr	r3, [r1, #8]
 800deb4:	1e5a      	subs	r2, r3, #1
 800deb6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800deba:	bf81      	itttt	hi
 800debc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dec0:	eb03 0b05 	addhi.w	fp, r3, r5
 800dec4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dec8:	608b      	strhi	r3, [r1, #8]
 800deca:	680b      	ldr	r3, [r1, #0]
 800decc:	460a      	mov	r2, r1
 800dece:	f04f 0500 	mov.w	r5, #0
 800ded2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ded6:	f842 3b1c 	str.w	r3, [r2], #28
 800deda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dede:	4680      	mov	r8, r0
 800dee0:	460c      	mov	r4, r1
 800dee2:	bf98      	it	ls
 800dee4:	f04f 0b00 	movls.w	fp, #0
 800dee8:	9201      	str	r2, [sp, #4]
 800deea:	4616      	mov	r6, r2
 800deec:	46aa      	mov	sl, r5
 800deee:	46a9      	mov	r9, r5
 800def0:	9502      	str	r5, [sp, #8]
 800def2:	68a2      	ldr	r2, [r4, #8]
 800def4:	b152      	cbz	r2, 800df0c <_scanf_float+0x64>
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	2b4e      	cmp	r3, #78	@ 0x4e
 800defc:	d864      	bhi.n	800dfc8 <_scanf_float+0x120>
 800defe:	2b40      	cmp	r3, #64	@ 0x40
 800df00:	d83c      	bhi.n	800df7c <_scanf_float+0xd4>
 800df02:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800df06:	b2c8      	uxtb	r0, r1
 800df08:	280e      	cmp	r0, #14
 800df0a:	d93a      	bls.n	800df82 <_scanf_float+0xda>
 800df0c:	f1b9 0f00 	cmp.w	r9, #0
 800df10:	d003      	beq.n	800df1a <_scanf_float+0x72>
 800df12:	6823      	ldr	r3, [r4, #0]
 800df14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df1e:	f1ba 0f01 	cmp.w	sl, #1
 800df22:	f200 8117 	bhi.w	800e154 <_scanf_float+0x2ac>
 800df26:	9b01      	ldr	r3, [sp, #4]
 800df28:	429e      	cmp	r6, r3
 800df2a:	f200 8108 	bhi.w	800e13e <_scanf_float+0x296>
 800df2e:	2001      	movs	r0, #1
 800df30:	b007      	add	sp, #28
 800df32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df36:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800df3a:	2a0d      	cmp	r2, #13
 800df3c:	d8e6      	bhi.n	800df0c <_scanf_float+0x64>
 800df3e:	a101      	add	r1, pc, #4	@ (adr r1, 800df44 <_scanf_float+0x9c>)
 800df40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df44:	0800e08b 	.word	0x0800e08b
 800df48:	0800df0d 	.word	0x0800df0d
 800df4c:	0800df0d 	.word	0x0800df0d
 800df50:	0800df0d 	.word	0x0800df0d
 800df54:	0800e0eb 	.word	0x0800e0eb
 800df58:	0800e0c3 	.word	0x0800e0c3
 800df5c:	0800df0d 	.word	0x0800df0d
 800df60:	0800df0d 	.word	0x0800df0d
 800df64:	0800e099 	.word	0x0800e099
 800df68:	0800df0d 	.word	0x0800df0d
 800df6c:	0800df0d 	.word	0x0800df0d
 800df70:	0800df0d 	.word	0x0800df0d
 800df74:	0800df0d 	.word	0x0800df0d
 800df78:	0800e051 	.word	0x0800e051
 800df7c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800df80:	e7db      	b.n	800df3a <_scanf_float+0x92>
 800df82:	290e      	cmp	r1, #14
 800df84:	d8c2      	bhi.n	800df0c <_scanf_float+0x64>
 800df86:	a001      	add	r0, pc, #4	@ (adr r0, 800df8c <_scanf_float+0xe4>)
 800df88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800df8c:	0800e041 	.word	0x0800e041
 800df90:	0800df0d 	.word	0x0800df0d
 800df94:	0800e041 	.word	0x0800e041
 800df98:	0800e0d7 	.word	0x0800e0d7
 800df9c:	0800df0d 	.word	0x0800df0d
 800dfa0:	0800dfe9 	.word	0x0800dfe9
 800dfa4:	0800e027 	.word	0x0800e027
 800dfa8:	0800e027 	.word	0x0800e027
 800dfac:	0800e027 	.word	0x0800e027
 800dfb0:	0800e027 	.word	0x0800e027
 800dfb4:	0800e027 	.word	0x0800e027
 800dfb8:	0800e027 	.word	0x0800e027
 800dfbc:	0800e027 	.word	0x0800e027
 800dfc0:	0800e027 	.word	0x0800e027
 800dfc4:	0800e027 	.word	0x0800e027
 800dfc8:	2b6e      	cmp	r3, #110	@ 0x6e
 800dfca:	d809      	bhi.n	800dfe0 <_scanf_float+0x138>
 800dfcc:	2b60      	cmp	r3, #96	@ 0x60
 800dfce:	d8b2      	bhi.n	800df36 <_scanf_float+0x8e>
 800dfd0:	2b54      	cmp	r3, #84	@ 0x54
 800dfd2:	d07b      	beq.n	800e0cc <_scanf_float+0x224>
 800dfd4:	2b59      	cmp	r3, #89	@ 0x59
 800dfd6:	d199      	bne.n	800df0c <_scanf_float+0x64>
 800dfd8:	2d07      	cmp	r5, #7
 800dfda:	d197      	bne.n	800df0c <_scanf_float+0x64>
 800dfdc:	2508      	movs	r5, #8
 800dfde:	e02c      	b.n	800e03a <_scanf_float+0x192>
 800dfe0:	2b74      	cmp	r3, #116	@ 0x74
 800dfe2:	d073      	beq.n	800e0cc <_scanf_float+0x224>
 800dfe4:	2b79      	cmp	r3, #121	@ 0x79
 800dfe6:	e7f6      	b.n	800dfd6 <_scanf_float+0x12e>
 800dfe8:	6821      	ldr	r1, [r4, #0]
 800dfea:	05c8      	lsls	r0, r1, #23
 800dfec:	d51b      	bpl.n	800e026 <_scanf_float+0x17e>
 800dfee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800dff2:	6021      	str	r1, [r4, #0]
 800dff4:	f109 0901 	add.w	r9, r9, #1
 800dff8:	f1bb 0f00 	cmp.w	fp, #0
 800dffc:	d003      	beq.n	800e006 <_scanf_float+0x15e>
 800dffe:	3201      	adds	r2, #1
 800e000:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e004:	60a2      	str	r2, [r4, #8]
 800e006:	68a3      	ldr	r3, [r4, #8]
 800e008:	3b01      	subs	r3, #1
 800e00a:	60a3      	str	r3, [r4, #8]
 800e00c:	6923      	ldr	r3, [r4, #16]
 800e00e:	3301      	adds	r3, #1
 800e010:	6123      	str	r3, [r4, #16]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	3b01      	subs	r3, #1
 800e016:	2b00      	cmp	r3, #0
 800e018:	607b      	str	r3, [r7, #4]
 800e01a:	f340 8087 	ble.w	800e12c <_scanf_float+0x284>
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	3301      	adds	r3, #1
 800e022:	603b      	str	r3, [r7, #0]
 800e024:	e765      	b.n	800def2 <_scanf_float+0x4a>
 800e026:	eb1a 0105 	adds.w	r1, sl, r5
 800e02a:	f47f af6f 	bne.w	800df0c <_scanf_float+0x64>
 800e02e:	6822      	ldr	r2, [r4, #0]
 800e030:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e034:	6022      	str	r2, [r4, #0]
 800e036:	460d      	mov	r5, r1
 800e038:	468a      	mov	sl, r1
 800e03a:	f806 3b01 	strb.w	r3, [r6], #1
 800e03e:	e7e2      	b.n	800e006 <_scanf_float+0x15e>
 800e040:	6822      	ldr	r2, [r4, #0]
 800e042:	0610      	lsls	r0, r2, #24
 800e044:	f57f af62 	bpl.w	800df0c <_scanf_float+0x64>
 800e048:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e04c:	6022      	str	r2, [r4, #0]
 800e04e:	e7f4      	b.n	800e03a <_scanf_float+0x192>
 800e050:	f1ba 0f00 	cmp.w	sl, #0
 800e054:	d10e      	bne.n	800e074 <_scanf_float+0x1cc>
 800e056:	f1b9 0f00 	cmp.w	r9, #0
 800e05a:	d10e      	bne.n	800e07a <_scanf_float+0x1d2>
 800e05c:	6822      	ldr	r2, [r4, #0]
 800e05e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e062:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e066:	d108      	bne.n	800e07a <_scanf_float+0x1d2>
 800e068:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e06c:	6022      	str	r2, [r4, #0]
 800e06e:	f04f 0a01 	mov.w	sl, #1
 800e072:	e7e2      	b.n	800e03a <_scanf_float+0x192>
 800e074:	f1ba 0f02 	cmp.w	sl, #2
 800e078:	d055      	beq.n	800e126 <_scanf_float+0x27e>
 800e07a:	2d01      	cmp	r5, #1
 800e07c:	d002      	beq.n	800e084 <_scanf_float+0x1dc>
 800e07e:	2d04      	cmp	r5, #4
 800e080:	f47f af44 	bne.w	800df0c <_scanf_float+0x64>
 800e084:	3501      	adds	r5, #1
 800e086:	b2ed      	uxtb	r5, r5
 800e088:	e7d7      	b.n	800e03a <_scanf_float+0x192>
 800e08a:	f1ba 0f01 	cmp.w	sl, #1
 800e08e:	f47f af3d 	bne.w	800df0c <_scanf_float+0x64>
 800e092:	f04f 0a02 	mov.w	sl, #2
 800e096:	e7d0      	b.n	800e03a <_scanf_float+0x192>
 800e098:	b97d      	cbnz	r5, 800e0ba <_scanf_float+0x212>
 800e09a:	f1b9 0f00 	cmp.w	r9, #0
 800e09e:	f47f af38 	bne.w	800df12 <_scanf_float+0x6a>
 800e0a2:	6822      	ldr	r2, [r4, #0]
 800e0a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e0a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e0ac:	f040 8101 	bne.w	800e2b2 <_scanf_float+0x40a>
 800e0b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e0b4:	6022      	str	r2, [r4, #0]
 800e0b6:	2501      	movs	r5, #1
 800e0b8:	e7bf      	b.n	800e03a <_scanf_float+0x192>
 800e0ba:	2d03      	cmp	r5, #3
 800e0bc:	d0e2      	beq.n	800e084 <_scanf_float+0x1dc>
 800e0be:	2d05      	cmp	r5, #5
 800e0c0:	e7de      	b.n	800e080 <_scanf_float+0x1d8>
 800e0c2:	2d02      	cmp	r5, #2
 800e0c4:	f47f af22 	bne.w	800df0c <_scanf_float+0x64>
 800e0c8:	2503      	movs	r5, #3
 800e0ca:	e7b6      	b.n	800e03a <_scanf_float+0x192>
 800e0cc:	2d06      	cmp	r5, #6
 800e0ce:	f47f af1d 	bne.w	800df0c <_scanf_float+0x64>
 800e0d2:	2507      	movs	r5, #7
 800e0d4:	e7b1      	b.n	800e03a <_scanf_float+0x192>
 800e0d6:	6822      	ldr	r2, [r4, #0]
 800e0d8:	0591      	lsls	r1, r2, #22
 800e0da:	f57f af17 	bpl.w	800df0c <_scanf_float+0x64>
 800e0de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e0e2:	6022      	str	r2, [r4, #0]
 800e0e4:	f8cd 9008 	str.w	r9, [sp, #8]
 800e0e8:	e7a7      	b.n	800e03a <_scanf_float+0x192>
 800e0ea:	6822      	ldr	r2, [r4, #0]
 800e0ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e0f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e0f4:	d006      	beq.n	800e104 <_scanf_float+0x25c>
 800e0f6:	0550      	lsls	r0, r2, #21
 800e0f8:	f57f af08 	bpl.w	800df0c <_scanf_float+0x64>
 800e0fc:	f1b9 0f00 	cmp.w	r9, #0
 800e100:	f000 80d7 	beq.w	800e2b2 <_scanf_float+0x40a>
 800e104:	0591      	lsls	r1, r2, #22
 800e106:	bf58      	it	pl
 800e108:	9902      	ldrpl	r1, [sp, #8]
 800e10a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e10e:	bf58      	it	pl
 800e110:	eba9 0101 	subpl.w	r1, r9, r1
 800e114:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e118:	bf58      	it	pl
 800e11a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	f04f 0900 	mov.w	r9, #0
 800e124:	e789      	b.n	800e03a <_scanf_float+0x192>
 800e126:	f04f 0a03 	mov.w	sl, #3
 800e12a:	e786      	b.n	800e03a <_scanf_float+0x192>
 800e12c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e130:	4639      	mov	r1, r7
 800e132:	4640      	mov	r0, r8
 800e134:	4798      	blx	r3
 800e136:	2800      	cmp	r0, #0
 800e138:	f43f aedb 	beq.w	800def2 <_scanf_float+0x4a>
 800e13c:	e6e6      	b.n	800df0c <_scanf_float+0x64>
 800e13e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e142:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e146:	463a      	mov	r2, r7
 800e148:	4640      	mov	r0, r8
 800e14a:	4798      	blx	r3
 800e14c:	6923      	ldr	r3, [r4, #16]
 800e14e:	3b01      	subs	r3, #1
 800e150:	6123      	str	r3, [r4, #16]
 800e152:	e6e8      	b.n	800df26 <_scanf_float+0x7e>
 800e154:	1e6b      	subs	r3, r5, #1
 800e156:	2b06      	cmp	r3, #6
 800e158:	d824      	bhi.n	800e1a4 <_scanf_float+0x2fc>
 800e15a:	2d02      	cmp	r5, #2
 800e15c:	d836      	bhi.n	800e1cc <_scanf_float+0x324>
 800e15e:	9b01      	ldr	r3, [sp, #4]
 800e160:	429e      	cmp	r6, r3
 800e162:	f67f aee4 	bls.w	800df2e <_scanf_float+0x86>
 800e166:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e16a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e16e:	463a      	mov	r2, r7
 800e170:	4640      	mov	r0, r8
 800e172:	4798      	blx	r3
 800e174:	6923      	ldr	r3, [r4, #16]
 800e176:	3b01      	subs	r3, #1
 800e178:	6123      	str	r3, [r4, #16]
 800e17a:	e7f0      	b.n	800e15e <_scanf_float+0x2b6>
 800e17c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e180:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e184:	463a      	mov	r2, r7
 800e186:	4640      	mov	r0, r8
 800e188:	4798      	blx	r3
 800e18a:	6923      	ldr	r3, [r4, #16]
 800e18c:	3b01      	subs	r3, #1
 800e18e:	6123      	str	r3, [r4, #16]
 800e190:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e194:	fa5f fa8a 	uxtb.w	sl, sl
 800e198:	f1ba 0f02 	cmp.w	sl, #2
 800e19c:	d1ee      	bne.n	800e17c <_scanf_float+0x2d4>
 800e19e:	3d03      	subs	r5, #3
 800e1a0:	b2ed      	uxtb	r5, r5
 800e1a2:	1b76      	subs	r6, r6, r5
 800e1a4:	6823      	ldr	r3, [r4, #0]
 800e1a6:	05da      	lsls	r2, r3, #23
 800e1a8:	d530      	bpl.n	800e20c <_scanf_float+0x364>
 800e1aa:	055b      	lsls	r3, r3, #21
 800e1ac:	d511      	bpl.n	800e1d2 <_scanf_float+0x32a>
 800e1ae:	9b01      	ldr	r3, [sp, #4]
 800e1b0:	429e      	cmp	r6, r3
 800e1b2:	f67f aebc 	bls.w	800df2e <_scanf_float+0x86>
 800e1b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e1ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e1be:	463a      	mov	r2, r7
 800e1c0:	4640      	mov	r0, r8
 800e1c2:	4798      	blx	r3
 800e1c4:	6923      	ldr	r3, [r4, #16]
 800e1c6:	3b01      	subs	r3, #1
 800e1c8:	6123      	str	r3, [r4, #16]
 800e1ca:	e7f0      	b.n	800e1ae <_scanf_float+0x306>
 800e1cc:	46aa      	mov	sl, r5
 800e1ce:	46b3      	mov	fp, r6
 800e1d0:	e7de      	b.n	800e190 <_scanf_float+0x2e8>
 800e1d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e1d6:	6923      	ldr	r3, [r4, #16]
 800e1d8:	2965      	cmp	r1, #101	@ 0x65
 800e1da:	f103 33ff 	add.w	r3, r3, #4294967295
 800e1de:	f106 35ff 	add.w	r5, r6, #4294967295
 800e1e2:	6123      	str	r3, [r4, #16]
 800e1e4:	d00c      	beq.n	800e200 <_scanf_float+0x358>
 800e1e6:	2945      	cmp	r1, #69	@ 0x45
 800e1e8:	d00a      	beq.n	800e200 <_scanf_float+0x358>
 800e1ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e1ee:	463a      	mov	r2, r7
 800e1f0:	4640      	mov	r0, r8
 800e1f2:	4798      	blx	r3
 800e1f4:	6923      	ldr	r3, [r4, #16]
 800e1f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	1eb5      	subs	r5, r6, #2
 800e1fe:	6123      	str	r3, [r4, #16]
 800e200:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e204:	463a      	mov	r2, r7
 800e206:	4640      	mov	r0, r8
 800e208:	4798      	blx	r3
 800e20a:	462e      	mov	r6, r5
 800e20c:	6822      	ldr	r2, [r4, #0]
 800e20e:	f012 0210 	ands.w	r2, r2, #16
 800e212:	d001      	beq.n	800e218 <_scanf_float+0x370>
 800e214:	2000      	movs	r0, #0
 800e216:	e68b      	b.n	800df30 <_scanf_float+0x88>
 800e218:	7032      	strb	r2, [r6, #0]
 800e21a:	6823      	ldr	r3, [r4, #0]
 800e21c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e224:	d11a      	bne.n	800e25c <_scanf_float+0x3b4>
 800e226:	9b02      	ldr	r3, [sp, #8]
 800e228:	454b      	cmp	r3, r9
 800e22a:	eba3 0209 	sub.w	r2, r3, r9
 800e22e:	d121      	bne.n	800e274 <_scanf_float+0x3cc>
 800e230:	9901      	ldr	r1, [sp, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	4640      	mov	r0, r8
 800e236:	f002 fc41 	bl	8010abc <_strtod_r>
 800e23a:	9b03      	ldr	r3, [sp, #12]
 800e23c:	6821      	ldr	r1, [r4, #0]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f011 0f02 	tst.w	r1, #2
 800e244:	f103 0204 	add.w	r2, r3, #4
 800e248:	d01f      	beq.n	800e28a <_scanf_float+0x3e2>
 800e24a:	9903      	ldr	r1, [sp, #12]
 800e24c:	600a      	str	r2, [r1, #0]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	ed83 0b00 	vstr	d0, [r3]
 800e254:	68e3      	ldr	r3, [r4, #12]
 800e256:	3301      	adds	r3, #1
 800e258:	60e3      	str	r3, [r4, #12]
 800e25a:	e7db      	b.n	800e214 <_scanf_float+0x36c>
 800e25c:	9b04      	ldr	r3, [sp, #16]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d0e6      	beq.n	800e230 <_scanf_float+0x388>
 800e262:	9905      	ldr	r1, [sp, #20]
 800e264:	230a      	movs	r3, #10
 800e266:	3101      	adds	r1, #1
 800e268:	4640      	mov	r0, r8
 800e26a:	f002 fca7 	bl	8010bbc <_strtol_r>
 800e26e:	9b04      	ldr	r3, [sp, #16]
 800e270:	9e05      	ldr	r6, [sp, #20]
 800e272:	1ac2      	subs	r2, r0, r3
 800e274:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e278:	429e      	cmp	r6, r3
 800e27a:	bf28      	it	cs
 800e27c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e280:	490d      	ldr	r1, [pc, #52]	@ (800e2b8 <_scanf_float+0x410>)
 800e282:	4630      	mov	r0, r6
 800e284:	f000 f94e 	bl	800e524 <siprintf>
 800e288:	e7d2      	b.n	800e230 <_scanf_float+0x388>
 800e28a:	f011 0f04 	tst.w	r1, #4
 800e28e:	9903      	ldr	r1, [sp, #12]
 800e290:	600a      	str	r2, [r1, #0]
 800e292:	d1dc      	bne.n	800e24e <_scanf_float+0x3a6>
 800e294:	eeb4 0b40 	vcmp.f64	d0, d0
 800e298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29c:	681d      	ldr	r5, [r3, #0]
 800e29e:	d705      	bvc.n	800e2ac <_scanf_float+0x404>
 800e2a0:	4806      	ldr	r0, [pc, #24]	@ (800e2bc <_scanf_float+0x414>)
 800e2a2:	f000 fac5 	bl	800e830 <nanf>
 800e2a6:	ed85 0a00 	vstr	s0, [r5]
 800e2aa:	e7d3      	b.n	800e254 <_scanf_float+0x3ac>
 800e2ac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e2b0:	e7f9      	b.n	800e2a6 <_scanf_float+0x3fe>
 800e2b2:	f04f 0900 	mov.w	r9, #0
 800e2b6:	e630      	b.n	800df1a <_scanf_float+0x72>
 800e2b8:	08012438 	.word	0x08012438
 800e2bc:	080127cd 	.word	0x080127cd

0800e2c0 <std>:
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	b510      	push	{r4, lr}
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e2ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2ce:	6083      	str	r3, [r0, #8]
 800e2d0:	8181      	strh	r1, [r0, #12]
 800e2d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e2d4:	81c2      	strh	r2, [r0, #14]
 800e2d6:	6183      	str	r3, [r0, #24]
 800e2d8:	4619      	mov	r1, r3
 800e2da:	2208      	movs	r2, #8
 800e2dc:	305c      	adds	r0, #92	@ 0x5c
 800e2de:	f000 fa19 	bl	800e714 <memset>
 800e2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e318 <std+0x58>)
 800e2e4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e31c <std+0x5c>)
 800e2e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e320 <std+0x60>)
 800e2ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e324 <std+0x64>)
 800e2f0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e328 <std+0x68>)
 800e2f4:	6224      	str	r4, [r4, #32]
 800e2f6:	429c      	cmp	r4, r3
 800e2f8:	d006      	beq.n	800e308 <std+0x48>
 800e2fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e2fe:	4294      	cmp	r4, r2
 800e300:	d002      	beq.n	800e308 <std+0x48>
 800e302:	33d0      	adds	r3, #208	@ 0xd0
 800e304:	429c      	cmp	r4, r3
 800e306:	d105      	bne.n	800e314 <std+0x54>
 800e308:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e310:	f000 ba7c 	b.w	800e80c <__retarget_lock_init_recursive>
 800e314:	bd10      	pop	{r4, pc}
 800e316:	bf00      	nop
 800e318:	0800e565 	.word	0x0800e565
 800e31c:	0800e587 	.word	0x0800e587
 800e320:	0800e5bf 	.word	0x0800e5bf
 800e324:	0800e5e3 	.word	0x0800e5e3
 800e328:	240009f8 	.word	0x240009f8

0800e32c <stdio_exit_handler>:
 800e32c:	4a02      	ldr	r2, [pc, #8]	@ (800e338 <stdio_exit_handler+0xc>)
 800e32e:	4903      	ldr	r1, [pc, #12]	@ (800e33c <stdio_exit_handler+0x10>)
 800e330:	4803      	ldr	r0, [pc, #12]	@ (800e340 <stdio_exit_handler+0x14>)
 800e332:	f000 b869 	b.w	800e408 <_fwalk_sglue>
 800e336:	bf00      	nop
 800e338:	24000018 	.word	0x24000018
 800e33c:	080111fd 	.word	0x080111fd
 800e340:	24000028 	.word	0x24000028

0800e344 <cleanup_stdio>:
 800e344:	6841      	ldr	r1, [r0, #4]
 800e346:	4b0c      	ldr	r3, [pc, #48]	@ (800e378 <cleanup_stdio+0x34>)
 800e348:	4299      	cmp	r1, r3
 800e34a:	b510      	push	{r4, lr}
 800e34c:	4604      	mov	r4, r0
 800e34e:	d001      	beq.n	800e354 <cleanup_stdio+0x10>
 800e350:	f002 ff54 	bl	80111fc <_fflush_r>
 800e354:	68a1      	ldr	r1, [r4, #8]
 800e356:	4b09      	ldr	r3, [pc, #36]	@ (800e37c <cleanup_stdio+0x38>)
 800e358:	4299      	cmp	r1, r3
 800e35a:	d002      	beq.n	800e362 <cleanup_stdio+0x1e>
 800e35c:	4620      	mov	r0, r4
 800e35e:	f002 ff4d 	bl	80111fc <_fflush_r>
 800e362:	68e1      	ldr	r1, [r4, #12]
 800e364:	4b06      	ldr	r3, [pc, #24]	@ (800e380 <cleanup_stdio+0x3c>)
 800e366:	4299      	cmp	r1, r3
 800e368:	d004      	beq.n	800e374 <cleanup_stdio+0x30>
 800e36a:	4620      	mov	r0, r4
 800e36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e370:	f002 bf44 	b.w	80111fc <_fflush_r>
 800e374:	bd10      	pop	{r4, pc}
 800e376:	bf00      	nop
 800e378:	240009f8 	.word	0x240009f8
 800e37c:	24000a60 	.word	0x24000a60
 800e380:	24000ac8 	.word	0x24000ac8

0800e384 <global_stdio_init.part.0>:
 800e384:	b510      	push	{r4, lr}
 800e386:	4b0b      	ldr	r3, [pc, #44]	@ (800e3b4 <global_stdio_init.part.0+0x30>)
 800e388:	4c0b      	ldr	r4, [pc, #44]	@ (800e3b8 <global_stdio_init.part.0+0x34>)
 800e38a:	4a0c      	ldr	r2, [pc, #48]	@ (800e3bc <global_stdio_init.part.0+0x38>)
 800e38c:	601a      	str	r2, [r3, #0]
 800e38e:	4620      	mov	r0, r4
 800e390:	2200      	movs	r2, #0
 800e392:	2104      	movs	r1, #4
 800e394:	f7ff ff94 	bl	800e2c0 <std>
 800e398:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e39c:	2201      	movs	r2, #1
 800e39e:	2109      	movs	r1, #9
 800e3a0:	f7ff ff8e 	bl	800e2c0 <std>
 800e3a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e3a8:	2202      	movs	r2, #2
 800e3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3ae:	2112      	movs	r1, #18
 800e3b0:	f7ff bf86 	b.w	800e2c0 <std>
 800e3b4:	24000b30 	.word	0x24000b30
 800e3b8:	240009f8 	.word	0x240009f8
 800e3bc:	0800e32d 	.word	0x0800e32d

0800e3c0 <__sfp_lock_acquire>:
 800e3c0:	4801      	ldr	r0, [pc, #4]	@ (800e3c8 <__sfp_lock_acquire+0x8>)
 800e3c2:	f000 ba24 	b.w	800e80e <__retarget_lock_acquire_recursive>
 800e3c6:	bf00      	nop
 800e3c8:	24000b39 	.word	0x24000b39

0800e3cc <__sfp_lock_release>:
 800e3cc:	4801      	ldr	r0, [pc, #4]	@ (800e3d4 <__sfp_lock_release+0x8>)
 800e3ce:	f000 ba1f 	b.w	800e810 <__retarget_lock_release_recursive>
 800e3d2:	bf00      	nop
 800e3d4:	24000b39 	.word	0x24000b39

0800e3d8 <__sinit>:
 800e3d8:	b510      	push	{r4, lr}
 800e3da:	4604      	mov	r4, r0
 800e3dc:	f7ff fff0 	bl	800e3c0 <__sfp_lock_acquire>
 800e3e0:	6a23      	ldr	r3, [r4, #32]
 800e3e2:	b11b      	cbz	r3, 800e3ec <__sinit+0x14>
 800e3e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3e8:	f7ff bff0 	b.w	800e3cc <__sfp_lock_release>
 800e3ec:	4b04      	ldr	r3, [pc, #16]	@ (800e400 <__sinit+0x28>)
 800e3ee:	6223      	str	r3, [r4, #32]
 800e3f0:	4b04      	ldr	r3, [pc, #16]	@ (800e404 <__sinit+0x2c>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1f5      	bne.n	800e3e4 <__sinit+0xc>
 800e3f8:	f7ff ffc4 	bl	800e384 <global_stdio_init.part.0>
 800e3fc:	e7f2      	b.n	800e3e4 <__sinit+0xc>
 800e3fe:	bf00      	nop
 800e400:	0800e345 	.word	0x0800e345
 800e404:	24000b30 	.word	0x24000b30

0800e408 <_fwalk_sglue>:
 800e408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e40c:	4607      	mov	r7, r0
 800e40e:	4688      	mov	r8, r1
 800e410:	4614      	mov	r4, r2
 800e412:	2600      	movs	r6, #0
 800e414:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e418:	f1b9 0901 	subs.w	r9, r9, #1
 800e41c:	d505      	bpl.n	800e42a <_fwalk_sglue+0x22>
 800e41e:	6824      	ldr	r4, [r4, #0]
 800e420:	2c00      	cmp	r4, #0
 800e422:	d1f7      	bne.n	800e414 <_fwalk_sglue+0xc>
 800e424:	4630      	mov	r0, r6
 800e426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e42a:	89ab      	ldrh	r3, [r5, #12]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d907      	bls.n	800e440 <_fwalk_sglue+0x38>
 800e430:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e434:	3301      	adds	r3, #1
 800e436:	d003      	beq.n	800e440 <_fwalk_sglue+0x38>
 800e438:	4629      	mov	r1, r5
 800e43a:	4638      	mov	r0, r7
 800e43c:	47c0      	blx	r8
 800e43e:	4306      	orrs	r6, r0
 800e440:	3568      	adds	r5, #104	@ 0x68
 800e442:	e7e9      	b.n	800e418 <_fwalk_sglue+0x10>

0800e444 <iprintf>:
 800e444:	b40f      	push	{r0, r1, r2, r3}
 800e446:	b507      	push	{r0, r1, r2, lr}
 800e448:	4906      	ldr	r1, [pc, #24]	@ (800e464 <iprintf+0x20>)
 800e44a:	ab04      	add	r3, sp, #16
 800e44c:	6808      	ldr	r0, [r1, #0]
 800e44e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e452:	6881      	ldr	r1, [r0, #8]
 800e454:	9301      	str	r3, [sp, #4]
 800e456:	f002 fd35 	bl	8010ec4 <_vfiprintf_r>
 800e45a:	b003      	add	sp, #12
 800e45c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e460:	b004      	add	sp, #16
 800e462:	4770      	bx	lr
 800e464:	24000024 	.word	0x24000024

0800e468 <_puts_r>:
 800e468:	6a03      	ldr	r3, [r0, #32]
 800e46a:	b570      	push	{r4, r5, r6, lr}
 800e46c:	6884      	ldr	r4, [r0, #8]
 800e46e:	4605      	mov	r5, r0
 800e470:	460e      	mov	r6, r1
 800e472:	b90b      	cbnz	r3, 800e478 <_puts_r+0x10>
 800e474:	f7ff ffb0 	bl	800e3d8 <__sinit>
 800e478:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e47a:	07db      	lsls	r3, r3, #31
 800e47c:	d405      	bmi.n	800e48a <_puts_r+0x22>
 800e47e:	89a3      	ldrh	r3, [r4, #12]
 800e480:	0598      	lsls	r0, r3, #22
 800e482:	d402      	bmi.n	800e48a <_puts_r+0x22>
 800e484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e486:	f000 f9c2 	bl	800e80e <__retarget_lock_acquire_recursive>
 800e48a:	89a3      	ldrh	r3, [r4, #12]
 800e48c:	0719      	lsls	r1, r3, #28
 800e48e:	d502      	bpl.n	800e496 <_puts_r+0x2e>
 800e490:	6923      	ldr	r3, [r4, #16]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d135      	bne.n	800e502 <_puts_r+0x9a>
 800e496:	4621      	mov	r1, r4
 800e498:	4628      	mov	r0, r5
 800e49a:	f000 f8e5 	bl	800e668 <__swsetup_r>
 800e49e:	b380      	cbz	r0, 800e502 <_puts_r+0x9a>
 800e4a0:	f04f 35ff 	mov.w	r5, #4294967295
 800e4a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4a6:	07da      	lsls	r2, r3, #31
 800e4a8:	d405      	bmi.n	800e4b6 <_puts_r+0x4e>
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	059b      	lsls	r3, r3, #22
 800e4ae:	d402      	bmi.n	800e4b6 <_puts_r+0x4e>
 800e4b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4b2:	f000 f9ad 	bl	800e810 <__retarget_lock_release_recursive>
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	da04      	bge.n	800e4c8 <_puts_r+0x60>
 800e4be:	69a2      	ldr	r2, [r4, #24]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	dc17      	bgt.n	800e4f4 <_puts_r+0x8c>
 800e4c4:	290a      	cmp	r1, #10
 800e4c6:	d015      	beq.n	800e4f4 <_puts_r+0x8c>
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	1c5a      	adds	r2, r3, #1
 800e4cc:	6022      	str	r2, [r4, #0]
 800e4ce:	7019      	strb	r1, [r3, #0]
 800e4d0:	68a3      	ldr	r3, [r4, #8]
 800e4d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	60a3      	str	r3, [r4, #8]
 800e4da:	2900      	cmp	r1, #0
 800e4dc:	d1ed      	bne.n	800e4ba <_puts_r+0x52>
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	da11      	bge.n	800e506 <_puts_r+0x9e>
 800e4e2:	4622      	mov	r2, r4
 800e4e4:	210a      	movs	r1, #10
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	f000 f87f 	bl	800e5ea <__swbuf_r>
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	d0d7      	beq.n	800e4a0 <_puts_r+0x38>
 800e4f0:	250a      	movs	r5, #10
 800e4f2:	e7d7      	b.n	800e4a4 <_puts_r+0x3c>
 800e4f4:	4622      	mov	r2, r4
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	f000 f877 	bl	800e5ea <__swbuf_r>
 800e4fc:	3001      	adds	r0, #1
 800e4fe:	d1e7      	bne.n	800e4d0 <_puts_r+0x68>
 800e500:	e7ce      	b.n	800e4a0 <_puts_r+0x38>
 800e502:	3e01      	subs	r6, #1
 800e504:	e7e4      	b.n	800e4d0 <_puts_r+0x68>
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	1c5a      	adds	r2, r3, #1
 800e50a:	6022      	str	r2, [r4, #0]
 800e50c:	220a      	movs	r2, #10
 800e50e:	701a      	strb	r2, [r3, #0]
 800e510:	e7ee      	b.n	800e4f0 <_puts_r+0x88>
	...

0800e514 <puts>:
 800e514:	4b02      	ldr	r3, [pc, #8]	@ (800e520 <puts+0xc>)
 800e516:	4601      	mov	r1, r0
 800e518:	6818      	ldr	r0, [r3, #0]
 800e51a:	f7ff bfa5 	b.w	800e468 <_puts_r>
 800e51e:	bf00      	nop
 800e520:	24000024 	.word	0x24000024

0800e524 <siprintf>:
 800e524:	b40e      	push	{r1, r2, r3}
 800e526:	b500      	push	{lr}
 800e528:	b09c      	sub	sp, #112	@ 0x70
 800e52a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e52c:	9002      	str	r0, [sp, #8]
 800e52e:	9006      	str	r0, [sp, #24]
 800e530:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e534:	4809      	ldr	r0, [pc, #36]	@ (800e55c <siprintf+0x38>)
 800e536:	9107      	str	r1, [sp, #28]
 800e538:	9104      	str	r1, [sp, #16]
 800e53a:	4909      	ldr	r1, [pc, #36]	@ (800e560 <siprintf+0x3c>)
 800e53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e540:	9105      	str	r1, [sp, #20]
 800e542:	6800      	ldr	r0, [r0, #0]
 800e544:	9301      	str	r3, [sp, #4]
 800e546:	a902      	add	r1, sp, #8
 800e548:	f002 fb96 	bl	8010c78 <_svfiprintf_r>
 800e54c:	9b02      	ldr	r3, [sp, #8]
 800e54e:	2200      	movs	r2, #0
 800e550:	701a      	strb	r2, [r3, #0]
 800e552:	b01c      	add	sp, #112	@ 0x70
 800e554:	f85d eb04 	ldr.w	lr, [sp], #4
 800e558:	b003      	add	sp, #12
 800e55a:	4770      	bx	lr
 800e55c:	24000024 	.word	0x24000024
 800e560:	ffff0208 	.word	0xffff0208

0800e564 <__sread>:
 800e564:	b510      	push	{r4, lr}
 800e566:	460c      	mov	r4, r1
 800e568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e56c:	f000 f900 	bl	800e770 <_read_r>
 800e570:	2800      	cmp	r0, #0
 800e572:	bfab      	itete	ge
 800e574:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e576:	89a3      	ldrhlt	r3, [r4, #12]
 800e578:	181b      	addge	r3, r3, r0
 800e57a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e57e:	bfac      	ite	ge
 800e580:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e582:	81a3      	strhlt	r3, [r4, #12]
 800e584:	bd10      	pop	{r4, pc}

0800e586 <__swrite>:
 800e586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e58a:	461f      	mov	r7, r3
 800e58c:	898b      	ldrh	r3, [r1, #12]
 800e58e:	05db      	lsls	r3, r3, #23
 800e590:	4605      	mov	r5, r0
 800e592:	460c      	mov	r4, r1
 800e594:	4616      	mov	r6, r2
 800e596:	d505      	bpl.n	800e5a4 <__swrite+0x1e>
 800e598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e59c:	2302      	movs	r3, #2
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f000 f8d4 	bl	800e74c <_lseek_r>
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e5ae:	81a3      	strh	r3, [r4, #12]
 800e5b0:	4632      	mov	r2, r6
 800e5b2:	463b      	mov	r3, r7
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ba:	f000 b8eb 	b.w	800e794 <_write_r>

0800e5be <__sseek>:
 800e5be:	b510      	push	{r4, lr}
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c6:	f000 f8c1 	bl	800e74c <_lseek_r>
 800e5ca:	1c43      	adds	r3, r0, #1
 800e5cc:	89a3      	ldrh	r3, [r4, #12]
 800e5ce:	bf15      	itete	ne
 800e5d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e5d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e5d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e5da:	81a3      	strheq	r3, [r4, #12]
 800e5dc:	bf18      	it	ne
 800e5de:	81a3      	strhne	r3, [r4, #12]
 800e5e0:	bd10      	pop	{r4, pc}

0800e5e2 <__sclose>:
 800e5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e6:	f000 b8a1 	b.w	800e72c <_close_r>

0800e5ea <__swbuf_r>:
 800e5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ec:	460e      	mov	r6, r1
 800e5ee:	4614      	mov	r4, r2
 800e5f0:	4605      	mov	r5, r0
 800e5f2:	b118      	cbz	r0, 800e5fc <__swbuf_r+0x12>
 800e5f4:	6a03      	ldr	r3, [r0, #32]
 800e5f6:	b90b      	cbnz	r3, 800e5fc <__swbuf_r+0x12>
 800e5f8:	f7ff feee 	bl	800e3d8 <__sinit>
 800e5fc:	69a3      	ldr	r3, [r4, #24]
 800e5fe:	60a3      	str	r3, [r4, #8]
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	071a      	lsls	r2, r3, #28
 800e604:	d501      	bpl.n	800e60a <__swbuf_r+0x20>
 800e606:	6923      	ldr	r3, [r4, #16]
 800e608:	b943      	cbnz	r3, 800e61c <__swbuf_r+0x32>
 800e60a:	4621      	mov	r1, r4
 800e60c:	4628      	mov	r0, r5
 800e60e:	f000 f82b 	bl	800e668 <__swsetup_r>
 800e612:	b118      	cbz	r0, 800e61c <__swbuf_r+0x32>
 800e614:	f04f 37ff 	mov.w	r7, #4294967295
 800e618:	4638      	mov	r0, r7
 800e61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e61c:	6823      	ldr	r3, [r4, #0]
 800e61e:	6922      	ldr	r2, [r4, #16]
 800e620:	1a98      	subs	r0, r3, r2
 800e622:	6963      	ldr	r3, [r4, #20]
 800e624:	b2f6      	uxtb	r6, r6
 800e626:	4283      	cmp	r3, r0
 800e628:	4637      	mov	r7, r6
 800e62a:	dc05      	bgt.n	800e638 <__swbuf_r+0x4e>
 800e62c:	4621      	mov	r1, r4
 800e62e:	4628      	mov	r0, r5
 800e630:	f002 fde4 	bl	80111fc <_fflush_r>
 800e634:	2800      	cmp	r0, #0
 800e636:	d1ed      	bne.n	800e614 <__swbuf_r+0x2a>
 800e638:	68a3      	ldr	r3, [r4, #8]
 800e63a:	3b01      	subs	r3, #1
 800e63c:	60a3      	str	r3, [r4, #8]
 800e63e:	6823      	ldr	r3, [r4, #0]
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	6022      	str	r2, [r4, #0]
 800e644:	701e      	strb	r6, [r3, #0]
 800e646:	6962      	ldr	r2, [r4, #20]
 800e648:	1c43      	adds	r3, r0, #1
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d004      	beq.n	800e658 <__swbuf_r+0x6e>
 800e64e:	89a3      	ldrh	r3, [r4, #12]
 800e650:	07db      	lsls	r3, r3, #31
 800e652:	d5e1      	bpl.n	800e618 <__swbuf_r+0x2e>
 800e654:	2e0a      	cmp	r6, #10
 800e656:	d1df      	bne.n	800e618 <__swbuf_r+0x2e>
 800e658:	4621      	mov	r1, r4
 800e65a:	4628      	mov	r0, r5
 800e65c:	f002 fdce 	bl	80111fc <_fflush_r>
 800e660:	2800      	cmp	r0, #0
 800e662:	d0d9      	beq.n	800e618 <__swbuf_r+0x2e>
 800e664:	e7d6      	b.n	800e614 <__swbuf_r+0x2a>
	...

0800e668 <__swsetup_r>:
 800e668:	b538      	push	{r3, r4, r5, lr}
 800e66a:	4b29      	ldr	r3, [pc, #164]	@ (800e710 <__swsetup_r+0xa8>)
 800e66c:	4605      	mov	r5, r0
 800e66e:	6818      	ldr	r0, [r3, #0]
 800e670:	460c      	mov	r4, r1
 800e672:	b118      	cbz	r0, 800e67c <__swsetup_r+0x14>
 800e674:	6a03      	ldr	r3, [r0, #32]
 800e676:	b90b      	cbnz	r3, 800e67c <__swsetup_r+0x14>
 800e678:	f7ff feae 	bl	800e3d8 <__sinit>
 800e67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e680:	0719      	lsls	r1, r3, #28
 800e682:	d422      	bmi.n	800e6ca <__swsetup_r+0x62>
 800e684:	06da      	lsls	r2, r3, #27
 800e686:	d407      	bmi.n	800e698 <__swsetup_r+0x30>
 800e688:	2209      	movs	r2, #9
 800e68a:	602a      	str	r2, [r5, #0]
 800e68c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e690:	81a3      	strh	r3, [r4, #12]
 800e692:	f04f 30ff 	mov.w	r0, #4294967295
 800e696:	e033      	b.n	800e700 <__swsetup_r+0x98>
 800e698:	0758      	lsls	r0, r3, #29
 800e69a:	d512      	bpl.n	800e6c2 <__swsetup_r+0x5a>
 800e69c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e69e:	b141      	cbz	r1, 800e6b2 <__swsetup_r+0x4a>
 800e6a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6a4:	4299      	cmp	r1, r3
 800e6a6:	d002      	beq.n	800e6ae <__swsetup_r+0x46>
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f000 fea7 	bl	800f3fc <_free_r>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6b2:	89a3      	ldrh	r3, [r4, #12]
 800e6b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6b8:	81a3      	strh	r3, [r4, #12]
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	6063      	str	r3, [r4, #4]
 800e6be:	6923      	ldr	r3, [r4, #16]
 800e6c0:	6023      	str	r3, [r4, #0]
 800e6c2:	89a3      	ldrh	r3, [r4, #12]
 800e6c4:	f043 0308 	orr.w	r3, r3, #8
 800e6c8:	81a3      	strh	r3, [r4, #12]
 800e6ca:	6923      	ldr	r3, [r4, #16]
 800e6cc:	b94b      	cbnz	r3, 800e6e2 <__swsetup_r+0x7a>
 800e6ce:	89a3      	ldrh	r3, [r4, #12]
 800e6d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6d8:	d003      	beq.n	800e6e2 <__swsetup_r+0x7a>
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4628      	mov	r0, r5
 800e6de:	f002 fddb 	bl	8011298 <__smakebuf_r>
 800e6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6e6:	f013 0201 	ands.w	r2, r3, #1
 800e6ea:	d00a      	beq.n	800e702 <__swsetup_r+0x9a>
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	60a2      	str	r2, [r4, #8]
 800e6f0:	6962      	ldr	r2, [r4, #20]
 800e6f2:	4252      	negs	r2, r2
 800e6f4:	61a2      	str	r2, [r4, #24]
 800e6f6:	6922      	ldr	r2, [r4, #16]
 800e6f8:	b942      	cbnz	r2, 800e70c <__swsetup_r+0xa4>
 800e6fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6fe:	d1c5      	bne.n	800e68c <__swsetup_r+0x24>
 800e700:	bd38      	pop	{r3, r4, r5, pc}
 800e702:	0799      	lsls	r1, r3, #30
 800e704:	bf58      	it	pl
 800e706:	6962      	ldrpl	r2, [r4, #20]
 800e708:	60a2      	str	r2, [r4, #8]
 800e70a:	e7f4      	b.n	800e6f6 <__swsetup_r+0x8e>
 800e70c:	2000      	movs	r0, #0
 800e70e:	e7f7      	b.n	800e700 <__swsetup_r+0x98>
 800e710:	24000024 	.word	0x24000024

0800e714 <memset>:
 800e714:	4402      	add	r2, r0
 800e716:	4603      	mov	r3, r0
 800e718:	4293      	cmp	r3, r2
 800e71a:	d100      	bne.n	800e71e <memset+0xa>
 800e71c:	4770      	bx	lr
 800e71e:	f803 1b01 	strb.w	r1, [r3], #1
 800e722:	e7f9      	b.n	800e718 <memset+0x4>

0800e724 <_localeconv_r>:
 800e724:	4800      	ldr	r0, [pc, #0]	@ (800e728 <_localeconv_r+0x4>)
 800e726:	4770      	bx	lr
 800e728:	24000164 	.word	0x24000164

0800e72c <_close_r>:
 800e72c:	b538      	push	{r3, r4, r5, lr}
 800e72e:	4d06      	ldr	r5, [pc, #24]	@ (800e748 <_close_r+0x1c>)
 800e730:	2300      	movs	r3, #0
 800e732:	4604      	mov	r4, r0
 800e734:	4608      	mov	r0, r1
 800e736:	602b      	str	r3, [r5, #0]
 800e738:	f7f3 ff96 	bl	8002668 <_close>
 800e73c:	1c43      	adds	r3, r0, #1
 800e73e:	d102      	bne.n	800e746 <_close_r+0x1a>
 800e740:	682b      	ldr	r3, [r5, #0]
 800e742:	b103      	cbz	r3, 800e746 <_close_r+0x1a>
 800e744:	6023      	str	r3, [r4, #0]
 800e746:	bd38      	pop	{r3, r4, r5, pc}
 800e748:	24000b34 	.word	0x24000b34

0800e74c <_lseek_r>:
 800e74c:	b538      	push	{r3, r4, r5, lr}
 800e74e:	4d07      	ldr	r5, [pc, #28]	@ (800e76c <_lseek_r+0x20>)
 800e750:	4604      	mov	r4, r0
 800e752:	4608      	mov	r0, r1
 800e754:	4611      	mov	r1, r2
 800e756:	2200      	movs	r2, #0
 800e758:	602a      	str	r2, [r5, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	f7f3 ffab 	bl	80026b6 <_lseek>
 800e760:	1c43      	adds	r3, r0, #1
 800e762:	d102      	bne.n	800e76a <_lseek_r+0x1e>
 800e764:	682b      	ldr	r3, [r5, #0]
 800e766:	b103      	cbz	r3, 800e76a <_lseek_r+0x1e>
 800e768:	6023      	str	r3, [r4, #0]
 800e76a:	bd38      	pop	{r3, r4, r5, pc}
 800e76c:	24000b34 	.word	0x24000b34

0800e770 <_read_r>:
 800e770:	b538      	push	{r3, r4, r5, lr}
 800e772:	4d07      	ldr	r5, [pc, #28]	@ (800e790 <_read_r+0x20>)
 800e774:	4604      	mov	r4, r0
 800e776:	4608      	mov	r0, r1
 800e778:	4611      	mov	r1, r2
 800e77a:	2200      	movs	r2, #0
 800e77c:	602a      	str	r2, [r5, #0]
 800e77e:	461a      	mov	r2, r3
 800e780:	f7f3 ff55 	bl	800262e <_read>
 800e784:	1c43      	adds	r3, r0, #1
 800e786:	d102      	bne.n	800e78e <_read_r+0x1e>
 800e788:	682b      	ldr	r3, [r5, #0]
 800e78a:	b103      	cbz	r3, 800e78e <_read_r+0x1e>
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	bd38      	pop	{r3, r4, r5, pc}
 800e790:	24000b34 	.word	0x24000b34

0800e794 <_write_r>:
 800e794:	b538      	push	{r3, r4, r5, lr}
 800e796:	4d07      	ldr	r5, [pc, #28]	@ (800e7b4 <_write_r+0x20>)
 800e798:	4604      	mov	r4, r0
 800e79a:	4608      	mov	r0, r1
 800e79c:	4611      	mov	r1, r2
 800e79e:	2200      	movs	r2, #0
 800e7a0:	602a      	str	r2, [r5, #0]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	f7f2 fe87 	bl	80014b6 <_write>
 800e7a8:	1c43      	adds	r3, r0, #1
 800e7aa:	d102      	bne.n	800e7b2 <_write_r+0x1e>
 800e7ac:	682b      	ldr	r3, [r5, #0]
 800e7ae:	b103      	cbz	r3, 800e7b2 <_write_r+0x1e>
 800e7b0:	6023      	str	r3, [r4, #0]
 800e7b2:	bd38      	pop	{r3, r4, r5, pc}
 800e7b4:	24000b34 	.word	0x24000b34

0800e7b8 <__errno>:
 800e7b8:	4b01      	ldr	r3, [pc, #4]	@ (800e7c0 <__errno+0x8>)
 800e7ba:	6818      	ldr	r0, [r3, #0]
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	24000024 	.word	0x24000024

0800e7c4 <__libc_init_array>:
 800e7c4:	b570      	push	{r4, r5, r6, lr}
 800e7c6:	4d0d      	ldr	r5, [pc, #52]	@ (800e7fc <__libc_init_array+0x38>)
 800e7c8:	4c0d      	ldr	r4, [pc, #52]	@ (800e800 <__libc_init_array+0x3c>)
 800e7ca:	1b64      	subs	r4, r4, r5
 800e7cc:	10a4      	asrs	r4, r4, #2
 800e7ce:	2600      	movs	r6, #0
 800e7d0:	42a6      	cmp	r6, r4
 800e7d2:	d109      	bne.n	800e7e8 <__libc_init_array+0x24>
 800e7d4:	4d0b      	ldr	r5, [pc, #44]	@ (800e804 <__libc_init_array+0x40>)
 800e7d6:	4c0c      	ldr	r4, [pc, #48]	@ (800e808 <__libc_init_array+0x44>)
 800e7d8:	f003 fd1a 	bl	8012210 <_init>
 800e7dc:	1b64      	subs	r4, r4, r5
 800e7de:	10a4      	asrs	r4, r4, #2
 800e7e0:	2600      	movs	r6, #0
 800e7e2:	42a6      	cmp	r6, r4
 800e7e4:	d105      	bne.n	800e7f2 <__libc_init_array+0x2e>
 800e7e6:	bd70      	pop	{r4, r5, r6, pc}
 800e7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7ec:	4798      	blx	r3
 800e7ee:	3601      	adds	r6, #1
 800e7f0:	e7ee      	b.n	800e7d0 <__libc_init_array+0xc>
 800e7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7f6:	4798      	blx	r3
 800e7f8:	3601      	adds	r6, #1
 800e7fa:	e7f2      	b.n	800e7e2 <__libc_init_array+0x1e>
 800e7fc:	080140f0 	.word	0x080140f0
 800e800:	080140f0 	.word	0x080140f0
 800e804:	080140f0 	.word	0x080140f0
 800e808:	080140f4 	.word	0x080140f4

0800e80c <__retarget_lock_init_recursive>:
 800e80c:	4770      	bx	lr

0800e80e <__retarget_lock_acquire_recursive>:
 800e80e:	4770      	bx	lr

0800e810 <__retarget_lock_release_recursive>:
 800e810:	4770      	bx	lr

0800e812 <memcpy>:
 800e812:	440a      	add	r2, r1
 800e814:	4291      	cmp	r1, r2
 800e816:	f100 33ff 	add.w	r3, r0, #4294967295
 800e81a:	d100      	bne.n	800e81e <memcpy+0xc>
 800e81c:	4770      	bx	lr
 800e81e:	b510      	push	{r4, lr}
 800e820:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e824:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e828:	4291      	cmp	r1, r2
 800e82a:	d1f9      	bne.n	800e820 <memcpy+0xe>
 800e82c:	bd10      	pop	{r4, pc}
	...

0800e830 <nanf>:
 800e830:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e838 <nanf+0x8>
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	7fc00000 	.word	0x7fc00000

0800e83c <quorem>:
 800e83c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e840:	6903      	ldr	r3, [r0, #16]
 800e842:	690c      	ldr	r4, [r1, #16]
 800e844:	42a3      	cmp	r3, r4
 800e846:	4607      	mov	r7, r0
 800e848:	db7e      	blt.n	800e948 <quorem+0x10c>
 800e84a:	3c01      	subs	r4, #1
 800e84c:	f101 0814 	add.w	r8, r1, #20
 800e850:	00a3      	lsls	r3, r4, #2
 800e852:	f100 0514 	add.w	r5, r0, #20
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e85c:	9301      	str	r3, [sp, #4]
 800e85e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e866:	3301      	adds	r3, #1
 800e868:	429a      	cmp	r2, r3
 800e86a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e86e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e872:	d32e      	bcc.n	800e8d2 <quorem+0x96>
 800e874:	f04f 0a00 	mov.w	sl, #0
 800e878:	46c4      	mov	ip, r8
 800e87a:	46ae      	mov	lr, r5
 800e87c:	46d3      	mov	fp, sl
 800e87e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e882:	b298      	uxth	r0, r3
 800e884:	fb06 a000 	mla	r0, r6, r0, sl
 800e888:	0c02      	lsrs	r2, r0, #16
 800e88a:	0c1b      	lsrs	r3, r3, #16
 800e88c:	fb06 2303 	mla	r3, r6, r3, r2
 800e890:	f8de 2000 	ldr.w	r2, [lr]
 800e894:	b280      	uxth	r0, r0
 800e896:	b292      	uxth	r2, r2
 800e898:	1a12      	subs	r2, r2, r0
 800e89a:	445a      	add	r2, fp
 800e89c:	f8de 0000 	ldr.w	r0, [lr]
 800e8a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e8aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e8ae:	b292      	uxth	r2, r2
 800e8b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e8b4:	45e1      	cmp	r9, ip
 800e8b6:	f84e 2b04 	str.w	r2, [lr], #4
 800e8ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e8be:	d2de      	bcs.n	800e87e <quorem+0x42>
 800e8c0:	9b00      	ldr	r3, [sp, #0]
 800e8c2:	58eb      	ldr	r3, [r5, r3]
 800e8c4:	b92b      	cbnz	r3, 800e8d2 <quorem+0x96>
 800e8c6:	9b01      	ldr	r3, [sp, #4]
 800e8c8:	3b04      	subs	r3, #4
 800e8ca:	429d      	cmp	r5, r3
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	d32f      	bcc.n	800e930 <quorem+0xf4>
 800e8d0:	613c      	str	r4, [r7, #16]
 800e8d2:	4638      	mov	r0, r7
 800e8d4:	f001 f956 	bl	800fb84 <__mcmp>
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	db25      	blt.n	800e928 <quorem+0xec>
 800e8dc:	4629      	mov	r1, r5
 800e8de:	2000      	movs	r0, #0
 800e8e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8e4:	f8d1 c000 	ldr.w	ip, [r1]
 800e8e8:	fa1f fe82 	uxth.w	lr, r2
 800e8ec:	fa1f f38c 	uxth.w	r3, ip
 800e8f0:	eba3 030e 	sub.w	r3, r3, lr
 800e8f4:	4403      	add	r3, r0
 800e8f6:	0c12      	lsrs	r2, r2, #16
 800e8f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e8fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e900:	b29b      	uxth	r3, r3
 800e902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e906:	45c1      	cmp	r9, r8
 800e908:	f841 3b04 	str.w	r3, [r1], #4
 800e90c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e910:	d2e6      	bcs.n	800e8e0 <quorem+0xa4>
 800e912:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e91a:	b922      	cbnz	r2, 800e926 <quorem+0xea>
 800e91c:	3b04      	subs	r3, #4
 800e91e:	429d      	cmp	r5, r3
 800e920:	461a      	mov	r2, r3
 800e922:	d30b      	bcc.n	800e93c <quorem+0x100>
 800e924:	613c      	str	r4, [r7, #16]
 800e926:	3601      	adds	r6, #1
 800e928:	4630      	mov	r0, r6
 800e92a:	b003      	add	sp, #12
 800e92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e930:	6812      	ldr	r2, [r2, #0]
 800e932:	3b04      	subs	r3, #4
 800e934:	2a00      	cmp	r2, #0
 800e936:	d1cb      	bne.n	800e8d0 <quorem+0x94>
 800e938:	3c01      	subs	r4, #1
 800e93a:	e7c6      	b.n	800e8ca <quorem+0x8e>
 800e93c:	6812      	ldr	r2, [r2, #0]
 800e93e:	3b04      	subs	r3, #4
 800e940:	2a00      	cmp	r2, #0
 800e942:	d1ef      	bne.n	800e924 <quorem+0xe8>
 800e944:	3c01      	subs	r4, #1
 800e946:	e7ea      	b.n	800e91e <quorem+0xe2>
 800e948:	2000      	movs	r0, #0
 800e94a:	e7ee      	b.n	800e92a <quorem+0xee>
 800e94c:	0000      	movs	r0, r0
	...

0800e950 <_dtoa_r>:
 800e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e954:	ed2d 8b02 	vpush	{d8}
 800e958:	69c7      	ldr	r7, [r0, #28]
 800e95a:	b091      	sub	sp, #68	@ 0x44
 800e95c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e960:	ec55 4b10 	vmov	r4, r5, d0
 800e964:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800e966:	9107      	str	r1, [sp, #28]
 800e968:	4681      	mov	r9, r0
 800e96a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e96c:	930d      	str	r3, [sp, #52]	@ 0x34
 800e96e:	b97f      	cbnz	r7, 800e990 <_dtoa_r+0x40>
 800e970:	2010      	movs	r0, #16
 800e972:	f000 fd8d 	bl	800f490 <malloc>
 800e976:	4602      	mov	r2, r0
 800e978:	f8c9 001c 	str.w	r0, [r9, #28]
 800e97c:	b920      	cbnz	r0, 800e988 <_dtoa_r+0x38>
 800e97e:	4ba0      	ldr	r3, [pc, #640]	@ (800ec00 <_dtoa_r+0x2b0>)
 800e980:	21ef      	movs	r1, #239	@ 0xef
 800e982:	48a0      	ldr	r0, [pc, #640]	@ (800ec04 <_dtoa_r+0x2b4>)
 800e984:	f002 fd2c 	bl	80113e0 <__assert_func>
 800e988:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e98c:	6007      	str	r7, [r0, #0]
 800e98e:	60c7      	str	r7, [r0, #12]
 800e990:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e994:	6819      	ldr	r1, [r3, #0]
 800e996:	b159      	cbz	r1, 800e9b0 <_dtoa_r+0x60>
 800e998:	685a      	ldr	r2, [r3, #4]
 800e99a:	604a      	str	r2, [r1, #4]
 800e99c:	2301      	movs	r3, #1
 800e99e:	4093      	lsls	r3, r2
 800e9a0:	608b      	str	r3, [r1, #8]
 800e9a2:	4648      	mov	r0, r9
 800e9a4:	f000 fe6a 	bl	800f67c <_Bfree>
 800e9a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	601a      	str	r2, [r3, #0]
 800e9b0:	1e2b      	subs	r3, r5, #0
 800e9b2:	bfbb      	ittet	lt
 800e9b4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e9b8:	9303      	strlt	r3, [sp, #12]
 800e9ba:	2300      	movge	r3, #0
 800e9bc:	2201      	movlt	r2, #1
 800e9be:	bfac      	ite	ge
 800e9c0:	6033      	strge	r3, [r6, #0]
 800e9c2:	6032      	strlt	r2, [r6, #0]
 800e9c4:	4b90      	ldr	r3, [pc, #576]	@ (800ec08 <_dtoa_r+0x2b8>)
 800e9c6:	9e03      	ldr	r6, [sp, #12]
 800e9c8:	43b3      	bics	r3, r6
 800e9ca:	d110      	bne.n	800e9ee <_dtoa_r+0x9e>
 800e9cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e9ce:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800e9d8:	4323      	orrs	r3, r4
 800e9da:	f000 84de 	beq.w	800f39a <_dtoa_r+0xa4a>
 800e9de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e9e0:	4f8a      	ldr	r7, [pc, #552]	@ (800ec0c <_dtoa_r+0x2bc>)
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f000 84e0 	beq.w	800f3a8 <_dtoa_r+0xa58>
 800e9e8:	1cfb      	adds	r3, r7, #3
 800e9ea:	f000 bcdb 	b.w	800f3a4 <_dtoa_r+0xa54>
 800e9ee:	ed9d 8b02 	vldr	d8, [sp, #8]
 800e9f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9fa:	d10a      	bne.n	800ea12 <_dtoa_r+0xc2>
 800e9fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e9fe:	2301      	movs	r3, #1
 800ea00:	6013      	str	r3, [r2, #0]
 800ea02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ea04:	b113      	cbz	r3, 800ea0c <_dtoa_r+0xbc>
 800ea06:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ea08:	4b81      	ldr	r3, [pc, #516]	@ (800ec10 <_dtoa_r+0x2c0>)
 800ea0a:	6013      	str	r3, [r2, #0]
 800ea0c:	4f81      	ldr	r7, [pc, #516]	@ (800ec14 <_dtoa_r+0x2c4>)
 800ea0e:	f000 bccb 	b.w	800f3a8 <_dtoa_r+0xa58>
 800ea12:	aa0e      	add	r2, sp, #56	@ 0x38
 800ea14:	a90f      	add	r1, sp, #60	@ 0x3c
 800ea16:	4648      	mov	r0, r9
 800ea18:	eeb0 0b48 	vmov.f64	d0, d8
 800ea1c:	f001 f9d2 	bl	800fdc4 <__d2b>
 800ea20:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ea24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea26:	9001      	str	r0, [sp, #4]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d045      	beq.n	800eab8 <_dtoa_r+0x168>
 800ea2c:	eeb0 7b48 	vmov.f64	d7, d8
 800ea30:	ee18 1a90 	vmov	r1, s17
 800ea34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ea38:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ea3c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ea40:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ea44:	2500      	movs	r5, #0
 800ea46:	ee07 1a90 	vmov	s15, r1
 800ea4a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ea4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ebe8 <_dtoa_r+0x298>
 800ea52:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ea56:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ebf0 <_dtoa_r+0x2a0>
 800ea5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ea5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ebf8 <_dtoa_r+0x2a8>
 800ea62:	ee07 3a90 	vmov	s15, r3
 800ea66:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ea6a:	eeb0 7b46 	vmov.f64	d7, d6
 800ea6e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ea72:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ea76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ea7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea7e:	ee16 8a90 	vmov	r8, s13
 800ea82:	d508      	bpl.n	800ea96 <_dtoa_r+0x146>
 800ea84:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ea88:	eeb4 6b47 	vcmp.f64	d6, d7
 800ea8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea90:	bf18      	it	ne
 800ea92:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ea96:	f1b8 0f16 	cmp.w	r8, #22
 800ea9a:	d82b      	bhi.n	800eaf4 <_dtoa_r+0x1a4>
 800ea9c:	495e      	ldr	r1, [pc, #376]	@ (800ec18 <_dtoa_r+0x2c8>)
 800ea9e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800eaa2:	ed91 7b00 	vldr	d7, [r1]
 800eaa6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eaaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaae:	d501      	bpl.n	800eab4 <_dtoa_r+0x164>
 800eab0:	f108 38ff 	add.w	r8, r8, #4294967295
 800eab4:	2100      	movs	r1, #0
 800eab6:	e01e      	b.n	800eaf6 <_dtoa_r+0x1a6>
 800eab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaba:	4413      	add	r3, r2
 800eabc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800eac0:	2920      	cmp	r1, #32
 800eac2:	bfc1      	itttt	gt
 800eac4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800eac8:	408e      	lslgt	r6, r1
 800eaca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800eace:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ead2:	bfd6      	itet	le
 800ead4:	f1c1 0120 	rsble	r1, r1, #32
 800ead8:	4331      	orrgt	r1, r6
 800eada:	fa04 f101 	lslle.w	r1, r4, r1
 800eade:	ee07 1a90 	vmov	s15, r1
 800eae2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800eae6:	3b01      	subs	r3, #1
 800eae8:	ee17 1a90 	vmov	r1, s15
 800eaec:	2501      	movs	r5, #1
 800eaee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800eaf2:	e7a8      	b.n	800ea46 <_dtoa_r+0xf6>
 800eaf4:	2101      	movs	r1, #1
 800eaf6:	1ad2      	subs	r2, r2, r3
 800eaf8:	1e53      	subs	r3, r2, #1
 800eafa:	9306      	str	r3, [sp, #24]
 800eafc:	bf45      	ittet	mi
 800eafe:	f1c2 0301 	rsbmi	r3, r2, #1
 800eb02:	9305      	strmi	r3, [sp, #20]
 800eb04:	2300      	movpl	r3, #0
 800eb06:	2300      	movmi	r3, #0
 800eb08:	bf4c      	ite	mi
 800eb0a:	9306      	strmi	r3, [sp, #24]
 800eb0c:	9305      	strpl	r3, [sp, #20]
 800eb0e:	f1b8 0f00 	cmp.w	r8, #0
 800eb12:	910c      	str	r1, [sp, #48]	@ 0x30
 800eb14:	db18      	blt.n	800eb48 <_dtoa_r+0x1f8>
 800eb16:	9b06      	ldr	r3, [sp, #24]
 800eb18:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800eb1c:	4443      	add	r3, r8
 800eb1e:	9306      	str	r3, [sp, #24]
 800eb20:	2300      	movs	r3, #0
 800eb22:	9a07      	ldr	r2, [sp, #28]
 800eb24:	2a09      	cmp	r2, #9
 800eb26:	d849      	bhi.n	800ebbc <_dtoa_r+0x26c>
 800eb28:	2a05      	cmp	r2, #5
 800eb2a:	bfc4      	itt	gt
 800eb2c:	3a04      	subgt	r2, #4
 800eb2e:	9207      	strgt	r2, [sp, #28]
 800eb30:	9a07      	ldr	r2, [sp, #28]
 800eb32:	f1a2 0202 	sub.w	r2, r2, #2
 800eb36:	bfcc      	ite	gt
 800eb38:	2400      	movgt	r4, #0
 800eb3a:	2401      	movle	r4, #1
 800eb3c:	2a03      	cmp	r2, #3
 800eb3e:	d848      	bhi.n	800ebd2 <_dtoa_r+0x282>
 800eb40:	e8df f002 	tbb	[pc, r2]
 800eb44:	3a2c2e0b 	.word	0x3a2c2e0b
 800eb48:	9b05      	ldr	r3, [sp, #20]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	eba3 0308 	sub.w	r3, r3, r8
 800eb50:	9305      	str	r3, [sp, #20]
 800eb52:	920a      	str	r2, [sp, #40]	@ 0x28
 800eb54:	f1c8 0300 	rsb	r3, r8, #0
 800eb58:	e7e3      	b.n	800eb22 <_dtoa_r+0x1d2>
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	9208      	str	r2, [sp, #32]
 800eb5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb60:	2a00      	cmp	r2, #0
 800eb62:	dc39      	bgt.n	800ebd8 <_dtoa_r+0x288>
 800eb64:	f04f 0b01 	mov.w	fp, #1
 800eb68:	46da      	mov	sl, fp
 800eb6a:	465a      	mov	r2, fp
 800eb6c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800eb70:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800eb74:	2100      	movs	r1, #0
 800eb76:	2004      	movs	r0, #4
 800eb78:	f100 0614 	add.w	r6, r0, #20
 800eb7c:	4296      	cmp	r6, r2
 800eb7e:	d930      	bls.n	800ebe2 <_dtoa_r+0x292>
 800eb80:	6079      	str	r1, [r7, #4]
 800eb82:	4648      	mov	r0, r9
 800eb84:	9304      	str	r3, [sp, #16]
 800eb86:	f000 fd39 	bl	800f5fc <_Balloc>
 800eb8a:	9b04      	ldr	r3, [sp, #16]
 800eb8c:	4607      	mov	r7, r0
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d146      	bne.n	800ec20 <_dtoa_r+0x2d0>
 800eb92:	4b22      	ldr	r3, [pc, #136]	@ (800ec1c <_dtoa_r+0x2cc>)
 800eb94:	4602      	mov	r2, r0
 800eb96:	f240 11af 	movw	r1, #431	@ 0x1af
 800eb9a:	e6f2      	b.n	800e982 <_dtoa_r+0x32>
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	e7dd      	b.n	800eb5c <_dtoa_r+0x20c>
 800eba0:	2200      	movs	r2, #0
 800eba2:	9208      	str	r2, [sp, #32]
 800eba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eba6:	eb08 0b02 	add.w	fp, r8, r2
 800ebaa:	f10b 0a01 	add.w	sl, fp, #1
 800ebae:	4652      	mov	r2, sl
 800ebb0:	2a01      	cmp	r2, #1
 800ebb2:	bfb8      	it	lt
 800ebb4:	2201      	movlt	r2, #1
 800ebb6:	e7db      	b.n	800eb70 <_dtoa_r+0x220>
 800ebb8:	2201      	movs	r2, #1
 800ebba:	e7f2      	b.n	800eba2 <_dtoa_r+0x252>
 800ebbc:	2401      	movs	r4, #1
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ebc4:	f04f 3bff 	mov.w	fp, #4294967295
 800ebc8:	2100      	movs	r1, #0
 800ebca:	46da      	mov	sl, fp
 800ebcc:	2212      	movs	r2, #18
 800ebce:	9109      	str	r1, [sp, #36]	@ 0x24
 800ebd0:	e7ce      	b.n	800eb70 <_dtoa_r+0x220>
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	9208      	str	r2, [sp, #32]
 800ebd6:	e7f5      	b.n	800ebc4 <_dtoa_r+0x274>
 800ebd8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ebdc:	46da      	mov	sl, fp
 800ebde:	465a      	mov	r2, fp
 800ebe0:	e7c6      	b.n	800eb70 <_dtoa_r+0x220>
 800ebe2:	3101      	adds	r1, #1
 800ebe4:	0040      	lsls	r0, r0, #1
 800ebe6:	e7c7      	b.n	800eb78 <_dtoa_r+0x228>
 800ebe8:	636f4361 	.word	0x636f4361
 800ebec:	3fd287a7 	.word	0x3fd287a7
 800ebf0:	8b60c8b3 	.word	0x8b60c8b3
 800ebf4:	3fc68a28 	.word	0x3fc68a28
 800ebf8:	509f79fb 	.word	0x509f79fb
 800ebfc:	3fd34413 	.word	0x3fd34413
 800ec00:	0801244a 	.word	0x0801244a
 800ec04:	08012461 	.word	0x08012461
 800ec08:	7ff00000 	.word	0x7ff00000
 800ec0c:	08012446 	.word	0x08012446
 800ec10:	08012415 	.word	0x08012415
 800ec14:	08012414 	.word	0x08012414
 800ec18:	08012558 	.word	0x08012558
 800ec1c:	080124b9 	.word	0x080124b9
 800ec20:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ec24:	f1ba 0f0e 	cmp.w	sl, #14
 800ec28:	6010      	str	r0, [r2, #0]
 800ec2a:	d86f      	bhi.n	800ed0c <_dtoa_r+0x3bc>
 800ec2c:	2c00      	cmp	r4, #0
 800ec2e:	d06d      	beq.n	800ed0c <_dtoa_r+0x3bc>
 800ec30:	f1b8 0f00 	cmp.w	r8, #0
 800ec34:	f340 80c2 	ble.w	800edbc <_dtoa_r+0x46c>
 800ec38:	4aca      	ldr	r2, [pc, #808]	@ (800ef64 <_dtoa_r+0x614>)
 800ec3a:	f008 010f 	and.w	r1, r8, #15
 800ec3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ec42:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ec46:	ed92 7b00 	vldr	d7, [r2]
 800ec4a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ec4e:	f000 80a9 	beq.w	800eda4 <_dtoa_r+0x454>
 800ec52:	4ac5      	ldr	r2, [pc, #788]	@ (800ef68 <_dtoa_r+0x618>)
 800ec54:	ed92 6b08 	vldr	d6, [r2, #32]
 800ec58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ec5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ec60:	f001 010f 	and.w	r1, r1, #15
 800ec64:	2203      	movs	r2, #3
 800ec66:	48c0      	ldr	r0, [pc, #768]	@ (800ef68 <_dtoa_r+0x618>)
 800ec68:	2900      	cmp	r1, #0
 800ec6a:	f040 809d 	bne.w	800eda8 <_dtoa_r+0x458>
 800ec6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ec72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ec76:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ec7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec80:	2900      	cmp	r1, #0
 800ec82:	f000 80c1 	beq.w	800ee08 <_dtoa_r+0x4b8>
 800ec86:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ec8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec92:	f140 80b9 	bpl.w	800ee08 <_dtoa_r+0x4b8>
 800ec96:	f1ba 0f00 	cmp.w	sl, #0
 800ec9a:	f000 80b5 	beq.w	800ee08 <_dtoa_r+0x4b8>
 800ec9e:	f1bb 0f00 	cmp.w	fp, #0
 800eca2:	dd31      	ble.n	800ed08 <_dtoa_r+0x3b8>
 800eca4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800eca8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ecac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ecb0:	f108 31ff 	add.w	r1, r8, #4294967295
 800ecb4:	9104      	str	r1, [sp, #16]
 800ecb6:	3201      	adds	r2, #1
 800ecb8:	465c      	mov	r4, fp
 800ecba:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ecbe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ecc2:	ee07 2a90 	vmov	s15, r2
 800ecc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ecca:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ecce:	ee15 2a90 	vmov	r2, s11
 800ecd2:	ec51 0b15 	vmov	r0, r1, d5
 800ecd6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ecda:	2c00      	cmp	r4, #0
 800ecdc:	f040 8098 	bne.w	800ee10 <_dtoa_r+0x4c0>
 800ece0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ece4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ece8:	ec41 0b17 	vmov	d7, r0, r1
 800ecec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ecf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf4:	f300 8261 	bgt.w	800f1ba <_dtoa_r+0x86a>
 800ecf8:	eeb1 7b47 	vneg.f64	d7, d7
 800ecfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ed00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed04:	f100 80f5 	bmi.w	800eef2 <_dtoa_r+0x5a2>
 800ed08:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ed0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ed0e:	2a00      	cmp	r2, #0
 800ed10:	f2c0 812c 	blt.w	800ef6c <_dtoa_r+0x61c>
 800ed14:	f1b8 0f0e 	cmp.w	r8, #14
 800ed18:	f300 8128 	bgt.w	800ef6c <_dtoa_r+0x61c>
 800ed1c:	4b91      	ldr	r3, [pc, #580]	@ (800ef64 <_dtoa_r+0x614>)
 800ed1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ed22:	ed93 6b00 	vldr	d6, [r3]
 800ed26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	da03      	bge.n	800ed34 <_dtoa_r+0x3e4>
 800ed2c:	f1ba 0f00 	cmp.w	sl, #0
 800ed30:	f340 80d2 	ble.w	800eed8 <_dtoa_r+0x588>
 800ed34:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ed38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed3c:	463e      	mov	r6, r7
 800ed3e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ed42:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ed46:	ee15 3a10 	vmov	r3, s10
 800ed4a:	3330      	adds	r3, #48	@ 0x30
 800ed4c:	f806 3b01 	strb.w	r3, [r6], #1
 800ed50:	1bf3      	subs	r3, r6, r7
 800ed52:	459a      	cmp	sl, r3
 800ed54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ed58:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ed5c:	f040 80f8 	bne.w	800ef50 <_dtoa_r+0x600>
 800ed60:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ed64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ed68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6c:	f300 80dd 	bgt.w	800ef2a <_dtoa_r+0x5da>
 800ed70:	eeb4 7b46 	vcmp.f64	d7, d6
 800ed74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed78:	d104      	bne.n	800ed84 <_dtoa_r+0x434>
 800ed7a:	ee15 3a10 	vmov	r3, s10
 800ed7e:	07db      	lsls	r3, r3, #31
 800ed80:	f100 80d3 	bmi.w	800ef2a <_dtoa_r+0x5da>
 800ed84:	9901      	ldr	r1, [sp, #4]
 800ed86:	4648      	mov	r0, r9
 800ed88:	f000 fc78 	bl	800f67c <_Bfree>
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed90:	7033      	strb	r3, [r6, #0]
 800ed92:	f108 0301 	add.w	r3, r8, #1
 800ed96:	6013      	str	r3, [r2, #0]
 800ed98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f000 8304 	beq.w	800f3a8 <_dtoa_r+0xa58>
 800eda0:	601e      	str	r6, [r3, #0]
 800eda2:	e301      	b.n	800f3a8 <_dtoa_r+0xa58>
 800eda4:	2202      	movs	r2, #2
 800eda6:	e75e      	b.n	800ec66 <_dtoa_r+0x316>
 800eda8:	07cc      	lsls	r4, r1, #31
 800edaa:	d504      	bpl.n	800edb6 <_dtoa_r+0x466>
 800edac:	ed90 6b00 	vldr	d6, [r0]
 800edb0:	3201      	adds	r2, #1
 800edb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800edb6:	1049      	asrs	r1, r1, #1
 800edb8:	3008      	adds	r0, #8
 800edba:	e755      	b.n	800ec68 <_dtoa_r+0x318>
 800edbc:	d022      	beq.n	800ee04 <_dtoa_r+0x4b4>
 800edbe:	f1c8 0100 	rsb	r1, r8, #0
 800edc2:	4a68      	ldr	r2, [pc, #416]	@ (800ef64 <_dtoa_r+0x614>)
 800edc4:	f001 000f 	and.w	r0, r1, #15
 800edc8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800edcc:	ed92 7b00 	vldr	d7, [r2]
 800edd0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800edd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800edd8:	4863      	ldr	r0, [pc, #396]	@ (800ef68 <_dtoa_r+0x618>)
 800edda:	1109      	asrs	r1, r1, #4
 800eddc:	2400      	movs	r4, #0
 800edde:	2202      	movs	r2, #2
 800ede0:	b929      	cbnz	r1, 800edee <_dtoa_r+0x49e>
 800ede2:	2c00      	cmp	r4, #0
 800ede4:	f43f af49 	beq.w	800ec7a <_dtoa_r+0x32a>
 800ede8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800edec:	e745      	b.n	800ec7a <_dtoa_r+0x32a>
 800edee:	07ce      	lsls	r6, r1, #31
 800edf0:	d505      	bpl.n	800edfe <_dtoa_r+0x4ae>
 800edf2:	ed90 6b00 	vldr	d6, [r0]
 800edf6:	3201      	adds	r2, #1
 800edf8:	2401      	movs	r4, #1
 800edfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800edfe:	1049      	asrs	r1, r1, #1
 800ee00:	3008      	adds	r0, #8
 800ee02:	e7ed      	b.n	800ede0 <_dtoa_r+0x490>
 800ee04:	2202      	movs	r2, #2
 800ee06:	e738      	b.n	800ec7a <_dtoa_r+0x32a>
 800ee08:	f8cd 8010 	str.w	r8, [sp, #16]
 800ee0c:	4654      	mov	r4, sl
 800ee0e:	e754      	b.n	800ecba <_dtoa_r+0x36a>
 800ee10:	4a54      	ldr	r2, [pc, #336]	@ (800ef64 <_dtoa_r+0x614>)
 800ee12:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ee16:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ee1a:	9a08      	ldr	r2, [sp, #32]
 800ee1c:	ec41 0b17 	vmov	d7, r0, r1
 800ee20:	443c      	add	r4, r7
 800ee22:	b34a      	cbz	r2, 800ee78 <_dtoa_r+0x528>
 800ee24:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ee28:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ee2c:	463e      	mov	r6, r7
 800ee2e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ee32:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ee36:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ee3a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ee3e:	ee14 2a90 	vmov	r2, s9
 800ee42:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ee46:	3230      	adds	r2, #48	@ 0x30
 800ee48:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ee4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ee50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee54:	f806 2b01 	strb.w	r2, [r6], #1
 800ee58:	d438      	bmi.n	800eecc <_dtoa_r+0x57c>
 800ee5a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ee5e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ee62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee66:	d462      	bmi.n	800ef2e <_dtoa_r+0x5de>
 800ee68:	42a6      	cmp	r6, r4
 800ee6a:	f43f af4d 	beq.w	800ed08 <_dtoa_r+0x3b8>
 800ee6e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ee72:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ee76:	e7e0      	b.n	800ee3a <_dtoa_r+0x4ea>
 800ee78:	4621      	mov	r1, r4
 800ee7a:	463e      	mov	r6, r7
 800ee7c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ee80:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ee84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ee88:	ee14 2a90 	vmov	r2, s9
 800ee8c:	3230      	adds	r2, #48	@ 0x30
 800ee8e:	f806 2b01 	strb.w	r2, [r6], #1
 800ee92:	42a6      	cmp	r6, r4
 800ee94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ee98:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ee9c:	d119      	bne.n	800eed2 <_dtoa_r+0x582>
 800ee9e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800eea2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800eea6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800eeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeae:	dc3e      	bgt.n	800ef2e <_dtoa_r+0x5de>
 800eeb0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800eeb4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800eeb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eebc:	f57f af24 	bpl.w	800ed08 <_dtoa_r+0x3b8>
 800eec0:	460e      	mov	r6, r1
 800eec2:	3901      	subs	r1, #1
 800eec4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eec8:	2b30      	cmp	r3, #48	@ 0x30
 800eeca:	d0f9      	beq.n	800eec0 <_dtoa_r+0x570>
 800eecc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800eed0:	e758      	b.n	800ed84 <_dtoa_r+0x434>
 800eed2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800eed6:	e7d5      	b.n	800ee84 <_dtoa_r+0x534>
 800eed8:	d10b      	bne.n	800eef2 <_dtoa_r+0x5a2>
 800eeda:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800eede:	ee26 6b07 	vmul.f64	d6, d6, d7
 800eee2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eee6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeee:	f2c0 8161 	blt.w	800f1b4 <_dtoa_r+0x864>
 800eef2:	2400      	movs	r4, #0
 800eef4:	4625      	mov	r5, r4
 800eef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eef8:	43db      	mvns	r3, r3
 800eefa:	9304      	str	r3, [sp, #16]
 800eefc:	463e      	mov	r6, r7
 800eefe:	f04f 0800 	mov.w	r8, #0
 800ef02:	4621      	mov	r1, r4
 800ef04:	4648      	mov	r0, r9
 800ef06:	f000 fbb9 	bl	800f67c <_Bfree>
 800ef0a:	2d00      	cmp	r5, #0
 800ef0c:	d0de      	beq.n	800eecc <_dtoa_r+0x57c>
 800ef0e:	f1b8 0f00 	cmp.w	r8, #0
 800ef12:	d005      	beq.n	800ef20 <_dtoa_r+0x5d0>
 800ef14:	45a8      	cmp	r8, r5
 800ef16:	d003      	beq.n	800ef20 <_dtoa_r+0x5d0>
 800ef18:	4641      	mov	r1, r8
 800ef1a:	4648      	mov	r0, r9
 800ef1c:	f000 fbae 	bl	800f67c <_Bfree>
 800ef20:	4629      	mov	r1, r5
 800ef22:	4648      	mov	r0, r9
 800ef24:	f000 fbaa 	bl	800f67c <_Bfree>
 800ef28:	e7d0      	b.n	800eecc <_dtoa_r+0x57c>
 800ef2a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ef2e:	4633      	mov	r3, r6
 800ef30:	461e      	mov	r6, r3
 800ef32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef36:	2a39      	cmp	r2, #57	@ 0x39
 800ef38:	d106      	bne.n	800ef48 <_dtoa_r+0x5f8>
 800ef3a:	429f      	cmp	r7, r3
 800ef3c:	d1f8      	bne.n	800ef30 <_dtoa_r+0x5e0>
 800ef3e:	9a04      	ldr	r2, [sp, #16]
 800ef40:	3201      	adds	r2, #1
 800ef42:	9204      	str	r2, [sp, #16]
 800ef44:	2230      	movs	r2, #48	@ 0x30
 800ef46:	703a      	strb	r2, [r7, #0]
 800ef48:	781a      	ldrb	r2, [r3, #0]
 800ef4a:	3201      	adds	r2, #1
 800ef4c:	701a      	strb	r2, [r3, #0]
 800ef4e:	e7bd      	b.n	800eecc <_dtoa_r+0x57c>
 800ef50:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ef54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef5c:	f47f aeef 	bne.w	800ed3e <_dtoa_r+0x3ee>
 800ef60:	e710      	b.n	800ed84 <_dtoa_r+0x434>
 800ef62:	bf00      	nop
 800ef64:	08012558 	.word	0x08012558
 800ef68:	08012530 	.word	0x08012530
 800ef6c:	9908      	ldr	r1, [sp, #32]
 800ef6e:	2900      	cmp	r1, #0
 800ef70:	f000 80e3 	beq.w	800f13a <_dtoa_r+0x7ea>
 800ef74:	9907      	ldr	r1, [sp, #28]
 800ef76:	2901      	cmp	r1, #1
 800ef78:	f300 80c8 	bgt.w	800f10c <_dtoa_r+0x7bc>
 800ef7c:	2d00      	cmp	r5, #0
 800ef7e:	f000 80c1 	beq.w	800f104 <_dtoa_r+0x7b4>
 800ef82:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ef86:	9e05      	ldr	r6, [sp, #20]
 800ef88:	461c      	mov	r4, r3
 800ef8a:	9304      	str	r3, [sp, #16]
 800ef8c:	9b05      	ldr	r3, [sp, #20]
 800ef8e:	4413      	add	r3, r2
 800ef90:	9305      	str	r3, [sp, #20]
 800ef92:	9b06      	ldr	r3, [sp, #24]
 800ef94:	2101      	movs	r1, #1
 800ef96:	4413      	add	r3, r2
 800ef98:	4648      	mov	r0, r9
 800ef9a:	9306      	str	r3, [sp, #24]
 800ef9c:	f000 fc6c 	bl	800f878 <__i2b>
 800efa0:	9b04      	ldr	r3, [sp, #16]
 800efa2:	4605      	mov	r5, r0
 800efa4:	b166      	cbz	r6, 800efc0 <_dtoa_r+0x670>
 800efa6:	9a06      	ldr	r2, [sp, #24]
 800efa8:	2a00      	cmp	r2, #0
 800efaa:	dd09      	ble.n	800efc0 <_dtoa_r+0x670>
 800efac:	42b2      	cmp	r2, r6
 800efae:	9905      	ldr	r1, [sp, #20]
 800efb0:	bfa8      	it	ge
 800efb2:	4632      	movge	r2, r6
 800efb4:	1a89      	subs	r1, r1, r2
 800efb6:	9105      	str	r1, [sp, #20]
 800efb8:	9906      	ldr	r1, [sp, #24]
 800efba:	1ab6      	subs	r6, r6, r2
 800efbc:	1a8a      	subs	r2, r1, r2
 800efbe:	9206      	str	r2, [sp, #24]
 800efc0:	b1fb      	cbz	r3, 800f002 <_dtoa_r+0x6b2>
 800efc2:	9a08      	ldr	r2, [sp, #32]
 800efc4:	2a00      	cmp	r2, #0
 800efc6:	f000 80bc 	beq.w	800f142 <_dtoa_r+0x7f2>
 800efca:	b19c      	cbz	r4, 800eff4 <_dtoa_r+0x6a4>
 800efcc:	4629      	mov	r1, r5
 800efce:	4622      	mov	r2, r4
 800efd0:	4648      	mov	r0, r9
 800efd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efd4:	f000 fd10 	bl	800f9f8 <__pow5mult>
 800efd8:	9a01      	ldr	r2, [sp, #4]
 800efda:	4601      	mov	r1, r0
 800efdc:	4605      	mov	r5, r0
 800efde:	4648      	mov	r0, r9
 800efe0:	f000 fc60 	bl	800f8a4 <__multiply>
 800efe4:	9901      	ldr	r1, [sp, #4]
 800efe6:	9004      	str	r0, [sp, #16]
 800efe8:	4648      	mov	r0, r9
 800efea:	f000 fb47 	bl	800f67c <_Bfree>
 800efee:	9a04      	ldr	r2, [sp, #16]
 800eff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eff2:	9201      	str	r2, [sp, #4]
 800eff4:	1b1a      	subs	r2, r3, r4
 800eff6:	d004      	beq.n	800f002 <_dtoa_r+0x6b2>
 800eff8:	9901      	ldr	r1, [sp, #4]
 800effa:	4648      	mov	r0, r9
 800effc:	f000 fcfc 	bl	800f9f8 <__pow5mult>
 800f000:	9001      	str	r0, [sp, #4]
 800f002:	2101      	movs	r1, #1
 800f004:	4648      	mov	r0, r9
 800f006:	f000 fc37 	bl	800f878 <__i2b>
 800f00a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f00c:	4604      	mov	r4, r0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f000 81d0 	beq.w	800f3b4 <_dtoa_r+0xa64>
 800f014:	461a      	mov	r2, r3
 800f016:	4601      	mov	r1, r0
 800f018:	4648      	mov	r0, r9
 800f01a:	f000 fced 	bl	800f9f8 <__pow5mult>
 800f01e:	9b07      	ldr	r3, [sp, #28]
 800f020:	2b01      	cmp	r3, #1
 800f022:	4604      	mov	r4, r0
 800f024:	f300 8095 	bgt.w	800f152 <_dtoa_r+0x802>
 800f028:	9b02      	ldr	r3, [sp, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	f040 808b 	bne.w	800f146 <_dtoa_r+0x7f6>
 800f030:	9b03      	ldr	r3, [sp, #12]
 800f032:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f036:	2a00      	cmp	r2, #0
 800f038:	f040 8087 	bne.w	800f14a <_dtoa_r+0x7fa>
 800f03c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f040:	0d12      	lsrs	r2, r2, #20
 800f042:	0512      	lsls	r2, r2, #20
 800f044:	2a00      	cmp	r2, #0
 800f046:	f000 8082 	beq.w	800f14e <_dtoa_r+0x7fe>
 800f04a:	9b05      	ldr	r3, [sp, #20]
 800f04c:	3301      	adds	r3, #1
 800f04e:	9305      	str	r3, [sp, #20]
 800f050:	9b06      	ldr	r3, [sp, #24]
 800f052:	3301      	adds	r3, #1
 800f054:	9306      	str	r3, [sp, #24]
 800f056:	2301      	movs	r3, #1
 800f058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f05a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	f000 81af 	beq.w	800f3c0 <_dtoa_r+0xa70>
 800f062:	6922      	ldr	r2, [r4, #16]
 800f064:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f068:	6910      	ldr	r0, [r2, #16]
 800f06a:	f000 fbb9 	bl	800f7e0 <__hi0bits>
 800f06e:	f1c0 0020 	rsb	r0, r0, #32
 800f072:	9b06      	ldr	r3, [sp, #24]
 800f074:	4418      	add	r0, r3
 800f076:	f010 001f 	ands.w	r0, r0, #31
 800f07a:	d076      	beq.n	800f16a <_dtoa_r+0x81a>
 800f07c:	f1c0 0220 	rsb	r2, r0, #32
 800f080:	2a04      	cmp	r2, #4
 800f082:	dd69      	ble.n	800f158 <_dtoa_r+0x808>
 800f084:	9b05      	ldr	r3, [sp, #20]
 800f086:	f1c0 001c 	rsb	r0, r0, #28
 800f08a:	4403      	add	r3, r0
 800f08c:	9305      	str	r3, [sp, #20]
 800f08e:	9b06      	ldr	r3, [sp, #24]
 800f090:	4406      	add	r6, r0
 800f092:	4403      	add	r3, r0
 800f094:	9306      	str	r3, [sp, #24]
 800f096:	9b05      	ldr	r3, [sp, #20]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	dd05      	ble.n	800f0a8 <_dtoa_r+0x758>
 800f09c:	9901      	ldr	r1, [sp, #4]
 800f09e:	461a      	mov	r2, r3
 800f0a0:	4648      	mov	r0, r9
 800f0a2:	f000 fd03 	bl	800faac <__lshift>
 800f0a6:	9001      	str	r0, [sp, #4]
 800f0a8:	9b06      	ldr	r3, [sp, #24]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	dd05      	ble.n	800f0ba <_dtoa_r+0x76a>
 800f0ae:	4621      	mov	r1, r4
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4648      	mov	r0, r9
 800f0b4:	f000 fcfa 	bl	800faac <__lshift>
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d056      	beq.n	800f16e <_dtoa_r+0x81e>
 800f0c0:	9801      	ldr	r0, [sp, #4]
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	f000 fd5e 	bl	800fb84 <__mcmp>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	da50      	bge.n	800f16e <_dtoa_r+0x81e>
 800f0cc:	f108 33ff 	add.w	r3, r8, #4294967295
 800f0d0:	9304      	str	r3, [sp, #16]
 800f0d2:	9901      	ldr	r1, [sp, #4]
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	220a      	movs	r2, #10
 800f0d8:	4648      	mov	r0, r9
 800f0da:	f000 faf1 	bl	800f6c0 <__multadd>
 800f0de:	9b08      	ldr	r3, [sp, #32]
 800f0e0:	9001      	str	r0, [sp, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f000 816e 	beq.w	800f3c4 <_dtoa_r+0xa74>
 800f0e8:	4629      	mov	r1, r5
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	220a      	movs	r2, #10
 800f0ee:	4648      	mov	r0, r9
 800f0f0:	f000 fae6 	bl	800f6c0 <__multadd>
 800f0f4:	f1bb 0f00 	cmp.w	fp, #0
 800f0f8:	4605      	mov	r5, r0
 800f0fa:	dc64      	bgt.n	800f1c6 <_dtoa_r+0x876>
 800f0fc:	9b07      	ldr	r3, [sp, #28]
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	dc3e      	bgt.n	800f180 <_dtoa_r+0x830>
 800f102:	e060      	b.n	800f1c6 <_dtoa_r+0x876>
 800f104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f106:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f10a:	e73c      	b.n	800ef86 <_dtoa_r+0x636>
 800f10c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f110:	42a3      	cmp	r3, r4
 800f112:	bfbf      	itttt	lt
 800f114:	1ae2      	sublt	r2, r4, r3
 800f116:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f118:	189b      	addlt	r3, r3, r2
 800f11a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f11c:	bfae      	itee	ge
 800f11e:	1b1c      	subge	r4, r3, r4
 800f120:	4623      	movlt	r3, r4
 800f122:	2400      	movlt	r4, #0
 800f124:	f1ba 0f00 	cmp.w	sl, #0
 800f128:	bfb5      	itete	lt
 800f12a:	9a05      	ldrlt	r2, [sp, #20]
 800f12c:	9e05      	ldrge	r6, [sp, #20]
 800f12e:	eba2 060a 	sublt.w	r6, r2, sl
 800f132:	4652      	movge	r2, sl
 800f134:	bfb8      	it	lt
 800f136:	2200      	movlt	r2, #0
 800f138:	e727      	b.n	800ef8a <_dtoa_r+0x63a>
 800f13a:	9e05      	ldr	r6, [sp, #20]
 800f13c:	9d08      	ldr	r5, [sp, #32]
 800f13e:	461c      	mov	r4, r3
 800f140:	e730      	b.n	800efa4 <_dtoa_r+0x654>
 800f142:	461a      	mov	r2, r3
 800f144:	e758      	b.n	800eff8 <_dtoa_r+0x6a8>
 800f146:	2300      	movs	r3, #0
 800f148:	e786      	b.n	800f058 <_dtoa_r+0x708>
 800f14a:	9b02      	ldr	r3, [sp, #8]
 800f14c:	e784      	b.n	800f058 <_dtoa_r+0x708>
 800f14e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f150:	e783      	b.n	800f05a <_dtoa_r+0x70a>
 800f152:	2300      	movs	r3, #0
 800f154:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f156:	e784      	b.n	800f062 <_dtoa_r+0x712>
 800f158:	d09d      	beq.n	800f096 <_dtoa_r+0x746>
 800f15a:	9b05      	ldr	r3, [sp, #20]
 800f15c:	321c      	adds	r2, #28
 800f15e:	4413      	add	r3, r2
 800f160:	9305      	str	r3, [sp, #20]
 800f162:	9b06      	ldr	r3, [sp, #24]
 800f164:	4416      	add	r6, r2
 800f166:	4413      	add	r3, r2
 800f168:	e794      	b.n	800f094 <_dtoa_r+0x744>
 800f16a:	4602      	mov	r2, r0
 800f16c:	e7f5      	b.n	800f15a <_dtoa_r+0x80a>
 800f16e:	f1ba 0f00 	cmp.w	sl, #0
 800f172:	f8cd 8010 	str.w	r8, [sp, #16]
 800f176:	46d3      	mov	fp, sl
 800f178:	dc21      	bgt.n	800f1be <_dtoa_r+0x86e>
 800f17a:	9b07      	ldr	r3, [sp, #28]
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	dd1e      	ble.n	800f1be <_dtoa_r+0x86e>
 800f180:	f1bb 0f00 	cmp.w	fp, #0
 800f184:	f47f aeb7 	bne.w	800eef6 <_dtoa_r+0x5a6>
 800f188:	4621      	mov	r1, r4
 800f18a:	465b      	mov	r3, fp
 800f18c:	2205      	movs	r2, #5
 800f18e:	4648      	mov	r0, r9
 800f190:	f000 fa96 	bl	800f6c0 <__multadd>
 800f194:	4601      	mov	r1, r0
 800f196:	4604      	mov	r4, r0
 800f198:	9801      	ldr	r0, [sp, #4]
 800f19a:	f000 fcf3 	bl	800fb84 <__mcmp>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	f77f aea9 	ble.w	800eef6 <_dtoa_r+0x5a6>
 800f1a4:	463e      	mov	r6, r7
 800f1a6:	2331      	movs	r3, #49	@ 0x31
 800f1a8:	f806 3b01 	strb.w	r3, [r6], #1
 800f1ac:	9b04      	ldr	r3, [sp, #16]
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	9304      	str	r3, [sp, #16]
 800f1b2:	e6a4      	b.n	800eefe <_dtoa_r+0x5ae>
 800f1b4:	f8cd 8010 	str.w	r8, [sp, #16]
 800f1b8:	4654      	mov	r4, sl
 800f1ba:	4625      	mov	r5, r4
 800f1bc:	e7f2      	b.n	800f1a4 <_dtoa_r+0x854>
 800f1be:	9b08      	ldr	r3, [sp, #32]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	f000 8103 	beq.w	800f3cc <_dtoa_r+0xa7c>
 800f1c6:	2e00      	cmp	r6, #0
 800f1c8:	dd05      	ble.n	800f1d6 <_dtoa_r+0x886>
 800f1ca:	4629      	mov	r1, r5
 800f1cc:	4632      	mov	r2, r6
 800f1ce:	4648      	mov	r0, r9
 800f1d0:	f000 fc6c 	bl	800faac <__lshift>
 800f1d4:	4605      	mov	r5, r0
 800f1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d058      	beq.n	800f28e <_dtoa_r+0x93e>
 800f1dc:	6869      	ldr	r1, [r5, #4]
 800f1de:	4648      	mov	r0, r9
 800f1e0:	f000 fa0c 	bl	800f5fc <_Balloc>
 800f1e4:	4606      	mov	r6, r0
 800f1e6:	b928      	cbnz	r0, 800f1f4 <_dtoa_r+0x8a4>
 800f1e8:	4b82      	ldr	r3, [pc, #520]	@ (800f3f4 <_dtoa_r+0xaa4>)
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f1f0:	f7ff bbc7 	b.w	800e982 <_dtoa_r+0x32>
 800f1f4:	692a      	ldr	r2, [r5, #16]
 800f1f6:	3202      	adds	r2, #2
 800f1f8:	0092      	lsls	r2, r2, #2
 800f1fa:	f105 010c 	add.w	r1, r5, #12
 800f1fe:	300c      	adds	r0, #12
 800f200:	f7ff fb07 	bl	800e812 <memcpy>
 800f204:	2201      	movs	r2, #1
 800f206:	4631      	mov	r1, r6
 800f208:	4648      	mov	r0, r9
 800f20a:	f000 fc4f 	bl	800faac <__lshift>
 800f20e:	1c7b      	adds	r3, r7, #1
 800f210:	9305      	str	r3, [sp, #20]
 800f212:	eb07 030b 	add.w	r3, r7, fp
 800f216:	9309      	str	r3, [sp, #36]	@ 0x24
 800f218:	9b02      	ldr	r3, [sp, #8]
 800f21a:	f003 0301 	and.w	r3, r3, #1
 800f21e:	46a8      	mov	r8, r5
 800f220:	9308      	str	r3, [sp, #32]
 800f222:	4605      	mov	r5, r0
 800f224:	9b05      	ldr	r3, [sp, #20]
 800f226:	9801      	ldr	r0, [sp, #4]
 800f228:	4621      	mov	r1, r4
 800f22a:	f103 3bff 	add.w	fp, r3, #4294967295
 800f22e:	f7ff fb05 	bl	800e83c <quorem>
 800f232:	4641      	mov	r1, r8
 800f234:	9002      	str	r0, [sp, #8]
 800f236:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f23a:	9801      	ldr	r0, [sp, #4]
 800f23c:	f000 fca2 	bl	800fb84 <__mcmp>
 800f240:	462a      	mov	r2, r5
 800f242:	9006      	str	r0, [sp, #24]
 800f244:	4621      	mov	r1, r4
 800f246:	4648      	mov	r0, r9
 800f248:	f000 fcb8 	bl	800fbbc <__mdiff>
 800f24c:	68c2      	ldr	r2, [r0, #12]
 800f24e:	4606      	mov	r6, r0
 800f250:	b9fa      	cbnz	r2, 800f292 <_dtoa_r+0x942>
 800f252:	4601      	mov	r1, r0
 800f254:	9801      	ldr	r0, [sp, #4]
 800f256:	f000 fc95 	bl	800fb84 <__mcmp>
 800f25a:	4602      	mov	r2, r0
 800f25c:	4631      	mov	r1, r6
 800f25e:	4648      	mov	r0, r9
 800f260:	920a      	str	r2, [sp, #40]	@ 0x28
 800f262:	f000 fa0b 	bl	800f67c <_Bfree>
 800f266:	9b07      	ldr	r3, [sp, #28]
 800f268:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f26a:	9e05      	ldr	r6, [sp, #20]
 800f26c:	ea43 0102 	orr.w	r1, r3, r2
 800f270:	9b08      	ldr	r3, [sp, #32]
 800f272:	4319      	orrs	r1, r3
 800f274:	d10f      	bne.n	800f296 <_dtoa_r+0x946>
 800f276:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f27a:	d028      	beq.n	800f2ce <_dtoa_r+0x97e>
 800f27c:	9b06      	ldr	r3, [sp, #24]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	dd02      	ble.n	800f288 <_dtoa_r+0x938>
 800f282:	9b02      	ldr	r3, [sp, #8]
 800f284:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f288:	f88b a000 	strb.w	sl, [fp]
 800f28c:	e639      	b.n	800ef02 <_dtoa_r+0x5b2>
 800f28e:	4628      	mov	r0, r5
 800f290:	e7bd      	b.n	800f20e <_dtoa_r+0x8be>
 800f292:	2201      	movs	r2, #1
 800f294:	e7e2      	b.n	800f25c <_dtoa_r+0x90c>
 800f296:	9b06      	ldr	r3, [sp, #24]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	db04      	blt.n	800f2a6 <_dtoa_r+0x956>
 800f29c:	9907      	ldr	r1, [sp, #28]
 800f29e:	430b      	orrs	r3, r1
 800f2a0:	9908      	ldr	r1, [sp, #32]
 800f2a2:	430b      	orrs	r3, r1
 800f2a4:	d120      	bne.n	800f2e8 <_dtoa_r+0x998>
 800f2a6:	2a00      	cmp	r2, #0
 800f2a8:	ddee      	ble.n	800f288 <_dtoa_r+0x938>
 800f2aa:	9901      	ldr	r1, [sp, #4]
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	4648      	mov	r0, r9
 800f2b0:	f000 fbfc 	bl	800faac <__lshift>
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	9001      	str	r0, [sp, #4]
 800f2b8:	f000 fc64 	bl	800fb84 <__mcmp>
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	dc03      	bgt.n	800f2c8 <_dtoa_r+0x978>
 800f2c0:	d1e2      	bne.n	800f288 <_dtoa_r+0x938>
 800f2c2:	f01a 0f01 	tst.w	sl, #1
 800f2c6:	d0df      	beq.n	800f288 <_dtoa_r+0x938>
 800f2c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f2cc:	d1d9      	bne.n	800f282 <_dtoa_r+0x932>
 800f2ce:	2339      	movs	r3, #57	@ 0x39
 800f2d0:	f88b 3000 	strb.w	r3, [fp]
 800f2d4:	4633      	mov	r3, r6
 800f2d6:	461e      	mov	r6, r3
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f2de:	2a39      	cmp	r2, #57	@ 0x39
 800f2e0:	d053      	beq.n	800f38a <_dtoa_r+0xa3a>
 800f2e2:	3201      	adds	r2, #1
 800f2e4:	701a      	strb	r2, [r3, #0]
 800f2e6:	e60c      	b.n	800ef02 <_dtoa_r+0x5b2>
 800f2e8:	2a00      	cmp	r2, #0
 800f2ea:	dd07      	ble.n	800f2fc <_dtoa_r+0x9ac>
 800f2ec:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f2f0:	d0ed      	beq.n	800f2ce <_dtoa_r+0x97e>
 800f2f2:	f10a 0301 	add.w	r3, sl, #1
 800f2f6:	f88b 3000 	strb.w	r3, [fp]
 800f2fa:	e602      	b.n	800ef02 <_dtoa_r+0x5b2>
 800f2fc:	9b05      	ldr	r3, [sp, #20]
 800f2fe:	9a05      	ldr	r2, [sp, #20]
 800f300:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f306:	4293      	cmp	r3, r2
 800f308:	d029      	beq.n	800f35e <_dtoa_r+0xa0e>
 800f30a:	9901      	ldr	r1, [sp, #4]
 800f30c:	2300      	movs	r3, #0
 800f30e:	220a      	movs	r2, #10
 800f310:	4648      	mov	r0, r9
 800f312:	f000 f9d5 	bl	800f6c0 <__multadd>
 800f316:	45a8      	cmp	r8, r5
 800f318:	9001      	str	r0, [sp, #4]
 800f31a:	f04f 0300 	mov.w	r3, #0
 800f31e:	f04f 020a 	mov.w	r2, #10
 800f322:	4641      	mov	r1, r8
 800f324:	4648      	mov	r0, r9
 800f326:	d107      	bne.n	800f338 <_dtoa_r+0x9e8>
 800f328:	f000 f9ca 	bl	800f6c0 <__multadd>
 800f32c:	4680      	mov	r8, r0
 800f32e:	4605      	mov	r5, r0
 800f330:	9b05      	ldr	r3, [sp, #20]
 800f332:	3301      	adds	r3, #1
 800f334:	9305      	str	r3, [sp, #20]
 800f336:	e775      	b.n	800f224 <_dtoa_r+0x8d4>
 800f338:	f000 f9c2 	bl	800f6c0 <__multadd>
 800f33c:	4629      	mov	r1, r5
 800f33e:	4680      	mov	r8, r0
 800f340:	2300      	movs	r3, #0
 800f342:	220a      	movs	r2, #10
 800f344:	4648      	mov	r0, r9
 800f346:	f000 f9bb 	bl	800f6c0 <__multadd>
 800f34a:	4605      	mov	r5, r0
 800f34c:	e7f0      	b.n	800f330 <_dtoa_r+0x9e0>
 800f34e:	f1bb 0f00 	cmp.w	fp, #0
 800f352:	bfcc      	ite	gt
 800f354:	465e      	movgt	r6, fp
 800f356:	2601      	movle	r6, #1
 800f358:	443e      	add	r6, r7
 800f35a:	f04f 0800 	mov.w	r8, #0
 800f35e:	9901      	ldr	r1, [sp, #4]
 800f360:	2201      	movs	r2, #1
 800f362:	4648      	mov	r0, r9
 800f364:	f000 fba2 	bl	800faac <__lshift>
 800f368:	4621      	mov	r1, r4
 800f36a:	9001      	str	r0, [sp, #4]
 800f36c:	f000 fc0a 	bl	800fb84 <__mcmp>
 800f370:	2800      	cmp	r0, #0
 800f372:	dcaf      	bgt.n	800f2d4 <_dtoa_r+0x984>
 800f374:	d102      	bne.n	800f37c <_dtoa_r+0xa2c>
 800f376:	f01a 0f01 	tst.w	sl, #1
 800f37a:	d1ab      	bne.n	800f2d4 <_dtoa_r+0x984>
 800f37c:	4633      	mov	r3, r6
 800f37e:	461e      	mov	r6, r3
 800f380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f384:	2a30      	cmp	r2, #48	@ 0x30
 800f386:	d0fa      	beq.n	800f37e <_dtoa_r+0xa2e>
 800f388:	e5bb      	b.n	800ef02 <_dtoa_r+0x5b2>
 800f38a:	429f      	cmp	r7, r3
 800f38c:	d1a3      	bne.n	800f2d6 <_dtoa_r+0x986>
 800f38e:	9b04      	ldr	r3, [sp, #16]
 800f390:	3301      	adds	r3, #1
 800f392:	9304      	str	r3, [sp, #16]
 800f394:	2331      	movs	r3, #49	@ 0x31
 800f396:	703b      	strb	r3, [r7, #0]
 800f398:	e5b3      	b.n	800ef02 <_dtoa_r+0x5b2>
 800f39a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f39c:	4f16      	ldr	r7, [pc, #88]	@ (800f3f8 <_dtoa_r+0xaa8>)
 800f39e:	b11b      	cbz	r3, 800f3a8 <_dtoa_r+0xa58>
 800f3a0:	f107 0308 	add.w	r3, r7, #8
 800f3a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f3a6:	6013      	str	r3, [r2, #0]
 800f3a8:	4638      	mov	r0, r7
 800f3aa:	b011      	add	sp, #68	@ 0x44
 800f3ac:	ecbd 8b02 	vpop	{d8}
 800f3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b4:	9b07      	ldr	r3, [sp, #28]
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	f77f ae36 	ble.w	800f028 <_dtoa_r+0x6d8>
 800f3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3c0:	2001      	movs	r0, #1
 800f3c2:	e656      	b.n	800f072 <_dtoa_r+0x722>
 800f3c4:	f1bb 0f00 	cmp.w	fp, #0
 800f3c8:	f77f aed7 	ble.w	800f17a <_dtoa_r+0x82a>
 800f3cc:	463e      	mov	r6, r7
 800f3ce:	9801      	ldr	r0, [sp, #4]
 800f3d0:	4621      	mov	r1, r4
 800f3d2:	f7ff fa33 	bl	800e83c <quorem>
 800f3d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f3da:	f806 ab01 	strb.w	sl, [r6], #1
 800f3de:	1bf2      	subs	r2, r6, r7
 800f3e0:	4593      	cmp	fp, r2
 800f3e2:	ddb4      	ble.n	800f34e <_dtoa_r+0x9fe>
 800f3e4:	9901      	ldr	r1, [sp, #4]
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	220a      	movs	r2, #10
 800f3ea:	4648      	mov	r0, r9
 800f3ec:	f000 f968 	bl	800f6c0 <__multadd>
 800f3f0:	9001      	str	r0, [sp, #4]
 800f3f2:	e7ec      	b.n	800f3ce <_dtoa_r+0xa7e>
 800f3f4:	080124b9 	.word	0x080124b9
 800f3f8:	0801243d 	.word	0x0801243d

0800f3fc <_free_r>:
 800f3fc:	b538      	push	{r3, r4, r5, lr}
 800f3fe:	4605      	mov	r5, r0
 800f400:	2900      	cmp	r1, #0
 800f402:	d041      	beq.n	800f488 <_free_r+0x8c>
 800f404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f408:	1f0c      	subs	r4, r1, #4
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	bfb8      	it	lt
 800f40e:	18e4      	addlt	r4, r4, r3
 800f410:	f000 f8e8 	bl	800f5e4 <__malloc_lock>
 800f414:	4a1d      	ldr	r2, [pc, #116]	@ (800f48c <_free_r+0x90>)
 800f416:	6813      	ldr	r3, [r2, #0]
 800f418:	b933      	cbnz	r3, 800f428 <_free_r+0x2c>
 800f41a:	6063      	str	r3, [r4, #4]
 800f41c:	6014      	str	r4, [r2, #0]
 800f41e:	4628      	mov	r0, r5
 800f420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f424:	f000 b8e4 	b.w	800f5f0 <__malloc_unlock>
 800f428:	42a3      	cmp	r3, r4
 800f42a:	d908      	bls.n	800f43e <_free_r+0x42>
 800f42c:	6820      	ldr	r0, [r4, #0]
 800f42e:	1821      	adds	r1, r4, r0
 800f430:	428b      	cmp	r3, r1
 800f432:	bf01      	itttt	eq
 800f434:	6819      	ldreq	r1, [r3, #0]
 800f436:	685b      	ldreq	r3, [r3, #4]
 800f438:	1809      	addeq	r1, r1, r0
 800f43a:	6021      	streq	r1, [r4, #0]
 800f43c:	e7ed      	b.n	800f41a <_free_r+0x1e>
 800f43e:	461a      	mov	r2, r3
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	b10b      	cbz	r3, 800f448 <_free_r+0x4c>
 800f444:	42a3      	cmp	r3, r4
 800f446:	d9fa      	bls.n	800f43e <_free_r+0x42>
 800f448:	6811      	ldr	r1, [r2, #0]
 800f44a:	1850      	adds	r0, r2, r1
 800f44c:	42a0      	cmp	r0, r4
 800f44e:	d10b      	bne.n	800f468 <_free_r+0x6c>
 800f450:	6820      	ldr	r0, [r4, #0]
 800f452:	4401      	add	r1, r0
 800f454:	1850      	adds	r0, r2, r1
 800f456:	4283      	cmp	r3, r0
 800f458:	6011      	str	r1, [r2, #0]
 800f45a:	d1e0      	bne.n	800f41e <_free_r+0x22>
 800f45c:	6818      	ldr	r0, [r3, #0]
 800f45e:	685b      	ldr	r3, [r3, #4]
 800f460:	6053      	str	r3, [r2, #4]
 800f462:	4408      	add	r0, r1
 800f464:	6010      	str	r0, [r2, #0]
 800f466:	e7da      	b.n	800f41e <_free_r+0x22>
 800f468:	d902      	bls.n	800f470 <_free_r+0x74>
 800f46a:	230c      	movs	r3, #12
 800f46c:	602b      	str	r3, [r5, #0]
 800f46e:	e7d6      	b.n	800f41e <_free_r+0x22>
 800f470:	6820      	ldr	r0, [r4, #0]
 800f472:	1821      	adds	r1, r4, r0
 800f474:	428b      	cmp	r3, r1
 800f476:	bf04      	itt	eq
 800f478:	6819      	ldreq	r1, [r3, #0]
 800f47a:	685b      	ldreq	r3, [r3, #4]
 800f47c:	6063      	str	r3, [r4, #4]
 800f47e:	bf04      	itt	eq
 800f480:	1809      	addeq	r1, r1, r0
 800f482:	6021      	streq	r1, [r4, #0]
 800f484:	6054      	str	r4, [r2, #4]
 800f486:	e7ca      	b.n	800f41e <_free_r+0x22>
 800f488:	bd38      	pop	{r3, r4, r5, pc}
 800f48a:	bf00      	nop
 800f48c:	24000b40 	.word	0x24000b40

0800f490 <malloc>:
 800f490:	4b02      	ldr	r3, [pc, #8]	@ (800f49c <malloc+0xc>)
 800f492:	4601      	mov	r1, r0
 800f494:	6818      	ldr	r0, [r3, #0]
 800f496:	f000 b825 	b.w	800f4e4 <_malloc_r>
 800f49a:	bf00      	nop
 800f49c:	24000024 	.word	0x24000024

0800f4a0 <sbrk_aligned>:
 800f4a0:	b570      	push	{r4, r5, r6, lr}
 800f4a2:	4e0f      	ldr	r6, [pc, #60]	@ (800f4e0 <sbrk_aligned+0x40>)
 800f4a4:	460c      	mov	r4, r1
 800f4a6:	6831      	ldr	r1, [r6, #0]
 800f4a8:	4605      	mov	r5, r0
 800f4aa:	b911      	cbnz	r1, 800f4b2 <sbrk_aligned+0x12>
 800f4ac:	f001 ff7e 	bl	80113ac <_sbrk_r>
 800f4b0:	6030      	str	r0, [r6, #0]
 800f4b2:	4621      	mov	r1, r4
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	f001 ff79 	bl	80113ac <_sbrk_r>
 800f4ba:	1c43      	adds	r3, r0, #1
 800f4bc:	d103      	bne.n	800f4c6 <sbrk_aligned+0x26>
 800f4be:	f04f 34ff 	mov.w	r4, #4294967295
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	bd70      	pop	{r4, r5, r6, pc}
 800f4c6:	1cc4      	adds	r4, r0, #3
 800f4c8:	f024 0403 	bic.w	r4, r4, #3
 800f4cc:	42a0      	cmp	r0, r4
 800f4ce:	d0f8      	beq.n	800f4c2 <sbrk_aligned+0x22>
 800f4d0:	1a21      	subs	r1, r4, r0
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	f001 ff6a 	bl	80113ac <_sbrk_r>
 800f4d8:	3001      	adds	r0, #1
 800f4da:	d1f2      	bne.n	800f4c2 <sbrk_aligned+0x22>
 800f4dc:	e7ef      	b.n	800f4be <sbrk_aligned+0x1e>
 800f4de:	bf00      	nop
 800f4e0:	24000b3c 	.word	0x24000b3c

0800f4e4 <_malloc_r>:
 800f4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e8:	1ccd      	adds	r5, r1, #3
 800f4ea:	f025 0503 	bic.w	r5, r5, #3
 800f4ee:	3508      	adds	r5, #8
 800f4f0:	2d0c      	cmp	r5, #12
 800f4f2:	bf38      	it	cc
 800f4f4:	250c      	movcc	r5, #12
 800f4f6:	2d00      	cmp	r5, #0
 800f4f8:	4606      	mov	r6, r0
 800f4fa:	db01      	blt.n	800f500 <_malloc_r+0x1c>
 800f4fc:	42a9      	cmp	r1, r5
 800f4fe:	d904      	bls.n	800f50a <_malloc_r+0x26>
 800f500:	230c      	movs	r3, #12
 800f502:	6033      	str	r3, [r6, #0]
 800f504:	2000      	movs	r0, #0
 800f506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f50a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f5e0 <_malloc_r+0xfc>
 800f50e:	f000 f869 	bl	800f5e4 <__malloc_lock>
 800f512:	f8d8 3000 	ldr.w	r3, [r8]
 800f516:	461c      	mov	r4, r3
 800f518:	bb44      	cbnz	r4, 800f56c <_malloc_r+0x88>
 800f51a:	4629      	mov	r1, r5
 800f51c:	4630      	mov	r0, r6
 800f51e:	f7ff ffbf 	bl	800f4a0 <sbrk_aligned>
 800f522:	1c43      	adds	r3, r0, #1
 800f524:	4604      	mov	r4, r0
 800f526:	d158      	bne.n	800f5da <_malloc_r+0xf6>
 800f528:	f8d8 4000 	ldr.w	r4, [r8]
 800f52c:	4627      	mov	r7, r4
 800f52e:	2f00      	cmp	r7, #0
 800f530:	d143      	bne.n	800f5ba <_malloc_r+0xd6>
 800f532:	2c00      	cmp	r4, #0
 800f534:	d04b      	beq.n	800f5ce <_malloc_r+0xea>
 800f536:	6823      	ldr	r3, [r4, #0]
 800f538:	4639      	mov	r1, r7
 800f53a:	4630      	mov	r0, r6
 800f53c:	eb04 0903 	add.w	r9, r4, r3
 800f540:	f001 ff34 	bl	80113ac <_sbrk_r>
 800f544:	4581      	cmp	r9, r0
 800f546:	d142      	bne.n	800f5ce <_malloc_r+0xea>
 800f548:	6821      	ldr	r1, [r4, #0]
 800f54a:	1a6d      	subs	r5, r5, r1
 800f54c:	4629      	mov	r1, r5
 800f54e:	4630      	mov	r0, r6
 800f550:	f7ff ffa6 	bl	800f4a0 <sbrk_aligned>
 800f554:	3001      	adds	r0, #1
 800f556:	d03a      	beq.n	800f5ce <_malloc_r+0xea>
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	442b      	add	r3, r5
 800f55c:	6023      	str	r3, [r4, #0]
 800f55e:	f8d8 3000 	ldr.w	r3, [r8]
 800f562:	685a      	ldr	r2, [r3, #4]
 800f564:	bb62      	cbnz	r2, 800f5c0 <_malloc_r+0xdc>
 800f566:	f8c8 7000 	str.w	r7, [r8]
 800f56a:	e00f      	b.n	800f58c <_malloc_r+0xa8>
 800f56c:	6822      	ldr	r2, [r4, #0]
 800f56e:	1b52      	subs	r2, r2, r5
 800f570:	d420      	bmi.n	800f5b4 <_malloc_r+0xd0>
 800f572:	2a0b      	cmp	r2, #11
 800f574:	d917      	bls.n	800f5a6 <_malloc_r+0xc2>
 800f576:	1961      	adds	r1, r4, r5
 800f578:	42a3      	cmp	r3, r4
 800f57a:	6025      	str	r5, [r4, #0]
 800f57c:	bf18      	it	ne
 800f57e:	6059      	strne	r1, [r3, #4]
 800f580:	6863      	ldr	r3, [r4, #4]
 800f582:	bf08      	it	eq
 800f584:	f8c8 1000 	streq.w	r1, [r8]
 800f588:	5162      	str	r2, [r4, r5]
 800f58a:	604b      	str	r3, [r1, #4]
 800f58c:	4630      	mov	r0, r6
 800f58e:	f000 f82f 	bl	800f5f0 <__malloc_unlock>
 800f592:	f104 000b 	add.w	r0, r4, #11
 800f596:	1d23      	adds	r3, r4, #4
 800f598:	f020 0007 	bic.w	r0, r0, #7
 800f59c:	1ac2      	subs	r2, r0, r3
 800f59e:	bf1c      	itt	ne
 800f5a0:	1a1b      	subne	r3, r3, r0
 800f5a2:	50a3      	strne	r3, [r4, r2]
 800f5a4:	e7af      	b.n	800f506 <_malloc_r+0x22>
 800f5a6:	6862      	ldr	r2, [r4, #4]
 800f5a8:	42a3      	cmp	r3, r4
 800f5aa:	bf0c      	ite	eq
 800f5ac:	f8c8 2000 	streq.w	r2, [r8]
 800f5b0:	605a      	strne	r2, [r3, #4]
 800f5b2:	e7eb      	b.n	800f58c <_malloc_r+0xa8>
 800f5b4:	4623      	mov	r3, r4
 800f5b6:	6864      	ldr	r4, [r4, #4]
 800f5b8:	e7ae      	b.n	800f518 <_malloc_r+0x34>
 800f5ba:	463c      	mov	r4, r7
 800f5bc:	687f      	ldr	r7, [r7, #4]
 800f5be:	e7b6      	b.n	800f52e <_malloc_r+0x4a>
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	42a3      	cmp	r3, r4
 800f5c6:	d1fb      	bne.n	800f5c0 <_malloc_r+0xdc>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	6053      	str	r3, [r2, #4]
 800f5cc:	e7de      	b.n	800f58c <_malloc_r+0xa8>
 800f5ce:	230c      	movs	r3, #12
 800f5d0:	6033      	str	r3, [r6, #0]
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	f000 f80c 	bl	800f5f0 <__malloc_unlock>
 800f5d8:	e794      	b.n	800f504 <_malloc_r+0x20>
 800f5da:	6005      	str	r5, [r0, #0]
 800f5dc:	e7d6      	b.n	800f58c <_malloc_r+0xa8>
 800f5de:	bf00      	nop
 800f5e0:	24000b40 	.word	0x24000b40

0800f5e4 <__malloc_lock>:
 800f5e4:	4801      	ldr	r0, [pc, #4]	@ (800f5ec <__malloc_lock+0x8>)
 800f5e6:	f7ff b912 	b.w	800e80e <__retarget_lock_acquire_recursive>
 800f5ea:	bf00      	nop
 800f5ec:	24000b38 	.word	0x24000b38

0800f5f0 <__malloc_unlock>:
 800f5f0:	4801      	ldr	r0, [pc, #4]	@ (800f5f8 <__malloc_unlock+0x8>)
 800f5f2:	f7ff b90d 	b.w	800e810 <__retarget_lock_release_recursive>
 800f5f6:	bf00      	nop
 800f5f8:	24000b38 	.word	0x24000b38

0800f5fc <_Balloc>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	69c6      	ldr	r6, [r0, #28]
 800f600:	4604      	mov	r4, r0
 800f602:	460d      	mov	r5, r1
 800f604:	b976      	cbnz	r6, 800f624 <_Balloc+0x28>
 800f606:	2010      	movs	r0, #16
 800f608:	f7ff ff42 	bl	800f490 <malloc>
 800f60c:	4602      	mov	r2, r0
 800f60e:	61e0      	str	r0, [r4, #28]
 800f610:	b920      	cbnz	r0, 800f61c <_Balloc+0x20>
 800f612:	4b18      	ldr	r3, [pc, #96]	@ (800f674 <_Balloc+0x78>)
 800f614:	4818      	ldr	r0, [pc, #96]	@ (800f678 <_Balloc+0x7c>)
 800f616:	216b      	movs	r1, #107	@ 0x6b
 800f618:	f001 fee2 	bl	80113e0 <__assert_func>
 800f61c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f620:	6006      	str	r6, [r0, #0]
 800f622:	60c6      	str	r6, [r0, #12]
 800f624:	69e6      	ldr	r6, [r4, #28]
 800f626:	68f3      	ldr	r3, [r6, #12]
 800f628:	b183      	cbz	r3, 800f64c <_Balloc+0x50>
 800f62a:	69e3      	ldr	r3, [r4, #28]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f632:	b9b8      	cbnz	r0, 800f664 <_Balloc+0x68>
 800f634:	2101      	movs	r1, #1
 800f636:	fa01 f605 	lsl.w	r6, r1, r5
 800f63a:	1d72      	adds	r2, r6, #5
 800f63c:	0092      	lsls	r2, r2, #2
 800f63e:	4620      	mov	r0, r4
 800f640:	f001 feec 	bl	801141c <_calloc_r>
 800f644:	b160      	cbz	r0, 800f660 <_Balloc+0x64>
 800f646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f64a:	e00e      	b.n	800f66a <_Balloc+0x6e>
 800f64c:	2221      	movs	r2, #33	@ 0x21
 800f64e:	2104      	movs	r1, #4
 800f650:	4620      	mov	r0, r4
 800f652:	f001 fee3 	bl	801141c <_calloc_r>
 800f656:	69e3      	ldr	r3, [r4, #28]
 800f658:	60f0      	str	r0, [r6, #12]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1e4      	bne.n	800f62a <_Balloc+0x2e>
 800f660:	2000      	movs	r0, #0
 800f662:	bd70      	pop	{r4, r5, r6, pc}
 800f664:	6802      	ldr	r2, [r0, #0]
 800f666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f66a:	2300      	movs	r3, #0
 800f66c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f670:	e7f7      	b.n	800f662 <_Balloc+0x66>
 800f672:	bf00      	nop
 800f674:	0801244a 	.word	0x0801244a
 800f678:	080124ca 	.word	0x080124ca

0800f67c <_Bfree>:
 800f67c:	b570      	push	{r4, r5, r6, lr}
 800f67e:	69c6      	ldr	r6, [r0, #28]
 800f680:	4605      	mov	r5, r0
 800f682:	460c      	mov	r4, r1
 800f684:	b976      	cbnz	r6, 800f6a4 <_Bfree+0x28>
 800f686:	2010      	movs	r0, #16
 800f688:	f7ff ff02 	bl	800f490 <malloc>
 800f68c:	4602      	mov	r2, r0
 800f68e:	61e8      	str	r0, [r5, #28]
 800f690:	b920      	cbnz	r0, 800f69c <_Bfree+0x20>
 800f692:	4b09      	ldr	r3, [pc, #36]	@ (800f6b8 <_Bfree+0x3c>)
 800f694:	4809      	ldr	r0, [pc, #36]	@ (800f6bc <_Bfree+0x40>)
 800f696:	218f      	movs	r1, #143	@ 0x8f
 800f698:	f001 fea2 	bl	80113e0 <__assert_func>
 800f69c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6a0:	6006      	str	r6, [r0, #0]
 800f6a2:	60c6      	str	r6, [r0, #12]
 800f6a4:	b13c      	cbz	r4, 800f6b6 <_Bfree+0x3a>
 800f6a6:	69eb      	ldr	r3, [r5, #28]
 800f6a8:	6862      	ldr	r2, [r4, #4]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6b0:	6021      	str	r1, [r4, #0]
 800f6b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6b6:	bd70      	pop	{r4, r5, r6, pc}
 800f6b8:	0801244a 	.word	0x0801244a
 800f6bc:	080124ca 	.word	0x080124ca

0800f6c0 <__multadd>:
 800f6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c4:	690d      	ldr	r5, [r1, #16]
 800f6c6:	4607      	mov	r7, r0
 800f6c8:	460c      	mov	r4, r1
 800f6ca:	461e      	mov	r6, r3
 800f6cc:	f101 0c14 	add.w	ip, r1, #20
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	f8dc 3000 	ldr.w	r3, [ip]
 800f6d6:	b299      	uxth	r1, r3
 800f6d8:	fb02 6101 	mla	r1, r2, r1, r6
 800f6dc:	0c1e      	lsrs	r6, r3, #16
 800f6de:	0c0b      	lsrs	r3, r1, #16
 800f6e0:	fb02 3306 	mla	r3, r2, r6, r3
 800f6e4:	b289      	uxth	r1, r1
 800f6e6:	3001      	adds	r0, #1
 800f6e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f6ec:	4285      	cmp	r5, r0
 800f6ee:	f84c 1b04 	str.w	r1, [ip], #4
 800f6f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f6f6:	dcec      	bgt.n	800f6d2 <__multadd+0x12>
 800f6f8:	b30e      	cbz	r6, 800f73e <__multadd+0x7e>
 800f6fa:	68a3      	ldr	r3, [r4, #8]
 800f6fc:	42ab      	cmp	r3, r5
 800f6fe:	dc19      	bgt.n	800f734 <__multadd+0x74>
 800f700:	6861      	ldr	r1, [r4, #4]
 800f702:	4638      	mov	r0, r7
 800f704:	3101      	adds	r1, #1
 800f706:	f7ff ff79 	bl	800f5fc <_Balloc>
 800f70a:	4680      	mov	r8, r0
 800f70c:	b928      	cbnz	r0, 800f71a <__multadd+0x5a>
 800f70e:	4602      	mov	r2, r0
 800f710:	4b0c      	ldr	r3, [pc, #48]	@ (800f744 <__multadd+0x84>)
 800f712:	480d      	ldr	r0, [pc, #52]	@ (800f748 <__multadd+0x88>)
 800f714:	21ba      	movs	r1, #186	@ 0xba
 800f716:	f001 fe63 	bl	80113e0 <__assert_func>
 800f71a:	6922      	ldr	r2, [r4, #16]
 800f71c:	3202      	adds	r2, #2
 800f71e:	f104 010c 	add.w	r1, r4, #12
 800f722:	0092      	lsls	r2, r2, #2
 800f724:	300c      	adds	r0, #12
 800f726:	f7ff f874 	bl	800e812 <memcpy>
 800f72a:	4621      	mov	r1, r4
 800f72c:	4638      	mov	r0, r7
 800f72e:	f7ff ffa5 	bl	800f67c <_Bfree>
 800f732:	4644      	mov	r4, r8
 800f734:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f738:	3501      	adds	r5, #1
 800f73a:	615e      	str	r6, [r3, #20]
 800f73c:	6125      	str	r5, [r4, #16]
 800f73e:	4620      	mov	r0, r4
 800f740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f744:	080124b9 	.word	0x080124b9
 800f748:	080124ca 	.word	0x080124ca

0800f74c <__s2b>:
 800f74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f750:	460c      	mov	r4, r1
 800f752:	4615      	mov	r5, r2
 800f754:	461f      	mov	r7, r3
 800f756:	2209      	movs	r2, #9
 800f758:	3308      	adds	r3, #8
 800f75a:	4606      	mov	r6, r0
 800f75c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f760:	2100      	movs	r1, #0
 800f762:	2201      	movs	r2, #1
 800f764:	429a      	cmp	r2, r3
 800f766:	db09      	blt.n	800f77c <__s2b+0x30>
 800f768:	4630      	mov	r0, r6
 800f76a:	f7ff ff47 	bl	800f5fc <_Balloc>
 800f76e:	b940      	cbnz	r0, 800f782 <__s2b+0x36>
 800f770:	4602      	mov	r2, r0
 800f772:	4b19      	ldr	r3, [pc, #100]	@ (800f7d8 <__s2b+0x8c>)
 800f774:	4819      	ldr	r0, [pc, #100]	@ (800f7dc <__s2b+0x90>)
 800f776:	21d3      	movs	r1, #211	@ 0xd3
 800f778:	f001 fe32 	bl	80113e0 <__assert_func>
 800f77c:	0052      	lsls	r2, r2, #1
 800f77e:	3101      	adds	r1, #1
 800f780:	e7f0      	b.n	800f764 <__s2b+0x18>
 800f782:	9b08      	ldr	r3, [sp, #32]
 800f784:	6143      	str	r3, [r0, #20]
 800f786:	2d09      	cmp	r5, #9
 800f788:	f04f 0301 	mov.w	r3, #1
 800f78c:	6103      	str	r3, [r0, #16]
 800f78e:	dd16      	ble.n	800f7be <__s2b+0x72>
 800f790:	f104 0909 	add.w	r9, r4, #9
 800f794:	46c8      	mov	r8, r9
 800f796:	442c      	add	r4, r5
 800f798:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f79c:	4601      	mov	r1, r0
 800f79e:	3b30      	subs	r3, #48	@ 0x30
 800f7a0:	220a      	movs	r2, #10
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f7ff ff8c 	bl	800f6c0 <__multadd>
 800f7a8:	45a0      	cmp	r8, r4
 800f7aa:	d1f5      	bne.n	800f798 <__s2b+0x4c>
 800f7ac:	f1a5 0408 	sub.w	r4, r5, #8
 800f7b0:	444c      	add	r4, r9
 800f7b2:	1b2d      	subs	r5, r5, r4
 800f7b4:	1963      	adds	r3, r4, r5
 800f7b6:	42bb      	cmp	r3, r7
 800f7b8:	db04      	blt.n	800f7c4 <__s2b+0x78>
 800f7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7be:	340a      	adds	r4, #10
 800f7c0:	2509      	movs	r5, #9
 800f7c2:	e7f6      	b.n	800f7b2 <__s2b+0x66>
 800f7c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f7c8:	4601      	mov	r1, r0
 800f7ca:	3b30      	subs	r3, #48	@ 0x30
 800f7cc:	220a      	movs	r2, #10
 800f7ce:	4630      	mov	r0, r6
 800f7d0:	f7ff ff76 	bl	800f6c0 <__multadd>
 800f7d4:	e7ee      	b.n	800f7b4 <__s2b+0x68>
 800f7d6:	bf00      	nop
 800f7d8:	080124b9 	.word	0x080124b9
 800f7dc:	080124ca 	.word	0x080124ca

0800f7e0 <__hi0bits>:
 800f7e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	bf36      	itet	cc
 800f7e8:	0403      	lslcc	r3, r0, #16
 800f7ea:	2000      	movcs	r0, #0
 800f7ec:	2010      	movcc	r0, #16
 800f7ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f7f2:	bf3c      	itt	cc
 800f7f4:	021b      	lslcc	r3, r3, #8
 800f7f6:	3008      	addcc	r0, #8
 800f7f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f7fc:	bf3c      	itt	cc
 800f7fe:	011b      	lslcc	r3, r3, #4
 800f800:	3004      	addcc	r0, #4
 800f802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f806:	bf3c      	itt	cc
 800f808:	009b      	lslcc	r3, r3, #2
 800f80a:	3002      	addcc	r0, #2
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	db05      	blt.n	800f81c <__hi0bits+0x3c>
 800f810:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f814:	f100 0001 	add.w	r0, r0, #1
 800f818:	bf08      	it	eq
 800f81a:	2020      	moveq	r0, #32
 800f81c:	4770      	bx	lr

0800f81e <__lo0bits>:
 800f81e:	6803      	ldr	r3, [r0, #0]
 800f820:	4602      	mov	r2, r0
 800f822:	f013 0007 	ands.w	r0, r3, #7
 800f826:	d00b      	beq.n	800f840 <__lo0bits+0x22>
 800f828:	07d9      	lsls	r1, r3, #31
 800f82a:	d421      	bmi.n	800f870 <__lo0bits+0x52>
 800f82c:	0798      	lsls	r0, r3, #30
 800f82e:	bf49      	itett	mi
 800f830:	085b      	lsrmi	r3, r3, #1
 800f832:	089b      	lsrpl	r3, r3, #2
 800f834:	2001      	movmi	r0, #1
 800f836:	6013      	strmi	r3, [r2, #0]
 800f838:	bf5c      	itt	pl
 800f83a:	6013      	strpl	r3, [r2, #0]
 800f83c:	2002      	movpl	r0, #2
 800f83e:	4770      	bx	lr
 800f840:	b299      	uxth	r1, r3
 800f842:	b909      	cbnz	r1, 800f848 <__lo0bits+0x2a>
 800f844:	0c1b      	lsrs	r3, r3, #16
 800f846:	2010      	movs	r0, #16
 800f848:	b2d9      	uxtb	r1, r3
 800f84a:	b909      	cbnz	r1, 800f850 <__lo0bits+0x32>
 800f84c:	3008      	adds	r0, #8
 800f84e:	0a1b      	lsrs	r3, r3, #8
 800f850:	0719      	lsls	r1, r3, #28
 800f852:	bf04      	itt	eq
 800f854:	091b      	lsreq	r3, r3, #4
 800f856:	3004      	addeq	r0, #4
 800f858:	0799      	lsls	r1, r3, #30
 800f85a:	bf04      	itt	eq
 800f85c:	089b      	lsreq	r3, r3, #2
 800f85e:	3002      	addeq	r0, #2
 800f860:	07d9      	lsls	r1, r3, #31
 800f862:	d403      	bmi.n	800f86c <__lo0bits+0x4e>
 800f864:	085b      	lsrs	r3, r3, #1
 800f866:	f100 0001 	add.w	r0, r0, #1
 800f86a:	d003      	beq.n	800f874 <__lo0bits+0x56>
 800f86c:	6013      	str	r3, [r2, #0]
 800f86e:	4770      	bx	lr
 800f870:	2000      	movs	r0, #0
 800f872:	4770      	bx	lr
 800f874:	2020      	movs	r0, #32
 800f876:	4770      	bx	lr

0800f878 <__i2b>:
 800f878:	b510      	push	{r4, lr}
 800f87a:	460c      	mov	r4, r1
 800f87c:	2101      	movs	r1, #1
 800f87e:	f7ff febd 	bl	800f5fc <_Balloc>
 800f882:	4602      	mov	r2, r0
 800f884:	b928      	cbnz	r0, 800f892 <__i2b+0x1a>
 800f886:	4b05      	ldr	r3, [pc, #20]	@ (800f89c <__i2b+0x24>)
 800f888:	4805      	ldr	r0, [pc, #20]	@ (800f8a0 <__i2b+0x28>)
 800f88a:	f240 1145 	movw	r1, #325	@ 0x145
 800f88e:	f001 fda7 	bl	80113e0 <__assert_func>
 800f892:	2301      	movs	r3, #1
 800f894:	6144      	str	r4, [r0, #20]
 800f896:	6103      	str	r3, [r0, #16]
 800f898:	bd10      	pop	{r4, pc}
 800f89a:	bf00      	nop
 800f89c:	080124b9 	.word	0x080124b9
 800f8a0:	080124ca 	.word	0x080124ca

0800f8a4 <__multiply>:
 800f8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a8:	4614      	mov	r4, r2
 800f8aa:	690a      	ldr	r2, [r1, #16]
 800f8ac:	6923      	ldr	r3, [r4, #16]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	bfa8      	it	ge
 800f8b2:	4623      	movge	r3, r4
 800f8b4:	460f      	mov	r7, r1
 800f8b6:	bfa4      	itt	ge
 800f8b8:	460c      	movge	r4, r1
 800f8ba:	461f      	movge	r7, r3
 800f8bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f8c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f8c4:	68a3      	ldr	r3, [r4, #8]
 800f8c6:	6861      	ldr	r1, [r4, #4]
 800f8c8:	eb0a 0609 	add.w	r6, sl, r9
 800f8cc:	42b3      	cmp	r3, r6
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	bfb8      	it	lt
 800f8d2:	3101      	addlt	r1, #1
 800f8d4:	f7ff fe92 	bl	800f5fc <_Balloc>
 800f8d8:	b930      	cbnz	r0, 800f8e8 <__multiply+0x44>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	4b44      	ldr	r3, [pc, #272]	@ (800f9f0 <__multiply+0x14c>)
 800f8de:	4845      	ldr	r0, [pc, #276]	@ (800f9f4 <__multiply+0x150>)
 800f8e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f8e4:	f001 fd7c 	bl	80113e0 <__assert_func>
 800f8e8:	f100 0514 	add.w	r5, r0, #20
 800f8ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f8f0:	462b      	mov	r3, r5
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	4543      	cmp	r3, r8
 800f8f6:	d321      	bcc.n	800f93c <__multiply+0x98>
 800f8f8:	f107 0114 	add.w	r1, r7, #20
 800f8fc:	f104 0214 	add.w	r2, r4, #20
 800f900:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f904:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f908:	9302      	str	r3, [sp, #8]
 800f90a:	1b13      	subs	r3, r2, r4
 800f90c:	3b15      	subs	r3, #21
 800f90e:	f023 0303 	bic.w	r3, r3, #3
 800f912:	3304      	adds	r3, #4
 800f914:	f104 0715 	add.w	r7, r4, #21
 800f918:	42ba      	cmp	r2, r7
 800f91a:	bf38      	it	cc
 800f91c:	2304      	movcc	r3, #4
 800f91e:	9301      	str	r3, [sp, #4]
 800f920:	9b02      	ldr	r3, [sp, #8]
 800f922:	9103      	str	r1, [sp, #12]
 800f924:	428b      	cmp	r3, r1
 800f926:	d80c      	bhi.n	800f942 <__multiply+0x9e>
 800f928:	2e00      	cmp	r6, #0
 800f92a:	dd03      	ble.n	800f934 <__multiply+0x90>
 800f92c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f930:	2b00      	cmp	r3, #0
 800f932:	d05b      	beq.n	800f9ec <__multiply+0x148>
 800f934:	6106      	str	r6, [r0, #16]
 800f936:	b005      	add	sp, #20
 800f938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f93c:	f843 2b04 	str.w	r2, [r3], #4
 800f940:	e7d8      	b.n	800f8f4 <__multiply+0x50>
 800f942:	f8b1 a000 	ldrh.w	sl, [r1]
 800f946:	f1ba 0f00 	cmp.w	sl, #0
 800f94a:	d024      	beq.n	800f996 <__multiply+0xf2>
 800f94c:	f104 0e14 	add.w	lr, r4, #20
 800f950:	46a9      	mov	r9, r5
 800f952:	f04f 0c00 	mov.w	ip, #0
 800f956:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f95a:	f8d9 3000 	ldr.w	r3, [r9]
 800f95e:	fa1f fb87 	uxth.w	fp, r7
 800f962:	b29b      	uxth	r3, r3
 800f964:	fb0a 330b 	mla	r3, sl, fp, r3
 800f968:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f96c:	f8d9 7000 	ldr.w	r7, [r9]
 800f970:	4463      	add	r3, ip
 800f972:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f976:	fb0a c70b 	mla	r7, sl, fp, ip
 800f97a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f97e:	b29b      	uxth	r3, r3
 800f980:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f984:	4572      	cmp	r2, lr
 800f986:	f849 3b04 	str.w	r3, [r9], #4
 800f98a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f98e:	d8e2      	bhi.n	800f956 <__multiply+0xb2>
 800f990:	9b01      	ldr	r3, [sp, #4]
 800f992:	f845 c003 	str.w	ip, [r5, r3]
 800f996:	9b03      	ldr	r3, [sp, #12]
 800f998:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f99c:	3104      	adds	r1, #4
 800f99e:	f1b9 0f00 	cmp.w	r9, #0
 800f9a2:	d021      	beq.n	800f9e8 <__multiply+0x144>
 800f9a4:	682b      	ldr	r3, [r5, #0]
 800f9a6:	f104 0c14 	add.w	ip, r4, #20
 800f9aa:	46ae      	mov	lr, r5
 800f9ac:	f04f 0a00 	mov.w	sl, #0
 800f9b0:	f8bc b000 	ldrh.w	fp, [ip]
 800f9b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f9b8:	fb09 770b 	mla	r7, r9, fp, r7
 800f9bc:	4457      	add	r7, sl
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f9c4:	f84e 3b04 	str.w	r3, [lr], #4
 800f9c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f9cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f9d0:	f8be 3000 	ldrh.w	r3, [lr]
 800f9d4:	fb09 330a 	mla	r3, r9, sl, r3
 800f9d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f9dc:	4562      	cmp	r2, ip
 800f9de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f9e2:	d8e5      	bhi.n	800f9b0 <__multiply+0x10c>
 800f9e4:	9f01      	ldr	r7, [sp, #4]
 800f9e6:	51eb      	str	r3, [r5, r7]
 800f9e8:	3504      	adds	r5, #4
 800f9ea:	e799      	b.n	800f920 <__multiply+0x7c>
 800f9ec:	3e01      	subs	r6, #1
 800f9ee:	e79b      	b.n	800f928 <__multiply+0x84>
 800f9f0:	080124b9 	.word	0x080124b9
 800f9f4:	080124ca 	.word	0x080124ca

0800f9f8 <__pow5mult>:
 800f9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9fc:	4615      	mov	r5, r2
 800f9fe:	f012 0203 	ands.w	r2, r2, #3
 800fa02:	4607      	mov	r7, r0
 800fa04:	460e      	mov	r6, r1
 800fa06:	d007      	beq.n	800fa18 <__pow5mult+0x20>
 800fa08:	4c25      	ldr	r4, [pc, #148]	@ (800faa0 <__pow5mult+0xa8>)
 800fa0a:	3a01      	subs	r2, #1
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa12:	f7ff fe55 	bl	800f6c0 <__multadd>
 800fa16:	4606      	mov	r6, r0
 800fa18:	10ad      	asrs	r5, r5, #2
 800fa1a:	d03d      	beq.n	800fa98 <__pow5mult+0xa0>
 800fa1c:	69fc      	ldr	r4, [r7, #28]
 800fa1e:	b97c      	cbnz	r4, 800fa40 <__pow5mult+0x48>
 800fa20:	2010      	movs	r0, #16
 800fa22:	f7ff fd35 	bl	800f490 <malloc>
 800fa26:	4602      	mov	r2, r0
 800fa28:	61f8      	str	r0, [r7, #28]
 800fa2a:	b928      	cbnz	r0, 800fa38 <__pow5mult+0x40>
 800fa2c:	4b1d      	ldr	r3, [pc, #116]	@ (800faa4 <__pow5mult+0xac>)
 800fa2e:	481e      	ldr	r0, [pc, #120]	@ (800faa8 <__pow5mult+0xb0>)
 800fa30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fa34:	f001 fcd4 	bl	80113e0 <__assert_func>
 800fa38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa3c:	6004      	str	r4, [r0, #0]
 800fa3e:	60c4      	str	r4, [r0, #12]
 800fa40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fa44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa48:	b94c      	cbnz	r4, 800fa5e <__pow5mult+0x66>
 800fa4a:	f240 2171 	movw	r1, #625	@ 0x271
 800fa4e:	4638      	mov	r0, r7
 800fa50:	f7ff ff12 	bl	800f878 <__i2b>
 800fa54:	2300      	movs	r3, #0
 800fa56:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	6003      	str	r3, [r0, #0]
 800fa5e:	f04f 0900 	mov.w	r9, #0
 800fa62:	07eb      	lsls	r3, r5, #31
 800fa64:	d50a      	bpl.n	800fa7c <__pow5mult+0x84>
 800fa66:	4631      	mov	r1, r6
 800fa68:	4622      	mov	r2, r4
 800fa6a:	4638      	mov	r0, r7
 800fa6c:	f7ff ff1a 	bl	800f8a4 <__multiply>
 800fa70:	4631      	mov	r1, r6
 800fa72:	4680      	mov	r8, r0
 800fa74:	4638      	mov	r0, r7
 800fa76:	f7ff fe01 	bl	800f67c <_Bfree>
 800fa7a:	4646      	mov	r6, r8
 800fa7c:	106d      	asrs	r5, r5, #1
 800fa7e:	d00b      	beq.n	800fa98 <__pow5mult+0xa0>
 800fa80:	6820      	ldr	r0, [r4, #0]
 800fa82:	b938      	cbnz	r0, 800fa94 <__pow5mult+0x9c>
 800fa84:	4622      	mov	r2, r4
 800fa86:	4621      	mov	r1, r4
 800fa88:	4638      	mov	r0, r7
 800fa8a:	f7ff ff0b 	bl	800f8a4 <__multiply>
 800fa8e:	6020      	str	r0, [r4, #0]
 800fa90:	f8c0 9000 	str.w	r9, [r0]
 800fa94:	4604      	mov	r4, r0
 800fa96:	e7e4      	b.n	800fa62 <__pow5mult+0x6a>
 800fa98:	4630      	mov	r0, r6
 800fa9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa9e:	bf00      	nop
 800faa0:	08012524 	.word	0x08012524
 800faa4:	0801244a 	.word	0x0801244a
 800faa8:	080124ca 	.word	0x080124ca

0800faac <__lshift>:
 800faac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fab0:	460c      	mov	r4, r1
 800fab2:	6849      	ldr	r1, [r1, #4]
 800fab4:	6923      	ldr	r3, [r4, #16]
 800fab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800faba:	68a3      	ldr	r3, [r4, #8]
 800fabc:	4607      	mov	r7, r0
 800fabe:	4691      	mov	r9, r2
 800fac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fac4:	f108 0601 	add.w	r6, r8, #1
 800fac8:	42b3      	cmp	r3, r6
 800faca:	db0b      	blt.n	800fae4 <__lshift+0x38>
 800facc:	4638      	mov	r0, r7
 800face:	f7ff fd95 	bl	800f5fc <_Balloc>
 800fad2:	4605      	mov	r5, r0
 800fad4:	b948      	cbnz	r0, 800faea <__lshift+0x3e>
 800fad6:	4602      	mov	r2, r0
 800fad8:	4b28      	ldr	r3, [pc, #160]	@ (800fb7c <__lshift+0xd0>)
 800fada:	4829      	ldr	r0, [pc, #164]	@ (800fb80 <__lshift+0xd4>)
 800fadc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fae0:	f001 fc7e 	bl	80113e0 <__assert_func>
 800fae4:	3101      	adds	r1, #1
 800fae6:	005b      	lsls	r3, r3, #1
 800fae8:	e7ee      	b.n	800fac8 <__lshift+0x1c>
 800faea:	2300      	movs	r3, #0
 800faec:	f100 0114 	add.w	r1, r0, #20
 800faf0:	f100 0210 	add.w	r2, r0, #16
 800faf4:	4618      	mov	r0, r3
 800faf6:	4553      	cmp	r3, sl
 800faf8:	db33      	blt.n	800fb62 <__lshift+0xb6>
 800fafa:	6920      	ldr	r0, [r4, #16]
 800fafc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb00:	f104 0314 	add.w	r3, r4, #20
 800fb04:	f019 091f 	ands.w	r9, r9, #31
 800fb08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb10:	d02b      	beq.n	800fb6a <__lshift+0xbe>
 800fb12:	f1c9 0e20 	rsb	lr, r9, #32
 800fb16:	468a      	mov	sl, r1
 800fb18:	2200      	movs	r2, #0
 800fb1a:	6818      	ldr	r0, [r3, #0]
 800fb1c:	fa00 f009 	lsl.w	r0, r0, r9
 800fb20:	4310      	orrs	r0, r2
 800fb22:	f84a 0b04 	str.w	r0, [sl], #4
 800fb26:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb2a:	459c      	cmp	ip, r3
 800fb2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fb30:	d8f3      	bhi.n	800fb1a <__lshift+0x6e>
 800fb32:	ebac 0304 	sub.w	r3, ip, r4
 800fb36:	3b15      	subs	r3, #21
 800fb38:	f023 0303 	bic.w	r3, r3, #3
 800fb3c:	3304      	adds	r3, #4
 800fb3e:	f104 0015 	add.w	r0, r4, #21
 800fb42:	4584      	cmp	ip, r0
 800fb44:	bf38      	it	cc
 800fb46:	2304      	movcc	r3, #4
 800fb48:	50ca      	str	r2, [r1, r3]
 800fb4a:	b10a      	cbz	r2, 800fb50 <__lshift+0xa4>
 800fb4c:	f108 0602 	add.w	r6, r8, #2
 800fb50:	3e01      	subs	r6, #1
 800fb52:	4638      	mov	r0, r7
 800fb54:	612e      	str	r6, [r5, #16]
 800fb56:	4621      	mov	r1, r4
 800fb58:	f7ff fd90 	bl	800f67c <_Bfree>
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb62:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb66:	3301      	adds	r3, #1
 800fb68:	e7c5      	b.n	800faf6 <__lshift+0x4a>
 800fb6a:	3904      	subs	r1, #4
 800fb6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb70:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb74:	459c      	cmp	ip, r3
 800fb76:	d8f9      	bhi.n	800fb6c <__lshift+0xc0>
 800fb78:	e7ea      	b.n	800fb50 <__lshift+0xa4>
 800fb7a:	bf00      	nop
 800fb7c:	080124b9 	.word	0x080124b9
 800fb80:	080124ca 	.word	0x080124ca

0800fb84 <__mcmp>:
 800fb84:	690a      	ldr	r2, [r1, #16]
 800fb86:	4603      	mov	r3, r0
 800fb88:	6900      	ldr	r0, [r0, #16]
 800fb8a:	1a80      	subs	r0, r0, r2
 800fb8c:	b530      	push	{r4, r5, lr}
 800fb8e:	d10e      	bne.n	800fbae <__mcmp+0x2a>
 800fb90:	3314      	adds	r3, #20
 800fb92:	3114      	adds	r1, #20
 800fb94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fb98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fb9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fba0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fba4:	4295      	cmp	r5, r2
 800fba6:	d003      	beq.n	800fbb0 <__mcmp+0x2c>
 800fba8:	d205      	bcs.n	800fbb6 <__mcmp+0x32>
 800fbaa:	f04f 30ff 	mov.w	r0, #4294967295
 800fbae:	bd30      	pop	{r4, r5, pc}
 800fbb0:	42a3      	cmp	r3, r4
 800fbb2:	d3f3      	bcc.n	800fb9c <__mcmp+0x18>
 800fbb4:	e7fb      	b.n	800fbae <__mcmp+0x2a>
 800fbb6:	2001      	movs	r0, #1
 800fbb8:	e7f9      	b.n	800fbae <__mcmp+0x2a>
	...

0800fbbc <__mdiff>:
 800fbbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc0:	4689      	mov	r9, r1
 800fbc2:	4606      	mov	r6, r0
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	4648      	mov	r0, r9
 800fbc8:	4614      	mov	r4, r2
 800fbca:	f7ff ffdb 	bl	800fb84 <__mcmp>
 800fbce:	1e05      	subs	r5, r0, #0
 800fbd0:	d112      	bne.n	800fbf8 <__mdiff+0x3c>
 800fbd2:	4629      	mov	r1, r5
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	f7ff fd11 	bl	800f5fc <_Balloc>
 800fbda:	4602      	mov	r2, r0
 800fbdc:	b928      	cbnz	r0, 800fbea <__mdiff+0x2e>
 800fbde:	4b3f      	ldr	r3, [pc, #252]	@ (800fcdc <__mdiff+0x120>)
 800fbe0:	f240 2137 	movw	r1, #567	@ 0x237
 800fbe4:	483e      	ldr	r0, [pc, #248]	@ (800fce0 <__mdiff+0x124>)
 800fbe6:	f001 fbfb 	bl	80113e0 <__assert_func>
 800fbea:	2301      	movs	r3, #1
 800fbec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fbf0:	4610      	mov	r0, r2
 800fbf2:	b003      	add	sp, #12
 800fbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf8:	bfbc      	itt	lt
 800fbfa:	464b      	movlt	r3, r9
 800fbfc:	46a1      	movlt	r9, r4
 800fbfe:	4630      	mov	r0, r6
 800fc00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fc04:	bfba      	itte	lt
 800fc06:	461c      	movlt	r4, r3
 800fc08:	2501      	movlt	r5, #1
 800fc0a:	2500      	movge	r5, #0
 800fc0c:	f7ff fcf6 	bl	800f5fc <_Balloc>
 800fc10:	4602      	mov	r2, r0
 800fc12:	b918      	cbnz	r0, 800fc1c <__mdiff+0x60>
 800fc14:	4b31      	ldr	r3, [pc, #196]	@ (800fcdc <__mdiff+0x120>)
 800fc16:	f240 2145 	movw	r1, #581	@ 0x245
 800fc1a:	e7e3      	b.n	800fbe4 <__mdiff+0x28>
 800fc1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fc20:	6926      	ldr	r6, [r4, #16]
 800fc22:	60c5      	str	r5, [r0, #12]
 800fc24:	f109 0310 	add.w	r3, r9, #16
 800fc28:	f109 0514 	add.w	r5, r9, #20
 800fc2c:	f104 0e14 	add.w	lr, r4, #20
 800fc30:	f100 0b14 	add.w	fp, r0, #20
 800fc34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fc38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fc3c:	9301      	str	r3, [sp, #4]
 800fc3e:	46d9      	mov	r9, fp
 800fc40:	f04f 0c00 	mov.w	ip, #0
 800fc44:	9b01      	ldr	r3, [sp, #4]
 800fc46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fc4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fc4e:	9301      	str	r3, [sp, #4]
 800fc50:	fa1f f38a 	uxth.w	r3, sl
 800fc54:	4619      	mov	r1, r3
 800fc56:	b283      	uxth	r3, r0
 800fc58:	1acb      	subs	r3, r1, r3
 800fc5a:	0c00      	lsrs	r0, r0, #16
 800fc5c:	4463      	add	r3, ip
 800fc5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fc62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fc66:	b29b      	uxth	r3, r3
 800fc68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fc6c:	4576      	cmp	r6, lr
 800fc6e:	f849 3b04 	str.w	r3, [r9], #4
 800fc72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fc76:	d8e5      	bhi.n	800fc44 <__mdiff+0x88>
 800fc78:	1b33      	subs	r3, r6, r4
 800fc7a:	3b15      	subs	r3, #21
 800fc7c:	f023 0303 	bic.w	r3, r3, #3
 800fc80:	3415      	adds	r4, #21
 800fc82:	3304      	adds	r3, #4
 800fc84:	42a6      	cmp	r6, r4
 800fc86:	bf38      	it	cc
 800fc88:	2304      	movcc	r3, #4
 800fc8a:	441d      	add	r5, r3
 800fc8c:	445b      	add	r3, fp
 800fc8e:	461e      	mov	r6, r3
 800fc90:	462c      	mov	r4, r5
 800fc92:	4544      	cmp	r4, r8
 800fc94:	d30e      	bcc.n	800fcb4 <__mdiff+0xf8>
 800fc96:	f108 0103 	add.w	r1, r8, #3
 800fc9a:	1b49      	subs	r1, r1, r5
 800fc9c:	f021 0103 	bic.w	r1, r1, #3
 800fca0:	3d03      	subs	r5, #3
 800fca2:	45a8      	cmp	r8, r5
 800fca4:	bf38      	it	cc
 800fca6:	2100      	movcc	r1, #0
 800fca8:	440b      	add	r3, r1
 800fcaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fcae:	b191      	cbz	r1, 800fcd6 <__mdiff+0x11a>
 800fcb0:	6117      	str	r7, [r2, #16]
 800fcb2:	e79d      	b.n	800fbf0 <__mdiff+0x34>
 800fcb4:	f854 1b04 	ldr.w	r1, [r4], #4
 800fcb8:	46e6      	mov	lr, ip
 800fcba:	0c08      	lsrs	r0, r1, #16
 800fcbc:	fa1c fc81 	uxtah	ip, ip, r1
 800fcc0:	4471      	add	r1, lr
 800fcc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fcc6:	b289      	uxth	r1, r1
 800fcc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fccc:	f846 1b04 	str.w	r1, [r6], #4
 800fcd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fcd4:	e7dd      	b.n	800fc92 <__mdiff+0xd6>
 800fcd6:	3f01      	subs	r7, #1
 800fcd8:	e7e7      	b.n	800fcaa <__mdiff+0xee>
 800fcda:	bf00      	nop
 800fcdc:	080124b9 	.word	0x080124b9
 800fce0:	080124ca 	.word	0x080124ca

0800fce4 <__ulp>:
 800fce4:	b082      	sub	sp, #8
 800fce6:	ed8d 0b00 	vstr	d0, [sp]
 800fcea:	9a01      	ldr	r2, [sp, #4]
 800fcec:	4b0f      	ldr	r3, [pc, #60]	@ (800fd2c <__ulp+0x48>)
 800fcee:	4013      	ands	r3, r2
 800fcf0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	dc08      	bgt.n	800fd0a <__ulp+0x26>
 800fcf8:	425b      	negs	r3, r3
 800fcfa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fcfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fd02:	da04      	bge.n	800fd0e <__ulp+0x2a>
 800fd04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fd08:	4113      	asrs	r3, r2
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	e008      	b.n	800fd20 <__ulp+0x3c>
 800fd0e:	f1a2 0314 	sub.w	r3, r2, #20
 800fd12:	2b1e      	cmp	r3, #30
 800fd14:	bfda      	itte	le
 800fd16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fd1a:	40da      	lsrle	r2, r3
 800fd1c:	2201      	movgt	r2, #1
 800fd1e:	2300      	movs	r3, #0
 800fd20:	4619      	mov	r1, r3
 800fd22:	4610      	mov	r0, r2
 800fd24:	ec41 0b10 	vmov	d0, r0, r1
 800fd28:	b002      	add	sp, #8
 800fd2a:	4770      	bx	lr
 800fd2c:	7ff00000 	.word	0x7ff00000

0800fd30 <__b2d>:
 800fd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd34:	6906      	ldr	r6, [r0, #16]
 800fd36:	f100 0814 	add.w	r8, r0, #20
 800fd3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fd3e:	1f37      	subs	r7, r6, #4
 800fd40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fd44:	4610      	mov	r0, r2
 800fd46:	f7ff fd4b 	bl	800f7e0 <__hi0bits>
 800fd4a:	f1c0 0320 	rsb	r3, r0, #32
 800fd4e:	280a      	cmp	r0, #10
 800fd50:	600b      	str	r3, [r1, #0]
 800fd52:	491b      	ldr	r1, [pc, #108]	@ (800fdc0 <__b2d+0x90>)
 800fd54:	dc15      	bgt.n	800fd82 <__b2d+0x52>
 800fd56:	f1c0 0c0b 	rsb	ip, r0, #11
 800fd5a:	fa22 f30c 	lsr.w	r3, r2, ip
 800fd5e:	45b8      	cmp	r8, r7
 800fd60:	ea43 0501 	orr.w	r5, r3, r1
 800fd64:	bf34      	ite	cc
 800fd66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fd6a:	2300      	movcs	r3, #0
 800fd6c:	3015      	adds	r0, #21
 800fd6e:	fa02 f000 	lsl.w	r0, r2, r0
 800fd72:	fa23 f30c 	lsr.w	r3, r3, ip
 800fd76:	4303      	orrs	r3, r0
 800fd78:	461c      	mov	r4, r3
 800fd7a:	ec45 4b10 	vmov	d0, r4, r5
 800fd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd82:	45b8      	cmp	r8, r7
 800fd84:	bf3a      	itte	cc
 800fd86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fd8a:	f1a6 0708 	subcc.w	r7, r6, #8
 800fd8e:	2300      	movcs	r3, #0
 800fd90:	380b      	subs	r0, #11
 800fd92:	d012      	beq.n	800fdba <__b2d+0x8a>
 800fd94:	f1c0 0120 	rsb	r1, r0, #32
 800fd98:	fa23 f401 	lsr.w	r4, r3, r1
 800fd9c:	4082      	lsls	r2, r0
 800fd9e:	4322      	orrs	r2, r4
 800fda0:	4547      	cmp	r7, r8
 800fda2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fda6:	bf8c      	ite	hi
 800fda8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fdac:	2200      	movls	r2, #0
 800fdae:	4083      	lsls	r3, r0
 800fdb0:	40ca      	lsrs	r2, r1
 800fdb2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	e7de      	b.n	800fd78 <__b2d+0x48>
 800fdba:	ea42 0501 	orr.w	r5, r2, r1
 800fdbe:	e7db      	b.n	800fd78 <__b2d+0x48>
 800fdc0:	3ff00000 	.word	0x3ff00000

0800fdc4 <__d2b>:
 800fdc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fdc8:	460f      	mov	r7, r1
 800fdca:	2101      	movs	r1, #1
 800fdcc:	ec59 8b10 	vmov	r8, r9, d0
 800fdd0:	4616      	mov	r6, r2
 800fdd2:	f7ff fc13 	bl	800f5fc <_Balloc>
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	b930      	cbnz	r0, 800fde8 <__d2b+0x24>
 800fdda:	4602      	mov	r2, r0
 800fddc:	4b23      	ldr	r3, [pc, #140]	@ (800fe6c <__d2b+0xa8>)
 800fdde:	4824      	ldr	r0, [pc, #144]	@ (800fe70 <__d2b+0xac>)
 800fde0:	f240 310f 	movw	r1, #783	@ 0x30f
 800fde4:	f001 fafc 	bl	80113e0 <__assert_func>
 800fde8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fdec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fdf0:	b10d      	cbz	r5, 800fdf6 <__d2b+0x32>
 800fdf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fdf6:	9301      	str	r3, [sp, #4]
 800fdf8:	f1b8 0300 	subs.w	r3, r8, #0
 800fdfc:	d023      	beq.n	800fe46 <__d2b+0x82>
 800fdfe:	4668      	mov	r0, sp
 800fe00:	9300      	str	r3, [sp, #0]
 800fe02:	f7ff fd0c 	bl	800f81e <__lo0bits>
 800fe06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fe0a:	b1d0      	cbz	r0, 800fe42 <__d2b+0x7e>
 800fe0c:	f1c0 0320 	rsb	r3, r0, #32
 800fe10:	fa02 f303 	lsl.w	r3, r2, r3
 800fe14:	430b      	orrs	r3, r1
 800fe16:	40c2      	lsrs	r2, r0
 800fe18:	6163      	str	r3, [r4, #20]
 800fe1a:	9201      	str	r2, [sp, #4]
 800fe1c:	9b01      	ldr	r3, [sp, #4]
 800fe1e:	61a3      	str	r3, [r4, #24]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	bf0c      	ite	eq
 800fe24:	2201      	moveq	r2, #1
 800fe26:	2202      	movne	r2, #2
 800fe28:	6122      	str	r2, [r4, #16]
 800fe2a:	b1a5      	cbz	r5, 800fe56 <__d2b+0x92>
 800fe2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fe30:	4405      	add	r5, r0
 800fe32:	603d      	str	r5, [r7, #0]
 800fe34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fe38:	6030      	str	r0, [r6, #0]
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	b003      	add	sp, #12
 800fe3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe42:	6161      	str	r1, [r4, #20]
 800fe44:	e7ea      	b.n	800fe1c <__d2b+0x58>
 800fe46:	a801      	add	r0, sp, #4
 800fe48:	f7ff fce9 	bl	800f81e <__lo0bits>
 800fe4c:	9b01      	ldr	r3, [sp, #4]
 800fe4e:	6163      	str	r3, [r4, #20]
 800fe50:	3020      	adds	r0, #32
 800fe52:	2201      	movs	r2, #1
 800fe54:	e7e8      	b.n	800fe28 <__d2b+0x64>
 800fe56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fe5e:	6038      	str	r0, [r7, #0]
 800fe60:	6918      	ldr	r0, [r3, #16]
 800fe62:	f7ff fcbd 	bl	800f7e0 <__hi0bits>
 800fe66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe6a:	e7e5      	b.n	800fe38 <__d2b+0x74>
 800fe6c:	080124b9 	.word	0x080124b9
 800fe70:	080124ca 	.word	0x080124ca

0800fe74 <__ratio>:
 800fe74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe78:	4688      	mov	r8, r1
 800fe7a:	4669      	mov	r1, sp
 800fe7c:	4681      	mov	r9, r0
 800fe7e:	f7ff ff57 	bl	800fd30 <__b2d>
 800fe82:	a901      	add	r1, sp, #4
 800fe84:	4640      	mov	r0, r8
 800fe86:	ec55 4b10 	vmov	r4, r5, d0
 800fe8a:	f7ff ff51 	bl	800fd30 <__b2d>
 800fe8e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fe92:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fe96:	1ad2      	subs	r2, r2, r3
 800fe98:	e9dd 3100 	ldrd	r3, r1, [sp]
 800fe9c:	1a5b      	subs	r3, r3, r1
 800fe9e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800fea2:	ec57 6b10 	vmov	r6, r7, d0
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	bfd6      	itet	le
 800feaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800feae:	462a      	movgt	r2, r5
 800feb0:	463a      	movle	r2, r7
 800feb2:	46ab      	mov	fp, r5
 800feb4:	46a2      	mov	sl, r4
 800feb6:	bfce      	itee	gt
 800feb8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800febc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800fec0:	ee00 3a90 	vmovle	s1, r3
 800fec4:	ec4b ab17 	vmov	d7, sl, fp
 800fec8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800fecc:	b003      	add	sp, #12
 800fece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fed2 <__copybits>:
 800fed2:	3901      	subs	r1, #1
 800fed4:	b570      	push	{r4, r5, r6, lr}
 800fed6:	1149      	asrs	r1, r1, #5
 800fed8:	6914      	ldr	r4, [r2, #16]
 800feda:	3101      	adds	r1, #1
 800fedc:	f102 0314 	add.w	r3, r2, #20
 800fee0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fee4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fee8:	1f05      	subs	r5, r0, #4
 800feea:	42a3      	cmp	r3, r4
 800feec:	d30c      	bcc.n	800ff08 <__copybits+0x36>
 800feee:	1aa3      	subs	r3, r4, r2
 800fef0:	3b11      	subs	r3, #17
 800fef2:	f023 0303 	bic.w	r3, r3, #3
 800fef6:	3211      	adds	r2, #17
 800fef8:	42a2      	cmp	r2, r4
 800fefa:	bf88      	it	hi
 800fefc:	2300      	movhi	r3, #0
 800fefe:	4418      	add	r0, r3
 800ff00:	2300      	movs	r3, #0
 800ff02:	4288      	cmp	r0, r1
 800ff04:	d305      	bcc.n	800ff12 <__copybits+0x40>
 800ff06:	bd70      	pop	{r4, r5, r6, pc}
 800ff08:	f853 6b04 	ldr.w	r6, [r3], #4
 800ff0c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ff10:	e7eb      	b.n	800feea <__copybits+0x18>
 800ff12:	f840 3b04 	str.w	r3, [r0], #4
 800ff16:	e7f4      	b.n	800ff02 <__copybits+0x30>

0800ff18 <__any_on>:
 800ff18:	f100 0214 	add.w	r2, r0, #20
 800ff1c:	6900      	ldr	r0, [r0, #16]
 800ff1e:	114b      	asrs	r3, r1, #5
 800ff20:	4298      	cmp	r0, r3
 800ff22:	b510      	push	{r4, lr}
 800ff24:	db11      	blt.n	800ff4a <__any_on+0x32>
 800ff26:	dd0a      	ble.n	800ff3e <__any_on+0x26>
 800ff28:	f011 011f 	ands.w	r1, r1, #31
 800ff2c:	d007      	beq.n	800ff3e <__any_on+0x26>
 800ff2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ff32:	fa24 f001 	lsr.w	r0, r4, r1
 800ff36:	fa00 f101 	lsl.w	r1, r0, r1
 800ff3a:	428c      	cmp	r4, r1
 800ff3c:	d10b      	bne.n	800ff56 <__any_on+0x3e>
 800ff3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d803      	bhi.n	800ff4e <__any_on+0x36>
 800ff46:	2000      	movs	r0, #0
 800ff48:	bd10      	pop	{r4, pc}
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	e7f7      	b.n	800ff3e <__any_on+0x26>
 800ff4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff52:	2900      	cmp	r1, #0
 800ff54:	d0f5      	beq.n	800ff42 <__any_on+0x2a>
 800ff56:	2001      	movs	r0, #1
 800ff58:	e7f6      	b.n	800ff48 <__any_on+0x30>

0800ff5a <sulp>:
 800ff5a:	b570      	push	{r4, r5, r6, lr}
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	460d      	mov	r5, r1
 800ff60:	4616      	mov	r6, r2
 800ff62:	ec45 4b10 	vmov	d0, r4, r5
 800ff66:	f7ff febd 	bl	800fce4 <__ulp>
 800ff6a:	b17e      	cbz	r6, 800ff8c <sulp+0x32>
 800ff6c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ff70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	dd09      	ble.n	800ff8c <sulp+0x32>
 800ff78:	051b      	lsls	r3, r3, #20
 800ff7a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800ff7e:	2000      	movs	r0, #0
 800ff80:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800ff84:	ec41 0b17 	vmov	d7, r0, r1
 800ff88:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ff8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff90 <_strtod_l>:
 800ff90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff94:	ed2d 8b0a 	vpush	{d8-d12}
 800ff98:	b097      	sub	sp, #92	@ 0x5c
 800ff9a:	4688      	mov	r8, r1
 800ff9c:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	9212      	str	r2, [sp, #72]	@ 0x48
 800ffa2:	9005      	str	r0, [sp, #20]
 800ffa4:	f04f 0a00 	mov.w	sl, #0
 800ffa8:	f04f 0b00 	mov.w	fp, #0
 800ffac:	460a      	mov	r2, r1
 800ffae:	9211      	str	r2, [sp, #68]	@ 0x44
 800ffb0:	7811      	ldrb	r1, [r2, #0]
 800ffb2:	292b      	cmp	r1, #43	@ 0x2b
 800ffb4:	d04c      	beq.n	8010050 <_strtod_l+0xc0>
 800ffb6:	d839      	bhi.n	801002c <_strtod_l+0x9c>
 800ffb8:	290d      	cmp	r1, #13
 800ffba:	d833      	bhi.n	8010024 <_strtod_l+0x94>
 800ffbc:	2908      	cmp	r1, #8
 800ffbe:	d833      	bhi.n	8010028 <_strtod_l+0x98>
 800ffc0:	2900      	cmp	r1, #0
 800ffc2:	d03c      	beq.n	801003e <_strtod_l+0xae>
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	9208      	str	r2, [sp, #32]
 800ffc8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800ffca:	782a      	ldrb	r2, [r5, #0]
 800ffcc:	2a30      	cmp	r2, #48	@ 0x30
 800ffce:	f040 80b5 	bne.w	801013c <_strtod_l+0x1ac>
 800ffd2:	786a      	ldrb	r2, [r5, #1]
 800ffd4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ffd8:	2a58      	cmp	r2, #88	@ 0x58
 800ffda:	d170      	bne.n	80100be <_strtod_l+0x12e>
 800ffdc:	9302      	str	r3, [sp, #8]
 800ffde:	9b08      	ldr	r3, [sp, #32]
 800ffe0:	9301      	str	r3, [sp, #4]
 800ffe2:	ab12      	add	r3, sp, #72	@ 0x48
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	4a8b      	ldr	r2, [pc, #556]	@ (8010214 <_strtod_l+0x284>)
 800ffe8:	9805      	ldr	r0, [sp, #20]
 800ffea:	ab13      	add	r3, sp, #76	@ 0x4c
 800ffec:	a911      	add	r1, sp, #68	@ 0x44
 800ffee:	f001 fa91 	bl	8011514 <__gethex>
 800fff2:	f010 060f 	ands.w	r6, r0, #15
 800fff6:	4604      	mov	r4, r0
 800fff8:	d005      	beq.n	8010006 <_strtod_l+0x76>
 800fffa:	2e06      	cmp	r6, #6
 800fffc:	d12a      	bne.n	8010054 <_strtod_l+0xc4>
 800fffe:	3501      	adds	r5, #1
 8010000:	2300      	movs	r3, #0
 8010002:	9511      	str	r5, [sp, #68]	@ 0x44
 8010004:	9308      	str	r3, [sp, #32]
 8010006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010008:	2b00      	cmp	r3, #0
 801000a:	f040 852f 	bne.w	8010a6c <_strtod_l+0xadc>
 801000e:	9b08      	ldr	r3, [sp, #32]
 8010010:	ec4b ab10 	vmov	d0, sl, fp
 8010014:	b1cb      	cbz	r3, 801004a <_strtod_l+0xba>
 8010016:	eeb1 0b40 	vneg.f64	d0, d0
 801001a:	b017      	add	sp, #92	@ 0x5c
 801001c:	ecbd 8b0a 	vpop	{d8-d12}
 8010020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010024:	2920      	cmp	r1, #32
 8010026:	d1cd      	bne.n	800ffc4 <_strtod_l+0x34>
 8010028:	3201      	adds	r2, #1
 801002a:	e7c0      	b.n	800ffae <_strtod_l+0x1e>
 801002c:	292d      	cmp	r1, #45	@ 0x2d
 801002e:	d1c9      	bne.n	800ffc4 <_strtod_l+0x34>
 8010030:	2101      	movs	r1, #1
 8010032:	9108      	str	r1, [sp, #32]
 8010034:	1c51      	adds	r1, r2, #1
 8010036:	9111      	str	r1, [sp, #68]	@ 0x44
 8010038:	7852      	ldrb	r2, [r2, #1]
 801003a:	2a00      	cmp	r2, #0
 801003c:	d1c4      	bne.n	800ffc8 <_strtod_l+0x38>
 801003e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010040:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010044:	2b00      	cmp	r3, #0
 8010046:	f040 850f 	bne.w	8010a68 <_strtod_l+0xad8>
 801004a:	ec4b ab10 	vmov	d0, sl, fp
 801004e:	e7e4      	b.n	801001a <_strtod_l+0x8a>
 8010050:	2100      	movs	r1, #0
 8010052:	e7ee      	b.n	8010032 <_strtod_l+0xa2>
 8010054:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010056:	b13a      	cbz	r2, 8010068 <_strtod_l+0xd8>
 8010058:	2135      	movs	r1, #53	@ 0x35
 801005a:	a814      	add	r0, sp, #80	@ 0x50
 801005c:	f7ff ff39 	bl	800fed2 <__copybits>
 8010060:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010062:	9805      	ldr	r0, [sp, #20]
 8010064:	f7ff fb0a 	bl	800f67c <_Bfree>
 8010068:	1e73      	subs	r3, r6, #1
 801006a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801006c:	2b04      	cmp	r3, #4
 801006e:	d806      	bhi.n	801007e <_strtod_l+0xee>
 8010070:	e8df f003 	tbb	[pc, r3]
 8010074:	201d0314 	.word	0x201d0314
 8010078:	14          	.byte	0x14
 8010079:	00          	.byte	0x00
 801007a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801007e:	05e3      	lsls	r3, r4, #23
 8010080:	bf48      	it	mi
 8010082:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010086:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801008a:	0d1b      	lsrs	r3, r3, #20
 801008c:	051b      	lsls	r3, r3, #20
 801008e:	2b00      	cmp	r3, #0
 8010090:	d1b9      	bne.n	8010006 <_strtod_l+0x76>
 8010092:	f7fe fb91 	bl	800e7b8 <__errno>
 8010096:	2322      	movs	r3, #34	@ 0x22
 8010098:	6003      	str	r3, [r0, #0]
 801009a:	e7b4      	b.n	8010006 <_strtod_l+0x76>
 801009c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80100a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80100a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80100a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80100ac:	e7e7      	b.n	801007e <_strtod_l+0xee>
 80100ae:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801021c <_strtod_l+0x28c>
 80100b2:	e7e4      	b.n	801007e <_strtod_l+0xee>
 80100b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80100b8:	f04f 3aff 	mov.w	sl, #4294967295
 80100bc:	e7df      	b.n	801007e <_strtod_l+0xee>
 80100be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80100c0:	1c5a      	adds	r2, r3, #1
 80100c2:	9211      	str	r2, [sp, #68]	@ 0x44
 80100c4:	785b      	ldrb	r3, [r3, #1]
 80100c6:	2b30      	cmp	r3, #48	@ 0x30
 80100c8:	d0f9      	beq.n	80100be <_strtod_l+0x12e>
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d09b      	beq.n	8010006 <_strtod_l+0x76>
 80100ce:	2301      	movs	r3, #1
 80100d0:	2600      	movs	r6, #0
 80100d2:	9307      	str	r3, [sp, #28]
 80100d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80100d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80100d8:	46b1      	mov	r9, r6
 80100da:	4635      	mov	r5, r6
 80100dc:	220a      	movs	r2, #10
 80100de:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80100e0:	7804      	ldrb	r4, [r0, #0]
 80100e2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80100e6:	b2d9      	uxtb	r1, r3
 80100e8:	2909      	cmp	r1, #9
 80100ea:	d929      	bls.n	8010140 <_strtod_l+0x1b0>
 80100ec:	494a      	ldr	r1, [pc, #296]	@ (8010218 <_strtod_l+0x288>)
 80100ee:	2201      	movs	r2, #1
 80100f0:	f001 f928 	bl	8011344 <strncmp>
 80100f4:	b378      	cbz	r0, 8010156 <_strtod_l+0x1c6>
 80100f6:	2000      	movs	r0, #0
 80100f8:	4622      	mov	r2, r4
 80100fa:	462b      	mov	r3, r5
 80100fc:	4607      	mov	r7, r0
 80100fe:	9006      	str	r0, [sp, #24]
 8010100:	2a65      	cmp	r2, #101	@ 0x65
 8010102:	d001      	beq.n	8010108 <_strtod_l+0x178>
 8010104:	2a45      	cmp	r2, #69	@ 0x45
 8010106:	d117      	bne.n	8010138 <_strtod_l+0x1a8>
 8010108:	b91b      	cbnz	r3, 8010112 <_strtod_l+0x182>
 801010a:	9b07      	ldr	r3, [sp, #28]
 801010c:	4303      	orrs	r3, r0
 801010e:	d096      	beq.n	801003e <_strtod_l+0xae>
 8010110:	2300      	movs	r3, #0
 8010112:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8010116:	f108 0201 	add.w	r2, r8, #1
 801011a:	9211      	str	r2, [sp, #68]	@ 0x44
 801011c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010120:	2a2b      	cmp	r2, #43	@ 0x2b
 8010122:	d06b      	beq.n	80101fc <_strtod_l+0x26c>
 8010124:	2a2d      	cmp	r2, #45	@ 0x2d
 8010126:	d071      	beq.n	801020c <_strtod_l+0x27c>
 8010128:	f04f 0e00 	mov.w	lr, #0
 801012c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010130:	2c09      	cmp	r4, #9
 8010132:	d979      	bls.n	8010228 <_strtod_l+0x298>
 8010134:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010138:	2400      	movs	r4, #0
 801013a:	e094      	b.n	8010266 <_strtod_l+0x2d6>
 801013c:	2300      	movs	r3, #0
 801013e:	e7c7      	b.n	80100d0 <_strtod_l+0x140>
 8010140:	2d08      	cmp	r5, #8
 8010142:	f100 0001 	add.w	r0, r0, #1
 8010146:	bfd4      	ite	le
 8010148:	fb02 3909 	mlale	r9, r2, r9, r3
 801014c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8010150:	3501      	adds	r5, #1
 8010152:	9011      	str	r0, [sp, #68]	@ 0x44
 8010154:	e7c3      	b.n	80100de <_strtod_l+0x14e>
 8010156:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010158:	1c5a      	adds	r2, r3, #1
 801015a:	9211      	str	r2, [sp, #68]	@ 0x44
 801015c:	785a      	ldrb	r2, [r3, #1]
 801015e:	b375      	cbz	r5, 80101be <_strtod_l+0x22e>
 8010160:	4607      	mov	r7, r0
 8010162:	462b      	mov	r3, r5
 8010164:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010168:	2909      	cmp	r1, #9
 801016a:	d913      	bls.n	8010194 <_strtod_l+0x204>
 801016c:	2101      	movs	r1, #1
 801016e:	9106      	str	r1, [sp, #24]
 8010170:	e7c6      	b.n	8010100 <_strtod_l+0x170>
 8010172:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010174:	1c5a      	adds	r2, r3, #1
 8010176:	9211      	str	r2, [sp, #68]	@ 0x44
 8010178:	785a      	ldrb	r2, [r3, #1]
 801017a:	3001      	adds	r0, #1
 801017c:	2a30      	cmp	r2, #48	@ 0x30
 801017e:	d0f8      	beq.n	8010172 <_strtod_l+0x1e2>
 8010180:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010184:	2b08      	cmp	r3, #8
 8010186:	f200 8476 	bhi.w	8010a76 <_strtod_l+0xae6>
 801018a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801018c:	930a      	str	r3, [sp, #40]	@ 0x28
 801018e:	4607      	mov	r7, r0
 8010190:	2000      	movs	r0, #0
 8010192:	4603      	mov	r3, r0
 8010194:	3a30      	subs	r2, #48	@ 0x30
 8010196:	f100 0101 	add.w	r1, r0, #1
 801019a:	d023      	beq.n	80101e4 <_strtod_l+0x254>
 801019c:	440f      	add	r7, r1
 801019e:	eb00 0c03 	add.w	ip, r0, r3
 80101a2:	4619      	mov	r1, r3
 80101a4:	240a      	movs	r4, #10
 80101a6:	4561      	cmp	r1, ip
 80101a8:	d10b      	bne.n	80101c2 <_strtod_l+0x232>
 80101aa:	1c5c      	adds	r4, r3, #1
 80101ac:	4403      	add	r3, r0
 80101ae:	2b08      	cmp	r3, #8
 80101b0:	4404      	add	r4, r0
 80101b2:	dc11      	bgt.n	80101d8 <_strtod_l+0x248>
 80101b4:	230a      	movs	r3, #10
 80101b6:	fb03 2909 	mla	r9, r3, r9, r2
 80101ba:	2100      	movs	r1, #0
 80101bc:	e013      	b.n	80101e6 <_strtod_l+0x256>
 80101be:	4628      	mov	r0, r5
 80101c0:	e7dc      	b.n	801017c <_strtod_l+0x1ec>
 80101c2:	2908      	cmp	r1, #8
 80101c4:	f101 0101 	add.w	r1, r1, #1
 80101c8:	dc02      	bgt.n	80101d0 <_strtod_l+0x240>
 80101ca:	fb04 f909 	mul.w	r9, r4, r9
 80101ce:	e7ea      	b.n	80101a6 <_strtod_l+0x216>
 80101d0:	2910      	cmp	r1, #16
 80101d2:	bfd8      	it	le
 80101d4:	4366      	mulle	r6, r4
 80101d6:	e7e6      	b.n	80101a6 <_strtod_l+0x216>
 80101d8:	2b0f      	cmp	r3, #15
 80101da:	dcee      	bgt.n	80101ba <_strtod_l+0x22a>
 80101dc:	230a      	movs	r3, #10
 80101de:	fb03 2606 	mla	r6, r3, r6, r2
 80101e2:	e7ea      	b.n	80101ba <_strtod_l+0x22a>
 80101e4:	461c      	mov	r4, r3
 80101e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80101e8:	1c5a      	adds	r2, r3, #1
 80101ea:	9211      	str	r2, [sp, #68]	@ 0x44
 80101ec:	785a      	ldrb	r2, [r3, #1]
 80101ee:	4608      	mov	r0, r1
 80101f0:	4623      	mov	r3, r4
 80101f2:	e7b7      	b.n	8010164 <_strtod_l+0x1d4>
 80101f4:	2301      	movs	r3, #1
 80101f6:	2700      	movs	r7, #0
 80101f8:	9306      	str	r3, [sp, #24]
 80101fa:	e786      	b.n	801010a <_strtod_l+0x17a>
 80101fc:	f04f 0e00 	mov.w	lr, #0
 8010200:	f108 0202 	add.w	r2, r8, #2
 8010204:	9211      	str	r2, [sp, #68]	@ 0x44
 8010206:	f898 2002 	ldrb.w	r2, [r8, #2]
 801020a:	e78f      	b.n	801012c <_strtod_l+0x19c>
 801020c:	f04f 0e01 	mov.w	lr, #1
 8010210:	e7f6      	b.n	8010200 <_strtod_l+0x270>
 8010212:	bf00      	nop
 8010214:	08012638 	.word	0x08012638
 8010218:	08012620 	.word	0x08012620
 801021c:	7ff00000 	.word	0x7ff00000
 8010220:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010222:	1c54      	adds	r4, r2, #1
 8010224:	9411      	str	r4, [sp, #68]	@ 0x44
 8010226:	7852      	ldrb	r2, [r2, #1]
 8010228:	2a30      	cmp	r2, #48	@ 0x30
 801022a:	d0f9      	beq.n	8010220 <_strtod_l+0x290>
 801022c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8010230:	2c08      	cmp	r4, #8
 8010232:	d881      	bhi.n	8010138 <_strtod_l+0x1a8>
 8010234:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8010238:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801023a:	9209      	str	r2, [sp, #36]	@ 0x24
 801023c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801023e:	1c51      	adds	r1, r2, #1
 8010240:	9111      	str	r1, [sp, #68]	@ 0x44
 8010242:	7852      	ldrb	r2, [r2, #1]
 8010244:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010248:	2c09      	cmp	r4, #9
 801024a:	d938      	bls.n	80102be <_strtod_l+0x32e>
 801024c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801024e:	1b0c      	subs	r4, r1, r4
 8010250:	2c08      	cmp	r4, #8
 8010252:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8010256:	dc02      	bgt.n	801025e <_strtod_l+0x2ce>
 8010258:	4564      	cmp	r4, ip
 801025a:	bfa8      	it	ge
 801025c:	4664      	movge	r4, ip
 801025e:	f1be 0f00 	cmp.w	lr, #0
 8010262:	d000      	beq.n	8010266 <_strtod_l+0x2d6>
 8010264:	4264      	negs	r4, r4
 8010266:	2b00      	cmp	r3, #0
 8010268:	d14e      	bne.n	8010308 <_strtod_l+0x378>
 801026a:	9b07      	ldr	r3, [sp, #28]
 801026c:	4318      	orrs	r0, r3
 801026e:	f47f aeca 	bne.w	8010006 <_strtod_l+0x76>
 8010272:	9b06      	ldr	r3, [sp, #24]
 8010274:	2b00      	cmp	r3, #0
 8010276:	f47f aee2 	bne.w	801003e <_strtod_l+0xae>
 801027a:	2a69      	cmp	r2, #105	@ 0x69
 801027c:	d027      	beq.n	80102ce <_strtod_l+0x33e>
 801027e:	dc24      	bgt.n	80102ca <_strtod_l+0x33a>
 8010280:	2a49      	cmp	r2, #73	@ 0x49
 8010282:	d024      	beq.n	80102ce <_strtod_l+0x33e>
 8010284:	2a4e      	cmp	r2, #78	@ 0x4e
 8010286:	f47f aeda 	bne.w	801003e <_strtod_l+0xae>
 801028a:	4997      	ldr	r1, [pc, #604]	@ (80104e8 <_strtod_l+0x558>)
 801028c:	a811      	add	r0, sp, #68	@ 0x44
 801028e:	f001 fb63 	bl	8011958 <__match>
 8010292:	2800      	cmp	r0, #0
 8010294:	f43f aed3 	beq.w	801003e <_strtod_l+0xae>
 8010298:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	2b28      	cmp	r3, #40	@ 0x28
 801029e:	d12d      	bne.n	80102fc <_strtod_l+0x36c>
 80102a0:	4992      	ldr	r1, [pc, #584]	@ (80104ec <_strtod_l+0x55c>)
 80102a2:	aa14      	add	r2, sp, #80	@ 0x50
 80102a4:	a811      	add	r0, sp, #68	@ 0x44
 80102a6:	f001 fb6b 	bl	8011980 <__hexnan>
 80102aa:	2805      	cmp	r0, #5
 80102ac:	d126      	bne.n	80102fc <_strtod_l+0x36c>
 80102ae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80102b0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80102b4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80102b8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80102bc:	e6a3      	b.n	8010006 <_strtod_l+0x76>
 80102be:	240a      	movs	r4, #10
 80102c0:	fb04 2c0c 	mla	ip, r4, ip, r2
 80102c4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80102c8:	e7b8      	b.n	801023c <_strtod_l+0x2ac>
 80102ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80102cc:	e7db      	b.n	8010286 <_strtod_l+0x2f6>
 80102ce:	4988      	ldr	r1, [pc, #544]	@ (80104f0 <_strtod_l+0x560>)
 80102d0:	a811      	add	r0, sp, #68	@ 0x44
 80102d2:	f001 fb41 	bl	8011958 <__match>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	f43f aeb1 	beq.w	801003e <_strtod_l+0xae>
 80102dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80102de:	4985      	ldr	r1, [pc, #532]	@ (80104f4 <_strtod_l+0x564>)
 80102e0:	3b01      	subs	r3, #1
 80102e2:	a811      	add	r0, sp, #68	@ 0x44
 80102e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80102e6:	f001 fb37 	bl	8011958 <__match>
 80102ea:	b910      	cbnz	r0, 80102f2 <_strtod_l+0x362>
 80102ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80102ee:	3301      	adds	r3, #1
 80102f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80102f2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8010508 <_strtod_l+0x578>
 80102f6:	f04f 0a00 	mov.w	sl, #0
 80102fa:	e684      	b.n	8010006 <_strtod_l+0x76>
 80102fc:	487e      	ldr	r0, [pc, #504]	@ (80104f8 <_strtod_l+0x568>)
 80102fe:	f001 f867 	bl	80113d0 <nan>
 8010302:	ec5b ab10 	vmov	sl, fp, d0
 8010306:	e67e      	b.n	8010006 <_strtod_l+0x76>
 8010308:	ee07 9a90 	vmov	s15, r9
 801030c:	1be2      	subs	r2, r4, r7
 801030e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010312:	2d00      	cmp	r5, #0
 8010314:	bf08      	it	eq
 8010316:	461d      	moveq	r5, r3
 8010318:	2b10      	cmp	r3, #16
 801031a:	9209      	str	r2, [sp, #36]	@ 0x24
 801031c:	461a      	mov	r2, r3
 801031e:	bfa8      	it	ge
 8010320:	2210      	movge	r2, #16
 8010322:	2b09      	cmp	r3, #9
 8010324:	ec5b ab17 	vmov	sl, fp, d7
 8010328:	dc15      	bgt.n	8010356 <_strtod_l+0x3c6>
 801032a:	1be1      	subs	r1, r4, r7
 801032c:	2900      	cmp	r1, #0
 801032e:	f43f ae6a 	beq.w	8010006 <_strtod_l+0x76>
 8010332:	eba4 0107 	sub.w	r1, r4, r7
 8010336:	dd72      	ble.n	801041e <_strtod_l+0x48e>
 8010338:	2916      	cmp	r1, #22
 801033a:	dc59      	bgt.n	80103f0 <_strtod_l+0x460>
 801033c:	4b6f      	ldr	r3, [pc, #444]	@ (80104fc <_strtod_l+0x56c>)
 801033e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010344:	ed93 7b00 	vldr	d7, [r3]
 8010348:	ec4b ab16 	vmov	d6, sl, fp
 801034c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010350:	ec5b ab17 	vmov	sl, fp, d7
 8010354:	e657      	b.n	8010006 <_strtod_l+0x76>
 8010356:	4969      	ldr	r1, [pc, #420]	@ (80104fc <_strtod_l+0x56c>)
 8010358:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801035c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010360:	ee06 6a90 	vmov	s13, r6
 8010364:	2b0f      	cmp	r3, #15
 8010366:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801036a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801036e:	ec5b ab16 	vmov	sl, fp, d6
 8010372:	ddda      	ble.n	801032a <_strtod_l+0x39a>
 8010374:	1a9a      	subs	r2, r3, r2
 8010376:	1be1      	subs	r1, r4, r7
 8010378:	440a      	add	r2, r1
 801037a:	2a00      	cmp	r2, #0
 801037c:	f340 8094 	ble.w	80104a8 <_strtod_l+0x518>
 8010380:	f012 000f 	ands.w	r0, r2, #15
 8010384:	d00a      	beq.n	801039c <_strtod_l+0x40c>
 8010386:	495d      	ldr	r1, [pc, #372]	@ (80104fc <_strtod_l+0x56c>)
 8010388:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801038c:	ed91 7b00 	vldr	d7, [r1]
 8010390:	ec4b ab16 	vmov	d6, sl, fp
 8010394:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010398:	ec5b ab17 	vmov	sl, fp, d7
 801039c:	f032 020f 	bics.w	r2, r2, #15
 80103a0:	d073      	beq.n	801048a <_strtod_l+0x4fa>
 80103a2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80103a6:	dd47      	ble.n	8010438 <_strtod_l+0x4a8>
 80103a8:	2400      	movs	r4, #0
 80103aa:	4625      	mov	r5, r4
 80103ac:	9407      	str	r4, [sp, #28]
 80103ae:	4626      	mov	r6, r4
 80103b0:	9a05      	ldr	r2, [sp, #20]
 80103b2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010508 <_strtod_l+0x578>
 80103b6:	2322      	movs	r3, #34	@ 0x22
 80103b8:	6013      	str	r3, [r2, #0]
 80103ba:	f04f 0a00 	mov.w	sl, #0
 80103be:	9b07      	ldr	r3, [sp, #28]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	f43f ae20 	beq.w	8010006 <_strtod_l+0x76>
 80103c6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80103c8:	9805      	ldr	r0, [sp, #20]
 80103ca:	f7ff f957 	bl	800f67c <_Bfree>
 80103ce:	9805      	ldr	r0, [sp, #20]
 80103d0:	4631      	mov	r1, r6
 80103d2:	f7ff f953 	bl	800f67c <_Bfree>
 80103d6:	9805      	ldr	r0, [sp, #20]
 80103d8:	4629      	mov	r1, r5
 80103da:	f7ff f94f 	bl	800f67c <_Bfree>
 80103de:	9907      	ldr	r1, [sp, #28]
 80103e0:	9805      	ldr	r0, [sp, #20]
 80103e2:	f7ff f94b 	bl	800f67c <_Bfree>
 80103e6:	9805      	ldr	r0, [sp, #20]
 80103e8:	4621      	mov	r1, r4
 80103ea:	f7ff f947 	bl	800f67c <_Bfree>
 80103ee:	e60a      	b.n	8010006 <_strtod_l+0x76>
 80103f0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80103f4:	1be0      	subs	r0, r4, r7
 80103f6:	4281      	cmp	r1, r0
 80103f8:	dbbc      	blt.n	8010374 <_strtod_l+0x3e4>
 80103fa:	4a40      	ldr	r2, [pc, #256]	@ (80104fc <_strtod_l+0x56c>)
 80103fc:	f1c3 030f 	rsb	r3, r3, #15
 8010400:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010404:	ed91 7b00 	vldr	d7, [r1]
 8010408:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801040a:	ec4b ab16 	vmov	d6, sl, fp
 801040e:	1acb      	subs	r3, r1, r3
 8010410:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010414:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010418:	ed92 6b00 	vldr	d6, [r2]
 801041c:	e796      	b.n	801034c <_strtod_l+0x3bc>
 801041e:	3116      	adds	r1, #22
 8010420:	dba8      	blt.n	8010374 <_strtod_l+0x3e4>
 8010422:	4b36      	ldr	r3, [pc, #216]	@ (80104fc <_strtod_l+0x56c>)
 8010424:	1b3c      	subs	r4, r7, r4
 8010426:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801042a:	ed94 7b00 	vldr	d7, [r4]
 801042e:	ec4b ab16 	vmov	d6, sl, fp
 8010432:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010436:	e78b      	b.n	8010350 <_strtod_l+0x3c0>
 8010438:	2000      	movs	r0, #0
 801043a:	ec4b ab17 	vmov	d7, sl, fp
 801043e:	4e30      	ldr	r6, [pc, #192]	@ (8010500 <_strtod_l+0x570>)
 8010440:	1112      	asrs	r2, r2, #4
 8010442:	4601      	mov	r1, r0
 8010444:	2a01      	cmp	r2, #1
 8010446:	dc23      	bgt.n	8010490 <_strtod_l+0x500>
 8010448:	b108      	cbz	r0, 801044e <_strtod_l+0x4be>
 801044a:	ec5b ab17 	vmov	sl, fp, d7
 801044e:	4a2c      	ldr	r2, [pc, #176]	@ (8010500 <_strtod_l+0x570>)
 8010450:	482c      	ldr	r0, [pc, #176]	@ (8010504 <_strtod_l+0x574>)
 8010452:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010456:	ed92 7b00 	vldr	d7, [r2]
 801045a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801045e:	ec4b ab16 	vmov	d6, sl, fp
 8010462:	4a29      	ldr	r2, [pc, #164]	@ (8010508 <_strtod_l+0x578>)
 8010464:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010468:	ee17 1a90 	vmov	r1, s15
 801046c:	400a      	ands	r2, r1
 801046e:	4282      	cmp	r2, r0
 8010470:	ec5b ab17 	vmov	sl, fp, d7
 8010474:	d898      	bhi.n	80103a8 <_strtod_l+0x418>
 8010476:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801047a:	4282      	cmp	r2, r0
 801047c:	bf86      	itte	hi
 801047e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801050c <_strtod_l+0x57c>
 8010482:	f04f 3aff 	movhi.w	sl, #4294967295
 8010486:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801048a:	2200      	movs	r2, #0
 801048c:	9206      	str	r2, [sp, #24]
 801048e:	e076      	b.n	801057e <_strtod_l+0x5ee>
 8010490:	f012 0f01 	tst.w	r2, #1
 8010494:	d004      	beq.n	80104a0 <_strtod_l+0x510>
 8010496:	ed96 6b00 	vldr	d6, [r6]
 801049a:	2001      	movs	r0, #1
 801049c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80104a0:	3101      	adds	r1, #1
 80104a2:	1052      	asrs	r2, r2, #1
 80104a4:	3608      	adds	r6, #8
 80104a6:	e7cd      	b.n	8010444 <_strtod_l+0x4b4>
 80104a8:	d0ef      	beq.n	801048a <_strtod_l+0x4fa>
 80104aa:	4252      	negs	r2, r2
 80104ac:	f012 000f 	ands.w	r0, r2, #15
 80104b0:	d00a      	beq.n	80104c8 <_strtod_l+0x538>
 80104b2:	4912      	ldr	r1, [pc, #72]	@ (80104fc <_strtod_l+0x56c>)
 80104b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80104b8:	ed91 7b00 	vldr	d7, [r1]
 80104bc:	ec4b ab16 	vmov	d6, sl, fp
 80104c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80104c4:	ec5b ab17 	vmov	sl, fp, d7
 80104c8:	1112      	asrs	r2, r2, #4
 80104ca:	d0de      	beq.n	801048a <_strtod_l+0x4fa>
 80104cc:	2a1f      	cmp	r2, #31
 80104ce:	dd1f      	ble.n	8010510 <_strtod_l+0x580>
 80104d0:	2400      	movs	r4, #0
 80104d2:	4625      	mov	r5, r4
 80104d4:	9407      	str	r4, [sp, #28]
 80104d6:	4626      	mov	r6, r4
 80104d8:	9a05      	ldr	r2, [sp, #20]
 80104da:	2322      	movs	r3, #34	@ 0x22
 80104dc:	f04f 0a00 	mov.w	sl, #0
 80104e0:	f04f 0b00 	mov.w	fp, #0
 80104e4:	6013      	str	r3, [r2, #0]
 80104e6:	e76a      	b.n	80103be <_strtod_l+0x42e>
 80104e8:	08012411 	.word	0x08012411
 80104ec:	08012624 	.word	0x08012624
 80104f0:	08012409 	.word	0x08012409
 80104f4:	08012440 	.word	0x08012440
 80104f8:	080127cd 	.word	0x080127cd
 80104fc:	08012558 	.word	0x08012558
 8010500:	08012530 	.word	0x08012530
 8010504:	7ca00000 	.word	0x7ca00000
 8010508:	7ff00000 	.word	0x7ff00000
 801050c:	7fefffff 	.word	0x7fefffff
 8010510:	f012 0110 	ands.w	r1, r2, #16
 8010514:	bf18      	it	ne
 8010516:	216a      	movne	r1, #106	@ 0x6a
 8010518:	9106      	str	r1, [sp, #24]
 801051a:	ec4b ab17 	vmov	d7, sl, fp
 801051e:	49b0      	ldr	r1, [pc, #704]	@ (80107e0 <_strtod_l+0x850>)
 8010520:	2000      	movs	r0, #0
 8010522:	07d6      	lsls	r6, r2, #31
 8010524:	d504      	bpl.n	8010530 <_strtod_l+0x5a0>
 8010526:	ed91 6b00 	vldr	d6, [r1]
 801052a:	2001      	movs	r0, #1
 801052c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010530:	1052      	asrs	r2, r2, #1
 8010532:	f101 0108 	add.w	r1, r1, #8
 8010536:	d1f4      	bne.n	8010522 <_strtod_l+0x592>
 8010538:	b108      	cbz	r0, 801053e <_strtod_l+0x5ae>
 801053a:	ec5b ab17 	vmov	sl, fp, d7
 801053e:	9a06      	ldr	r2, [sp, #24]
 8010540:	b1b2      	cbz	r2, 8010570 <_strtod_l+0x5e0>
 8010542:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8010546:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801054a:	2a00      	cmp	r2, #0
 801054c:	4658      	mov	r0, fp
 801054e:	dd0f      	ble.n	8010570 <_strtod_l+0x5e0>
 8010550:	2a1f      	cmp	r2, #31
 8010552:	dd55      	ble.n	8010600 <_strtod_l+0x670>
 8010554:	2a34      	cmp	r2, #52	@ 0x34
 8010556:	bfde      	ittt	le
 8010558:	f04f 32ff 	movle.w	r2, #4294967295
 801055c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8010560:	408a      	lslle	r2, r1
 8010562:	f04f 0a00 	mov.w	sl, #0
 8010566:	bfcc      	ite	gt
 8010568:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801056c:	ea02 0b00 	andle.w	fp, r2, r0
 8010570:	ec4b ab17 	vmov	d7, sl, fp
 8010574:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057c:	d0a8      	beq.n	80104d0 <_strtod_l+0x540>
 801057e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010580:	9805      	ldr	r0, [sp, #20]
 8010582:	f8cd 9000 	str.w	r9, [sp]
 8010586:	462a      	mov	r2, r5
 8010588:	f7ff f8e0 	bl	800f74c <__s2b>
 801058c:	9007      	str	r0, [sp, #28]
 801058e:	2800      	cmp	r0, #0
 8010590:	f43f af0a 	beq.w	80103a8 <_strtod_l+0x418>
 8010594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010596:	1b3f      	subs	r7, r7, r4
 8010598:	2b00      	cmp	r3, #0
 801059a:	bfb4      	ite	lt
 801059c:	463b      	movlt	r3, r7
 801059e:	2300      	movge	r3, #0
 80105a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80105a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105a4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80107d0 <_strtod_l+0x840>
 80105a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80105ac:	2400      	movs	r4, #0
 80105ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80105b0:	4625      	mov	r5, r4
 80105b2:	9b07      	ldr	r3, [sp, #28]
 80105b4:	9805      	ldr	r0, [sp, #20]
 80105b6:	6859      	ldr	r1, [r3, #4]
 80105b8:	f7ff f820 	bl	800f5fc <_Balloc>
 80105bc:	4606      	mov	r6, r0
 80105be:	2800      	cmp	r0, #0
 80105c0:	f43f aef6 	beq.w	80103b0 <_strtod_l+0x420>
 80105c4:	9b07      	ldr	r3, [sp, #28]
 80105c6:	691a      	ldr	r2, [r3, #16]
 80105c8:	ec4b ab19 	vmov	d9, sl, fp
 80105cc:	3202      	adds	r2, #2
 80105ce:	f103 010c 	add.w	r1, r3, #12
 80105d2:	0092      	lsls	r2, r2, #2
 80105d4:	300c      	adds	r0, #12
 80105d6:	f7fe f91c 	bl	800e812 <memcpy>
 80105da:	eeb0 0b49 	vmov.f64	d0, d9
 80105de:	9805      	ldr	r0, [sp, #20]
 80105e0:	aa14      	add	r2, sp, #80	@ 0x50
 80105e2:	a913      	add	r1, sp, #76	@ 0x4c
 80105e4:	f7ff fbee 	bl	800fdc4 <__d2b>
 80105e8:	9012      	str	r0, [sp, #72]	@ 0x48
 80105ea:	2800      	cmp	r0, #0
 80105ec:	f43f aee0 	beq.w	80103b0 <_strtod_l+0x420>
 80105f0:	9805      	ldr	r0, [sp, #20]
 80105f2:	2101      	movs	r1, #1
 80105f4:	f7ff f940 	bl	800f878 <__i2b>
 80105f8:	4605      	mov	r5, r0
 80105fa:	b940      	cbnz	r0, 801060e <_strtod_l+0x67e>
 80105fc:	2500      	movs	r5, #0
 80105fe:	e6d7      	b.n	80103b0 <_strtod_l+0x420>
 8010600:	f04f 31ff 	mov.w	r1, #4294967295
 8010604:	fa01 f202 	lsl.w	r2, r1, r2
 8010608:	ea02 0a0a 	and.w	sl, r2, sl
 801060c:	e7b0      	b.n	8010570 <_strtod_l+0x5e0>
 801060e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010610:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010612:	2f00      	cmp	r7, #0
 8010614:	bfab      	itete	ge
 8010616:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8010618:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801061a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801061e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8010622:	bfac      	ite	ge
 8010624:	eb07 0903 	addge.w	r9, r7, r3
 8010628:	eba3 0807 	sublt.w	r8, r3, r7
 801062c:	9b06      	ldr	r3, [sp, #24]
 801062e:	1aff      	subs	r7, r7, r3
 8010630:	4417      	add	r7, r2
 8010632:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8010636:	4a6b      	ldr	r2, [pc, #428]	@ (80107e4 <_strtod_l+0x854>)
 8010638:	3f01      	subs	r7, #1
 801063a:	4297      	cmp	r7, r2
 801063c:	da51      	bge.n	80106e2 <_strtod_l+0x752>
 801063e:	1bd1      	subs	r1, r2, r7
 8010640:	291f      	cmp	r1, #31
 8010642:	eba3 0301 	sub.w	r3, r3, r1
 8010646:	f04f 0201 	mov.w	r2, #1
 801064a:	dc3e      	bgt.n	80106ca <_strtod_l+0x73a>
 801064c:	408a      	lsls	r2, r1
 801064e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010650:	2200      	movs	r2, #0
 8010652:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010654:	eb09 0703 	add.w	r7, r9, r3
 8010658:	4498      	add	r8, r3
 801065a:	9b06      	ldr	r3, [sp, #24]
 801065c:	45b9      	cmp	r9, r7
 801065e:	4498      	add	r8, r3
 8010660:	464b      	mov	r3, r9
 8010662:	bfa8      	it	ge
 8010664:	463b      	movge	r3, r7
 8010666:	4543      	cmp	r3, r8
 8010668:	bfa8      	it	ge
 801066a:	4643      	movge	r3, r8
 801066c:	2b00      	cmp	r3, #0
 801066e:	bfc2      	ittt	gt
 8010670:	1aff      	subgt	r7, r7, r3
 8010672:	eba8 0803 	subgt.w	r8, r8, r3
 8010676:	eba9 0903 	subgt.w	r9, r9, r3
 801067a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801067c:	2b00      	cmp	r3, #0
 801067e:	dd16      	ble.n	80106ae <_strtod_l+0x71e>
 8010680:	4629      	mov	r1, r5
 8010682:	9805      	ldr	r0, [sp, #20]
 8010684:	461a      	mov	r2, r3
 8010686:	f7ff f9b7 	bl	800f9f8 <__pow5mult>
 801068a:	4605      	mov	r5, r0
 801068c:	2800      	cmp	r0, #0
 801068e:	d0b5      	beq.n	80105fc <_strtod_l+0x66c>
 8010690:	4601      	mov	r1, r0
 8010692:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010694:	9805      	ldr	r0, [sp, #20]
 8010696:	f7ff f905 	bl	800f8a4 <__multiply>
 801069a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801069c:	2800      	cmp	r0, #0
 801069e:	f43f ae87 	beq.w	80103b0 <_strtod_l+0x420>
 80106a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80106a4:	9805      	ldr	r0, [sp, #20]
 80106a6:	f7fe ffe9 	bl	800f67c <_Bfree>
 80106aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106ac:	9312      	str	r3, [sp, #72]	@ 0x48
 80106ae:	2f00      	cmp	r7, #0
 80106b0:	dc1b      	bgt.n	80106ea <_strtod_l+0x75a>
 80106b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	dd21      	ble.n	80106fc <_strtod_l+0x76c>
 80106b8:	4631      	mov	r1, r6
 80106ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80106bc:	9805      	ldr	r0, [sp, #20]
 80106be:	f7ff f99b 	bl	800f9f8 <__pow5mult>
 80106c2:	4606      	mov	r6, r0
 80106c4:	b9d0      	cbnz	r0, 80106fc <_strtod_l+0x76c>
 80106c6:	2600      	movs	r6, #0
 80106c8:	e672      	b.n	80103b0 <_strtod_l+0x420>
 80106ca:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80106ce:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80106d2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80106d6:	37e2      	adds	r7, #226	@ 0xe2
 80106d8:	fa02 f107 	lsl.w	r1, r2, r7
 80106dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80106de:	920c      	str	r2, [sp, #48]	@ 0x30
 80106e0:	e7b8      	b.n	8010654 <_strtod_l+0x6c4>
 80106e2:	2200      	movs	r2, #0
 80106e4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80106e6:	2201      	movs	r2, #1
 80106e8:	e7f9      	b.n	80106de <_strtod_l+0x74e>
 80106ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80106ec:	9805      	ldr	r0, [sp, #20]
 80106ee:	463a      	mov	r2, r7
 80106f0:	f7ff f9dc 	bl	800faac <__lshift>
 80106f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80106f6:	2800      	cmp	r0, #0
 80106f8:	d1db      	bne.n	80106b2 <_strtod_l+0x722>
 80106fa:	e659      	b.n	80103b0 <_strtod_l+0x420>
 80106fc:	f1b8 0f00 	cmp.w	r8, #0
 8010700:	dd07      	ble.n	8010712 <_strtod_l+0x782>
 8010702:	4631      	mov	r1, r6
 8010704:	9805      	ldr	r0, [sp, #20]
 8010706:	4642      	mov	r2, r8
 8010708:	f7ff f9d0 	bl	800faac <__lshift>
 801070c:	4606      	mov	r6, r0
 801070e:	2800      	cmp	r0, #0
 8010710:	d0d9      	beq.n	80106c6 <_strtod_l+0x736>
 8010712:	f1b9 0f00 	cmp.w	r9, #0
 8010716:	dd08      	ble.n	801072a <_strtod_l+0x79a>
 8010718:	4629      	mov	r1, r5
 801071a:	9805      	ldr	r0, [sp, #20]
 801071c:	464a      	mov	r2, r9
 801071e:	f7ff f9c5 	bl	800faac <__lshift>
 8010722:	4605      	mov	r5, r0
 8010724:	2800      	cmp	r0, #0
 8010726:	f43f ae43 	beq.w	80103b0 <_strtod_l+0x420>
 801072a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801072c:	9805      	ldr	r0, [sp, #20]
 801072e:	4632      	mov	r2, r6
 8010730:	f7ff fa44 	bl	800fbbc <__mdiff>
 8010734:	4604      	mov	r4, r0
 8010736:	2800      	cmp	r0, #0
 8010738:	f43f ae3a 	beq.w	80103b0 <_strtod_l+0x420>
 801073c:	2300      	movs	r3, #0
 801073e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010742:	60c3      	str	r3, [r0, #12]
 8010744:	4629      	mov	r1, r5
 8010746:	f7ff fa1d 	bl	800fb84 <__mcmp>
 801074a:	2800      	cmp	r0, #0
 801074c:	da4e      	bge.n	80107ec <_strtod_l+0x85c>
 801074e:	ea58 080a 	orrs.w	r8, r8, sl
 8010752:	d174      	bne.n	801083e <_strtod_l+0x8ae>
 8010754:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010758:	2b00      	cmp	r3, #0
 801075a:	d170      	bne.n	801083e <_strtod_l+0x8ae>
 801075c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010760:	0d1b      	lsrs	r3, r3, #20
 8010762:	051b      	lsls	r3, r3, #20
 8010764:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010768:	d969      	bls.n	801083e <_strtod_l+0x8ae>
 801076a:	6963      	ldr	r3, [r4, #20]
 801076c:	b913      	cbnz	r3, 8010774 <_strtod_l+0x7e4>
 801076e:	6923      	ldr	r3, [r4, #16]
 8010770:	2b01      	cmp	r3, #1
 8010772:	dd64      	ble.n	801083e <_strtod_l+0x8ae>
 8010774:	4621      	mov	r1, r4
 8010776:	2201      	movs	r2, #1
 8010778:	9805      	ldr	r0, [sp, #20]
 801077a:	f7ff f997 	bl	800faac <__lshift>
 801077e:	4629      	mov	r1, r5
 8010780:	4604      	mov	r4, r0
 8010782:	f7ff f9ff 	bl	800fb84 <__mcmp>
 8010786:	2800      	cmp	r0, #0
 8010788:	dd59      	ble.n	801083e <_strtod_l+0x8ae>
 801078a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801078e:	9a06      	ldr	r2, [sp, #24]
 8010790:	0d1b      	lsrs	r3, r3, #20
 8010792:	051b      	lsls	r3, r3, #20
 8010794:	2a00      	cmp	r2, #0
 8010796:	d070      	beq.n	801087a <_strtod_l+0x8ea>
 8010798:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801079c:	d86d      	bhi.n	801087a <_strtod_l+0x8ea>
 801079e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80107a2:	f67f ae99 	bls.w	80104d8 <_strtod_l+0x548>
 80107a6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80107d8 <_strtod_l+0x848>
 80107aa:	ec4b ab16 	vmov	d6, sl, fp
 80107ae:	4b0e      	ldr	r3, [pc, #56]	@ (80107e8 <_strtod_l+0x858>)
 80107b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80107b4:	ee17 2a90 	vmov	r2, s15
 80107b8:	4013      	ands	r3, r2
 80107ba:	ec5b ab17 	vmov	sl, fp, d7
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f47f ae01 	bne.w	80103c6 <_strtod_l+0x436>
 80107c4:	9a05      	ldr	r2, [sp, #20]
 80107c6:	2322      	movs	r3, #34	@ 0x22
 80107c8:	6013      	str	r3, [r2, #0]
 80107ca:	e5fc      	b.n	80103c6 <_strtod_l+0x436>
 80107cc:	f3af 8000 	nop.w
 80107d0:	ffc00000 	.word	0xffc00000
 80107d4:	41dfffff 	.word	0x41dfffff
 80107d8:	00000000 	.word	0x00000000
 80107dc:	39500000 	.word	0x39500000
 80107e0:	08012650 	.word	0x08012650
 80107e4:	fffffc02 	.word	0xfffffc02
 80107e8:	7ff00000 	.word	0x7ff00000
 80107ec:	46d9      	mov	r9, fp
 80107ee:	d15d      	bne.n	80108ac <_strtod_l+0x91c>
 80107f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107f4:	f1b8 0f00 	cmp.w	r8, #0
 80107f8:	d02a      	beq.n	8010850 <_strtod_l+0x8c0>
 80107fa:	4aab      	ldr	r2, [pc, #684]	@ (8010aa8 <_strtod_l+0xb18>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d12a      	bne.n	8010856 <_strtod_l+0x8c6>
 8010800:	9b06      	ldr	r3, [sp, #24]
 8010802:	4652      	mov	r2, sl
 8010804:	b1fb      	cbz	r3, 8010846 <_strtod_l+0x8b6>
 8010806:	4ba9      	ldr	r3, [pc, #676]	@ (8010aac <_strtod_l+0xb1c>)
 8010808:	ea0b 0303 	and.w	r3, fp, r3
 801080c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010810:	f04f 31ff 	mov.w	r1, #4294967295
 8010814:	d81a      	bhi.n	801084c <_strtod_l+0x8bc>
 8010816:	0d1b      	lsrs	r3, r3, #20
 8010818:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801081c:	fa01 f303 	lsl.w	r3, r1, r3
 8010820:	429a      	cmp	r2, r3
 8010822:	d118      	bne.n	8010856 <_strtod_l+0x8c6>
 8010824:	4ba2      	ldr	r3, [pc, #648]	@ (8010ab0 <_strtod_l+0xb20>)
 8010826:	4599      	cmp	r9, r3
 8010828:	d102      	bne.n	8010830 <_strtod_l+0x8a0>
 801082a:	3201      	adds	r2, #1
 801082c:	f43f adc0 	beq.w	80103b0 <_strtod_l+0x420>
 8010830:	4b9e      	ldr	r3, [pc, #632]	@ (8010aac <_strtod_l+0xb1c>)
 8010832:	ea09 0303 	and.w	r3, r9, r3
 8010836:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801083a:	f04f 0a00 	mov.w	sl, #0
 801083e:	9b06      	ldr	r3, [sp, #24]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1b0      	bne.n	80107a6 <_strtod_l+0x816>
 8010844:	e5bf      	b.n	80103c6 <_strtod_l+0x436>
 8010846:	f04f 33ff 	mov.w	r3, #4294967295
 801084a:	e7e9      	b.n	8010820 <_strtod_l+0x890>
 801084c:	460b      	mov	r3, r1
 801084e:	e7e7      	b.n	8010820 <_strtod_l+0x890>
 8010850:	ea53 030a 	orrs.w	r3, r3, sl
 8010854:	d099      	beq.n	801078a <_strtod_l+0x7fa>
 8010856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010858:	b1c3      	cbz	r3, 801088c <_strtod_l+0x8fc>
 801085a:	ea13 0f09 	tst.w	r3, r9
 801085e:	d0ee      	beq.n	801083e <_strtod_l+0x8ae>
 8010860:	9a06      	ldr	r2, [sp, #24]
 8010862:	4650      	mov	r0, sl
 8010864:	4659      	mov	r1, fp
 8010866:	f1b8 0f00 	cmp.w	r8, #0
 801086a:	d013      	beq.n	8010894 <_strtod_l+0x904>
 801086c:	f7ff fb75 	bl	800ff5a <sulp>
 8010870:	ee39 7b00 	vadd.f64	d7, d9, d0
 8010874:	ec5b ab17 	vmov	sl, fp, d7
 8010878:	e7e1      	b.n	801083e <_strtod_l+0x8ae>
 801087a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801087e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010882:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010886:	f04f 3aff 	mov.w	sl, #4294967295
 801088a:	e7d8      	b.n	801083e <_strtod_l+0x8ae>
 801088c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801088e:	ea13 0f0a 	tst.w	r3, sl
 8010892:	e7e4      	b.n	801085e <_strtod_l+0x8ce>
 8010894:	f7ff fb61 	bl	800ff5a <sulp>
 8010898:	ee39 0b40 	vsub.f64	d0, d9, d0
 801089c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80108a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a4:	ec5b ab10 	vmov	sl, fp, d0
 80108a8:	d1c9      	bne.n	801083e <_strtod_l+0x8ae>
 80108aa:	e615      	b.n	80104d8 <_strtod_l+0x548>
 80108ac:	4629      	mov	r1, r5
 80108ae:	4620      	mov	r0, r4
 80108b0:	f7ff fae0 	bl	800fe74 <__ratio>
 80108b4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80108b8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80108bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c0:	d85d      	bhi.n	801097e <_strtod_l+0x9ee>
 80108c2:	f1b8 0f00 	cmp.w	r8, #0
 80108c6:	d164      	bne.n	8010992 <_strtod_l+0xa02>
 80108c8:	f1ba 0f00 	cmp.w	sl, #0
 80108cc:	d14b      	bne.n	8010966 <_strtod_l+0x9d6>
 80108ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80108d2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d160      	bne.n	801099c <_strtod_l+0xa0c>
 80108da:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80108de:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80108e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e6:	d401      	bmi.n	80108ec <_strtod_l+0x95c>
 80108e8:	ee20 8b08 	vmul.f64	d8, d0, d8
 80108ec:	eeb1 ab48 	vneg.f64	d10, d8
 80108f0:	486e      	ldr	r0, [pc, #440]	@ (8010aac <_strtod_l+0xb1c>)
 80108f2:	4970      	ldr	r1, [pc, #448]	@ (8010ab4 <_strtod_l+0xb24>)
 80108f4:	ea09 0700 	and.w	r7, r9, r0
 80108f8:	428f      	cmp	r7, r1
 80108fa:	ec53 2b1a 	vmov	r2, r3, d10
 80108fe:	d17d      	bne.n	80109fc <_strtod_l+0xa6c>
 8010900:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8010904:	ec4b ab1c 	vmov	d12, sl, fp
 8010908:	eeb0 0b4c 	vmov.f64	d0, d12
 801090c:	f7ff f9ea 	bl	800fce4 <__ulp>
 8010910:	4866      	ldr	r0, [pc, #408]	@ (8010aac <_strtod_l+0xb1c>)
 8010912:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8010916:	ee1c 3a90 	vmov	r3, s25
 801091a:	4a67      	ldr	r2, [pc, #412]	@ (8010ab8 <_strtod_l+0xb28>)
 801091c:	ea03 0100 	and.w	r1, r3, r0
 8010920:	4291      	cmp	r1, r2
 8010922:	ec5b ab1c 	vmov	sl, fp, d12
 8010926:	d93c      	bls.n	80109a2 <_strtod_l+0xa12>
 8010928:	ee19 2a90 	vmov	r2, s19
 801092c:	4b60      	ldr	r3, [pc, #384]	@ (8010ab0 <_strtod_l+0xb20>)
 801092e:	429a      	cmp	r2, r3
 8010930:	d104      	bne.n	801093c <_strtod_l+0x9ac>
 8010932:	ee19 3a10 	vmov	r3, s18
 8010936:	3301      	adds	r3, #1
 8010938:	f43f ad3a 	beq.w	80103b0 <_strtod_l+0x420>
 801093c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8010ab0 <_strtod_l+0xb20>
 8010940:	f04f 3aff 	mov.w	sl, #4294967295
 8010944:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010946:	9805      	ldr	r0, [sp, #20]
 8010948:	f7fe fe98 	bl	800f67c <_Bfree>
 801094c:	9805      	ldr	r0, [sp, #20]
 801094e:	4631      	mov	r1, r6
 8010950:	f7fe fe94 	bl	800f67c <_Bfree>
 8010954:	9805      	ldr	r0, [sp, #20]
 8010956:	4629      	mov	r1, r5
 8010958:	f7fe fe90 	bl	800f67c <_Bfree>
 801095c:	9805      	ldr	r0, [sp, #20]
 801095e:	4621      	mov	r1, r4
 8010960:	f7fe fe8c 	bl	800f67c <_Bfree>
 8010964:	e625      	b.n	80105b2 <_strtod_l+0x622>
 8010966:	f1ba 0f01 	cmp.w	sl, #1
 801096a:	d103      	bne.n	8010974 <_strtod_l+0x9e4>
 801096c:	f1bb 0f00 	cmp.w	fp, #0
 8010970:	f43f adb2 	beq.w	80104d8 <_strtod_l+0x548>
 8010974:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010978:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801097c:	e7b8      	b.n	80108f0 <_strtod_l+0x960>
 801097e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010982:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010986:	f1b8 0f00 	cmp.w	r8, #0
 801098a:	d0af      	beq.n	80108ec <_strtod_l+0x95c>
 801098c:	eeb0 ab48 	vmov.f64	d10, d8
 8010990:	e7ae      	b.n	80108f0 <_strtod_l+0x960>
 8010992:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8010996:	eeb0 8b4a 	vmov.f64	d8, d10
 801099a:	e7a9      	b.n	80108f0 <_strtod_l+0x960>
 801099c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80109a0:	e7a6      	b.n	80108f0 <_strtod_l+0x960>
 80109a2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80109a6:	9b06      	ldr	r3, [sp, #24]
 80109a8:	46d9      	mov	r9, fp
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d1ca      	bne.n	8010944 <_strtod_l+0x9b4>
 80109ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80109b2:	0d1b      	lsrs	r3, r3, #20
 80109b4:	051b      	lsls	r3, r3, #20
 80109b6:	429f      	cmp	r7, r3
 80109b8:	d1c4      	bne.n	8010944 <_strtod_l+0x9b4>
 80109ba:	ec51 0b18 	vmov	r0, r1, d8
 80109be:	f7ef fed3 	bl	8000768 <__aeabi_d2lz>
 80109c2:	f7ef fe8b 	bl	80006dc <__aeabi_l2d>
 80109c6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80109ca:	ec41 0b17 	vmov	d7, r0, r1
 80109ce:	ea49 090a 	orr.w	r9, r9, sl
 80109d2:	ea59 0908 	orrs.w	r9, r9, r8
 80109d6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80109da:	d03c      	beq.n	8010a56 <_strtod_l+0xac6>
 80109dc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010a90 <_strtod_l+0xb00>
 80109e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80109e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e8:	f53f aced 	bmi.w	80103c6 <_strtod_l+0x436>
 80109ec:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010a98 <_strtod_l+0xb08>
 80109f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80109f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f8:	dda4      	ble.n	8010944 <_strtod_l+0x9b4>
 80109fa:	e4e4      	b.n	80103c6 <_strtod_l+0x436>
 80109fc:	9906      	ldr	r1, [sp, #24]
 80109fe:	b1e1      	cbz	r1, 8010a3a <_strtod_l+0xaaa>
 8010a00:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8010a04:	d819      	bhi.n	8010a3a <_strtod_l+0xaaa>
 8010a06:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8010a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a0e:	d811      	bhi.n	8010a34 <_strtod_l+0xaa4>
 8010a10:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8010a14:	ee18 3a10 	vmov	r3, s16
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	bf38      	it	cc
 8010a1c:	2301      	movcc	r3, #1
 8010a1e:	ee08 3a10 	vmov	s16, r3
 8010a22:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8010a26:	f1b8 0f00 	cmp.w	r8, #0
 8010a2a:	d111      	bne.n	8010a50 <_strtod_l+0xac0>
 8010a2c:	eeb1 7b48 	vneg.f64	d7, d8
 8010a30:	ec53 2b17 	vmov	r2, r3, d7
 8010a34:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8010a38:	1bcb      	subs	r3, r1, r7
 8010a3a:	eeb0 0b49 	vmov.f64	d0, d9
 8010a3e:	ec43 2b1a 	vmov	d10, r2, r3
 8010a42:	f7ff f94f 	bl	800fce4 <__ulp>
 8010a46:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8010a4a:	ec5b ab19 	vmov	sl, fp, d9
 8010a4e:	e7aa      	b.n	80109a6 <_strtod_l+0xa16>
 8010a50:	eeb0 7b48 	vmov.f64	d7, d8
 8010a54:	e7ec      	b.n	8010a30 <_strtod_l+0xaa0>
 8010a56:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8010aa0 <_strtod_l+0xb10>
 8010a5a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a62:	f57f af6f 	bpl.w	8010944 <_strtod_l+0x9b4>
 8010a66:	e4ae      	b.n	80103c6 <_strtod_l+0x436>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	9308      	str	r3, [sp, #32]
 8010a6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010a70:	6013      	str	r3, [r2, #0]
 8010a72:	f7ff bacc 	b.w	801000e <_strtod_l+0x7e>
 8010a76:	2a65      	cmp	r2, #101	@ 0x65
 8010a78:	f43f abbc 	beq.w	80101f4 <_strtod_l+0x264>
 8010a7c:	2a45      	cmp	r2, #69	@ 0x45
 8010a7e:	f43f abb9 	beq.w	80101f4 <_strtod_l+0x264>
 8010a82:	2301      	movs	r3, #1
 8010a84:	9306      	str	r3, [sp, #24]
 8010a86:	f7ff bbf0 	b.w	801026a <_strtod_l+0x2da>
 8010a8a:	bf00      	nop
 8010a8c:	f3af 8000 	nop.w
 8010a90:	94a03595 	.word	0x94a03595
 8010a94:	3fdfffff 	.word	0x3fdfffff
 8010a98:	35afe535 	.word	0x35afe535
 8010a9c:	3fe00000 	.word	0x3fe00000
 8010aa0:	94a03595 	.word	0x94a03595
 8010aa4:	3fcfffff 	.word	0x3fcfffff
 8010aa8:	000fffff 	.word	0x000fffff
 8010aac:	7ff00000 	.word	0x7ff00000
 8010ab0:	7fefffff 	.word	0x7fefffff
 8010ab4:	7fe00000 	.word	0x7fe00000
 8010ab8:	7c9fffff 	.word	0x7c9fffff

08010abc <_strtod_r>:
 8010abc:	4b01      	ldr	r3, [pc, #4]	@ (8010ac4 <_strtod_r+0x8>)
 8010abe:	f7ff ba67 	b.w	800ff90 <_strtod_l>
 8010ac2:	bf00      	nop
 8010ac4:	24000074 	.word	0x24000074

08010ac8 <_strtol_l.constprop.0>:
 8010ac8:	2b24      	cmp	r3, #36	@ 0x24
 8010aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ace:	4686      	mov	lr, r0
 8010ad0:	4690      	mov	r8, r2
 8010ad2:	d801      	bhi.n	8010ad8 <_strtol_l.constprop.0+0x10>
 8010ad4:	2b01      	cmp	r3, #1
 8010ad6:	d106      	bne.n	8010ae6 <_strtol_l.constprop.0+0x1e>
 8010ad8:	f7fd fe6e 	bl	800e7b8 <__errno>
 8010adc:	2316      	movs	r3, #22
 8010ade:	6003      	str	r3, [r0, #0]
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ae6:	4834      	ldr	r0, [pc, #208]	@ (8010bb8 <_strtol_l.constprop.0+0xf0>)
 8010ae8:	460d      	mov	r5, r1
 8010aea:	462a      	mov	r2, r5
 8010aec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010af0:	5d06      	ldrb	r6, [r0, r4]
 8010af2:	f016 0608 	ands.w	r6, r6, #8
 8010af6:	d1f8      	bne.n	8010aea <_strtol_l.constprop.0+0x22>
 8010af8:	2c2d      	cmp	r4, #45	@ 0x2d
 8010afa:	d12d      	bne.n	8010b58 <_strtol_l.constprop.0+0x90>
 8010afc:	782c      	ldrb	r4, [r5, #0]
 8010afe:	2601      	movs	r6, #1
 8010b00:	1c95      	adds	r5, r2, #2
 8010b02:	f033 0210 	bics.w	r2, r3, #16
 8010b06:	d109      	bne.n	8010b1c <_strtol_l.constprop.0+0x54>
 8010b08:	2c30      	cmp	r4, #48	@ 0x30
 8010b0a:	d12a      	bne.n	8010b62 <_strtol_l.constprop.0+0x9a>
 8010b0c:	782a      	ldrb	r2, [r5, #0]
 8010b0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010b12:	2a58      	cmp	r2, #88	@ 0x58
 8010b14:	d125      	bne.n	8010b62 <_strtol_l.constprop.0+0x9a>
 8010b16:	786c      	ldrb	r4, [r5, #1]
 8010b18:	2310      	movs	r3, #16
 8010b1a:	3502      	adds	r5, #2
 8010b1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010b20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010b24:	2200      	movs	r2, #0
 8010b26:	fbbc f9f3 	udiv	r9, ip, r3
 8010b2a:	4610      	mov	r0, r2
 8010b2c:	fb03 ca19 	mls	sl, r3, r9, ip
 8010b30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010b34:	2f09      	cmp	r7, #9
 8010b36:	d81b      	bhi.n	8010b70 <_strtol_l.constprop.0+0xa8>
 8010b38:	463c      	mov	r4, r7
 8010b3a:	42a3      	cmp	r3, r4
 8010b3c:	dd27      	ble.n	8010b8e <_strtol_l.constprop.0+0xc6>
 8010b3e:	1c57      	adds	r7, r2, #1
 8010b40:	d007      	beq.n	8010b52 <_strtol_l.constprop.0+0x8a>
 8010b42:	4581      	cmp	r9, r0
 8010b44:	d320      	bcc.n	8010b88 <_strtol_l.constprop.0+0xc0>
 8010b46:	d101      	bne.n	8010b4c <_strtol_l.constprop.0+0x84>
 8010b48:	45a2      	cmp	sl, r4
 8010b4a:	db1d      	blt.n	8010b88 <_strtol_l.constprop.0+0xc0>
 8010b4c:	fb00 4003 	mla	r0, r0, r3, r4
 8010b50:	2201      	movs	r2, #1
 8010b52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b56:	e7eb      	b.n	8010b30 <_strtol_l.constprop.0+0x68>
 8010b58:	2c2b      	cmp	r4, #43	@ 0x2b
 8010b5a:	bf04      	itt	eq
 8010b5c:	782c      	ldrbeq	r4, [r5, #0]
 8010b5e:	1c95      	addeq	r5, r2, #2
 8010b60:	e7cf      	b.n	8010b02 <_strtol_l.constprop.0+0x3a>
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d1da      	bne.n	8010b1c <_strtol_l.constprop.0+0x54>
 8010b66:	2c30      	cmp	r4, #48	@ 0x30
 8010b68:	bf0c      	ite	eq
 8010b6a:	2308      	moveq	r3, #8
 8010b6c:	230a      	movne	r3, #10
 8010b6e:	e7d5      	b.n	8010b1c <_strtol_l.constprop.0+0x54>
 8010b70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010b74:	2f19      	cmp	r7, #25
 8010b76:	d801      	bhi.n	8010b7c <_strtol_l.constprop.0+0xb4>
 8010b78:	3c37      	subs	r4, #55	@ 0x37
 8010b7a:	e7de      	b.n	8010b3a <_strtol_l.constprop.0+0x72>
 8010b7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010b80:	2f19      	cmp	r7, #25
 8010b82:	d804      	bhi.n	8010b8e <_strtol_l.constprop.0+0xc6>
 8010b84:	3c57      	subs	r4, #87	@ 0x57
 8010b86:	e7d8      	b.n	8010b3a <_strtol_l.constprop.0+0x72>
 8010b88:	f04f 32ff 	mov.w	r2, #4294967295
 8010b8c:	e7e1      	b.n	8010b52 <_strtol_l.constprop.0+0x8a>
 8010b8e:	1c53      	adds	r3, r2, #1
 8010b90:	d108      	bne.n	8010ba4 <_strtol_l.constprop.0+0xdc>
 8010b92:	2322      	movs	r3, #34	@ 0x22
 8010b94:	f8ce 3000 	str.w	r3, [lr]
 8010b98:	4660      	mov	r0, ip
 8010b9a:	f1b8 0f00 	cmp.w	r8, #0
 8010b9e:	d0a0      	beq.n	8010ae2 <_strtol_l.constprop.0+0x1a>
 8010ba0:	1e69      	subs	r1, r5, #1
 8010ba2:	e006      	b.n	8010bb2 <_strtol_l.constprop.0+0xea>
 8010ba4:	b106      	cbz	r6, 8010ba8 <_strtol_l.constprop.0+0xe0>
 8010ba6:	4240      	negs	r0, r0
 8010ba8:	f1b8 0f00 	cmp.w	r8, #0
 8010bac:	d099      	beq.n	8010ae2 <_strtol_l.constprop.0+0x1a>
 8010bae:	2a00      	cmp	r2, #0
 8010bb0:	d1f6      	bne.n	8010ba0 <_strtol_l.constprop.0+0xd8>
 8010bb2:	f8c8 1000 	str.w	r1, [r8]
 8010bb6:	e794      	b.n	8010ae2 <_strtol_l.constprop.0+0x1a>
 8010bb8:	08012679 	.word	0x08012679

08010bbc <_strtol_r>:
 8010bbc:	f7ff bf84 	b.w	8010ac8 <_strtol_l.constprop.0>

08010bc0 <__ssputs_r>:
 8010bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bc4:	688e      	ldr	r6, [r1, #8]
 8010bc6:	461f      	mov	r7, r3
 8010bc8:	42be      	cmp	r6, r7
 8010bca:	680b      	ldr	r3, [r1, #0]
 8010bcc:	4682      	mov	sl, r0
 8010bce:	460c      	mov	r4, r1
 8010bd0:	4690      	mov	r8, r2
 8010bd2:	d82d      	bhi.n	8010c30 <__ssputs_r+0x70>
 8010bd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010bd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010bdc:	d026      	beq.n	8010c2c <__ssputs_r+0x6c>
 8010bde:	6965      	ldr	r5, [r4, #20]
 8010be0:	6909      	ldr	r1, [r1, #16]
 8010be2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010be6:	eba3 0901 	sub.w	r9, r3, r1
 8010bea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bee:	1c7b      	adds	r3, r7, #1
 8010bf0:	444b      	add	r3, r9
 8010bf2:	106d      	asrs	r5, r5, #1
 8010bf4:	429d      	cmp	r5, r3
 8010bf6:	bf38      	it	cc
 8010bf8:	461d      	movcc	r5, r3
 8010bfa:	0553      	lsls	r3, r2, #21
 8010bfc:	d527      	bpl.n	8010c4e <__ssputs_r+0x8e>
 8010bfe:	4629      	mov	r1, r5
 8010c00:	f7fe fc70 	bl	800f4e4 <_malloc_r>
 8010c04:	4606      	mov	r6, r0
 8010c06:	b360      	cbz	r0, 8010c62 <__ssputs_r+0xa2>
 8010c08:	6921      	ldr	r1, [r4, #16]
 8010c0a:	464a      	mov	r2, r9
 8010c0c:	f7fd fe01 	bl	800e812 <memcpy>
 8010c10:	89a3      	ldrh	r3, [r4, #12]
 8010c12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c1a:	81a3      	strh	r3, [r4, #12]
 8010c1c:	6126      	str	r6, [r4, #16]
 8010c1e:	6165      	str	r5, [r4, #20]
 8010c20:	444e      	add	r6, r9
 8010c22:	eba5 0509 	sub.w	r5, r5, r9
 8010c26:	6026      	str	r6, [r4, #0]
 8010c28:	60a5      	str	r5, [r4, #8]
 8010c2a:	463e      	mov	r6, r7
 8010c2c:	42be      	cmp	r6, r7
 8010c2e:	d900      	bls.n	8010c32 <__ssputs_r+0x72>
 8010c30:	463e      	mov	r6, r7
 8010c32:	6820      	ldr	r0, [r4, #0]
 8010c34:	4632      	mov	r2, r6
 8010c36:	4641      	mov	r1, r8
 8010c38:	f000 fb6a 	bl	8011310 <memmove>
 8010c3c:	68a3      	ldr	r3, [r4, #8]
 8010c3e:	1b9b      	subs	r3, r3, r6
 8010c40:	60a3      	str	r3, [r4, #8]
 8010c42:	6823      	ldr	r3, [r4, #0]
 8010c44:	4433      	add	r3, r6
 8010c46:	6023      	str	r3, [r4, #0]
 8010c48:	2000      	movs	r0, #0
 8010c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c4e:	462a      	mov	r2, r5
 8010c50:	f000 ff43 	bl	8011ada <_realloc_r>
 8010c54:	4606      	mov	r6, r0
 8010c56:	2800      	cmp	r0, #0
 8010c58:	d1e0      	bne.n	8010c1c <__ssputs_r+0x5c>
 8010c5a:	6921      	ldr	r1, [r4, #16]
 8010c5c:	4650      	mov	r0, sl
 8010c5e:	f7fe fbcd 	bl	800f3fc <_free_r>
 8010c62:	230c      	movs	r3, #12
 8010c64:	f8ca 3000 	str.w	r3, [sl]
 8010c68:	89a3      	ldrh	r3, [r4, #12]
 8010c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c6e:	81a3      	strh	r3, [r4, #12]
 8010c70:	f04f 30ff 	mov.w	r0, #4294967295
 8010c74:	e7e9      	b.n	8010c4a <__ssputs_r+0x8a>
	...

08010c78 <_svfiprintf_r>:
 8010c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c7c:	4698      	mov	r8, r3
 8010c7e:	898b      	ldrh	r3, [r1, #12]
 8010c80:	061b      	lsls	r3, r3, #24
 8010c82:	b09d      	sub	sp, #116	@ 0x74
 8010c84:	4607      	mov	r7, r0
 8010c86:	460d      	mov	r5, r1
 8010c88:	4614      	mov	r4, r2
 8010c8a:	d510      	bpl.n	8010cae <_svfiprintf_r+0x36>
 8010c8c:	690b      	ldr	r3, [r1, #16]
 8010c8e:	b973      	cbnz	r3, 8010cae <_svfiprintf_r+0x36>
 8010c90:	2140      	movs	r1, #64	@ 0x40
 8010c92:	f7fe fc27 	bl	800f4e4 <_malloc_r>
 8010c96:	6028      	str	r0, [r5, #0]
 8010c98:	6128      	str	r0, [r5, #16]
 8010c9a:	b930      	cbnz	r0, 8010caa <_svfiprintf_r+0x32>
 8010c9c:	230c      	movs	r3, #12
 8010c9e:	603b      	str	r3, [r7, #0]
 8010ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca4:	b01d      	add	sp, #116	@ 0x74
 8010ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010caa:	2340      	movs	r3, #64	@ 0x40
 8010cac:	616b      	str	r3, [r5, #20]
 8010cae:	2300      	movs	r3, #0
 8010cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cb2:	2320      	movs	r3, #32
 8010cb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cbc:	2330      	movs	r3, #48	@ 0x30
 8010cbe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010e5c <_svfiprintf_r+0x1e4>
 8010cc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010cc6:	f04f 0901 	mov.w	r9, #1
 8010cca:	4623      	mov	r3, r4
 8010ccc:	469a      	mov	sl, r3
 8010cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cd2:	b10a      	cbz	r2, 8010cd8 <_svfiprintf_r+0x60>
 8010cd4:	2a25      	cmp	r2, #37	@ 0x25
 8010cd6:	d1f9      	bne.n	8010ccc <_svfiprintf_r+0x54>
 8010cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8010cdc:	d00b      	beq.n	8010cf6 <_svfiprintf_r+0x7e>
 8010cde:	465b      	mov	r3, fp
 8010ce0:	4622      	mov	r2, r4
 8010ce2:	4629      	mov	r1, r5
 8010ce4:	4638      	mov	r0, r7
 8010ce6:	f7ff ff6b 	bl	8010bc0 <__ssputs_r>
 8010cea:	3001      	adds	r0, #1
 8010cec:	f000 80a7 	beq.w	8010e3e <_svfiprintf_r+0x1c6>
 8010cf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cf2:	445a      	add	r2, fp
 8010cf4:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	f000 809f 	beq.w	8010e3e <_svfiprintf_r+0x1c6>
 8010d00:	2300      	movs	r3, #0
 8010d02:	f04f 32ff 	mov.w	r2, #4294967295
 8010d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d0a:	f10a 0a01 	add.w	sl, sl, #1
 8010d0e:	9304      	str	r3, [sp, #16]
 8010d10:	9307      	str	r3, [sp, #28]
 8010d12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d16:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d18:	4654      	mov	r4, sl
 8010d1a:	2205      	movs	r2, #5
 8010d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d20:	484e      	ldr	r0, [pc, #312]	@ (8010e5c <_svfiprintf_r+0x1e4>)
 8010d22:	f7ef faf5 	bl	8000310 <memchr>
 8010d26:	9a04      	ldr	r2, [sp, #16]
 8010d28:	b9d8      	cbnz	r0, 8010d62 <_svfiprintf_r+0xea>
 8010d2a:	06d0      	lsls	r0, r2, #27
 8010d2c:	bf44      	itt	mi
 8010d2e:	2320      	movmi	r3, #32
 8010d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d34:	0711      	lsls	r1, r2, #28
 8010d36:	bf44      	itt	mi
 8010d38:	232b      	movmi	r3, #43	@ 0x2b
 8010d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8010d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d44:	d015      	beq.n	8010d72 <_svfiprintf_r+0xfa>
 8010d46:	9a07      	ldr	r2, [sp, #28]
 8010d48:	4654      	mov	r4, sl
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	f04f 0c0a 	mov.w	ip, #10
 8010d50:	4621      	mov	r1, r4
 8010d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d56:	3b30      	subs	r3, #48	@ 0x30
 8010d58:	2b09      	cmp	r3, #9
 8010d5a:	d94b      	bls.n	8010df4 <_svfiprintf_r+0x17c>
 8010d5c:	b1b0      	cbz	r0, 8010d8c <_svfiprintf_r+0x114>
 8010d5e:	9207      	str	r2, [sp, #28]
 8010d60:	e014      	b.n	8010d8c <_svfiprintf_r+0x114>
 8010d62:	eba0 0308 	sub.w	r3, r0, r8
 8010d66:	fa09 f303 	lsl.w	r3, r9, r3
 8010d6a:	4313      	orrs	r3, r2
 8010d6c:	9304      	str	r3, [sp, #16]
 8010d6e:	46a2      	mov	sl, r4
 8010d70:	e7d2      	b.n	8010d18 <_svfiprintf_r+0xa0>
 8010d72:	9b03      	ldr	r3, [sp, #12]
 8010d74:	1d19      	adds	r1, r3, #4
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	9103      	str	r1, [sp, #12]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	bfbb      	ittet	lt
 8010d7e:	425b      	neglt	r3, r3
 8010d80:	f042 0202 	orrlt.w	r2, r2, #2
 8010d84:	9307      	strge	r3, [sp, #28]
 8010d86:	9307      	strlt	r3, [sp, #28]
 8010d88:	bfb8      	it	lt
 8010d8a:	9204      	strlt	r2, [sp, #16]
 8010d8c:	7823      	ldrb	r3, [r4, #0]
 8010d8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d90:	d10a      	bne.n	8010da8 <_svfiprintf_r+0x130>
 8010d92:	7863      	ldrb	r3, [r4, #1]
 8010d94:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d96:	d132      	bne.n	8010dfe <_svfiprintf_r+0x186>
 8010d98:	9b03      	ldr	r3, [sp, #12]
 8010d9a:	1d1a      	adds	r2, r3, #4
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	9203      	str	r2, [sp, #12]
 8010da0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010da4:	3402      	adds	r4, #2
 8010da6:	9305      	str	r3, [sp, #20]
 8010da8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010e6c <_svfiprintf_r+0x1f4>
 8010dac:	7821      	ldrb	r1, [r4, #0]
 8010dae:	2203      	movs	r2, #3
 8010db0:	4650      	mov	r0, sl
 8010db2:	f7ef faad 	bl	8000310 <memchr>
 8010db6:	b138      	cbz	r0, 8010dc8 <_svfiprintf_r+0x150>
 8010db8:	9b04      	ldr	r3, [sp, #16]
 8010dba:	eba0 000a 	sub.w	r0, r0, sl
 8010dbe:	2240      	movs	r2, #64	@ 0x40
 8010dc0:	4082      	lsls	r2, r0
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	3401      	adds	r4, #1
 8010dc6:	9304      	str	r3, [sp, #16]
 8010dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dcc:	4824      	ldr	r0, [pc, #144]	@ (8010e60 <_svfiprintf_r+0x1e8>)
 8010dce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010dd2:	2206      	movs	r2, #6
 8010dd4:	f7ef fa9c 	bl	8000310 <memchr>
 8010dd8:	2800      	cmp	r0, #0
 8010dda:	d036      	beq.n	8010e4a <_svfiprintf_r+0x1d2>
 8010ddc:	4b21      	ldr	r3, [pc, #132]	@ (8010e64 <_svfiprintf_r+0x1ec>)
 8010dde:	bb1b      	cbnz	r3, 8010e28 <_svfiprintf_r+0x1b0>
 8010de0:	9b03      	ldr	r3, [sp, #12]
 8010de2:	3307      	adds	r3, #7
 8010de4:	f023 0307 	bic.w	r3, r3, #7
 8010de8:	3308      	adds	r3, #8
 8010dea:	9303      	str	r3, [sp, #12]
 8010dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dee:	4433      	add	r3, r6
 8010df0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010df2:	e76a      	b.n	8010cca <_svfiprintf_r+0x52>
 8010df4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010df8:	460c      	mov	r4, r1
 8010dfa:	2001      	movs	r0, #1
 8010dfc:	e7a8      	b.n	8010d50 <_svfiprintf_r+0xd8>
 8010dfe:	2300      	movs	r3, #0
 8010e00:	3401      	adds	r4, #1
 8010e02:	9305      	str	r3, [sp, #20]
 8010e04:	4619      	mov	r1, r3
 8010e06:	f04f 0c0a 	mov.w	ip, #10
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e10:	3a30      	subs	r2, #48	@ 0x30
 8010e12:	2a09      	cmp	r2, #9
 8010e14:	d903      	bls.n	8010e1e <_svfiprintf_r+0x1a6>
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d0c6      	beq.n	8010da8 <_svfiprintf_r+0x130>
 8010e1a:	9105      	str	r1, [sp, #20]
 8010e1c:	e7c4      	b.n	8010da8 <_svfiprintf_r+0x130>
 8010e1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e22:	4604      	mov	r4, r0
 8010e24:	2301      	movs	r3, #1
 8010e26:	e7f0      	b.n	8010e0a <_svfiprintf_r+0x192>
 8010e28:	ab03      	add	r3, sp, #12
 8010e2a:	9300      	str	r3, [sp, #0]
 8010e2c:	462a      	mov	r2, r5
 8010e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8010e68 <_svfiprintf_r+0x1f0>)
 8010e30:	a904      	add	r1, sp, #16
 8010e32:	4638      	mov	r0, r7
 8010e34:	f7fc fc90 	bl	800d758 <_printf_float>
 8010e38:	1c42      	adds	r2, r0, #1
 8010e3a:	4606      	mov	r6, r0
 8010e3c:	d1d6      	bne.n	8010dec <_svfiprintf_r+0x174>
 8010e3e:	89ab      	ldrh	r3, [r5, #12]
 8010e40:	065b      	lsls	r3, r3, #25
 8010e42:	f53f af2d 	bmi.w	8010ca0 <_svfiprintf_r+0x28>
 8010e46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e48:	e72c      	b.n	8010ca4 <_svfiprintf_r+0x2c>
 8010e4a:	ab03      	add	r3, sp, #12
 8010e4c:	9300      	str	r3, [sp, #0]
 8010e4e:	462a      	mov	r2, r5
 8010e50:	4b05      	ldr	r3, [pc, #20]	@ (8010e68 <_svfiprintf_r+0x1f0>)
 8010e52:	a904      	add	r1, sp, #16
 8010e54:	4638      	mov	r0, r7
 8010e56:	f7fc ff07 	bl	800dc68 <_printf_i>
 8010e5a:	e7ed      	b.n	8010e38 <_svfiprintf_r+0x1c0>
 8010e5c:	08012779 	.word	0x08012779
 8010e60:	08012783 	.word	0x08012783
 8010e64:	0800d759 	.word	0x0800d759
 8010e68:	08010bc1 	.word	0x08010bc1
 8010e6c:	0801277f 	.word	0x0801277f

08010e70 <__sfputc_r>:
 8010e70:	6893      	ldr	r3, [r2, #8]
 8010e72:	3b01      	subs	r3, #1
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	b410      	push	{r4}
 8010e78:	6093      	str	r3, [r2, #8]
 8010e7a:	da08      	bge.n	8010e8e <__sfputc_r+0x1e>
 8010e7c:	6994      	ldr	r4, [r2, #24]
 8010e7e:	42a3      	cmp	r3, r4
 8010e80:	db01      	blt.n	8010e86 <__sfputc_r+0x16>
 8010e82:	290a      	cmp	r1, #10
 8010e84:	d103      	bne.n	8010e8e <__sfputc_r+0x1e>
 8010e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e8a:	f7fd bbae 	b.w	800e5ea <__swbuf_r>
 8010e8e:	6813      	ldr	r3, [r2, #0]
 8010e90:	1c58      	adds	r0, r3, #1
 8010e92:	6010      	str	r0, [r2, #0]
 8010e94:	7019      	strb	r1, [r3, #0]
 8010e96:	4608      	mov	r0, r1
 8010e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e9c:	4770      	bx	lr

08010e9e <__sfputs_r>:
 8010e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ea0:	4606      	mov	r6, r0
 8010ea2:	460f      	mov	r7, r1
 8010ea4:	4614      	mov	r4, r2
 8010ea6:	18d5      	adds	r5, r2, r3
 8010ea8:	42ac      	cmp	r4, r5
 8010eaa:	d101      	bne.n	8010eb0 <__sfputs_r+0x12>
 8010eac:	2000      	movs	r0, #0
 8010eae:	e007      	b.n	8010ec0 <__sfputs_r+0x22>
 8010eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eb4:	463a      	mov	r2, r7
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	f7ff ffda 	bl	8010e70 <__sfputc_r>
 8010ebc:	1c43      	adds	r3, r0, #1
 8010ebe:	d1f3      	bne.n	8010ea8 <__sfputs_r+0xa>
 8010ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ec4 <_vfiprintf_r>:
 8010ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec8:	460d      	mov	r5, r1
 8010eca:	b09d      	sub	sp, #116	@ 0x74
 8010ecc:	4614      	mov	r4, r2
 8010ece:	4698      	mov	r8, r3
 8010ed0:	4606      	mov	r6, r0
 8010ed2:	b118      	cbz	r0, 8010edc <_vfiprintf_r+0x18>
 8010ed4:	6a03      	ldr	r3, [r0, #32]
 8010ed6:	b90b      	cbnz	r3, 8010edc <_vfiprintf_r+0x18>
 8010ed8:	f7fd fa7e 	bl	800e3d8 <__sinit>
 8010edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ede:	07d9      	lsls	r1, r3, #31
 8010ee0:	d405      	bmi.n	8010eee <_vfiprintf_r+0x2a>
 8010ee2:	89ab      	ldrh	r3, [r5, #12]
 8010ee4:	059a      	lsls	r2, r3, #22
 8010ee6:	d402      	bmi.n	8010eee <_vfiprintf_r+0x2a>
 8010ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010eea:	f7fd fc90 	bl	800e80e <__retarget_lock_acquire_recursive>
 8010eee:	89ab      	ldrh	r3, [r5, #12]
 8010ef0:	071b      	lsls	r3, r3, #28
 8010ef2:	d501      	bpl.n	8010ef8 <_vfiprintf_r+0x34>
 8010ef4:	692b      	ldr	r3, [r5, #16]
 8010ef6:	b99b      	cbnz	r3, 8010f20 <_vfiprintf_r+0x5c>
 8010ef8:	4629      	mov	r1, r5
 8010efa:	4630      	mov	r0, r6
 8010efc:	f7fd fbb4 	bl	800e668 <__swsetup_r>
 8010f00:	b170      	cbz	r0, 8010f20 <_vfiprintf_r+0x5c>
 8010f02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f04:	07dc      	lsls	r4, r3, #31
 8010f06:	d504      	bpl.n	8010f12 <_vfiprintf_r+0x4e>
 8010f08:	f04f 30ff 	mov.w	r0, #4294967295
 8010f0c:	b01d      	add	sp, #116	@ 0x74
 8010f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f12:	89ab      	ldrh	r3, [r5, #12]
 8010f14:	0598      	lsls	r0, r3, #22
 8010f16:	d4f7      	bmi.n	8010f08 <_vfiprintf_r+0x44>
 8010f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f1a:	f7fd fc79 	bl	800e810 <__retarget_lock_release_recursive>
 8010f1e:	e7f3      	b.n	8010f08 <_vfiprintf_r+0x44>
 8010f20:	2300      	movs	r3, #0
 8010f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f24:	2320      	movs	r3, #32
 8010f26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f2e:	2330      	movs	r3, #48	@ 0x30
 8010f30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80110e0 <_vfiprintf_r+0x21c>
 8010f34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f38:	f04f 0901 	mov.w	r9, #1
 8010f3c:	4623      	mov	r3, r4
 8010f3e:	469a      	mov	sl, r3
 8010f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f44:	b10a      	cbz	r2, 8010f4a <_vfiprintf_r+0x86>
 8010f46:	2a25      	cmp	r2, #37	@ 0x25
 8010f48:	d1f9      	bne.n	8010f3e <_vfiprintf_r+0x7a>
 8010f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8010f4e:	d00b      	beq.n	8010f68 <_vfiprintf_r+0xa4>
 8010f50:	465b      	mov	r3, fp
 8010f52:	4622      	mov	r2, r4
 8010f54:	4629      	mov	r1, r5
 8010f56:	4630      	mov	r0, r6
 8010f58:	f7ff ffa1 	bl	8010e9e <__sfputs_r>
 8010f5c:	3001      	adds	r0, #1
 8010f5e:	f000 80a7 	beq.w	80110b0 <_vfiprintf_r+0x1ec>
 8010f62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f64:	445a      	add	r2, fp
 8010f66:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f68:	f89a 3000 	ldrb.w	r3, [sl]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 809f 	beq.w	80110b0 <_vfiprintf_r+0x1ec>
 8010f72:	2300      	movs	r3, #0
 8010f74:	f04f 32ff 	mov.w	r2, #4294967295
 8010f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f7c:	f10a 0a01 	add.w	sl, sl, #1
 8010f80:	9304      	str	r3, [sp, #16]
 8010f82:	9307      	str	r3, [sp, #28]
 8010f84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f88:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f8a:	4654      	mov	r4, sl
 8010f8c:	2205      	movs	r2, #5
 8010f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f92:	4853      	ldr	r0, [pc, #332]	@ (80110e0 <_vfiprintf_r+0x21c>)
 8010f94:	f7ef f9bc 	bl	8000310 <memchr>
 8010f98:	9a04      	ldr	r2, [sp, #16]
 8010f9a:	b9d8      	cbnz	r0, 8010fd4 <_vfiprintf_r+0x110>
 8010f9c:	06d1      	lsls	r1, r2, #27
 8010f9e:	bf44      	itt	mi
 8010fa0:	2320      	movmi	r3, #32
 8010fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fa6:	0713      	lsls	r3, r2, #28
 8010fa8:	bf44      	itt	mi
 8010faa:	232b      	movmi	r3, #43	@ 0x2b
 8010fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8010fb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fb6:	d015      	beq.n	8010fe4 <_vfiprintf_r+0x120>
 8010fb8:	9a07      	ldr	r2, [sp, #28]
 8010fba:	4654      	mov	r4, sl
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	f04f 0c0a 	mov.w	ip, #10
 8010fc2:	4621      	mov	r1, r4
 8010fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fc8:	3b30      	subs	r3, #48	@ 0x30
 8010fca:	2b09      	cmp	r3, #9
 8010fcc:	d94b      	bls.n	8011066 <_vfiprintf_r+0x1a2>
 8010fce:	b1b0      	cbz	r0, 8010ffe <_vfiprintf_r+0x13a>
 8010fd0:	9207      	str	r2, [sp, #28]
 8010fd2:	e014      	b.n	8010ffe <_vfiprintf_r+0x13a>
 8010fd4:	eba0 0308 	sub.w	r3, r0, r8
 8010fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8010fdc:	4313      	orrs	r3, r2
 8010fde:	9304      	str	r3, [sp, #16]
 8010fe0:	46a2      	mov	sl, r4
 8010fe2:	e7d2      	b.n	8010f8a <_vfiprintf_r+0xc6>
 8010fe4:	9b03      	ldr	r3, [sp, #12]
 8010fe6:	1d19      	adds	r1, r3, #4
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	9103      	str	r1, [sp, #12]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	bfbb      	ittet	lt
 8010ff0:	425b      	neglt	r3, r3
 8010ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8010ff6:	9307      	strge	r3, [sp, #28]
 8010ff8:	9307      	strlt	r3, [sp, #28]
 8010ffa:	bfb8      	it	lt
 8010ffc:	9204      	strlt	r2, [sp, #16]
 8010ffe:	7823      	ldrb	r3, [r4, #0]
 8011000:	2b2e      	cmp	r3, #46	@ 0x2e
 8011002:	d10a      	bne.n	801101a <_vfiprintf_r+0x156>
 8011004:	7863      	ldrb	r3, [r4, #1]
 8011006:	2b2a      	cmp	r3, #42	@ 0x2a
 8011008:	d132      	bne.n	8011070 <_vfiprintf_r+0x1ac>
 801100a:	9b03      	ldr	r3, [sp, #12]
 801100c:	1d1a      	adds	r2, r3, #4
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	9203      	str	r2, [sp, #12]
 8011012:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011016:	3402      	adds	r4, #2
 8011018:	9305      	str	r3, [sp, #20]
 801101a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80110f0 <_vfiprintf_r+0x22c>
 801101e:	7821      	ldrb	r1, [r4, #0]
 8011020:	2203      	movs	r2, #3
 8011022:	4650      	mov	r0, sl
 8011024:	f7ef f974 	bl	8000310 <memchr>
 8011028:	b138      	cbz	r0, 801103a <_vfiprintf_r+0x176>
 801102a:	9b04      	ldr	r3, [sp, #16]
 801102c:	eba0 000a 	sub.w	r0, r0, sl
 8011030:	2240      	movs	r2, #64	@ 0x40
 8011032:	4082      	lsls	r2, r0
 8011034:	4313      	orrs	r3, r2
 8011036:	3401      	adds	r4, #1
 8011038:	9304      	str	r3, [sp, #16]
 801103a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801103e:	4829      	ldr	r0, [pc, #164]	@ (80110e4 <_vfiprintf_r+0x220>)
 8011040:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011044:	2206      	movs	r2, #6
 8011046:	f7ef f963 	bl	8000310 <memchr>
 801104a:	2800      	cmp	r0, #0
 801104c:	d03f      	beq.n	80110ce <_vfiprintf_r+0x20a>
 801104e:	4b26      	ldr	r3, [pc, #152]	@ (80110e8 <_vfiprintf_r+0x224>)
 8011050:	bb1b      	cbnz	r3, 801109a <_vfiprintf_r+0x1d6>
 8011052:	9b03      	ldr	r3, [sp, #12]
 8011054:	3307      	adds	r3, #7
 8011056:	f023 0307 	bic.w	r3, r3, #7
 801105a:	3308      	adds	r3, #8
 801105c:	9303      	str	r3, [sp, #12]
 801105e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011060:	443b      	add	r3, r7
 8011062:	9309      	str	r3, [sp, #36]	@ 0x24
 8011064:	e76a      	b.n	8010f3c <_vfiprintf_r+0x78>
 8011066:	fb0c 3202 	mla	r2, ip, r2, r3
 801106a:	460c      	mov	r4, r1
 801106c:	2001      	movs	r0, #1
 801106e:	e7a8      	b.n	8010fc2 <_vfiprintf_r+0xfe>
 8011070:	2300      	movs	r3, #0
 8011072:	3401      	adds	r4, #1
 8011074:	9305      	str	r3, [sp, #20]
 8011076:	4619      	mov	r1, r3
 8011078:	f04f 0c0a 	mov.w	ip, #10
 801107c:	4620      	mov	r0, r4
 801107e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011082:	3a30      	subs	r2, #48	@ 0x30
 8011084:	2a09      	cmp	r2, #9
 8011086:	d903      	bls.n	8011090 <_vfiprintf_r+0x1cc>
 8011088:	2b00      	cmp	r3, #0
 801108a:	d0c6      	beq.n	801101a <_vfiprintf_r+0x156>
 801108c:	9105      	str	r1, [sp, #20]
 801108e:	e7c4      	b.n	801101a <_vfiprintf_r+0x156>
 8011090:	fb0c 2101 	mla	r1, ip, r1, r2
 8011094:	4604      	mov	r4, r0
 8011096:	2301      	movs	r3, #1
 8011098:	e7f0      	b.n	801107c <_vfiprintf_r+0x1b8>
 801109a:	ab03      	add	r3, sp, #12
 801109c:	9300      	str	r3, [sp, #0]
 801109e:	462a      	mov	r2, r5
 80110a0:	4b12      	ldr	r3, [pc, #72]	@ (80110ec <_vfiprintf_r+0x228>)
 80110a2:	a904      	add	r1, sp, #16
 80110a4:	4630      	mov	r0, r6
 80110a6:	f7fc fb57 	bl	800d758 <_printf_float>
 80110aa:	4607      	mov	r7, r0
 80110ac:	1c78      	adds	r0, r7, #1
 80110ae:	d1d6      	bne.n	801105e <_vfiprintf_r+0x19a>
 80110b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110b2:	07d9      	lsls	r1, r3, #31
 80110b4:	d405      	bmi.n	80110c2 <_vfiprintf_r+0x1fe>
 80110b6:	89ab      	ldrh	r3, [r5, #12]
 80110b8:	059a      	lsls	r2, r3, #22
 80110ba:	d402      	bmi.n	80110c2 <_vfiprintf_r+0x1fe>
 80110bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110be:	f7fd fba7 	bl	800e810 <__retarget_lock_release_recursive>
 80110c2:	89ab      	ldrh	r3, [r5, #12]
 80110c4:	065b      	lsls	r3, r3, #25
 80110c6:	f53f af1f 	bmi.w	8010f08 <_vfiprintf_r+0x44>
 80110ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80110cc:	e71e      	b.n	8010f0c <_vfiprintf_r+0x48>
 80110ce:	ab03      	add	r3, sp, #12
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	462a      	mov	r2, r5
 80110d4:	4b05      	ldr	r3, [pc, #20]	@ (80110ec <_vfiprintf_r+0x228>)
 80110d6:	a904      	add	r1, sp, #16
 80110d8:	4630      	mov	r0, r6
 80110da:	f7fc fdc5 	bl	800dc68 <_printf_i>
 80110de:	e7e4      	b.n	80110aa <_vfiprintf_r+0x1e6>
 80110e0:	08012779 	.word	0x08012779
 80110e4:	08012783 	.word	0x08012783
 80110e8:	0800d759 	.word	0x0800d759
 80110ec:	08010e9f 	.word	0x08010e9f
 80110f0:	0801277f 	.word	0x0801277f

080110f4 <__sflush_r>:
 80110f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110fc:	0716      	lsls	r6, r2, #28
 80110fe:	4605      	mov	r5, r0
 8011100:	460c      	mov	r4, r1
 8011102:	d454      	bmi.n	80111ae <__sflush_r+0xba>
 8011104:	684b      	ldr	r3, [r1, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	dc02      	bgt.n	8011110 <__sflush_r+0x1c>
 801110a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801110c:	2b00      	cmp	r3, #0
 801110e:	dd48      	ble.n	80111a2 <__sflush_r+0xae>
 8011110:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011112:	2e00      	cmp	r6, #0
 8011114:	d045      	beq.n	80111a2 <__sflush_r+0xae>
 8011116:	2300      	movs	r3, #0
 8011118:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801111c:	682f      	ldr	r7, [r5, #0]
 801111e:	6a21      	ldr	r1, [r4, #32]
 8011120:	602b      	str	r3, [r5, #0]
 8011122:	d030      	beq.n	8011186 <__sflush_r+0x92>
 8011124:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011126:	89a3      	ldrh	r3, [r4, #12]
 8011128:	0759      	lsls	r1, r3, #29
 801112a:	d505      	bpl.n	8011138 <__sflush_r+0x44>
 801112c:	6863      	ldr	r3, [r4, #4]
 801112e:	1ad2      	subs	r2, r2, r3
 8011130:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011132:	b10b      	cbz	r3, 8011138 <__sflush_r+0x44>
 8011134:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011136:	1ad2      	subs	r2, r2, r3
 8011138:	2300      	movs	r3, #0
 801113a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801113c:	6a21      	ldr	r1, [r4, #32]
 801113e:	4628      	mov	r0, r5
 8011140:	47b0      	blx	r6
 8011142:	1c43      	adds	r3, r0, #1
 8011144:	89a3      	ldrh	r3, [r4, #12]
 8011146:	d106      	bne.n	8011156 <__sflush_r+0x62>
 8011148:	6829      	ldr	r1, [r5, #0]
 801114a:	291d      	cmp	r1, #29
 801114c:	d82b      	bhi.n	80111a6 <__sflush_r+0xb2>
 801114e:	4a2a      	ldr	r2, [pc, #168]	@ (80111f8 <__sflush_r+0x104>)
 8011150:	410a      	asrs	r2, r1
 8011152:	07d6      	lsls	r6, r2, #31
 8011154:	d427      	bmi.n	80111a6 <__sflush_r+0xb2>
 8011156:	2200      	movs	r2, #0
 8011158:	6062      	str	r2, [r4, #4]
 801115a:	04d9      	lsls	r1, r3, #19
 801115c:	6922      	ldr	r2, [r4, #16]
 801115e:	6022      	str	r2, [r4, #0]
 8011160:	d504      	bpl.n	801116c <__sflush_r+0x78>
 8011162:	1c42      	adds	r2, r0, #1
 8011164:	d101      	bne.n	801116a <__sflush_r+0x76>
 8011166:	682b      	ldr	r3, [r5, #0]
 8011168:	b903      	cbnz	r3, 801116c <__sflush_r+0x78>
 801116a:	6560      	str	r0, [r4, #84]	@ 0x54
 801116c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801116e:	602f      	str	r7, [r5, #0]
 8011170:	b1b9      	cbz	r1, 80111a2 <__sflush_r+0xae>
 8011172:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011176:	4299      	cmp	r1, r3
 8011178:	d002      	beq.n	8011180 <__sflush_r+0x8c>
 801117a:	4628      	mov	r0, r5
 801117c:	f7fe f93e 	bl	800f3fc <_free_r>
 8011180:	2300      	movs	r3, #0
 8011182:	6363      	str	r3, [r4, #52]	@ 0x34
 8011184:	e00d      	b.n	80111a2 <__sflush_r+0xae>
 8011186:	2301      	movs	r3, #1
 8011188:	4628      	mov	r0, r5
 801118a:	47b0      	blx	r6
 801118c:	4602      	mov	r2, r0
 801118e:	1c50      	adds	r0, r2, #1
 8011190:	d1c9      	bne.n	8011126 <__sflush_r+0x32>
 8011192:	682b      	ldr	r3, [r5, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d0c6      	beq.n	8011126 <__sflush_r+0x32>
 8011198:	2b1d      	cmp	r3, #29
 801119a:	d001      	beq.n	80111a0 <__sflush_r+0xac>
 801119c:	2b16      	cmp	r3, #22
 801119e:	d11e      	bne.n	80111de <__sflush_r+0xea>
 80111a0:	602f      	str	r7, [r5, #0]
 80111a2:	2000      	movs	r0, #0
 80111a4:	e022      	b.n	80111ec <__sflush_r+0xf8>
 80111a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111aa:	b21b      	sxth	r3, r3
 80111ac:	e01b      	b.n	80111e6 <__sflush_r+0xf2>
 80111ae:	690f      	ldr	r7, [r1, #16]
 80111b0:	2f00      	cmp	r7, #0
 80111b2:	d0f6      	beq.n	80111a2 <__sflush_r+0xae>
 80111b4:	0793      	lsls	r3, r2, #30
 80111b6:	680e      	ldr	r6, [r1, #0]
 80111b8:	bf08      	it	eq
 80111ba:	694b      	ldreq	r3, [r1, #20]
 80111bc:	600f      	str	r7, [r1, #0]
 80111be:	bf18      	it	ne
 80111c0:	2300      	movne	r3, #0
 80111c2:	eba6 0807 	sub.w	r8, r6, r7
 80111c6:	608b      	str	r3, [r1, #8]
 80111c8:	f1b8 0f00 	cmp.w	r8, #0
 80111cc:	dde9      	ble.n	80111a2 <__sflush_r+0xae>
 80111ce:	6a21      	ldr	r1, [r4, #32]
 80111d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80111d2:	4643      	mov	r3, r8
 80111d4:	463a      	mov	r2, r7
 80111d6:	4628      	mov	r0, r5
 80111d8:	47b0      	blx	r6
 80111da:	2800      	cmp	r0, #0
 80111dc:	dc08      	bgt.n	80111f0 <__sflush_r+0xfc>
 80111de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111e6:	81a3      	strh	r3, [r4, #12]
 80111e8:	f04f 30ff 	mov.w	r0, #4294967295
 80111ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111f0:	4407      	add	r7, r0
 80111f2:	eba8 0800 	sub.w	r8, r8, r0
 80111f6:	e7e7      	b.n	80111c8 <__sflush_r+0xd4>
 80111f8:	dfbffffe 	.word	0xdfbffffe

080111fc <_fflush_r>:
 80111fc:	b538      	push	{r3, r4, r5, lr}
 80111fe:	690b      	ldr	r3, [r1, #16]
 8011200:	4605      	mov	r5, r0
 8011202:	460c      	mov	r4, r1
 8011204:	b913      	cbnz	r3, 801120c <_fflush_r+0x10>
 8011206:	2500      	movs	r5, #0
 8011208:	4628      	mov	r0, r5
 801120a:	bd38      	pop	{r3, r4, r5, pc}
 801120c:	b118      	cbz	r0, 8011216 <_fflush_r+0x1a>
 801120e:	6a03      	ldr	r3, [r0, #32]
 8011210:	b90b      	cbnz	r3, 8011216 <_fflush_r+0x1a>
 8011212:	f7fd f8e1 	bl	800e3d8 <__sinit>
 8011216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d0f3      	beq.n	8011206 <_fflush_r+0xa>
 801121e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011220:	07d0      	lsls	r0, r2, #31
 8011222:	d404      	bmi.n	801122e <_fflush_r+0x32>
 8011224:	0599      	lsls	r1, r3, #22
 8011226:	d402      	bmi.n	801122e <_fflush_r+0x32>
 8011228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801122a:	f7fd faf0 	bl	800e80e <__retarget_lock_acquire_recursive>
 801122e:	4628      	mov	r0, r5
 8011230:	4621      	mov	r1, r4
 8011232:	f7ff ff5f 	bl	80110f4 <__sflush_r>
 8011236:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011238:	07da      	lsls	r2, r3, #31
 801123a:	4605      	mov	r5, r0
 801123c:	d4e4      	bmi.n	8011208 <_fflush_r+0xc>
 801123e:	89a3      	ldrh	r3, [r4, #12]
 8011240:	059b      	lsls	r3, r3, #22
 8011242:	d4e1      	bmi.n	8011208 <_fflush_r+0xc>
 8011244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011246:	f7fd fae3 	bl	800e810 <__retarget_lock_release_recursive>
 801124a:	e7dd      	b.n	8011208 <_fflush_r+0xc>

0801124c <__swhatbuf_r>:
 801124c:	b570      	push	{r4, r5, r6, lr}
 801124e:	460c      	mov	r4, r1
 8011250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011254:	2900      	cmp	r1, #0
 8011256:	b096      	sub	sp, #88	@ 0x58
 8011258:	4615      	mov	r5, r2
 801125a:	461e      	mov	r6, r3
 801125c:	da0d      	bge.n	801127a <__swhatbuf_r+0x2e>
 801125e:	89a3      	ldrh	r3, [r4, #12]
 8011260:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011264:	f04f 0100 	mov.w	r1, #0
 8011268:	bf14      	ite	ne
 801126a:	2340      	movne	r3, #64	@ 0x40
 801126c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011270:	2000      	movs	r0, #0
 8011272:	6031      	str	r1, [r6, #0]
 8011274:	602b      	str	r3, [r5, #0]
 8011276:	b016      	add	sp, #88	@ 0x58
 8011278:	bd70      	pop	{r4, r5, r6, pc}
 801127a:	466a      	mov	r2, sp
 801127c:	f000 f874 	bl	8011368 <_fstat_r>
 8011280:	2800      	cmp	r0, #0
 8011282:	dbec      	blt.n	801125e <__swhatbuf_r+0x12>
 8011284:	9901      	ldr	r1, [sp, #4]
 8011286:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801128a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801128e:	4259      	negs	r1, r3
 8011290:	4159      	adcs	r1, r3
 8011292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011296:	e7eb      	b.n	8011270 <__swhatbuf_r+0x24>

08011298 <__smakebuf_r>:
 8011298:	898b      	ldrh	r3, [r1, #12]
 801129a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801129c:	079d      	lsls	r5, r3, #30
 801129e:	4606      	mov	r6, r0
 80112a0:	460c      	mov	r4, r1
 80112a2:	d507      	bpl.n	80112b4 <__smakebuf_r+0x1c>
 80112a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80112a8:	6023      	str	r3, [r4, #0]
 80112aa:	6123      	str	r3, [r4, #16]
 80112ac:	2301      	movs	r3, #1
 80112ae:	6163      	str	r3, [r4, #20]
 80112b0:	b003      	add	sp, #12
 80112b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112b4:	ab01      	add	r3, sp, #4
 80112b6:	466a      	mov	r2, sp
 80112b8:	f7ff ffc8 	bl	801124c <__swhatbuf_r>
 80112bc:	9f00      	ldr	r7, [sp, #0]
 80112be:	4605      	mov	r5, r0
 80112c0:	4639      	mov	r1, r7
 80112c2:	4630      	mov	r0, r6
 80112c4:	f7fe f90e 	bl	800f4e4 <_malloc_r>
 80112c8:	b948      	cbnz	r0, 80112de <__smakebuf_r+0x46>
 80112ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112ce:	059a      	lsls	r2, r3, #22
 80112d0:	d4ee      	bmi.n	80112b0 <__smakebuf_r+0x18>
 80112d2:	f023 0303 	bic.w	r3, r3, #3
 80112d6:	f043 0302 	orr.w	r3, r3, #2
 80112da:	81a3      	strh	r3, [r4, #12]
 80112dc:	e7e2      	b.n	80112a4 <__smakebuf_r+0xc>
 80112de:	89a3      	ldrh	r3, [r4, #12]
 80112e0:	6020      	str	r0, [r4, #0]
 80112e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112e6:	81a3      	strh	r3, [r4, #12]
 80112e8:	9b01      	ldr	r3, [sp, #4]
 80112ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80112ee:	b15b      	cbz	r3, 8011308 <__smakebuf_r+0x70>
 80112f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112f4:	4630      	mov	r0, r6
 80112f6:	f000 f849 	bl	801138c <_isatty_r>
 80112fa:	b128      	cbz	r0, 8011308 <__smakebuf_r+0x70>
 80112fc:	89a3      	ldrh	r3, [r4, #12]
 80112fe:	f023 0303 	bic.w	r3, r3, #3
 8011302:	f043 0301 	orr.w	r3, r3, #1
 8011306:	81a3      	strh	r3, [r4, #12]
 8011308:	89a3      	ldrh	r3, [r4, #12]
 801130a:	431d      	orrs	r5, r3
 801130c:	81a5      	strh	r5, [r4, #12]
 801130e:	e7cf      	b.n	80112b0 <__smakebuf_r+0x18>

08011310 <memmove>:
 8011310:	4288      	cmp	r0, r1
 8011312:	b510      	push	{r4, lr}
 8011314:	eb01 0402 	add.w	r4, r1, r2
 8011318:	d902      	bls.n	8011320 <memmove+0x10>
 801131a:	4284      	cmp	r4, r0
 801131c:	4623      	mov	r3, r4
 801131e:	d807      	bhi.n	8011330 <memmove+0x20>
 8011320:	1e43      	subs	r3, r0, #1
 8011322:	42a1      	cmp	r1, r4
 8011324:	d008      	beq.n	8011338 <memmove+0x28>
 8011326:	f811 2b01 	ldrb.w	r2, [r1], #1
 801132a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801132e:	e7f8      	b.n	8011322 <memmove+0x12>
 8011330:	4402      	add	r2, r0
 8011332:	4601      	mov	r1, r0
 8011334:	428a      	cmp	r2, r1
 8011336:	d100      	bne.n	801133a <memmove+0x2a>
 8011338:	bd10      	pop	{r4, pc}
 801133a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801133e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011342:	e7f7      	b.n	8011334 <memmove+0x24>

08011344 <strncmp>:
 8011344:	b510      	push	{r4, lr}
 8011346:	b16a      	cbz	r2, 8011364 <strncmp+0x20>
 8011348:	3901      	subs	r1, #1
 801134a:	1884      	adds	r4, r0, r2
 801134c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011350:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011354:	429a      	cmp	r2, r3
 8011356:	d103      	bne.n	8011360 <strncmp+0x1c>
 8011358:	42a0      	cmp	r0, r4
 801135a:	d001      	beq.n	8011360 <strncmp+0x1c>
 801135c:	2a00      	cmp	r2, #0
 801135e:	d1f5      	bne.n	801134c <strncmp+0x8>
 8011360:	1ad0      	subs	r0, r2, r3
 8011362:	bd10      	pop	{r4, pc}
 8011364:	4610      	mov	r0, r2
 8011366:	e7fc      	b.n	8011362 <strncmp+0x1e>

08011368 <_fstat_r>:
 8011368:	b538      	push	{r3, r4, r5, lr}
 801136a:	4d07      	ldr	r5, [pc, #28]	@ (8011388 <_fstat_r+0x20>)
 801136c:	2300      	movs	r3, #0
 801136e:	4604      	mov	r4, r0
 8011370:	4608      	mov	r0, r1
 8011372:	4611      	mov	r1, r2
 8011374:	602b      	str	r3, [r5, #0]
 8011376:	f7f1 f983 	bl	8002680 <_fstat>
 801137a:	1c43      	adds	r3, r0, #1
 801137c:	d102      	bne.n	8011384 <_fstat_r+0x1c>
 801137e:	682b      	ldr	r3, [r5, #0]
 8011380:	b103      	cbz	r3, 8011384 <_fstat_r+0x1c>
 8011382:	6023      	str	r3, [r4, #0]
 8011384:	bd38      	pop	{r3, r4, r5, pc}
 8011386:	bf00      	nop
 8011388:	24000b34 	.word	0x24000b34

0801138c <_isatty_r>:
 801138c:	b538      	push	{r3, r4, r5, lr}
 801138e:	4d06      	ldr	r5, [pc, #24]	@ (80113a8 <_isatty_r+0x1c>)
 8011390:	2300      	movs	r3, #0
 8011392:	4604      	mov	r4, r0
 8011394:	4608      	mov	r0, r1
 8011396:	602b      	str	r3, [r5, #0]
 8011398:	f7f1 f982 	bl	80026a0 <_isatty>
 801139c:	1c43      	adds	r3, r0, #1
 801139e:	d102      	bne.n	80113a6 <_isatty_r+0x1a>
 80113a0:	682b      	ldr	r3, [r5, #0]
 80113a2:	b103      	cbz	r3, 80113a6 <_isatty_r+0x1a>
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	bd38      	pop	{r3, r4, r5, pc}
 80113a8:	24000b34 	.word	0x24000b34

080113ac <_sbrk_r>:
 80113ac:	b538      	push	{r3, r4, r5, lr}
 80113ae:	4d06      	ldr	r5, [pc, #24]	@ (80113c8 <_sbrk_r+0x1c>)
 80113b0:	2300      	movs	r3, #0
 80113b2:	4604      	mov	r4, r0
 80113b4:	4608      	mov	r0, r1
 80113b6:	602b      	str	r3, [r5, #0]
 80113b8:	f7f1 f98a 	bl	80026d0 <_sbrk>
 80113bc:	1c43      	adds	r3, r0, #1
 80113be:	d102      	bne.n	80113c6 <_sbrk_r+0x1a>
 80113c0:	682b      	ldr	r3, [r5, #0]
 80113c2:	b103      	cbz	r3, 80113c6 <_sbrk_r+0x1a>
 80113c4:	6023      	str	r3, [r4, #0]
 80113c6:	bd38      	pop	{r3, r4, r5, pc}
 80113c8:	24000b34 	.word	0x24000b34
 80113cc:	00000000 	.word	0x00000000

080113d0 <nan>:
 80113d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80113d8 <nan+0x8>
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop
 80113d8:	00000000 	.word	0x00000000
 80113dc:	7ff80000 	.word	0x7ff80000

080113e0 <__assert_func>:
 80113e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113e2:	4614      	mov	r4, r2
 80113e4:	461a      	mov	r2, r3
 80113e6:	4b09      	ldr	r3, [pc, #36]	@ (801140c <__assert_func+0x2c>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4605      	mov	r5, r0
 80113ec:	68d8      	ldr	r0, [r3, #12]
 80113ee:	b954      	cbnz	r4, 8011406 <__assert_func+0x26>
 80113f0:	4b07      	ldr	r3, [pc, #28]	@ (8011410 <__assert_func+0x30>)
 80113f2:	461c      	mov	r4, r3
 80113f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80113f8:	9100      	str	r1, [sp, #0]
 80113fa:	462b      	mov	r3, r5
 80113fc:	4905      	ldr	r1, [pc, #20]	@ (8011414 <__assert_func+0x34>)
 80113fe:	f000 fba7 	bl	8011b50 <fiprintf>
 8011402:	f000 fbb7 	bl	8011b74 <abort>
 8011406:	4b04      	ldr	r3, [pc, #16]	@ (8011418 <__assert_func+0x38>)
 8011408:	e7f4      	b.n	80113f4 <__assert_func+0x14>
 801140a:	bf00      	nop
 801140c:	24000024 	.word	0x24000024
 8011410:	080127cd 	.word	0x080127cd
 8011414:	0801279f 	.word	0x0801279f
 8011418:	08012792 	.word	0x08012792

0801141c <_calloc_r>:
 801141c:	b570      	push	{r4, r5, r6, lr}
 801141e:	fba1 5402 	umull	r5, r4, r1, r2
 8011422:	b93c      	cbnz	r4, 8011434 <_calloc_r+0x18>
 8011424:	4629      	mov	r1, r5
 8011426:	f7fe f85d 	bl	800f4e4 <_malloc_r>
 801142a:	4606      	mov	r6, r0
 801142c:	b928      	cbnz	r0, 801143a <_calloc_r+0x1e>
 801142e:	2600      	movs	r6, #0
 8011430:	4630      	mov	r0, r6
 8011432:	bd70      	pop	{r4, r5, r6, pc}
 8011434:	220c      	movs	r2, #12
 8011436:	6002      	str	r2, [r0, #0]
 8011438:	e7f9      	b.n	801142e <_calloc_r+0x12>
 801143a:	462a      	mov	r2, r5
 801143c:	4621      	mov	r1, r4
 801143e:	f7fd f969 	bl	800e714 <memset>
 8011442:	e7f5      	b.n	8011430 <_calloc_r+0x14>

08011444 <rshift>:
 8011444:	6903      	ldr	r3, [r0, #16]
 8011446:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801144a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801144e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011452:	f100 0414 	add.w	r4, r0, #20
 8011456:	dd45      	ble.n	80114e4 <rshift+0xa0>
 8011458:	f011 011f 	ands.w	r1, r1, #31
 801145c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011460:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011464:	d10c      	bne.n	8011480 <rshift+0x3c>
 8011466:	f100 0710 	add.w	r7, r0, #16
 801146a:	4629      	mov	r1, r5
 801146c:	42b1      	cmp	r1, r6
 801146e:	d334      	bcc.n	80114da <rshift+0x96>
 8011470:	1a9b      	subs	r3, r3, r2
 8011472:	009b      	lsls	r3, r3, #2
 8011474:	1eea      	subs	r2, r5, #3
 8011476:	4296      	cmp	r6, r2
 8011478:	bf38      	it	cc
 801147a:	2300      	movcc	r3, #0
 801147c:	4423      	add	r3, r4
 801147e:	e015      	b.n	80114ac <rshift+0x68>
 8011480:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011484:	f1c1 0820 	rsb	r8, r1, #32
 8011488:	40cf      	lsrs	r7, r1
 801148a:	f105 0e04 	add.w	lr, r5, #4
 801148e:	46a1      	mov	r9, r4
 8011490:	4576      	cmp	r6, lr
 8011492:	46f4      	mov	ip, lr
 8011494:	d815      	bhi.n	80114c2 <rshift+0x7e>
 8011496:	1a9a      	subs	r2, r3, r2
 8011498:	0092      	lsls	r2, r2, #2
 801149a:	3a04      	subs	r2, #4
 801149c:	3501      	adds	r5, #1
 801149e:	42ae      	cmp	r6, r5
 80114a0:	bf38      	it	cc
 80114a2:	2200      	movcc	r2, #0
 80114a4:	18a3      	adds	r3, r4, r2
 80114a6:	50a7      	str	r7, [r4, r2]
 80114a8:	b107      	cbz	r7, 80114ac <rshift+0x68>
 80114aa:	3304      	adds	r3, #4
 80114ac:	1b1a      	subs	r2, r3, r4
 80114ae:	42a3      	cmp	r3, r4
 80114b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80114b4:	bf08      	it	eq
 80114b6:	2300      	moveq	r3, #0
 80114b8:	6102      	str	r2, [r0, #16]
 80114ba:	bf08      	it	eq
 80114bc:	6143      	streq	r3, [r0, #20]
 80114be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114c2:	f8dc c000 	ldr.w	ip, [ip]
 80114c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80114ca:	ea4c 0707 	orr.w	r7, ip, r7
 80114ce:	f849 7b04 	str.w	r7, [r9], #4
 80114d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80114d6:	40cf      	lsrs	r7, r1
 80114d8:	e7da      	b.n	8011490 <rshift+0x4c>
 80114da:	f851 cb04 	ldr.w	ip, [r1], #4
 80114de:	f847 cf04 	str.w	ip, [r7, #4]!
 80114e2:	e7c3      	b.n	801146c <rshift+0x28>
 80114e4:	4623      	mov	r3, r4
 80114e6:	e7e1      	b.n	80114ac <rshift+0x68>

080114e8 <__hexdig_fun>:
 80114e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80114ec:	2b09      	cmp	r3, #9
 80114ee:	d802      	bhi.n	80114f6 <__hexdig_fun+0xe>
 80114f0:	3820      	subs	r0, #32
 80114f2:	b2c0      	uxtb	r0, r0
 80114f4:	4770      	bx	lr
 80114f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80114fa:	2b05      	cmp	r3, #5
 80114fc:	d801      	bhi.n	8011502 <__hexdig_fun+0x1a>
 80114fe:	3847      	subs	r0, #71	@ 0x47
 8011500:	e7f7      	b.n	80114f2 <__hexdig_fun+0xa>
 8011502:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011506:	2b05      	cmp	r3, #5
 8011508:	d801      	bhi.n	801150e <__hexdig_fun+0x26>
 801150a:	3827      	subs	r0, #39	@ 0x27
 801150c:	e7f1      	b.n	80114f2 <__hexdig_fun+0xa>
 801150e:	2000      	movs	r0, #0
 8011510:	4770      	bx	lr
	...

08011514 <__gethex>:
 8011514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011518:	b085      	sub	sp, #20
 801151a:	468a      	mov	sl, r1
 801151c:	9302      	str	r3, [sp, #8]
 801151e:	680b      	ldr	r3, [r1, #0]
 8011520:	9001      	str	r0, [sp, #4]
 8011522:	4690      	mov	r8, r2
 8011524:	1c9c      	adds	r4, r3, #2
 8011526:	46a1      	mov	r9, r4
 8011528:	f814 0b01 	ldrb.w	r0, [r4], #1
 801152c:	2830      	cmp	r0, #48	@ 0x30
 801152e:	d0fa      	beq.n	8011526 <__gethex+0x12>
 8011530:	eba9 0303 	sub.w	r3, r9, r3
 8011534:	f1a3 0b02 	sub.w	fp, r3, #2
 8011538:	f7ff ffd6 	bl	80114e8 <__hexdig_fun>
 801153c:	4605      	mov	r5, r0
 801153e:	2800      	cmp	r0, #0
 8011540:	d168      	bne.n	8011614 <__gethex+0x100>
 8011542:	49a0      	ldr	r1, [pc, #640]	@ (80117c4 <__gethex+0x2b0>)
 8011544:	2201      	movs	r2, #1
 8011546:	4648      	mov	r0, r9
 8011548:	f7ff fefc 	bl	8011344 <strncmp>
 801154c:	4607      	mov	r7, r0
 801154e:	2800      	cmp	r0, #0
 8011550:	d167      	bne.n	8011622 <__gethex+0x10e>
 8011552:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011556:	4626      	mov	r6, r4
 8011558:	f7ff ffc6 	bl	80114e8 <__hexdig_fun>
 801155c:	2800      	cmp	r0, #0
 801155e:	d062      	beq.n	8011626 <__gethex+0x112>
 8011560:	4623      	mov	r3, r4
 8011562:	7818      	ldrb	r0, [r3, #0]
 8011564:	2830      	cmp	r0, #48	@ 0x30
 8011566:	4699      	mov	r9, r3
 8011568:	f103 0301 	add.w	r3, r3, #1
 801156c:	d0f9      	beq.n	8011562 <__gethex+0x4e>
 801156e:	f7ff ffbb 	bl	80114e8 <__hexdig_fun>
 8011572:	fab0 f580 	clz	r5, r0
 8011576:	096d      	lsrs	r5, r5, #5
 8011578:	f04f 0b01 	mov.w	fp, #1
 801157c:	464a      	mov	r2, r9
 801157e:	4616      	mov	r6, r2
 8011580:	3201      	adds	r2, #1
 8011582:	7830      	ldrb	r0, [r6, #0]
 8011584:	f7ff ffb0 	bl	80114e8 <__hexdig_fun>
 8011588:	2800      	cmp	r0, #0
 801158a:	d1f8      	bne.n	801157e <__gethex+0x6a>
 801158c:	498d      	ldr	r1, [pc, #564]	@ (80117c4 <__gethex+0x2b0>)
 801158e:	2201      	movs	r2, #1
 8011590:	4630      	mov	r0, r6
 8011592:	f7ff fed7 	bl	8011344 <strncmp>
 8011596:	2800      	cmp	r0, #0
 8011598:	d13f      	bne.n	801161a <__gethex+0x106>
 801159a:	b944      	cbnz	r4, 80115ae <__gethex+0x9a>
 801159c:	1c74      	adds	r4, r6, #1
 801159e:	4622      	mov	r2, r4
 80115a0:	4616      	mov	r6, r2
 80115a2:	3201      	adds	r2, #1
 80115a4:	7830      	ldrb	r0, [r6, #0]
 80115a6:	f7ff ff9f 	bl	80114e8 <__hexdig_fun>
 80115aa:	2800      	cmp	r0, #0
 80115ac:	d1f8      	bne.n	80115a0 <__gethex+0x8c>
 80115ae:	1ba4      	subs	r4, r4, r6
 80115b0:	00a7      	lsls	r7, r4, #2
 80115b2:	7833      	ldrb	r3, [r6, #0]
 80115b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80115b8:	2b50      	cmp	r3, #80	@ 0x50
 80115ba:	d13e      	bne.n	801163a <__gethex+0x126>
 80115bc:	7873      	ldrb	r3, [r6, #1]
 80115be:	2b2b      	cmp	r3, #43	@ 0x2b
 80115c0:	d033      	beq.n	801162a <__gethex+0x116>
 80115c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80115c4:	d034      	beq.n	8011630 <__gethex+0x11c>
 80115c6:	1c71      	adds	r1, r6, #1
 80115c8:	2400      	movs	r4, #0
 80115ca:	7808      	ldrb	r0, [r1, #0]
 80115cc:	f7ff ff8c 	bl	80114e8 <__hexdig_fun>
 80115d0:	1e43      	subs	r3, r0, #1
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	2b18      	cmp	r3, #24
 80115d6:	d830      	bhi.n	801163a <__gethex+0x126>
 80115d8:	f1a0 0210 	sub.w	r2, r0, #16
 80115dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80115e0:	f7ff ff82 	bl	80114e8 <__hexdig_fun>
 80115e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80115e8:	fa5f fc8c 	uxtb.w	ip, ip
 80115ec:	f1bc 0f18 	cmp.w	ip, #24
 80115f0:	f04f 030a 	mov.w	r3, #10
 80115f4:	d91e      	bls.n	8011634 <__gethex+0x120>
 80115f6:	b104      	cbz	r4, 80115fa <__gethex+0xe6>
 80115f8:	4252      	negs	r2, r2
 80115fa:	4417      	add	r7, r2
 80115fc:	f8ca 1000 	str.w	r1, [sl]
 8011600:	b1ed      	cbz	r5, 801163e <__gethex+0x12a>
 8011602:	f1bb 0f00 	cmp.w	fp, #0
 8011606:	bf0c      	ite	eq
 8011608:	2506      	moveq	r5, #6
 801160a:	2500      	movne	r5, #0
 801160c:	4628      	mov	r0, r5
 801160e:	b005      	add	sp, #20
 8011610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011614:	2500      	movs	r5, #0
 8011616:	462c      	mov	r4, r5
 8011618:	e7b0      	b.n	801157c <__gethex+0x68>
 801161a:	2c00      	cmp	r4, #0
 801161c:	d1c7      	bne.n	80115ae <__gethex+0x9a>
 801161e:	4627      	mov	r7, r4
 8011620:	e7c7      	b.n	80115b2 <__gethex+0x9e>
 8011622:	464e      	mov	r6, r9
 8011624:	462f      	mov	r7, r5
 8011626:	2501      	movs	r5, #1
 8011628:	e7c3      	b.n	80115b2 <__gethex+0x9e>
 801162a:	2400      	movs	r4, #0
 801162c:	1cb1      	adds	r1, r6, #2
 801162e:	e7cc      	b.n	80115ca <__gethex+0xb6>
 8011630:	2401      	movs	r4, #1
 8011632:	e7fb      	b.n	801162c <__gethex+0x118>
 8011634:	fb03 0002 	mla	r0, r3, r2, r0
 8011638:	e7ce      	b.n	80115d8 <__gethex+0xc4>
 801163a:	4631      	mov	r1, r6
 801163c:	e7de      	b.n	80115fc <__gethex+0xe8>
 801163e:	eba6 0309 	sub.w	r3, r6, r9
 8011642:	3b01      	subs	r3, #1
 8011644:	4629      	mov	r1, r5
 8011646:	2b07      	cmp	r3, #7
 8011648:	dc0a      	bgt.n	8011660 <__gethex+0x14c>
 801164a:	9801      	ldr	r0, [sp, #4]
 801164c:	f7fd ffd6 	bl	800f5fc <_Balloc>
 8011650:	4604      	mov	r4, r0
 8011652:	b940      	cbnz	r0, 8011666 <__gethex+0x152>
 8011654:	4b5c      	ldr	r3, [pc, #368]	@ (80117c8 <__gethex+0x2b4>)
 8011656:	4602      	mov	r2, r0
 8011658:	21e4      	movs	r1, #228	@ 0xe4
 801165a:	485c      	ldr	r0, [pc, #368]	@ (80117cc <__gethex+0x2b8>)
 801165c:	f7ff fec0 	bl	80113e0 <__assert_func>
 8011660:	3101      	adds	r1, #1
 8011662:	105b      	asrs	r3, r3, #1
 8011664:	e7ef      	b.n	8011646 <__gethex+0x132>
 8011666:	f100 0a14 	add.w	sl, r0, #20
 801166a:	2300      	movs	r3, #0
 801166c:	4655      	mov	r5, sl
 801166e:	469b      	mov	fp, r3
 8011670:	45b1      	cmp	r9, r6
 8011672:	d337      	bcc.n	80116e4 <__gethex+0x1d0>
 8011674:	f845 bb04 	str.w	fp, [r5], #4
 8011678:	eba5 050a 	sub.w	r5, r5, sl
 801167c:	10ad      	asrs	r5, r5, #2
 801167e:	6125      	str	r5, [r4, #16]
 8011680:	4658      	mov	r0, fp
 8011682:	f7fe f8ad 	bl	800f7e0 <__hi0bits>
 8011686:	016d      	lsls	r5, r5, #5
 8011688:	f8d8 6000 	ldr.w	r6, [r8]
 801168c:	1a2d      	subs	r5, r5, r0
 801168e:	42b5      	cmp	r5, r6
 8011690:	dd54      	ble.n	801173c <__gethex+0x228>
 8011692:	1bad      	subs	r5, r5, r6
 8011694:	4629      	mov	r1, r5
 8011696:	4620      	mov	r0, r4
 8011698:	f7fe fc3e 	bl	800ff18 <__any_on>
 801169c:	4681      	mov	r9, r0
 801169e:	b178      	cbz	r0, 80116c0 <__gethex+0x1ac>
 80116a0:	1e6b      	subs	r3, r5, #1
 80116a2:	1159      	asrs	r1, r3, #5
 80116a4:	f003 021f 	and.w	r2, r3, #31
 80116a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80116ac:	f04f 0901 	mov.w	r9, #1
 80116b0:	fa09 f202 	lsl.w	r2, r9, r2
 80116b4:	420a      	tst	r2, r1
 80116b6:	d003      	beq.n	80116c0 <__gethex+0x1ac>
 80116b8:	454b      	cmp	r3, r9
 80116ba:	dc36      	bgt.n	801172a <__gethex+0x216>
 80116bc:	f04f 0902 	mov.w	r9, #2
 80116c0:	4629      	mov	r1, r5
 80116c2:	4620      	mov	r0, r4
 80116c4:	f7ff febe 	bl	8011444 <rshift>
 80116c8:	442f      	add	r7, r5
 80116ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116ce:	42bb      	cmp	r3, r7
 80116d0:	da42      	bge.n	8011758 <__gethex+0x244>
 80116d2:	9801      	ldr	r0, [sp, #4]
 80116d4:	4621      	mov	r1, r4
 80116d6:	f7fd ffd1 	bl	800f67c <_Bfree>
 80116da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80116dc:	2300      	movs	r3, #0
 80116de:	6013      	str	r3, [r2, #0]
 80116e0:	25a3      	movs	r5, #163	@ 0xa3
 80116e2:	e793      	b.n	801160c <__gethex+0xf8>
 80116e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80116e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80116ea:	d012      	beq.n	8011712 <__gethex+0x1fe>
 80116ec:	2b20      	cmp	r3, #32
 80116ee:	d104      	bne.n	80116fa <__gethex+0x1e6>
 80116f0:	f845 bb04 	str.w	fp, [r5], #4
 80116f4:	f04f 0b00 	mov.w	fp, #0
 80116f8:	465b      	mov	r3, fp
 80116fa:	7830      	ldrb	r0, [r6, #0]
 80116fc:	9303      	str	r3, [sp, #12]
 80116fe:	f7ff fef3 	bl	80114e8 <__hexdig_fun>
 8011702:	9b03      	ldr	r3, [sp, #12]
 8011704:	f000 000f 	and.w	r0, r0, #15
 8011708:	4098      	lsls	r0, r3
 801170a:	ea4b 0b00 	orr.w	fp, fp, r0
 801170e:	3304      	adds	r3, #4
 8011710:	e7ae      	b.n	8011670 <__gethex+0x15c>
 8011712:	45b1      	cmp	r9, r6
 8011714:	d8ea      	bhi.n	80116ec <__gethex+0x1d8>
 8011716:	492b      	ldr	r1, [pc, #172]	@ (80117c4 <__gethex+0x2b0>)
 8011718:	9303      	str	r3, [sp, #12]
 801171a:	2201      	movs	r2, #1
 801171c:	4630      	mov	r0, r6
 801171e:	f7ff fe11 	bl	8011344 <strncmp>
 8011722:	9b03      	ldr	r3, [sp, #12]
 8011724:	2800      	cmp	r0, #0
 8011726:	d1e1      	bne.n	80116ec <__gethex+0x1d8>
 8011728:	e7a2      	b.n	8011670 <__gethex+0x15c>
 801172a:	1ea9      	subs	r1, r5, #2
 801172c:	4620      	mov	r0, r4
 801172e:	f7fe fbf3 	bl	800ff18 <__any_on>
 8011732:	2800      	cmp	r0, #0
 8011734:	d0c2      	beq.n	80116bc <__gethex+0x1a8>
 8011736:	f04f 0903 	mov.w	r9, #3
 801173a:	e7c1      	b.n	80116c0 <__gethex+0x1ac>
 801173c:	da09      	bge.n	8011752 <__gethex+0x23e>
 801173e:	1b75      	subs	r5, r6, r5
 8011740:	4621      	mov	r1, r4
 8011742:	9801      	ldr	r0, [sp, #4]
 8011744:	462a      	mov	r2, r5
 8011746:	f7fe f9b1 	bl	800faac <__lshift>
 801174a:	1b7f      	subs	r7, r7, r5
 801174c:	4604      	mov	r4, r0
 801174e:	f100 0a14 	add.w	sl, r0, #20
 8011752:	f04f 0900 	mov.w	r9, #0
 8011756:	e7b8      	b.n	80116ca <__gethex+0x1b6>
 8011758:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801175c:	42bd      	cmp	r5, r7
 801175e:	dd6f      	ble.n	8011840 <__gethex+0x32c>
 8011760:	1bed      	subs	r5, r5, r7
 8011762:	42ae      	cmp	r6, r5
 8011764:	dc34      	bgt.n	80117d0 <__gethex+0x2bc>
 8011766:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801176a:	2b02      	cmp	r3, #2
 801176c:	d022      	beq.n	80117b4 <__gethex+0x2a0>
 801176e:	2b03      	cmp	r3, #3
 8011770:	d024      	beq.n	80117bc <__gethex+0x2a8>
 8011772:	2b01      	cmp	r3, #1
 8011774:	d115      	bne.n	80117a2 <__gethex+0x28e>
 8011776:	42ae      	cmp	r6, r5
 8011778:	d113      	bne.n	80117a2 <__gethex+0x28e>
 801177a:	2e01      	cmp	r6, #1
 801177c:	d10b      	bne.n	8011796 <__gethex+0x282>
 801177e:	9a02      	ldr	r2, [sp, #8]
 8011780:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011784:	6013      	str	r3, [r2, #0]
 8011786:	2301      	movs	r3, #1
 8011788:	6123      	str	r3, [r4, #16]
 801178a:	f8ca 3000 	str.w	r3, [sl]
 801178e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011790:	2562      	movs	r5, #98	@ 0x62
 8011792:	601c      	str	r4, [r3, #0]
 8011794:	e73a      	b.n	801160c <__gethex+0xf8>
 8011796:	1e71      	subs	r1, r6, #1
 8011798:	4620      	mov	r0, r4
 801179a:	f7fe fbbd 	bl	800ff18 <__any_on>
 801179e:	2800      	cmp	r0, #0
 80117a0:	d1ed      	bne.n	801177e <__gethex+0x26a>
 80117a2:	9801      	ldr	r0, [sp, #4]
 80117a4:	4621      	mov	r1, r4
 80117a6:	f7fd ff69 	bl	800f67c <_Bfree>
 80117aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117ac:	2300      	movs	r3, #0
 80117ae:	6013      	str	r3, [r2, #0]
 80117b0:	2550      	movs	r5, #80	@ 0x50
 80117b2:	e72b      	b.n	801160c <__gethex+0xf8>
 80117b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d1f3      	bne.n	80117a2 <__gethex+0x28e>
 80117ba:	e7e0      	b.n	801177e <__gethex+0x26a>
 80117bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d1dd      	bne.n	801177e <__gethex+0x26a>
 80117c2:	e7ee      	b.n	80117a2 <__gethex+0x28e>
 80117c4:	08012620 	.word	0x08012620
 80117c8:	080124b9 	.word	0x080124b9
 80117cc:	080127ce 	.word	0x080127ce
 80117d0:	1e6f      	subs	r7, r5, #1
 80117d2:	f1b9 0f00 	cmp.w	r9, #0
 80117d6:	d130      	bne.n	801183a <__gethex+0x326>
 80117d8:	b127      	cbz	r7, 80117e4 <__gethex+0x2d0>
 80117da:	4639      	mov	r1, r7
 80117dc:	4620      	mov	r0, r4
 80117de:	f7fe fb9b 	bl	800ff18 <__any_on>
 80117e2:	4681      	mov	r9, r0
 80117e4:	117a      	asrs	r2, r7, #5
 80117e6:	2301      	movs	r3, #1
 80117e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80117ec:	f007 071f 	and.w	r7, r7, #31
 80117f0:	40bb      	lsls	r3, r7
 80117f2:	4213      	tst	r3, r2
 80117f4:	4629      	mov	r1, r5
 80117f6:	4620      	mov	r0, r4
 80117f8:	bf18      	it	ne
 80117fa:	f049 0902 	orrne.w	r9, r9, #2
 80117fe:	f7ff fe21 	bl	8011444 <rshift>
 8011802:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011806:	1b76      	subs	r6, r6, r5
 8011808:	2502      	movs	r5, #2
 801180a:	f1b9 0f00 	cmp.w	r9, #0
 801180e:	d047      	beq.n	80118a0 <__gethex+0x38c>
 8011810:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011814:	2b02      	cmp	r3, #2
 8011816:	d015      	beq.n	8011844 <__gethex+0x330>
 8011818:	2b03      	cmp	r3, #3
 801181a:	d017      	beq.n	801184c <__gethex+0x338>
 801181c:	2b01      	cmp	r3, #1
 801181e:	d109      	bne.n	8011834 <__gethex+0x320>
 8011820:	f019 0f02 	tst.w	r9, #2
 8011824:	d006      	beq.n	8011834 <__gethex+0x320>
 8011826:	f8da 3000 	ldr.w	r3, [sl]
 801182a:	ea49 0903 	orr.w	r9, r9, r3
 801182e:	f019 0f01 	tst.w	r9, #1
 8011832:	d10e      	bne.n	8011852 <__gethex+0x33e>
 8011834:	f045 0510 	orr.w	r5, r5, #16
 8011838:	e032      	b.n	80118a0 <__gethex+0x38c>
 801183a:	f04f 0901 	mov.w	r9, #1
 801183e:	e7d1      	b.n	80117e4 <__gethex+0x2d0>
 8011840:	2501      	movs	r5, #1
 8011842:	e7e2      	b.n	801180a <__gethex+0x2f6>
 8011844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011846:	f1c3 0301 	rsb	r3, r3, #1
 801184a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801184c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801184e:	2b00      	cmp	r3, #0
 8011850:	d0f0      	beq.n	8011834 <__gethex+0x320>
 8011852:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011856:	f104 0314 	add.w	r3, r4, #20
 801185a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801185e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011862:	f04f 0c00 	mov.w	ip, #0
 8011866:	4618      	mov	r0, r3
 8011868:	f853 2b04 	ldr.w	r2, [r3], #4
 801186c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011870:	d01b      	beq.n	80118aa <__gethex+0x396>
 8011872:	3201      	adds	r2, #1
 8011874:	6002      	str	r2, [r0, #0]
 8011876:	2d02      	cmp	r5, #2
 8011878:	f104 0314 	add.w	r3, r4, #20
 801187c:	d13c      	bne.n	80118f8 <__gethex+0x3e4>
 801187e:	f8d8 2000 	ldr.w	r2, [r8]
 8011882:	3a01      	subs	r2, #1
 8011884:	42b2      	cmp	r2, r6
 8011886:	d109      	bne.n	801189c <__gethex+0x388>
 8011888:	1171      	asrs	r1, r6, #5
 801188a:	2201      	movs	r2, #1
 801188c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011890:	f006 061f 	and.w	r6, r6, #31
 8011894:	fa02 f606 	lsl.w	r6, r2, r6
 8011898:	421e      	tst	r6, r3
 801189a:	d13a      	bne.n	8011912 <__gethex+0x3fe>
 801189c:	f045 0520 	orr.w	r5, r5, #32
 80118a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118a2:	601c      	str	r4, [r3, #0]
 80118a4:	9b02      	ldr	r3, [sp, #8]
 80118a6:	601f      	str	r7, [r3, #0]
 80118a8:	e6b0      	b.n	801160c <__gethex+0xf8>
 80118aa:	4299      	cmp	r1, r3
 80118ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80118b0:	d8d9      	bhi.n	8011866 <__gethex+0x352>
 80118b2:	68a3      	ldr	r3, [r4, #8]
 80118b4:	459b      	cmp	fp, r3
 80118b6:	db17      	blt.n	80118e8 <__gethex+0x3d4>
 80118b8:	6861      	ldr	r1, [r4, #4]
 80118ba:	9801      	ldr	r0, [sp, #4]
 80118bc:	3101      	adds	r1, #1
 80118be:	f7fd fe9d 	bl	800f5fc <_Balloc>
 80118c2:	4681      	mov	r9, r0
 80118c4:	b918      	cbnz	r0, 80118ce <__gethex+0x3ba>
 80118c6:	4b1a      	ldr	r3, [pc, #104]	@ (8011930 <__gethex+0x41c>)
 80118c8:	4602      	mov	r2, r0
 80118ca:	2184      	movs	r1, #132	@ 0x84
 80118cc:	e6c5      	b.n	801165a <__gethex+0x146>
 80118ce:	6922      	ldr	r2, [r4, #16]
 80118d0:	3202      	adds	r2, #2
 80118d2:	f104 010c 	add.w	r1, r4, #12
 80118d6:	0092      	lsls	r2, r2, #2
 80118d8:	300c      	adds	r0, #12
 80118da:	f7fc ff9a 	bl	800e812 <memcpy>
 80118de:	4621      	mov	r1, r4
 80118e0:	9801      	ldr	r0, [sp, #4]
 80118e2:	f7fd fecb 	bl	800f67c <_Bfree>
 80118e6:	464c      	mov	r4, r9
 80118e8:	6923      	ldr	r3, [r4, #16]
 80118ea:	1c5a      	adds	r2, r3, #1
 80118ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80118f0:	6122      	str	r2, [r4, #16]
 80118f2:	2201      	movs	r2, #1
 80118f4:	615a      	str	r2, [r3, #20]
 80118f6:	e7be      	b.n	8011876 <__gethex+0x362>
 80118f8:	6922      	ldr	r2, [r4, #16]
 80118fa:	455a      	cmp	r2, fp
 80118fc:	dd0b      	ble.n	8011916 <__gethex+0x402>
 80118fe:	2101      	movs	r1, #1
 8011900:	4620      	mov	r0, r4
 8011902:	f7ff fd9f 	bl	8011444 <rshift>
 8011906:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801190a:	3701      	adds	r7, #1
 801190c:	42bb      	cmp	r3, r7
 801190e:	f6ff aee0 	blt.w	80116d2 <__gethex+0x1be>
 8011912:	2501      	movs	r5, #1
 8011914:	e7c2      	b.n	801189c <__gethex+0x388>
 8011916:	f016 061f 	ands.w	r6, r6, #31
 801191a:	d0fa      	beq.n	8011912 <__gethex+0x3fe>
 801191c:	4453      	add	r3, sl
 801191e:	f1c6 0620 	rsb	r6, r6, #32
 8011922:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011926:	f7fd ff5b 	bl	800f7e0 <__hi0bits>
 801192a:	42b0      	cmp	r0, r6
 801192c:	dbe7      	blt.n	80118fe <__gethex+0x3ea>
 801192e:	e7f0      	b.n	8011912 <__gethex+0x3fe>
 8011930:	080124b9 	.word	0x080124b9

08011934 <L_shift>:
 8011934:	f1c2 0208 	rsb	r2, r2, #8
 8011938:	0092      	lsls	r2, r2, #2
 801193a:	b570      	push	{r4, r5, r6, lr}
 801193c:	f1c2 0620 	rsb	r6, r2, #32
 8011940:	6843      	ldr	r3, [r0, #4]
 8011942:	6804      	ldr	r4, [r0, #0]
 8011944:	fa03 f506 	lsl.w	r5, r3, r6
 8011948:	432c      	orrs	r4, r5
 801194a:	40d3      	lsrs	r3, r2
 801194c:	6004      	str	r4, [r0, #0]
 801194e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011952:	4288      	cmp	r0, r1
 8011954:	d3f4      	bcc.n	8011940 <L_shift+0xc>
 8011956:	bd70      	pop	{r4, r5, r6, pc}

08011958 <__match>:
 8011958:	b530      	push	{r4, r5, lr}
 801195a:	6803      	ldr	r3, [r0, #0]
 801195c:	3301      	adds	r3, #1
 801195e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011962:	b914      	cbnz	r4, 801196a <__match+0x12>
 8011964:	6003      	str	r3, [r0, #0]
 8011966:	2001      	movs	r0, #1
 8011968:	bd30      	pop	{r4, r5, pc}
 801196a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801196e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011972:	2d19      	cmp	r5, #25
 8011974:	bf98      	it	ls
 8011976:	3220      	addls	r2, #32
 8011978:	42a2      	cmp	r2, r4
 801197a:	d0f0      	beq.n	801195e <__match+0x6>
 801197c:	2000      	movs	r0, #0
 801197e:	e7f3      	b.n	8011968 <__match+0x10>

08011980 <__hexnan>:
 8011980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011984:	680b      	ldr	r3, [r1, #0]
 8011986:	6801      	ldr	r1, [r0, #0]
 8011988:	115e      	asrs	r6, r3, #5
 801198a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801198e:	f013 031f 	ands.w	r3, r3, #31
 8011992:	b087      	sub	sp, #28
 8011994:	bf18      	it	ne
 8011996:	3604      	addne	r6, #4
 8011998:	2500      	movs	r5, #0
 801199a:	1f37      	subs	r7, r6, #4
 801199c:	4682      	mov	sl, r0
 801199e:	4690      	mov	r8, r2
 80119a0:	9301      	str	r3, [sp, #4]
 80119a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80119a6:	46b9      	mov	r9, r7
 80119a8:	463c      	mov	r4, r7
 80119aa:	9502      	str	r5, [sp, #8]
 80119ac:	46ab      	mov	fp, r5
 80119ae:	784a      	ldrb	r2, [r1, #1]
 80119b0:	1c4b      	adds	r3, r1, #1
 80119b2:	9303      	str	r3, [sp, #12]
 80119b4:	b342      	cbz	r2, 8011a08 <__hexnan+0x88>
 80119b6:	4610      	mov	r0, r2
 80119b8:	9105      	str	r1, [sp, #20]
 80119ba:	9204      	str	r2, [sp, #16]
 80119bc:	f7ff fd94 	bl	80114e8 <__hexdig_fun>
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d151      	bne.n	8011a68 <__hexnan+0xe8>
 80119c4:	9a04      	ldr	r2, [sp, #16]
 80119c6:	9905      	ldr	r1, [sp, #20]
 80119c8:	2a20      	cmp	r2, #32
 80119ca:	d818      	bhi.n	80119fe <__hexnan+0x7e>
 80119cc:	9b02      	ldr	r3, [sp, #8]
 80119ce:	459b      	cmp	fp, r3
 80119d0:	dd13      	ble.n	80119fa <__hexnan+0x7a>
 80119d2:	454c      	cmp	r4, r9
 80119d4:	d206      	bcs.n	80119e4 <__hexnan+0x64>
 80119d6:	2d07      	cmp	r5, #7
 80119d8:	dc04      	bgt.n	80119e4 <__hexnan+0x64>
 80119da:	462a      	mov	r2, r5
 80119dc:	4649      	mov	r1, r9
 80119de:	4620      	mov	r0, r4
 80119e0:	f7ff ffa8 	bl	8011934 <L_shift>
 80119e4:	4544      	cmp	r4, r8
 80119e6:	d952      	bls.n	8011a8e <__hexnan+0x10e>
 80119e8:	2300      	movs	r3, #0
 80119ea:	f1a4 0904 	sub.w	r9, r4, #4
 80119ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80119f2:	f8cd b008 	str.w	fp, [sp, #8]
 80119f6:	464c      	mov	r4, r9
 80119f8:	461d      	mov	r5, r3
 80119fa:	9903      	ldr	r1, [sp, #12]
 80119fc:	e7d7      	b.n	80119ae <__hexnan+0x2e>
 80119fe:	2a29      	cmp	r2, #41	@ 0x29
 8011a00:	d157      	bne.n	8011ab2 <__hexnan+0x132>
 8011a02:	3102      	adds	r1, #2
 8011a04:	f8ca 1000 	str.w	r1, [sl]
 8011a08:	f1bb 0f00 	cmp.w	fp, #0
 8011a0c:	d051      	beq.n	8011ab2 <__hexnan+0x132>
 8011a0e:	454c      	cmp	r4, r9
 8011a10:	d206      	bcs.n	8011a20 <__hexnan+0xa0>
 8011a12:	2d07      	cmp	r5, #7
 8011a14:	dc04      	bgt.n	8011a20 <__hexnan+0xa0>
 8011a16:	462a      	mov	r2, r5
 8011a18:	4649      	mov	r1, r9
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	f7ff ff8a 	bl	8011934 <L_shift>
 8011a20:	4544      	cmp	r4, r8
 8011a22:	d936      	bls.n	8011a92 <__hexnan+0x112>
 8011a24:	f1a8 0204 	sub.w	r2, r8, #4
 8011a28:	4623      	mov	r3, r4
 8011a2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8011a2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011a32:	429f      	cmp	r7, r3
 8011a34:	d2f9      	bcs.n	8011a2a <__hexnan+0xaa>
 8011a36:	1b3b      	subs	r3, r7, r4
 8011a38:	f023 0303 	bic.w	r3, r3, #3
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	3401      	adds	r4, #1
 8011a40:	3e03      	subs	r6, #3
 8011a42:	42b4      	cmp	r4, r6
 8011a44:	bf88      	it	hi
 8011a46:	2304      	movhi	r3, #4
 8011a48:	4443      	add	r3, r8
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	f843 2b04 	str.w	r2, [r3], #4
 8011a50:	429f      	cmp	r7, r3
 8011a52:	d2fb      	bcs.n	8011a4c <__hexnan+0xcc>
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	b91b      	cbnz	r3, 8011a60 <__hexnan+0xe0>
 8011a58:	4547      	cmp	r7, r8
 8011a5a:	d128      	bne.n	8011aae <__hexnan+0x12e>
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	603b      	str	r3, [r7, #0]
 8011a60:	2005      	movs	r0, #5
 8011a62:	b007      	add	sp, #28
 8011a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a68:	3501      	adds	r5, #1
 8011a6a:	2d08      	cmp	r5, #8
 8011a6c:	f10b 0b01 	add.w	fp, fp, #1
 8011a70:	dd06      	ble.n	8011a80 <__hexnan+0x100>
 8011a72:	4544      	cmp	r4, r8
 8011a74:	d9c1      	bls.n	80119fa <__hexnan+0x7a>
 8011a76:	2300      	movs	r3, #0
 8011a78:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a7c:	2501      	movs	r5, #1
 8011a7e:	3c04      	subs	r4, #4
 8011a80:	6822      	ldr	r2, [r4, #0]
 8011a82:	f000 000f 	and.w	r0, r0, #15
 8011a86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011a8a:	6020      	str	r0, [r4, #0]
 8011a8c:	e7b5      	b.n	80119fa <__hexnan+0x7a>
 8011a8e:	2508      	movs	r5, #8
 8011a90:	e7b3      	b.n	80119fa <__hexnan+0x7a>
 8011a92:	9b01      	ldr	r3, [sp, #4]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d0dd      	beq.n	8011a54 <__hexnan+0xd4>
 8011a98:	f1c3 0320 	rsb	r3, r3, #32
 8011a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8011aa0:	40da      	lsrs	r2, r3
 8011aa2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011aa6:	4013      	ands	r3, r2
 8011aa8:	f846 3c04 	str.w	r3, [r6, #-4]
 8011aac:	e7d2      	b.n	8011a54 <__hexnan+0xd4>
 8011aae:	3f04      	subs	r7, #4
 8011ab0:	e7d0      	b.n	8011a54 <__hexnan+0xd4>
 8011ab2:	2004      	movs	r0, #4
 8011ab4:	e7d5      	b.n	8011a62 <__hexnan+0xe2>

08011ab6 <__ascii_mbtowc>:
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	b901      	cbnz	r1, 8011abc <__ascii_mbtowc+0x6>
 8011aba:	a901      	add	r1, sp, #4
 8011abc:	b142      	cbz	r2, 8011ad0 <__ascii_mbtowc+0x1a>
 8011abe:	b14b      	cbz	r3, 8011ad4 <__ascii_mbtowc+0x1e>
 8011ac0:	7813      	ldrb	r3, [r2, #0]
 8011ac2:	600b      	str	r3, [r1, #0]
 8011ac4:	7812      	ldrb	r2, [r2, #0]
 8011ac6:	1e10      	subs	r0, r2, #0
 8011ac8:	bf18      	it	ne
 8011aca:	2001      	movne	r0, #1
 8011acc:	b002      	add	sp, #8
 8011ace:	4770      	bx	lr
 8011ad0:	4610      	mov	r0, r2
 8011ad2:	e7fb      	b.n	8011acc <__ascii_mbtowc+0x16>
 8011ad4:	f06f 0001 	mvn.w	r0, #1
 8011ad8:	e7f8      	b.n	8011acc <__ascii_mbtowc+0x16>

08011ada <_realloc_r>:
 8011ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ade:	4680      	mov	r8, r0
 8011ae0:	4615      	mov	r5, r2
 8011ae2:	460c      	mov	r4, r1
 8011ae4:	b921      	cbnz	r1, 8011af0 <_realloc_r+0x16>
 8011ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aea:	4611      	mov	r1, r2
 8011aec:	f7fd bcfa 	b.w	800f4e4 <_malloc_r>
 8011af0:	b92a      	cbnz	r2, 8011afe <_realloc_r+0x24>
 8011af2:	f7fd fc83 	bl	800f3fc <_free_r>
 8011af6:	2400      	movs	r4, #0
 8011af8:	4620      	mov	r0, r4
 8011afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011afe:	f000 f840 	bl	8011b82 <_malloc_usable_size_r>
 8011b02:	4285      	cmp	r5, r0
 8011b04:	4606      	mov	r6, r0
 8011b06:	d802      	bhi.n	8011b0e <_realloc_r+0x34>
 8011b08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011b0c:	d8f4      	bhi.n	8011af8 <_realloc_r+0x1e>
 8011b0e:	4629      	mov	r1, r5
 8011b10:	4640      	mov	r0, r8
 8011b12:	f7fd fce7 	bl	800f4e4 <_malloc_r>
 8011b16:	4607      	mov	r7, r0
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	d0ec      	beq.n	8011af6 <_realloc_r+0x1c>
 8011b1c:	42b5      	cmp	r5, r6
 8011b1e:	462a      	mov	r2, r5
 8011b20:	4621      	mov	r1, r4
 8011b22:	bf28      	it	cs
 8011b24:	4632      	movcs	r2, r6
 8011b26:	f7fc fe74 	bl	800e812 <memcpy>
 8011b2a:	4621      	mov	r1, r4
 8011b2c:	4640      	mov	r0, r8
 8011b2e:	f7fd fc65 	bl	800f3fc <_free_r>
 8011b32:	463c      	mov	r4, r7
 8011b34:	e7e0      	b.n	8011af8 <_realloc_r+0x1e>

08011b36 <__ascii_wctomb>:
 8011b36:	4603      	mov	r3, r0
 8011b38:	4608      	mov	r0, r1
 8011b3a:	b141      	cbz	r1, 8011b4e <__ascii_wctomb+0x18>
 8011b3c:	2aff      	cmp	r2, #255	@ 0xff
 8011b3e:	d904      	bls.n	8011b4a <__ascii_wctomb+0x14>
 8011b40:	228a      	movs	r2, #138	@ 0x8a
 8011b42:	601a      	str	r2, [r3, #0]
 8011b44:	f04f 30ff 	mov.w	r0, #4294967295
 8011b48:	4770      	bx	lr
 8011b4a:	700a      	strb	r2, [r1, #0]
 8011b4c:	2001      	movs	r0, #1
 8011b4e:	4770      	bx	lr

08011b50 <fiprintf>:
 8011b50:	b40e      	push	{r1, r2, r3}
 8011b52:	b503      	push	{r0, r1, lr}
 8011b54:	4601      	mov	r1, r0
 8011b56:	ab03      	add	r3, sp, #12
 8011b58:	4805      	ldr	r0, [pc, #20]	@ (8011b70 <fiprintf+0x20>)
 8011b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b5e:	6800      	ldr	r0, [r0, #0]
 8011b60:	9301      	str	r3, [sp, #4]
 8011b62:	f7ff f9af 	bl	8010ec4 <_vfiprintf_r>
 8011b66:	b002      	add	sp, #8
 8011b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b6c:	b003      	add	sp, #12
 8011b6e:	4770      	bx	lr
 8011b70:	24000024 	.word	0x24000024

08011b74 <abort>:
 8011b74:	b508      	push	{r3, lr}
 8011b76:	2006      	movs	r0, #6
 8011b78:	f000 f834 	bl	8011be4 <raise>
 8011b7c:	2001      	movs	r0, #1
 8011b7e:	f7f0 fd4b 	bl	8002618 <_exit>

08011b82 <_malloc_usable_size_r>:
 8011b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b86:	1f18      	subs	r0, r3, #4
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	bfbc      	itt	lt
 8011b8c:	580b      	ldrlt	r3, [r1, r0]
 8011b8e:	18c0      	addlt	r0, r0, r3
 8011b90:	4770      	bx	lr

08011b92 <_raise_r>:
 8011b92:	291f      	cmp	r1, #31
 8011b94:	b538      	push	{r3, r4, r5, lr}
 8011b96:	4605      	mov	r5, r0
 8011b98:	460c      	mov	r4, r1
 8011b9a:	d904      	bls.n	8011ba6 <_raise_r+0x14>
 8011b9c:	2316      	movs	r3, #22
 8011b9e:	6003      	str	r3, [r0, #0]
 8011ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba4:	bd38      	pop	{r3, r4, r5, pc}
 8011ba6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011ba8:	b112      	cbz	r2, 8011bb0 <_raise_r+0x1e>
 8011baa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bae:	b94b      	cbnz	r3, 8011bc4 <_raise_r+0x32>
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	f000 f831 	bl	8011c18 <_getpid_r>
 8011bb6:	4622      	mov	r2, r4
 8011bb8:	4601      	mov	r1, r0
 8011bba:	4628      	mov	r0, r5
 8011bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bc0:	f000 b818 	b.w	8011bf4 <_kill_r>
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d00a      	beq.n	8011bde <_raise_r+0x4c>
 8011bc8:	1c59      	adds	r1, r3, #1
 8011bca:	d103      	bne.n	8011bd4 <_raise_r+0x42>
 8011bcc:	2316      	movs	r3, #22
 8011bce:	6003      	str	r3, [r0, #0]
 8011bd0:	2001      	movs	r0, #1
 8011bd2:	e7e7      	b.n	8011ba4 <_raise_r+0x12>
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011bda:	4620      	mov	r0, r4
 8011bdc:	4798      	blx	r3
 8011bde:	2000      	movs	r0, #0
 8011be0:	e7e0      	b.n	8011ba4 <_raise_r+0x12>
	...

08011be4 <raise>:
 8011be4:	4b02      	ldr	r3, [pc, #8]	@ (8011bf0 <raise+0xc>)
 8011be6:	4601      	mov	r1, r0
 8011be8:	6818      	ldr	r0, [r3, #0]
 8011bea:	f7ff bfd2 	b.w	8011b92 <_raise_r>
 8011bee:	bf00      	nop
 8011bf0:	24000024 	.word	0x24000024

08011bf4 <_kill_r>:
 8011bf4:	b538      	push	{r3, r4, r5, lr}
 8011bf6:	4d07      	ldr	r5, [pc, #28]	@ (8011c14 <_kill_r+0x20>)
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	4608      	mov	r0, r1
 8011bfe:	4611      	mov	r1, r2
 8011c00:	602b      	str	r3, [r5, #0]
 8011c02:	f7f0 fcf9 	bl	80025f8 <_kill>
 8011c06:	1c43      	adds	r3, r0, #1
 8011c08:	d102      	bne.n	8011c10 <_kill_r+0x1c>
 8011c0a:	682b      	ldr	r3, [r5, #0]
 8011c0c:	b103      	cbz	r3, 8011c10 <_kill_r+0x1c>
 8011c0e:	6023      	str	r3, [r4, #0]
 8011c10:	bd38      	pop	{r3, r4, r5, pc}
 8011c12:	bf00      	nop
 8011c14:	24000b34 	.word	0x24000b34

08011c18 <_getpid_r>:
 8011c18:	f7f0 bce6 	b.w	80025e8 <_getpid>

08011c1c <checkint>:
 8011c1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011c20:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8011c24:	429a      	cmp	r2, r3
 8011c26:	b570      	push	{r4, r5, r6, lr}
 8011c28:	dd2a      	ble.n	8011c80 <checkint+0x64>
 8011c2a:	f240 4333 	movw	r3, #1075	@ 0x433
 8011c2e:	429a      	cmp	r2, r3
 8011c30:	dc24      	bgt.n	8011c7c <checkint+0x60>
 8011c32:	1a9b      	subs	r3, r3, r2
 8011c34:	f1a3 0620 	sub.w	r6, r3, #32
 8011c38:	f04f 32ff 	mov.w	r2, #4294967295
 8011c3c:	fa02 f403 	lsl.w	r4, r2, r3
 8011c40:	fa02 f606 	lsl.w	r6, r2, r6
 8011c44:	f1c3 0520 	rsb	r5, r3, #32
 8011c48:	fa22 f505 	lsr.w	r5, r2, r5
 8011c4c:	4334      	orrs	r4, r6
 8011c4e:	432c      	orrs	r4, r5
 8011c50:	409a      	lsls	r2, r3
 8011c52:	ea20 0202 	bic.w	r2, r0, r2
 8011c56:	ea21 0404 	bic.w	r4, r1, r4
 8011c5a:	4322      	orrs	r2, r4
 8011c5c:	f1a3 0420 	sub.w	r4, r3, #32
 8011c60:	f1c3 0220 	rsb	r2, r3, #32
 8011c64:	d10c      	bne.n	8011c80 <checkint+0x64>
 8011c66:	40d8      	lsrs	r0, r3
 8011c68:	fa01 f302 	lsl.w	r3, r1, r2
 8011c6c:	4318      	orrs	r0, r3
 8011c6e:	40e1      	lsrs	r1, r4
 8011c70:	4308      	orrs	r0, r1
 8011c72:	f000 0001 	and.w	r0, r0, #1
 8011c76:	f1d0 0002 	rsbs	r0, r0, #2
 8011c7a:	bd70      	pop	{r4, r5, r6, pc}
 8011c7c:	2002      	movs	r0, #2
 8011c7e:	e7fc      	b.n	8011c7a <checkint+0x5e>
 8011c80:	2000      	movs	r0, #0
 8011c82:	e7fa      	b.n	8011c7a <checkint+0x5e>
 8011c84:	0000      	movs	r0, r0
	...

08011c88 <pow>:
 8011c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c8c:	ee10 4a90 	vmov	r4, s1
 8011c90:	ed2d 8b0a 	vpush	{d8-d12}
 8011c94:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8011c98:	ee11 aa90 	vmov	sl, s3
 8011c9c:	f108 32ff 	add.w	r2, r8, #4294967295
 8011ca0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	ee10 5a10 	vmov	r5, s0
 8011caa:	ee11 0a10 	vmov	r0, s2
 8011cae:	b087      	sub	sp, #28
 8011cb0:	46c4      	mov	ip, r8
 8011cb2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8011cb6:	d806      	bhi.n	8011cc6 <pow+0x3e>
 8011cb8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8011cbc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8011cc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8011cc2:	f240 8157 	bls.w	8011f74 <pow+0x2ec>
 8011cc6:	1802      	adds	r2, r0, r0
 8011cc8:	eb4a 010a 	adc.w	r1, sl, sl
 8011ccc:	f06f 0b01 	mvn.w	fp, #1
 8011cd0:	1e57      	subs	r7, r2, #1
 8011cd2:	f141 33ff 	adc.w	r3, r1, #4294967295
 8011cd6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8011cda:	45bb      	cmp	fp, r7
 8011cdc:	eb7e 0303 	sbcs.w	r3, lr, r3
 8011ce0:	d242      	bcs.n	8011d68 <pow+0xe0>
 8011ce2:	ea52 0301 	orrs.w	r3, r2, r1
 8011ce6:	f04f 0300 	mov.w	r3, #0
 8011cea:	d10c      	bne.n	8011d06 <pow+0x7e>
 8011cec:	196d      	adds	r5, r5, r5
 8011cee:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8011cf2:	4164      	adcs	r4, r4
 8011cf4:	42ab      	cmp	r3, r5
 8011cf6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011cfa:	41a3      	sbcs	r3, r4
 8011cfc:	f0c0 808f 	bcc.w	8011e1e <pow+0x196>
 8011d00:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011d04:	e02b      	b.n	8011d5e <pow+0xd6>
 8011d06:	4ed4      	ldr	r6, [pc, #848]	@ (8012058 <pow+0x3d0>)
 8011d08:	42b4      	cmp	r4, r6
 8011d0a:	bf08      	it	eq
 8011d0c:	429d      	cmpeq	r5, r3
 8011d0e:	d109      	bne.n	8011d24 <pow+0x9c>
 8011d10:	1800      	adds	r0, r0, r0
 8011d12:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8011d16:	eb4a 0a0a 	adc.w	sl, sl, sl
 8011d1a:	4283      	cmp	r3, r0
 8011d1c:	4bcf      	ldr	r3, [pc, #828]	@ (801205c <pow+0x3d4>)
 8011d1e:	eb73 030a 	sbcs.w	r3, r3, sl
 8011d22:	e7eb      	b.n	8011cfc <pow+0x74>
 8011d24:	196d      	adds	r5, r5, r5
 8011d26:	48ce      	ldr	r0, [pc, #824]	@ (8012060 <pow+0x3d8>)
 8011d28:	4164      	adcs	r4, r4
 8011d2a:	42ab      	cmp	r3, r5
 8011d2c:	eb70 0604 	sbcs.w	r6, r0, r4
 8011d30:	d375      	bcc.n	8011e1e <pow+0x196>
 8011d32:	4281      	cmp	r1, r0
 8011d34:	bf08      	it	eq
 8011d36:	429a      	cmpeq	r2, r3
 8011d38:	d171      	bne.n	8011e1e <pow+0x196>
 8011d3a:	4aca      	ldr	r2, [pc, #808]	@ (8012064 <pow+0x3dc>)
 8011d3c:	4294      	cmp	r4, r2
 8011d3e:	bf08      	it	eq
 8011d40:	429d      	cmpeq	r5, r3
 8011d42:	d0dd      	beq.n	8011d00 <pow+0x78>
 8011d44:	4294      	cmp	r4, r2
 8011d46:	ea6f 0a0a 	mvn.w	sl, sl
 8011d4a:	bf34      	ite	cc
 8011d4c:	2400      	movcc	r4, #0
 8011d4e:	2401      	movcs	r4, #1
 8011d50:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8011d54:	4554      	cmp	r4, sl
 8011d56:	f040 81dc 	bne.w	8012112 <pow+0x48a>
 8011d5a:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011d5e:	b007      	add	sp, #28
 8011d60:	ecbd 8b0a 	vpop	{d8-d12}
 8011d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d68:	196f      	adds	r7, r5, r5
 8011d6a:	eb44 0904 	adc.w	r9, r4, r4
 8011d6e:	1e7a      	subs	r2, r7, #1
 8011d70:	f169 0300 	sbc.w	r3, r9, #0
 8011d74:	4593      	cmp	fp, r2
 8011d76:	eb7e 0303 	sbcs.w	r3, lr, r3
 8011d7a:	d225      	bcs.n	8011dc8 <pow+0x140>
 8011d7c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011d80:	2c00      	cmp	r4, #0
 8011d82:	da13      	bge.n	8011dac <pow+0x124>
 8011d84:	4651      	mov	r1, sl
 8011d86:	f7ff ff49 	bl	8011c1c <checkint>
 8011d8a:	2801      	cmp	r0, #1
 8011d8c:	d10e      	bne.n	8011dac <pow+0x124>
 8011d8e:	eeb1 0b40 	vneg.f64	d0, d0
 8011d92:	ea57 0909 	orrs.w	r9, r7, r9
 8011d96:	d10b      	bne.n	8011db0 <pow+0x128>
 8011d98:	f1ba 0f00 	cmp.w	sl, #0
 8011d9c:	dadf      	bge.n	8011d5e <pow+0xd6>
 8011d9e:	b007      	add	sp, #28
 8011da0:	ecbd 8b0a 	vpop	{d8-d12}
 8011da4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da8:	f000 b9ee 	b.w	8012188 <__math_divzero>
 8011dac:	2000      	movs	r0, #0
 8011dae:	e7f0      	b.n	8011d92 <pow+0x10a>
 8011db0:	f1ba 0f00 	cmp.w	sl, #0
 8011db4:	dad3      	bge.n	8011d5e <pow+0xd6>
 8011db6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8011dba:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011dbe:	ed8d 7b00 	vstr	d7, [sp]
 8011dc2:	ed9d 0b00 	vldr	d0, [sp]
 8011dc6:	e7ca      	b.n	8011d5e <pow+0xd6>
 8011dc8:	2c00      	cmp	r4, #0
 8011dca:	da2b      	bge.n	8011e24 <pow+0x19c>
 8011dcc:	4651      	mov	r1, sl
 8011dce:	f7ff ff25 	bl	8011c1c <checkint>
 8011dd2:	b930      	cbnz	r0, 8011de2 <pow+0x15a>
 8011dd4:	b007      	add	sp, #28
 8011dd6:	ecbd 8b0a 	vpop	{d8-d12}
 8011dda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dde:	f000 b9eb 	b.w	80121b8 <__math_invalid>
 8011de2:	1e41      	subs	r1, r0, #1
 8011de4:	4248      	negs	r0, r1
 8011de6:	4148      	adcs	r0, r1
 8011de8:	0480      	lsls	r0, r0, #18
 8011dea:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8011dee:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8011df2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8011df6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8011dfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8011dfc:	d92d      	bls.n	8011e5a <pow+0x1d2>
 8011dfe:	4b96      	ldr	r3, [pc, #600]	@ (8012058 <pow+0x3d0>)
 8011e00:	2000      	movs	r0, #0
 8011e02:	429c      	cmp	r4, r3
 8011e04:	bf08      	it	eq
 8011e06:	4285      	cmpeq	r5, r0
 8011e08:	f43f af7a 	beq.w	8011d00 <pow+0x78>
 8011e0c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8011e10:	428a      	cmp	r2, r1
 8011e12:	d80c      	bhi.n	8011e2e <pow+0x1a6>
 8011e14:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011e18:	42a8      	cmp	r0, r5
 8011e1a:	41a3      	sbcs	r3, r4
 8011e1c:	d204      	bcs.n	8011e28 <pow+0x1a0>
 8011e1e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011e22:	e79c      	b.n	8011d5e <pow+0xd6>
 8011e24:	2000      	movs	r0, #0
 8011e26:	e7e4      	b.n	8011df2 <pow+0x16a>
 8011e28:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011e2c:	e797      	b.n	8011d5e <pow+0xd6>
 8011e2e:	2d01      	cmp	r5, #1
 8011e30:	eb74 0303 	sbcs.w	r3, r4, r3
 8011e34:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011e38:	bf34      	ite	cc
 8011e3a:	2301      	movcc	r3, #1
 8011e3c:	2300      	movcs	r3, #0
 8011e3e:	4296      	cmp	r6, r2
 8011e40:	bf8c      	ite	hi
 8011e42:	2600      	movhi	r6, #0
 8011e44:	2601      	movls	r6, #1
 8011e46:	42b3      	cmp	r3, r6
 8011e48:	f000 809c 	beq.w	8011f84 <pow+0x2fc>
 8011e4c:	b007      	add	sp, #28
 8011e4e:	ecbd 8b0a 	vpop	{d8-d12}
 8011e52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e56:	f000 b98f 	b.w	8012178 <__math_oflow>
 8011e5a:	f1bc 0f00 	cmp.w	ip, #0
 8011e5e:	d10a      	bne.n	8011e76 <pow+0x1ee>
 8011e60:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8012048 <pow+0x3c0>
 8011e64:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011e68:	ec53 2b17 	vmov	r2, r3, d7
 8011e6c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8011e70:	4615      	mov	r5, r2
 8011e72:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8011e76:	4a7c      	ldr	r2, [pc, #496]	@ (8012068 <pow+0x3e0>)
 8011e78:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8011e7c:	4422      	add	r2, r4
 8011e7e:	1513      	asrs	r3, r2, #20
 8011e80:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8011e84:	ee03 3a10 	vmov	s6, r3
 8011e88:	0d12      	lsrs	r2, r2, #20
 8011e8a:	4b78      	ldr	r3, [pc, #480]	@ (801206c <pow+0x3e4>)
 8011e8c:	0512      	lsls	r2, r2, #20
 8011e8e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8011e92:	1aa7      	subs	r7, r4, r2
 8011e94:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8011e98:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8011e9c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8011ea0:	1e2e      	subs	r6, r5, #0
 8011ea2:	ec47 6b14 	vmov	d4, r6, r7
 8011ea6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8011eaa:	eea4 6b05 	vfma.f64	d6, d4, d5
 8011eae:	ed93 5b00 	vldr	d5, [r3]
 8011eb2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8011eb6:	eea3 2b05 	vfma.f64	d2, d3, d5
 8011eba:	ed93 5b02 	vldr	d5, [r3, #8]
 8011ebe:	ee36 4b02 	vadd.f64	d4, d6, d2
 8011ec2:	ee32 2b44 	vsub.f64	d2, d2, d4
 8011ec6:	eea3 7b05 	vfma.f64	d7, d3, d5
 8011eca:	ed93 5b04 	vldr	d5, [r3, #16]
 8011ece:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011ed2:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011ed6:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011eda:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011ede:	ee34 8b00 	vadd.f64	d8, d4, d0
 8011ee2:	eeb0 9b40 	vmov.f64	d9, d0
 8011ee6:	ee34 4b48 	vsub.f64	d4, d4, d8
 8011eea:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8011eee:	ee34 ab00 	vadd.f64	d10, d4, d0
 8011ef2:	ed93 5b06 	vldr	d5, [r3, #24]
 8011ef6:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011efa:	ee37 7b09 	vadd.f64	d7, d7, d9
 8011efe:	ed93 4b08 	vldr	d4, [r3, #32]
 8011f02:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8011f06:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8011f0a:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011f0e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8011f12:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8011f16:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011f1a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8011f1e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011f22:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011f26:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011f2a:	eeab 7b05 	vfma.f64	d7, d11, d5
 8011f2e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8011f32:	ee21 6b04 	vmul.f64	d6, d1, d4
 8011f36:	ee16 3a90 	vmov	r3, s13
 8011f3a:	eeb0 5b46 	vmov.f64	d5, d6
 8011f3e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011f42:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8011f46:	18b2      	adds	r2, r6, r2
 8011f48:	2a3e      	cmp	r2, #62	@ 0x3e
 8011f4a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8011f4e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8011f52:	ee38 8b07 	vadd.f64	d8, d8, d7
 8011f56:	eea1 5b08 	vfma.f64	d5, d1, d8
 8011f5a:	d91b      	bls.n	8011f94 <pow+0x30c>
 8011f5c:	2a00      	cmp	r2, #0
 8011f5e:	da0b      	bge.n	8011f78 <pow+0x2f0>
 8011f60:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011f64:	ee36 0b00 	vadd.f64	d0, d6, d0
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	f43f aef8 	beq.w	8011d5e <pow+0xd6>
 8011f6e:	eeb1 0b40 	vneg.f64	d0, d0
 8011f72:	e6f4      	b.n	8011d5e <pow+0xd6>
 8011f74:	2000      	movs	r0, #0
 8011f76:	e77e      	b.n	8011e76 <pow+0x1ee>
 8011f78:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8011f7c:	d909      	bls.n	8011f92 <pow+0x30a>
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	f6bf af64 	bge.w	8011e4c <pow+0x1c4>
 8011f84:	b007      	add	sp, #28
 8011f86:	ecbd 8b0a 	vpop	{d8-d12}
 8011f8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f8e:	f000 b8eb 	b.w	8012168 <__math_uflow>
 8011f92:	2600      	movs	r6, #0
 8011f94:	4936      	ldr	r1, [pc, #216]	@ (8012070 <pow+0x3e8>)
 8011f96:	ed91 4b02 	vldr	d4, [r1, #8]
 8011f9a:	ed91 3b00 	vldr	d3, [r1]
 8011f9e:	eeb0 7b44 	vmov.f64	d7, d4
 8011fa2:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011fa6:	ee17 5a10 	vmov	r5, s14
 8011faa:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011fae:	ed91 4b04 	vldr	d4, [r1, #16]
 8011fb2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8011fb6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8011fba:	ed91 4b06 	vldr	d4, [r1, #24]
 8011fbe:	18dc      	adds	r4, r3, r3
 8011fc0:	f104 030f 	add.w	r3, r4, #15
 8011fc4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011fc8:	eea7 6b04 	vfma.f64	d6, d7, d4
 8011fcc:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8011fd0:	ee35 5b06 	vadd.f64	d5, d5, d6
 8011fd4:	ee25 6b05 	vmul.f64	d6, d5, d5
 8011fd8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8011fdc:	ed91 4b08 	vldr	d4, [r1, #32]
 8011fe0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011fe4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011fe8:	eea5 4b03 	vfma.f64	d4, d5, d3
 8011fec:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8011ff0:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011ff4:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011ff8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8011ffc:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8012000:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8012004:	eea5 4b03 	vfma.f64	d4, d5, d3
 8012008:	1940      	adds	r0, r0, r5
 801200a:	2700      	movs	r7, #0
 801200c:	eb17 020c 	adds.w	r2, r7, ip
 8012010:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8012014:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012018:	2e00      	cmp	r6, #0
 801201a:	d175      	bne.n	8012108 <pow+0x480>
 801201c:	42bd      	cmp	r5, r7
 801201e:	db29      	blt.n	8012074 <pow+0x3ec>
 8012020:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8012024:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8012028:	4610      	mov	r0, r2
 801202a:	ec41 0b10 	vmov	d0, r0, r1
 801202e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012032:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8012050 <pow+0x3c8>
 8012036:	ee20 0b07 	vmul.f64	d0, d0, d7
 801203a:	b007      	add	sp, #28
 801203c:	ecbd 8b0a 	vpop	{d8-d12}
 8012040:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012044:	f000 b8d0 	b.w	80121e8 <__math_check_oflow>
 8012048:	00000000 	.word	0x00000000
 801204c:	43300000 	.word	0x43300000
 8012050:	00000000 	.word	0x00000000
 8012054:	7f000000 	.word	0x7f000000
 8012058:	3ff00000 	.word	0x3ff00000
 801205c:	fff00000 	.word	0xfff00000
 8012060:	ffe00000 	.word	0xffe00000
 8012064:	7fe00000 	.word	0x7fe00000
 8012068:	c0196aab 	.word	0xc0196aab
 801206c:	08012830 	.word	0x08012830
 8012070:	08013878 	.word	0x08013878
 8012074:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012078:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801207c:	4610      	mov	r0, r2
 801207e:	ec41 0b15 	vmov	d5, r0, r1
 8012082:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8012086:	ee27 6b05 	vmul.f64	d6, d7, d5
 801208a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801208e:	eeb0 4bc7 	vabs.f64	d4, d7
 8012092:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8012096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801209a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8012118 <pow+0x490>
 801209e:	d52a      	bpl.n	80120f6 <pow+0x46e>
 80120a0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80120a4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80120a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ac:	ee35 5b06 	vadd.f64	d5, d5, d6
 80120b0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 80120b4:	bf58      	it	pl
 80120b6:	eeb0 4b43 	vmovpl.f64	d4, d3
 80120ba:	ee37 3b04 	vadd.f64	d3, d7, d4
 80120be:	ee34 6b43 	vsub.f64	d6, d4, d3
 80120c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80120c6:	ee36 6b05 	vadd.f64	d6, d6, d5
 80120ca:	ee36 6b03 	vadd.f64	d6, d6, d3
 80120ce:	ee36 7b44 	vsub.f64	d7, d6, d4
 80120d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120da:	d104      	bne.n	80120e6 <pow+0x45e>
 80120dc:	4632      	mov	r2, r6
 80120de:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80120e2:	ec43 2b17 	vmov	d7, r2, r3
 80120e6:	ed8d 0b02 	vstr	d0, [sp, #8]
 80120ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 80120ee:	ee26 6b00 	vmul.f64	d6, d6, d0
 80120f2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80120f6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80120fa:	b007      	add	sp, #28
 80120fc:	ecbd 8b0a 	vpop	{d8-d12}
 8012100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012104:	f000 b867 	b.w	80121d6 <__math_check_uflow>
 8012108:	ec43 2b10 	vmov	d0, r2, r3
 801210c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012110:	e625      	b.n	8011d5e <pow+0xd6>
 8012112:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8012120 <pow+0x498>
 8012116:	e622      	b.n	8011d5e <pow+0xd6>
 8012118:	00000000 	.word	0x00000000
 801211c:	00100000 	.word	0x00100000
	...

08012128 <with_errno>:
 8012128:	b510      	push	{r4, lr}
 801212a:	ed2d 8b02 	vpush	{d8}
 801212e:	eeb0 8b40 	vmov.f64	d8, d0
 8012132:	4604      	mov	r4, r0
 8012134:	f7fc fb40 	bl	800e7b8 <__errno>
 8012138:	eeb0 0b48 	vmov.f64	d0, d8
 801213c:	ecbd 8b02 	vpop	{d8}
 8012140:	6004      	str	r4, [r0, #0]
 8012142:	bd10      	pop	{r4, pc}

08012144 <xflow>:
 8012144:	b082      	sub	sp, #8
 8012146:	b158      	cbz	r0, 8012160 <xflow+0x1c>
 8012148:	eeb1 7b40 	vneg.f64	d7, d0
 801214c:	ed8d 7b00 	vstr	d7, [sp]
 8012150:	ed9d 7b00 	vldr	d7, [sp]
 8012154:	2022      	movs	r0, #34	@ 0x22
 8012156:	ee20 0b07 	vmul.f64	d0, d0, d7
 801215a:	b002      	add	sp, #8
 801215c:	f7ff bfe4 	b.w	8012128 <with_errno>
 8012160:	eeb0 7b40 	vmov.f64	d7, d0
 8012164:	e7f2      	b.n	801214c <xflow+0x8>
	...

08012168 <__math_uflow>:
 8012168:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012170 <__math_uflow+0x8>
 801216c:	f7ff bfea 	b.w	8012144 <xflow>
 8012170:	00000000 	.word	0x00000000
 8012174:	10000000 	.word	0x10000000

08012178 <__math_oflow>:
 8012178:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012180 <__math_oflow+0x8>
 801217c:	f7ff bfe2 	b.w	8012144 <xflow>
 8012180:	00000000 	.word	0x00000000
 8012184:	70000000 	.word	0x70000000

08012188 <__math_divzero>:
 8012188:	b082      	sub	sp, #8
 801218a:	2800      	cmp	r0, #0
 801218c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8012190:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012194:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012198:	ed8d 7b00 	vstr	d7, [sp]
 801219c:	ed9d 0b00 	vldr	d0, [sp]
 80121a0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80121b0 <__math_divzero+0x28>
 80121a4:	2022      	movs	r0, #34	@ 0x22
 80121a6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80121aa:	b002      	add	sp, #8
 80121ac:	f7ff bfbc 	b.w	8012128 <with_errno>
	...

080121b8 <__math_invalid>:
 80121b8:	eeb0 7b40 	vmov.f64	d7, d0
 80121bc:	eeb4 7b47 	vcmp.f64	d7, d7
 80121c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80121c8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80121cc:	d602      	bvs.n	80121d4 <__math_invalid+0x1c>
 80121ce:	2021      	movs	r0, #33	@ 0x21
 80121d0:	f7ff bfaa 	b.w	8012128 <with_errno>
 80121d4:	4770      	bx	lr

080121d6 <__math_check_uflow>:
 80121d6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80121da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121de:	d102      	bne.n	80121e6 <__math_check_uflow+0x10>
 80121e0:	2022      	movs	r0, #34	@ 0x22
 80121e2:	f7ff bfa1 	b.w	8012128 <with_errno>
 80121e6:	4770      	bx	lr

080121e8 <__math_check_oflow>:
 80121e8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8012208 <__math_check_oflow+0x20>
 80121ec:	eeb0 7bc0 	vabs.f64	d7, d0
 80121f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80121f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f8:	dd02      	ble.n	8012200 <__math_check_oflow+0x18>
 80121fa:	2022      	movs	r0, #34	@ 0x22
 80121fc:	f7ff bf94 	b.w	8012128 <with_errno>
 8012200:	4770      	bx	lr
 8012202:	bf00      	nop
 8012204:	f3af 8000 	nop.w
 8012208:	ffffffff 	.word	0xffffffff
 801220c:	7fefffff 	.word	0x7fefffff

08012210 <_init>:
 8012210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012212:	bf00      	nop
 8012214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012216:	bc08      	pop	{r3}
 8012218:	469e      	mov	lr, r3
 801221a:	4770      	bx	lr

0801221c <_fini>:
 801221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801221e:	bf00      	nop
 8012220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012222:	bc08      	pop	{r3}
 8012224:	469e      	mov	lr, r3
 8012226:	4770      	bx	lr
