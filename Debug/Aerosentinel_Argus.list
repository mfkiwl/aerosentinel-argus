
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4d8  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800d7a4  0800d7a4  0001d7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d7ec  0800d7ec  0001d7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d7f8  0800d7f8  0001d7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800d7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009e4  24000010  0800d80c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240009f4  0800d80c  000209f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002495f  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000384d  00000000  00000000  000449e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ed8  00000000  00000000  00048230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000184e  00000000  00000000  0004a108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00004ae3  00000000  00000000  0004b956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028616  00000000  00000000  00050439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001707de  00000000  00000000  00078a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000087f4  00000000  00000000  001e9230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001f1a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800d78c 	.word	0x0800d78c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800d78c 	.word	0x0800d78c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800060c:	f001 fa94 	bl	8001b38 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f002 fc14 	bl	8002e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f836 	bl	8000684 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000618:	f000 f8a4 	bl	8000764 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f001 f980 	bl	8001920 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000620:	f000 fa70 	bl	8000b04 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8000624:	f000 f8ce 	bl	80007c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000628:	f000 f9ac 	bl	8000984 <MX_I2C1_Init>
  MX_I2C2_Init();
 800062c:	f000 f9ea 	bl	8000a04 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000630:	f000 fa28 	bl	8000a84 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000634:	f000 fa8a 	bl	8000b4c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000638:	f000 fade 	bl	8000bf8 <MX_SPI2_Init>
  MX_SPI4_Init();
 800063c:	f000 fb32 	bl	8000ca4 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000640:	f000 fb86 	bl	8000d50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000644:	f000 fc48 	bl	8000ed8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000648:	f000 fca0 	bl	8000f8c <MX_TIM3_Init>
  MX_TIM4_Init();
 800064c:	f000 fcf8 	bl	8001040 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000650:	f000 fd50 	bl	80010f4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000654:	f000 fda8 	bl	80011a8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000658:	f000 fe36 	bl	80012c8 <MX_TIM12_Init>
  MX_TIM15_Init();
 800065c:	f000 fe8e 	bl	800137c <MX_TIM15_Init>
  MX_UART4_Init();
 8000660:	f000 ff12 	bl	8001488 <MX_UART4_Init>
  MX_UART5_Init();
 8000664:	f000 ff5c 	bl	8001520 <MX_UART5_Init>
  MX_UART7_Init();
 8000668:	f000 ffa6 	bl	80015b8 <MX_UART7_Init>
  MX_UART8_Init();
 800066c:	f000 fff0 	bl	8001650 <MX_UART8_Init>
  MX_USART1_Init();
 8000670:	f001 f83c 	bl	80016ec <MX_USART1_Init>
  MX_USART2_Init();
 8000674:	f001 f898 	bl	80017a8 <MX_USART2_Init>
  MX_USART3_Init();
 8000678:	f001 f8f4 	bl	8001864 <MX_USART3_Init>
  MX_ADC2_Init();
 800067c:	f000 f91c 	bl	80008b8 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x78>
	...

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09c      	sub	sp, #112	; 0x70
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068e:	224c      	movs	r2, #76	; 0x4c
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00d f84e 	bl	800d734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2220      	movs	r2, #32
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00d f848 	bl	800d734 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f004 fc45 	bl	8004f34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <SystemClock_Config+0xdc>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b6:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <SystemClock_Config+0xdc>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xdc>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ca:	bf00      	nop
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <SystemClock_Config+0xdc>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d8:	d1f8      	bne.n	80006cc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006da:	2302      	movs	r3, #2
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006de:	2301      	movs	r3, #1
 80006e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006e2:	2340      	movs	r3, #64	; 0x40
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ea:	2300      	movs	r3, #0
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ee:	2304      	movs	r3, #4
 80006f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80006f2:	230c      	movs	r3, #12
 80006f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006fa:	2303      	movs	r3, #3
 80006fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000702:	230c      	movs	r3, #12
 8000704:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000706:	2300      	movs	r3, #0
 8000708:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fc48 	bl	8004fa8 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800071e:	f001 fa37 	bl	8001b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	233f      	movs	r3, #63	; 0x3f
 8000724:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000736:	2340      	movs	r3, #64	; 0x40
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800073a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000740:	2340      	movs	r3, #64	; 0x40
 8000742:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2101      	movs	r1, #1
 8000748:	4618      	mov	r0, r3
 800074a:	f005 f807 	bl	800575c <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000754:	f001 fa1c 	bl	8001b90 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3770      	adds	r7, #112	; 0x70
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	58024800 	.word	0x58024800

08000764 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b0ae      	sub	sp, #184	; 0xb8
 8000768:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	22b8      	movs	r2, #184	; 0xb8
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f00c ffdf 	bl	800d734 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000776:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800077a:	f04f 0300 	mov.w	r3, #0
 800077e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000782:	2304      	movs	r3, #4
 8000784:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000786:	230c      	movs	r3, #12
 8000788:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 800078a:	2305      	movs	r3, #5
 800078c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000796:	23c0      	movs	r3, #192	; 0xc0
 8000798:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 fb62 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007b6:	f001 f9eb 	bl	8001b90 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	37b8      	adds	r7, #184	; 0xb8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2224      	movs	r2, #36	; 0x24
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f00c ffa9 	bl	800d734 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e2:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007e4:	4a31      	ldr	r2, [pc, #196]	; (80008ac <MX_ADC1_Init+0xe8>)
 80007e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007fe:	2204      	movs	r2, #4
 8000800:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000810:	2201      	movs	r2, #1
 8000812:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000842:	4819      	ldr	r0, [pc, #100]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000844:	f002 fdf6 	bl	8003434 <HAL_ADC_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800084e:	f001 f99f 	bl	8001b90 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	4812      	ldr	r0, [pc, #72]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800085e:	f003 fe35 	bl	80044cc <HAL_ADCEx_MultiModeConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000868:	f001 f992 	bl	8001b90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_ADC1_Init+0xec>)
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000870:	2306      	movs	r3, #6
 8000872:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_ADC1_Init+0xf0>)
 800087a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800087c:	2304      	movs	r3, #4
 800087e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000890:	f002 ffd8 	bl	8003844 <HAL_ADC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800089a:	f001 f979 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2400002c 	.word	0x2400002c
 80008ac:	40022000 	.word	0x40022000
 80008b0:	10c00010 	.word	0x10c00010
 80008b4:	47ff0000 	.word	0x47ff0000

080008b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2224      	movs	r2, #36	; 0x24
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f00c ff35 	bl	800d734 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_ADC2_Init+0xbc>)
 80008cc:	4a2a      	ldr	r2, [pc, #168]	; (8000978 <MX_ADC2_Init+0xc0>)
 80008ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_ADC2_Init+0xbc>)
 80008d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_ADC2_Init+0xbc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_ADC2_Init+0xbc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_ADC2_Init+0xbc>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_ADC2_Init+0xbc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MX_ADC2_Init+0xbc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_ADC2_Init+0xbc>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_ADC2_Init+0xbc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_ADC2_Init+0xbc>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_ADC2_Init+0xbc>)
 800090c:	2200      	movs	r2, #0
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_ADC2_Init+0xbc>)
 8000912:	2200      	movs	r2, #0
 8000914:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_ADC2_Init+0xbc>)
 8000918:	2200      	movs	r2, #0
 800091a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_ADC2_Init+0xbc>)
 800091e:	2200      	movs	r2, #0
 8000920:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_ADC2_Init+0xbc>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <MX_ADC2_Init+0xbc>)
 800092c:	f002 fd82 	bl	8003434 <HAL_ADC_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000936:	f001 f92b 	bl	8001b90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_ADC2_Init+0xc4>)
 800093c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093e:	2306      	movs	r3, #6
 8000940:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_ADC2_Init+0xc8>)
 8000948:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800094a:	2304      	movs	r3, #4
 800094c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_ADC2_Init+0xbc>)
 800095e:	f002 ff71 	bl	8003844 <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000968:	f001 f912 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2400009c 	.word	0x2400009c
 8000978:	40022100 	.word	0x40022100
 800097c:	14f00020 	.word	0x14f00020
 8000980:	47ff0000 	.word	0x47ff0000

08000984 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_I2C1_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <MX_I2C1_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_I2C1_Init+0x74>)
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <MX_I2C1_Init+0x7c>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_I2C1_Init+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009be:	480e      	ldr	r0, [pc, #56]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009c0:	f004 f984 	bl	8004ccc <HAL_I2C_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ca:	f001 f8e1 	bl	8001b90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009d2:	f004 fa17 	bl	8004e04 <HAL_I2CEx_ConfigAnalogFilter>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f001 f8d8 	bl	8001b90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009e4:	f004 fa59 	bl	8004e9a <HAL_I2CEx_ConfigDigitalFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f001 f8cf 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2400010c 	.word	0x2400010c
 80009fc:	40005400 	.word	0x40005400
 8000a00:	00707cbb 	.word	0x00707cbb

08000a04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_I2C2_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <MX_I2C2_Init+0x7c>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a3e:	480e      	ldr	r0, [pc, #56]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a40:	f004 f944 	bl	8004ccc <HAL_I2C_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a4a:	f001 f8a1 	bl	8001b90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a52:	f004 f9d7 	bl	8004e04 <HAL_I2CEx_ConfigAnalogFilter>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a5c:	f001 f898 	bl	8001b90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_I2C2_Init+0x74>)
 8000a64:	f004 fa19 	bl	8004e9a <HAL_I2CEx_ConfigDigitalFilter>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f001 f88f 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	24000160 	.word	0x24000160
 8000a7c:	40005800 	.word	0x40005800
 8000a80:	00707cbb 	.word	0x00707cbb

08000a84 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <MX_I2C4_Init+0x78>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000a90:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <MX_I2C4_Init+0x7c>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000ac0:	f004 f904 	bl	8004ccc <HAL_I2C_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000aca:	f001 f861 	bl	8001b90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000ad2:	f004 f997 	bl	8004e04 <HAL_I2CEx_ConfigAnalogFilter>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000adc:	f001 f858 	bl	8001b90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_I2C4_Init+0x74>)
 8000ae4:	f004 f9d9 	bl	8004e9a <HAL_I2CEx_ConfigDigitalFilter>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000aee:	f001 f84f 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	240001b4 	.word	0x240001b4
 8000afc:	58001c00 	.word	0x58001c00
 8000b00:	00707cbb 	.word	0x00707cbb

08000b04 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_SDMMC1_SD_Init+0x40>)
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <MX_SDMMC1_SD_Init+0x44>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_SDMMC1_SD_Init+0x40>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_SDMMC1_SD_Init+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_SDMMC1_SD_Init+0x40>)
 8000b1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b20:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_SDMMC1_SD_Init+0x40>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_SDMMC1_SD_Init+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_SDMMC1_SD_Init+0x40>)
 8000b30:	f007 fd86 	bl	8008640 <HAL_SD_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000b3a:	f001 f829 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	24000208 	.word	0x24000208
 8000b48:	52007000 	.word	0x52007000

08000b4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b52:	4a28      	ldr	r2, [pc, #160]	; (8000bf4 <MX_SPI1_Init+0xa8>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b66:	2203      	movs	r2, #3
 8000b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_SPI1_Init+0xa4>)
 8000bdc:	f008 fd9e 	bl	800971c <HAL_SPI_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000be6:	f000 ffd3 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	24000284 	.word	0x24000284
 8000bf4:	40013000 	.word	0x40013000

08000bf8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000bfe:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <MX_SPI2_Init+0xa8>)
 8000c00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c12:	2203      	movs	r2, #3
 8000c14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_SPI2_Init+0xa4>)
 8000c88:	f008 fd48 	bl	800971c <HAL_SPI_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000c92:	f000 ff7d 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2400030c 	.word	0x2400030c
 8000ca0:	40003800 	.word	0x40003800

08000ca4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000caa:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <MX_SPI4_Init+0xa8>)
 8000cac:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cb4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb6:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000cd4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_SPI4_Init+0xa4>)
 8000d34:	f008 fcf2 	bl	800971c <HAL_SPI_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000d3e:	f000 ff27 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24000394 	.word	0x24000394
 8000d4c:	40013400 	.word	0x40013400

08000d50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b09c      	sub	sp, #112	; 0x70
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2234      	movs	r2, #52	; 0x34
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f00c fcd2 	bl	800d734 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d90:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000d92:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <MX_TIM1_Init+0x184>)
 8000d94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d96:	4b4e      	ldr	r3, [pc, #312]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b4c      	ldr	r3, [pc, #304]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000da2:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b49      	ldr	r3, [pc, #292]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db0:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db6:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dbc:	4844      	ldr	r0, [pc, #272]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000dbe:	f008 fdec 	bl	800999a <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000dc8:	f000 fee2 	bl	8001b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dd2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	483d      	ldr	r0, [pc, #244]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000dda:	f008 ffa1 	bl	8009d20 <HAL_TIM_ConfigClockSource>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000de4:	f000 fed4 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000de8:	4839      	ldr	r0, [pc, #228]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000dea:	f008 fe2d 	bl	8009a48 <HAL_TIM_PWM_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000df4:	f000 fecc 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4831      	ldr	r0, [pc, #196]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000e0c:	f009 fca6 	bl	800a75c <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e16:	f000 febb 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1a:	2360      	movs	r3, #96	; 0x60
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e22:	2300      	movs	r3, #0
 8000e24:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e26:	2300      	movs	r3, #0
 8000e28:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4824      	ldr	r0, [pc, #144]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000e40:	f008 fe5a 	bl	8009af8 <HAL_TIM_PWM_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e4a:	f000 fea1 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e52:	2204      	movs	r2, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	481e      	ldr	r0, [pc, #120]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000e58:	f008 fe4e 	bl	8009af8 <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e62:	f000 fe95 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4818      	ldr	r0, [pc, #96]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000e70:	f008 fe42 	bl	8009af8 <HAL_TIM_PWM_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000e7a:	f000 fe89 	bl	8001b90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ea0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000eb4:	f009 fcee 	bl	800a894 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000ebe:	f000 fe67 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ec2:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <MX_TIM1_Init+0x180>)
 8000ec4:	f001 faf0 	bl	80024a8 <HAL_TIM_MspPostInit>

}
 8000ec8:	bf00      	nop
 8000eca:	3770      	adds	r7, #112	; 0x70
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2400041c 	.word	0x2400041c
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_TIM2_Init+0xb0>)
 8000efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_TIM2_Init+0xb0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_TIM2_Init+0xb0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_TIM2_Init+0xb0>)
 8000f12:	f04f 32ff 	mov.w	r2, #4294967295
 8000f16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_TIM2_Init+0xb0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_TIM2_Init+0xb0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <MX_TIM2_Init+0xb0>)
 8000f26:	f008 fd8f 	bl	8009a48 <HAL_TIM_PWM_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000f30:	f000 fe2e 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_TIM2_Init+0xb0>)
 8000f44:	f009 fc0a 	bl	800a75c <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f4e:	f000 fe1f 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f52:	2360      	movs	r3, #96	; 0x60
 8000f54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <MX_TIM2_Init+0xb0>)
 8000f6a:	f008 fdc5 	bl	8009af8 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f74:	f000 fe0c 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <MX_TIM2_Init+0xb0>)
 8000f7a:	f001 fa95 	bl	80024a8 <HAL_TIM_MspPostInit>

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000468 	.word	0x24000468

08000f8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	615a      	str	r2, [r3, #20]
 8000fae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MX_TIM3_Init+0xac>)
 8000fb2:	4a22      	ldr	r2, [pc, #136]	; (800103c <MX_TIM3_Init+0xb0>)
 8000fb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_TIM3_Init+0xac>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <MX_TIM3_Init+0xac>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_TIM3_Init+0xac>)
 8000fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_TIM3_Init+0xac>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_TIM3_Init+0xac>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <MX_TIM3_Init+0xac>)
 8000fd8:	f008 fd36 	bl	8009a48 <HAL_TIM_PWM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000fe2:	f000 fdd5 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4810      	ldr	r0, [pc, #64]	; (8001038 <MX_TIM3_Init+0xac>)
 8000ff6:	f009 fbb1 	bl	800a75c <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001000:	f000 fdc6 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001004:	2360      	movs	r3, #96	; 0x60
 8001006:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <MX_TIM3_Init+0xac>)
 800101c:	f008 fd6c 	bl	8009af8 <HAL_TIM_PWM_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001026:	f000 fdb3 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <MX_TIM3_Init+0xac>)
 800102c:	f001 fa3c 	bl	80024a8 <HAL_TIM_MspPostInit>

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	240004b4 	.word	0x240004b4
 800103c:	40000400 	.word	0x40000400

08001040 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001064:	4b21      	ldr	r3, [pc, #132]	; (80010ec <MX_TIM4_Init+0xac>)
 8001066:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <MX_TIM4_Init+0xb0>)
 8001068:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <MX_TIM4_Init+0xac>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <MX_TIM4_Init+0xac>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_TIM4_Init+0xac>)
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_TIM4_Init+0xac>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_TIM4_Init+0xac>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800108a:	4818      	ldr	r0, [pc, #96]	; (80010ec <MX_TIM4_Init+0xac>)
 800108c:	f008 fcdc 	bl	8009a48 <HAL_TIM_PWM_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001096:	f000 fd7b 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	4810      	ldr	r0, [pc, #64]	; (80010ec <MX_TIM4_Init+0xac>)
 80010aa:	f009 fb57 	bl	800a75c <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80010b4:	f000 fd6c 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b8:	2360      	movs	r3, #96	; 0x60
 80010ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <MX_TIM4_Init+0xac>)
 80010d0:	f008 fd12 	bl	8009af8 <HAL_TIM_PWM_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80010da:	f000 fd59 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010de:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_TIM4_Init+0xac>)
 80010e0:	f001 f9e2 	bl	80024a8 <HAL_TIM_MspPostInit>

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	24000500 	.word	0x24000500
 80010f0:	40000800 	.word	0x40000800

080010f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <MX_TIM5_Init+0xac>)
 800111a:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <MX_TIM5_Init+0xb0>)
 800111c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <MX_TIM5_Init+0xac>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <MX_TIM5_Init+0xac>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_TIM5_Init+0xac>)
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_TIM5_Init+0xac>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_TIM5_Init+0xac>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800113e:	4818      	ldr	r0, [pc, #96]	; (80011a0 <MX_TIM5_Init+0xac>)
 8001140:	f008 fc82 	bl	8009a48 <HAL_TIM_PWM_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800114a:	f000 fd21 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4810      	ldr	r0, [pc, #64]	; (80011a0 <MX_TIM5_Init+0xac>)
 800115e:	f009 fafd 	bl	800a75c <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001168:	f000 fd12 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116c:	2360      	movs	r3, #96	; 0x60
 800116e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <MX_TIM5_Init+0xac>)
 8001184:	f008 fcb8 	bl	8009af8 <HAL_TIM_PWM_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800118e:	f000 fcff 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <MX_TIM5_Init+0xac>)
 8001194:	f001 f988 	bl	80024a8 <HAL_TIM_MspPostInit>

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2400054c 	.word	0x2400054c
 80011a4:	40000c00 	.word	0x40000c00

080011a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	; 0x60
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2234      	movs	r2, #52	; 0x34
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00c faad 	bl	800d734 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <MX_TIM8_Init+0x118>)
 80011dc:	4a39      	ldr	r2, [pc, #228]	; (80012c4 <MX_TIM8_Init+0x11c>)
 80011de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <MX_TIM8_Init+0x118>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <MX_TIM8_Init+0x118>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <MX_TIM8_Init+0x118>)
 80011ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <MX_TIM8_Init+0x118>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011fa:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <MX_TIM8_Init+0x118>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <MX_TIM8_Init+0x118>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001206:	482e      	ldr	r0, [pc, #184]	; (80012c0 <MX_TIM8_Init+0x118>)
 8001208:	f008 fc1e 	bl	8009a48 <HAL_TIM_PWM_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 fcbd 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001222:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001226:	4619      	mov	r1, r3
 8001228:	4825      	ldr	r0, [pc, #148]	; (80012c0 <MX_TIM8_Init+0x118>)
 800122a:	f009 fa97 	bl	800a75c <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001234:	f000 fcac 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001238:	2360      	movs	r3, #96	; 0x60
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001240:	2300      	movs	r3, #0
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001244:	2300      	movs	r3, #0
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001254:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4818      	ldr	r0, [pc, #96]	; (80012c0 <MX_TIM8_Init+0x118>)
 800125e:	f008 fc4b 	bl	8009af8 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001268:	f000 fc92 	bl	8001b90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001284:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800128e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <MX_TIM8_Init+0x118>)
 80012a2:	f009 faf7 	bl	800a894 <HAL_TIMEx_ConfigBreakDeadTime>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80012ac:	f000 fc70 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <MX_TIM8_Init+0x118>)
 80012b2:	f001 f8f9 	bl	80024a8 <HAL_TIM_MspPostInit>

}
 80012b6:	bf00      	nop
 80012b8:	3760      	adds	r7, #96	; 0x60
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000598 	.word	0x24000598
 80012c4:	40010400 	.word	0x40010400

080012c8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_TIM12_Init+0xac>)
 80012ee:	4a22      	ldr	r2, [pc, #136]	; (8001378 <MX_TIM12_Init+0xb0>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_TIM12_Init+0xac>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_TIM12_Init+0xac>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM12_Init+0xac>)
 8001300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001304:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_TIM12_Init+0xac>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM12_Init+0xac>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001312:	4818      	ldr	r0, [pc, #96]	; (8001374 <MX_TIM12_Init+0xac>)
 8001314:	f008 fb98 	bl	8009a48 <HAL_TIM_PWM_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800131e:	f000 fc37 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4810      	ldr	r0, [pc, #64]	; (8001374 <MX_TIM12_Init+0xac>)
 8001332:	f009 fa13 	bl	800a75c <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800133c:	f000 fc28 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001340:	2360      	movs	r3, #96	; 0x60
 8001342:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM12_Init+0xac>)
 8001358:	f008 fbce 	bl	8009af8 <HAL_TIM_PWM_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8001362:	f000 fc15 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM12_Init+0xac>)
 8001368:	f001 f89e 	bl	80024a8 <HAL_TIM_MspPostInit>

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	240005e4 	.word	0x240005e4
 8001378:	40001800 	.word	0x40001800

0800137c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b098      	sub	sp, #96	; 0x60
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2234      	movs	r2, #52	; 0x34
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00c f9c3 	bl	800d734 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80013ae:	4b34      	ldr	r3, [pc, #208]	; (8001480 <MX_TIM15_Init+0x104>)
 80013b0:	4a34      	ldr	r2, [pc, #208]	; (8001484 <MX_TIM15_Init+0x108>)
 80013b2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <MX_TIM15_Init+0x104>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <MX_TIM15_Init+0x104>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <MX_TIM15_Init+0x104>)
 80013c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <MX_TIM15_Init+0x104>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_TIM15_Init+0x104>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_TIM15_Init+0x104>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80013da:	4829      	ldr	r0, [pc, #164]	; (8001480 <MX_TIM15_Init+0x104>)
 80013dc:	f008 fb34 	bl	8009a48 <HAL_TIM_PWM_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80013e6:	f000 fbd3 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f6:	4619      	mov	r1, r3
 80013f8:	4821      	ldr	r0, [pc, #132]	; (8001480 <MX_TIM15_Init+0x104>)
 80013fa:	f009 f9af 	bl	800a75c <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001404:	f000 fbc4 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001408:	2360      	movs	r3, #96	; 0x60
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001410:	2300      	movs	r3, #0
 8001412:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001414:	2300      	movs	r3, #0
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001424:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	4814      	ldr	r0, [pc, #80]	; (8001480 <MX_TIM15_Init+0x104>)
 800142e:	f008 fb63 	bl	8009af8 <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001438:	f000 fbaa 	bl	8001b90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001454:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <MX_TIM15_Init+0x104>)
 8001464:	f009 fa16 	bl	800a894 <HAL_TIMEx_ConfigBreakDeadTime>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800146e:	f000 fb8f 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <MX_TIM15_Init+0x104>)
 8001474:	f001 f818 	bl	80024a8 <HAL_TIM_MspPostInit>

}
 8001478:	bf00      	nop
 800147a:	3760      	adds	r7, #96	; 0x60
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	24000630 	.word	0x24000630
 8001484:	40014000 	.word	0x40014000

08001488 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <MX_UART4_Init+0x90>)
 800148e:	4a23      	ldr	r2, [pc, #140]	; (800151c <MX_UART4_Init+0x94>)
 8001490:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_UART4_Init+0x90>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_UART4_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <MX_UART4_Init+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_UART4_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_UART4_Init+0x90>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_UART4_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_UART4_Init+0x90>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_UART4_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_UART4_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_UART4_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014d0:	4811      	ldr	r0, [pc, #68]	; (8001518 <MX_UART4_Init+0x90>)
 80014d2:	f009 fa6b 	bl	800a9ac <HAL_UART_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80014dc:	f000 fb58 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e0:	2100      	movs	r1, #0
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <MX_UART4_Init+0x90>)
 80014e4:	f00a fb77 	bl	800bbd6 <HAL_UARTEx_SetTxFifoThreshold>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80014ee:	f000 fb4f 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f2:	2100      	movs	r1, #0
 80014f4:	4808      	ldr	r0, [pc, #32]	; (8001518 <MX_UART4_Init+0x90>)
 80014f6:	f00a fbac 	bl	800bc52 <HAL_UARTEx_SetRxFifoThreshold>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001500:	f000 fb46 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_UART4_Init+0x90>)
 8001506:	f00a fb2d 	bl	800bb64 <HAL_UARTEx_DisableFifoMode>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001510:	f000 fb3e 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2400067c 	.word	0x2400067c
 800151c:	40004c00 	.word	0x40004c00

08001520 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <MX_UART5_Init+0x90>)
 8001526:	4a23      	ldr	r2, [pc, #140]	; (80015b4 <MX_UART5_Init+0x94>)
 8001528:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <MX_UART5_Init+0x90>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <MX_UART5_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <MX_UART5_Init+0x90>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_UART5_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_UART5_Init+0x90>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <MX_UART5_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <MX_UART5_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_UART5_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_UART5_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_UART5_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001568:	4811      	ldr	r0, [pc, #68]	; (80015b0 <MX_UART5_Init+0x90>)
 800156a:	f009 fa1f 	bl	800a9ac <HAL_UART_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001574:	f000 fb0c 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	480d      	ldr	r0, [pc, #52]	; (80015b0 <MX_UART5_Init+0x90>)
 800157c:	f00a fb2b 	bl	800bbd6 <HAL_UARTEx_SetTxFifoThreshold>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001586:	f000 fb03 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158a:	2100      	movs	r1, #0
 800158c:	4808      	ldr	r0, [pc, #32]	; (80015b0 <MX_UART5_Init+0x90>)
 800158e:	f00a fb60 	bl	800bc52 <HAL_UARTEx_SetRxFifoThreshold>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001598:	f000 fafa 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_UART5_Init+0x90>)
 800159e:	f00a fae1 	bl	800bb64 <HAL_UARTEx_DisableFifoMode>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80015a8:	f000 faf2 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	24000710 	.word	0x24000710
 80015b4:	40005000 	.word	0x40005000

080015b8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <MX_UART7_Init+0x90>)
 80015be:	4a23      	ldr	r2, [pc, #140]	; (800164c <MX_UART7_Init+0x94>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <MX_UART7_Init+0x90>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_UART7_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_UART7_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_UART7_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_UART7_Init+0x90>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_UART7_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_UART7_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_UART7_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_UART7_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_UART7_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <MX_UART7_Init+0x90>)
 8001602:	f009 f9d3 	bl	800a9ac <HAL_UART_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800160c:	f000 fac0 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001610:	2100      	movs	r1, #0
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_UART7_Init+0x90>)
 8001614:	f00a fadf 	bl	800bbd6 <HAL_UARTEx_SetTxFifoThreshold>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800161e:	f000 fab7 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001622:	2100      	movs	r1, #0
 8001624:	4808      	ldr	r0, [pc, #32]	; (8001648 <MX_UART7_Init+0x90>)
 8001626:	f00a fb14 	bl	800bc52 <HAL_UARTEx_SetRxFifoThreshold>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001630:	f000 faae 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_UART7_Init+0x90>)
 8001636:	f00a fa95 	bl	800bb64 <HAL_UARTEx_DisableFifoMode>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001640:	f000 faa6 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	240007a4 	.word	0x240007a4
 800164c:	40007800 	.word	0x40007800

08001650 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <MX_UART8_Init+0x94>)
 8001656:	4a24      	ldr	r2, [pc, #144]	; (80016e8 <MX_UART8_Init+0x98>)
 8001658:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <MX_UART8_Init+0x94>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <MX_UART8_Init+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <MX_UART8_Init+0x94>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <MX_UART8_Init+0x94>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <MX_UART8_Init+0x94>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_UART8_Init+0x94>)
 800167c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001680:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_UART8_Init+0x94>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_UART8_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_UART8_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_UART8_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800169a:	4812      	ldr	r0, [pc, #72]	; (80016e4 <MX_UART8_Init+0x94>)
 800169c:	f009 f986 	bl	800a9ac <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 80016a6:	f000 fa73 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_UART8_Init+0x94>)
 80016ae:	f00a fa92 	bl	800bbd6 <HAL_UARTEx_SetTxFifoThreshold>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 80016b8:	f000 fa6a 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	4809      	ldr	r0, [pc, #36]	; (80016e4 <MX_UART8_Init+0x94>)
 80016c0:	f00a fac7 	bl	800bc52 <HAL_UARTEx_SetRxFifoThreshold>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 80016ca:	f000 fa61 	bl	8001b90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_UART8_Init+0x94>)
 80016d0:	f00a fa48 	bl	800bb64 <HAL_UARTEx_DisableFifoMode>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 80016da:	f000 fa59 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24000838 	.word	0x24000838
 80016e8:	40007c00 	.word	0x40007c00

080016ec <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <MX_USART1_Init+0xb4>)
 80016f2:	4a2c      	ldr	r2, [pc, #176]	; (80017a4 <MX_USART1_Init+0xb8>)
 80016f4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <MX_USART1_Init+0xb4>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80016fe:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <MX_USART1_Init+0xb4>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <MX_USART1_Init+0xb4>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <MX_USART1_Init+0xb4>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <MX_USART1_Init+0xb4>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <MX_USART1_Init+0xb4>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <MX_USART1_Init+0xb4>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_USART1_Init+0xb4>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_USART1_Init+0xb4>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_USART1_Init+0xb4>)
 8001730:	2201      	movs	r2, #1
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001734:	481a      	ldr	r0, [pc, #104]	; (80017a0 <MX_USART1_Init+0xb4>)
 8001736:	f00a fb19 	bl	800bd6c <HAL_USART_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8001740:	f000 fa26 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	4816      	ldr	r0, [pc, #88]	; (80017a0 <MX_USART1_Init+0xb4>)
 8001748:	f00b fa40 	bl	800cbcc <HAL_USARTEx_SetTxFifoThreshold>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001752:	f000 fa1d 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	4811      	ldr	r0, [pc, #68]	; (80017a0 <MX_USART1_Init+0xb4>)
 800175a:	f00b fa75 	bl	800cc48 <HAL_USARTEx_SetRxFifoThreshold>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8001764:	f000 fa14 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_USART1_Init+0xb4>)
 800176c:	f00b f9b8 	bl	800cae0 <HAL_USARTEx_ConfigNSS>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8001776:	f000 fa0b 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 800177a:	4809      	ldr	r0, [pc, #36]	; (80017a0 <MX_USART1_Init+0xb4>)
 800177c:	f00b f9ed 	bl	800cb5a <HAL_USARTEx_DisableFifoMode>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 8001786:	f000 fa03 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_USART1_Init+0xb4>)
 800178c:	f00b f953 	bl	800ca36 <HAL_USARTEx_EnableSlaveMode>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART1_Init+0xae>
  {
    Error_Handler();
 8001796:	f000 f9fb 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	240008cc 	.word	0x240008cc
 80017a4:	40011000 	.word	0x40011000

080017a8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <MX_USART2_Init+0xb4>)
 80017ae:	4a2c      	ldr	r2, [pc, #176]	; (8001860 <MX_USART2_Init+0xb8>)
 80017b0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <MX_USART2_Init+0xb4>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <MX_USART2_Init+0xb4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <MX_USART2_Init+0xb4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <MX_USART2_Init+0xb4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <MX_USART2_Init+0xb4>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <MX_USART2_Init+0xb4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <MX_USART2_Init+0xb4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_USART2_Init+0xb4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_USART2_Init+0xb4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <MX_USART2_Init+0xb4>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80017f0:	481a      	ldr	r0, [pc, #104]	; (800185c <MX_USART2_Init+0xb4>)
 80017f2:	f00a fabb 	bl	800bd6c <HAL_USART_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 80017fc:	f000 f9c8 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001800:	2100      	movs	r1, #0
 8001802:	4816      	ldr	r0, [pc, #88]	; (800185c <MX_USART2_Init+0xb4>)
 8001804:	f00b f9e2 	bl	800cbcc <HAL_USARTEx_SetTxFifoThreshold>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 800180e:	f000 f9bf 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	4811      	ldr	r0, [pc, #68]	; (800185c <MX_USART2_Init+0xb4>)
 8001816:	f00b fa17 	bl	800cc48 <HAL_USARTEx_SetRxFifoThreshold>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8001820:	f000 f9b6 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart2, USART_NSS_HARD) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_USART2_Init+0xb4>)
 8001828:	f00b f95a 	bl	800cae0 <HAL_USARTEx_ConfigNSS>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USART2_Init+0x8e>
  {
    Error_Handler();
 8001832:	f000 f9ad 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <MX_USART2_Init+0xb4>)
 8001838:	f00b f98f 	bl	800cb5a <HAL_USARTEx_DisableFifoMode>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART2_Init+0x9e>
  {
    Error_Handler();
 8001842:	f000 f9a5 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_USART2_Init+0xb4>)
 8001848:	f00b f8f5 	bl	800ca36 <HAL_USARTEx_EnableSlaveMode>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART2_Init+0xae>
  {
    Error_Handler();
 8001852:	f000 f99d 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2400092c 	.word	0x2400092c
 8001860:	40004400 	.word	0x40004400

08001864 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <MX_USART3_Init+0xb4>)
 800186a:	4a2c      	ldr	r2, [pc, #176]	; (800191c <MX_USART3_Init+0xb8>)
 800186c:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <MX_USART3_Init+0xb4>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_USART3_Init+0xb4>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <MX_USART3_Init+0xb4>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_USART3_Init+0xb4>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <MX_USART3_Init+0xb4>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_USART3_Init+0xb4>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <MX_USART3_Init+0xb4>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_USART3_Init+0xb4>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_USART3_Init+0xb4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_USART3_Init+0xb4>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80018ac:	481a      	ldr	r0, [pc, #104]	; (8001918 <MX_USART3_Init+0xb4>)
 80018ae:	f00a fa5d 	bl	800bd6c <HAL_USART_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_USART3_Init+0x58>
  {
    Error_Handler();
 80018b8:	f000 f96a 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018bc:	2100      	movs	r1, #0
 80018be:	4816      	ldr	r0, [pc, #88]	; (8001918 <MX_USART3_Init+0xb4>)
 80018c0:	f00b f984 	bl	800cbcc <HAL_USARTEx_SetTxFifoThreshold>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 80018ca:	f000 f961 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ce:	2100      	movs	r1, #0
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <MX_USART3_Init+0xb4>)
 80018d2:	f00b f9b9 	bl	800cc48 <HAL_USARTEx_SetRxFifoThreshold>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 80018dc:	f000 f958 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 80018e0:	2100      	movs	r1, #0
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_USART3_Init+0xb4>)
 80018e4:	f00b f8fc 	bl	800cae0 <HAL_USARTEx_ConfigNSS>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 80018ee:	f000 f94f 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 80018f2:	4809      	ldr	r0, [pc, #36]	; (8001918 <MX_USART3_Init+0xb4>)
 80018f4:	f00b f931 	bl	800cb5a <HAL_USARTEx_DisableFifoMode>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 80018fe:	f000 f947 	bl	8001b90 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_USART3_Init+0xb4>)
 8001904:	f00b f897 	bl	800ca36 <HAL_USARTEx_EnableSlaveMode>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 800190e:	f000 f93f 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2400098c 	.word	0x2400098c
 800191c:	40004800 	.word	0x40004800

08001920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08c      	sub	sp, #48	; 0x30
 8001924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	4b7a      	ldr	r3, [pc, #488]	; (8001b20 <MX_GPIO_Init+0x200>)
 8001938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193c:	4a78      	ldr	r2, [pc, #480]	; (8001b20 <MX_GPIO_Init+0x200>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001946:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <MX_GPIO_Init+0x200>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001954:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <MX_GPIO_Init+0x200>)
 8001956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195a:	4a71      	ldr	r2, [pc, #452]	; (8001b20 <MX_GPIO_Init+0x200>)
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001964:	4b6e      	ldr	r3, [pc, #440]	; (8001b20 <MX_GPIO_Init+0x200>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <MX_GPIO_Init+0x200>)
 8001974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001978:	4a69      	ldr	r2, [pc, #420]	; (8001b20 <MX_GPIO_Init+0x200>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <MX_GPIO_Init+0x200>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <MX_GPIO_Init+0x200>)
 8001992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001996:	4a62      	ldr	r2, [pc, #392]	; (8001b20 <MX_GPIO_Init+0x200>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <MX_GPIO_Init+0x200>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ae:	4b5c      	ldr	r3, [pc, #368]	; (8001b20 <MX_GPIO_Init+0x200>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b4:	4a5a      	ldr	r2, [pc, #360]	; (8001b20 <MX_GPIO_Init+0x200>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <MX_GPIO_Init+0x200>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019cc:	4b54      	ldr	r3, [pc, #336]	; (8001b20 <MX_GPIO_Init+0x200>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d2:	4a53      	ldr	r2, [pc, #332]	; (8001b20 <MX_GPIO_Init+0x200>)
 80019d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <MX_GPIO_Init+0x200>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2101      	movs	r1, #1
 80019ee:	484d      	ldr	r0, [pc, #308]	; (8001b24 <MX_GPIO_Init+0x204>)
 80019f0:	f003 f952 	bl	8004c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019fa:	484b      	ldr	r0, [pc, #300]	; (8001b28 <MX_GPIO_Init+0x208>)
 80019fc:	f003 f94c 	bl	8004c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001a00:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4843      	ldr	r0, [pc, #268]	; (8001b24 <MX_GPIO_Init+0x204>)
 8001a16:	f002 ff97 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE10 PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_12;
 8001a1a:	f245 4308 	movw	r3, #21512	; 0x5408
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	483f      	ldr	r0, [pc, #252]	; (8001b2c <MX_GPIO_Init+0x20c>)
 8001a30:	f002 ff8a 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a34:	2310      	movs	r3, #16
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	483a      	ldr	r0, [pc, #232]	; (8001b30 <MX_GPIO_Init+0x210>)
 8001a48:	f002 ff7e 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a50:	2303      	movs	r3, #3
 8001a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4834      	ldr	r0, [pc, #208]	; (8001b30 <MX_GPIO_Init+0x210>)
 8001a60:	f002 ff72 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a64:	2301      	movs	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	482a      	ldr	r0, [pc, #168]	; (8001b24 <MX_GPIO_Init+0x204>)
 8001a7c:	f002 ff64 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a80:	2308      	movs	r3, #8
 8001a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a84:	2303      	movs	r3, #3
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4824      	ldr	r0, [pc, #144]	; (8001b24 <MX_GPIO_Init+0x204>)
 8001a94:	f002 ff58 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	481f      	ldr	r0, [pc, #124]	; (8001b28 <MX_GPIO_Init+0x208>)
 8001aac:	f002 ff4c 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4817      	ldr	r0, [pc, #92]	; (8001b28 <MX_GPIO_Init+0x208>)
 8001aca:	f002 ff3d 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4814      	ldr	r0, [pc, #80]	; (8001b34 <MX_GPIO_Init+0x214>)
 8001ae2:	f002 ff31 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aec:	2303      	movs	r3, #3
 8001aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	480c      	ldr	r0, [pc, #48]	; (8001b2c <MX_GPIO_Init+0x20c>)
 8001afc:	f002 ff24 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b00:	2308      	movs	r3, #8
 8001b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b04:	2303      	movs	r3, #3
 8001b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	4808      	ldr	r0, [pc, #32]	; (8001b34 <MX_GPIO_Init+0x214>)
 8001b14:	f002 ff18 	bl	8004948 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b18:	bf00      	nop
 8001b1a:	3730      	adds	r7, #48	; 0x30
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	58024400 	.word	0x58024400
 8001b24:	58020800 	.word	0x58020800
 8001b28:	58020400 	.word	0x58020400
 8001b2c:	58021000 	.word	0x58021000
 8001b30:	58020c00 	.word	0x58020c00
 8001b34:	58020000 	.word	0x58020000

08001b38 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b3e:	463b      	mov	r3, r7
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b4a:	f002 fe85 	bl	8004858 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001b5a:	231f      	movs	r3, #31
 8001b5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001b5e:	2387      	movs	r3, #135	; 0x87
 8001b60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001b66:	2300      	movs	r3, #0
 8001b68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fea3 	bl	80048c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b82:	2004      	movs	r0, #4
 8001b84:	f002 fe80 	bl	8004888 <HAL_MPU_Enable>

}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b94:	b672      	cpsid	i
}
 8001b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <Error_Handler+0x8>
	...

08001b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_MspInit+0x30>)
 8001ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ba8:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_MspInit+0x30>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_MspInit+0x30>)
 8001bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	58024400 	.word	0x58024400

08001bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a39      	ldr	r2, [pc, #228]	; (8001cd4 <HAL_ADC_MspInit+0x104>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d133      	bne.n	8001c5a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bf2:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_ADC_MspInit+0x108>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	4a37      	ldr	r2, [pc, #220]	; (8001cd8 <HAL_ADC_MspInit+0x108>)
 8001bfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_ADC_MspInit+0x108>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10e      	bne.n	8001c22 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c04:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c0a:	4a34      	ldr	r2, [pc, #208]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c0c:	f043 0320 	orr.w	r3, r3, #32
 8001c10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c28:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c32:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c40:	2330      	movs	r3, #48	; 0x30
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c44:	2303      	movs	r3, #3
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4823      	ldr	r0, [pc, #140]	; (8001ce0 <HAL_ADC_MspInit+0x110>)
 8001c54:	f002 fe78 	bl	8004948 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c58:	e037      	b.n	8001cca <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <HAL_ADC_MspInit+0x114>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d132      	bne.n	8001cca <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_ADC_MspInit+0x108>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <HAL_ADC_MspInit+0x108>)
 8001c6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_ADC_MspInit+0x108>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d10e      	bne.n	8001c94 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c7c:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c7e:	f043 0320 	orr.w	r3, r3, #32
 8001c82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9a:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_ADC_MspInit+0x10c>)
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <HAL_ADC_MspInit+0x118>)
 8001cc6:	f002 fe3f 	bl	8004948 <HAL_GPIO_Init>
}
 8001cca:	bf00      	nop
 8001ccc:	3730      	adds	r7, #48	; 0x30
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	240009ec 	.word	0x240009ec
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	58020800 	.word	0x58020800
 8001ce4:	40022100 	.word	0x40022100
 8001ce8:	58020400 	.word	0x58020400

08001cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0bc      	sub	sp, #240	; 0xf0
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d04:	f107 0320 	add.w	r3, r7, #32
 8001d08:	22b8      	movs	r2, #184	; 0xb8
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00b fd11 	bl	800d734 <memset>
  if(hi2c->Instance==I2C1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a74      	ldr	r2, [pc, #464]	; (8001ee8 <HAL_I2C_MspInit+0x1fc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d147      	bne.n	8001dac <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d1c:	f04f 0208 	mov.w	r2, #8
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2e:	f107 0320 	add.w	r3, r7, #32
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 f89e 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001d3e:	f7ff ff27 	bl	8001b90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	4a68      	ldr	r2, [pc, #416]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d52:	4b66      	ldr	r3, [pc, #408]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d60:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d68:	2312      	movs	r3, #18
 8001d6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d84:	4619      	mov	r1, r3
 8001d86:	485a      	ldr	r0, [pc, #360]	; (8001ef0 <HAL_I2C_MspInit+0x204>)
 8001d88:	f002 fdde 	bl	8004948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d8c:	4b57      	ldr	r3, [pc, #348]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d92:	4a56      	ldr	r2, [pc, #344]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d9c:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001daa:	e098      	b.n	8001ede <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a50      	ldr	r2, [pc, #320]	; (8001ef4 <HAL_I2C_MspInit+0x208>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d147      	bne.n	8001e46 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001db6:	f04f 0208 	mov.w	r2, #8
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f004 f851 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001dd8:	f7ff feda 	bl	8001b90 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	4b43      	ldr	r3, [pc, #268]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	4a42      	ldr	r2, [pc, #264]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dec:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e02:	2312      	movs	r3, #18
 8001e04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e14:	2304      	movs	r3, #4
 8001e16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4833      	ldr	r0, [pc, #204]	; (8001ef0 <HAL_I2C_MspInit+0x204>)
 8001e22:	f002 fd91 	bl	8004948 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e2c:	4a2f      	ldr	r2, [pc, #188]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001e2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
}
 8001e44:	e04b      	b.n	8001ede <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2b      	ldr	r2, [pc, #172]	; (8001ef8 <HAL_I2C_MspInit+0x20c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d146      	bne.n	8001ede <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001e50:	f04f 0210 	mov.w	r2, #16
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e62:	f107 0320 	add.w	r3, r7, #32
 8001e66:	4618      	mov	r0, r3
 8001e68:	f004 f804 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8001e72:	f7ff fe8d 	bl	8001b90 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001e94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9c:	2312      	movs	r3, #18
 8001e9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4810      	ldr	r0, [pc, #64]	; (8001efc <HAL_I2C_MspInit+0x210>)
 8001ebc:	f002 fd44 	bl	8004948 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ecc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_I2C_MspInit+0x200>)
 8001ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
}
 8001ede:	bf00      	nop
 8001ee0:	37f0      	adds	r7, #240	; 0xf0
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40005400 	.word	0x40005400
 8001eec:	58024400 	.word	0x58024400
 8001ef0:	58020400 	.word	0x58020400
 8001ef4:	40005800 	.word	0x40005800
 8001ef8:	58001c00 	.word	0x58001c00
 8001efc:	58020c00 	.word	0x58020c00

08001f00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0ba      	sub	sp, #232	; 0xe8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f18:	f107 0318 	add.w	r3, r7, #24
 8001f1c:	22b8      	movs	r2, #184	; 0xb8
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f00b fc07 	bl	800d734 <memset>
  if(hsd->Instance==SDMMC1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a38      	ldr	r2, [pc, #224]	; (800200c <HAL_SD_MspInit+0x10c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d169      	bne.n	8002004 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001f30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 ff95 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001f50:	f7ff fe1e 	bl	8001b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f54:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <HAL_SD_MspInit+0x110>)
 8001f56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f5a:	4a2d      	ldr	r2, [pc, #180]	; (8002010 <HAL_SD_MspInit+0x110>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_SD_MspInit+0x110>)
 8001f66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f72:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_SD_MspInit+0x110>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_SD_MspInit+0x110>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f82:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_SD_MspInit+0x110>)
 8001f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <HAL_SD_MspInit+0x110>)
 8001f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_SD_MspInit+0x110>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_SD_MspInit+0x110>)
 8001fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4810      	ldr	r0, [pc, #64]	; (8002014 <HAL_SD_MspInit+0x114>)
 8001fd4:	f002 fcb8 	bl	8004948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8001fd8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <HAL_SD_MspInit+0x118>)
 8002000:	f002 fca2 	bl	8004948 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002004:	bf00      	nop
 8002006:	37e8      	adds	r7, #232	; 0xe8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	52007000 	.word	0x52007000
 8002010:	58024400 	.word	0x58024400
 8002014:	58020c00 	.word	0x58020c00
 8002018:	58020800 	.word	0x58020800

0800201c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0c0      	sub	sp, #256	; 0x100
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002038:	22b8      	movs	r2, #184	; 0xb8
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f00b fb79 	bl	800d734 <memset>
  if(hspi->Instance==SPI1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4aaa      	ldr	r2, [pc, #680]	; (80022f0 <HAL_SPI_MspInit+0x2d4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d16a      	bne.n	8002122 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800204c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002062:	4618      	mov	r0, r3
 8002064:	f003 ff06 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800206e:	f7ff fd8f 	bl	8001b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002072:	4ba0      	ldr	r3, [pc, #640]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002078:	4a9e      	ldr	r2, [pc, #632]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 800207a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800207e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002082:	4b9c      	ldr	r3, [pc, #624]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002090:	4b98      	ldr	r3, [pc, #608]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002096:	4a97      	ldr	r2, [pc, #604]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a0:	4b94      	ldr	r3, [pc, #592]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80020a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	4b91      	ldr	r3, [pc, #580]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b4:	4a8f      	ldr	r2, [pc, #572]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020be:	4b8d      	ldr	r3, [pc, #564]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PB4(NJTRST)     ------> SPI1_MISO
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020cc:	2310      	movs	r3, #16
 80020ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020e4:	2305      	movs	r3, #5
 80020e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020ee:	4619      	mov	r1, r3
 80020f0:	4881      	ldr	r0, [pc, #516]	; (80022f8 <HAL_SPI_MspInit+0x2dc>)
 80020f2:	f002 fc29 	bl	8004948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80020f6:	23b0      	movs	r3, #176	; 0xb0
 80020f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800210e:	2305      	movs	r3, #5
 8002110:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002118:	4619      	mov	r1, r3
 800211a:	4878      	ldr	r0, [pc, #480]	; (80022fc <HAL_SPI_MspInit+0x2e0>)
 800211c:	f002 fc14 	bl	8004948 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002120:	e0e1      	b.n	80022e6 <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a76      	ldr	r2, [pc, #472]	; (8002300 <HAL_SPI_MspInit+0x2e4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	f040 8091 	bne.w	8002250 <HAL_SPI_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800212e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002144:	4618      	mov	r0, r3
 8002146:	f003 fe95 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8002150:	f7ff fd1e 	bl	8001b90 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002154:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800215a:	4a66      	ldr	r2, [pc, #408]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002164:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002166:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	4b60      	ldr	r3, [pc, #384]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	4a5e      	ldr	r2, [pc, #376]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002182:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002196:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a0:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80021a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	4b51      	ldr	r3, [pc, #324]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b4:	4a4f      	ldr	r2, [pc, #316]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021be:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021e6:	2305      	movs	r3, #5
 80021e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021f0:	4619      	mov	r1, r3
 80021f2:	4842      	ldr	r0, [pc, #264]	; (80022fc <HAL_SPI_MspInit+0x2e0>)
 80021f4:	f002 fba8 	bl	8004948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 80021f8:	2306      	movs	r3, #6
 80021fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002210:	2305      	movs	r3, #5
 8002212:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002216:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800221a:	4619      	mov	r1, r3
 800221c:	4839      	ldr	r0, [pc, #228]	; (8002304 <HAL_SPI_MspInit+0x2e8>)
 800221e:	f002 fb93 	bl	8004948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002226:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800223c:	2305      	movs	r3, #5
 800223e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002246:	4619      	mov	r1, r3
 8002248:	482b      	ldr	r0, [pc, #172]	; (80022f8 <HAL_SPI_MspInit+0x2dc>)
 800224a:	f002 fb7d 	bl	8004948 <HAL_GPIO_Init>
}
 800224e:	e04a      	b.n	80022e6 <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI4)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <HAL_SPI_MspInit+0x2ec>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d145      	bne.n	80022e6 <HAL_SPI_MspInit+0x2ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800225a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002270:	4618      	mov	r0, r3
 8002272:	f003 fdff 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_SPI_MspInit+0x264>
      Error_Handler();
 800227c:	f7ff fc88 	bl	8001b90 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800228c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 8002292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80022a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a4:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80022a6:	f043 0310 	orr.w	r3, r3, #16
 80022aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_SPI_MspInit+0x2d8>)
 80022b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80022bc:	2374      	movs	r3, #116	; 0x74
 80022be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80022d4:	2305      	movs	r3, #5
 80022d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80022de:	4619      	mov	r1, r3
 80022e0:	480a      	ldr	r0, [pc, #40]	; (800230c <HAL_SPI_MspInit+0x2f0>)
 80022e2:	f002 fb31 	bl	8004948 <HAL_GPIO_Init>
}
 80022e6:	bf00      	nop
 80022e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40013000 	.word	0x40013000
 80022f4:	58024400 	.word	0x58024400
 80022f8:	58020400 	.word	0x58020400
 80022fc:	58020000 	.word	0x58020000
 8002300:	40003800 	.word	0x40003800
 8002304:	58020800 	.word	0x58020800
 8002308:	40013400 	.word	0x40013400
 800230c:	58021000 	.word	0x58021000

08002310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0b      	ldr	r2, [pc, #44]	; (800234c <HAL_TIM_Base_MspInit+0x3c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_TIM_Base_MspInit+0x40>)
 8002324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002328:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_TIM_Base_MspInit+0x40>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_TIM_Base_MspInit+0x40>)
 8002334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40010000 	.word	0x40010000
 8002350:	58024400 	.word	0x58024400

08002354 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002354:	b480      	push	{r7}
 8002356:	b08b      	sub	sp, #44	; 0x2c
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002364:	d10f      	bne.n	8002386 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002366:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 8002368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800236c:	4a47      	ldr	r2, [pc, #284]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002376:	4b45      	ldr	r3, [pc, #276]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 8002378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002384:	e07c      	b.n	8002480 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM3)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a41      	ldr	r2, [pc, #260]	; (8002490 <HAL_TIM_PWM_MspInit+0x13c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d10f      	bne.n	80023b0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002390:	4b3e      	ldr	r3, [pc, #248]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 8002392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002396:	4a3d      	ldr	r2, [pc, #244]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023a0:	4b3a      	ldr	r3, [pc, #232]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 80023a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	6a3b      	ldr	r3, [r7, #32]
}
 80023ae:	e067      	b.n	8002480 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM4)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a37      	ldr	r2, [pc, #220]	; (8002494 <HAL_TIM_PWM_MspInit+0x140>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10f      	bne.n	80023da <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ba:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 80023bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c0:	4a32      	ldr	r2, [pc, #200]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023ca:	4b30      	ldr	r3, [pc, #192]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 80023cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	69fb      	ldr	r3, [r7, #28]
}
 80023d8:	e052      	b.n	8002480 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM5)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2e      	ldr	r2, [pc, #184]	; (8002498 <HAL_TIM_PWM_MspInit+0x144>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d10f      	bne.n	8002404 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 80023e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ea:	4a28      	ldr	r2, [pc, #160]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 80023f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	69bb      	ldr	r3, [r7, #24]
}
 8002402:	e03d      	b.n	8002480 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM8)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a24      	ldr	r2, [pc, #144]	; (800249c <HAL_TIM_PWM_MspInit+0x148>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10f      	bne.n	800242e <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 8002410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 8002420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697b      	ldr	r3, [r7, #20]
}
 800242c:	e028      	b.n	8002480 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM12)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_TIM_PWM_MspInit+0x14c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d10f      	bne.n	8002458 <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 800243a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800243e:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 8002440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002444:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 800244a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
}
 8002456:	e013      	b.n	8002480 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM15)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a11      	ldr	r2, [pc, #68]	; (80024a4 <HAL_TIM_PWM_MspInit+0x150>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 8002464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002468:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_TIM_PWM_MspInit+0x138>)
 8002474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	bf00      	nop
 8002482:	372c      	adds	r7, #44	; 0x2c
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	58024400 	.word	0x58024400
 8002490:	40000400 	.word	0x40000400
 8002494:	40000800 	.word	0x40000800
 8002498:	40000c00 	.word	0x40000c00
 800249c:	40010400 	.word	0x40010400
 80024a0:	40001800 	.word	0x40001800
 80024a4:	40014000 	.word	0x40014000

080024a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b090      	sub	sp, #64	; 0x40
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a95      	ldr	r2, [pc, #596]	; (800271c <HAL_TIM_MspPostInit+0x274>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d120      	bne.n	800250c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ca:	4b95      	ldr	r3, [pc, #596]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d0:	4a93      	ldr	r2, [pc, #588]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80024d2:	f043 0310 	orr.w	r3, r3, #16
 80024d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024da:	4b91      	ldr	r3, [pc, #580]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_13;
 80024e8:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002502:	4619      	mov	r1, r3
 8002504:	4887      	ldr	r0, [pc, #540]	; (8002724 <HAL_TIM_MspPostInit+0x27c>)
 8002506:	f002 fa1f 	bl	8004948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800250a:	e103      	b.n	8002714 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d120      	bne.n	8002558 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b82      	ldr	r3, [pc, #520]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 8002518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800251c:	4a80      	ldr	r2, [pc, #512]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002526:	4b7e      	ldr	r3, [pc, #504]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002546:	2301      	movs	r3, #1
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254e:	4619      	mov	r1, r3
 8002550:	4875      	ldr	r0, [pc, #468]	; (8002728 <HAL_TIM_MspPostInit+0x280>)
 8002552:	f002 f9f9 	bl	8004948 <HAL_GPIO_Init>
}
 8002556:	e0dd      	b.n	8002714 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a73      	ldr	r2, [pc, #460]	; (800272c <HAL_TIM_MspPostInit+0x284>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d11f      	bne.n	80025a2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002568:	4a6d      	ldr	r2, [pc, #436]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002572:	4b6b      	ldr	r3, [pc, #428]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 8002574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	623b      	str	r3, [r7, #32]
 800257e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002580:	2340      	movs	r3, #64	; 0x40
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002590:	2302      	movs	r3, #2
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002598:	4619      	mov	r1, r3
 800259a:	4863      	ldr	r0, [pc, #396]	; (8002728 <HAL_TIM_MspPostInit+0x280>)
 800259c:	f002 f9d4 	bl	8004948 <HAL_GPIO_Init>
}
 80025a0:	e0b8      	b.n	8002714 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM4)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a62      	ldr	r2, [pc, #392]	; (8002730 <HAL_TIM_MspPostInit+0x288>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d11f      	bne.n	80025ec <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ac:	4b5c      	ldr	r3, [pc, #368]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80025ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b2:	4a5b      	ldr	r2, [pc, #364]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025bc:	4b58      	ldr	r3, [pc, #352]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80025be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025ca:	2340      	movs	r3, #64	; 0x40
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025da:	2302      	movs	r3, #2
 80025dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e2:	4619      	mov	r1, r3
 80025e4:	4853      	ldr	r0, [pc, #332]	; (8002734 <HAL_TIM_MspPostInit+0x28c>)
 80025e6:	f002 f9af 	bl	8004948 <HAL_GPIO_Init>
}
 80025ea:	e093      	b.n	8002714 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM5)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a51      	ldr	r2, [pc, #324]	; (8002738 <HAL_TIM_MspPostInit+0x290>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d11f      	bne.n	8002636 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	4b4a      	ldr	r3, [pc, #296]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80025f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fc:	4a48      	ldr	r2, [pc, #288]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002606:	4b46      	ldr	r3, [pc, #280]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 8002608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002614:	2301      	movs	r3, #1
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002624:	2302      	movs	r3, #2
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262c:	4619      	mov	r1, r3
 800262e:	483e      	ldr	r0, [pc, #248]	; (8002728 <HAL_TIM_MspPostInit+0x280>)
 8002630:	f002 f98a 	bl	8004948 <HAL_GPIO_Init>
}
 8002634:	e06e      	b.n	8002714 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a40      	ldr	r2, [pc, #256]	; (800273c <HAL_TIM_MspPostInit+0x294>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d11f      	bne.n	8002680 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002640:	4b37      	ldr	r3, [pc, #220]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 8002642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002646:	4a36      	ldr	r2, [pc, #216]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002650:	4b33      	ldr	r3, [pc, #204]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 8002652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800265e:	2340      	movs	r3, #64	; 0x40
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800266e:	2303      	movs	r3, #3
 8002670:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002676:	4619      	mov	r1, r3
 8002678:	4831      	ldr	r0, [pc, #196]	; (8002740 <HAL_TIM_MspPostInit+0x298>)
 800267a:	f002 f965 	bl	8004948 <HAL_GPIO_Init>
}
 800267e:	e049      	b.n	8002714 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM12)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <HAL_TIM_MspPostInit+0x29c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d120      	bne.n	80026cc <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 800268c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002690:	4a23      	ldr	r2, [pc, #140]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80026a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80026ba:	2302      	movs	r3, #2
 80026bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c2:	4619      	mov	r1, r3
 80026c4:	481b      	ldr	r0, [pc, #108]	; (8002734 <HAL_TIM_MspPostInit+0x28c>)
 80026c6:	f002 f93f 	bl	8004948 <HAL_GPIO_Init>
}
 80026ca:	e023      	b.n	8002714 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM15)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <HAL_TIM_MspPostInit+0x2a0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d11e      	bne.n	8002714 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80026d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026dc:	4a10      	ldr	r2, [pc, #64]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <HAL_TIM_MspPostInit+0x278>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026f4:	2304      	movs	r3, #4
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	2300      	movs	r3, #0
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002704:	2304      	movs	r3, #4
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800270c:	4619      	mov	r1, r3
 800270e:	4806      	ldr	r0, [pc, #24]	; (8002728 <HAL_TIM_MspPostInit+0x280>)
 8002710:	f002 f91a 	bl	8004948 <HAL_GPIO_Init>
}
 8002714:	bf00      	nop
 8002716:	3740      	adds	r7, #64	; 0x40
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40010000 	.word	0x40010000
 8002720:	58024400 	.word	0x58024400
 8002724:	58021000 	.word	0x58021000
 8002728:	58020000 	.word	0x58020000
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800
 8002734:	58020400 	.word	0x58020400
 8002738:	40000c00 	.word	0x40000c00
 800273c:	40010400 	.word	0x40010400
 8002740:	58020800 	.word	0x58020800
 8002744:	40001800 	.word	0x40001800
 8002748:	40014000 	.word	0x40014000

0800274c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b0c0      	sub	sp, #256	; 0x100
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002768:	22b8      	movs	r2, #184	; 0xb8
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f00a ffe1 	bl	800d734 <memset>
  if(huart->Instance==UART4)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4abf      	ldr	r2, [pc, #764]	; (8002a74 <HAL_UART_MspInit+0x328>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d16b      	bne.n	8002854 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800277c:	f04f 0202 	mov.w	r2, #2
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800278e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fb6e 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800279e:	f7ff f9f7 	bl	8001b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027a2:	4bb5      	ldr	r3, [pc, #724]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80027a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027a8:	4ab3      	ldr	r2, [pc, #716]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80027aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027b2:	4bb1      	ldr	r3, [pc, #708]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80027b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c0:	4bad      	ldr	r3, [pc, #692]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80027c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c6:	4aac      	ldr	r2, [pc, #688]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027d0:	4ba9      	ldr	r3, [pc, #676]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027de:	4ba6      	ldr	r3, [pc, #664]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80027e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e4:	4aa4      	ldr	r2, [pc, #656]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80027e6:	f043 0308 	orr.w	r3, r3, #8
 80027ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ee:	4ba2      	ldr	r3, [pc, #648]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80027f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PB9     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002800:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002816:	2308      	movs	r3, #8
 8002818:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002820:	4619      	mov	r1, r3
 8002822:	4896      	ldr	r0, [pc, #600]	; (8002a7c <HAL_UART_MspInit+0x330>)
 8002824:	f002 f890 	bl	8004948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002828:	2301      	movs	r3, #1
 800282a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002840:	2308      	movs	r3, #8
 8002842:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002846:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800284a:	4619      	mov	r1, r3
 800284c:	488c      	ldr	r0, [pc, #560]	; (8002a80 <HAL_UART_MspInit+0x334>)
 800284e:	f002 f87b 	bl	8004948 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8002852:	e109      	b.n	8002a68 <HAL_UART_MspInit+0x31c>
  else if(huart->Instance==UART5)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a8a      	ldr	r2, [pc, #552]	; (8002a84 <HAL_UART_MspInit+0x338>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d147      	bne.n	80028ee <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800285e:	f04f 0202 	mov.w	r2, #2
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002870:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fafd 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8002880:	f7ff f986 	bl	8001b90 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002884:	4b7c      	ldr	r3, [pc, #496]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 8002886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800288a:	4a7b      	ldr	r2, [pc, #492]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 800288c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002890:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002894:	4b78      	ldr	r3, [pc, #480]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 8002896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800289a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a2:	4b75      	ldr	r3, [pc, #468]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80028a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a8:	4a73      	ldr	r2, [pc, #460]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80028aa:	f043 0302 	orr.w	r3, r3, #2
 80028ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028b2:	4b71      	ldr	r3, [pc, #452]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 80028c0:	f242 0320 	movw	r3, #8224	; 0x2020
 80028c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80028da:	230e      	movs	r3, #14
 80028dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028e4:	4619      	mov	r1, r3
 80028e6:	4865      	ldr	r0, [pc, #404]	; (8002a7c <HAL_UART_MspInit+0x330>)
 80028e8:	f002 f82e 	bl	8004948 <HAL_GPIO_Init>
}
 80028ec:	e0bc      	b.n	8002a68 <HAL_UART_MspInit+0x31c>
  else if(huart->Instance==UART7)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a65      	ldr	r2, [pc, #404]	; (8002a88 <HAL_UART_MspInit+0x33c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d147      	bne.n	8002988 <HAL_UART_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80028f8:	f04f 0202 	mov.w	r2, #2
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800290a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fab0 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 800291a:	f7ff f939 	bl	8001b90 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800291e:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 8002920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002924:	4a54      	ldr	r2, [pc, #336]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 8002926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800292a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800292e:	4b52      	ldr	r3, [pc, #328]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 8002930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002934:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800293c:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 800293e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002942:	4a4d      	ldr	r2, [pc, #308]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 8002944:	f043 0310 	orr.w	r3, r3, #16
 8002948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800294c:	4b4a      	ldr	r3, [pc, #296]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 800294e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800295a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800295e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002974:	2307      	movs	r3, #7
 8002976:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800297a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800297e:	4619      	mov	r1, r3
 8002980:	4842      	ldr	r0, [pc, #264]	; (8002a8c <HAL_UART_MspInit+0x340>)
 8002982:	f001 ffe1 	bl	8004948 <HAL_GPIO_Init>
}
 8002986:	e06f      	b.n	8002a68 <HAL_UART_MspInit+0x31c>
  else if(huart->Instance==UART8)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <HAL_UART_MspInit+0x344>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d16a      	bne.n	8002a68 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002992:	f04f 0202 	mov.w	r2, #2
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 fa63 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80029b4:	f7ff f8ec 	bl	8001b90 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80029b8:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80029ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029be:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80029c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029c8:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80029ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d6:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80029d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029dc:	4a26      	ldr	r2, [pc, #152]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80029de:	f043 0310 	orr.w	r3, r3, #16
 80029e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e6:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80029e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80029f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 80029fc:	f043 0308 	orr.w	r3, r3, #8
 8002a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_UART_MspInit+0x32c>)
 8002a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002a12:	2303      	movs	r3, #3
 8002a14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a30:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a34:	4619      	mov	r1, r3
 8002a36:	4815      	ldr	r0, [pc, #84]	; (8002a8c <HAL_UART_MspInit+0x340>)
 8002a38:	f001 ff86 	bl	8004948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8002a3c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002a56:	2308      	movs	r3, #8
 8002a58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a60:	4619      	mov	r1, r3
 8002a62:	4807      	ldr	r0, [pc, #28]	; (8002a80 <HAL_UART_MspInit+0x334>)
 8002a64:	f001 ff70 	bl	8004948 <HAL_GPIO_Init>
}
 8002a68:	bf00      	nop
 8002a6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40004c00 	.word	0x40004c00
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	58020400 	.word	0x58020400
 8002a80:	58020c00 	.word	0x58020c00
 8002a84:	40005000 	.word	0x40005000
 8002a88:	40007800 	.word	0x40007800
 8002a8c:	58021000 	.word	0x58021000
 8002a90:	40007c00 	.word	0x40007c00

08002a94 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b0bc      	sub	sp, #240	; 0xf0
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aac:	f107 0320 	add.w	r3, r7, #32
 8002ab0:	22b8      	movs	r2, #184	; 0xb8
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f00a fe3d 	bl	800d734 <memset>
  if(husart->Instance==USART1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a73      	ldr	r2, [pc, #460]	; (8002c8c <HAL_USART_MspInit+0x1f8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d147      	bne.n	8002b54 <HAL_USART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ac4:	f04f 0201 	mov.w	r2, #1
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad6:	f107 0320 	add.w	r3, r7, #32
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 f9ca 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8002ae6:	f7ff f853 	bl	8001b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aea:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002af0:	4a67      	ldr	r2, [pc, #412]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002af2:	f043 0310 	orr.w	r3, r3, #16
 8002af6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b08:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0e:	4a60      	ldr	r2, [pc, #384]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b18:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	69bb      	ldr	r3, [r7, #24]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 8002b26:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b40:	2307      	movs	r3, #7
 8002b42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4851      	ldr	r0, [pc, #324]	; (8002c94 <HAL_USART_MspInit+0x200>)
 8002b4e:	f001 fefb 	bl	8004948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b52:	e097      	b.n	8002c84 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a4f      	ldr	r2, [pc, #316]	; (8002c98 <HAL_USART_MspInit+0x204>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d146      	bne.n	8002bec <HAL_USART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b5e:	f04f 0202 	mov.w	r2, #2
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b70:	f107 0320 	add.w	r3, r7, #32
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 f97d 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_USART_MspInit+0xf0>
      Error_Handler();
 8002b80:	f7ff f806 	bl	8001b90 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b84:	4b42      	ldr	r3, [pc, #264]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b8a:	4a41      	ldr	r2, [pc, #260]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b94:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002b96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba8:	4a39      	ldr	r2, [pc, #228]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb2:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
 8002bc0:	23e8      	movs	r3, #232	; 0xe8
 8002bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bd8:	2307      	movs	r3, #7
 8002bda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bde:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002be2:	4619      	mov	r1, r3
 8002be4:	482d      	ldr	r0, [pc, #180]	; (8002c9c <HAL_USART_MspInit+0x208>)
 8002be6:	f001 feaf 	bl	8004948 <HAL_GPIO_Init>
}
 8002bea:	e04b      	b.n	8002c84 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART3)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <HAL_USART_MspInit+0x20c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d146      	bne.n	8002c84 <HAL_USART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bf6:	f04f 0202 	mov.w	r2, #2
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c08:	f107 0320 	add.w	r3, r7, #32
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 f931 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_USART_MspInit+0x188>
      Error_Handler();
 8002c18:	f7fe ffba 	bl	8001b90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c22:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c2c:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002c42:	f043 0308 	orr.w	r3, r3, #8
 8002c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_USART_MspInit+0x1fc>)
 8002c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8002c58:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002c5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c72:	2307      	movs	r3, #7
 8002c74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4807      	ldr	r0, [pc, #28]	; (8002c9c <HAL_USART_MspInit+0x208>)
 8002c80:	f001 fe62 	bl	8004948 <HAL_GPIO_Init>
}
 8002c84:	bf00      	nop
 8002c86:	37f0      	adds	r7, #240	; 0xf0
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40011000 	.word	0x40011000
 8002c90:	58024400 	.word	0x58024400
 8002c94:	58020000 	.word	0x58020000
 8002c98:	40004400 	.word	0x40004400
 8002c9c:	58020c00 	.word	0x58020c00
 8002ca0:	40004800 	.word	0x40004800

08002ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <NMI_Handler+0x4>

08002caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cae:	e7fe      	b.n	8002cae <HardFault_Handler+0x4>

08002cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <MemManage_Handler+0x4>

08002cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <BusFault_Handler+0x4>

08002cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <UsageFault_Handler+0x4>

08002cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf0:	f000 f916 	bl	8002f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cfc:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <SystemInit+0xd0>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	4a31      	ldr	r2, [pc, #196]	; (8002dc8 <SystemInit+0xd0>)
 8002d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d0c:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <SystemInit+0xd4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d807      	bhi.n	8002d28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <SystemInit+0xd4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 030f 	bic.w	r3, r3, #15
 8002d20:	4a2a      	ldr	r2, [pc, #168]	; (8002dcc <SystemInit+0xd4>)
 8002d22:	f043 0307 	orr.w	r3, r3, #7
 8002d26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d28:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <SystemInit+0xd8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a28      	ldr	r2, [pc, #160]	; (8002dd0 <SystemInit+0xd8>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <SystemInit+0xd8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <SystemInit+0xd8>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4924      	ldr	r1, [pc, #144]	; (8002dd0 <SystemInit+0xd8>)
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <SystemInit+0xdc>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d46:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <SystemInit+0xd4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <SystemInit+0xd4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 030f 	bic.w	r3, r3, #15
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <SystemInit+0xd4>)
 8002d5c:	f043 0307 	orr.w	r3, r3, #7
 8002d60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d62:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <SystemInit+0xd8>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <SystemInit+0xd8>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <SystemInit+0xd8>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d74:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <SystemInit+0xd8>)
 8002d76:	4a18      	ldr	r2, [pc, #96]	; (8002dd8 <SystemInit+0xe0>)
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <SystemInit+0xd8>)
 8002d7c:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <SystemInit+0xe4>)
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d80:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <SystemInit+0xd8>)
 8002d82:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <SystemInit+0xe8>)
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <SystemInit+0xd8>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d8c:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <SystemInit+0xd8>)
 8002d8e:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <SystemInit+0xe8>)
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <SystemInit+0xd8>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d98:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <SystemInit+0xd8>)
 8002d9a:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <SystemInit+0xe8>)
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <SystemInit+0xd8>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <SystemInit+0xd8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <SystemInit+0xd8>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <SystemInit+0xd8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <SystemInit+0xec>)
 8002db8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002dbc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00
 8002dcc:	52002000 	.word	0x52002000
 8002dd0:	58024400 	.word	0x58024400
 8002dd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002dd8:	02020200 	.word	0x02020200
 8002ddc:	01ff0000 	.word	0x01ff0000
 8002de0:	01010280 	.word	0x01010280
 8002de4:	52004000 	.word	0x52004000

08002de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dec:	f7ff ff84 	bl	8002cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df0:	480c      	ldr	r0, [pc, #48]	; (8002e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002df2:	490d      	ldr	r1, [pc, #52]	; (8002e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df8:	e002      	b.n	8002e00 <LoopCopyDataInit>

08002dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfe:	3304      	adds	r3, #4

08002e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e04:	d3f9      	bcc.n	8002dfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e08:	4c0a      	ldr	r4, [pc, #40]	; (8002e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e0c:	e001      	b.n	8002e12 <LoopFillZerobss>

08002e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e10:	3204      	adds	r2, #4

08002e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e14:	d3fb      	bcc.n	8002e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e16:	f00a fc95 	bl	800d744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e1a:	f7fd fbf5 	bl	8000608 <main>
  bx  lr
 8002e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e20:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002e24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e28:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002e2c:	0800d7fc 	.word	0x0800d7fc
  ldr r2, =_sbss
 8002e30:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002e34:	240009f4 	.word	0x240009f4

08002e38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e38:	e7fe      	b.n	8002e38 <ADC3_IRQHandler>
	...

08002e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e42:	2003      	movs	r0, #3
 8002e44:	f001 fcd6 	bl	80047f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e48:	f002 fe3e 	bl	8005ac8 <HAL_RCC_GetSysClockFreq>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_Init+0x68>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	4913      	ldr	r1, [pc, #76]	; (8002ea8 <HAL_Init+0x6c>)
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
 8002e64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_Init+0x68>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <HAL_Init+0x6c>)
 8002e70:	5cd3      	ldrb	r3, [r2, r3]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <HAL_Init+0x70>)
 8002e7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e80:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <HAL_Init+0x74>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e86:	200f      	movs	r0, #15
 8002e88:	f000 f814 	bl	8002eb4 <HAL_InitTick>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e002      	b.n	8002e9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e96:	f7fe fe81 	bl	8001b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	58024400 	.word	0x58024400
 8002ea8:	0800d7a4 	.word	0x0800d7a4
 8002eac:	24000004 	.word	0x24000004
 8002eb0:	24000000 	.word	0x24000000

08002eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ebc:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_InitTick+0x60>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e021      	b.n	8002f0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <HAL_InitTick+0x64>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_InitTick+0x60>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fcad 	bl	800483e <HAL_SYSTICK_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00e      	b.n	8002f0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d80a      	bhi.n	8002f0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	f001 fc85 	bl	800480a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f00:	4a06      	ldr	r2, [pc, #24]	; (8002f1c <HAL_InitTick+0x68>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	2400000c 	.word	0x2400000c
 8002f18:	24000000 	.word	0x24000000
 8002f1c:	24000008 	.word	0x24000008

08002f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_IncTick+0x20>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x24>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_IncTick+0x24>)
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2400000c 	.word	0x2400000c
 8002f44:	240009f0 	.word	0x240009f0

08002f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_GetTick+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	240009f0 	.word	0x240009f0

08002f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f68:	f7ff ffee 	bl	8002f48 <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d005      	beq.n	8002f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_Delay+0x44>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f86:	bf00      	nop
 8002f88:	f7ff ffde 	bl	8002f48 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d8f7      	bhi.n	8002f88 <HAL_Delay+0x28>
  {
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2400000c 	.word	0x2400000c

08002fa8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3360      	adds	r3, #96	; 0x60
 8003022:	461a      	mov	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a10      	ldr	r2, [pc, #64]	; (8003070 <LL_ADC_SetOffset+0x60>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d10b      	bne.n	800304c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	4313      	orrs	r3, r2
 8003042:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800304a:	e00b      	b.n	8003064 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	430b      	orrs	r3, r1
 800305e:	431a      	orrs	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	58026000 	.word	0x58026000

08003074 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3360      	adds	r3, #96	; 0x60
 8003082:	461a      	mov	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	611a      	str	r2, [r3, #16]
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3360      	adds	r3, #96	; 0x60
 80030ec:	461a      	mov	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	431a      	orrs	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	601a      	str	r2, [r3, #0]
  }
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	58026000 	.word	0x58026000

08003118 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a0c      	ldr	r2, [pc, #48]	; (8003158 <LL_ADC_SetOffsetSaturation+0x40>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10e      	bne.n	800314a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3360      	adds	r3, #96	; 0x60
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	431a      	orrs	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	58026000 	.word	0x58026000

0800315c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a0c      	ldr	r2, [pc, #48]	; (800319c <LL_ADC_SetOffsetSign+0x40>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10e      	bne.n	800318e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3360      	adds	r3, #96	; 0x60
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	431a      	orrs	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	58026000 	.word	0x58026000

080031a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3360      	adds	r3, #96	; 0x60
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <LL_ADC_SetOffsetState+0x50>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d108      	bne.n	80031d4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80031d2:	e007      	b.n	80031e4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	431a      	orrs	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	58026000 	.word	0x58026000

080031f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3330      	adds	r3, #48	; 0x30
 8003204:	461a      	mov	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	4413      	add	r3, r2
 8003212:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	211f      	movs	r1, #31
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	f003 011f 	and.w	r1, r3, #31
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	431a      	orrs	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3314      	adds	r3, #20
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	0e5b      	lsrs	r3, r3, #25
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	4413      	add	r3, r2
 800326a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	0d1b      	lsrs	r3, r3, #20
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2107      	movs	r1, #7
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	401a      	ands	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	0d1b      	lsrs	r3, r3, #20
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	431a      	orrs	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a1a      	ldr	r2, [pc, #104]	; (800331c <LL_ADC_SetChannelSingleDiff+0x78>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d115      	bne.n	80032e4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c4:	43db      	mvns	r3, r3
 80032c6:	401a      	ands	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0318 	and.w	r3, r3, #24
 80032ce:	4914      	ldr	r1, [pc, #80]	; (8003320 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80032d0:	40d9      	lsrs	r1, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	400b      	ands	r3, r1
 80032d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032da:	431a      	orrs	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80032e2:	e014      	b.n	800330e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0318 	and.w	r3, r3, #24
 80032fa:	4909      	ldr	r1, [pc, #36]	; (8003320 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80032fc:	40d9      	lsrs	r1, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	400b      	ands	r3, r1
 8003302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003306:	431a      	orrs	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	58026000 	.word	0x58026000
 8003320:	000fffff 	.word	0x000fffff

08003324 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003332:	4013      	ands	r3, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6093      	str	r3, [r2, #8]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	5fffffc0 	.word	0x5fffffc0

08003348 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800335c:	d101      	bne.n	8003362 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <LL_ADC_EnableInternalRegulator+0x24>)
 800337e:	4013      	ands	r3, r2
 8003380:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	6fffffc0 	.word	0x6fffffc0

08003398 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ac:	d101      	bne.n	80033b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <LL_ADC_IsEnabled+0x18>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <LL_ADC_IsEnabled+0x1a>
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d101      	bne.n	80033fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b08      	cmp	r3, #8
 800341e:	d101      	bne.n	8003424 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1ee      	b.n	800382c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7fe fbb7 	bl	8001bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff67 	bl	8003348 <LL_ADC_IsDeepPowerDownEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff4d 	bl	8003324 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff ff82 	bl	8003398 <LL_ADC_IsInternalRegulatorEnabled>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d114      	bne.n	80034c4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff66 	bl	8003370 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034a4:	4b8e      	ldr	r3, [pc, #568]	; (80036e0 <HAL_ADC_Init+0x2ac>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	099b      	lsrs	r3, r3, #6
 80034aa:	4a8e      	ldr	r2, [pc, #568]	; (80036e4 <HAL_ADC_Init+0x2b0>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	099b      	lsrs	r3, r3, #6
 80034b2:	3301      	adds	r3, #1
 80034b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034b6:	e002      	b.n	80034be <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f9      	bne.n	80034b8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff65 	bl	8003398 <LL_ADC_IsInternalRegulatorEnabled>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10d      	bne.n	80034f0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	f043 0210 	orr.w	r2, r3, #16
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e4:	f043 0201 	orr.w	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff76 	bl	80033e6 <LL_ADC_REG_IsConversionOngoing>
 80034fa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	f040 8188 	bne.w	800381a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 8184 	bne.w	800381a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800351a:	f043 0202 	orr.w	r2, r3, #2
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff4a 	bl	80033c0 <LL_ADC_IsEnabled>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d136      	bne.n	80035a0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a6c      	ldr	r2, [pc, #432]	; (80036e8 <HAL_ADC_Init+0x2b4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d004      	beq.n	8003546 <HAL_ADC_Init+0x112>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a6a      	ldr	r2, [pc, #424]	; (80036ec <HAL_ADC_Init+0x2b8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d10e      	bne.n	8003564 <HAL_ADC_Init+0x130>
 8003546:	4868      	ldr	r0, [pc, #416]	; (80036e8 <HAL_ADC_Init+0x2b4>)
 8003548:	f7ff ff3a 	bl	80033c0 <LL_ADC_IsEnabled>
 800354c:	4604      	mov	r4, r0
 800354e:	4867      	ldr	r0, [pc, #412]	; (80036ec <HAL_ADC_Init+0x2b8>)
 8003550:	f7ff ff36 	bl	80033c0 <LL_ADC_IsEnabled>
 8003554:	4603      	mov	r3, r0
 8003556:	4323      	orrs	r3, r4
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e008      	b.n	8003576 <HAL_ADC_Init+0x142>
 8003564:	4862      	ldr	r0, [pc, #392]	; (80036f0 <HAL_ADC_Init+0x2bc>)
 8003566:	f7ff ff2b 	bl	80033c0 <LL_ADC_IsEnabled>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d012      	beq.n	80035a0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a5a      	ldr	r2, [pc, #360]	; (80036e8 <HAL_ADC_Init+0x2b4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_ADC_Init+0x15a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a58      	ldr	r2, [pc, #352]	; (80036ec <HAL_ADC_Init+0x2b8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_ADC_Init+0x15e>
 800358e:	4a59      	ldr	r2, [pc, #356]	; (80036f4 <HAL_ADC_Init+0x2c0>)
 8003590:	e000      	b.n	8003594 <HAL_ADC_Init+0x160>
 8003592:	4a59      	ldr	r2, [pc, #356]	; (80036f8 <HAL_ADC_Init+0x2c4>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f7ff fd04 	bl	8002fa8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a52      	ldr	r2, [pc, #328]	; (80036f0 <HAL_ADC_Init+0x2bc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d129      	bne.n	80035fe <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	7e5b      	ldrb	r3, [r3, #25]
 80035ae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035b4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80035ba:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d013      	beq.n	80035ec <HAL_ADC_Init+0x1b8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d00d      	beq.n	80035e8 <HAL_ADC_Init+0x1b4>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b1c      	cmp	r3, #28
 80035d2:	d007      	beq.n	80035e4 <HAL_ADC_Init+0x1b0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b18      	cmp	r3, #24
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_Init+0x1ac>
 80035dc:	2318      	movs	r3, #24
 80035de:	e006      	b.n	80035ee <HAL_ADC_Init+0x1ba>
 80035e0:	2300      	movs	r3, #0
 80035e2:	e004      	b.n	80035ee <HAL_ADC_Init+0x1ba>
 80035e4:	2310      	movs	r3, #16
 80035e6:	e002      	b.n	80035ee <HAL_ADC_Init+0x1ba>
 80035e8:	2308      	movs	r3, #8
 80035ea:	e000      	b.n	80035ee <HAL_ADC_Init+0x1ba>
 80035ec:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80035ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035f6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e00e      	b.n	800361c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7e5b      	ldrb	r3, [r3, #25]
 8003602:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003608:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800360e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003616:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d106      	bne.n	8003634 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	3b01      	subs	r3, #1
 800362c:	045b      	lsls	r3, r3, #17
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a26      	ldr	r2, [pc, #152]	; (80036f0 <HAL_ADC_Init+0x2bc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d115      	bne.n	8003686 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	4b26      	ldr	r3, [pc, #152]	; (80036fc <HAL_ADC_Init+0x2c8>)
 8003662:	4013      	ands	r3, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	69b9      	ldr	r1, [r7, #24]
 800366a:	430b      	orrs	r3, r1
 800366c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	611a      	str	r2, [r3, #16]
 8003684:	e009      	b.n	800369a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <HAL_ADC_Init+0x2cc>)
 800368e:	4013      	ands	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	69b9      	ldr	r1, [r7, #24]
 8003696:	430b      	orrs	r3, r1
 8003698:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fea1 	bl	80033e6 <LL_ADC_REG_IsConversionOngoing>
 80036a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff feae 	bl	800340c <LL_ADC_INJ_IsConversionOngoing>
 80036b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 808e 	bne.w	80037d6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f040 808a 	bne.w	80037d6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <HAL_ADC_Init+0x2bc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d11b      	bne.n	8003704 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7e1b      	ldrb	r3, [r3, #24]
 80036d0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036d8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	e018      	b.n	8003712 <HAL_ADC_Init+0x2de>
 80036e0:	24000000 	.word	0x24000000
 80036e4:	053e2d63 	.word	0x053e2d63
 80036e8:	40022000 	.word	0x40022000
 80036ec:	40022100 	.word	0x40022100
 80036f0:	58026000 	.word	0x58026000
 80036f4:	40022300 	.word	0x40022300
 80036f8:	58026300 	.word	0x58026300
 80036fc:	fff04007 	.word	0xfff04007
 8003700:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	7e1b      	ldrb	r3, [r3, #24]
 8003708:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	4b46      	ldr	r3, [pc, #280]	; (8003834 <HAL_ADC_Init+0x400>)
 800371a:	4013      	ands	r3, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	69b9      	ldr	r1, [r7, #24]
 8003722:	430b      	orrs	r3, r1
 8003724:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800372c:	2b01      	cmp	r3, #1
 800372e:	d137      	bne.n	80037a0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a3f      	ldr	r2, [pc, #252]	; (8003838 <HAL_ADC_Init+0x404>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d116      	bne.n	800376e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_ADC_Init+0x408>)
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800375e:	430a      	orrs	r2, r1
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	611a      	str	r2, [r3, #16]
 800376c:	e020      	b.n	80037b0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	4b32      	ldr	r3, [pc, #200]	; (8003840 <HAL_ADC_Init+0x40c>)
 8003776:	4013      	ands	r3, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800377c:	3a01      	subs	r2, #1
 800377e:	0411      	lsls	r1, r2, #16
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003784:	4311      	orrs	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800378a:	4311      	orrs	r1, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003790:	430a      	orrs	r2, r1
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	611a      	str	r2, [r3, #16]
 800379e:	e007      	b.n	80037b0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_ADC_Init+0x404>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d002      	beq.n	80037d6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fd67 	bl	80042a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d10c      	bne.n	80037f8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	f023 010f 	bic.w	r1, r3, #15
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	1e5a      	subs	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
 80037f6:	e007      	b.n	8003808 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 020f 	bic.w	r2, r2, #15
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380c:	f023 0303 	bic.w	r3, r3, #3
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	661a      	str	r2, [r3, #96]	; 0x60
 8003818:	e007      	b.n	800382a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381e:	f043 0210 	orr.w	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800382a:	7ffb      	ldrb	r3, [r7, #31]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3724      	adds	r7, #36	; 0x24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd90      	pop	{r4, r7, pc}
 8003834:	ffffbffc 	.word	0xffffbffc
 8003838:	58026000 	.word	0x58026000
 800383c:	fc00f81f 	.word	0xfc00f81f
 8003840:	fc00f81e 	.word	0xfc00f81e

08003844 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b0b9      	sub	sp, #228	; 0xe4
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800385e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4aab      	ldr	r2, [pc, #684]	; (8003b14 <HAL_ADC_ConfigChannel+0x2d0>)
 8003866:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800386e:	2b01      	cmp	r3, #1
 8003870:	d102      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x34>
 8003872:	2302      	movs	r3, #2
 8003874:	f000 bcfe 	b.w	8004274 <HAL_ADC_ConfigChannel+0xa30>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fdae 	bl	80033e6 <LL_ADC_REG_IsConversionOngoing>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	f040 84e2 	bne.w	8004256 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db38      	blt.n	800390c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a9e      	ldr	r2, [pc, #632]	; (8003b18 <HAL_ADC_ConfigChannel+0x2d4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d033      	beq.n	800390c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x7e>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2201      	movs	r2, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	e01d      	b.n	80038fe <HAL_ADC_ConfigChannel+0xba>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80038e6:	2320      	movs	r3, #32
 80038e8:	e004      	b.n	80038f4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80038ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2201      	movs	r2, #1
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	69d1      	ldr	r1, [r2, #28]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	430b      	orrs	r3, r1
 800390a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	f7ff fc6b 	bl	80031f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fd5f 	bl	80033e6 <LL_ADC_REG_IsConversionOngoing>
 8003928:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff fd6b 	bl	800340c <LL_ADC_INJ_IsConversionOngoing>
 8003936:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800393a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800393e:	2b00      	cmp	r3, #0
 8003940:	f040 8270 	bne.w	8003e24 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003944:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003948:	2b00      	cmp	r3, #0
 800394a:	f040 826b 	bne.w	8003e24 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	461a      	mov	r2, r3
 800395c:	f7ff fc76 	bl	800324c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a6c      	ldr	r2, [pc, #432]	; (8003b18 <HAL_ADC_ConfigChannel+0x2d4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10d      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	08db      	lsrs	r3, r3, #3
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003984:	e032      	b.n	80039ec <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003986:	4b65      	ldr	r3, [pc, #404]	; (8003b1c <HAL_ADC_ConfigChannel+0x2d8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800398e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003992:	d10b      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x168>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	e01d      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x1a4>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x18e>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	e00a      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x1a4>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d048      	beq.n	8003a86 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6919      	ldr	r1, [r3, #16]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a04:	f7ff fb04 	bl	8003010 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a42      	ldr	r2, [pc, #264]	; (8003b18 <HAL_ADC_ConfigChannel+0x2d4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d119      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6919      	ldr	r1, [r3, #16]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f7ff fb9c 	bl	800315c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6919      	ldr	r1, [r3, #16]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x1f8>
 8003a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a3a:	e000      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x1fa>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f7ff fb6a 	bl	8003118 <LL_ADC_SetOffsetSaturation>
 8003a44:	e1ee      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6919      	ldr	r1, [r3, #16]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d102      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x21a>
 8003a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a5c:	e000      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x21c>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	461a      	mov	r2, r3
 8003a62:	f7ff fb37 	bl	80030d4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6919      	ldr	r1, [r3, #16]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	7e1b      	ldrb	r3, [r3, #24]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d102      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x238>
 8003a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a7a:	e000      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x23a>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f7ff fb0e 	bl	80030a0 <LL_ADC_SetDataRightShift>
 8003a84:	e1ce      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a23      	ldr	r2, [pc, #140]	; (8003b18 <HAL_ADC_ConfigChannel+0x2d4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	f040 8181 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff faeb 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x27a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fae0 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	0e9b      	lsrs	r3, r3, #26
 8003ab8:	f003 021f 	and.w	r2, r3, #31
 8003abc:	e01e      	b.n	8003afc <HAL_ADC_ConfigChannel+0x2b8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fad5 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ad4:	fa93 f3a3 	rbit	r3, r3
 8003ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003adc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003ae4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003aec:	2320      	movs	r3, #32
 8003aee:	e004      	b.n	8003afa <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003af0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x2dc>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	0e9b      	lsrs	r3, r3, #26
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	e01e      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x30e>
 8003b14:	47ff0000 	.word	0x47ff0000
 8003b18:	58026000 	.word	0x58026000
 8003b1c:	5c001000 	.word	0x5c001000
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003b44:	2320      	movs	r3, #32
 8003b46:	e004      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003b48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d106      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fb1e 	bl	80031a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2101      	movs	r1, #1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fa82 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x34c>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fa77 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003b86:	4603      	mov	r3, r0
 8003b88:	0e9b      	lsrs	r3, r3, #26
 8003b8a:	f003 021f 	and.w	r2, r3, #31
 8003b8e:	e01e      	b.n	8003bce <HAL_ADC_ConfigChannel+0x38a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fa6c 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ba6:	fa93 f3a3 	rbit	r3, r3
 8003baa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003bae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003bbe:	2320      	movs	r3, #32
 8003bc0:	e004      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d105      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x3a2>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	0e9b      	lsrs	r3, r3, #26
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	e018      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x3d4>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	e004      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d106      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2101      	movs	r1, #1
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fabb 	bl	80031a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff fa1f 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x412>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2102      	movs	r1, #2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fa14 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	0e9b      	lsrs	r3, r3, #26
 8003c50:	f003 021f 	and.w	r2, r3, #31
 8003c54:	e01e      	b.n	8003c94 <HAL_ADC_ConfigChannel+0x450>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fa09 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003c84:	2320      	movs	r3, #32
 8003c86:	e004      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d105      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x468>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0e9b      	lsrs	r3, r3, #26
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	e014      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x492>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003cc8:	2320      	movs	r3, #32
 8003cca:	e004      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d106      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fa5c 	bl	80031a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2103      	movs	r1, #3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff f9c0 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x4d0>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2103      	movs	r1, #3
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff f9b5 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	f003 021f 	and.w	r2, r3, #31
 8003d12:	e017      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x500>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2103      	movs	r1, #3
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff f9aa 	bl	8003074 <LL_ADC_GetOffsetChannel>
 8003d20:	4603      	mov	r3, r0
 8003d22:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003d36:	2320      	movs	r3, #32
 8003d38:	e003      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d3c:	fab3 f383 	clz	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x518>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	0e9b      	lsrs	r3, r3, #26
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	e011      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x53c>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d6c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003d74:	2320      	movs	r3, #32
 8003d76:	e003      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d7a:	fab3 f383 	clz	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d14f      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2103      	movs	r1, #3
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fa07 	bl	80031a0 <LL_ADC_SetOffsetState>
 8003d92:	e047      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	069b      	lsls	r3, r3, #26
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d107      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003db6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	069b      	lsls	r3, r3, #26
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d107      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003dda:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	069b      	lsls	r3, r3, #26
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d107      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003dfe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	069b      	lsls	r3, r3, #26
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d107      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e22:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fac9 	bl	80033c0 <LL_ADC_IsEnabled>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f040 8219 	bne.w	8004268 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6819      	ldr	r1, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f7ff fa2e 	bl	80032a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4aa1      	ldr	r2, [pc, #644]	; (80040d4 <HAL_ADC_ConfigChannel+0x890>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	f040 812e 	bne.w	80040b0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x638>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	0e9b      	lsrs	r3, r3, #26
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	2b09      	cmp	r3, #9
 8003e72:	bf94      	ite	ls
 8003e74:	2301      	movls	r3, #1
 8003e76:	2300      	movhi	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	e019      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x66c>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003e94:	2320      	movs	r3, #32
 8003e96:	e003      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	2b09      	cmp	r3, #9
 8003ea8:	bf94      	ite	ls
 8003eaa:	2301      	movls	r3, #1
 8003eac:	2300      	movhi	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d079      	beq.n	8003fa8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d107      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x68c>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	0e9b      	lsrs	r3, r3, #26
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	069b      	lsls	r3, r3, #26
 8003eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ece:	e015      	b.n	8003efc <HAL_ADC_ConfigChannel+0x6b8>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed8:	fa93 f3a3 	rbit	r3, r3
 8003edc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003ee8:	2320      	movs	r3, #32
 8003eea:	e003      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	069b      	lsls	r3, r3, #26
 8003ef8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x6d8>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	0e9b      	lsrs	r3, r3, #26
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	e017      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x708>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f24:	fa93 f3a3 	rbit	r3, r3
 8003f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003f34:	2320      	movs	r3, #32
 8003f36:	e003      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3a:	fab3 f383 	clz	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	3301      	adds	r3, #1
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2101      	movs	r1, #1
 8003f48:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4c:	ea42 0103 	orr.w	r1, r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x72e>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	0e9b      	lsrs	r3, r3, #26
 8003f62:	3301      	adds	r3, #1
 8003f64:	f003 021f 	and.w	r2, r3, #31
 8003f68:	4613      	mov	r3, r2
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4413      	add	r3, r2
 8003f6e:	051b      	lsls	r3, r3, #20
 8003f70:	e018      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x760>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7a:	fa93 f3a3 	rbit	r3, r3
 8003f7e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	e003      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	fab3 f383 	clz	r3, r3
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	3301      	adds	r3, #1
 8003f98:	f003 021f 	and.w	r2, r3, #31
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	4413      	add	r3, r2
 8003fa2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	e07e      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x780>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0e9b      	lsrs	r3, r3, #26
 8003fba:	3301      	adds	r3, #1
 8003fbc:	069b      	lsls	r3, r3, #26
 8003fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc2:	e015      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x7ac>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003fdc:	2320      	movs	r3, #32
 8003fde:	e003      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	069b      	lsls	r3, r3, #26
 8003fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x7cc>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	3301      	adds	r3, #1
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	e017      	b.n	8004040 <HAL_ADC_ConfigChannel+0x7fc>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	61bb      	str	r3, [r7, #24]
  return result;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e003      	b.n	8004034 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	3301      	adds	r3, #1
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	2101      	movs	r1, #1
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	ea42 0103 	orr.w	r1, r2, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10d      	bne.n	800406c <HAL_ADC_ConfigChannel+0x828>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	0e9b      	lsrs	r3, r3, #26
 8004056:	3301      	adds	r3, #1
 8004058:	f003 021f 	and.w	r2, r3, #31
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	3b1e      	subs	r3, #30
 8004064:	051b      	lsls	r3, r3, #20
 8004066:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800406a:	e01b      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x860>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	60fb      	str	r3, [r7, #12]
  return result;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e003      	b.n	8004090 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	3301      	adds	r3, #1
 8004092:	f003 021f 	and.w	r2, r3, #31
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	3b1e      	subs	r3, #30
 800409e:	051b      	lsls	r3, r3, #20
 80040a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040a4:	430b      	orrs	r3, r1
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	6892      	ldr	r2, [r2, #8]
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7ff f8ce 	bl	800324c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f280 80d7 	bge.w	8004268 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a06      	ldr	r2, [pc, #24]	; (80040d8 <HAL_ADC_ConfigChannel+0x894>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d004      	beq.n	80040ce <HAL_ADC_ConfigChannel+0x88a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a04      	ldr	r2, [pc, #16]	; (80040dc <HAL_ADC_ConfigChannel+0x898>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d10a      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x8a0>
 80040ce:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <HAL_ADC_ConfigChannel+0x89c>)
 80040d0:	e009      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x8a2>
 80040d2:	bf00      	nop
 80040d4:	47ff0000 	.word	0x47ff0000
 80040d8:	40022000 	.word	0x40022000
 80040dc:	40022100 	.word	0x40022100
 80040e0:	40022300 	.word	0x40022300
 80040e4:	4b65      	ldr	r3, [pc, #404]	; (800427c <HAL_ADC_ConfigChannel+0xa38>)
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe ff84 	bl	8002ff4 <LL_ADC_GetCommonPathInternalCh>
 80040ec:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a62      	ldr	r2, [pc, #392]	; (8004280 <HAL_ADC_ConfigChannel+0xa3c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <HAL_ADC_ConfigChannel+0x8c0>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a61      	ldr	r2, [pc, #388]	; (8004284 <HAL_ADC_ConfigChannel+0xa40>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10e      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x8de>
 8004104:	485e      	ldr	r0, [pc, #376]	; (8004280 <HAL_ADC_ConfigChannel+0xa3c>)
 8004106:	f7ff f95b 	bl	80033c0 <LL_ADC_IsEnabled>
 800410a:	4604      	mov	r4, r0
 800410c:	485d      	ldr	r0, [pc, #372]	; (8004284 <HAL_ADC_ConfigChannel+0xa40>)
 800410e:	f7ff f957 	bl	80033c0 <LL_ADC_IsEnabled>
 8004112:	4603      	mov	r3, r0
 8004114:	4323      	orrs	r3, r4
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf0c      	ite	eq
 800411a:	2301      	moveq	r3, #1
 800411c:	2300      	movne	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e008      	b.n	8004134 <HAL_ADC_ConfigChannel+0x8f0>
 8004122:	4859      	ldr	r0, [pc, #356]	; (8004288 <HAL_ADC_ConfigChannel+0xa44>)
 8004124:	f7ff f94c 	bl	80033c0 <LL_ADC_IsEnabled>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8084 	beq.w	8004242 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a53      	ldr	r2, [pc, #332]	; (800428c <HAL_ADC_ConfigChannel+0xa48>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d132      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x966>
 8004144:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d12c      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a4c      	ldr	r2, [pc, #304]	; (8004288 <HAL_ADC_ConfigChannel+0xa44>)
 8004156:	4293      	cmp	r3, r2
 8004158:	f040 8086 	bne.w	8004268 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a47      	ldr	r2, [pc, #284]	; (8004280 <HAL_ADC_ConfigChannel+0xa3c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_ADC_ConfigChannel+0x92c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a46      	ldr	r2, [pc, #280]	; (8004284 <HAL_ADC_ConfigChannel+0xa40>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x930>
 8004170:	4a47      	ldr	r2, [pc, #284]	; (8004290 <HAL_ADC_ConfigChannel+0xa4c>)
 8004172:	e000      	b.n	8004176 <HAL_ADC_ConfigChannel+0x932>
 8004174:	4a41      	ldr	r2, [pc, #260]	; (800427c <HAL_ADC_ConfigChannel+0xa38>)
 8004176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800417a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f7fe ff24 	bl	8002fce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004186:	4b43      	ldr	r3, [pc, #268]	; (8004294 <HAL_ADC_ConfigChannel+0xa50>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	099b      	lsrs	r3, r3, #6
 800418c:	4a42      	ldr	r2, [pc, #264]	; (8004298 <HAL_ADC_ConfigChannel+0xa54>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	3301      	adds	r3, #1
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800419a:	e002      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	3b01      	subs	r3, #1
 80041a0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f9      	bne.n	800419c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041a8:	e05e      	b.n	8004268 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3b      	ldr	r2, [pc, #236]	; (800429c <HAL_ADC_ConfigChannel+0xa58>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d120      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x9b2>
 80041b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11a      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a30      	ldr	r2, [pc, #192]	; (8004288 <HAL_ADC_ConfigChannel+0xa44>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d14e      	bne.n	8004268 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <HAL_ADC_ConfigChannel+0xa3c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d004      	beq.n	80041de <HAL_ADC_ConfigChannel+0x99a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_ADC_ConfigChannel+0xa40>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x99e>
 80041de:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <HAL_ADC_ConfigChannel+0xa4c>)
 80041e0:	e000      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x9a0>
 80041e2:	4a26      	ldr	r2, [pc, #152]	; (800427c <HAL_ADC_ConfigChannel+0xa38>)
 80041e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f7fe feed 	bl	8002fce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041f4:	e038      	b.n	8004268 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <HAL_ADC_ConfigChannel+0xa5c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d133      	bne.n	8004268 <HAL_ADC_ConfigChannel+0xa24>
 8004200:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d12d      	bne.n	8004268 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <HAL_ADC_ConfigChannel+0xa44>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d128      	bne.n	8004268 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a19      	ldr	r2, [pc, #100]	; (8004280 <HAL_ADC_ConfigChannel+0xa3c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <HAL_ADC_ConfigChannel+0x9e6>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a17      	ldr	r2, [pc, #92]	; (8004284 <HAL_ADC_ConfigChannel+0xa40>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d101      	bne.n	800422e <HAL_ADC_ConfigChannel+0x9ea>
 800422a:	4a19      	ldr	r2, [pc, #100]	; (8004290 <HAL_ADC_ConfigChannel+0xa4c>)
 800422c:	e000      	b.n	8004230 <HAL_ADC_ConfigChannel+0x9ec>
 800422e:	4a13      	ldr	r2, [pc, #76]	; (800427c <HAL_ADC_ConfigChannel+0xa38>)
 8004230:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f7fe fec7 	bl	8002fce <LL_ADC_SetCommonPathInternalCh>
 8004240:	e012      	b.n	8004268 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004254:	e008      	b.n	8004268 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004270:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004274:	4618      	mov	r0, r3
 8004276:	37e4      	adds	r7, #228	; 0xe4
 8004278:	46bd      	mov	sp, r7
 800427a:	bd90      	pop	{r4, r7, pc}
 800427c:	58026300 	.word	0x58026300
 8004280:	40022000 	.word	0x40022000
 8004284:	40022100 	.word	0x40022100
 8004288:	58026000 	.word	0x58026000
 800428c:	c7520000 	.word	0xc7520000
 8004290:	40022300 	.word	0x40022300
 8004294:	24000000 	.word	0x24000000
 8004298:	053e2d63 	.word	0x053e2d63
 800429c:	c3210000 	.word	0xc3210000
 80042a0:	cb840000 	.word	0xcb840000

080042a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a6c      	ldr	r2, [pc, #432]	; (8004464 <ADC_ConfigureBoostMode+0x1c0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <ADC_ConfigureBoostMode+0x1c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a6b      	ldr	r2, [pc, #428]	; (8004468 <ADC_ConfigureBoostMode+0x1c4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d109      	bne.n	80042d4 <ADC_ConfigureBoostMode+0x30>
 80042c0:	4b6a      	ldr	r3, [pc, #424]	; (800446c <ADC_ConfigureBoostMode+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e008      	b.n	80042e6 <ADC_ConfigureBoostMode+0x42>
 80042d4:	4b66      	ldr	r3, [pc, #408]	; (8004470 <ADC_ConfigureBoostMode+0x1cc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01c      	beq.n	8004324 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80042ea:	f001 fd67 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 80042ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f8:	d010      	beq.n	800431c <ADC_ConfigureBoostMode+0x78>
 80042fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042fe:	d873      	bhi.n	80043e8 <ADC_ConfigureBoostMode+0x144>
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004304:	d002      	beq.n	800430c <ADC_ConfigureBoostMode+0x68>
 8004306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800430a:	d16d      	bne.n	80043e8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	60fb      	str	r3, [r7, #12]
        break;
 800431a:	e068      	b.n	80043ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	089b      	lsrs	r3, r3, #2
 8004320:	60fb      	str	r3, [r7, #12]
        break;
 8004322:	e064      	b.n	80043ee <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004324:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004328:	f04f 0100 	mov.w	r1, #0
 800432c:	f002 ff42 	bl	80071b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004330:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800433a:	d051      	beq.n	80043e0 <ADC_ConfigureBoostMode+0x13c>
 800433c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004340:	d854      	bhi.n	80043ec <ADC_ConfigureBoostMode+0x148>
 8004342:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004346:	d047      	beq.n	80043d8 <ADC_ConfigureBoostMode+0x134>
 8004348:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800434c:	d84e      	bhi.n	80043ec <ADC_ConfigureBoostMode+0x148>
 800434e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004352:	d03d      	beq.n	80043d0 <ADC_ConfigureBoostMode+0x12c>
 8004354:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004358:	d848      	bhi.n	80043ec <ADC_ConfigureBoostMode+0x148>
 800435a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800435e:	d033      	beq.n	80043c8 <ADC_ConfigureBoostMode+0x124>
 8004360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004364:	d842      	bhi.n	80043ec <ADC_ConfigureBoostMode+0x148>
 8004366:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800436a:	d029      	beq.n	80043c0 <ADC_ConfigureBoostMode+0x11c>
 800436c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004370:	d83c      	bhi.n	80043ec <ADC_ConfigureBoostMode+0x148>
 8004372:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004376:	d01a      	beq.n	80043ae <ADC_ConfigureBoostMode+0x10a>
 8004378:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800437c:	d836      	bhi.n	80043ec <ADC_ConfigureBoostMode+0x148>
 800437e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004382:	d014      	beq.n	80043ae <ADC_ConfigureBoostMode+0x10a>
 8004384:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004388:	d830      	bhi.n	80043ec <ADC_ConfigureBoostMode+0x148>
 800438a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438e:	d00e      	beq.n	80043ae <ADC_ConfigureBoostMode+0x10a>
 8004390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004394:	d82a      	bhi.n	80043ec <ADC_ConfigureBoostMode+0x148>
 8004396:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800439a:	d008      	beq.n	80043ae <ADC_ConfigureBoostMode+0x10a>
 800439c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043a0:	d824      	bhi.n	80043ec <ADC_ConfigureBoostMode+0x148>
 80043a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043a6:	d002      	beq.n	80043ae <ADC_ConfigureBoostMode+0x10a>
 80043a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043ac:	d11e      	bne.n	80043ec <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	0c9b      	lsrs	r3, r3, #18
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	60fb      	str	r3, [r7, #12]
        break;
 80043be:	e016      	b.n	80043ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	60fb      	str	r3, [r7, #12]
        break;
 80043c6:	e012      	b.n	80043ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	60fb      	str	r3, [r7, #12]
        break;
 80043ce:	e00e      	b.n	80043ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	099b      	lsrs	r3, r3, #6
 80043d4:	60fb      	str	r3, [r7, #12]
        break;
 80043d6:	e00a      	b.n	80043ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	09db      	lsrs	r3, r3, #7
 80043dc:	60fb      	str	r3, [r7, #12]
        break;
 80043de:	e006      	b.n	80043ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	60fb      	str	r3, [r7, #12]
        break;
 80043e6:	e002      	b.n	80043ee <ADC_ConfigureBoostMode+0x14a>
        break;
 80043e8:	bf00      	nop
 80043ea:	e000      	b.n	80043ee <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80043ec:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <ADC_ConfigureBoostMode+0x1d0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d808      	bhi.n	800440e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800440a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800440c:	e025      	b.n	800445a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a19      	ldr	r2, [pc, #100]	; (8004478 <ADC_ConfigureBoostMode+0x1d4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d80a      	bhi.n	800442c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004428:	609a      	str	r2, [r3, #8]
}
 800442a:	e016      	b.n	800445a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a13      	ldr	r2, [pc, #76]	; (800447c <ADC_ConfigureBoostMode+0x1d8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d80a      	bhi.n	800444a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004446:	609a      	str	r2, [r3, #8]
}
 8004448:	e007      	b.n	800445a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004458:	609a      	str	r2, [r3, #8]
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40022000 	.word	0x40022000
 8004468:	40022100 	.word	0x40022100
 800446c:	40022300 	.word	0x40022300
 8004470:	58026300 	.word	0x58026300
 8004474:	005f5e10 	.word	0x005f5e10
 8004478:	00bebc20 	.word	0x00bebc20
 800447c:	017d7840 	.word	0x017d7840

08004480 <LL_ADC_IsEnabled>:
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <LL_ADC_IsEnabled+0x18>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <LL_ADC_IsEnabled+0x1a>
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d101      	bne.n	80044be <LL_ADC_REG_IsConversionOngoing+0x18>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b0a3      	sub	sp, #140	; 0x8c
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e0c1      	b.n	800466e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a5e      	ldr	r2, [pc, #376]	; (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d102      	bne.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004504:	4b5d      	ldr	r3, [pc, #372]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	e001      	b.n	800450e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0a0      	b.n	800466e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ffb9 	bl	80044a6 <LL_ADC_REG_IsConversionOngoing>
 8004534:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff ffb2 	bl	80044a6 <LL_ADC_REG_IsConversionOngoing>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	f040 8081 	bne.w	800464c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800454a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d17c      	bne.n	800464c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a48      	ldr	r2, [pc, #288]	; (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a46      	ldr	r2, [pc, #280]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004566:	4b46      	ldr	r3, [pc, #280]	; (8004680 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004568:	e000      	b.n	800456c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800456a:	4b46      	ldr	r3, [pc, #280]	; (8004684 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800456c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d039      	beq.n	80045ea <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	431a      	orrs	r2, r3
 8004584:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004586:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a3a      	ldr	r2, [pc, #232]	; (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a39      	ldr	r2, [pc, #228]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d10e      	bne.n	80045ba <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800459c:	4836      	ldr	r0, [pc, #216]	; (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800459e:	f7ff ff6f 	bl	8004480 <LL_ADC_IsEnabled>
 80045a2:	4604      	mov	r4, r0
 80045a4:	4835      	ldr	r0, [pc, #212]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045a6:	f7ff ff6b 	bl	8004480 <LL_ADC_IsEnabled>
 80045aa:	4603      	mov	r3, r0
 80045ac:	4323      	orrs	r3, r4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	e008      	b.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80045ba:	4833      	ldr	r0, [pc, #204]	; (8004688 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80045bc:	f7ff ff60 	bl	8004480 <LL_ADC_IsEnabled>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d047      	beq.n	8004660 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	4b2d      	ldr	r3, [pc, #180]	; (800468c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	6811      	ldr	r1, [r2, #0]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	6892      	ldr	r2, [r2, #8]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	431a      	orrs	r2, r3
 80045e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045e8:	e03a      	b.n	8004660 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80045ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d10e      	bne.n	8004628 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800460a:	481b      	ldr	r0, [pc, #108]	; (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800460c:	f7ff ff38 	bl	8004480 <LL_ADC_IsEnabled>
 8004610:	4604      	mov	r4, r0
 8004612:	481a      	ldr	r0, [pc, #104]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004614:	f7ff ff34 	bl	8004480 <LL_ADC_IsEnabled>
 8004618:	4603      	mov	r3, r0
 800461a:	4323      	orrs	r3, r4
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf0c      	ite	eq
 8004620:	2301      	moveq	r3, #1
 8004622:	2300      	movne	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	e008      	b.n	800463a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004628:	4817      	ldr	r0, [pc, #92]	; (8004688 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800462a:	f7ff ff29 	bl	8004480 <LL_ADC_IsEnabled>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d010      	beq.n	8004660 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800463e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004644:	4013      	ands	r3, r2
 8004646:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004648:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800464a:	e009      	b.n	8004660 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004650:	f043 0220 	orr.w	r2, r3, #32
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800465e:	e000      	b.n	8004662 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004660:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800466a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800466e:	4618      	mov	r0, r3
 8004670:	378c      	adds	r7, #140	; 0x8c
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}
 8004676:	bf00      	nop
 8004678:	40022000 	.word	0x40022000
 800467c:	40022100 	.word	0x40022100
 8004680:	40022300 	.word	0x40022300
 8004684:	58026300 	.word	0x58026300
 8004688:	58026000 	.word	0x58026000
 800468c:	fffff0e0 	.word	0xfffff0e0

08004690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <__NVIC_SetPriorityGrouping+0x40>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046ac:	4013      	ands	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <__NVIC_SetPriorityGrouping+0x44>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046be:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <__NVIC_SetPriorityGrouping+0x40>)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	60d3      	str	r3, [r2, #12]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	e000ed00 	.word	0xe000ed00
 80046d4:	05fa0000 	.word	0x05fa0000

080046d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <__NVIC_GetPriorityGrouping+0x18>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	0a1b      	lsrs	r3, r3, #8
 80046e2:	f003 0307 	and.w	r3, r3, #7
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	6039      	str	r1, [r7, #0]
 80046fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004704:	2b00      	cmp	r3, #0
 8004706:	db0a      	blt.n	800471e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	b2da      	uxtb	r2, r3
 800470c:	490c      	ldr	r1, [pc, #48]	; (8004740 <__NVIC_SetPriority+0x4c>)
 800470e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004712:	0112      	lsls	r2, r2, #4
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	440b      	add	r3, r1
 8004718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800471c:	e00a      	b.n	8004734 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	4908      	ldr	r1, [pc, #32]	; (8004744 <__NVIC_SetPriority+0x50>)
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	3b04      	subs	r3, #4
 800472c:	0112      	lsls	r2, r2, #4
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	440b      	add	r3, r1
 8004732:	761a      	strb	r2, [r3, #24]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	e000e100 	.word	0xe000e100
 8004744:	e000ed00 	.word	0xe000ed00

08004748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f1c3 0307 	rsb	r3, r3, #7
 8004762:	2b04      	cmp	r3, #4
 8004764:	bf28      	it	cs
 8004766:	2304      	movcs	r3, #4
 8004768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3304      	adds	r3, #4
 800476e:	2b06      	cmp	r3, #6
 8004770:	d902      	bls.n	8004778 <NVIC_EncodePriority+0x30>
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3b03      	subs	r3, #3
 8004776:	e000      	b.n	800477a <NVIC_EncodePriority+0x32>
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800477c:	f04f 32ff 	mov.w	r2, #4294967295
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43da      	mvns	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	401a      	ands	r2, r3
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004790:	f04f 31ff 	mov.w	r1, #4294967295
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	43d9      	mvns	r1, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a0:	4313      	orrs	r3, r2
         );
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3724      	adds	r7, #36	; 0x24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c0:	d301      	bcc.n	80047c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047c2:	2301      	movs	r3, #1
 80047c4:	e00f      	b.n	80047e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047c6:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <SysTick_Config+0x40>)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ce:	210f      	movs	r1, #15
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	f7ff ff8e 	bl	80046f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <SysTick_Config+0x40>)
 80047da:	2200      	movs	r2, #0
 80047dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047de:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <SysTick_Config+0x40>)
 80047e0:	2207      	movs	r2, #7
 80047e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	e000e010 	.word	0xe000e010

080047f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff47 	bl	8004690 <__NVIC_SetPriorityGrouping>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	4603      	mov	r3, r0
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004818:	f7ff ff5e 	bl	80046d8 <__NVIC_GetPriorityGrouping>
 800481c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	6978      	ldr	r0, [r7, #20]
 8004824:	f7ff ff90 	bl	8004748 <NVIC_EncodePriority>
 8004828:	4602      	mov	r2, r0
 800482a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff5f 	bl	80046f4 <__NVIC_SetPriority>
}
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ffb2 	bl	80047b0 <SysTick_Config>
 800484c:	4603      	mov	r3, r0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800485c:	f3bf 8f5f 	dmb	sy
}
 8004860:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <HAL_MPU_Disable+0x28>)
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	4a06      	ldr	r2, [pc, #24]	; (8004880 <HAL_MPU_Disable+0x28>)
 8004868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_MPU_Disable+0x2c>)
 8004870:	2200      	movs	r2, #0
 8004872:	605a      	str	r2, [r3, #4]
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	e000ed00 	.word	0xe000ed00
 8004884:	e000ed90 	.word	0xe000ed90

08004888 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004890:	4a0b      	ldr	r2, [pc, #44]	; (80048c0 <HAL_MPU_Enable+0x38>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800489a:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <HAL_MPU_Enable+0x3c>)
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <HAL_MPU_Enable+0x3c>)
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80048a6:	f3bf 8f4f 	dsb	sy
}
 80048aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048ac:	f3bf 8f6f 	isb	sy
}
 80048b0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	e000ed90 	.word	0xe000ed90
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	785a      	ldrb	r2, [r3, #1]
 80048d4:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <HAL_MPU_ConfigRegion+0x7c>)
 80048d6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <HAL_MPU_ConfigRegion+0x7c>)
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_MPU_ConfigRegion+0x7c>)
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80048e4:	4a17      	ldr	r2, [pc, #92]	; (8004944 <HAL_MPU_ConfigRegion+0x7c>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7b1b      	ldrb	r3, [r3, #12]
 80048f0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	7adb      	ldrb	r3, [r3, #11]
 80048f6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80048f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7a9b      	ldrb	r3, [r3, #10]
 80048fe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004900:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	7b5b      	ldrb	r3, [r3, #13]
 8004906:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004908:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	7b9b      	ldrb	r3, [r3, #14]
 800490e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004910:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	7bdb      	ldrb	r3, [r3, #15]
 8004916:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004918:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7a5b      	ldrb	r3, [r3, #9]
 800491e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004920:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	7a1b      	ldrb	r3, [r3, #8]
 8004926:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004928:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	7812      	ldrb	r2, [r2, #0]
 800492e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004930:	4a04      	ldr	r2, [pc, #16]	; (8004944 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004932:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004934:	6113      	str	r3, [r2, #16]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	e000ed90 	.word	0xe000ed90

08004948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004948:	b480      	push	{r7}
 800494a:	b089      	sub	sp, #36	; 0x24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004956:	4b86      	ldr	r3, [pc, #536]	; (8004b70 <HAL_GPIO_Init+0x228>)
 8004958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800495a:	e18c      	b.n	8004c76 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	2101      	movs	r1, #1
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	4013      	ands	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 817e 	beq.w	8004c70 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d005      	beq.n	800498c <HAL_GPIO_Init+0x44>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d130      	bne.n	80049ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049c2:	2201      	movs	r2, #1
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 0201 	and.w	r2, r3, #1
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d017      	beq.n	8004a2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	2203      	movs	r2, #3
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d123      	bne.n	8004a7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	08da      	lsrs	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3208      	adds	r2, #8
 8004a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	220f      	movs	r2, #15
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	08da      	lsrs	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3208      	adds	r2, #8
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	2203      	movs	r2, #3
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4013      	ands	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 0203 	and.w	r2, r3, #3
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80d8 	beq.w	8004c70 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac0:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <HAL_GPIO_Init+0x22c>)
 8004ac2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ac6:	4a2b      	ldr	r2, [pc, #172]	; (8004b74 <HAL_GPIO_Init+0x22c>)
 8004ac8:	f043 0302 	orr.w	r3, r3, #2
 8004acc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <HAL_GPIO_Init+0x22c>)
 8004ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ade:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <HAL_GPIO_Init+0x230>)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	220f      	movs	r2, #15
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <HAL_GPIO_Init+0x234>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d04a      	beq.n	8004ba0 <HAL_GPIO_Init+0x258>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_GPIO_Init+0x238>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d02b      	beq.n	8004b6a <HAL_GPIO_Init+0x222>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <HAL_GPIO_Init+0x23c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d025      	beq.n	8004b66 <HAL_GPIO_Init+0x21e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <HAL_GPIO_Init+0x240>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01f      	beq.n	8004b62 <HAL_GPIO_Init+0x21a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <HAL_GPIO_Init+0x244>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d019      	beq.n	8004b5e <HAL_GPIO_Init+0x216>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <HAL_GPIO_Init+0x248>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_GPIO_Init+0x212>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a17      	ldr	r2, [pc, #92]	; (8004b94 <HAL_GPIO_Init+0x24c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00d      	beq.n	8004b56 <HAL_GPIO_Init+0x20e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <HAL_GPIO_Init+0x250>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <HAL_GPIO_Init+0x20a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <HAL_GPIO_Init+0x254>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_GPIO_Init+0x206>
 8004b4a:	2309      	movs	r3, #9
 8004b4c:	e029      	b.n	8004ba2 <HAL_GPIO_Init+0x25a>
 8004b4e:	230a      	movs	r3, #10
 8004b50:	e027      	b.n	8004ba2 <HAL_GPIO_Init+0x25a>
 8004b52:	2307      	movs	r3, #7
 8004b54:	e025      	b.n	8004ba2 <HAL_GPIO_Init+0x25a>
 8004b56:	2306      	movs	r3, #6
 8004b58:	e023      	b.n	8004ba2 <HAL_GPIO_Init+0x25a>
 8004b5a:	2305      	movs	r3, #5
 8004b5c:	e021      	b.n	8004ba2 <HAL_GPIO_Init+0x25a>
 8004b5e:	2304      	movs	r3, #4
 8004b60:	e01f      	b.n	8004ba2 <HAL_GPIO_Init+0x25a>
 8004b62:	2303      	movs	r3, #3
 8004b64:	e01d      	b.n	8004ba2 <HAL_GPIO_Init+0x25a>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e01b      	b.n	8004ba2 <HAL_GPIO_Init+0x25a>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e019      	b.n	8004ba2 <HAL_GPIO_Init+0x25a>
 8004b6e:	bf00      	nop
 8004b70:	58000080 	.word	0x58000080
 8004b74:	58024400 	.word	0x58024400
 8004b78:	58000400 	.word	0x58000400
 8004b7c:	58020000 	.word	0x58020000
 8004b80:	58020400 	.word	0x58020400
 8004b84:	58020800 	.word	0x58020800
 8004b88:	58020c00 	.word	0x58020c00
 8004b8c:	58021000 	.word	0x58021000
 8004b90:	58021400 	.word	0x58021400
 8004b94:	58021800 	.word	0x58021800
 8004b98:	58021c00 	.word	0x58021c00
 8004b9c:	58022400 	.word	0x58022400
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	f002 0203 	and.w	r2, r2, #3
 8004ba8:	0092      	lsls	r2, r2, #2
 8004baa:	4093      	lsls	r3, r2
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bb2:	4938      	ldr	r1, [pc, #224]	; (8004c94 <HAL_GPIO_Init+0x34c>)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	3302      	adds	r3, #2
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	43db      	mvns	r3, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4013      	ands	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	3301      	adds	r3, #1
 8004c74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f47f ae6b 	bne.w	800495c <HAL_GPIO_Init+0x14>
  }
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	3724      	adds	r7, #36	; 0x24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	58000400 	.word	0x58000400

08004c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	807b      	strh	r3, [r7, #2]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ca8:	787b      	ldrb	r3, [r7, #1]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004cb4:	e003      	b.n	8004cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cb6:	887b      	ldrh	r3, [r7, #2]
 8004cb8:	041a      	lsls	r2, r3, #16
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	619a      	str	r2, [r3, #24]
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e08b      	b.n	8004df6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc fffa 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2224      	movs	r2, #36	; 0x24
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d107      	bne.n	8004d46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d42:	609a      	str	r2, [r3, #8]
 8004d44:	e006      	b.n	8004d54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d108      	bne.n	8004d6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	e007      	b.n	8004d7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6859      	ldr	r1, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_I2C_Init+0x134>)
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69d9      	ldr	r1, [r3, #28]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1a      	ldr	r2, [r3, #32]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	02008000 	.word	0x02008000

08004e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d138      	bne.n	8004e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e032      	b.n	8004e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2224      	movs	r2, #36	; 0x24
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d139      	bne.n	8004f24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e033      	b.n	8004f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2224      	movs	r2, #36	; 0x24
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004eec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e000      	b.n	8004f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
  }
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f3c:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d00a      	beq.n	8004f5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f48:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d001      	beq.n	8004f5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e01f      	b.n	8004f9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e01d      	b.n	8004f9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f5e:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f023 0207 	bic.w	r2, r3, #7
 8004f66:	490f      	ldr	r1, [pc, #60]	; (8004fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f6e:	f7fd ffeb 	bl	8002f48 <HAL_GetTick>
 8004f72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f74:	e009      	b.n	8004f8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f76:	f7fd ffe7 	bl	8002f48 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f84:	d901      	bls.n	8004f8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e007      	b.n	8004f9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f96:	d1ee      	bne.n	8004f76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	58024800 	.word	0x58024800

08004fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	; 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e3c8      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8087 	beq.w	80050d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fc8:	4b88      	ldr	r3, [pc, #544]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fd2:	4b86      	ldr	r3, [pc, #536]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d007      	beq.n	8004fee <HAL_RCC_OscConfig+0x46>
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	2b18      	cmp	r3, #24
 8004fe2:	d110      	bne.n	8005006 <HAL_RCC_OscConfig+0x5e>
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d10b      	bne.n	8005006 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fee:	4b7f      	ldr	r3, [pc, #508]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d06c      	beq.n	80050d4 <HAL_RCC_OscConfig+0x12c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d168      	bne.n	80050d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e3a2      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500e:	d106      	bne.n	800501e <HAL_RCC_OscConfig+0x76>
 8005010:	4b76      	ldr	r3, [pc, #472]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a75      	ldr	r2, [pc, #468]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	e02e      	b.n	800507c <HAL_RCC_OscConfig+0xd4>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10c      	bne.n	8005040 <HAL_RCC_OscConfig+0x98>
 8005026:	4b71      	ldr	r3, [pc, #452]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a70      	ldr	r2, [pc, #448]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 800502c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	4b6e      	ldr	r3, [pc, #440]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a6d      	ldr	r2, [pc, #436]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	e01d      	b.n	800507c <HAL_RCC_OscConfig+0xd4>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0xbc>
 800504a:	4b68      	ldr	r3, [pc, #416]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a67      	ldr	r2, [pc, #412]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4b65      	ldr	r3, [pc, #404]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a64      	ldr	r2, [pc, #400]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 800505c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e00b      	b.n	800507c <HAL_RCC_OscConfig+0xd4>
 8005064:	4b61      	ldr	r3, [pc, #388]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a60      	ldr	r2, [pc, #384]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 800506a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	4b5e      	ldr	r3, [pc, #376]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a5d      	ldr	r2, [pc, #372]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800507a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d013      	beq.n	80050ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fd ff60 	bl	8002f48 <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800508c:	f7fd ff5c 	bl	8002f48 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	; 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e356      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800509e:	4b53      	ldr	r3, [pc, #332]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0xe4>
 80050aa:	e014      	b.n	80050d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fd ff4c 	bl	8002f48 <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b4:	f7fd ff48 	bl	8002f48 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	; 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e342      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050c6:	4b49      	ldr	r3, [pc, #292]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x10c>
 80050d2:	e000      	b.n	80050d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 808c 	beq.w	80051fc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050e4:	4b41      	ldr	r3, [pc, #260]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050ee:	4b3f      	ldr	r3, [pc, #252]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <HAL_RCC_OscConfig+0x162>
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2b18      	cmp	r3, #24
 80050fe:	d137      	bne.n	8005170 <HAL_RCC_OscConfig+0x1c8>
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d132      	bne.n	8005170 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800510a:	4b38      	ldr	r3, [pc, #224]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_RCC_OscConfig+0x17a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e314      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005122:	4b32      	ldr	r3, [pc, #200]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f023 0219 	bic.w	r2, r3, #25
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	492f      	ldr	r1, [pc, #188]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005130:	4313      	orrs	r3, r2
 8005132:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fd ff08 	bl	8002f48 <HAL_GetTick>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513c:	f7fd ff04 	bl	8002f48 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e2fe      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800514e:	4b27      	ldr	r3, [pc, #156]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f0      	beq.n	800513c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515a:	4b24      	ldr	r3, [pc, #144]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	061b      	lsls	r3, r3, #24
 8005168:	4920      	ldr	r1, [pc, #128]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 800516a:	4313      	orrs	r3, r2
 800516c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516e:	e045      	b.n	80051fc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d026      	beq.n	80051c6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005178:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f023 0219 	bic.w	r2, r3, #25
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4919      	ldr	r1, [pc, #100]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7fd fedd 	bl	8002f48 <HAL_GetTick>
 800518e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005192:	f7fd fed9 	bl	8002f48 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e2d3      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051a4:	4b11      	ldr	r3, [pc, #68]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b0:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	061b      	lsls	r3, r3, #24
 80051be:	490b      	ldr	r1, [pc, #44]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	604b      	str	r3, [r1, #4]
 80051c4:	e01a      	b.n	80051fc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a08      	ldr	r2, [pc, #32]	; (80051ec <HAL_RCC_OscConfig+0x244>)
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fd feb9 	bl	8002f48 <HAL_GetTick>
 80051d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051da:	f7fd feb5 	bl	8002f48 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d903      	bls.n	80051f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e2af      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
 80051ec:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051f0:	4b96      	ldr	r3, [pc, #600]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ee      	bne.n	80051da <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d06a      	beq.n	80052de <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005208:	4b90      	ldr	r3, [pc, #576]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005210:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005212:	4b8e      	ldr	r3, [pc, #568]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b08      	cmp	r3, #8
 800521c:	d007      	beq.n	800522e <HAL_RCC_OscConfig+0x286>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b18      	cmp	r3, #24
 8005222:	d11b      	bne.n	800525c <HAL_RCC_OscConfig+0x2b4>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b01      	cmp	r3, #1
 800522c:	d116      	bne.n	800525c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800522e:	4b87      	ldr	r3, [pc, #540]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_RCC_OscConfig+0x29e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d001      	beq.n	8005246 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e282      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005246:	4b81      	ldr	r3, [pc, #516]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	061b      	lsls	r3, r3, #24
 8005254:	497d      	ldr	r1, [pc, #500]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800525a:	e040      	b.n	80052de <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d023      	beq.n	80052ac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005264:	4b79      	ldr	r3, [pc, #484]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a78      	ldr	r2, [pc, #480]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 800526a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fd fe6a 	bl	8002f48 <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005278:	f7fd fe66 	bl	8002f48 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e260      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800528a:	4b70      	ldr	r3, [pc, #448]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005296:	4b6d      	ldr	r3, [pc, #436]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	061b      	lsls	r3, r3, #24
 80052a4:	4969      	ldr	r1, [pc, #420]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60cb      	str	r3, [r1, #12]
 80052aa:	e018      	b.n	80052de <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052ac:	4b67      	ldr	r3, [pc, #412]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a66      	ldr	r2, [pc, #408]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 80052b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fd fe46 	bl	8002f48 <HAL_GetTick>
 80052bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052c0:	f7fd fe42 	bl	8002f48 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e23c      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052d2:	4b5e      	ldr	r3, [pc, #376]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d036      	beq.n	8005358 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d019      	beq.n	8005326 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052f2:	4b56      	ldr	r3, [pc, #344]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 80052f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f6:	4a55      	ldr	r2, [pc, #340]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fe:	f7fd fe23 	bl	8002f48 <HAL_GetTick>
 8005302:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005306:	f7fd fe1f 	bl	8002f48 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e219      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005318:	4b4c      	ldr	r3, [pc, #304]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 800531a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCC_OscConfig+0x35e>
 8005324:	e018      	b.n	8005358 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005326:	4b49      	ldr	r3, [pc, #292]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532a:	4a48      	ldr	r2, [pc, #288]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7fd fe09 	bl	8002f48 <HAL_GetTick>
 8005336:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800533a:	f7fd fe05 	bl	8002f48 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e1ff      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800534c:	4b3f      	ldr	r3, [pc, #252]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 800534e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1f0      	bne.n	800533a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d036      	beq.n	80053d2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d019      	beq.n	80053a0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800536c:	4b37      	ldr	r3, [pc, #220]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a36      	ldr	r2, [pc, #216]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005376:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005378:	f7fd fde6 	bl	8002f48 <HAL_GetTick>
 800537c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005380:	f7fd fde2 	bl	8002f48 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e1dc      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005392:	4b2e      	ldr	r3, [pc, #184]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x3d8>
 800539e:	e018      	b.n	80053d2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053a0:	4b2a      	ldr	r3, [pc, #168]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a29      	ldr	r2, [pc, #164]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 80053a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053ac:	f7fd fdcc 	bl	8002f48 <HAL_GetTick>
 80053b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053b4:	f7fd fdc8 	bl	8002f48 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1c2      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053c6:	4b21      	ldr	r3, [pc, #132]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8086 	beq.w	80054ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053e0:	4b1b      	ldr	r3, [pc, #108]	; (8005450 <HAL_RCC_OscConfig+0x4a8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <HAL_RCC_OscConfig+0x4a8>)
 80053e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ec:	f7fd fdac 	bl	8002f48 <HAL_GetTick>
 80053f0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f4:	f7fd fda8 	bl	8002f48 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b64      	cmp	r3, #100	; 0x64
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e1a2      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005406:	4b12      	ldr	r3, [pc, #72]	; (8005450 <HAL_RCC_OscConfig+0x4a8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f0      	beq.n	80053f4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d106      	bne.n	8005428 <HAL_RCC_OscConfig+0x480>
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	4a0b      	ldr	r2, [pc, #44]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	6713      	str	r3, [r2, #112]	; 0x70
 8005426:	e032      	b.n	800548e <HAL_RCC_OscConfig+0x4e6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d111      	bne.n	8005454 <HAL_RCC_OscConfig+0x4ac>
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	4a05      	ldr	r2, [pc, #20]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005436:	f023 0301 	bic.w	r3, r3, #1
 800543a:	6713      	str	r3, [r2, #112]	; 0x70
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 800543e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005440:	4a02      	ldr	r2, [pc, #8]	; (800544c <HAL_RCC_OscConfig+0x4a4>)
 8005442:	f023 0304 	bic.w	r3, r3, #4
 8005446:	6713      	str	r3, [r2, #112]	; 0x70
 8005448:	e021      	b.n	800548e <HAL_RCC_OscConfig+0x4e6>
 800544a:	bf00      	nop
 800544c:	58024400 	.word	0x58024400
 8005450:	58024800 	.word	0x58024800
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b05      	cmp	r3, #5
 800545a:	d10c      	bne.n	8005476 <HAL_RCC_OscConfig+0x4ce>
 800545c:	4b83      	ldr	r3, [pc, #524]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	4a82      	ldr	r2, [pc, #520]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005462:	f043 0304 	orr.w	r3, r3, #4
 8005466:	6713      	str	r3, [r2, #112]	; 0x70
 8005468:	4b80      	ldr	r3, [pc, #512]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	4a7f      	ldr	r2, [pc, #508]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	6713      	str	r3, [r2, #112]	; 0x70
 8005474:	e00b      	b.n	800548e <HAL_RCC_OscConfig+0x4e6>
 8005476:	4b7d      	ldr	r3, [pc, #500]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	4a7c      	ldr	r2, [pc, #496]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 800547c:	f023 0301 	bic.w	r3, r3, #1
 8005480:	6713      	str	r3, [r2, #112]	; 0x70
 8005482:	4b7a      	ldr	r3, [pc, #488]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	4a79      	ldr	r2, [pc, #484]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d015      	beq.n	80054c2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005496:	f7fd fd57 	bl	8002f48 <HAL_GetTick>
 800549a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800549c:	e00a      	b.n	80054b4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fd fd53 	bl	8002f48 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e14b      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b4:	4b6d      	ldr	r3, [pc, #436]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0ee      	beq.n	800549e <HAL_RCC_OscConfig+0x4f6>
 80054c0:	e014      	b.n	80054ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c2:	f7fd fd41 	bl	8002f48 <HAL_GetTick>
 80054c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054c8:	e00a      	b.n	80054e0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fd fd3d 	bl	8002f48 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e135      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054e0:	4b62      	ldr	r3, [pc, #392]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1ee      	bne.n	80054ca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 812a 	beq.w	800574a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80054f6:	4b5d      	ldr	r3, [pc, #372]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054fe:	2b18      	cmp	r3, #24
 8005500:	f000 80ba 	beq.w	8005678 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b02      	cmp	r3, #2
 800550a:	f040 8095 	bne.w	8005638 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550e:	4b57      	ldr	r3, [pc, #348]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a56      	ldr	r2, [pc, #344]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005514:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551a:	f7fd fd15 	bl	8002f48 <HAL_GetTick>
 800551e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005522:	f7fd fd11 	bl	8002f48 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e10b      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005534:	4b4d      	ldr	r3, [pc, #308]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f0      	bne.n	8005522 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005540:	4b4a      	ldr	r3, [pc, #296]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005544:	4b4a      	ldr	r3, [pc, #296]	; (8005670 <HAL_RCC_OscConfig+0x6c8>)
 8005546:	4013      	ands	r3, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005550:	0112      	lsls	r2, r2, #4
 8005552:	430a      	orrs	r2, r1
 8005554:	4945      	ldr	r1, [pc, #276]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005556:	4313      	orrs	r3, r2
 8005558:	628b      	str	r3, [r1, #40]	; 0x28
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	3b01      	subs	r3, #1
 8005560:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005568:	3b01      	subs	r3, #1
 800556a:	025b      	lsls	r3, r3, #9
 800556c:	b29b      	uxth	r3, r3
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	3b01      	subs	r3, #1
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	3b01      	subs	r3, #1
 8005584:	061b      	lsls	r3, r3, #24
 8005586:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800558a:	4938      	ldr	r1, [pc, #224]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 800558c:	4313      	orrs	r3, r2
 800558e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005590:	4b36      	ldr	r3, [pc, #216]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	4a35      	ldr	r2, [pc, #212]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005596:	f023 0301 	bic.w	r3, r3, #1
 800559a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800559c:	4b33      	ldr	r3, [pc, #204]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 800559e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a0:	4b34      	ldr	r3, [pc, #208]	; (8005674 <HAL_RCC_OscConfig+0x6cc>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055a8:	00d2      	lsls	r2, r2, #3
 80055aa:	4930      	ldr	r1, [pc, #192]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055b0:	4b2e      	ldr	r3, [pc, #184]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	f023 020c 	bic.w	r2, r3, #12
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	492b      	ldr	r1, [pc, #172]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055c2:	4b2a      	ldr	r3, [pc, #168]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	f023 0202 	bic.w	r2, r3, #2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	4927      	ldr	r1, [pc, #156]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055d4:	4b25      	ldr	r3, [pc, #148]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	4a24      	ldr	r2, [pc, #144]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e0:	4b22      	ldr	r3, [pc, #136]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4a21      	ldr	r2, [pc, #132]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80055ec:	4b1f      	ldr	r3, [pc, #124]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	4a1e      	ldr	r2, [pc, #120]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80055f8:	4b1c      	ldr	r3, [pc, #112]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	4a1b      	ldr	r2, [pc, #108]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005604:	4b19      	ldr	r3, [pc, #100]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a18      	ldr	r2, [pc, #96]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 800560a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800560e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fd fc9a 	bl	8002f48 <HAL_GetTick>
 8005614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005618:	f7fd fc96 	bl	8002f48 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e090      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <HAL_RCC_OscConfig+0x670>
 8005636:	e088      	b.n	800574a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0b      	ldr	r2, [pc, #44]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 800563e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fd fc80 	bl	8002f48 <HAL_GetTick>
 8005648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564c:	f7fd fc7c 	bl	8002f48 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e076      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800565e:	4b03      	ldr	r3, [pc, #12]	; (800566c <HAL_RCC_OscConfig+0x6c4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x6a4>
 800566a:	e06e      	b.n	800574a <HAL_RCC_OscConfig+0x7a2>
 800566c:	58024400 	.word	0x58024400
 8005670:	fffffc0c 	.word	0xfffffc0c
 8005674:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005678:	4b36      	ldr	r3, [pc, #216]	; (8005754 <HAL_RCC_OscConfig+0x7ac>)
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800567e:	4b35      	ldr	r3, [pc, #212]	; (8005754 <HAL_RCC_OscConfig+0x7ac>)
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b01      	cmp	r3, #1
 800568a:	d031      	beq.n	80056f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f003 0203 	and.w	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005696:	429a      	cmp	r2, r3
 8005698:	d12a      	bne.n	80056f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d122      	bne.n	80056f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d11a      	bne.n	80056f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	0a5b      	lsrs	r3, r3, #9
 80056be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d111      	bne.n	80056f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056da:	429a      	cmp	r2, r3
 80056dc:	d108      	bne.n	80056f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	0e1b      	lsrs	r3, r3, #24
 80056e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e02b      	b.n	800574c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80056f4:	4b17      	ldr	r3, [pc, #92]	; (8005754 <HAL_RCC_OscConfig+0x7ac>)
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	08db      	lsrs	r3, r3, #3
 80056fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	d01f      	beq.n	800574a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800570a:	4b12      	ldr	r3, [pc, #72]	; (8005754 <HAL_RCC_OscConfig+0x7ac>)
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	4a11      	ldr	r2, [pc, #68]	; (8005754 <HAL_RCC_OscConfig+0x7ac>)
 8005710:	f023 0301 	bic.w	r3, r3, #1
 8005714:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005716:	f7fd fc17 	bl	8002f48 <HAL_GetTick>
 800571a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800571c:	bf00      	nop
 800571e:	f7fd fc13 	bl	8002f48 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	4293      	cmp	r3, r2
 8005728:	d0f9      	beq.n	800571e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800572a:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <HAL_RCC_OscConfig+0x7ac>)
 800572c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800572e:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <HAL_RCC_OscConfig+0x7b0>)
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005736:	00d2      	lsls	r2, r2, #3
 8005738:	4906      	ldr	r1, [pc, #24]	; (8005754 <HAL_RCC_OscConfig+0x7ac>)
 800573a:	4313      	orrs	r3, r2
 800573c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <HAL_RCC_OscConfig+0x7ac>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	4a04      	ldr	r2, [pc, #16]	; (8005754 <HAL_RCC_OscConfig+0x7ac>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3730      	adds	r7, #48	; 0x30
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	58024400 	.word	0x58024400
 8005758:	ffff0007 	.word	0xffff0007

0800575c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e19c      	b.n	8005aaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005770:	4b8a      	ldr	r3, [pc, #552]	; (800599c <HAL_RCC_ClockConfig+0x240>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d910      	bls.n	80057a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b87      	ldr	r3, [pc, #540]	; (800599c <HAL_RCC_ClockConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 020f 	bic.w	r2, r3, #15
 8005786:	4985      	ldr	r1, [pc, #532]	; (800599c <HAL_RCC_ClockConfig+0x240>)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	4b83      	ldr	r3, [pc, #524]	; (800599c <HAL_RCC_ClockConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d001      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e184      	b.n	8005aaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	4b7b      	ldr	r3, [pc, #492]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d908      	bls.n	80057ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057bc:	4b78      	ldr	r3, [pc, #480]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	4975      	ldr	r1, [pc, #468]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	4b70      	ldr	r3, [pc, #448]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d908      	bls.n	80057fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057ea:	4b6d      	ldr	r3, [pc, #436]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	496a      	ldr	r1, [pc, #424]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	d010      	beq.n	800582a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699a      	ldr	r2, [r3, #24]
 800580c:	4b64      	ldr	r3, [pc, #400]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005814:	429a      	cmp	r2, r3
 8005816:	d908      	bls.n	800582a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005818:	4b61      	ldr	r3, [pc, #388]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	495e      	ldr	r1, [pc, #376]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 8005826:	4313      	orrs	r3, r2
 8005828:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d010      	beq.n	8005858 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	4b59      	ldr	r3, [pc, #356]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005842:	429a      	cmp	r2, r3
 8005844:	d908      	bls.n	8005858 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005846:	4b56      	ldr	r3, [pc, #344]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	4953      	ldr	r1, [pc, #332]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 8005854:	4313      	orrs	r3, r2
 8005856:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d010      	beq.n	8005886 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	4b4d      	ldr	r3, [pc, #308]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	429a      	cmp	r2, r3
 8005872:	d908      	bls.n	8005886 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005874:	4b4a      	ldr	r3, [pc, #296]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f023 020f 	bic.w	r2, r3, #15
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4947      	ldr	r1, [pc, #284]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 8005882:	4313      	orrs	r3, r2
 8005884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d055      	beq.n	800593e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005892:	4b43      	ldr	r3, [pc, #268]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	4940      	ldr	r1, [pc, #256]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d107      	bne.n	80058bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058ac:	4b3c      	ldr	r3, [pc, #240]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d121      	bne.n	80058fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0f6      	b.n	8005aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d107      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058c4:	4b36      	ldr	r3, [pc, #216]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d115      	bne.n	80058fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0ea      	b.n	8005aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d107      	bne.n	80058ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058dc:	4b30      	ldr	r3, [pc, #192]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d109      	bne.n	80058fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0de      	b.n	8005aaa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ec:	4b2c      	ldr	r3, [pc, #176]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e0d6      	b.n	8005aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058fc:	4b28      	ldr	r3, [pc, #160]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f023 0207 	bic.w	r2, r3, #7
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4925      	ldr	r1, [pc, #148]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 800590a:	4313      	orrs	r3, r2
 800590c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800590e:	f7fd fb1b 	bl	8002f48 <HAL_GetTick>
 8005912:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005914:	e00a      	b.n	800592c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005916:	f7fd fb17 	bl	8002f48 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f241 3288 	movw	r2, #5000	; 0x1388
 8005924:	4293      	cmp	r3, r2
 8005926:	d901      	bls.n	800592c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e0be      	b.n	8005aaa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592c:	4b1c      	ldr	r3, [pc, #112]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	429a      	cmp	r2, r3
 800593c:	d1eb      	bne.n	8005916 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d010      	beq.n	800596c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	4b14      	ldr	r3, [pc, #80]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	429a      	cmp	r2, r3
 8005958:	d208      	bcs.n	800596c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800595a:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f023 020f 	bic.w	r2, r3, #15
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	490e      	ldr	r1, [pc, #56]	; (80059a0 <HAL_RCC_ClockConfig+0x244>)
 8005968:	4313      	orrs	r3, r2
 800596a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <HAL_RCC_ClockConfig+0x240>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 030f 	and.w	r3, r3, #15
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d214      	bcs.n	80059a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597a:	4b08      	ldr	r3, [pc, #32]	; (800599c <HAL_RCC_ClockConfig+0x240>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f023 020f 	bic.w	r2, r3, #15
 8005982:	4906      	ldr	r1, [pc, #24]	; (800599c <HAL_RCC_ClockConfig+0x240>)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	4313      	orrs	r3, r2
 8005988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598a:	4b04      	ldr	r3, [pc, #16]	; (800599c <HAL_RCC_ClockConfig+0x240>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e086      	b.n	8005aaa <HAL_RCC_ClockConfig+0x34e>
 800599c:	52002000 	.word	0x52002000
 80059a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	4b3f      	ldr	r3, [pc, #252]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059bc:	429a      	cmp	r2, r3
 80059be:	d208      	bcs.n	80059d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059c0:	4b3c      	ldr	r3, [pc, #240]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	4939      	ldr	r1, [pc, #228]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d010      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	4b34      	ldr	r3, [pc, #208]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d208      	bcs.n	8005a00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059ee:	4b31      	ldr	r3, [pc, #196]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	492e      	ldr	r1, [pc, #184]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d010      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d208      	bcs.n	8005a2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	4922      	ldr	r1, [pc, #136]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d010      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69da      	ldr	r2, [r3, #28]
 8005a3e:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d208      	bcs.n	8005a5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a4a:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	4917      	ldr	r1, [pc, #92]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a5c:	f000 f834 	bl	8005ac8 <HAL_RCC_GetSysClockFreq>
 8005a60:	4602      	mov	r2, r0
 8005a62:	4b14      	ldr	r3, [pc, #80]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	4912      	ldr	r1, [pc, #72]	; (8005ab8 <HAL_RCC_ClockConfig+0x35c>)
 8005a6e:	5ccb      	ldrb	r3, [r1, r3]
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
 8005a78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a7a:	4b0e      	ldr	r3, [pc, #56]	; (8005ab4 <HAL_RCC_ClockConfig+0x358>)
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	4a0d      	ldr	r2, [pc, #52]	; (8005ab8 <HAL_RCC_ClockConfig+0x35c>)
 8005a84:	5cd3      	ldrb	r3, [r2, r3]
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a90:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <HAL_RCC_ClockConfig+0x360>)
 8005a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a94:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <HAL_RCC_ClockConfig+0x364>)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <HAL_RCC_ClockConfig+0x368>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fd fa08 	bl	8002eb4 <HAL_InitTick>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	58024400 	.word	0x58024400
 8005ab8:	0800d7a4 	.word	0x0800d7a4
 8005abc:	24000004 	.word	0x24000004
 8005ac0:	24000000 	.word	0x24000000
 8005ac4:	24000008 	.word	0x24000008

08005ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b089      	sub	sp, #36	; 0x24
 8005acc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ace:	4bb3      	ldr	r3, [pc, #716]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ad6:	2b18      	cmp	r3, #24
 8005ad8:	f200 8155 	bhi.w	8005d86 <HAL_RCC_GetSysClockFreq+0x2be>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005b49 	.word	0x08005b49
 8005ae8:	08005d87 	.word	0x08005d87
 8005aec:	08005d87 	.word	0x08005d87
 8005af0:	08005d87 	.word	0x08005d87
 8005af4:	08005d87 	.word	0x08005d87
 8005af8:	08005d87 	.word	0x08005d87
 8005afc:	08005d87 	.word	0x08005d87
 8005b00:	08005d87 	.word	0x08005d87
 8005b04:	08005b6f 	.word	0x08005b6f
 8005b08:	08005d87 	.word	0x08005d87
 8005b0c:	08005d87 	.word	0x08005d87
 8005b10:	08005d87 	.word	0x08005d87
 8005b14:	08005d87 	.word	0x08005d87
 8005b18:	08005d87 	.word	0x08005d87
 8005b1c:	08005d87 	.word	0x08005d87
 8005b20:	08005d87 	.word	0x08005d87
 8005b24:	08005b75 	.word	0x08005b75
 8005b28:	08005d87 	.word	0x08005d87
 8005b2c:	08005d87 	.word	0x08005d87
 8005b30:	08005d87 	.word	0x08005d87
 8005b34:	08005d87 	.word	0x08005d87
 8005b38:	08005d87 	.word	0x08005d87
 8005b3c:	08005d87 	.word	0x08005d87
 8005b40:	08005d87 	.word	0x08005d87
 8005b44:	08005b7b 	.word	0x08005b7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b48:	4b94      	ldr	r3, [pc, #592]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d009      	beq.n	8005b68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b54:	4b91      	ldr	r3, [pc, #580]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	08db      	lsrs	r3, r3, #3
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	4a90      	ldr	r2, [pc, #576]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
 8005b64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b66:	e111      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b68:	4b8d      	ldr	r3, [pc, #564]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b6a:	61bb      	str	r3, [r7, #24]
      break;
 8005b6c:	e10e      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b6e:	4b8d      	ldr	r3, [pc, #564]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b70:	61bb      	str	r3, [r7, #24]
      break;
 8005b72:	e10b      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b74:	4b8c      	ldr	r3, [pc, #560]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b76:	61bb      	str	r3, [r7, #24]
      break;
 8005b78:	e108      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b7a:	4b88      	ldr	r3, [pc, #544]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b84:	4b85      	ldr	r3, [pc, #532]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	091b      	lsrs	r3, r3, #4
 8005b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b90:	4b82      	ldr	r3, [pc, #520]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b9a:	4b80      	ldr	r3, [pc, #512]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9e:	08db      	lsrs	r3, r3, #3
 8005ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 80e1 	beq.w	8005d80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	f000 8083 	beq.w	8005ccc <HAL_RCC_GetSysClockFreq+0x204>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	f200 80a1 	bhi.w	8005d10 <HAL_RCC_GetSysClockFreq+0x248>
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_RCC_GetSysClockFreq+0x114>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d056      	beq.n	8005c88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bda:	e099      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bdc:	4b6f      	ldr	r3, [pc, #444]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d02d      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005be8:	4b6c      	ldr	r3, [pc, #432]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	08db      	lsrs	r3, r3, #3
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	4a6b      	ldr	r2, [pc, #428]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	ee07 3a90 	vmov	s15, r3
 8005c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	ee07 3a90 	vmov	s15, r3
 8005c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c12:	4b62      	ldr	r3, [pc, #392]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c42:	e087      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005db0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c56:	4b51      	ldr	r3, [pc, #324]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c86:	e065      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9a:	4b40      	ldr	r3, [pc, #256]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cca:	e043      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005db8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cde:	4b2f      	ldr	r3, [pc, #188]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cf2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d0e:	e021      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d22:	4b1e      	ldr	r3, [pc, #120]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d54:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	0a5b      	lsrs	r3, r3, #9
 8005d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d5e:	3301      	adds	r3, #1
 8005d60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	ee07 3a90 	vmov	s15, r3
 8005d68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d78:	ee17 3a90 	vmov	r3, s15
 8005d7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d7e:	e005      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61bb      	str	r3, [r7, #24]
      break;
 8005d84:	e002      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d88:	61bb      	str	r3, [r7, #24]
      break;
 8005d8a:	bf00      	nop
  }

  return sysclockfreq;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3724      	adds	r7, #36	; 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	58024400 	.word	0x58024400
 8005da0:	03d09000 	.word	0x03d09000
 8005da4:	003d0900 	.word	0x003d0900
 8005da8:	02dc6c00 	.word	0x02dc6c00
 8005dac:	46000000 	.word	0x46000000
 8005db0:	4c742400 	.word	0x4c742400
 8005db4:	4a742400 	.word	0x4a742400
 8005db8:	4c371b00 	.word	0x4c371b00

08005dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dc2:	f7ff fe81 	bl	8005ac8 <HAL_RCC_GetSysClockFreq>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	0a1b      	lsrs	r3, r3, #8
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	490f      	ldr	r1, [pc, #60]	; (8005e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8005dd4:	5ccb      	ldrb	r3, [r1, r3]
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	fa22 f303 	lsr.w	r3, r2, r3
 8005dde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005de0:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8005dea:	5cd3      	ldrb	r3, [r2, r3]
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	fa22 f303 	lsr.w	r3, r2, r3
 8005df6:	4a07      	ldr	r2, [pc, #28]	; (8005e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8005df8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dfa:	4a07      	ldr	r2, [pc, #28]	; (8005e18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e02:	681b      	ldr	r3, [r3, #0]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	58024400 	.word	0x58024400
 8005e10:	0800d7a4 	.word	0x0800d7a4
 8005e14:	24000004 	.word	0x24000004
 8005e18:	24000000 	.word	0x24000000

08005e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e20:	f7ff ffcc 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 8005e24:	4602      	mov	r2, r0
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	091b      	lsrs	r3, r3, #4
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	4904      	ldr	r1, [pc, #16]	; (8005e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e32:	5ccb      	ldrb	r3, [r1, r3]
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	58024400 	.word	0x58024400
 8005e44:	0800d7a4 	.word	0x0800d7a4

08005e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e4c:	f7ff ffb6 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 8005e50:	4602      	mov	r2, r0
 8005e52:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	4904      	ldr	r1, [pc, #16]	; (8005e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e5e:	5ccb      	ldrb	r3, [r1, r3]
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	0800d7a4 	.word	0x0800d7a4

08005e74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e78:	b0c6      	sub	sp, #280	; 0x118
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005e98:	2500      	movs	r5, #0
 8005e9a:	ea54 0305 	orrs.w	r3, r4, r5
 8005e9e:	d049      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eaa:	d02f      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005eac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eb0:	d828      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb6:	d01a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ebc:	d822      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec6:	d007      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ec8:	e01c      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eca:	4bab      	ldr	r3, [pc, #684]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	4aaa      	ldr	r2, [pc, #680]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ed6:	e01a      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005edc:	3308      	adds	r3, #8
 8005ede:	2102      	movs	r1, #2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f002 fa49 	bl	8008378 <RCCEx_PLL2_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005eec:	e00f      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef2:	3328      	adds	r3, #40	; 0x28
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f002 faf0 	bl	80084dc <RCCEx_PLL3_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f02:	e004      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f0a:	e000      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f16:	4b98      	ldr	r3, [pc, #608]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f24:	4a94      	ldr	r2, [pc, #592]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f26:	430b      	orrs	r3, r1
 8005f28:	6513      	str	r3, [r2, #80]	; 0x50
 8005f2a:	e003      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005f40:	f04f 0900 	mov.w	r9, #0
 8005f44:	ea58 0309 	orrs.w	r3, r8, r9
 8005f48:	d047      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d82a      	bhi.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f71 	.word	0x08005f71
 8005f60:	08005f7f 	.word	0x08005f7f
 8005f64:	08005f95 	.word	0x08005f95
 8005f68:	08005fb3 	.word	0x08005fb3
 8005f6c:	08005fb3 	.word	0x08005fb3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f70:	4b81      	ldr	r3, [pc, #516]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	4a80      	ldr	r2, [pc, #512]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f7c:	e01a      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f82:	3308      	adds	r3, #8
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f002 f9f6 	bl	8008378 <RCCEx_PLL2_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f92:	e00f      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f98:	3328      	adds	r3, #40	; 0x28
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f002 fa9d 	bl	80084dc <RCCEx_PLL3_Config>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fa8:	e004      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005fb0:	e000      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fbc:	4b6e      	ldr	r3, [pc, #440]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc0:	f023 0107 	bic.w	r1, r3, #7
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fca:	4a6b      	ldr	r2, [pc, #428]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6513      	str	r3, [r2, #80]	; 0x50
 8005fd0:	e003      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005fe6:	f04f 0b00 	mov.w	fp, #0
 8005fea:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fee:	d05b      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ff8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ffc:	d03b      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005ffe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006002:	d834      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006004:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006008:	d037      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800600a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800600e:	d82e      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006010:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006014:	d033      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006016:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800601a:	d828      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800601c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006020:	d01a      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006026:	d822      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800602c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006030:	d007      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006032:	e01c      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006034:	4b50      	ldr	r3, [pc, #320]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	4a4f      	ldr	r2, [pc, #316]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800603a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800603e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006040:	e01e      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006046:	3308      	adds	r3, #8
 8006048:	2100      	movs	r1, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f002 f994 	bl	8008378 <RCCEx_PLL2_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006056:	e013      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605c:	3328      	adds	r3, #40	; 0x28
 800605e:	2100      	movs	r1, #0
 8006060:	4618      	mov	r0, r3
 8006062:	f002 fa3b 	bl	80084dc <RCCEx_PLL3_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800606c:	e008      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006074:	e004      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006076:	bf00      	nop
 8006078:	e002      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800607e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006080:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006088:	4b3b      	ldr	r3, [pc, #236]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006094:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006098:	4a37      	ldr	r2, [pc, #220]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800609a:	430b      	orrs	r3, r1
 800609c:	6593      	str	r3, [r2, #88]	; 0x58
 800609e:	e003      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80060b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80060b8:	2300      	movs	r3, #0
 80060ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80060c2:	460b      	mov	r3, r1
 80060c4:	4313      	orrs	r3, r2
 80060c6:	d05d      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80060c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060d0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80060d4:	d03b      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80060d6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80060da:	d834      	bhi.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060e0:	d037      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80060e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060e6:	d82e      	bhi.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060ec:	d033      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80060ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060f2:	d828      	bhi.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060f8:	d01a      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80060fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060fe:	d822      	bhi.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006108:	d007      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800610a:	e01c      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800610c:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	4a19      	ldr	r2, [pc, #100]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006116:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006118:	e01e      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800611a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611e:	3308      	adds	r3, #8
 8006120:	2100      	movs	r1, #0
 8006122:	4618      	mov	r0, r3
 8006124:	f002 f928 	bl	8008378 <RCCEx_PLL2_Config>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800612e:	e013      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006134:	3328      	adds	r3, #40	; 0x28
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f002 f9cf 	bl	80084dc <RCCEx_PLL3_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006144:	e008      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800614c:	e004      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800614e:	bf00      	nop
 8006150:	e002      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006152:	bf00      	nop
 8006154:	e000      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006158:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10d      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006160:	4b05      	ldr	r3, [pc, #20]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006164:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006170:	4a01      	ldr	r2, [pc, #4]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006172:	430b      	orrs	r3, r1
 8006174:	6593      	str	r3, [r2, #88]	; 0x58
 8006176:	e005      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006178:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006180:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006190:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006194:	2300      	movs	r3, #0
 8006196:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800619a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800619e:	460b      	mov	r3, r1
 80061a0:	4313      	orrs	r3, r2
 80061a2:	d03a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061aa:	2b30      	cmp	r3, #48	; 0x30
 80061ac:	d01f      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80061ae:	2b30      	cmp	r3, #48	; 0x30
 80061b0:	d819      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d00c      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d815      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d019      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80061be:	2b10      	cmp	r3, #16
 80061c0:	d111      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c2:	4baa      	ldr	r3, [pc, #680]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c6:	4aa9      	ldr	r2, [pc, #676]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80061ce:	e011      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d4:	3308      	adds	r3, #8
 80061d6:	2102      	movs	r1, #2
 80061d8:	4618      	mov	r0, r3
 80061da:	f002 f8cd 	bl	8008378 <RCCEx_PLL2_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80061e4:	e006      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061ec:	e002      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80061ee:	bf00      	nop
 80061f0:	e000      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80061f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80061fc:	4b9b      	ldr	r3, [pc, #620]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006200:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620a:	4a98      	ldr	r2, [pc, #608]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800620c:	430b      	orrs	r3, r1
 800620e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006210:	e003      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006212:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006216:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800621a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800622a:	2300      	movs	r3, #0
 800622c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006230:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006234:	460b      	mov	r3, r1
 8006236:	4313      	orrs	r3, r2
 8006238:	d051      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800623a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006244:	d035      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800624a:	d82e      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 800624c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006250:	d031      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006252:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006256:	d828      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625c:	d01a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800625e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006262:	d822      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626c:	d007      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800626e:	e01c      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006270:	4b7e      	ldr	r3, [pc, #504]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	4a7d      	ldr	r2, [pc, #500]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800627a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800627c:	e01c      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800627e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006282:	3308      	adds	r3, #8
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f002 f876 	bl	8008378 <RCCEx_PLL2_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006292:	e011      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006298:	3328      	adds	r3, #40	; 0x28
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f002 f91d 	bl	80084dc <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062a8:	e006      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80062b0:	e002      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80062b2:	bf00      	nop
 80062b4:	e000      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80062b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80062c0:	4b6a      	ldr	r3, [pc, #424]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ce:	4a67      	ldr	r2, [pc, #412]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6513      	str	r3, [r2, #80]	; 0x50
 80062d4:	e003      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80062ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062ee:	2300      	movs	r3, #0
 80062f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062f4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4313      	orrs	r3, r2
 80062fc:	d053      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80062fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006308:	d033      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800630a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800630e:	d82c      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006314:	d02f      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006316:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800631a:	d826      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800631c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006320:	d02b      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006322:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006326:	d820      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800632c:	d012      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800632e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006332:	d81a      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d022      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633c:	d115      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006342:	3308      	adds	r3, #8
 8006344:	2101      	movs	r1, #1
 8006346:	4618      	mov	r0, r3
 8006348:	f002 f816 	bl	8008378 <RCCEx_PLL2_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006352:	e015      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006358:	3328      	adds	r3, #40	; 0x28
 800635a:	2101      	movs	r1, #1
 800635c:	4618      	mov	r0, r3
 800635e:	f002 f8bd 	bl	80084dc <RCCEx_PLL3_Config>
 8006362:	4603      	mov	r3, r0
 8006364:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006368:	e00a      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006370:	e006      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006372:	bf00      	nop
 8006374:	e004      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006376:	bf00      	nop
 8006378:	e002      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800637a:	bf00      	nop
 800637c:	e000      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800637e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006380:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006388:	4b38      	ldr	r3, [pc, #224]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006396:	4a35      	ldr	r2, [pc, #212]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006398:	430b      	orrs	r3, r1
 800639a:	6513      	str	r3, [r2, #80]	; 0x50
 800639c:	e003      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80063a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ae:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80063b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063b6:	2300      	movs	r3, #0
 80063b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063bc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063c0:	460b      	mov	r3, r1
 80063c2:	4313      	orrs	r3, r2
 80063c4:	d058      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80063c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063d2:	d033      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80063d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063d8:	d82c      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063de:	d02f      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e4:	d826      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063ea:	d02b      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80063ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063f0:	d820      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f6:	d012      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80063f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063fc:	d81a      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d022      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006406:	d115      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640c:	3308      	adds	r3, #8
 800640e:	2101      	movs	r1, #1
 8006410:	4618      	mov	r0, r3
 8006412:	f001 ffb1 	bl	8008378 <RCCEx_PLL2_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800641c:	e015      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800641e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006422:	3328      	adds	r3, #40	; 0x28
 8006424:	2101      	movs	r1, #1
 8006426:	4618      	mov	r0, r3
 8006428:	f002 f858 	bl	80084dc <RCCEx_PLL3_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006432:	e00a      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800643a:	e006      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800643c:	bf00      	nop
 800643e:	e004      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006440:	bf00      	nop
 8006442:	e002      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006444:	bf00      	nop
 8006446:	e000      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10e      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006452:	4b06      	ldr	r3, [pc, #24]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006456:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800645a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006462:	4a02      	ldr	r2, [pc, #8]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006464:	430b      	orrs	r3, r1
 8006466:	6593      	str	r3, [r2, #88]	; 0x58
 8006468:	e006      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800646a:	bf00      	nop
 800646c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006470:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006474:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800648e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006492:	460b      	mov	r3, r1
 8006494:	4313      	orrs	r3, r2
 8006496:	d037      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800649e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a2:	d00e      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80064a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a8:	d816      	bhi.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d018      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80064ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b2:	d111      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b4:	4bc4      	ldr	r3, [pc, #784]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	4ac3      	ldr	r2, [pc, #780]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80064c0:	e00f      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c6:	3308      	adds	r3, #8
 80064c8:	2101      	movs	r1, #1
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 ff54 	bl	8008378 <RCCEx_PLL2_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80064d6:	e004      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064de:	e000      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80064e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064ea:	4bb7      	ldr	r3, [pc, #732]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f8:	4ab3      	ldr	r2, [pc, #716]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064fa:	430b      	orrs	r3, r1
 80064fc:	6513      	str	r3, [r2, #80]	; 0x50
 80064fe:	e003      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006504:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006518:	2300      	movs	r3, #0
 800651a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800651e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006522:	460b      	mov	r3, r1
 8006524:	4313      	orrs	r3, r2
 8006526:	d039      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652e:	2b03      	cmp	r3, #3
 8006530:	d81c      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	08006575 	.word	0x08006575
 800653c:	08006549 	.word	0x08006549
 8006540:	08006557 	.word	0x08006557
 8006544:	08006575 	.word	0x08006575
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006548:	4b9f      	ldr	r3, [pc, #636]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	4a9e      	ldr	r2, [pc, #632]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800654e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006554:	e00f      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655a:	3308      	adds	r3, #8
 800655c:	2102      	movs	r1, #2
 800655e:	4618      	mov	r0, r3
 8006560:	f001 ff0a 	bl	8008378 <RCCEx_PLL2_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800656a:	e004      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006572:	e000      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006576:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800657e:	4b92      	ldr	r3, [pc, #584]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006582:	f023 0103 	bic.w	r1, r3, #3
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800658c:	4a8e      	ldr	r2, [pc, #568]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800658e:	430b      	orrs	r3, r1
 8006590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006592:	e003      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006594:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006598:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80065a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065ac:	2300      	movs	r3, #0
 80065ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f000 8099 	beq.w	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065be:	4b83      	ldr	r3, [pc, #524]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a82      	ldr	r2, [pc, #520]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065ca:	f7fc fcbd 	bl	8002f48 <HAL_GetTick>
 80065ce:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065d2:	e00b      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d4:	f7fc fcb8 	bl	8002f48 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b64      	cmp	r3, #100	; 0x64
 80065e2:	d903      	bls.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065ea:	e005      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065ec:	4b77      	ldr	r3, [pc, #476]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0ed      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80065f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d173      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006600:	4b71      	ldr	r3, [pc, #452]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006608:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800660c:	4053      	eors	r3, r2
 800660e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006612:	2b00      	cmp	r3, #0
 8006614:	d015      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006616:	4b6c      	ldr	r3, [pc, #432]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006622:	4b69      	ldr	r3, [pc, #420]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	4a68      	ldr	r2, [pc, #416]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800662c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800662e:	4b66      	ldr	r3, [pc, #408]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006632:	4a65      	ldr	r2, [pc, #404]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006638:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800663a:	4a63      	ldr	r2, [pc, #396]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800663c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006640:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006646:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800664a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664e:	d118      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fc fc7a 	bl	8002f48 <HAL_GetTick>
 8006654:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006658:	e00d      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800665a:	f7fc fc75 	bl	8002f48 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006664:	1ad2      	subs	r2, r2, r3
 8006666:	f241 3388 	movw	r3, #5000	; 0x1388
 800666a:	429a      	cmp	r2, r3
 800666c:	d903      	bls.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006674:	e005      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006676:	4b54      	ldr	r3, [pc, #336]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0eb      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006682:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006686:	2b00      	cmp	r3, #0
 8006688:	d129      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800669a:	d10e      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x846>
 800669c:	4b4a      	ldr	r3, [pc, #296]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066ac:	091a      	lsrs	r2, r3, #4
 80066ae:	4b48      	ldr	r3, [pc, #288]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	4a45      	ldr	r2, [pc, #276]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066b4:	430b      	orrs	r3, r1
 80066b6:	6113      	str	r3, [r2, #16]
 80066b8:	e005      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80066ba:	4b43      	ldr	r3, [pc, #268]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	4a42      	ldr	r2, [pc, #264]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80066c4:	6113      	str	r3, [r2, #16]
 80066c6:	4b40      	ldr	r3, [pc, #256]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d6:	4a3c      	ldr	r2, [pc, #240]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d8:	430b      	orrs	r3, r1
 80066da:	6713      	str	r3, [r2, #112]	; 0x70
 80066dc:	e008      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80066e6:	e003      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f002 0301 	and.w	r3, r2, #1
 80066fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006700:	2300      	movs	r3, #0
 8006702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006706:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800670a:	460b      	mov	r3, r1
 800670c:	4313      	orrs	r3, r2
 800670e:	f000 808f 	beq.w	8006830 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006718:	2b28      	cmp	r3, #40	; 0x28
 800671a:	d871      	bhi.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800671c:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800671e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006722:	bf00      	nop
 8006724:	08006809 	.word	0x08006809
 8006728:	08006801 	.word	0x08006801
 800672c:	08006801 	.word	0x08006801
 8006730:	08006801 	.word	0x08006801
 8006734:	08006801 	.word	0x08006801
 8006738:	08006801 	.word	0x08006801
 800673c:	08006801 	.word	0x08006801
 8006740:	08006801 	.word	0x08006801
 8006744:	080067d5 	.word	0x080067d5
 8006748:	08006801 	.word	0x08006801
 800674c:	08006801 	.word	0x08006801
 8006750:	08006801 	.word	0x08006801
 8006754:	08006801 	.word	0x08006801
 8006758:	08006801 	.word	0x08006801
 800675c:	08006801 	.word	0x08006801
 8006760:	08006801 	.word	0x08006801
 8006764:	080067eb 	.word	0x080067eb
 8006768:	08006801 	.word	0x08006801
 800676c:	08006801 	.word	0x08006801
 8006770:	08006801 	.word	0x08006801
 8006774:	08006801 	.word	0x08006801
 8006778:	08006801 	.word	0x08006801
 800677c:	08006801 	.word	0x08006801
 8006780:	08006801 	.word	0x08006801
 8006784:	08006809 	.word	0x08006809
 8006788:	08006801 	.word	0x08006801
 800678c:	08006801 	.word	0x08006801
 8006790:	08006801 	.word	0x08006801
 8006794:	08006801 	.word	0x08006801
 8006798:	08006801 	.word	0x08006801
 800679c:	08006801 	.word	0x08006801
 80067a0:	08006801 	.word	0x08006801
 80067a4:	08006809 	.word	0x08006809
 80067a8:	08006801 	.word	0x08006801
 80067ac:	08006801 	.word	0x08006801
 80067b0:	08006801 	.word	0x08006801
 80067b4:	08006801 	.word	0x08006801
 80067b8:	08006801 	.word	0x08006801
 80067bc:	08006801 	.word	0x08006801
 80067c0:	08006801 	.word	0x08006801
 80067c4:	08006809 	.word	0x08006809
 80067c8:	58024400 	.word	0x58024400
 80067cc:	58024800 	.word	0x58024800
 80067d0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d8:	3308      	adds	r3, #8
 80067da:	2101      	movs	r1, #1
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 fdcb 	bl	8008378 <RCCEx_PLL2_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067e8:	e00f      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ee:	3328      	adds	r3, #40	; 0x28
 80067f0:	2101      	movs	r1, #1
 80067f2:	4618      	mov	r0, r3
 80067f4:	f001 fe72 	bl	80084dc <RCCEx_PLL3_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067fe:	e004      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006806:	e000      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800680a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006812:	4bbf      	ldr	r3, [pc, #764]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800681a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006820:	4abb      	ldr	r2, [pc, #748]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006822:	430b      	orrs	r3, r1
 8006824:	6553      	str	r3, [r2, #84]	; 0x54
 8006826:	e003      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006828:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800682c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f002 0302 	and.w	r3, r2, #2
 800683c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006840:	2300      	movs	r3, #0
 8006842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006846:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800684a:	460b      	mov	r3, r1
 800684c:	4313      	orrs	r3, r2
 800684e:	d041      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006856:	2b05      	cmp	r3, #5
 8006858:	d824      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800685a:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	080068ad 	.word	0x080068ad
 8006864:	08006879 	.word	0x08006879
 8006868:	0800688f 	.word	0x0800688f
 800686c:	080068ad 	.word	0x080068ad
 8006870:	080068ad 	.word	0x080068ad
 8006874:	080068ad 	.word	0x080068ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687c:	3308      	adds	r3, #8
 800687e:	2101      	movs	r1, #1
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fd79 	bl	8008378 <RCCEx_PLL2_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800688c:	e00f      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006892:	3328      	adds	r3, #40	; 0x28
 8006894:	2101      	movs	r1, #1
 8006896:	4618      	mov	r0, r3
 8006898:	f001 fe20 	bl	80084dc <RCCEx_PLL3_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80068a2:	e004      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80068aa:	e000      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80068ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80068b6:	4b96      	ldr	r3, [pc, #600]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ba:	f023 0107 	bic.w	r1, r3, #7
 80068be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c4:	4a92      	ldr	r2, [pc, #584]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068c6:	430b      	orrs	r3, r1
 80068c8:	6553      	str	r3, [r2, #84]	; 0x54
 80068ca:	e003      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f002 0304 	and.w	r3, r2, #4
 80068e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068e4:	2300      	movs	r3, #0
 80068e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068ea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068ee:	460b      	mov	r3, r1
 80068f0:	4313      	orrs	r3, r2
 80068f2:	d044      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fc:	2b05      	cmp	r3, #5
 80068fe:	d825      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	08006955 	.word	0x08006955
 800690c:	08006921 	.word	0x08006921
 8006910:	08006937 	.word	0x08006937
 8006914:	08006955 	.word	0x08006955
 8006918:	08006955 	.word	0x08006955
 800691c:	08006955 	.word	0x08006955
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006924:	3308      	adds	r3, #8
 8006926:	2101      	movs	r1, #1
 8006928:	4618      	mov	r0, r3
 800692a:	f001 fd25 	bl	8008378 <RCCEx_PLL2_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006934:	e00f      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693a:	3328      	adds	r3, #40	; 0x28
 800693c:	2101      	movs	r1, #1
 800693e:	4618      	mov	r0, r3
 8006940:	f001 fdcc 	bl	80084dc <RCCEx_PLL3_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800694a:	e004      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006952:	e000      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006956:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800695e:	4b6c      	ldr	r3, [pc, #432]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006962:	f023 0107 	bic.w	r1, r3, #7
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696e:	4a68      	ldr	r2, [pc, #416]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006970:	430b      	orrs	r3, r1
 8006972:	6593      	str	r3, [r2, #88]	; 0x58
 8006974:	e003      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800697a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800697e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	f002 0320 	and.w	r3, r2, #32
 800698a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800698e:	2300      	movs	r3, #0
 8006990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006994:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006998:	460b      	mov	r3, r1
 800699a:	4313      	orrs	r3, r2
 800699c:	d055      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800699e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069aa:	d033      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80069ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069b0:	d82c      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b6:	d02f      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80069b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069bc:	d826      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069c2:	d02b      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80069c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069c8:	d820      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ce:	d012      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80069d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d4:	d81a      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d022      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80069da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069de:	d115      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e4:	3308      	adds	r3, #8
 80069e6:	2100      	movs	r1, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 fcc5 	bl	8008378 <RCCEx_PLL2_Config>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069f4:	e015      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fa:	3328      	adds	r3, #40	; 0x28
 80069fc:	2102      	movs	r1, #2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 fd6c 	bl	80084dc <RCCEx_PLL3_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a0a:	e00a      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a12:	e006      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a14:	bf00      	nop
 8006a16:	e004      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a18:	bf00      	nop
 8006a1a:	e002      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a1c:	bf00      	nop
 8006a1e:	e000      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a2a:	4b39      	ldr	r3, [pc, #228]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a3a:	4a35      	ldr	r2, [pc, #212]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6553      	str	r3, [r2, #84]	; 0x54
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006a56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a60:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006a64:	460b      	mov	r3, r1
 8006a66:	4313      	orrs	r3, r2
 8006a68:	d058      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a76:	d033      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006a78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a7c:	d82c      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a82:	d02f      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a88:	d826      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a8e:	d02b      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006a90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a94:	d820      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9a:	d012      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aa0:	d81a      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d022      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aaa:	d115      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 fc5f 	bl	8008378 <RCCEx_PLL2_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ac0:	e015      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac6:	3328      	adds	r3, #40	; 0x28
 8006ac8:	2102      	movs	r1, #2
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 fd06 	bl	80084dc <RCCEx_PLL3_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ad6:	e00a      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ade:	e006      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ae0:	bf00      	nop
 8006ae2:	e004      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ae4:	bf00      	nop
 8006ae6:	e002      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ae8:	bf00      	nop
 8006aea:	e000      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10e      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006af6:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b06:	4a02      	ldr	r2, [pc, #8]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b0c:	e006      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006b0e:	bf00      	nop
 8006b10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006b28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d055      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b48:	d033      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006b4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b4e:	d82c      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b54:	d02f      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b5a:	d826      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b60:	d02b      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006b62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b66:	d820      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b6c:	d012      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006b6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b72:	d81a      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d022      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7c:	d115      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b82:	3308      	adds	r3, #8
 8006b84:	2100      	movs	r1, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 fbf6 	bl	8008378 <RCCEx_PLL2_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b92:	e015      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b98:	3328      	adds	r3, #40	; 0x28
 8006b9a:	2102      	movs	r1, #2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f001 fc9d 	bl	80084dc <RCCEx_PLL3_Config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ba8:	e00a      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006bb0:	e006      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006bb2:	bf00      	nop
 8006bb4:	e004      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006bb6:	bf00      	nop
 8006bb8:	e002      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006bba:	bf00      	nop
 8006bbc:	e000      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10b      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006bc8:	4ba0      	ldr	r3, [pc, #640]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bd8:	4a9c      	ldr	r2, [pc, #624]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006be4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f002 0308 	and.w	r3, r2, #8
 8006bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006bfe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006c02:	460b      	mov	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	d01e      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c14:	d10c      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1a:	3328      	adds	r3, #40	; 0x28
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fc5c 	bl	80084dc <RCCEx_PLL3_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006c30:	4b86      	ldr	r3, [pc, #536]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c40:	4a82      	ldr	r2, [pc, #520]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c42:	430b      	orrs	r3, r1
 8006c44:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	f002 0310 	and.w	r3, r2, #16
 8006c52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c56:	2300      	movs	r3, #0
 8006c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c5c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006c60:	460b      	mov	r3, r1
 8006c62:	4313      	orrs	r3, r2
 8006c64:	d01e      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c72:	d10c      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	3328      	adds	r3, #40	; 0x28
 8006c7a:	2102      	movs	r1, #2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 fc2d 	bl	80084dc <RCCEx_PLL3_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c8e:	4b6f      	ldr	r3, [pc, #444]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c9e:	4a6b      	ldr	r2, [pc, #428]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cb6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	d03e      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ccc:	d022      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cd2:	d81b      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cdc:	d00b      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006cde:	e015      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 fb45 	bl	8008378 <RCCEx_PLL2_Config>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006cf4:	e00f      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cfa:	3328      	adds	r3, #40	; 0x28
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 fbec 	bl	80084dc <RCCEx_PLL3_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d0a:	e004      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d12:	e000      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10b      	bne.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d1e:	4b4b      	ldr	r3, [pc, #300]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d2e:	4a47      	ldr	r2, [pc, #284]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d30:	430b      	orrs	r3, r1
 8006d32:	6593      	str	r3, [r2, #88]	; 0x58
 8006d34:	e003      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d3a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006d4a:	673b      	str	r3, [r7, #112]	; 0x70
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	677b      	str	r3, [r7, #116]	; 0x74
 8006d50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006d54:	460b      	mov	r3, r1
 8006d56:	4313      	orrs	r3, r2
 8006d58:	d03b      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d66:	d01f      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006d68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d6c:	d818      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d72:	d003      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d78:	d007      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006d7a:	e011      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7c:	4b33      	ldr	r3, [pc, #204]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	4a32      	ldr	r2, [pc, #200]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d88:	e00f      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8e:	3328      	adds	r3, #40	; 0x28
 8006d90:	2101      	movs	r1, #1
 8006d92:	4618      	mov	r0, r3
 8006d94:	f001 fba2 	bl	80084dc <RCCEx_PLL3_Config>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d9e:	e004      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006da6:	e000      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006daa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10b      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006db2:	4b26      	ldr	r3, [pc, #152]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc2:	4a22      	ldr	r2, [pc, #136]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	6553      	str	r3, [r2, #84]	; 0x54
 8006dc8:	e003      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006dde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006de0:	2300      	movs	r3, #0
 8006de2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006de4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006de8:	460b      	mov	r3, r1
 8006dea:	4313      	orrs	r3, r2
 8006dec:	d034      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dfc:	d007      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006dfe:	e011      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e00:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	4a11      	ldr	r2, [pc, #68]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e0c:	e00e      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e12:	3308      	adds	r3, #8
 8006e14:	2102      	movs	r1, #2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 faae 	bl	8008378 <RCCEx_PLL2_Config>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e22:	e003      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10d      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e42:	4a02      	ldr	r2, [pc, #8]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e44:	430b      	orrs	r3, r1
 8006e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e48:	e006      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006e4a:	bf00      	nop
 8006e4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006e64:	663b      	str	r3, [r7, #96]	; 0x60
 8006e66:	2300      	movs	r3, #0
 8006e68:	667b      	str	r3, [r7, #100]	; 0x64
 8006e6a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4313      	orrs	r3, r2
 8006e72:	d00c      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e78:	3328      	adds	r3, #40	; 0x28
 8006e7a:	2102      	movs	r1, #2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 fb2d 	bl	80084dc <RCCEx_PLL3_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006e9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	d036      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eb4:	d018      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eba:	d811      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec0:	d014      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec6:	d80b      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d011      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed0:	d106      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed2:	4bb7      	ldr	r3, [pc, #732]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	4ab6      	ldr	r2, [pc, #728]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006edc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ede:	e008      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ee6:	e004      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ee8:	bf00      	nop
 8006eea:	e002      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006eec:	bf00      	nop
 8006eee:	e000      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006efa:	4bad      	ldr	r3, [pc, #692]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f08:	4aa9      	ldr	r2, [pc, #676]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	6553      	str	r3, [r2, #84]	; 0x54
 8006f0e:	e003      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006f24:	653b      	str	r3, [r7, #80]	; 0x50
 8006f26:	2300      	movs	r3, #0
 8006f28:	657b      	str	r3, [r7, #84]	; 0x54
 8006f2a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4313      	orrs	r3, r2
 8006f32:	d009      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f34:	4b9e      	ldr	r3, [pc, #632]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f42:	4a9b      	ldr	r2, [pc, #620]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f44:	430b      	orrs	r3, r1
 8006f46:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f56:	2300      	movs	r3, #0
 8006f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f5a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4313      	orrs	r3, r2
 8006f62:	d009      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f64:	4b92      	ldr	r3, [pc, #584]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f68:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f72:	4a8f      	ldr	r2, [pc, #572]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f74:	430b      	orrs	r3, r1
 8006f76:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006f84:	643b      	str	r3, [r7, #64]	; 0x40
 8006f86:	2300      	movs	r3, #0
 8006f88:	647b      	str	r3, [r7, #68]	; 0x44
 8006f8a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4313      	orrs	r3, r2
 8006f92:	d00e      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f94:	4b86      	ldr	r3, [pc, #536]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	4a85      	ldr	r2, [pc, #532]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f9e:	6113      	str	r3, [r2, #16]
 8006fa0:	4b83      	ldr	r3, [pc, #524]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fa2:	6919      	ldr	r1, [r3, #16]
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fac:	4a80      	ldr	r2, [pc, #512]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fc4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	d009      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fce:	4b78      	ldr	r3, [pc, #480]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fdc:	4a74      	ldr	r2, [pc, #464]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006fee:	633b      	str	r3, [r7, #48]	; 0x30
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	d00a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ffe:	4b6c      	ldr	r3, [pc, #432]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700e:	4a68      	ldr	r2, [pc, #416]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007010:	430b      	orrs	r3, r1
 8007012:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	2100      	movs	r1, #0
 800701e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007026:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800702a:	460b      	mov	r3, r1
 800702c:	4313      	orrs	r3, r2
 800702e:	d011      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007034:	3308      	adds	r3, #8
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f001 f99d 	bl	8008378 <RCCEx_PLL2_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007044:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007050:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	2100      	movs	r1, #0
 800705e:	6239      	str	r1, [r7, #32]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
 8007066:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800706a:	460b      	mov	r3, r1
 800706c:	4313      	orrs	r3, r2
 800706e:	d011      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007074:	3308      	adds	r3, #8
 8007076:	2101      	movs	r1, #1
 8007078:	4618      	mov	r0, r3
 800707a:	f001 f97d 	bl	8008378 <RCCEx_PLL2_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007084:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007090:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	2100      	movs	r1, #0
 800709e:	61b9      	str	r1, [r7, #24]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80070aa:	460b      	mov	r3, r1
 80070ac:	4313      	orrs	r3, r2
 80070ae:	d011      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b4:	3308      	adds	r3, #8
 80070b6:	2102      	movs	r1, #2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 f95d 	bl	8008378 <RCCEx_PLL2_Config>
 80070be:	4603      	mov	r3, r0
 80070c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80070c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	2100      	movs	r1, #0
 80070de:	6139      	str	r1, [r7, #16]
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80070ea:	460b      	mov	r3, r1
 80070ec:	4313      	orrs	r3, r2
 80070ee:	d011      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f4:	3328      	adds	r3, #40	; 0x28
 80070f6:	2100      	movs	r1, #0
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 f9ef 	bl	80084dc <RCCEx_PLL3_Config>
 80070fe:	4603      	mov	r3, r0
 8007100:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007104:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007110:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	2100      	movs	r1, #0
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800712a:	460b      	mov	r3, r1
 800712c:	4313      	orrs	r3, r2
 800712e:	d011      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007134:	3328      	adds	r3, #40	; 0x28
 8007136:	2101      	movs	r1, #1
 8007138:	4618      	mov	r0, r3
 800713a:	f001 f9cf 	bl	80084dc <RCCEx_PLL3_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007144:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007150:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	2100      	movs	r1, #0
 800715e:	6039      	str	r1, [r7, #0]
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	e9d7 1200 	ldrd	r1, r2, [r7]
 800716a:	460b      	mov	r3, r1
 800716c:	4313      	orrs	r3, r2
 800716e:	d011      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007174:	3328      	adds	r3, #40	; 0x28
 8007176:	2102      	movs	r1, #2
 8007178:	4618      	mov	r0, r3
 800717a:	f001 f9af 	bl	80084dc <RCCEx_PLL3_Config>
 800717e:	4603      	mov	r3, r0
 8007180:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007184:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007190:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007194:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80071a8:	46bd      	mov	sp, r7
 80071aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ae:	bf00      	nop
 80071b0:	58024400 	.word	0x58024400

080071b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b090      	sub	sp, #64	; 0x40
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80071be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071c2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80071c6:	430b      	orrs	r3, r1
 80071c8:	f040 8094 	bne.w	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80071cc:	4b9b      	ldr	r3, [pc, #620]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	2b04      	cmp	r3, #4
 80071da:	f200 8087 	bhi.w	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	080071f9 	.word	0x080071f9
 80071e8:	08007221 	.word	0x08007221
 80071ec:	08007249 	.word	0x08007249
 80071f0:	080072e5 	.word	0x080072e5
 80071f4:	08007271 	.word	0x08007271
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071f8:	4b90      	ldr	r3, [pc, #576]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007200:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007204:	d108      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800720a:	4618      	mov	r0, r3
 800720c:	f000 ff62 	bl	80080d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007214:	f000 bc93 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721c:	f000 bc8f 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007220:	4b86      	ldr	r3, [pc, #536]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800722c:	d108      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800722e:	f107 0318 	add.w	r3, r7, #24
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fca6 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800723c:	f000 bc7f 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007244:	f000 bc7b 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007248:	4b7c      	ldr	r3, [pc, #496]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007254:	d108      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007256:	f107 030c 	add.w	r3, r7, #12
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fde6 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007264:	f000 bc6b 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800726c:	f000 bc67 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007270:	4b72      	ldr	r3, [pc, #456]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007278:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800727a:	4b70      	ldr	r3, [pc, #448]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0304 	and.w	r3, r3, #4
 8007282:	2b04      	cmp	r3, #4
 8007284:	d10c      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007288:	2b00      	cmp	r3, #0
 800728a:	d109      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800728c:	4b6b      	ldr	r3, [pc, #428]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	08db      	lsrs	r3, r3, #3
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	4a6a      	ldr	r2, [pc, #424]	; (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007298:	fa22 f303 	lsr.w	r3, r2, r3
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800729e:	e01f      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072a0:	4b66      	ldr	r3, [pc, #408]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ac:	d106      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80072ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b4:	d102      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072b6:	4b63      	ldr	r3, [pc, #396]	; (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ba:	e011      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072bc:	4b5f      	ldr	r3, [pc, #380]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072c8:	d106      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d0:	d102      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072d2:	4b5d      	ldr	r3, [pc, #372]	; (8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072d6:	e003      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80072dc:	f000 bc2f 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80072e0:	f000 bc2d 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072e4:	4b59      	ldr	r3, [pc, #356]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072e8:	f000 bc29 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072f0:	f000 bc25 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80072f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80072fc:	430b      	orrs	r3, r1
 80072fe:	f040 80a7 	bne.w	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007302:	4b4e      	ldr	r3, [pc, #312]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007306:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800730a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007312:	d054      	beq.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800731a:	f200 808b 	bhi.w	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007324:	f000 8083 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800732e:	f200 8081 	bhi.w	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007338:	d02f      	beq.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007340:	d878      	bhi.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800734e:	d012      	beq.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007350:	e070      	b.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007352:	4b3a      	ldr	r3, [pc, #232]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800735e:	d107      	bne.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007364:	4618      	mov	r0, r3
 8007366:	f000 feb5 	bl	80080d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800736e:	e3e6      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007374:	e3e3      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007376:	4b31      	ldr	r3, [pc, #196]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800737e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007382:	d107      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007384:	f107 0318 	add.w	r3, r7, #24
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fbfb 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007392:	e3d4      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007398:	e3d1      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800739a:	4b28      	ldr	r3, [pc, #160]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073a6:	d107      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073a8:	f107 030c 	add.w	r3, r7, #12
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fd3d 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073b6:	e3c2      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073bc:	e3bf      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073be:	4b1f      	ldr	r3, [pc, #124]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80073c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073c8:	4b1c      	ldr	r3, [pc, #112]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d10c      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80073d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073da:	4b18      	ldr	r3, [pc, #96]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	08db      	lsrs	r3, r3, #3
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	4a16      	ldr	r2, [pc, #88]	; (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80073e6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ec:	e01e      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073ee:	4b13      	ldr	r3, [pc, #76]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fa:	d106      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80073fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007402:	d102      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007404:	4b0f      	ldr	r3, [pc, #60]	; (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007408:	e010      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800740a:	4b0c      	ldr	r3, [pc, #48]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007412:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007416:	d106      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800741e:	d102      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007420:	4b09      	ldr	r3, [pc, #36]	; (8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007424:	e002      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800742a:	e388      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800742c:	e387      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800742e:	4b07      	ldr	r3, [pc, #28]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007432:	e384      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007438:	e381      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800743a:	bf00      	nop
 800743c:	58024400 	.word	0x58024400
 8007440:	03d09000 	.word	0x03d09000
 8007444:	003d0900 	.word	0x003d0900
 8007448:	02dc6c00 	.word	0x02dc6c00
 800744c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007454:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007458:	430b      	orrs	r3, r1
 800745a:	f040 809c 	bne.w	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800745e:	4b9e      	ldr	r3, [pc, #632]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007462:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007466:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800746e:	d054      	beq.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007476:	f200 808b 	bhi.w	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007480:	f000 8083 	beq.w	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800748a:	f200 8081 	bhi.w	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007494:	d02f      	beq.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800749c:	d878      	bhi.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074aa:	d012      	beq.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80074ac:	e070      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074ae:	4b8a      	ldr	r3, [pc, #552]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074ba:	d107      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fe07 	bl	80080d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ca:	e338      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074d0:	e335      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074d2:	4b81      	ldr	r3, [pc, #516]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074de:	d107      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074e0:	f107 0318 	add.w	r3, r7, #24
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fb4d 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ee:	e326      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074f4:	e323      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074f6:	4b78      	ldr	r3, [pc, #480]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007502:	d107      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007504:	f107 030c 	add.w	r3, r7, #12
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fc8f 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007512:	e314      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007518:	e311      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800751a:	4b6f      	ldr	r3, [pc, #444]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800751c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007522:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007524:	4b6c      	ldr	r3, [pc, #432]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b04      	cmp	r3, #4
 800752e:	d10c      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007536:	4b68      	ldr	r3, [pc, #416]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	08db      	lsrs	r3, r3, #3
 800753c:	f003 0303 	and.w	r3, r3, #3
 8007540:	4a66      	ldr	r2, [pc, #408]	; (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007542:	fa22 f303 	lsr.w	r3, r2, r3
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007548:	e01e      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800754a:	4b63      	ldr	r3, [pc, #396]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007556:	d106      	bne.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800755e:	d102      	bne.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007560:	4b5f      	ldr	r3, [pc, #380]	; (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007564:	e010      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007566:	4b5c      	ldr	r3, [pc, #368]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007572:	d106      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800757a:	d102      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800757c:	4b59      	ldr	r3, [pc, #356]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007580:	e002      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007586:	e2da      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007588:	e2d9      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800758a:	4b57      	ldr	r3, [pc, #348]	; (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800758e:	e2d6      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007594:	e2d3      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800759a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800759e:	430b      	orrs	r3, r1
 80075a0:	f040 80a7 	bne.w	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80075a4:	4b4c      	ldr	r3, [pc, #304]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80075a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80075ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075b4:	d055      	beq.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075bc:	f200 8096 	bhi.w	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075c6:	f000 8084 	beq.w	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075d0:	f200 808c 	bhi.w	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075da:	d030      	beq.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e2:	f200 8083 	bhi.w	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d004      	beq.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f2:	d012      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80075f4:	e07a      	b.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075f6:	4b38      	ldr	r3, [pc, #224]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007602:	d107      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fd63 	bl	80080d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007612:	e294      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007618:	e291      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800761a:	4b2f      	ldr	r3, [pc, #188]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007626:	d107      	bne.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007628:	f107 0318 	add.w	r3, r7, #24
 800762c:	4618      	mov	r0, r3
 800762e:	f000 faa9 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007636:	e282      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800763c:	e27f      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800763e:	4b26      	ldr	r3, [pc, #152]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764a:	d107      	bne.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800764c:	f107 030c 	add.w	r3, r7, #12
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fbeb 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800765a:	e270      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007660:	e26d      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007662:	4b1d      	ldr	r3, [pc, #116]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007666:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800766a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800766c:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b04      	cmp	r3, #4
 8007676:	d10c      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767a:	2b00      	cmp	r3, #0
 800767c:	d109      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800767e:	4b16      	ldr	r3, [pc, #88]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	08db      	lsrs	r3, r3, #3
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	4a14      	ldr	r2, [pc, #80]	; (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800768a:	fa22 f303 	lsr.w	r3, r2, r3
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007690:	e01e      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007692:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800769e:	d106      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80076a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076a6:	d102      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076a8:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ac:	e010      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076ae:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ba:	d106      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80076bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c2:	d102      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076c8:	e002      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80076ce:	e236      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80076d0:	e235      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80076d2:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076d6:	e232      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80076d8:	58024400 	.word	0x58024400
 80076dc:	03d09000 	.word	0x03d09000
 80076e0:	003d0900 	.word	0x003d0900
 80076e4:	02dc6c00 	.word	0x02dc6c00
 80076e8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076f0:	e225      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80076f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80076fa:	430b      	orrs	r3, r1
 80076fc:	f040 8085 	bne.w	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007700:	4b9c      	ldr	r3, [pc, #624]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007704:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007708:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007710:	d06b      	beq.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007718:	d874      	bhi.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007720:	d056      	beq.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007728:	d86c      	bhi.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007730:	d03b      	beq.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007738:	d864      	bhi.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007740:	d021      	beq.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007748:	d85c      	bhi.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007756:	d004      	beq.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007758:	e054      	b.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800775a:	f7fe fb5f 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 800775e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007760:	e1ed      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007762:	4b84      	ldr	r3, [pc, #528]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800776a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800776e:	d107      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007770:	f107 0318 	add.w	r3, r7, #24
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fa05 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800777e:	e1de      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007784:	e1db      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007786:	4b7b      	ldr	r3, [pc, #492]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800778e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007792:	d107      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007794:	f107 030c 	add.w	r3, r7, #12
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fb47 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077a2:	e1cc      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077a8:	e1c9      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077aa:	4b72      	ldr	r3, [pc, #456]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d109      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077b6:	4b6f      	ldr	r3, [pc, #444]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	08db      	lsrs	r3, r3, #3
 80077bc:	f003 0303 	and.w	r3, r3, #3
 80077c0:	4a6d      	ldr	r2, [pc, #436]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80077c2:	fa22 f303 	lsr.w	r3, r2, r3
 80077c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077c8:	e1b9      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ce:	e1b6      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80077d0:	4b68      	ldr	r3, [pc, #416]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077dc:	d102      	bne.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80077de:	4b67      	ldr	r3, [pc, #412]	; (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80077e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077e2:	e1ac      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077e8:	e1a9      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077ea:	4b62      	ldr	r3, [pc, #392]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077f6:	d102      	bne.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80077f8:	4b61      	ldr	r3, [pc, #388]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80077fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077fc:	e19f      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007802:	e19c      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007808:	e199      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800780a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800780e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007812:	430b      	orrs	r3, r1
 8007814:	d173      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007816:	4b57      	ldr	r3, [pc, #348]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800781e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007826:	d02f      	beq.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800782e:	d863      	bhi.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800783c:	d012      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800783e:	e05b      	b.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007840:	4b4c      	ldr	r3, [pc, #304]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800784c:	d107      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800784e:	f107 0318 	add.w	r3, r7, #24
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f996 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800785c:	e16f      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007862:	e16c      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007864:	4b43      	ldr	r3, [pc, #268]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800786c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007870:	d107      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007872:	f107 030c 	add.w	r3, r7, #12
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fad8 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007880:	e15d      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007886:	e15a      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007888:	4b3a      	ldr	r3, [pc, #232]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800788a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007890:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007892:	4b38      	ldr	r3, [pc, #224]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b04      	cmp	r3, #4
 800789c:	d10c      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800789e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d109      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078a4:	4b33      	ldr	r3, [pc, #204]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	08db      	lsrs	r3, r3, #3
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	4a32      	ldr	r2, [pc, #200]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80078b0:	fa22 f303 	lsr.w	r3, r2, r3
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b6:	e01e      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078b8:	4b2e      	ldr	r3, [pc, #184]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c4:	d106      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80078c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078cc:	d102      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078ce:	4b2b      	ldr	r3, [pc, #172]	; (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80078d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d2:	e010      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078d4:	4b27      	ldr	r3, [pc, #156]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078e0:	d106      	bne.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80078e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078e8:	d102      	bne.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078ea:	4b25      	ldr	r3, [pc, #148]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80078ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078ee:	e002      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80078f4:	e123      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80078f6:	e122      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078fc:	e11f      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80078fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007902:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007906:	430b      	orrs	r3, r1
 8007908:	d13c      	bne.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800790a:	4b1a      	ldr	r3, [pc, #104]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800790c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007912:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007920:	d012      	beq.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007922:	e023      	b.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007924:	4b13      	ldr	r3, [pc, #76]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007930:	d107      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fbcc 	bl	80080d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007940:	e0fd      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007946:	e0fa      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007954:	d107      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007956:	f107 0318 	add.w	r3, r7, #24
 800795a:	4618      	mov	r0, r3
 800795c:	f000 f912 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007964:	e0eb      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800796a:	e0e8      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007970:	e0e5      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007972:	bf00      	nop
 8007974:	58024400 	.word	0x58024400
 8007978:	03d09000 	.word	0x03d09000
 800797c:	003d0900 	.word	0x003d0900
 8007980:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007988:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800798c:	430b      	orrs	r3, r1
 800798e:	f040 8085 	bne.w	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007992:	4b6d      	ldr	r3, [pc, #436]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007996:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800799a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079a2:	d06b      	beq.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079aa:	d874      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80079ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b2:	d056      	beq.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ba:	d86c      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80079bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079c2:	d03b      	beq.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079ca:	d864      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80079cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d2:	d021      	beq.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079da:	d85c      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079e8:	d004      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80079ea:	e054      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80079ec:	f000 f8b4 	bl	8007b58 <HAL_RCCEx_GetD3PCLK1Freq>
 80079f0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079f2:	e0a4      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079f4:	4b54      	ldr	r3, [pc, #336]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a00:	d107      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a02:	f107 0318 	add.w	r3, r7, #24
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f8bc 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a10:	e095      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a16:	e092      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a18:	4b4b      	ldr	r3, [pc, #300]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a24:	d107      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a26:	f107 030c 	add.w	r3, r7, #12
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f9fe 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a34:	e083      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a3a:	e080      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a3c:	4b42      	ldr	r3, [pc, #264]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d109      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a48:	4b3f      	ldr	r3, [pc, #252]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	08db      	lsrs	r3, r3, #3
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	4a3e      	ldr	r2, [pc, #248]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007a54:	fa22 f303 	lsr.w	r3, r2, r3
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a5a:	e070      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a60:	e06d      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007a62:	4b39      	ldr	r3, [pc, #228]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a6e:	d102      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8007a70:	4b37      	ldr	r3, [pc, #220]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a74:	e063      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a7a:	e060      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a7c:	4b32      	ldr	r3, [pc, #200]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a88:	d102      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8007a8a:	4b32      	ldr	r3, [pc, #200]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8e:	e056      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a94:	e053      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a9a:	e050      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	d148      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007aa8:	4b27      	ldr	r3, [pc, #156]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ab0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ab8:	d02a      	beq.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac0:	d838      	bhi.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d004      	beq.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ace:	d00d      	beq.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007ad0:	e030      	b.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ad2:	4b1d      	ldr	r3, [pc, #116]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ade:	d102      	bne.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8007ae0:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ae4:	e02b      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aea:	e028      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007aec:	4b16      	ldr	r3, [pc, #88]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007af8:	d107      	bne.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 fae8 	bl	80080d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b08:	e019      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b0e:	e016      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b10:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b1c:	d107      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b1e:	f107 0318 	add.w	r3, r7, #24
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f82e 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b2c:	e007      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b32:	e004      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b38:	e001      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3740      	adds	r7, #64	; 0x40
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	03d09000 	.word	0x03d09000
 8007b50:	003d0900 	.word	0x003d0900
 8007b54:	02dc6c00 	.word	0x02dc6c00

08007b58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b5c:	f7fe f92e 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 8007b60:	4602      	mov	r2, r0
 8007b62:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	091b      	lsrs	r3, r3, #4
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	4904      	ldr	r1, [pc, #16]	; (8007b80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b6e:	5ccb      	ldrb	r3, [r1, r3]
 8007b70:	f003 031f 	and.w	r3, r3, #31
 8007b74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	58024400 	.word	0x58024400
 8007b80:	0800d7a4 	.word	0x0800d7a4

08007b84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b089      	sub	sp, #36	; 0x24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b8c:	4ba1      	ldr	r3, [pc, #644]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	f003 0303 	and.w	r3, r3, #3
 8007b94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007b96:	4b9f      	ldr	r3, [pc, #636]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9a:	0b1b      	lsrs	r3, r3, #12
 8007b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ba0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007ba2:	4b9c      	ldr	r3, [pc, #624]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007bae:	4b99      	ldr	r3, [pc, #612]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb2:	08db      	lsrs	r3, r3, #3
 8007bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	fb02 f303 	mul.w	r3, r2, r3
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 8111 	beq.w	8007df4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	f000 8083 	beq.w	8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	f200 80a1 	bhi.w	8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d056      	beq.n	8007c9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007bee:	e099      	b.n	8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bf0:	4b88      	ldr	r3, [pc, #544]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d02d      	beq.n	8007c58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bfc:	4b85      	ldr	r3, [pc, #532]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	08db      	lsrs	r3, r3, #3
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	4a84      	ldr	r2, [pc, #528]	; (8007e18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c08:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	ee07 3a90 	vmov	s15, r3
 8007c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c26:	4b7b      	ldr	r3, [pc, #492]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c56:	e087      	b.n	8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007e20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6a:	4b6a      	ldr	r3, [pc, #424]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c9a:	e065      	b.n	8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cae:	4b59      	ldr	r3, [pc, #356]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cde:	e043      	b.n	8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf2:	4b48      	ldr	r3, [pc, #288]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d22:	e021      	b.n	8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d36:	4b37      	ldr	r3, [pc, #220]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007d68:	4b2a      	ldr	r3, [pc, #168]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	0a5b      	lsrs	r3, r3, #9
 8007d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d8e:	ee17 2a90 	vmov	r2, s15
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007d96:	4b1f      	ldr	r3, [pc, #124]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	0c1b      	lsrs	r3, r3, #16
 8007d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007db0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dbc:	ee17 2a90 	vmov	r2, s15
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007dc4:	4b13      	ldr	r3, [pc, #76]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc8:	0e1b      	lsrs	r3, r3, #24
 8007dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8007de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dea:	ee17 2a90 	vmov	r2, s15
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007df2:	e008      	b.n	8007e06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	609a      	str	r2, [r3, #8]
}
 8007e06:	bf00      	nop
 8007e08:	3724      	adds	r7, #36	; 0x24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	58024400 	.word	0x58024400
 8007e18:	03d09000 	.word	0x03d09000
 8007e1c:	46000000 	.word	0x46000000
 8007e20:	4c742400 	.word	0x4c742400
 8007e24:	4a742400 	.word	0x4a742400
 8007e28:	4c371b00 	.word	0x4c371b00

08007e2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b089      	sub	sp, #36	; 0x24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e34:	4ba1      	ldr	r3, [pc, #644]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	f003 0303 	and.w	r3, r3, #3
 8007e3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007e3e:	4b9f      	ldr	r3, [pc, #636]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	0d1b      	lsrs	r3, r3, #20
 8007e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e4a:	4b9c      	ldr	r3, [pc, #624]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	0a1b      	lsrs	r3, r3, #8
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007e56:	4b99      	ldr	r3, [pc, #612]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5a:	08db      	lsrs	r3, r3, #3
 8007e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	fb02 f303 	mul.w	r3, r2, r3
 8007e66:	ee07 3a90 	vmov	s15, r3
 8007e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8111 	beq.w	800809c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	f000 8083 	beq.w	8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	f200 80a1 	bhi.w	8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d056      	beq.n	8007f44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e96:	e099      	b.n	8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e98:	4b88      	ldr	r3, [pc, #544]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d02d      	beq.n	8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ea4:	4b85      	ldr	r3, [pc, #532]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	08db      	lsrs	r3, r3, #3
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	4a84      	ldr	r2, [pc, #528]	; (80080c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	ee07 3a90 	vmov	s15, r3
 8007ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ece:	4b7b      	ldr	r3, [pc, #492]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ee2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007efe:	e087      	b.n	8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80080c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f12:	4b6a      	ldr	r3, [pc, #424]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f26:	eddf 5a67 	vldr	s11, [pc, #412]	; 80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f42:	e065      	b.n	8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f56:	4b59      	ldr	r3, [pc, #356]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f86:	e043      	b.n	8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80080d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9a:	4b48      	ldr	r3, [pc, #288]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fca:	e021      	b.n	8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fde:	4b37      	ldr	r3, [pc, #220]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800800e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008010:	4b2a      	ldr	r3, [pc, #168]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	0a5b      	lsrs	r3, r3, #9
 8008016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800802a:	edd7 6a07 	vldr	s13, [r7, #28]
 800802e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008036:	ee17 2a90 	vmov	r2, s15
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800803e:	4b1f      	ldr	r3, [pc, #124]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	0c1b      	lsrs	r3, r3, #16
 8008044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008048:	ee07 3a90 	vmov	s15, r3
 800804c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008054:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008058:	edd7 6a07 	vldr	s13, [r7, #28]
 800805c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008064:	ee17 2a90 	vmov	r2, s15
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800806c:	4b13      	ldr	r3, [pc, #76]	; (80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	0e1b      	lsrs	r3, r3, #24
 8008072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008086:	edd7 6a07 	vldr	s13, [r7, #28]
 800808a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800808e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008092:	ee17 2a90 	vmov	r2, s15
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800809a:	e008      	b.n	80080ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	609a      	str	r2, [r3, #8]
}
 80080ae:	bf00      	nop
 80080b0:	3724      	adds	r7, #36	; 0x24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	58024400 	.word	0x58024400
 80080c0:	03d09000 	.word	0x03d09000
 80080c4:	46000000 	.word	0x46000000
 80080c8:	4c742400 	.word	0x4c742400
 80080cc:	4a742400 	.word	0x4a742400
 80080d0:	4c371b00 	.word	0x4c371b00

080080d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b089      	sub	sp, #36	; 0x24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080dc:	4ba0      	ldr	r3, [pc, #640]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	f003 0303 	and.w	r3, r3, #3
 80080e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80080e6:	4b9e      	ldr	r3, [pc, #632]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	091b      	lsrs	r3, r3, #4
 80080ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80080f2:	4b9b      	ldr	r3, [pc, #620]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80080fc:	4b98      	ldr	r3, [pc, #608]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008100:	08db      	lsrs	r3, r3, #3
 8008102:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	fb02 f303 	mul.w	r3, r2, r3
 800810c:	ee07 3a90 	vmov	s15, r3
 8008110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008114:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 8111 	beq.w	8008342 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	2b02      	cmp	r3, #2
 8008124:	f000 8083 	beq.w	800822e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	2b02      	cmp	r3, #2
 800812c:	f200 80a1 	bhi.w	8008272 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d056      	beq.n	80081ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800813c:	e099      	b.n	8008272 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800813e:	4b88      	ldr	r3, [pc, #544]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d02d      	beq.n	80081a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800814a:	4b85      	ldr	r3, [pc, #532]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	08db      	lsrs	r3, r3, #3
 8008150:	f003 0303 	and.w	r3, r3, #3
 8008154:	4a83      	ldr	r2, [pc, #524]	; (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008156:	fa22 f303 	lsr.w	r3, r2, r3
 800815a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	ee07 3a90 	vmov	s15, r3
 800816c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008174:	4b7a      	ldr	r3, [pc, #488]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817c:	ee07 3a90 	vmov	s15, r3
 8008180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008184:	ed97 6a03 	vldr	s12, [r7, #12]
 8008188:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800818c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008194:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081a4:	e087      	b.n	80082b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	ee07 3a90 	vmov	s15, r3
 80081ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800836c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80081b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b8:	4b69      	ldr	r3, [pc, #420]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c0:	ee07 3a90 	vmov	s15, r3
 80081c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80081cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081e8:	e065      	b.n	80082b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80081f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fc:	4b58      	ldr	r3, [pc, #352]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008204:	ee07 3a90 	vmov	s15, r3
 8008208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008210:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008228:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800822c:	e043      	b.n	80082b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008238:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008374 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800823c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008240:	4b47      	ldr	r3, [pc, #284]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008248:	ee07 3a90 	vmov	s15, r3
 800824c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008250:	ed97 6a03 	vldr	s12, [r7, #12]
 8008254:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008270:	e021      	b.n	80082b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	ee07 3a90 	vmov	s15, r3
 8008278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800836c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008284:	4b36      	ldr	r3, [pc, #216]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828c:	ee07 3a90 	vmov	s15, r3
 8008290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008294:	ed97 6a03 	vldr	s12, [r7, #12]
 8008298:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800829c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80082b6:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ba:	0a5b      	lsrs	r3, r3, #9
 80082bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c0:	ee07 3a90 	vmov	s15, r3
 80082c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80082d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082dc:	ee17 2a90 	vmov	r2, s15
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80082e4:	4b1e      	ldr	r3, [pc, #120]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e8:	0c1b      	lsrs	r3, r3, #16
 80082ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800830a:	ee17 2a90 	vmov	r2, s15
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008312:	4b13      	ldr	r3, [pc, #76]	; (8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	0e1b      	lsrs	r3, r3, #24
 8008318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831c:	ee07 3a90 	vmov	s15, r3
 8008320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800832c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008338:	ee17 2a90 	vmov	r2, s15
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008340:	e008      	b.n	8008354 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	609a      	str	r2, [r3, #8]
}
 8008354:	bf00      	nop
 8008356:	3724      	adds	r7, #36	; 0x24
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	58024400 	.word	0x58024400
 8008364:	03d09000 	.word	0x03d09000
 8008368:	46000000 	.word	0x46000000
 800836c:	4c742400 	.word	0x4c742400
 8008370:	4a742400 	.word	0x4a742400
 8008374:	4c371b00 	.word	0x4c371b00

08008378 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008386:	4b53      	ldr	r3, [pc, #332]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	f003 0303 	and.w	r3, r3, #3
 800838e:	2b03      	cmp	r3, #3
 8008390:	d101      	bne.n	8008396 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e099      	b.n	80084ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008396:	4b4f      	ldr	r3, [pc, #316]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a4e      	ldr	r2, [pc, #312]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 800839c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083a2:	f7fa fdd1 	bl	8002f48 <HAL_GetTick>
 80083a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083a8:	e008      	b.n	80083bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80083aa:	f7fa fdcd 	bl	8002f48 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d901      	bls.n	80083bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e086      	b.n	80084ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083bc:	4b45      	ldr	r3, [pc, #276]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1f0      	bne.n	80083aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80083c8:	4b42      	ldr	r3, [pc, #264]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 80083ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	031b      	lsls	r3, r3, #12
 80083d6:	493f      	ldr	r1, [pc, #252]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	628b      	str	r3, [r1, #40]	; 0x28
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	025b      	lsls	r3, r3, #9
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	431a      	orrs	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	041b      	lsls	r3, r3, #16
 80083fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083fe:	431a      	orrs	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	3b01      	subs	r3, #1
 8008406:	061b      	lsls	r3, r3, #24
 8008408:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800840c:	4931      	ldr	r1, [pc, #196]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 800840e:	4313      	orrs	r3, r2
 8008410:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008412:	4b30      	ldr	r3, [pc, #192]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	492d      	ldr	r1, [pc, #180]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008420:	4313      	orrs	r3, r2
 8008422:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008424:	4b2b      	ldr	r3, [pc, #172]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	f023 0220 	bic.w	r2, r3, #32
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	4928      	ldr	r1, [pc, #160]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008432:	4313      	orrs	r3, r2
 8008434:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008436:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	4a26      	ldr	r2, [pc, #152]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 800843c:	f023 0310 	bic.w	r3, r3, #16
 8008440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008442:	4b24      	ldr	r3, [pc, #144]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008446:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <RCCEx_PLL2_Config+0x160>)
 8008448:	4013      	ands	r3, r2
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	69d2      	ldr	r2, [r2, #28]
 800844e:	00d2      	lsls	r2, r2, #3
 8008450:	4920      	ldr	r1, [pc, #128]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008452:	4313      	orrs	r3, r2
 8008454:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008456:	4b1f      	ldr	r3, [pc, #124]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	4a1e      	ldr	r2, [pc, #120]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 800845c:	f043 0310 	orr.w	r3, r3, #16
 8008460:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d106      	bne.n	8008476 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008468:	4b1a      	ldr	r3, [pc, #104]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	4a19      	ldr	r2, [pc, #100]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 800846e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008472:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008474:	e00f      	b.n	8008496 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d106      	bne.n	800848a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800847c:	4b15      	ldr	r3, [pc, #84]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	4a14      	ldr	r2, [pc, #80]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008486:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008488:	e005      	b.n	8008496 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800848a:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 800848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848e:	4a11      	ldr	r2, [pc, #68]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008490:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008494:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008496:	4b0f      	ldr	r3, [pc, #60]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a0e      	ldr	r2, [pc, #56]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 800849c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084a2:	f7fa fd51 	bl	8002f48 <HAL_GetTick>
 80084a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084a8:	e008      	b.n	80084bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80084aa:	f7fa fd4d 	bl	8002f48 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d901      	bls.n	80084bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e006      	b.n	80084ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084bc:	4b05      	ldr	r3, [pc, #20]	; (80084d4 <RCCEx_PLL2_Config+0x15c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0f0      	beq.n	80084aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	58024400 	.word	0x58024400
 80084d8:	ffff0007 	.word	0xffff0007

080084dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084ea:	4b53      	ldr	r3, [pc, #332]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d101      	bne.n	80084fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e099      	b.n	800862e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80084fa:	4b4f      	ldr	r3, [pc, #316]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a4e      	ldr	r2, [pc, #312]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 8008500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008506:	f7fa fd1f 	bl	8002f48 <HAL_GetTick>
 800850a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800850c:	e008      	b.n	8008520 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800850e:	f7fa fd1b 	bl	8002f48 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	2b02      	cmp	r3, #2
 800851a:	d901      	bls.n	8008520 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e086      	b.n	800862e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008520:	4b45      	ldr	r3, [pc, #276]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1f0      	bne.n	800850e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800852c:	4b42      	ldr	r3, [pc, #264]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	051b      	lsls	r3, r3, #20
 800853a:	493f      	ldr	r1, [pc, #252]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 800853c:	4313      	orrs	r3, r2
 800853e:	628b      	str	r3, [r1, #40]	; 0x28
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	3b01      	subs	r3, #1
 8008546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	3b01      	subs	r3, #1
 8008550:	025b      	lsls	r3, r3, #9
 8008552:	b29b      	uxth	r3, r3
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	3b01      	subs	r3, #1
 800855c:	041b      	lsls	r3, r3, #16
 800855e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	3b01      	subs	r3, #1
 800856a:	061b      	lsls	r3, r3, #24
 800856c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008570:	4931      	ldr	r1, [pc, #196]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 8008572:	4313      	orrs	r3, r2
 8008574:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008576:	4b30      	ldr	r3, [pc, #192]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	492d      	ldr	r1, [pc, #180]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 8008584:	4313      	orrs	r3, r2
 8008586:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008588:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	4928      	ldr	r1, [pc, #160]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 8008596:	4313      	orrs	r3, r2
 8008598:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800859a:	4b27      	ldr	r3, [pc, #156]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	4a26      	ldr	r2, [pc, #152]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80085a6:	4b24      	ldr	r3, [pc, #144]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085aa:	4b24      	ldr	r3, [pc, #144]	; (800863c <RCCEx_PLL3_Config+0x160>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	69d2      	ldr	r2, [r2, #28]
 80085b2:	00d2      	lsls	r2, r2, #3
 80085b4:	4920      	ldr	r1, [pc, #128]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80085ba:	4b1f      	ldr	r3, [pc, #124]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	4a1e      	ldr	r2, [pc, #120]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d106      	bne.n	80085da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80085cc:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	4a19      	ldr	r2, [pc, #100]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085d8:	e00f      	b.n	80085fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d106      	bne.n	80085ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80085e0:	4b15      	ldr	r3, [pc, #84]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	4a14      	ldr	r2, [pc, #80]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085ec:	e005      	b.n	80085fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80085ee:	4b12      	ldr	r3, [pc, #72]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	4a11      	ldr	r2, [pc, #68]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80085fa:	4b0f      	ldr	r3, [pc, #60]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a0e      	ldr	r2, [pc, #56]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 8008600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008606:	f7fa fc9f 	bl	8002f48 <HAL_GetTick>
 800860a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800860c:	e008      	b.n	8008620 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800860e:	f7fa fc9b 	bl	8002f48 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d901      	bls.n	8008620 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e006      	b.n	800862e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008620:	4b05      	ldr	r3, [pc, #20]	; (8008638 <RCCEx_PLL3_Config+0x15c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0f0      	beq.n	800860e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	58024400 	.word	0x58024400
 800863c:	ffff0007 	.word	0xffff0007

08008640 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08a      	sub	sp, #40	; 0x28
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e075      	b.n	800873e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d105      	bne.n	800866a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7f9 fc4b 	bl	8001f00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2204      	movs	r2, #4
 800866e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f868 	bl	8008748 <HAL_SD_InitCard>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e05d      	b.n	800873e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008682:	f107 0308 	add.w	r3, r7, #8
 8008686:	4619      	mov	r1, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fa9d 	bl	8008bc8 <HAL_SD_GetCardStatus>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e052      	b.n	800873e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008698:	7e3b      	ldrb	r3, [r7, #24]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800869e:	7e7b      	ldrb	r3, [r7, #25]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d10a      	bne.n	80086c2 <HAL_SD_Init+0x82>
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d102      	bne.n	80086b8 <HAL_SD_Init+0x78>
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086be:	659a      	str	r2, [r3, #88]	; 0x58
 80086c0:	e00b      	b.n	80086da <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d104      	bne.n	80086d4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086d0:	659a      	str	r2, [r3, #88]	; 0x58
 80086d2:	e002      	b.n	80086da <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fb2f 	bl	8008d44 <HAL_SD_ConfigWideBusOperation>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e026      	b.n	800873e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80086f0:	f7fa fc2a 	bl	8002f48 <HAL_GetTick>
 80086f4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80086f6:	e011      	b.n	800871c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80086f8:	f7fa fc26 	bl	8002f48 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008706:	d109      	bne.n	800871c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800870e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e010      	b.n	800873e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fc23 	bl	8008f68 <HAL_SD_GetCardState>
 8008722:	4603      	mov	r3, r0
 8008724:	2b04      	cmp	r3, #4
 8008726:	d1e7      	bne.n	80086f8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3728      	adds	r7, #40	; 0x28
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008748:	b590      	push	{r4, r7, lr}
 800874a:	b08d      	sub	sp, #52	; 0x34
 800874c:	af02      	add	r7, sp, #8
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008754:	2300      	movs	r3, #0
 8008756:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008758:	2300      	movs	r3, #0
 800875a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800875c:	2300      	movs	r3, #0
 800875e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008760:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008764:	f04f 0100 	mov.w	r1, #0
 8008768:	f7fe fd24 	bl	80071b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800876c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	2b00      	cmp	r3, #0
 8008772:	d109      	bne.n	8008788 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008782:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e070      	b.n	800886a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	0a1b      	lsrs	r3, r3, #8
 800878c:	4a39      	ldr	r2, [pc, #228]	; (8008874 <HAL_SD_InitCard+0x12c>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	091b      	lsrs	r3, r3, #4
 8008794:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681c      	ldr	r4, [r3, #0]
 800879a:	466a      	mov	r2, sp
 800879c:	f107 0318 	add.w	r3, r7, #24
 80087a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80087a4:	e882 0003 	stmia.w	r2, {r0, r1}
 80087a8:	f107 030c 	add.w	r3, r7, #12
 80087ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087ae:	4620      	mov	r0, r4
 80087b0:	f004 fad2 	bl	800cd58 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f004 fb04 	bl	800cdc6 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d005      	beq.n	80087d0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d007      	beq.n	80087e6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80087d6:	4a28      	ldr	r2, [pc, #160]	; (8008878 <HAL_SD_InitCard+0x130>)
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	fbb2 f3f3 	udiv	r3, r2, r3
 80087de:	3301      	adds	r3, #1
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fa fbbd 	bl	8002f60 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fcac 	bl	8009144 <SD_PowerON>
 80087ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e02e      	b.n	800886a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fbcb 	bl	8008fa8 <SD_InitCard>
 8008812:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00b      	beq.n	8008832 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	431a      	orrs	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e01b      	b.n	800886a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800883a:	4618      	mov	r0, r3
 800883c:	f004 fb58 	bl	800cef0 <SDMMC_CmdBlockLength>
 8008840:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00f      	beq.n	8008868 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a0b      	ldr	r2, [pc, #44]	; (800887c <HAL_SD_InitCard+0x134>)
 800884e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e000      	b.n	800886a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	372c      	adds	r7, #44	; 0x2c
 800886e:	46bd      	mov	sp, r7
 8008870:	bd90      	pop	{r4, r7, pc}
 8008872:	bf00      	nop
 8008874:	014f8b59 	.word	0x014f8b59
 8008878:	00012110 	.word	0x00012110
 800887c:	1fe00fff 	.word	0x1fe00fff

08008880 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800888e:	0f9b      	lsrs	r3, r3, #30
 8008890:	b2da      	uxtb	r2, r3
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800889a:	0e9b      	lsrs	r3, r3, #26
 800889c:	b2db      	uxtb	r3, r3
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ac:	0e1b      	lsrs	r3, r3, #24
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088be:	0c1b      	lsrs	r3, r3, #16
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ca:	0a1b      	lsrs	r3, r3, #8
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e0:	0d1b      	lsrs	r3, r3, #20
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ec:	0c1b      	lsrs	r3, r3, #16
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fe:	0bdb      	lsrs	r3, r3, #15
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	b2da      	uxtb	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008910:	0b9b      	lsrs	r3, r3, #14
 8008912:	b2db      	uxtb	r3, r3
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	b2da      	uxtb	r2, r3
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008922:	0b5b      	lsrs	r3, r3, #13
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	b2da      	uxtb	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008934:	0b1b      	lsrs	r3, r3, #12
 8008936:	b2db      	uxtb	r3, r3
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	b2da      	uxtb	r2, r3
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2200      	movs	r2, #0
 8008946:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894c:	2b00      	cmp	r3, #0
 800894e:	d163      	bne.n	8008a18 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008954:	009a      	lsls	r2, r3, #2
 8008956:	f640 73fc 	movw	r3, #4092	; 0xffc
 800895a:	4013      	ands	r3, r2
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008960:	0f92      	lsrs	r2, r2, #30
 8008962:	431a      	orrs	r2, r3
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800896c:	0edb      	lsrs	r3, r3, #27
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0307 	and.w	r3, r3, #7
 8008974:	b2da      	uxtb	r2, r3
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800897e:	0e1b      	lsrs	r3, r3, #24
 8008980:	b2db      	uxtb	r3, r3
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	b2da      	uxtb	r2, r3
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008990:	0d5b      	lsrs	r3, r3, #21
 8008992:	b2db      	uxtb	r3, r3
 8008994:	f003 0307 	and.w	r3, r3, #7
 8008998:	b2da      	uxtb	r2, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a2:	0c9b      	lsrs	r3, r3, #18
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b4:	0bdb      	lsrs	r3, r3, #15
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	7e1b      	ldrb	r3, [r3, #24]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	3302      	adds	r3, #2
 80089d8:	2201      	movs	r2, #1
 80089da:	fa02 f303 	lsl.w	r3, r2, r3
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089e2:	fb03 f202 	mul.w	r2, r3, r2
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	7a1b      	ldrb	r3, [r3, #8]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	f003 030f 	and.w	r3, r3, #15
 80089f4:	2201      	movs	r2, #1
 80089f6:	409a      	lsls	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008a04:	0a52      	lsrs	r2, r2, #9
 8008a06:	fb03 f202 	mul.w	r2, r3, r2
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a14:	655a      	str	r2, [r3, #84]	; 0x54
 8008a16:	e031      	b.n	8008a7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d11d      	bne.n	8008a5c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a24:	041b      	lsls	r3, r3, #16
 8008a26:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a2e:	0c1b      	lsrs	r3, r3, #16
 8008a30:	431a      	orrs	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	029a      	lsls	r2, r3, #10
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a50:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	655a      	str	r2, [r3, #84]	; 0x54
 8008a5a:	e00f      	b.n	8008a7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a58      	ldr	r2, [pc, #352]	; (8008bc4 <HAL_SD_GetCardCSD+0x344>)
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e09d      	b.n	8008bb8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a80:	0b9b      	lsrs	r3, r3, #14
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a92:	09db      	lsrs	r3, r3, #7
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab4:	0fdb      	lsrs	r3, r3, #31
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac0:	0f5b      	lsrs	r3, r3, #29
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 0303 	and.w	r3, r3, #3
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad2:	0e9b      	lsrs	r3, r3, #26
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae4:	0d9b      	lsrs	r3, r3, #22
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 030f 	and.w	r3, r3, #15
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008af6:	0d5b      	lsrs	r3, r3, #21
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b12:	0c1b      	lsrs	r3, r3, #16
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b26:	0bdb      	lsrs	r3, r3, #15
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b3a:	0b9b      	lsrs	r3, r3, #14
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b4e:	0b5b      	lsrs	r3, r3, #13
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b62:	0b1b      	lsrs	r3, r3, #12
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b76:	0a9b      	lsrs	r3, r3, #10
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	f003 0303 	and.w	r3, r3, #3
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b8a:	0a1b      	lsrs	r3, r3, #8
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 0303 	and.w	r3, r3, #3
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	1fe00fff 	.word	0x1fe00fff

08008bc8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b094      	sub	sp, #80	; 0x50
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d101      	bne.n	8008be8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e0a7      	b.n	8008d38 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008be8:	f107 0308 	add.w	r3, r7, #8
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fb36 	bl	8009260 <SD_SendSDStatus>
 8008bf4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d011      	beq.n	8008c20 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a4f      	ldr	r2, [pc, #316]	; (8008d40 <HAL_SD_GetCardStatus+0x178>)
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008c1e:	e070      	b.n	8008d02 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	099b      	lsrs	r3, r3, #6
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	095b      	lsrs	r3, r3, #5
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	0a1b      	lsrs	r3, r3, #8
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	0e1b      	lsrs	r3, r3, #24
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	4313      	orrs	r3, r2
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	061a      	lsls	r2, r3, #24
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	021b      	lsls	r3, r3, #8
 8008c62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c66:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	0a1b      	lsrs	r3, r3, #8
 8008c6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c70:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	0e1b      	lsrs	r3, r3, #24
 8008c76:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	0a1b      	lsrs	r3, r3, #8
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	0d1b      	lsrs	r3, r3, #20
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	0c1b      	lsrs	r3, r3, #16
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	0a9b      	lsrs	r3, r3, #10
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	0a1b      	lsrs	r3, r3, #8
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	f003 0303 	and.w	r3, r3, #3
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	091b      	lsrs	r3, r3, #4
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	f003 030f 	and.w	r3, r3, #15
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f003 030f 	and.w	r3, r3, #15
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	0e1b      	lsrs	r3, r3, #24
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f004 f8f0 	bl	800cef0 <SDMMC_CmdBlockLength>
 8008d10:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00d      	beq.n	8008d34 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a08      	ldr	r2, [pc, #32]	; (8008d40 <HAL_SD_GetCardStatus+0x178>)
 8008d1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d24:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008d34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3750      	adds	r7, #80	; 0x50
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	1fe00fff 	.word	0x1fe00fff

08008d44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d44:	b590      	push	{r4, r7, lr}
 8008d46:	b08d      	sub	sp, #52	; 0x34
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2203      	movs	r2, #3
 8008d58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d02e      	beq.n	8008dc2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d6a:	d106      	bne.n	8008d7a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	635a      	str	r2, [r3, #52]	; 0x34
 8008d78:	e029      	b.n	8008dce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d80:	d10a      	bne.n	8008d98 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fb64 	bl	8009450 <SD_WideBus_Enable>
 8008d88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	431a      	orrs	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	635a      	str	r2, [r3, #52]	; 0x34
 8008d96:	e01a      	b.n	8008dce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10a      	bne.n	8008db4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fba1 	bl	80094e6 <SD_WideBus_Disable>
 8008da4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	431a      	orrs	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	635a      	str	r2, [r3, #52]	; 0x34
 8008db2:	e00c      	b.n	8008dce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8008dc0:	e005      	b.n	8008dce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d007      	beq.n	8008de6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a5f      	ldr	r2, [pc, #380]	; (8008f58 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008ddc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008de4:	e096      	b.n	8008f14 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008de6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008dea:	f04f 0100 	mov.w	r1, #0
 8008dee:	f7fe f9e1 	bl	80071b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008df2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 8083 	beq.w	8008f02 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	695a      	ldr	r2, [r3, #20]
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	4950      	ldr	r1, [pc, #320]	; (8008f5c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e1a:	fba1 1303 	umull	r1, r3, r1, r3
 8008e1e:	0e1b      	lsrs	r3, r3, #24
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d303      	bcc.n	8008e2c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	695b      	ldr	r3, [r3, #20]
 8008e28:	61bb      	str	r3, [r7, #24]
 8008e2a:	e05a      	b.n	8008ee2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e34:	d103      	bne.n	8008e3e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	61bb      	str	r3, [r7, #24]
 8008e3c:	e051      	b.n	8008ee2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e46:	d126      	bne.n	8008e96 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10e      	bne.n	8008e6e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	4a43      	ldr	r2, [pc, #268]	; (8008f60 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d906      	bls.n	8008e66 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	4a40      	ldr	r2, [pc, #256]	; (8008f5c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e60:	0e5b      	lsrs	r3, r3, #25
 8008e62:	61bb      	str	r3, [r7, #24]
 8008e64:	e03d      	b.n	8008ee2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	61bb      	str	r3, [r7, #24]
 8008e6c:	e039      	b.n	8008ee2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	69fa      	ldr	r2, [r7, #28]
 8008e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e7a:	4a39      	ldr	r2, [pc, #228]	; (8008f60 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d906      	bls.n	8008e8e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	4a36      	ldr	r2, [pc, #216]	; (8008f5c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e84:	fba2 2303 	umull	r2, r3, r2, r3
 8008e88:	0e5b      	lsrs	r3, r3, #25
 8008e8a:	61bb      	str	r3, [r7, #24]
 8008e8c:	e029      	b.n	8008ee2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	61bb      	str	r3, [r7, #24]
 8008e94:	e025      	b.n	8008ee2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10e      	bne.n	8008ebc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	4a30      	ldr	r2, [pc, #192]	; (8008f64 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d906      	bls.n	8008eb4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	4a2c      	ldr	r2, [pc, #176]	; (8008f5c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008eae:	0e1b      	lsrs	r3, r3, #24
 8008eb0:	61bb      	str	r3, [r7, #24]
 8008eb2:	e016      	b.n	8008ee2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	61bb      	str	r3, [r7, #24]
 8008eba:	e012      	b.n	8008ee2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec8:	4a26      	ldr	r2, [pc, #152]	; (8008f64 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d906      	bls.n	8008edc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	4a22      	ldr	r2, [pc, #136]	; (8008f5c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed6:	0e1b      	lsrs	r3, r3, #24
 8008ed8:	61bb      	str	r3, [r7, #24]
 8008eda:	e002      	b.n	8008ee2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681c      	ldr	r4, [r3, #0]
 8008ee6:	466a      	mov	r2, sp
 8008ee8:	f107 0314 	add.w	r3, r7, #20
 8008eec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ef0:	e882 0003 	stmia.w	r2, {r0, r1}
 8008ef4:	f107 0308 	add.w	r3, r7, #8
 8008ef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008efa:	4620      	mov	r0, r4
 8008efc:	f003 ff2c 	bl	800cd58 <SDMMC_Init>
 8008f00:	e008      	b.n	8008f14 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f003 ffe7 	bl	800cef0 <SDMMC_CmdBlockLength>
 8008f22:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00c      	beq.n	8008f44 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a0a      	ldr	r2, [pc, #40]	; (8008f58 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	372c      	adds	r7, #44	; 0x2c
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd90      	pop	{r4, r7, pc}
 8008f58:	1fe00fff 	.word	0x1fe00fff
 8008f5c:	55e63b89 	.word	0x55e63b89
 8008f60:	02faf080 	.word	0x02faf080
 8008f64:	017d7840 	.word	0x017d7840

08008f68 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008f74:	f107 030c 	add.w	r3, r7, #12
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa40 	bl	8009400 <SD_SendStatus>
 8008f80:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d005      	beq.n	8008f94 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	0a5b      	lsrs	r3, r3, #9
 8008f98:	f003 030f 	and.w	r3, r3, #15
 8008f9c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f9e:	693b      	ldr	r3, [r7, #16]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b090      	sub	sp, #64	; 0x40
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008fb4:	f7f9 ffc8 	bl	8002f48 <HAL_GetTick>
 8008fb8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f003 ff12 	bl	800cde8 <SDMMC_GetPowerState>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d102      	bne.n	8008fd0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008fce:	e0b5      	b.n	800913c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d02e      	beq.n	8009036 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f004 f893 	bl	800d108 <SDMMC_CmdSendCID>
 8008fe2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <SD_InitCard+0x46>
    {
      return errorstate;
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	e0a6      	b.n	800913c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f003 ff3c 	bl	800ce72 <SDMMC_GetResponse>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2104      	movs	r1, #4
 8009006:	4618      	mov	r0, r3
 8009008:	f003 ff33 	bl	800ce72 <SDMMC_GetResponse>
 800900c:	4602      	mov	r2, r0
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2108      	movs	r1, #8
 8009018:	4618      	mov	r0, r3
 800901a:	f003 ff2a 	bl	800ce72 <SDMMC_GetResponse>
 800901e:	4602      	mov	r2, r0
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	210c      	movs	r1, #12
 800902a:	4618      	mov	r0, r3
 800902c:	f003 ff21 	bl	800ce72 <SDMMC_GetResponse>
 8009030:	4602      	mov	r2, r0
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	2b03      	cmp	r3, #3
 800903c:	d01d      	beq.n	800907a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800903e:	e019      	b.n	8009074 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f107 020a 	add.w	r2, r7, #10
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f004 f89b 	bl	800d186 <SDMMC_CmdSetRelAdd>
 8009050:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <SD_InitCard+0xb4>
      {
        return errorstate;
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	e06f      	b.n	800913c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800905c:	f7f9 ff74 	bl	8002f48 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	f241 3287 	movw	r2, #4999	; 0x1387
 800906a:	4293      	cmp	r3, r2
 800906c:	d902      	bls.n	8009074 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800906e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009072:	e063      	b.n	800913c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009074:	897b      	ldrh	r3, [r7, #10]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0e2      	beq.n	8009040 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907e:	2b03      	cmp	r3, #3
 8009080:	d036      	beq.n	80090f0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009082:	897b      	ldrh	r3, [r7, #10]
 8009084:	461a      	mov	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009092:	041b      	lsls	r3, r3, #16
 8009094:	4619      	mov	r1, r3
 8009096:	4610      	mov	r0, r2
 8009098:	f004 f855 	bl	800d146 <SDMMC_CmdSendCSD>
 800909c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <SD_InitCard+0x100>
    {
      return errorstate;
 80090a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a6:	e049      	b.n	800913c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2100      	movs	r1, #0
 80090ae:	4618      	mov	r0, r3
 80090b0:	f003 fedf 	bl	800ce72 <SDMMC_GetResponse>
 80090b4:	4602      	mov	r2, r0
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2104      	movs	r1, #4
 80090c0:	4618      	mov	r0, r3
 80090c2:	f003 fed6 	bl	800ce72 <SDMMC_GetResponse>
 80090c6:	4602      	mov	r2, r0
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2108      	movs	r1, #8
 80090d2:	4618      	mov	r0, r3
 80090d4:	f003 fecd 	bl	800ce72 <SDMMC_GetResponse>
 80090d8:	4602      	mov	r2, r0
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	210c      	movs	r1, #12
 80090e4:	4618      	mov	r0, r3
 80090e6:	f003 fec4 	bl	800ce72 <SDMMC_GetResponse>
 80090ea:	4602      	mov	r2, r0
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2104      	movs	r1, #4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f003 febb 	bl	800ce72 <SDMMC_GetResponse>
 80090fc:	4603      	mov	r3, r0
 80090fe:	0d1a      	lsrs	r2, r3, #20
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009104:	f107 030c 	add.w	r3, r7, #12
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff fbb8 	bl	8008880 <HAL_SD_GetCardCSD>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009116:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800911a:	e00f      	b.n	800913c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009124:	041b      	lsls	r3, r3, #16
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f003 ff04 	bl	800cf36 <SDMMC_CmdSelDesel>
 800912e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <SD_InitCard+0x192>
  {
    return errorstate;
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	e000      	b.n	800913c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3740      	adds	r7, #64	; 0x40
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4618      	mov	r0, r3
 800915e:	f003 ff0d 	bl	800cf7c <SDMMC_CmdGoIdleState>
 8009162:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <SD_PowerON+0x2a>
  {
    return errorstate;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	e072      	b.n	8009254 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f003 ff20 	bl	800cfb8 <SDMMC_CmdOperCond>
 8009178:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009180:	d10d      	bne.n	800919e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f003 fef5 	bl	800cf7c <SDMMC_CmdGoIdleState>
 8009192:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <SD_PowerON+0x60>
    {
      return errorstate;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	e05a      	b.n	8009254 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d137      	bne.n	800921c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2100      	movs	r1, #0
 80091b2:	4618      	mov	r0, r3
 80091b4:	f003 ff20 	bl	800cff8 <SDMMC_CmdAppCommand>
 80091b8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d02d      	beq.n	800921c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091c4:	e046      	b.n	8009254 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2100      	movs	r1, #0
 80091cc:	4618      	mov	r0, r3
 80091ce:	f003 ff13 	bl	800cff8 <SDMMC_CmdAppCommand>
 80091d2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <SD_PowerON+0x9a>
    {
      return errorstate;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	e03a      	b.n	8009254 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	491e      	ldr	r1, [pc, #120]	; (800925c <SD_PowerON+0x118>)
 80091e4:	4618      	mov	r0, r3
 80091e6:	f003 ff2a 	bl	800d03e <SDMMC_CmdAppOperCommand>
 80091ea:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091f6:	e02d      	b.n	8009254 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2100      	movs	r1, #0
 80091fe:	4618      	mov	r0, r3
 8009200:	f003 fe37 	bl	800ce72 <SDMMC_GetResponse>
 8009204:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	0fdb      	lsrs	r3, r3, #31
 800920a:	2b01      	cmp	r3, #1
 800920c:	d101      	bne.n	8009212 <SD_PowerON+0xce>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <SD_PowerON+0xd0>
 8009212:	2300      	movs	r3, #0
 8009214:	613b      	str	r3, [r7, #16]

    count++;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	3301      	adds	r3, #1
 800921a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009222:	4293      	cmp	r3, r2
 8009224:	d802      	bhi.n	800922c <SD_PowerON+0xe8>
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d0cc      	beq.n	80091c6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009232:	4293      	cmp	r3, r2
 8009234:	d902      	bls.n	800923c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009236:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800923a:	e00b      	b.n	8009254 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	c1100000 	.word	0xc1100000

08009260 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08c      	sub	sp, #48	; 0x30
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800926a:	f7f9 fe6d 	bl	8002f48 <HAL_GetTick>
 800926e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2100      	movs	r1, #0
 800927a:	4618      	mov	r0, r3
 800927c:	f003 fdf9 	bl	800ce72 <SDMMC_GetResponse>
 8009280:	4603      	mov	r3, r0
 8009282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800928a:	d102      	bne.n	8009292 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800928c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009290:	e0b0      	b.n	80093f4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2140      	movs	r1, #64	; 0x40
 8009298:	4618      	mov	r0, r3
 800929a:	f003 fe29 	bl	800cef0 <SDMMC_CmdBlockLength>
 800929e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	e0a0      	b.n	80093f4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ba:	041b      	lsls	r3, r3, #16
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f003 fe9a 	bl	800cff8 <SDMMC_CmdAppCommand>
 80092c4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d005      	beq.n	80092d8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	e08d      	b.n	80093f4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80092de:	2340      	movs	r3, #64	; 0x40
 80092e0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80092e2:	2360      	movs	r3, #96	; 0x60
 80092e4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80092e6:	2302      	movs	r3, #2
 80092e8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80092ee:	2301      	movs	r3, #1
 80092f0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f107 0208 	add.w	r2, r7, #8
 80092fa:	4611      	mov	r1, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f003 fdcb 	bl	800ce98 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4618      	mov	r0, r3
 8009308:	f003 ff82 	bl	800d210 <SDMMC_CmdStatusRegister>
 800930c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d02b      	beq.n	800936c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800931c:	6a3b      	ldr	r3, [r7, #32]
 800931e:	e069      	b.n	80093f4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d013      	beq.n	8009356 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800932e:	2300      	movs	r3, #0
 8009330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009332:	e00d      	b.n	8009350 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4618      	mov	r0, r3
 800933a:	f003 fd37 	bl	800cdac <SDMMC_ReadFIFO>
 800933e:	4602      	mov	r2, r0
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	601a      	str	r2, [r3, #0]
        pData++;
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	3304      	adds	r3, #4
 8009348:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	3301      	adds	r3, #1
 800934e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	2b07      	cmp	r3, #7
 8009354:	d9ee      	bls.n	8009334 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009356:	f7f9 fdf7 	bl	8002f48 <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009364:	d102      	bne.n	800936c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009366:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800936a:	e043      	b.n	80093f4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009372:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0d2      	beq.n	8009320 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009380:	f003 0308 	and.w	r3, r3, #8
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009388:	2308      	movs	r3, #8
 800938a:	e033      	b.n	80093f4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800939a:	2302      	movs	r3, #2
 800939c:	e02a      	b.n	80093f4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a4:	f003 0320 	and.w	r3, r3, #32
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d017      	beq.n	80093dc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80093ac:	2320      	movs	r3, #32
 80093ae:	e021      	b.n	80093f4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f003 fcf9 	bl	800cdac <SDMMC_ReadFIFO>
 80093ba:	4602      	mov	r2, r0
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	601a      	str	r2, [r3, #0]
    pData++;
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	3304      	adds	r3, #4
 80093c4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80093c6:	f7f9 fdbf 	bl	8002f48 <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d4:	d102      	bne.n	80093dc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80093d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093da:	e00b      	b.n	80093f4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e2      	bne.n	80093b0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a03      	ldr	r2, [pc, #12]	; (80093fc <SD_SendSDStatus+0x19c>)
 80093f0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3730      	adds	r7, #48	; 0x30
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	18000f3a 	.word	0x18000f3a

08009400 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d102      	bne.n	8009416 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009414:	e018      	b.n	8009448 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941e:	041b      	lsls	r3, r3, #16
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f003 fed1 	bl	800d1ca <SDMMC_CmdSendStatus>
 8009428:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	e009      	b.n	8009448 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f003 fd19 	bl	800ce72 <SDMMC_GetResponse>
 8009440:	4602      	mov	r2, r0
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	2300      	movs	r3, #0
 800945e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2100      	movs	r1, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f003 fd03 	bl	800ce72 <SDMMC_GetResponse>
 800946c:	4603      	mov	r3, r0
 800946e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009476:	d102      	bne.n	800947e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800947c:	e02f      	b.n	80094de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800947e:	f107 030c 	add.w	r3, r7, #12
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f879 	bl	800957c <SD_FindSCR>
 800948a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	e023      	b.n	80094de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01c      	beq.n	80094da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a8:	041b      	lsls	r3, r3, #16
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f003 fda3 	bl	800cff8 <SDMMC_CmdAppCommand>
 80094b2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	e00f      	b.n	80094de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2102      	movs	r1, #2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f003 fdda 	bl	800d07e <SDMMC_CmdBusWidth>
 80094ca:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	e003      	b.n	80094de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	e001      	b.n	80094de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b086      	sub	sp, #24
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80094ee:	2300      	movs	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	2300      	movs	r3, #0
 80094f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2100      	movs	r1, #0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f003 fcb8 	bl	800ce72 <SDMMC_GetResponse>
 8009502:	4603      	mov	r3, r0
 8009504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800950c:	d102      	bne.n	8009514 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800950e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009512:	e02f      	b.n	8009574 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009514:	f107 030c 	add.w	r3, r7, #12
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f82e 	bl	800957c <SD_FindSCR>
 8009520:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	e023      	b.n	8009574 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009532:	2b00      	cmp	r3, #0
 8009534:	d01c      	beq.n	8009570 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800953e:	041b      	lsls	r3, r3, #16
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f003 fd58 	bl	800cff8 <SDMMC_CmdAppCommand>
 8009548:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	e00f      	b.n	8009574 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2100      	movs	r1, #0
 800955a:	4618      	mov	r0, r3
 800955c:	f003 fd8f 	bl	800d07e <SDMMC_CmdBusWidth>
 8009560:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	e003      	b.n	8009574 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800956c:	2300      	movs	r3, #0
 800956e:	e001      	b.n	8009574 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009570:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08e      	sub	sp, #56	; 0x38
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009586:	f7f9 fcdf 	bl	8002f48 <HAL_GetTick>
 800958a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009590:	2300      	movs	r3, #0
 8009592:	60bb      	str	r3, [r7, #8]
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2108      	movs	r1, #8
 80095a2:	4618      	mov	r0, r3
 80095a4:	f003 fca4 	bl	800cef0 <SDMMC_CmdBlockLength>
 80095a8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	e0ad      	b.n	8009710 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095bc:	041b      	lsls	r3, r3, #16
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f003 fd19 	bl	800cff8 <SDMMC_CmdAppCommand>
 80095c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	e09e      	b.n	8009710 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095d2:	f04f 33ff 	mov.w	r3, #4294967295
 80095d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80095d8:	2308      	movs	r3, #8
 80095da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80095dc:	2330      	movs	r3, #48	; 0x30
 80095de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80095e0:	2302      	movs	r3, #2
 80095e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80095e8:	2301      	movs	r3, #1
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f107 0210 	add.w	r2, r7, #16
 80095f4:	4611      	mov	r1, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f003 fc4e 	bl	800ce98 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4618      	mov	r0, r3
 8009602:	f003 fd5f 	bl	800d0c4 <SDMMC_CmdSendSCR>
 8009606:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	2b00      	cmp	r3, #0
 800960c:	d027      	beq.n	800965e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	e07e      	b.n	8009710 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d113      	bne.n	8009648 <SD_FindSCR+0xcc>
 8009620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009622:	2b00      	cmp	r3, #0
 8009624:	d110      	bne.n	8009648 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4618      	mov	r0, r3
 800962c:	f003 fbbe 	bl	800cdac <SDMMC_ReadFIFO>
 8009630:	4603      	mov	r3, r0
 8009632:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4618      	mov	r0, r3
 800963a:	f003 fbb7 	bl	800cdac <SDMMC_ReadFIFO>
 800963e:	4603      	mov	r3, r0
 8009640:	60fb      	str	r3, [r7, #12]
      index++;
 8009642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009644:	3301      	adds	r3, #1
 8009646:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009648:	f7f9 fc7e 	bl	8002f48 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009656:	d102      	bne.n	800965e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800965c:	e058      	b.n	8009710 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009664:	f240 532a 	movw	r3, #1322	; 0x52a
 8009668:	4013      	ands	r3, r2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0d1      	beq.n	8009612 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009674:	f003 0308 	and.w	r3, r3, #8
 8009678:	2b00      	cmp	r3, #0
 800967a:	d005      	beq.n	8009688 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2208      	movs	r2, #8
 8009682:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009684:	2308      	movs	r3, #8
 8009686:	e043      	b.n	8009710 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968e:	f003 0302 	and.w	r3, r3, #2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d005      	beq.n	80096a2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2202      	movs	r2, #2
 800969c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800969e:	2302      	movs	r3, #2
 80096a0:	e036      	b.n	8009710 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a8:	f003 0320 	and.w	r3, r3, #32
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2220      	movs	r2, #32
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80096b8:	2320      	movs	r3, #32
 80096ba:	e029      	b.n	8009710 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a15      	ldr	r2, [pc, #84]	; (8009718 <SD_FindSCR+0x19c>)
 80096c2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	061a      	lsls	r2, r3, #24
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	021b      	lsls	r3, r3, #8
 80096cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	0a1b      	lsrs	r3, r3, #8
 80096d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80096da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	0e1b      	lsrs	r3, r3, #24
 80096e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80096e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e4:	601a      	str	r2, [r3, #0]
    scr++;
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	3304      	adds	r3, #4
 80096ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	061a      	lsls	r2, r3, #24
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	021b      	lsls	r3, r3, #8
 80096f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	0a1b      	lsrs	r3, r3, #8
 80096fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009702:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	0e1b      	lsrs	r3, r3, #24
 8009708:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3738      	adds	r7, #56	; 0x38
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	18000f3a 	.word	0x18000f3a

0800971c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e10f      	b.n	800994e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a87      	ldr	r2, [pc, #540]	; (8009958 <HAL_SPI_Init+0x23c>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00f      	beq.n	800975e <HAL_SPI_Init+0x42>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a86      	ldr	r2, [pc, #536]	; (800995c <HAL_SPI_Init+0x240>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d00a      	beq.n	800975e <HAL_SPI_Init+0x42>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a84      	ldr	r2, [pc, #528]	; (8009960 <HAL_SPI_Init+0x244>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d005      	beq.n	800975e <HAL_SPI_Init+0x42>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	2b0f      	cmp	r3, #15
 8009758:	d901      	bls.n	800975e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e0f7      	b.n	800994e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f900 	bl	8009964 <SPI_GetPacketSize>
 8009764:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a7b      	ldr	r2, [pc, #492]	; (8009958 <HAL_SPI_Init+0x23c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00c      	beq.n	800978a <HAL_SPI_Init+0x6e>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a79      	ldr	r2, [pc, #484]	; (800995c <HAL_SPI_Init+0x240>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d007      	beq.n	800978a <HAL_SPI_Init+0x6e>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a78      	ldr	r2, [pc, #480]	; (8009960 <HAL_SPI_Init+0x244>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d002      	beq.n	800978a <HAL_SPI_Init+0x6e>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2b08      	cmp	r3, #8
 8009788:	d811      	bhi.n	80097ae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800978e:	4a72      	ldr	r2, [pc, #456]	; (8009958 <HAL_SPI_Init+0x23c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d009      	beq.n	80097a8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a70      	ldr	r2, [pc, #448]	; (800995c <HAL_SPI_Init+0x240>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d004      	beq.n	80097a8 <HAL_SPI_Init+0x8c>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a6f      	ldr	r2, [pc, #444]	; (8009960 <HAL_SPI_Init+0x244>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d104      	bne.n	80097b2 <HAL_SPI_Init+0x96>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b10      	cmp	r3, #16
 80097ac:	d901      	bls.n	80097b2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e0cd      	b.n	800994e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7f8 fc28 	bl	800201c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0201 	bic.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80097ee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097f8:	d119      	bne.n	800982e <HAL_SPI_Init+0x112>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009802:	d103      	bne.n	800980c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009808:	2b00      	cmp	r3, #0
 800980a:	d008      	beq.n	800981e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10c      	bne.n	800982e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800981c:	d107      	bne.n	800982e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800982c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00f      	beq.n	800985a <HAL_SPI_Init+0x13e>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	2b06      	cmp	r3, #6
 8009840:	d90b      	bls.n	800985a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	e007      	b.n	800986a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009868:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	69da      	ldr	r2, [r3, #28]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009872:	431a      	orrs	r2, r3
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987c:	ea42 0103 	orr.w	r1, r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68da      	ldr	r2, [r3, #12]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	430a      	orrs	r2, r1
 800988a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	431a      	orrs	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989a:	431a      	orrs	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	431a      	orrs	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	431a      	orrs	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	431a      	orrs	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	431a      	orrs	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	431a      	orrs	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098be:	431a      	orrs	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ca:	ea42 0103 	orr.w	r1, r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d113      	bne.n	800990a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009908:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f022 0201 	bic.w	r2, r2, #1
 8009918:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	40013000 	.word	0x40013000
 800995c:	40003800 	.word	0x40003800
 8009960:	40003c00 	.word	0x40003c00

08009964 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009970:	095b      	lsrs	r3, r3, #5
 8009972:	3301      	adds	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	3301      	adds	r3, #1
 800997c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	3307      	adds	r3, #7
 8009982:	08db      	lsrs	r3, r3, #3
 8009984:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	fb02 f303 	mul.w	r3, r2, r3
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e049      	b.n	8009a40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7f8 fca5 	bl	8002310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2202      	movs	r2, #2
 80099ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	3304      	adds	r3, #4
 80099d6:	4619      	mov	r1, r3
 80099d8:	4610      	mov	r0, r2
 80099da:	f000 fa99 	bl	8009f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e049      	b.n	8009aee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7f8 fc70 	bl	8002354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3304      	adds	r3, #4
 8009a84:	4619      	mov	r1, r3
 8009a86:	4610      	mov	r0, r2
 8009a88:	f000 fa42 	bl	8009f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b12:	2302      	movs	r3, #2
 8009b14:	e0ff      	b.n	8009d16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b14      	cmp	r3, #20
 8009b22:	f200 80f0 	bhi.w	8009d06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009b26:	a201      	add	r2, pc, #4	; (adr r2, 8009b2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2c:	08009b81 	.word	0x08009b81
 8009b30:	08009d07 	.word	0x08009d07
 8009b34:	08009d07 	.word	0x08009d07
 8009b38:	08009d07 	.word	0x08009d07
 8009b3c:	08009bc1 	.word	0x08009bc1
 8009b40:	08009d07 	.word	0x08009d07
 8009b44:	08009d07 	.word	0x08009d07
 8009b48:	08009d07 	.word	0x08009d07
 8009b4c:	08009c03 	.word	0x08009c03
 8009b50:	08009d07 	.word	0x08009d07
 8009b54:	08009d07 	.word	0x08009d07
 8009b58:	08009d07 	.word	0x08009d07
 8009b5c:	08009c43 	.word	0x08009c43
 8009b60:	08009d07 	.word	0x08009d07
 8009b64:	08009d07 	.word	0x08009d07
 8009b68:	08009d07 	.word	0x08009d07
 8009b6c:	08009c85 	.word	0x08009c85
 8009b70:	08009d07 	.word	0x08009d07
 8009b74:	08009d07 	.word	0x08009d07
 8009b78:	08009d07 	.word	0x08009d07
 8009b7c:	08009cc5 	.word	0x08009cc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fa74 	bl	800a074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	699a      	ldr	r2, [r3, #24]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0208 	orr.w	r2, r2, #8
 8009b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	699a      	ldr	r2, [r3, #24]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f022 0204 	bic.w	r2, r2, #4
 8009baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6999      	ldr	r1, [r3, #24]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	691a      	ldr	r2, [r3, #16]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	619a      	str	r2, [r3, #24]
      break;
 8009bbe:	e0a5      	b.n	8009d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 fae4 	bl	800a194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699a      	ldr	r2, [r3, #24]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6999      	ldr	r1, [r3, #24]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	021a      	lsls	r2, r3, #8
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	619a      	str	r2, [r3, #24]
      break;
 8009c00:	e084      	b.n	8009d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fb4d 	bl	800a2a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69da      	ldr	r2, [r3, #28]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f042 0208 	orr.w	r2, r2, #8
 8009c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	69da      	ldr	r2, [r3, #28]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0204 	bic.w	r2, r2, #4
 8009c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69d9      	ldr	r1, [r3, #28]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	691a      	ldr	r2, [r3, #16]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	61da      	str	r2, [r3, #28]
      break;
 8009c40:	e064      	b.n	8009d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fbb5 	bl	800a3b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	69da      	ldr	r2, [r3, #28]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	69d9      	ldr	r1, [r3, #28]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	021a      	lsls	r2, r3, #8
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	61da      	str	r2, [r3, #28]
      break;
 8009c82:	e043      	b.n	8009d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 fbfe 	bl	800a48c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0208 	orr.w	r2, r2, #8
 8009c9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0204 	bic.w	r2, r2, #4
 8009cae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	691a      	ldr	r2, [r3, #16]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009cc2:	e023      	b.n	8009d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68b9      	ldr	r1, [r7, #8]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 fc42 	bl	800a554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	021a      	lsls	r2, r3, #8
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d04:	e002      	b.n	8009d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	75fb      	strb	r3, [r7, #23]
      break;
 8009d0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop

08009d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d101      	bne.n	8009d3c <HAL_TIM_ConfigClockSource+0x1c>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e0dc      	b.n	8009ef6 <HAL_TIM_ConfigClockSource+0x1d6>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	4b6a      	ldr	r3, [pc, #424]	; (8009f00 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a64      	ldr	r2, [pc, #400]	; (8009f04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	f000 80a9 	beq.w	8009eca <HAL_TIM_ConfigClockSource+0x1aa>
 8009d78:	4a62      	ldr	r2, [pc, #392]	; (8009f04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	f200 80ae 	bhi.w	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009d80:	4a61      	ldr	r2, [pc, #388]	; (8009f08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	f000 80a1 	beq.w	8009eca <HAL_TIM_ConfigClockSource+0x1aa>
 8009d88:	4a5f      	ldr	r2, [pc, #380]	; (8009f08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	f200 80a6 	bhi.w	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009d90:	4a5e      	ldr	r2, [pc, #376]	; (8009f0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	f000 8099 	beq.w	8009eca <HAL_TIM_ConfigClockSource+0x1aa>
 8009d98:	4a5c      	ldr	r2, [pc, #368]	; (8009f0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	f200 809e 	bhi.w	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009da0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009da4:	f000 8091 	beq.w	8009eca <HAL_TIM_ConfigClockSource+0x1aa>
 8009da8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009dac:	f200 8096 	bhi.w	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009db4:	f000 8089 	beq.w	8009eca <HAL_TIM_ConfigClockSource+0x1aa>
 8009db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dbc:	f200 808e 	bhi.w	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dc4:	d03e      	beq.n	8009e44 <HAL_TIM_ConfigClockSource+0x124>
 8009dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dca:	f200 8087 	bhi.w	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dd2:	f000 8086 	beq.w	8009ee2 <HAL_TIM_ConfigClockSource+0x1c2>
 8009dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dda:	d87f      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009ddc:	2b70      	cmp	r3, #112	; 0x70
 8009dde:	d01a      	beq.n	8009e16 <HAL_TIM_ConfigClockSource+0xf6>
 8009de0:	2b70      	cmp	r3, #112	; 0x70
 8009de2:	d87b      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009de4:	2b60      	cmp	r3, #96	; 0x60
 8009de6:	d050      	beq.n	8009e8a <HAL_TIM_ConfigClockSource+0x16a>
 8009de8:	2b60      	cmp	r3, #96	; 0x60
 8009dea:	d877      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009dec:	2b50      	cmp	r3, #80	; 0x50
 8009dee:	d03c      	beq.n	8009e6a <HAL_TIM_ConfigClockSource+0x14a>
 8009df0:	2b50      	cmp	r3, #80	; 0x50
 8009df2:	d873      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009df4:	2b40      	cmp	r3, #64	; 0x40
 8009df6:	d058      	beq.n	8009eaa <HAL_TIM_ConfigClockSource+0x18a>
 8009df8:	2b40      	cmp	r3, #64	; 0x40
 8009dfa:	d86f      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009dfc:	2b30      	cmp	r3, #48	; 0x30
 8009dfe:	d064      	beq.n	8009eca <HAL_TIM_ConfigClockSource+0x1aa>
 8009e00:	2b30      	cmp	r3, #48	; 0x30
 8009e02:	d86b      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	d060      	beq.n	8009eca <HAL_TIM_ConfigClockSource+0x1aa>
 8009e08:	2b20      	cmp	r3, #32
 8009e0a:	d867      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d05c      	beq.n	8009eca <HAL_TIM_ConfigClockSource+0x1aa>
 8009e10:	2b10      	cmp	r3, #16
 8009e12:	d05a      	beq.n	8009eca <HAL_TIM_ConfigClockSource+0x1aa>
 8009e14:	e062      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e26:	f000 fc79 	bl	800a71c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	609a      	str	r2, [r3, #8]
      break;
 8009e42:	e04f      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e54:	f000 fc62 	bl	800a71c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689a      	ldr	r2, [r3, #8]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e66:	609a      	str	r2, [r3, #8]
      break;
 8009e68:	e03c      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e76:	461a      	mov	r2, r3
 8009e78:	f000 fbd2 	bl	800a620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2150      	movs	r1, #80	; 0x50
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 fc2c 	bl	800a6e0 <TIM_ITRx_SetConfig>
      break;
 8009e88:	e02c      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e96:	461a      	mov	r2, r3
 8009e98:	f000 fbf1 	bl	800a67e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2160      	movs	r1, #96	; 0x60
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 fc1c 	bl	800a6e0 <TIM_ITRx_SetConfig>
      break;
 8009ea8:	e01c      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f000 fbb2 	bl	800a620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2140      	movs	r1, #64	; 0x40
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 fc0c 	bl	800a6e0 <TIM_ITRx_SetConfig>
      break;
 8009ec8:	e00c      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	f000 fc03 	bl	800a6e0 <TIM_ITRx_SetConfig>
      break;
 8009eda:	e003      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	73fb      	strb	r3, [r7, #15]
      break;
 8009ee0:	e000      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	ffceff88 	.word	0xffceff88
 8009f04:	00100040 	.word	0x00100040
 8009f08:	00100030 	.word	0x00100030
 8009f0c:	00100020 	.word	0x00100020

08009f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a4a      	ldr	r2, [pc, #296]	; (800a04c <TIM_Base_SetConfig+0x13c>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d013      	beq.n	8009f50 <TIM_Base_SetConfig+0x40>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2e:	d00f      	beq.n	8009f50 <TIM_Base_SetConfig+0x40>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a47      	ldr	r2, [pc, #284]	; (800a050 <TIM_Base_SetConfig+0x140>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d00b      	beq.n	8009f50 <TIM_Base_SetConfig+0x40>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a46      	ldr	r2, [pc, #280]	; (800a054 <TIM_Base_SetConfig+0x144>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d007      	beq.n	8009f50 <TIM_Base_SetConfig+0x40>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a45      	ldr	r2, [pc, #276]	; (800a058 <TIM_Base_SetConfig+0x148>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d003      	beq.n	8009f50 <TIM_Base_SetConfig+0x40>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a44      	ldr	r2, [pc, #272]	; (800a05c <TIM_Base_SetConfig+0x14c>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d108      	bne.n	8009f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a39      	ldr	r2, [pc, #228]	; (800a04c <TIM_Base_SetConfig+0x13c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d027      	beq.n	8009fba <TIM_Base_SetConfig+0xaa>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f70:	d023      	beq.n	8009fba <TIM_Base_SetConfig+0xaa>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a36      	ldr	r2, [pc, #216]	; (800a050 <TIM_Base_SetConfig+0x140>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d01f      	beq.n	8009fba <TIM_Base_SetConfig+0xaa>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a35      	ldr	r2, [pc, #212]	; (800a054 <TIM_Base_SetConfig+0x144>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d01b      	beq.n	8009fba <TIM_Base_SetConfig+0xaa>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a34      	ldr	r2, [pc, #208]	; (800a058 <TIM_Base_SetConfig+0x148>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d017      	beq.n	8009fba <TIM_Base_SetConfig+0xaa>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a33      	ldr	r2, [pc, #204]	; (800a05c <TIM_Base_SetConfig+0x14c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d013      	beq.n	8009fba <TIM_Base_SetConfig+0xaa>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a32      	ldr	r2, [pc, #200]	; (800a060 <TIM_Base_SetConfig+0x150>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d00f      	beq.n	8009fba <TIM_Base_SetConfig+0xaa>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a31      	ldr	r2, [pc, #196]	; (800a064 <TIM_Base_SetConfig+0x154>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00b      	beq.n	8009fba <TIM_Base_SetConfig+0xaa>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a30      	ldr	r2, [pc, #192]	; (800a068 <TIM_Base_SetConfig+0x158>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d007      	beq.n	8009fba <TIM_Base_SetConfig+0xaa>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a2f      	ldr	r2, [pc, #188]	; (800a06c <TIM_Base_SetConfig+0x15c>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d003      	beq.n	8009fba <TIM_Base_SetConfig+0xaa>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a2e      	ldr	r2, [pc, #184]	; (800a070 <TIM_Base_SetConfig+0x160>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d108      	bne.n	8009fcc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a16      	ldr	r2, [pc, #88]	; (800a04c <TIM_Base_SetConfig+0x13c>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d00f      	beq.n	800a018 <TIM_Base_SetConfig+0x108>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a18      	ldr	r2, [pc, #96]	; (800a05c <TIM_Base_SetConfig+0x14c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d00b      	beq.n	800a018 <TIM_Base_SetConfig+0x108>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a17      	ldr	r2, [pc, #92]	; (800a060 <TIM_Base_SetConfig+0x150>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d007      	beq.n	800a018 <TIM_Base_SetConfig+0x108>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a16      	ldr	r2, [pc, #88]	; (800a064 <TIM_Base_SetConfig+0x154>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d003      	beq.n	800a018 <TIM_Base_SetConfig+0x108>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a15      	ldr	r2, [pc, #84]	; (800a068 <TIM_Base_SetConfig+0x158>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d103      	bne.n	800a020 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	691a      	ldr	r2, [r3, #16]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d105      	bne.n	800a03e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	f023 0201 	bic.w	r2, r3, #1
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	611a      	str	r2, [r3, #16]
  }
}
 800a03e:	bf00      	nop
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	40010000 	.word	0x40010000
 800a050:	40000400 	.word	0x40000400
 800a054:	40000800 	.word	0x40000800
 800a058:	40000c00 	.word	0x40000c00
 800a05c:	40010400 	.word	0x40010400
 800a060:	40014000 	.word	0x40014000
 800a064:	40014400 	.word	0x40014400
 800a068:	40014800 	.word	0x40014800
 800a06c:	4000e000 	.word	0x4000e000
 800a070:	4000e400 	.word	0x4000e400

0800a074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	f023 0201 	bic.w	r2, r3, #1
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	4b37      	ldr	r3, [pc, #220]	; (800a17c <TIM_OC1_SetConfig+0x108>)
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 0303 	bic.w	r3, r3, #3
 800a0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f023 0302 	bic.w	r3, r3, #2
 800a0bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a2d      	ldr	r2, [pc, #180]	; (800a180 <TIM_OC1_SetConfig+0x10c>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d00f      	beq.n	800a0f0 <TIM_OC1_SetConfig+0x7c>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a2c      	ldr	r2, [pc, #176]	; (800a184 <TIM_OC1_SetConfig+0x110>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d00b      	beq.n	800a0f0 <TIM_OC1_SetConfig+0x7c>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a2b      	ldr	r2, [pc, #172]	; (800a188 <TIM_OC1_SetConfig+0x114>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d007      	beq.n	800a0f0 <TIM_OC1_SetConfig+0x7c>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a2a      	ldr	r2, [pc, #168]	; (800a18c <TIM_OC1_SetConfig+0x118>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d003      	beq.n	800a0f0 <TIM_OC1_SetConfig+0x7c>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a29      	ldr	r2, [pc, #164]	; (800a190 <TIM_OC1_SetConfig+0x11c>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d10c      	bne.n	800a10a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f023 0308 	bic.w	r3, r3, #8
 800a0f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f023 0304 	bic.w	r3, r3, #4
 800a108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a1c      	ldr	r2, [pc, #112]	; (800a180 <TIM_OC1_SetConfig+0x10c>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d00f      	beq.n	800a132 <TIM_OC1_SetConfig+0xbe>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a1b      	ldr	r2, [pc, #108]	; (800a184 <TIM_OC1_SetConfig+0x110>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d00b      	beq.n	800a132 <TIM_OC1_SetConfig+0xbe>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a1a      	ldr	r2, [pc, #104]	; (800a188 <TIM_OC1_SetConfig+0x114>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d007      	beq.n	800a132 <TIM_OC1_SetConfig+0xbe>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a19      	ldr	r2, [pc, #100]	; (800a18c <TIM_OC1_SetConfig+0x118>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d003      	beq.n	800a132 <TIM_OC1_SetConfig+0xbe>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a18      	ldr	r2, [pc, #96]	; (800a190 <TIM_OC1_SetConfig+0x11c>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d111      	bne.n	800a156 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4313      	orrs	r3, r2
 800a154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	621a      	str	r2, [r3, #32]
}
 800a170:	bf00      	nop
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	fffeff8f 	.word	0xfffeff8f
 800a180:	40010000 	.word	0x40010000
 800a184:	40010400 	.word	0x40010400
 800a188:	40014000 	.word	0x40014000
 800a18c:	40014400 	.word	0x40014400
 800a190:	40014800 	.word	0x40014800

0800a194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	f023 0210 	bic.w	r2, r3, #16
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4b34      	ldr	r3, [pc, #208]	; (800a290 <TIM_OC2_SetConfig+0xfc>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	021b      	lsls	r3, r3, #8
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	f023 0320 	bic.w	r3, r3, #32
 800a1de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	011b      	lsls	r3, r3, #4
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a29      	ldr	r2, [pc, #164]	; (800a294 <TIM_OC2_SetConfig+0x100>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d003      	beq.n	800a1fc <TIM_OC2_SetConfig+0x68>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a28      	ldr	r2, [pc, #160]	; (800a298 <TIM_OC2_SetConfig+0x104>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d10d      	bne.n	800a218 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	011b      	lsls	r3, r3, #4
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a216:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a1e      	ldr	r2, [pc, #120]	; (800a294 <TIM_OC2_SetConfig+0x100>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00f      	beq.n	800a240 <TIM_OC2_SetConfig+0xac>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a1d      	ldr	r2, [pc, #116]	; (800a298 <TIM_OC2_SetConfig+0x104>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d00b      	beq.n	800a240 <TIM_OC2_SetConfig+0xac>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a1c      	ldr	r2, [pc, #112]	; (800a29c <TIM_OC2_SetConfig+0x108>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d007      	beq.n	800a240 <TIM_OC2_SetConfig+0xac>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a1b      	ldr	r2, [pc, #108]	; (800a2a0 <TIM_OC2_SetConfig+0x10c>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d003      	beq.n	800a240 <TIM_OC2_SetConfig+0xac>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a1a      	ldr	r2, [pc, #104]	; (800a2a4 <TIM_OC2_SetConfig+0x110>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d113      	bne.n	800a268 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a24e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	695b      	ldr	r3, [r3, #20]
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	4313      	orrs	r3, r2
 800a25a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	4313      	orrs	r3, r2
 800a266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	621a      	str	r2, [r3, #32]
}
 800a282:	bf00      	nop
 800a284:	371c      	adds	r7, #28
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	feff8fff 	.word	0xfeff8fff
 800a294:	40010000 	.word	0x40010000
 800a298:	40010400 	.word	0x40010400
 800a29c:	40014000 	.word	0x40014000
 800a2a0:	40014400 	.word	0x40014400
 800a2a4:	40014800 	.word	0x40014800

0800a2a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	4b33      	ldr	r3, [pc, #204]	; (800a3a0 <TIM_OC3_SetConfig+0xf8>)
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f023 0303 	bic.w	r3, r3, #3
 800a2de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	021b      	lsls	r3, r3, #8
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a28      	ldr	r2, [pc, #160]	; (800a3a4 <TIM_OC3_SetConfig+0xfc>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d003      	beq.n	800a30e <TIM_OC3_SetConfig+0x66>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a27      	ldr	r2, [pc, #156]	; (800a3a8 <TIM_OC3_SetConfig+0x100>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d10d      	bne.n	800a32a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	021b      	lsls	r3, r3, #8
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	4313      	orrs	r3, r2
 800a320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a1d      	ldr	r2, [pc, #116]	; (800a3a4 <TIM_OC3_SetConfig+0xfc>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00f      	beq.n	800a352 <TIM_OC3_SetConfig+0xaa>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a1c      	ldr	r2, [pc, #112]	; (800a3a8 <TIM_OC3_SetConfig+0x100>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d00b      	beq.n	800a352 <TIM_OC3_SetConfig+0xaa>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a1b      	ldr	r2, [pc, #108]	; (800a3ac <TIM_OC3_SetConfig+0x104>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d007      	beq.n	800a352 <TIM_OC3_SetConfig+0xaa>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a1a      	ldr	r2, [pc, #104]	; (800a3b0 <TIM_OC3_SetConfig+0x108>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d003      	beq.n	800a352 <TIM_OC3_SetConfig+0xaa>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a19      	ldr	r2, [pc, #100]	; (800a3b4 <TIM_OC3_SetConfig+0x10c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d113      	bne.n	800a37a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4313      	orrs	r3, r2
 800a378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	621a      	str	r2, [r3, #32]
}
 800a394:	bf00      	nop
 800a396:	371c      	adds	r7, #28
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	fffeff8f 	.word	0xfffeff8f
 800a3a4:	40010000 	.word	0x40010000
 800a3a8:	40010400 	.word	0x40010400
 800a3ac:	40014000 	.word	0x40014000
 800a3b0:	40014400 	.word	0x40014400
 800a3b4:	40014800 	.word	0x40014800

0800a3b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4b24      	ldr	r3, [pc, #144]	; (800a474 <TIM_OC4_SetConfig+0xbc>)
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	031b      	lsls	r3, r3, #12
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a19      	ldr	r2, [pc, #100]	; (800a478 <TIM_OC4_SetConfig+0xc0>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d00f      	beq.n	800a438 <TIM_OC4_SetConfig+0x80>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a18      	ldr	r2, [pc, #96]	; (800a47c <TIM_OC4_SetConfig+0xc4>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d00b      	beq.n	800a438 <TIM_OC4_SetConfig+0x80>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a17      	ldr	r2, [pc, #92]	; (800a480 <TIM_OC4_SetConfig+0xc8>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d007      	beq.n	800a438 <TIM_OC4_SetConfig+0x80>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a16      	ldr	r2, [pc, #88]	; (800a484 <TIM_OC4_SetConfig+0xcc>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d003      	beq.n	800a438 <TIM_OC4_SetConfig+0x80>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a15      	ldr	r2, [pc, #84]	; (800a488 <TIM_OC4_SetConfig+0xd0>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d109      	bne.n	800a44c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a43e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	019b      	lsls	r3, r3, #6
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	4313      	orrs	r3, r2
 800a44a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	621a      	str	r2, [r3, #32]
}
 800a466:	bf00      	nop
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	feff8fff 	.word	0xfeff8fff
 800a478:	40010000 	.word	0x40010000
 800a47c:	40010400 	.word	0x40010400
 800a480:	40014000 	.word	0x40014000
 800a484:	40014400 	.word	0x40014400
 800a488:	40014800 	.word	0x40014800

0800a48c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b087      	sub	sp, #28
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a1b      	ldr	r3, [r3, #32]
 800a4a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4b21      	ldr	r3, [pc, #132]	; (800a53c <TIM_OC5_SetConfig+0xb0>)
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a4cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	041b      	lsls	r3, r3, #16
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a18      	ldr	r2, [pc, #96]	; (800a540 <TIM_OC5_SetConfig+0xb4>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d00f      	beq.n	800a502 <TIM_OC5_SetConfig+0x76>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a17      	ldr	r2, [pc, #92]	; (800a544 <TIM_OC5_SetConfig+0xb8>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d00b      	beq.n	800a502 <TIM_OC5_SetConfig+0x76>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a16      	ldr	r2, [pc, #88]	; (800a548 <TIM_OC5_SetConfig+0xbc>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d007      	beq.n	800a502 <TIM_OC5_SetConfig+0x76>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a15      	ldr	r2, [pc, #84]	; (800a54c <TIM_OC5_SetConfig+0xc0>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d003      	beq.n	800a502 <TIM_OC5_SetConfig+0x76>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a14      	ldr	r2, [pc, #80]	; (800a550 <TIM_OC5_SetConfig+0xc4>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d109      	bne.n	800a516 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a508:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	021b      	lsls	r3, r3, #8
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	4313      	orrs	r3, r2
 800a514:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	621a      	str	r2, [r3, #32]
}
 800a530:	bf00      	nop
 800a532:	371c      	adds	r7, #28
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	fffeff8f 	.word	0xfffeff8f
 800a540:	40010000 	.word	0x40010000
 800a544:	40010400 	.word	0x40010400
 800a548:	40014000 	.word	0x40014000
 800a54c:	40014400 	.word	0x40014400
 800a550:	40014800 	.word	0x40014800

0800a554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	4b22      	ldr	r3, [pc, #136]	; (800a608 <TIM_OC6_SetConfig+0xb4>)
 800a580:	4013      	ands	r3, r2
 800a582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	021b      	lsls	r3, r3, #8
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	051b      	lsls	r3, r3, #20
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a19      	ldr	r2, [pc, #100]	; (800a60c <TIM_OC6_SetConfig+0xb8>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d00f      	beq.n	800a5cc <TIM_OC6_SetConfig+0x78>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a18      	ldr	r2, [pc, #96]	; (800a610 <TIM_OC6_SetConfig+0xbc>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d00b      	beq.n	800a5cc <TIM_OC6_SetConfig+0x78>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a17      	ldr	r2, [pc, #92]	; (800a614 <TIM_OC6_SetConfig+0xc0>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d007      	beq.n	800a5cc <TIM_OC6_SetConfig+0x78>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a16      	ldr	r2, [pc, #88]	; (800a618 <TIM_OC6_SetConfig+0xc4>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d003      	beq.n	800a5cc <TIM_OC6_SetConfig+0x78>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a15      	ldr	r2, [pc, #84]	; (800a61c <TIM_OC6_SetConfig+0xc8>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d109      	bne.n	800a5e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	029b      	lsls	r3, r3, #10
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	621a      	str	r2, [r3, #32]
}
 800a5fa:	bf00      	nop
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	feff8fff 	.word	0xfeff8fff
 800a60c:	40010000 	.word	0x40010000
 800a610:	40010400 	.word	0x40010400
 800a614:	40014000 	.word	0x40014000
 800a618:	40014400 	.word	0x40014400
 800a61c:	40014800 	.word	0x40014800

0800a620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6a1b      	ldr	r3, [r3, #32]
 800a630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	f023 0201 	bic.w	r2, r3, #1
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a64a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	011b      	lsls	r3, r3, #4
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	4313      	orrs	r3, r2
 800a654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f023 030a 	bic.w	r3, r3, #10
 800a65c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	4313      	orrs	r3, r2
 800a664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	621a      	str	r2, [r3, #32]
}
 800a672:	bf00      	nop
 800a674:	371c      	adds	r7, #28
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a67e:	b480      	push	{r7}
 800a680:	b087      	sub	sp, #28
 800a682:	af00      	add	r7, sp, #0
 800a684:	60f8      	str	r0, [r7, #12]
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	f023 0210 	bic.w	r2, r3, #16
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	031b      	lsls	r3, r3, #12
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	011b      	lsls	r3, r3, #4
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	621a      	str	r2, [r3, #32]
}
 800a6d2:	bf00      	nop
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
	...

0800a6e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	4b09      	ldr	r3, [pc, #36]	; (800a718 <TIM_ITRx_SetConfig+0x38>)
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	f043 0307 	orr.w	r3, r3, #7
 800a702:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	609a      	str	r2, [r3, #8]
}
 800a70a:	bf00      	nop
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	ffcfff8f 	.word	0xffcfff8f

0800a71c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a736:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	021a      	lsls	r2, r3, #8
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	431a      	orrs	r2, r3
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4313      	orrs	r3, r2
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	4313      	orrs	r3, r2
 800a748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	609a      	str	r2, [r3, #8]
}
 800a750:	bf00      	nop
 800a752:	371c      	adds	r7, #28
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d101      	bne.n	800a774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a770:	2302      	movs	r3, #2
 800a772:	e077      	b.n	800a864 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a35      	ldr	r2, [pc, #212]	; (800a870 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d004      	beq.n	800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a34      	ldr	r2, [pc, #208]	; (800a874 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d108      	bne.n	800a7ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a25      	ldr	r2, [pc, #148]	; (800a870 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d02c      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e6:	d027      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a22      	ldr	r2, [pc, #136]	; (800a878 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d022      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a21      	ldr	r2, [pc, #132]	; (800a87c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d01d      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a1f      	ldr	r2, [pc, #124]	; (800a880 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d018      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a1a      	ldr	r2, [pc, #104]	; (800a874 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d013      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a1b      	ldr	r2, [pc, #108]	; (800a884 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d00e      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a1a      	ldr	r2, [pc, #104]	; (800a888 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d009      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a18      	ldr	r2, [pc, #96]	; (800a88c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d004      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a17      	ldr	r2, [pc, #92]	; (800a890 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d10c      	bne.n	800a852 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a83e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	4313      	orrs	r3, r2
 800a848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	40010000 	.word	0x40010000
 800a874:	40010400 	.word	0x40010400
 800a878:	40000400 	.word	0x40000400
 800a87c:	40000800 	.word	0x40000800
 800a880:	40000c00 	.word	0x40000c00
 800a884:	40001800 	.word	0x40001800
 800a888:	40014000 	.word	0x40014000
 800a88c:	4000e000 	.word	0x4000e000
 800a890:	4000e400 	.word	0x4000e400

0800a894 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e073      	b.n	800a998 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	4313      	orrs	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a916:	4313      	orrs	r3, r2
 800a918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	041b      	lsls	r3, r3, #16
 800a926:	4313      	orrs	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	69db      	ldr	r3, [r3, #28]
 800a934:	4313      	orrs	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a19      	ldr	r2, [pc, #100]	; (800a9a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d004      	beq.n	800a94c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a18      	ldr	r2, [pc, #96]	; (800a9a8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d11c      	bne.n	800a986 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a956:	051b      	lsls	r3, r3, #20
 800a958:	4313      	orrs	r3, r2
 800a95a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	4313      	orrs	r3, r2
 800a968:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a974:	4313      	orrs	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a982:	4313      	orrs	r3, r2
 800a984:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	40010000 	.word	0x40010000
 800a9a8:	40010400 	.word	0x40010400

0800a9ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e042      	b.n	800aa44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7f7 febb 	bl	800274c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2224      	movs	r2, #36	; 0x24
 800a9da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f022 0201 	bic.w	r2, r2, #1
 800a9ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d002      	beq.n	800a9fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fe94 	bl	800b724 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f825 	bl	800aa4c <UART_SetConfig>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e01b      	b.n	800aa44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689a      	ldr	r2, [r3, #8]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f042 0201 	orr.w	r2, r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 ff13 	bl	800b868 <UART_CheckIdleState>
 800aa42:	4603      	mov	r3, r0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa50:	b092      	sub	sp, #72	; 0x48
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	431a      	orrs	r2, r3
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	69db      	ldr	r3, [r3, #28]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	4bbe      	ldr	r3, [pc, #760]	; (800ad74 <UART_SetConfig+0x328>)
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	6812      	ldr	r2, [r2, #0]
 800aa82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa84:	430b      	orrs	r3, r1
 800aa86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	68da      	ldr	r2, [r3, #12]
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4ab3      	ldr	r2, [pc, #716]	; (800ad78 <UART_SetConfig+0x32c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d004      	beq.n	800aab8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aab4:	4313      	orrs	r3, r2
 800aab6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	4baf      	ldr	r3, [pc, #700]	; (800ad7c <UART_SetConfig+0x330>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	6812      	ldr	r2, [r2, #0]
 800aac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aac8:	430b      	orrs	r3, r1
 800aaca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad2:	f023 010f 	bic.w	r1, r3, #15
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4aa6      	ldr	r2, [pc, #664]	; (800ad80 <UART_SetConfig+0x334>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d177      	bne.n	800abdc <UART_SetConfig+0x190>
 800aaec:	4ba5      	ldr	r3, [pc, #660]	; (800ad84 <UART_SetConfig+0x338>)
 800aaee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaf4:	2b28      	cmp	r3, #40	; 0x28
 800aaf6:	d86d      	bhi.n	800abd4 <UART_SetConfig+0x188>
 800aaf8:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <UART_SetConfig+0xb4>)
 800aafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafe:	bf00      	nop
 800ab00:	0800aba5 	.word	0x0800aba5
 800ab04:	0800abd5 	.word	0x0800abd5
 800ab08:	0800abd5 	.word	0x0800abd5
 800ab0c:	0800abd5 	.word	0x0800abd5
 800ab10:	0800abd5 	.word	0x0800abd5
 800ab14:	0800abd5 	.word	0x0800abd5
 800ab18:	0800abd5 	.word	0x0800abd5
 800ab1c:	0800abd5 	.word	0x0800abd5
 800ab20:	0800abad 	.word	0x0800abad
 800ab24:	0800abd5 	.word	0x0800abd5
 800ab28:	0800abd5 	.word	0x0800abd5
 800ab2c:	0800abd5 	.word	0x0800abd5
 800ab30:	0800abd5 	.word	0x0800abd5
 800ab34:	0800abd5 	.word	0x0800abd5
 800ab38:	0800abd5 	.word	0x0800abd5
 800ab3c:	0800abd5 	.word	0x0800abd5
 800ab40:	0800abb5 	.word	0x0800abb5
 800ab44:	0800abd5 	.word	0x0800abd5
 800ab48:	0800abd5 	.word	0x0800abd5
 800ab4c:	0800abd5 	.word	0x0800abd5
 800ab50:	0800abd5 	.word	0x0800abd5
 800ab54:	0800abd5 	.word	0x0800abd5
 800ab58:	0800abd5 	.word	0x0800abd5
 800ab5c:	0800abd5 	.word	0x0800abd5
 800ab60:	0800abbd 	.word	0x0800abbd
 800ab64:	0800abd5 	.word	0x0800abd5
 800ab68:	0800abd5 	.word	0x0800abd5
 800ab6c:	0800abd5 	.word	0x0800abd5
 800ab70:	0800abd5 	.word	0x0800abd5
 800ab74:	0800abd5 	.word	0x0800abd5
 800ab78:	0800abd5 	.word	0x0800abd5
 800ab7c:	0800abd5 	.word	0x0800abd5
 800ab80:	0800abc5 	.word	0x0800abc5
 800ab84:	0800abd5 	.word	0x0800abd5
 800ab88:	0800abd5 	.word	0x0800abd5
 800ab8c:	0800abd5 	.word	0x0800abd5
 800ab90:	0800abd5 	.word	0x0800abd5
 800ab94:	0800abd5 	.word	0x0800abd5
 800ab98:	0800abd5 	.word	0x0800abd5
 800ab9c:	0800abd5 	.word	0x0800abd5
 800aba0:	0800abcd 	.word	0x0800abcd
 800aba4:	2301      	movs	r3, #1
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abaa:	e326      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800abac:	2304      	movs	r3, #4
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abb2:	e322      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800abb4:	2308      	movs	r3, #8
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abba:	e31e      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800abbc:	2310      	movs	r3, #16
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abc2:	e31a      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800abc4:	2320      	movs	r3, #32
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abca:	e316      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800abcc:	2340      	movs	r3, #64	; 0x40
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abd2:	e312      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800abd4:	2380      	movs	r3, #128	; 0x80
 800abd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abda:	e30e      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a69      	ldr	r2, [pc, #420]	; (800ad88 <UART_SetConfig+0x33c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d130      	bne.n	800ac48 <UART_SetConfig+0x1fc>
 800abe6:	4b67      	ldr	r3, [pc, #412]	; (800ad84 <UART_SetConfig+0x338>)
 800abe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	2b05      	cmp	r3, #5
 800abf0:	d826      	bhi.n	800ac40 <UART_SetConfig+0x1f4>
 800abf2:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <UART_SetConfig+0x1ac>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac11 	.word	0x0800ac11
 800abfc:	0800ac19 	.word	0x0800ac19
 800ac00:	0800ac21 	.word	0x0800ac21
 800ac04:	0800ac29 	.word	0x0800ac29
 800ac08:	0800ac31 	.word	0x0800ac31
 800ac0c:	0800ac39 	.word	0x0800ac39
 800ac10:	2300      	movs	r3, #0
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac16:	e2f0      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac18:	2304      	movs	r3, #4
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac1e:	e2ec      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac20:	2308      	movs	r3, #8
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac26:	e2e8      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac28:	2310      	movs	r3, #16
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac2e:	e2e4      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac30:	2320      	movs	r3, #32
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac36:	e2e0      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac38:	2340      	movs	r3, #64	; 0x40
 800ac3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac3e:	e2dc      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac40:	2380      	movs	r3, #128	; 0x80
 800ac42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac46:	e2d8      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a4f      	ldr	r2, [pc, #316]	; (800ad8c <UART_SetConfig+0x340>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d130      	bne.n	800acb4 <UART_SetConfig+0x268>
 800ac52:	4b4c      	ldr	r3, [pc, #304]	; (800ad84 <UART_SetConfig+0x338>)
 800ac54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	2b05      	cmp	r3, #5
 800ac5c:	d826      	bhi.n	800acac <UART_SetConfig+0x260>
 800ac5e:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <UART_SetConfig+0x218>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800ac7d 	.word	0x0800ac7d
 800ac68:	0800ac85 	.word	0x0800ac85
 800ac6c:	0800ac8d 	.word	0x0800ac8d
 800ac70:	0800ac95 	.word	0x0800ac95
 800ac74:	0800ac9d 	.word	0x0800ac9d
 800ac78:	0800aca5 	.word	0x0800aca5
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac82:	e2ba      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac84:	2304      	movs	r3, #4
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac8a:	e2b6      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac8c:	2308      	movs	r3, #8
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac92:	e2b2      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac94:	2310      	movs	r3, #16
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac9a:	e2ae      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ac9c:	2320      	movs	r3, #32
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aca2:	e2aa      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800aca4:	2340      	movs	r3, #64	; 0x40
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acaa:	e2a6      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800acac:	2380      	movs	r3, #128	; 0x80
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acb2:	e2a2      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a35      	ldr	r2, [pc, #212]	; (800ad90 <UART_SetConfig+0x344>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d130      	bne.n	800ad20 <UART_SetConfig+0x2d4>
 800acbe:	4b31      	ldr	r3, [pc, #196]	; (800ad84 <UART_SetConfig+0x338>)
 800acc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc2:	f003 0307 	and.w	r3, r3, #7
 800acc6:	2b05      	cmp	r3, #5
 800acc8:	d826      	bhi.n	800ad18 <UART_SetConfig+0x2cc>
 800acca:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <UART_SetConfig+0x284>)
 800accc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd0:	0800ace9 	.word	0x0800ace9
 800acd4:	0800acf1 	.word	0x0800acf1
 800acd8:	0800acf9 	.word	0x0800acf9
 800acdc:	0800ad01 	.word	0x0800ad01
 800ace0:	0800ad09 	.word	0x0800ad09
 800ace4:	0800ad11 	.word	0x0800ad11
 800ace8:	2300      	movs	r3, #0
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acee:	e284      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800acf0:	2304      	movs	r3, #4
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acf6:	e280      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800acf8:	2308      	movs	r3, #8
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acfe:	e27c      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ad00:	2310      	movs	r3, #16
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad06:	e278      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ad08:	2320      	movs	r3, #32
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad0e:	e274      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ad10:	2340      	movs	r3, #64	; 0x40
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad16:	e270      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ad18:	2380      	movs	r3, #128	; 0x80
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad1e:	e26c      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a1b      	ldr	r2, [pc, #108]	; (800ad94 <UART_SetConfig+0x348>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d142      	bne.n	800adb0 <UART_SetConfig+0x364>
 800ad2a:	4b16      	ldr	r3, [pc, #88]	; (800ad84 <UART_SetConfig+0x338>)
 800ad2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad2e:	f003 0307 	and.w	r3, r3, #7
 800ad32:	2b05      	cmp	r3, #5
 800ad34:	d838      	bhi.n	800ada8 <UART_SetConfig+0x35c>
 800ad36:	a201      	add	r2, pc, #4	; (adr r2, 800ad3c <UART_SetConfig+0x2f0>)
 800ad38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3c:	0800ad55 	.word	0x0800ad55
 800ad40:	0800ad5d 	.word	0x0800ad5d
 800ad44:	0800ad65 	.word	0x0800ad65
 800ad48:	0800ad6d 	.word	0x0800ad6d
 800ad4c:	0800ad99 	.word	0x0800ad99
 800ad50:	0800ada1 	.word	0x0800ada1
 800ad54:	2300      	movs	r3, #0
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad5a:	e24e      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ad5c:	2304      	movs	r3, #4
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad62:	e24a      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ad64:	2308      	movs	r3, #8
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad6a:	e246      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ad6c:	2310      	movs	r3, #16
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad72:	e242      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ad74:	cfff69f3 	.word	0xcfff69f3
 800ad78:	58000c00 	.word	0x58000c00
 800ad7c:	11fff4ff 	.word	0x11fff4ff
 800ad80:	40011000 	.word	0x40011000
 800ad84:	58024400 	.word	0x58024400
 800ad88:	40004400 	.word	0x40004400
 800ad8c:	40004800 	.word	0x40004800
 800ad90:	40004c00 	.word	0x40004c00
 800ad94:	40005000 	.word	0x40005000
 800ad98:	2320      	movs	r3, #32
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad9e:	e22c      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ada0:	2340      	movs	r3, #64	; 0x40
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ada6:	e228      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ada8:	2380      	movs	r3, #128	; 0x80
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adae:	e224      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4ab1      	ldr	r2, [pc, #708]	; (800b07c <UART_SetConfig+0x630>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d176      	bne.n	800aea8 <UART_SetConfig+0x45c>
 800adba:	4bb1      	ldr	r3, [pc, #708]	; (800b080 <UART_SetConfig+0x634>)
 800adbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adc2:	2b28      	cmp	r3, #40	; 0x28
 800adc4:	d86c      	bhi.n	800aea0 <UART_SetConfig+0x454>
 800adc6:	a201      	add	r2, pc, #4	; (adr r2, 800adcc <UART_SetConfig+0x380>)
 800adc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adcc:	0800ae71 	.word	0x0800ae71
 800add0:	0800aea1 	.word	0x0800aea1
 800add4:	0800aea1 	.word	0x0800aea1
 800add8:	0800aea1 	.word	0x0800aea1
 800addc:	0800aea1 	.word	0x0800aea1
 800ade0:	0800aea1 	.word	0x0800aea1
 800ade4:	0800aea1 	.word	0x0800aea1
 800ade8:	0800aea1 	.word	0x0800aea1
 800adec:	0800ae79 	.word	0x0800ae79
 800adf0:	0800aea1 	.word	0x0800aea1
 800adf4:	0800aea1 	.word	0x0800aea1
 800adf8:	0800aea1 	.word	0x0800aea1
 800adfc:	0800aea1 	.word	0x0800aea1
 800ae00:	0800aea1 	.word	0x0800aea1
 800ae04:	0800aea1 	.word	0x0800aea1
 800ae08:	0800aea1 	.word	0x0800aea1
 800ae0c:	0800ae81 	.word	0x0800ae81
 800ae10:	0800aea1 	.word	0x0800aea1
 800ae14:	0800aea1 	.word	0x0800aea1
 800ae18:	0800aea1 	.word	0x0800aea1
 800ae1c:	0800aea1 	.word	0x0800aea1
 800ae20:	0800aea1 	.word	0x0800aea1
 800ae24:	0800aea1 	.word	0x0800aea1
 800ae28:	0800aea1 	.word	0x0800aea1
 800ae2c:	0800ae89 	.word	0x0800ae89
 800ae30:	0800aea1 	.word	0x0800aea1
 800ae34:	0800aea1 	.word	0x0800aea1
 800ae38:	0800aea1 	.word	0x0800aea1
 800ae3c:	0800aea1 	.word	0x0800aea1
 800ae40:	0800aea1 	.word	0x0800aea1
 800ae44:	0800aea1 	.word	0x0800aea1
 800ae48:	0800aea1 	.word	0x0800aea1
 800ae4c:	0800ae91 	.word	0x0800ae91
 800ae50:	0800aea1 	.word	0x0800aea1
 800ae54:	0800aea1 	.word	0x0800aea1
 800ae58:	0800aea1 	.word	0x0800aea1
 800ae5c:	0800aea1 	.word	0x0800aea1
 800ae60:	0800aea1 	.word	0x0800aea1
 800ae64:	0800aea1 	.word	0x0800aea1
 800ae68:	0800aea1 	.word	0x0800aea1
 800ae6c:	0800ae99 	.word	0x0800ae99
 800ae70:	2301      	movs	r3, #1
 800ae72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae76:	e1c0      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ae78:	2304      	movs	r3, #4
 800ae7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae7e:	e1bc      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ae80:	2308      	movs	r3, #8
 800ae82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae86:	e1b8      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ae88:	2310      	movs	r3, #16
 800ae8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae8e:	e1b4      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ae90:	2320      	movs	r3, #32
 800ae92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae96:	e1b0      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800ae98:	2340      	movs	r3, #64	; 0x40
 800ae9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae9e:	e1ac      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800aea0:	2380      	movs	r3, #128	; 0x80
 800aea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aea6:	e1a8      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a75      	ldr	r2, [pc, #468]	; (800b084 <UART_SetConfig+0x638>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d130      	bne.n	800af14 <UART_SetConfig+0x4c8>
 800aeb2:	4b73      	ldr	r3, [pc, #460]	; (800b080 <UART_SetConfig+0x634>)
 800aeb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb6:	f003 0307 	and.w	r3, r3, #7
 800aeba:	2b05      	cmp	r3, #5
 800aebc:	d826      	bhi.n	800af0c <UART_SetConfig+0x4c0>
 800aebe:	a201      	add	r2, pc, #4	; (adr r2, 800aec4 <UART_SetConfig+0x478>)
 800aec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec4:	0800aedd 	.word	0x0800aedd
 800aec8:	0800aee5 	.word	0x0800aee5
 800aecc:	0800aeed 	.word	0x0800aeed
 800aed0:	0800aef5 	.word	0x0800aef5
 800aed4:	0800aefd 	.word	0x0800aefd
 800aed8:	0800af05 	.word	0x0800af05
 800aedc:	2300      	movs	r3, #0
 800aede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aee2:	e18a      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800aee4:	2304      	movs	r3, #4
 800aee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeea:	e186      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800aeec:	2308      	movs	r3, #8
 800aeee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aef2:	e182      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800aef4:	2310      	movs	r3, #16
 800aef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aefa:	e17e      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800aefc:	2320      	movs	r3, #32
 800aefe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af02:	e17a      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800af04:	2340      	movs	r3, #64	; 0x40
 800af06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af0a:	e176      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800af0c:	2380      	movs	r3, #128	; 0x80
 800af0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af12:	e172      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a5b      	ldr	r2, [pc, #364]	; (800b088 <UART_SetConfig+0x63c>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d130      	bne.n	800af80 <UART_SetConfig+0x534>
 800af1e:	4b58      	ldr	r3, [pc, #352]	; (800b080 <UART_SetConfig+0x634>)
 800af20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af22:	f003 0307 	and.w	r3, r3, #7
 800af26:	2b05      	cmp	r3, #5
 800af28:	d826      	bhi.n	800af78 <UART_SetConfig+0x52c>
 800af2a:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <UART_SetConfig+0x4e4>)
 800af2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af30:	0800af49 	.word	0x0800af49
 800af34:	0800af51 	.word	0x0800af51
 800af38:	0800af59 	.word	0x0800af59
 800af3c:	0800af61 	.word	0x0800af61
 800af40:	0800af69 	.word	0x0800af69
 800af44:	0800af71 	.word	0x0800af71
 800af48:	2300      	movs	r3, #0
 800af4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af4e:	e154      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800af50:	2304      	movs	r3, #4
 800af52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af56:	e150      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800af58:	2308      	movs	r3, #8
 800af5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af5e:	e14c      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800af60:	2310      	movs	r3, #16
 800af62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af66:	e148      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800af68:	2320      	movs	r3, #32
 800af6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af6e:	e144      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800af70:	2340      	movs	r3, #64	; 0x40
 800af72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af76:	e140      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800af78:	2380      	movs	r3, #128	; 0x80
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af7e:	e13c      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a41      	ldr	r2, [pc, #260]	; (800b08c <UART_SetConfig+0x640>)
 800af86:	4293      	cmp	r3, r2
 800af88:	f040 8082 	bne.w	800b090 <UART_SetConfig+0x644>
 800af8c:	4b3c      	ldr	r3, [pc, #240]	; (800b080 <UART_SetConfig+0x634>)
 800af8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af94:	2b28      	cmp	r3, #40	; 0x28
 800af96:	d86d      	bhi.n	800b074 <UART_SetConfig+0x628>
 800af98:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <UART_SetConfig+0x554>)
 800af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800b045 	.word	0x0800b045
 800afa4:	0800b075 	.word	0x0800b075
 800afa8:	0800b075 	.word	0x0800b075
 800afac:	0800b075 	.word	0x0800b075
 800afb0:	0800b075 	.word	0x0800b075
 800afb4:	0800b075 	.word	0x0800b075
 800afb8:	0800b075 	.word	0x0800b075
 800afbc:	0800b075 	.word	0x0800b075
 800afc0:	0800b04d 	.word	0x0800b04d
 800afc4:	0800b075 	.word	0x0800b075
 800afc8:	0800b075 	.word	0x0800b075
 800afcc:	0800b075 	.word	0x0800b075
 800afd0:	0800b075 	.word	0x0800b075
 800afd4:	0800b075 	.word	0x0800b075
 800afd8:	0800b075 	.word	0x0800b075
 800afdc:	0800b075 	.word	0x0800b075
 800afe0:	0800b055 	.word	0x0800b055
 800afe4:	0800b075 	.word	0x0800b075
 800afe8:	0800b075 	.word	0x0800b075
 800afec:	0800b075 	.word	0x0800b075
 800aff0:	0800b075 	.word	0x0800b075
 800aff4:	0800b075 	.word	0x0800b075
 800aff8:	0800b075 	.word	0x0800b075
 800affc:	0800b075 	.word	0x0800b075
 800b000:	0800b05d 	.word	0x0800b05d
 800b004:	0800b075 	.word	0x0800b075
 800b008:	0800b075 	.word	0x0800b075
 800b00c:	0800b075 	.word	0x0800b075
 800b010:	0800b075 	.word	0x0800b075
 800b014:	0800b075 	.word	0x0800b075
 800b018:	0800b075 	.word	0x0800b075
 800b01c:	0800b075 	.word	0x0800b075
 800b020:	0800b065 	.word	0x0800b065
 800b024:	0800b075 	.word	0x0800b075
 800b028:	0800b075 	.word	0x0800b075
 800b02c:	0800b075 	.word	0x0800b075
 800b030:	0800b075 	.word	0x0800b075
 800b034:	0800b075 	.word	0x0800b075
 800b038:	0800b075 	.word	0x0800b075
 800b03c:	0800b075 	.word	0x0800b075
 800b040:	0800b06d 	.word	0x0800b06d
 800b044:	2301      	movs	r3, #1
 800b046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b04a:	e0d6      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b04c:	2304      	movs	r3, #4
 800b04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b052:	e0d2      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b054:	2308      	movs	r3, #8
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b05a:	e0ce      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b05c:	2310      	movs	r3, #16
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b062:	e0ca      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b064:	2320      	movs	r3, #32
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06a:	e0c6      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b06c:	2340      	movs	r3, #64	; 0x40
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b072:	e0c2      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b074:	2380      	movs	r3, #128	; 0x80
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07a:	e0be      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b07c:	40011400 	.word	0x40011400
 800b080:	58024400 	.word	0x58024400
 800b084:	40007800 	.word	0x40007800
 800b088:	40007c00 	.word	0x40007c00
 800b08c:	40011800 	.word	0x40011800
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4aad      	ldr	r2, [pc, #692]	; (800b34c <UART_SetConfig+0x900>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d176      	bne.n	800b188 <UART_SetConfig+0x73c>
 800b09a:	4bad      	ldr	r3, [pc, #692]	; (800b350 <UART_SetConfig+0x904>)
 800b09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b09e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0a2:	2b28      	cmp	r3, #40	; 0x28
 800b0a4:	d86c      	bhi.n	800b180 <UART_SetConfig+0x734>
 800b0a6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ac <UART_SetConfig+0x660>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b151 	.word	0x0800b151
 800b0b0:	0800b181 	.word	0x0800b181
 800b0b4:	0800b181 	.word	0x0800b181
 800b0b8:	0800b181 	.word	0x0800b181
 800b0bc:	0800b181 	.word	0x0800b181
 800b0c0:	0800b181 	.word	0x0800b181
 800b0c4:	0800b181 	.word	0x0800b181
 800b0c8:	0800b181 	.word	0x0800b181
 800b0cc:	0800b159 	.word	0x0800b159
 800b0d0:	0800b181 	.word	0x0800b181
 800b0d4:	0800b181 	.word	0x0800b181
 800b0d8:	0800b181 	.word	0x0800b181
 800b0dc:	0800b181 	.word	0x0800b181
 800b0e0:	0800b181 	.word	0x0800b181
 800b0e4:	0800b181 	.word	0x0800b181
 800b0e8:	0800b181 	.word	0x0800b181
 800b0ec:	0800b161 	.word	0x0800b161
 800b0f0:	0800b181 	.word	0x0800b181
 800b0f4:	0800b181 	.word	0x0800b181
 800b0f8:	0800b181 	.word	0x0800b181
 800b0fc:	0800b181 	.word	0x0800b181
 800b100:	0800b181 	.word	0x0800b181
 800b104:	0800b181 	.word	0x0800b181
 800b108:	0800b181 	.word	0x0800b181
 800b10c:	0800b169 	.word	0x0800b169
 800b110:	0800b181 	.word	0x0800b181
 800b114:	0800b181 	.word	0x0800b181
 800b118:	0800b181 	.word	0x0800b181
 800b11c:	0800b181 	.word	0x0800b181
 800b120:	0800b181 	.word	0x0800b181
 800b124:	0800b181 	.word	0x0800b181
 800b128:	0800b181 	.word	0x0800b181
 800b12c:	0800b171 	.word	0x0800b171
 800b130:	0800b181 	.word	0x0800b181
 800b134:	0800b181 	.word	0x0800b181
 800b138:	0800b181 	.word	0x0800b181
 800b13c:	0800b181 	.word	0x0800b181
 800b140:	0800b181 	.word	0x0800b181
 800b144:	0800b181 	.word	0x0800b181
 800b148:	0800b181 	.word	0x0800b181
 800b14c:	0800b179 	.word	0x0800b179
 800b150:	2301      	movs	r3, #1
 800b152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b156:	e050      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b158:	2304      	movs	r3, #4
 800b15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b15e:	e04c      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b160:	2308      	movs	r3, #8
 800b162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b166:	e048      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b168:	2310      	movs	r3, #16
 800b16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b16e:	e044      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b170:	2320      	movs	r3, #32
 800b172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b176:	e040      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b178:	2340      	movs	r3, #64	; 0x40
 800b17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b17e:	e03c      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b180:	2380      	movs	r3, #128	; 0x80
 800b182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b186:	e038      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a71      	ldr	r2, [pc, #452]	; (800b354 <UART_SetConfig+0x908>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d130      	bne.n	800b1f4 <UART_SetConfig+0x7a8>
 800b192:	4b6f      	ldr	r3, [pc, #444]	; (800b350 <UART_SetConfig+0x904>)
 800b194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	2b05      	cmp	r3, #5
 800b19c:	d826      	bhi.n	800b1ec <UART_SetConfig+0x7a0>
 800b19e:	a201      	add	r2, pc, #4	; (adr r2, 800b1a4 <UART_SetConfig+0x758>)
 800b1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a4:	0800b1bd 	.word	0x0800b1bd
 800b1a8:	0800b1c5 	.word	0x0800b1c5
 800b1ac:	0800b1cd 	.word	0x0800b1cd
 800b1b0:	0800b1d5 	.word	0x0800b1d5
 800b1b4:	0800b1dd 	.word	0x0800b1dd
 800b1b8:	0800b1e5 	.word	0x0800b1e5
 800b1bc:	2302      	movs	r3, #2
 800b1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1c2:	e01a      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b1c4:	2304      	movs	r3, #4
 800b1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ca:	e016      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b1cc:	2308      	movs	r3, #8
 800b1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1d2:	e012      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1da:	e00e      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b1dc:	2320      	movs	r3, #32
 800b1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1e2:	e00a      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b1e4:	2340      	movs	r3, #64	; 0x40
 800b1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ea:	e006      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b1ec:	2380      	movs	r3, #128	; 0x80
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1f2:	e002      	b.n	800b1fa <UART_SetConfig+0x7ae>
 800b1f4:	2380      	movs	r3, #128	; 0x80
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a55      	ldr	r2, [pc, #340]	; (800b354 <UART_SetConfig+0x908>)
 800b200:	4293      	cmp	r3, r2
 800b202:	f040 80f8 	bne.w	800b3f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b206:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	dc46      	bgt.n	800b29c <UART_SetConfig+0x850>
 800b20e:	2b02      	cmp	r3, #2
 800b210:	db75      	blt.n	800b2fe <UART_SetConfig+0x8b2>
 800b212:	3b02      	subs	r3, #2
 800b214:	2b1e      	cmp	r3, #30
 800b216:	d872      	bhi.n	800b2fe <UART_SetConfig+0x8b2>
 800b218:	a201      	add	r2, pc, #4	; (adr r2, 800b220 <UART_SetConfig+0x7d4>)
 800b21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21e:	bf00      	nop
 800b220:	0800b2a3 	.word	0x0800b2a3
 800b224:	0800b2ff 	.word	0x0800b2ff
 800b228:	0800b2ab 	.word	0x0800b2ab
 800b22c:	0800b2ff 	.word	0x0800b2ff
 800b230:	0800b2ff 	.word	0x0800b2ff
 800b234:	0800b2ff 	.word	0x0800b2ff
 800b238:	0800b2bb 	.word	0x0800b2bb
 800b23c:	0800b2ff 	.word	0x0800b2ff
 800b240:	0800b2ff 	.word	0x0800b2ff
 800b244:	0800b2ff 	.word	0x0800b2ff
 800b248:	0800b2ff 	.word	0x0800b2ff
 800b24c:	0800b2ff 	.word	0x0800b2ff
 800b250:	0800b2ff 	.word	0x0800b2ff
 800b254:	0800b2ff 	.word	0x0800b2ff
 800b258:	0800b2cb 	.word	0x0800b2cb
 800b25c:	0800b2ff 	.word	0x0800b2ff
 800b260:	0800b2ff 	.word	0x0800b2ff
 800b264:	0800b2ff 	.word	0x0800b2ff
 800b268:	0800b2ff 	.word	0x0800b2ff
 800b26c:	0800b2ff 	.word	0x0800b2ff
 800b270:	0800b2ff 	.word	0x0800b2ff
 800b274:	0800b2ff 	.word	0x0800b2ff
 800b278:	0800b2ff 	.word	0x0800b2ff
 800b27c:	0800b2ff 	.word	0x0800b2ff
 800b280:	0800b2ff 	.word	0x0800b2ff
 800b284:	0800b2ff 	.word	0x0800b2ff
 800b288:	0800b2ff 	.word	0x0800b2ff
 800b28c:	0800b2ff 	.word	0x0800b2ff
 800b290:	0800b2ff 	.word	0x0800b2ff
 800b294:	0800b2ff 	.word	0x0800b2ff
 800b298:	0800b2f1 	.word	0x0800b2f1
 800b29c:	2b40      	cmp	r3, #64	; 0x40
 800b29e:	d02a      	beq.n	800b2f6 <UART_SetConfig+0x8aa>
 800b2a0:	e02d      	b.n	800b2fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b2a2:	f7fc fc59 	bl	8007b58 <HAL_RCCEx_GetD3PCLK1Freq>
 800b2a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b2a8:	e02f      	b.n	800b30a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fc fc68 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2b8:	e027      	b.n	800b30a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2ba:	f107 0318 	add.w	r3, r7, #24
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fc fdb4 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c8:	e01f      	b.n	800b30a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2ca:	4b21      	ldr	r3, [pc, #132]	; (800b350 <UART_SetConfig+0x904>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0320 	and.w	r3, r3, #32
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d009      	beq.n	800b2ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2d6:	4b1e      	ldr	r3, [pc, #120]	; (800b350 <UART_SetConfig+0x904>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	08db      	lsrs	r3, r3, #3
 800b2dc:	f003 0303 	and.w	r3, r3, #3
 800b2e0:	4a1d      	ldr	r2, [pc, #116]	; (800b358 <UART_SetConfig+0x90c>)
 800b2e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2e8:	e00f      	b.n	800b30a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b2ea:	4b1b      	ldr	r3, [pc, #108]	; (800b358 <UART_SetConfig+0x90c>)
 800b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ee:	e00c      	b.n	800b30a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2f0:	4b1a      	ldr	r3, [pc, #104]	; (800b35c <UART_SetConfig+0x910>)
 800b2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2f4:	e009      	b.n	800b30a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2fc:	e005      	b.n	800b30a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b2fe:	2300      	movs	r3, #0
 800b300:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b308:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 81ee 	beq.w	800b6ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	4a12      	ldr	r2, [pc, #72]	; (800b360 <UART_SetConfig+0x914>)
 800b318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b31c:	461a      	mov	r2, r3
 800b31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b320:	fbb3 f3f2 	udiv	r3, r3, r2
 800b324:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	4613      	mov	r3, r2
 800b32c:	005b      	lsls	r3, r3, #1
 800b32e:	4413      	add	r3, r2
 800b330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b332:	429a      	cmp	r2, r3
 800b334:	d305      	bcc.n	800b342 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b33e:	429a      	cmp	r2, r3
 800b340:	d910      	bls.n	800b364 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b348:	e1d1      	b.n	800b6ee <UART_SetConfig+0xca2>
 800b34a:	bf00      	nop
 800b34c:	40011c00 	.word	0x40011c00
 800b350:	58024400 	.word	0x58024400
 800b354:	58000c00 	.word	0x58000c00
 800b358:	03d09000 	.word	0x03d09000
 800b35c:	003d0900 	.word	0x003d0900
 800b360:	0800d7b4 	.word	0x0800d7b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b366:	2200      	movs	r2, #0
 800b368:	60bb      	str	r3, [r7, #8]
 800b36a:	60fa      	str	r2, [r7, #12]
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b370:	4ac0      	ldr	r2, [pc, #768]	; (800b674 <UART_SetConfig+0xc28>)
 800b372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b376:	b29b      	uxth	r3, r3
 800b378:	2200      	movs	r2, #0
 800b37a:	603b      	str	r3, [r7, #0]
 800b37c:	607a      	str	r2, [r7, #4]
 800b37e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b382:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b386:	f7f4 ffc1 	bl	800030c <__aeabi_uldivmod>
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	4610      	mov	r0, r2
 800b390:	4619      	mov	r1, r3
 800b392:	f04f 0200 	mov.w	r2, #0
 800b396:	f04f 0300 	mov.w	r3, #0
 800b39a:	020b      	lsls	r3, r1, #8
 800b39c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b3a0:	0202      	lsls	r2, r0, #8
 800b3a2:	6979      	ldr	r1, [r7, #20]
 800b3a4:	6849      	ldr	r1, [r1, #4]
 800b3a6:	0849      	lsrs	r1, r1, #1
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	4605      	mov	r5, r0
 800b3ae:	eb12 0804 	adds.w	r8, r2, r4
 800b3b2:	eb43 0905 	adc.w	r9, r3, r5
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	469a      	mov	sl, r3
 800b3be:	4693      	mov	fp, r2
 800b3c0:	4652      	mov	r2, sl
 800b3c2:	465b      	mov	r3, fp
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	f7f4 ffa0 	bl	800030c <__aeabi_uldivmod>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3da:	d308      	bcc.n	800b3ee <UART_SetConfig+0x9a2>
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3e2:	d204      	bcs.n	800b3ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3ea:	60da      	str	r2, [r3, #12]
 800b3ec:	e17f      	b.n	800b6ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b3f4:	e17b      	b.n	800b6ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	69db      	ldr	r3, [r3, #28]
 800b3fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3fe:	f040 80bd 	bne.w	800b57c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b402:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b406:	2b20      	cmp	r3, #32
 800b408:	dc48      	bgt.n	800b49c <UART_SetConfig+0xa50>
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	db7b      	blt.n	800b506 <UART_SetConfig+0xaba>
 800b40e:	2b20      	cmp	r3, #32
 800b410:	d879      	bhi.n	800b506 <UART_SetConfig+0xaba>
 800b412:	a201      	add	r2, pc, #4	; (adr r2, 800b418 <UART_SetConfig+0x9cc>)
 800b414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b418:	0800b4a3 	.word	0x0800b4a3
 800b41c:	0800b4ab 	.word	0x0800b4ab
 800b420:	0800b507 	.word	0x0800b507
 800b424:	0800b507 	.word	0x0800b507
 800b428:	0800b4b3 	.word	0x0800b4b3
 800b42c:	0800b507 	.word	0x0800b507
 800b430:	0800b507 	.word	0x0800b507
 800b434:	0800b507 	.word	0x0800b507
 800b438:	0800b4c3 	.word	0x0800b4c3
 800b43c:	0800b507 	.word	0x0800b507
 800b440:	0800b507 	.word	0x0800b507
 800b444:	0800b507 	.word	0x0800b507
 800b448:	0800b507 	.word	0x0800b507
 800b44c:	0800b507 	.word	0x0800b507
 800b450:	0800b507 	.word	0x0800b507
 800b454:	0800b507 	.word	0x0800b507
 800b458:	0800b4d3 	.word	0x0800b4d3
 800b45c:	0800b507 	.word	0x0800b507
 800b460:	0800b507 	.word	0x0800b507
 800b464:	0800b507 	.word	0x0800b507
 800b468:	0800b507 	.word	0x0800b507
 800b46c:	0800b507 	.word	0x0800b507
 800b470:	0800b507 	.word	0x0800b507
 800b474:	0800b507 	.word	0x0800b507
 800b478:	0800b507 	.word	0x0800b507
 800b47c:	0800b507 	.word	0x0800b507
 800b480:	0800b507 	.word	0x0800b507
 800b484:	0800b507 	.word	0x0800b507
 800b488:	0800b507 	.word	0x0800b507
 800b48c:	0800b507 	.word	0x0800b507
 800b490:	0800b507 	.word	0x0800b507
 800b494:	0800b507 	.word	0x0800b507
 800b498:	0800b4f9 	.word	0x0800b4f9
 800b49c:	2b40      	cmp	r3, #64	; 0x40
 800b49e:	d02e      	beq.n	800b4fe <UART_SetConfig+0xab2>
 800b4a0:	e031      	b.n	800b506 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4a2:	f7fa fcbb 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 800b4a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b4a8:	e033      	b.n	800b512 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4aa:	f7fa fccd 	bl	8005e48 <HAL_RCC_GetPCLK2Freq>
 800b4ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b4b0:	e02f      	b.n	800b512 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fc fb64 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4c0:	e027      	b.n	800b512 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4c2:	f107 0318 	add.w	r3, r7, #24
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fc fcb0 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4d0:	e01f      	b.n	800b512 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4d2:	4b69      	ldr	r3, [pc, #420]	; (800b678 <UART_SetConfig+0xc2c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 0320 	and.w	r3, r3, #32
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d009      	beq.n	800b4f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4de:	4b66      	ldr	r3, [pc, #408]	; (800b678 <UART_SetConfig+0xc2c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	08db      	lsrs	r3, r3, #3
 800b4e4:	f003 0303 	and.w	r3, r3, #3
 800b4e8:	4a64      	ldr	r2, [pc, #400]	; (800b67c <UART_SetConfig+0xc30>)
 800b4ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4f0:	e00f      	b.n	800b512 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b4f2:	4b62      	ldr	r3, [pc, #392]	; (800b67c <UART_SetConfig+0xc30>)
 800b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4f6:	e00c      	b.n	800b512 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4f8:	4b61      	ldr	r3, [pc, #388]	; (800b680 <UART_SetConfig+0xc34>)
 800b4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4fc:	e009      	b.n	800b512 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b504:	e005      	b.n	800b512 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b506:	2300      	movs	r3, #0
 800b508:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b510:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80ea 	beq.w	800b6ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	4a55      	ldr	r2, [pc, #340]	; (800b674 <UART_SetConfig+0xc28>)
 800b520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b524:	461a      	mov	r2, r3
 800b526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b528:	fbb3 f3f2 	udiv	r3, r3, r2
 800b52c:	005a      	lsls	r2, r3, #1
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	085b      	lsrs	r3, r3, #1
 800b534:	441a      	add	r2, r3
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b53e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b542:	2b0f      	cmp	r3, #15
 800b544:	d916      	bls.n	800b574 <UART_SetConfig+0xb28>
 800b546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b54c:	d212      	bcs.n	800b574 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b550:	b29b      	uxth	r3, r3
 800b552:	f023 030f 	bic.w	r3, r3, #15
 800b556:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	085b      	lsrs	r3, r3, #1
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	f003 0307 	and.w	r3, r3, #7
 800b562:	b29a      	uxth	r2, r3
 800b564:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b566:	4313      	orrs	r3, r2
 800b568:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b570:	60da      	str	r2, [r3, #12]
 800b572:	e0bc      	b.n	800b6ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b57a:	e0b8      	b.n	800b6ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b57c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b580:	2b20      	cmp	r3, #32
 800b582:	dc4b      	bgt.n	800b61c <UART_SetConfig+0xbd0>
 800b584:	2b00      	cmp	r3, #0
 800b586:	f2c0 8087 	blt.w	800b698 <UART_SetConfig+0xc4c>
 800b58a:	2b20      	cmp	r3, #32
 800b58c:	f200 8084 	bhi.w	800b698 <UART_SetConfig+0xc4c>
 800b590:	a201      	add	r2, pc, #4	; (adr r2, 800b598 <UART_SetConfig+0xb4c>)
 800b592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b596:	bf00      	nop
 800b598:	0800b623 	.word	0x0800b623
 800b59c:	0800b62b 	.word	0x0800b62b
 800b5a0:	0800b699 	.word	0x0800b699
 800b5a4:	0800b699 	.word	0x0800b699
 800b5a8:	0800b633 	.word	0x0800b633
 800b5ac:	0800b699 	.word	0x0800b699
 800b5b0:	0800b699 	.word	0x0800b699
 800b5b4:	0800b699 	.word	0x0800b699
 800b5b8:	0800b643 	.word	0x0800b643
 800b5bc:	0800b699 	.word	0x0800b699
 800b5c0:	0800b699 	.word	0x0800b699
 800b5c4:	0800b699 	.word	0x0800b699
 800b5c8:	0800b699 	.word	0x0800b699
 800b5cc:	0800b699 	.word	0x0800b699
 800b5d0:	0800b699 	.word	0x0800b699
 800b5d4:	0800b699 	.word	0x0800b699
 800b5d8:	0800b653 	.word	0x0800b653
 800b5dc:	0800b699 	.word	0x0800b699
 800b5e0:	0800b699 	.word	0x0800b699
 800b5e4:	0800b699 	.word	0x0800b699
 800b5e8:	0800b699 	.word	0x0800b699
 800b5ec:	0800b699 	.word	0x0800b699
 800b5f0:	0800b699 	.word	0x0800b699
 800b5f4:	0800b699 	.word	0x0800b699
 800b5f8:	0800b699 	.word	0x0800b699
 800b5fc:	0800b699 	.word	0x0800b699
 800b600:	0800b699 	.word	0x0800b699
 800b604:	0800b699 	.word	0x0800b699
 800b608:	0800b699 	.word	0x0800b699
 800b60c:	0800b699 	.word	0x0800b699
 800b610:	0800b699 	.word	0x0800b699
 800b614:	0800b699 	.word	0x0800b699
 800b618:	0800b68b 	.word	0x0800b68b
 800b61c:	2b40      	cmp	r3, #64	; 0x40
 800b61e:	d037      	beq.n	800b690 <UART_SetConfig+0xc44>
 800b620:	e03a      	b.n	800b698 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b622:	f7fa fbfb 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 800b626:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b628:	e03c      	b.n	800b6a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b62a:	f7fa fc0d 	bl	8005e48 <HAL_RCC_GetPCLK2Freq>
 800b62e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b630:	e038      	b.n	800b6a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b636:	4618      	mov	r0, r3
 800b638:	f7fc faa4 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b640:	e030      	b.n	800b6a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b642:	f107 0318 	add.w	r3, r7, #24
 800b646:	4618      	mov	r0, r3
 800b648:	f7fc fbf0 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b650:	e028      	b.n	800b6a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b652:	4b09      	ldr	r3, [pc, #36]	; (800b678 <UART_SetConfig+0xc2c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 0320 	and.w	r3, r3, #32
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d012      	beq.n	800b684 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b65e:	4b06      	ldr	r3, [pc, #24]	; (800b678 <UART_SetConfig+0xc2c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	08db      	lsrs	r3, r3, #3
 800b664:	f003 0303 	and.w	r3, r3, #3
 800b668:	4a04      	ldr	r2, [pc, #16]	; (800b67c <UART_SetConfig+0xc30>)
 800b66a:	fa22 f303 	lsr.w	r3, r2, r3
 800b66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b670:	e018      	b.n	800b6a4 <UART_SetConfig+0xc58>
 800b672:	bf00      	nop
 800b674:	0800d7b4 	.word	0x0800d7b4
 800b678:	58024400 	.word	0x58024400
 800b67c:	03d09000 	.word	0x03d09000
 800b680:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b684:	4b24      	ldr	r3, [pc, #144]	; (800b718 <UART_SetConfig+0xccc>)
 800b686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b688:	e00c      	b.n	800b6a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b68a:	4b24      	ldr	r3, [pc, #144]	; (800b71c <UART_SetConfig+0xcd0>)
 800b68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b68e:	e009      	b.n	800b6a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b696:	e005      	b.n	800b6a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b6a2:	bf00      	nop
    }

    if (pclk != 0U)
 800b6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d021      	beq.n	800b6ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ae:	4a1c      	ldr	r2, [pc, #112]	; (800b720 <UART_SetConfig+0xcd4>)
 800b6b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	085b      	lsrs	r3, r3, #1
 800b6c2:	441a      	add	r2, r3
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6cc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d0:	2b0f      	cmp	r3, #15
 800b6d2:	d909      	bls.n	800b6e8 <UART_SetConfig+0xc9c>
 800b6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6da:	d205      	bcs.n	800b6e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	60da      	str	r2, [r3, #12]
 800b6e6:	e002      	b.n	800b6ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2200      	movs	r2, #0
 800b702:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2200      	movs	r2, #0
 800b708:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b70a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3748      	adds	r7, #72	; 0x48
 800b712:	46bd      	mov	sp, r7
 800b714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b718:	03d09000 	.word	0x03d09000
 800b71c:	003d0900 	.word	0x003d0900
 800b720:	0800d7b4 	.word	0x0800d7b4

0800b724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b730:	f003 0308 	and.w	r3, r3, #8
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00a      	beq.n	800b74e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00a      	beq.n	800b770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	430a      	orrs	r2, r1
 800b76e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b774:	f003 0302 	and.w	r3, r3, #2
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00a      	beq.n	800b792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	430a      	orrs	r2, r1
 800b790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b796:	f003 0304 	and.w	r3, r3, #4
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00a      	beq.n	800b7b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	430a      	orrs	r2, r1
 800b7b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b8:	f003 0310 	and.w	r3, r3, #16
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00a      	beq.n	800b7d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	430a      	orrs	r2, r1
 800b7d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7da:	f003 0320 	and.w	r3, r3, #32
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00a      	beq.n	800b7f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	430a      	orrs	r2, r1
 800b7f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b800:	2b00      	cmp	r3, #0
 800b802:	d01a      	beq.n	800b83a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	430a      	orrs	r2, r1
 800b818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b822:	d10a      	bne.n	800b83a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	430a      	orrs	r2, r1
 800b838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	430a      	orrs	r2, r1
 800b85a:	605a      	str	r2, [r3, #4]
  }
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b098      	sub	sp, #96	; 0x60
 800b86c:	af02      	add	r7, sp, #8
 800b86e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b878:	f7f7 fb66 	bl	8002f48 <HAL_GetTick>
 800b87c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 0308 	and.w	r3, r3, #8
 800b888:	2b08      	cmp	r3, #8
 800b88a:	d12f      	bne.n	800b8ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b88c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b894:	2200      	movs	r2, #0
 800b896:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f88e 	bl	800b9bc <UART_WaitOnFlagUntilTimeout>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d022      	beq.n	800b8ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	e853 3f00 	ldrex	r3, [r3]
 800b8b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8ba:	653b      	str	r3, [r7, #80]	; 0x50
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c4:	647b      	str	r3, [r7, #68]	; 0x44
 800b8c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8cc:	e841 2300 	strex	r3, r2, [r1]
 800b8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1e6      	bne.n	800b8a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2220      	movs	r2, #32
 800b8dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e063      	b.n	800b9b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0304 	and.w	r3, r3, #4
 800b8f6:	2b04      	cmp	r3, #4
 800b8f8:	d149      	bne.n	800b98e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b902:	2200      	movs	r2, #0
 800b904:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f857 	bl	800b9bc <UART_WaitOnFlagUntilTimeout>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d03c      	beq.n	800b98e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	e853 3f00 	ldrex	r3, [r3]
 800b920:	623b      	str	r3, [r7, #32]
   return(result);
 800b922:	6a3b      	ldr	r3, [r7, #32]
 800b924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b932:	633b      	str	r3, [r7, #48]	; 0x30
 800b934:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b93a:	e841 2300 	strex	r3, r2, [r1]
 800b93e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1e6      	bne.n	800b914 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3308      	adds	r3, #8
 800b94c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	e853 3f00 	ldrex	r3, [r3]
 800b954:	60fb      	str	r3, [r7, #12]
   return(result);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f023 0301 	bic.w	r3, r3, #1
 800b95c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3308      	adds	r3, #8
 800b964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b966:	61fa      	str	r2, [r7, #28]
 800b968:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96a:	69b9      	ldr	r1, [r7, #24]
 800b96c:	69fa      	ldr	r2, [r7, #28]
 800b96e:	e841 2300 	strex	r3, r2, [r1]
 800b972:	617b      	str	r3, [r7, #20]
   return(result);
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1e5      	bne.n	800b946 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2220      	movs	r2, #32
 800b97e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e012      	b.n	800b9b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2220      	movs	r2, #32
 800b992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2220      	movs	r2, #32
 800b99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3758      	adds	r7, #88	; 0x58
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	603b      	str	r3, [r7, #0]
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9cc:	e04f      	b.n	800ba6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d4:	d04b      	beq.n	800ba6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9d6:	f7f7 fab7 	bl	8002f48 <HAL_GetTick>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	69ba      	ldr	r2, [r7, #24]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d302      	bcc.n	800b9ec <UART_WaitOnFlagUntilTimeout+0x30>
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e04e      	b.n	800ba8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f003 0304 	and.w	r3, r3, #4
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d037      	beq.n	800ba6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2b80      	cmp	r3, #128	; 0x80
 800ba02:	d034      	beq.n	800ba6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2b40      	cmp	r3, #64	; 0x40
 800ba08:	d031      	beq.n	800ba6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69db      	ldr	r3, [r3, #28]
 800ba10:	f003 0308 	and.w	r3, r3, #8
 800ba14:	2b08      	cmp	r3, #8
 800ba16:	d110      	bne.n	800ba3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2208      	movs	r2, #8
 800ba1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 f839 	bl	800ba98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2208      	movs	r2, #8
 800ba2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e029      	b.n	800ba8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	69db      	ldr	r3, [r3, #28]
 800ba40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba48:	d111      	bne.n	800ba6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 f81f 	bl	800ba98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2220      	movs	r2, #32
 800ba5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	e00f      	b.n	800ba8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	69da      	ldr	r2, [r3, #28]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	4013      	ands	r3, r2
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	bf0c      	ite	eq
 800ba7e:	2301      	moveq	r3, #1
 800ba80:	2300      	movne	r3, #0
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	461a      	mov	r2, r3
 800ba86:	79fb      	ldrb	r3, [r7, #7]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d0a0      	beq.n	800b9ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
	...

0800ba98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b095      	sub	sp, #84	; 0x54
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa8:	e853 3f00 	ldrex	r3, [r3]
 800baac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800babe:	643b      	str	r3, [r7, #64]	; 0x40
 800bac0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bac6:	e841 2300 	strex	r3, r2, [r1]
 800baca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1e6      	bne.n	800baa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3308      	adds	r3, #8
 800bad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bae2:	69fa      	ldr	r2, [r7, #28]
 800bae4:	4b1e      	ldr	r3, [pc, #120]	; (800bb60 <UART_EndRxTransfer+0xc8>)
 800bae6:	4013      	ands	r3, r2
 800bae8:	64bb      	str	r3, [r7, #72]	; 0x48
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3308      	adds	r3, #8
 800baf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800baf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800baf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1e5      	bne.n	800bad2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d118      	bne.n	800bb40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	e853 3f00 	ldrex	r3, [r3]
 800bb1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	f023 0310 	bic.w	r3, r3, #16
 800bb22:	647b      	str	r3, [r7, #68]	; 0x44
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	461a      	mov	r2, r3
 800bb2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb2c:	61bb      	str	r3, [r7, #24]
 800bb2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb30:	6979      	ldr	r1, [r7, #20]
 800bb32:	69ba      	ldr	r2, [r7, #24]
 800bb34:	e841 2300 	strex	r3, r2, [r1]
 800bb38:	613b      	str	r3, [r7, #16]
   return(result);
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1e6      	bne.n	800bb0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2220      	movs	r2, #32
 800bb44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bb54:	bf00      	nop
 800bb56:	3754      	adds	r7, #84	; 0x54
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	effffffe 	.word	0xeffffffe

0800bb64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d101      	bne.n	800bb7a <HAL_UARTEx_DisableFifoMode+0x16>
 800bb76:	2302      	movs	r3, #2
 800bb78:	e027      	b.n	800bbca <HAL_UARTEx_DisableFifoMode+0x66>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2224      	movs	r2, #36	; 0x24
 800bb86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f022 0201 	bic.w	r2, r2, #1
 800bba0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bba8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2220      	movs	r2, #32
 800bbbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3714      	adds	r7, #20
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr

0800bbd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b084      	sub	sp, #16
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d101      	bne.n	800bbee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bbea:	2302      	movs	r3, #2
 800bbec:	e02d      	b.n	800bc4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2224      	movs	r2, #36	; 0x24
 800bbfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f022 0201 	bic.w	r2, r2, #1
 800bc14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	683a      	ldr	r2, [r7, #0]
 800bc26:	430a      	orrs	r2, r1
 800bc28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f850 	bl	800bcd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2220      	movs	r2, #32
 800bc3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d101      	bne.n	800bc6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc66:	2302      	movs	r3, #2
 800bc68:	e02d      	b.n	800bcc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2224      	movs	r2, #36	; 0x24
 800bc76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f022 0201 	bic.w	r2, r2, #1
 800bc90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	430a      	orrs	r2, r1
 800bca4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f812 	bl	800bcd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2220      	movs	r2, #32
 800bcb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
	...

0800bcd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d108      	bne.n	800bcf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bcf0:	e031      	b.n	800bd56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bcf2:	2310      	movs	r3, #16
 800bcf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bcf6:	2310      	movs	r3, #16
 800bcf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	0e5b      	lsrs	r3, r3, #25
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	f003 0307 	and.w	r3, r3, #7
 800bd08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	0f5b      	lsrs	r3, r3, #29
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	f003 0307 	and.w	r3, r3, #7
 800bd18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd1a:	7bbb      	ldrb	r3, [r7, #14]
 800bd1c:	7b3a      	ldrb	r2, [r7, #12]
 800bd1e:	4911      	ldr	r1, [pc, #68]	; (800bd64 <UARTEx_SetNbDataToProcess+0x94>)
 800bd20:	5c8a      	ldrb	r2, [r1, r2]
 800bd22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd26:	7b3a      	ldrb	r2, [r7, #12]
 800bd28:	490f      	ldr	r1, [pc, #60]	; (800bd68 <UARTEx_SetNbDataToProcess+0x98>)
 800bd2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
 800bd3a:	7b7a      	ldrb	r2, [r7, #13]
 800bd3c:	4909      	ldr	r1, [pc, #36]	; (800bd64 <UARTEx_SetNbDataToProcess+0x94>)
 800bd3e:	5c8a      	ldrb	r2, [r1, r2]
 800bd40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd44:	7b7a      	ldrb	r2, [r7, #13]
 800bd46:	4908      	ldr	r1, [pc, #32]	; (800bd68 <UARTEx_SetNbDataToProcess+0x98>)
 800bd48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bd56:	bf00      	nop
 800bd58:	3714      	adds	r7, #20
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	0800d7cc 	.word	0x0800d7cc
 800bd68:	0800d7d4 	.word	0x0800d7d4

0800bd6c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e03c      	b.n	800bdf8 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d106      	bne.n	800bd98 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f7f6 fe7e 	bl	8002a94 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f022 0201 	bic.w	r2, r2, #1
 800bdae:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 f85b 	bl	800be6c <USART_SetConfig>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d101      	bne.n	800bdc0 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e01b      	b.n	800bdf8 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	685a      	ldr	r2, [r3, #4]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bdce:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	689a      	ldr	r2, [r3, #8]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdde:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f042 0201 	orr.w	r2, r2, #1
 800bdee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fddd 	bl	800c9b0 <USART_CheckIdleState>
 800bdf6:	4603      	mov	r3, r0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	603b      	str	r3, [r7, #0]
 800be0c:	4613      	mov	r3, r2
 800be0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800be10:	e018      	b.n	800be44 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be18:	d014      	beq.n	800be44 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be1a:	f7f7 f895 	bl	8002f48 <HAL_GetTick>
 800be1e:	4602      	mov	r2, r0
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	69ba      	ldr	r2, [r7, #24]
 800be26:	429a      	cmp	r2, r3
 800be28:	d302      	bcc.n	800be30 <USART_WaitOnFlagUntilTimeout+0x30>
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d109      	bne.n	800be44 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 800be40:	2303      	movs	r3, #3
 800be42:	e00f      	b.n	800be64 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	69da      	ldr	r2, [r3, #28]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	4013      	ands	r3, r2
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	429a      	cmp	r2, r3
 800be52:	bf0c      	ite	eq
 800be54:	2301      	moveq	r3, #1
 800be56:	2300      	movne	r3, #0
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	461a      	mov	r2, r3
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d0d7      	beq.n	800be12 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08e      	sub	sp, #56	; 0x38
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800be74:	2300      	movs	r3, #0
 800be76:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800be7a:	2300      	movs	r3, #0
 800be7c:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	689a      	ldr	r2, [r3, #8]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	431a      	orrs	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	4bc9      	ldr	r3, [pc, #804]	; (800c1c0 <USART_SetConfig+0x354>)
 800be9c:	4013      	ands	r3, r2
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	6812      	ldr	r2, [r2, #0]
 800bea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bea4:	430b      	orrs	r3, r1
 800bea6:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800beac:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a1b      	ldr	r3, [r3, #32]
 800beb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beb4:	4313      	orrs	r3, r2
 800beb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	699a      	ldr	r2, [r3, #24]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	69db      	ldr	r3, [r3, #28]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bec4:	4313      	orrs	r3, r2
 800bec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bece:	4313      	orrs	r3, r2
 800bed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	4bba      	ldr	r3, [pc, #744]	; (800c1c4 <USART_SetConfig+0x358>)
 800beda:	4013      	ands	r3, r2
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	6812      	ldr	r2, [r2, #0]
 800bee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bee2:	430b      	orrs	r3, r1
 800bee4:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	f023 010f 	bic.w	r1, r3, #15
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	430a      	orrs	r2, r1
 800befa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4ab1      	ldr	r2, [pc, #708]	; (800c1c8 <USART_SetConfig+0x35c>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d176      	bne.n	800bff4 <USART_SetConfig+0x188>
 800bf06:	4bb1      	ldr	r3, [pc, #708]	; (800c1cc <USART_SetConfig+0x360>)
 800bf08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf0e:	2b28      	cmp	r3, #40	; 0x28
 800bf10:	d86c      	bhi.n	800bfec <USART_SetConfig+0x180>
 800bf12:	a201      	add	r2, pc, #4	; (adr r2, 800bf18 <USART_SetConfig+0xac>)
 800bf14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf18:	0800bfbd 	.word	0x0800bfbd
 800bf1c:	0800bfed 	.word	0x0800bfed
 800bf20:	0800bfed 	.word	0x0800bfed
 800bf24:	0800bfed 	.word	0x0800bfed
 800bf28:	0800bfed 	.word	0x0800bfed
 800bf2c:	0800bfed 	.word	0x0800bfed
 800bf30:	0800bfed 	.word	0x0800bfed
 800bf34:	0800bfed 	.word	0x0800bfed
 800bf38:	0800bfc5 	.word	0x0800bfc5
 800bf3c:	0800bfed 	.word	0x0800bfed
 800bf40:	0800bfed 	.word	0x0800bfed
 800bf44:	0800bfed 	.word	0x0800bfed
 800bf48:	0800bfed 	.word	0x0800bfed
 800bf4c:	0800bfed 	.word	0x0800bfed
 800bf50:	0800bfed 	.word	0x0800bfed
 800bf54:	0800bfed 	.word	0x0800bfed
 800bf58:	0800bfcd 	.word	0x0800bfcd
 800bf5c:	0800bfed 	.word	0x0800bfed
 800bf60:	0800bfed 	.word	0x0800bfed
 800bf64:	0800bfed 	.word	0x0800bfed
 800bf68:	0800bfed 	.word	0x0800bfed
 800bf6c:	0800bfed 	.word	0x0800bfed
 800bf70:	0800bfed 	.word	0x0800bfed
 800bf74:	0800bfed 	.word	0x0800bfed
 800bf78:	0800bfd5 	.word	0x0800bfd5
 800bf7c:	0800bfed 	.word	0x0800bfed
 800bf80:	0800bfed 	.word	0x0800bfed
 800bf84:	0800bfed 	.word	0x0800bfed
 800bf88:	0800bfed 	.word	0x0800bfed
 800bf8c:	0800bfed 	.word	0x0800bfed
 800bf90:	0800bfed 	.word	0x0800bfed
 800bf94:	0800bfed 	.word	0x0800bfed
 800bf98:	0800bfdd 	.word	0x0800bfdd
 800bf9c:	0800bfed 	.word	0x0800bfed
 800bfa0:	0800bfed 	.word	0x0800bfed
 800bfa4:	0800bfed 	.word	0x0800bfed
 800bfa8:	0800bfed 	.word	0x0800bfed
 800bfac:	0800bfed 	.word	0x0800bfed
 800bfb0:	0800bfed 	.word	0x0800bfed
 800bfb4:	0800bfed 	.word	0x0800bfed
 800bfb8:	0800bfe5 	.word	0x0800bfe5
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfc2:	e18e      	b.n	800c2e2 <USART_SetConfig+0x476>
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfca:	e18a      	b.n	800c2e2 <USART_SetConfig+0x476>
 800bfcc:	2304      	movs	r3, #4
 800bfce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfd2:	e186      	b.n	800c2e2 <USART_SetConfig+0x476>
 800bfd4:	2308      	movs	r3, #8
 800bfd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfda:	e182      	b.n	800c2e2 <USART_SetConfig+0x476>
 800bfdc:	2310      	movs	r3, #16
 800bfde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfe2:	e17e      	b.n	800c2e2 <USART_SetConfig+0x476>
 800bfe4:	2320      	movs	r3, #32
 800bfe6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfea:	e17a      	b.n	800c2e2 <USART_SetConfig+0x476>
 800bfec:	2340      	movs	r3, #64	; 0x40
 800bfee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bff2:	e176      	b.n	800c2e2 <USART_SetConfig+0x476>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a75      	ldr	r2, [pc, #468]	; (800c1d0 <USART_SetConfig+0x364>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d130      	bne.n	800c060 <USART_SetConfig+0x1f4>
 800bffe:	4b73      	ldr	r3, [pc, #460]	; (800c1cc <USART_SetConfig+0x360>)
 800c000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c002:	f003 0307 	and.w	r3, r3, #7
 800c006:	2b05      	cmp	r3, #5
 800c008:	d826      	bhi.n	800c058 <USART_SetConfig+0x1ec>
 800c00a:	a201      	add	r2, pc, #4	; (adr r2, 800c010 <USART_SetConfig+0x1a4>)
 800c00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c010:	0800c029 	.word	0x0800c029
 800c014:	0800c031 	.word	0x0800c031
 800c018:	0800c039 	.word	0x0800c039
 800c01c:	0800c041 	.word	0x0800c041
 800c020:	0800c049 	.word	0x0800c049
 800c024:	0800c051 	.word	0x0800c051
 800c028:	2300      	movs	r3, #0
 800c02a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c02e:	e158      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c030:	2302      	movs	r3, #2
 800c032:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c036:	e154      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c038:	2304      	movs	r3, #4
 800c03a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c03e:	e150      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c040:	2308      	movs	r3, #8
 800c042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c046:	e14c      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c048:	2310      	movs	r3, #16
 800c04a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c04e:	e148      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c050:	2320      	movs	r3, #32
 800c052:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c056:	e144      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c058:	2340      	movs	r3, #64	; 0x40
 800c05a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c05e:	e140      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a5b      	ldr	r2, [pc, #364]	; (800c1d4 <USART_SetConfig+0x368>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d130      	bne.n	800c0cc <USART_SetConfig+0x260>
 800c06a:	4b58      	ldr	r3, [pc, #352]	; (800c1cc <USART_SetConfig+0x360>)
 800c06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c06e:	f003 0307 	and.w	r3, r3, #7
 800c072:	2b05      	cmp	r3, #5
 800c074:	d826      	bhi.n	800c0c4 <USART_SetConfig+0x258>
 800c076:	a201      	add	r2, pc, #4	; (adr r2, 800c07c <USART_SetConfig+0x210>)
 800c078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07c:	0800c095 	.word	0x0800c095
 800c080:	0800c09d 	.word	0x0800c09d
 800c084:	0800c0a5 	.word	0x0800c0a5
 800c088:	0800c0ad 	.word	0x0800c0ad
 800c08c:	0800c0b5 	.word	0x0800c0b5
 800c090:	0800c0bd 	.word	0x0800c0bd
 800c094:	2300      	movs	r3, #0
 800c096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c09a:	e122      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c09c:	2302      	movs	r3, #2
 800c09e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c0a2:	e11e      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c0a4:	2304      	movs	r3, #4
 800c0a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c0aa:	e11a      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c0ac:	2308      	movs	r3, #8
 800c0ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c0b2:	e116      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c0b4:	2310      	movs	r3, #16
 800c0b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c0ba:	e112      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c0bc:	2320      	movs	r3, #32
 800c0be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c0c2:	e10e      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c0c4:	2340      	movs	r3, #64	; 0x40
 800c0c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c0ca:	e10a      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a41      	ldr	r2, [pc, #260]	; (800c1d8 <USART_SetConfig+0x36c>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	f040 8086 	bne.w	800c1e4 <USART_SetConfig+0x378>
 800c0d8:	4b3c      	ldr	r3, [pc, #240]	; (800c1cc <USART_SetConfig+0x360>)
 800c0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0e0:	2b28      	cmp	r3, #40	; 0x28
 800c0e2:	d87b      	bhi.n	800c1dc <USART_SetConfig+0x370>
 800c0e4:	a201      	add	r2, pc, #4	; (adr r2, 800c0ec <USART_SetConfig+0x280>)
 800c0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ea:	bf00      	nop
 800c0ec:	0800c191 	.word	0x0800c191
 800c0f0:	0800c1dd 	.word	0x0800c1dd
 800c0f4:	0800c1dd 	.word	0x0800c1dd
 800c0f8:	0800c1dd 	.word	0x0800c1dd
 800c0fc:	0800c1dd 	.word	0x0800c1dd
 800c100:	0800c1dd 	.word	0x0800c1dd
 800c104:	0800c1dd 	.word	0x0800c1dd
 800c108:	0800c1dd 	.word	0x0800c1dd
 800c10c:	0800c199 	.word	0x0800c199
 800c110:	0800c1dd 	.word	0x0800c1dd
 800c114:	0800c1dd 	.word	0x0800c1dd
 800c118:	0800c1dd 	.word	0x0800c1dd
 800c11c:	0800c1dd 	.word	0x0800c1dd
 800c120:	0800c1dd 	.word	0x0800c1dd
 800c124:	0800c1dd 	.word	0x0800c1dd
 800c128:	0800c1dd 	.word	0x0800c1dd
 800c12c:	0800c1a1 	.word	0x0800c1a1
 800c130:	0800c1dd 	.word	0x0800c1dd
 800c134:	0800c1dd 	.word	0x0800c1dd
 800c138:	0800c1dd 	.word	0x0800c1dd
 800c13c:	0800c1dd 	.word	0x0800c1dd
 800c140:	0800c1dd 	.word	0x0800c1dd
 800c144:	0800c1dd 	.word	0x0800c1dd
 800c148:	0800c1dd 	.word	0x0800c1dd
 800c14c:	0800c1a9 	.word	0x0800c1a9
 800c150:	0800c1dd 	.word	0x0800c1dd
 800c154:	0800c1dd 	.word	0x0800c1dd
 800c158:	0800c1dd 	.word	0x0800c1dd
 800c15c:	0800c1dd 	.word	0x0800c1dd
 800c160:	0800c1dd 	.word	0x0800c1dd
 800c164:	0800c1dd 	.word	0x0800c1dd
 800c168:	0800c1dd 	.word	0x0800c1dd
 800c16c:	0800c1b1 	.word	0x0800c1b1
 800c170:	0800c1dd 	.word	0x0800c1dd
 800c174:	0800c1dd 	.word	0x0800c1dd
 800c178:	0800c1dd 	.word	0x0800c1dd
 800c17c:	0800c1dd 	.word	0x0800c1dd
 800c180:	0800c1dd 	.word	0x0800c1dd
 800c184:	0800c1dd 	.word	0x0800c1dd
 800c188:	0800c1dd 	.word	0x0800c1dd
 800c18c:	0800c1b9 	.word	0x0800c1b9
 800c190:	2301      	movs	r3, #1
 800c192:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c196:	e0a4      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c198:	2302      	movs	r3, #2
 800c19a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c19e:	e0a0      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c1a0:	2304      	movs	r3, #4
 800c1a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c1a6:	e09c      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c1a8:	2308      	movs	r3, #8
 800c1aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c1ae:	e098      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c1b0:	2310      	movs	r3, #16
 800c1b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c1b6:	e094      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c1b8:	2320      	movs	r3, #32
 800c1ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c1be:	e090      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c1c0:	cfff69f3 	.word	0xcfff69f3
 800c1c4:	ffffc0f6 	.word	0xffffc0f6
 800c1c8:	40011000 	.word	0x40011000
 800c1cc:	58024400 	.word	0x58024400
 800c1d0:	40004400 	.word	0x40004400
 800c1d4:	40004800 	.word	0x40004800
 800c1d8:	40011400 	.word	0x40011400
 800c1dc:	2340      	movs	r3, #64	; 0x40
 800c1de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c1e2:	e07e      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4ab5      	ldr	r2, [pc, #724]	; (800c4c0 <USART_SetConfig+0x654>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d176      	bne.n	800c2dc <USART_SetConfig+0x470>
 800c1ee:	4bb5      	ldr	r3, [pc, #724]	; (800c4c4 <USART_SetConfig+0x658>)
 800c1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1f6:	2b28      	cmp	r3, #40	; 0x28
 800c1f8:	d86c      	bhi.n	800c2d4 <USART_SetConfig+0x468>
 800c1fa:	a201      	add	r2, pc, #4	; (adr r2, 800c200 <USART_SetConfig+0x394>)
 800c1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c200:	0800c2a5 	.word	0x0800c2a5
 800c204:	0800c2d5 	.word	0x0800c2d5
 800c208:	0800c2d5 	.word	0x0800c2d5
 800c20c:	0800c2d5 	.word	0x0800c2d5
 800c210:	0800c2d5 	.word	0x0800c2d5
 800c214:	0800c2d5 	.word	0x0800c2d5
 800c218:	0800c2d5 	.word	0x0800c2d5
 800c21c:	0800c2d5 	.word	0x0800c2d5
 800c220:	0800c2ad 	.word	0x0800c2ad
 800c224:	0800c2d5 	.word	0x0800c2d5
 800c228:	0800c2d5 	.word	0x0800c2d5
 800c22c:	0800c2d5 	.word	0x0800c2d5
 800c230:	0800c2d5 	.word	0x0800c2d5
 800c234:	0800c2d5 	.word	0x0800c2d5
 800c238:	0800c2d5 	.word	0x0800c2d5
 800c23c:	0800c2d5 	.word	0x0800c2d5
 800c240:	0800c2b5 	.word	0x0800c2b5
 800c244:	0800c2d5 	.word	0x0800c2d5
 800c248:	0800c2d5 	.word	0x0800c2d5
 800c24c:	0800c2d5 	.word	0x0800c2d5
 800c250:	0800c2d5 	.word	0x0800c2d5
 800c254:	0800c2d5 	.word	0x0800c2d5
 800c258:	0800c2d5 	.word	0x0800c2d5
 800c25c:	0800c2d5 	.word	0x0800c2d5
 800c260:	0800c2bd 	.word	0x0800c2bd
 800c264:	0800c2d5 	.word	0x0800c2d5
 800c268:	0800c2d5 	.word	0x0800c2d5
 800c26c:	0800c2d5 	.word	0x0800c2d5
 800c270:	0800c2d5 	.word	0x0800c2d5
 800c274:	0800c2d5 	.word	0x0800c2d5
 800c278:	0800c2d5 	.word	0x0800c2d5
 800c27c:	0800c2d5 	.word	0x0800c2d5
 800c280:	0800c2c5 	.word	0x0800c2c5
 800c284:	0800c2d5 	.word	0x0800c2d5
 800c288:	0800c2d5 	.word	0x0800c2d5
 800c28c:	0800c2d5 	.word	0x0800c2d5
 800c290:	0800c2d5 	.word	0x0800c2d5
 800c294:	0800c2d5 	.word	0x0800c2d5
 800c298:	0800c2d5 	.word	0x0800c2d5
 800c29c:	0800c2d5 	.word	0x0800c2d5
 800c2a0:	0800c2cd 	.word	0x0800c2cd
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c2aa:	e01a      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c2b2:	e016      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c2b4:	2304      	movs	r3, #4
 800c2b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c2ba:	e012      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c2bc:	2308      	movs	r3, #8
 800c2be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c2c2:	e00e      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c2ca:	e00a      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c2cc:	2320      	movs	r3, #32
 800c2ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c2d2:	e006      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c2d4:	2340      	movs	r3, #64	; 0x40
 800c2d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c2da:	e002      	b.n	800c2e2 <USART_SetConfig+0x476>
 800c2dc:	2340      	movs	r3, #64	; 0x40
 800c2de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 800c2e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2e6:	2b20      	cmp	r3, #32
 800c2e8:	f200 832f 	bhi.w	800c94a <USART_SetConfig+0xade>
 800c2ec:	a201      	add	r2, pc, #4	; (adr r2, 800c2f4 <USART_SetConfig+0x488>)
 800c2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f2:	bf00      	nop
 800c2f4:	0800c379 	.word	0x0800c379
 800c2f8:	0800c42f 	.word	0x0800c42f
 800c2fc:	0800c4ef 	.word	0x0800c4ef
 800c300:	0800c94b 	.word	0x0800c94b
 800c304:	0800c5a9 	.word	0x0800c5a9
 800c308:	0800c94b 	.word	0x0800c94b
 800c30c:	0800c94b 	.word	0x0800c94b
 800c310:	0800c94b 	.word	0x0800c94b
 800c314:	0800c663 	.word	0x0800c663
 800c318:	0800c94b 	.word	0x0800c94b
 800c31c:	0800c94b 	.word	0x0800c94b
 800c320:	0800c94b 	.word	0x0800c94b
 800c324:	0800c94b 	.word	0x0800c94b
 800c328:	0800c94b 	.word	0x0800c94b
 800c32c:	0800c94b 	.word	0x0800c94b
 800c330:	0800c94b 	.word	0x0800c94b
 800c334:	0800c7db 	.word	0x0800c7db
 800c338:	0800c94b 	.word	0x0800c94b
 800c33c:	0800c94b 	.word	0x0800c94b
 800c340:	0800c94b 	.word	0x0800c94b
 800c344:	0800c94b 	.word	0x0800c94b
 800c348:	0800c94b 	.word	0x0800c94b
 800c34c:	0800c94b 	.word	0x0800c94b
 800c350:	0800c94b 	.word	0x0800c94b
 800c354:	0800c94b 	.word	0x0800c94b
 800c358:	0800c94b 	.word	0x0800c94b
 800c35c:	0800c94b 	.word	0x0800c94b
 800c360:	0800c94b 	.word	0x0800c94b
 800c364:	0800c94b 	.word	0x0800c94b
 800c368:	0800c94b 	.word	0x0800c94b
 800c36c:	0800c94b 	.word	0x0800c94b
 800c370:	0800c94b 	.word	0x0800c94b
 800c374:	0800c899 	.word	0x0800c899
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800c378:	f7f9 fd50 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 800c37c:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c382:	2b00      	cmp	r3, #0
 800c384:	d044      	beq.n	800c410 <USART_SetConfig+0x5a4>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d03e      	beq.n	800c40c <USART_SetConfig+0x5a0>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c392:	2b02      	cmp	r3, #2
 800c394:	d038      	beq.n	800c408 <USART_SetConfig+0x59c>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d032      	beq.n	800c404 <USART_SetConfig+0x598>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a2:	2b04      	cmp	r3, #4
 800c3a4:	d02c      	beq.n	800c400 <USART_SetConfig+0x594>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3aa:	2b05      	cmp	r3, #5
 800c3ac:	d026      	beq.n	800c3fc <USART_SetConfig+0x590>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b2:	2b06      	cmp	r3, #6
 800c3b4:	d020      	beq.n	800c3f8 <USART_SetConfig+0x58c>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ba:	2b07      	cmp	r3, #7
 800c3bc:	d01a      	beq.n	800c3f4 <USART_SetConfig+0x588>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	2b08      	cmp	r3, #8
 800c3c4:	d014      	beq.n	800c3f0 <USART_SetConfig+0x584>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ca:	2b09      	cmp	r3, #9
 800c3cc:	d00e      	beq.n	800c3ec <USART_SetConfig+0x580>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d2:	2b0a      	cmp	r3, #10
 800c3d4:	d008      	beq.n	800c3e8 <USART_SetConfig+0x57c>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3da:	2b0b      	cmp	r3, #11
 800c3dc:	d102      	bne.n	800c3e4 <USART_SetConfig+0x578>
 800c3de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3e2:	e016      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e014      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c3e8:	2380      	movs	r3, #128	; 0x80
 800c3ea:	e012      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c3ec:	2340      	movs	r3, #64	; 0x40
 800c3ee:	e010      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c3f0:	2320      	movs	r3, #32
 800c3f2:	e00e      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c3f4:	2310      	movs	r3, #16
 800c3f6:	e00c      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c3f8:	230c      	movs	r3, #12
 800c3fa:	e00a      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c3fc:	230a      	movs	r3, #10
 800c3fe:	e008      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c400:	2308      	movs	r3, #8
 800c402:	e006      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c404:	2306      	movs	r3, #6
 800c406:	e004      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c408:	2304      	movs	r3, #4
 800c40a:	e002      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c40c:	2302      	movs	r3, #2
 800c40e:	e000      	b.n	800c412 <USART_SetConfig+0x5a6>
 800c410:	2301      	movs	r3, #1
 800c412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c414:	fbb2 f3f3 	udiv	r3, r2, r3
 800c418:	005a      	lsls	r2, r3, #1
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	085b      	lsrs	r3, r3, #1
 800c420:	441a      	add	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	fbb2 f3f3 	udiv	r3, r2, r3
 800c42a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c42c:	e291      	b.n	800c952 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800c42e:	f7f9 fd0b 	bl	8005e48 <HAL_RCC_GetPCLK2Freq>
 800c432:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d049      	beq.n	800c4d0 <USART_SetConfig+0x664>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c440:	2b01      	cmp	r3, #1
 800c442:	d043      	beq.n	800c4cc <USART_SetConfig+0x660>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d03d      	beq.n	800c4c8 <USART_SetConfig+0x65c>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c450:	2b03      	cmp	r3, #3
 800c452:	d032      	beq.n	800c4ba <USART_SetConfig+0x64e>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c458:	2b04      	cmp	r3, #4
 800c45a:	d02c      	beq.n	800c4b6 <USART_SetConfig+0x64a>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	2b05      	cmp	r3, #5
 800c462:	d026      	beq.n	800c4b2 <USART_SetConfig+0x646>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c468:	2b06      	cmp	r3, #6
 800c46a:	d020      	beq.n	800c4ae <USART_SetConfig+0x642>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c470:	2b07      	cmp	r3, #7
 800c472:	d01a      	beq.n	800c4aa <USART_SetConfig+0x63e>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	2b08      	cmp	r3, #8
 800c47a:	d014      	beq.n	800c4a6 <USART_SetConfig+0x63a>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c480:	2b09      	cmp	r3, #9
 800c482:	d00e      	beq.n	800c4a2 <USART_SetConfig+0x636>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c488:	2b0a      	cmp	r3, #10
 800c48a:	d008      	beq.n	800c49e <USART_SetConfig+0x632>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c490:	2b0b      	cmp	r3, #11
 800c492:	d102      	bne.n	800c49a <USART_SetConfig+0x62e>
 800c494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c498:	e01b      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e019      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c49e:	2380      	movs	r3, #128	; 0x80
 800c4a0:	e017      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c4a2:	2340      	movs	r3, #64	; 0x40
 800c4a4:	e015      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c4a6:	2320      	movs	r3, #32
 800c4a8:	e013      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c4aa:	2310      	movs	r3, #16
 800c4ac:	e011      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c4ae:	230c      	movs	r3, #12
 800c4b0:	e00f      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c4b2:	230a      	movs	r3, #10
 800c4b4:	e00d      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c4b6:	2308      	movs	r3, #8
 800c4b8:	e00b      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c4ba:	2306      	movs	r3, #6
 800c4bc:	e009      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c4be:	bf00      	nop
 800c4c0:	40011c00 	.word	0x40011c00
 800c4c4:	58024400 	.word	0x58024400
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	e002      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	e000      	b.n	800c4d2 <USART_SetConfig+0x666>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4d8:	005a      	lsls	r2, r3, #1
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	085b      	lsrs	r3, r3, #1
 800c4e0:	441a      	add	r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c4ec:	e231      	b.n	800c952 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4ee:	f107 0318 	add.w	r3, r7, #24
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fb fb46 	bl	8007b84 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800c4f8:	69fa      	ldr	r2, [r7, #28]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d044      	beq.n	800c58c <USART_SetConfig+0x720>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c506:	2b01      	cmp	r3, #1
 800c508:	d03e      	beq.n	800c588 <USART_SetConfig+0x71c>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d038      	beq.n	800c584 <USART_SetConfig+0x718>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c516:	2b03      	cmp	r3, #3
 800c518:	d032      	beq.n	800c580 <USART_SetConfig+0x714>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51e:	2b04      	cmp	r3, #4
 800c520:	d02c      	beq.n	800c57c <USART_SetConfig+0x710>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c526:	2b05      	cmp	r3, #5
 800c528:	d026      	beq.n	800c578 <USART_SetConfig+0x70c>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52e:	2b06      	cmp	r3, #6
 800c530:	d020      	beq.n	800c574 <USART_SetConfig+0x708>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c536:	2b07      	cmp	r3, #7
 800c538:	d01a      	beq.n	800c570 <USART_SetConfig+0x704>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53e:	2b08      	cmp	r3, #8
 800c540:	d014      	beq.n	800c56c <USART_SetConfig+0x700>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c546:	2b09      	cmp	r3, #9
 800c548:	d00e      	beq.n	800c568 <USART_SetConfig+0x6fc>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54e:	2b0a      	cmp	r3, #10
 800c550:	d008      	beq.n	800c564 <USART_SetConfig+0x6f8>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c556:	2b0b      	cmp	r3, #11
 800c558:	d102      	bne.n	800c560 <USART_SetConfig+0x6f4>
 800c55a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c55e:	e016      	b.n	800c58e <USART_SetConfig+0x722>
 800c560:	2301      	movs	r3, #1
 800c562:	e014      	b.n	800c58e <USART_SetConfig+0x722>
 800c564:	2380      	movs	r3, #128	; 0x80
 800c566:	e012      	b.n	800c58e <USART_SetConfig+0x722>
 800c568:	2340      	movs	r3, #64	; 0x40
 800c56a:	e010      	b.n	800c58e <USART_SetConfig+0x722>
 800c56c:	2320      	movs	r3, #32
 800c56e:	e00e      	b.n	800c58e <USART_SetConfig+0x722>
 800c570:	2310      	movs	r3, #16
 800c572:	e00c      	b.n	800c58e <USART_SetConfig+0x722>
 800c574:	230c      	movs	r3, #12
 800c576:	e00a      	b.n	800c58e <USART_SetConfig+0x722>
 800c578:	230a      	movs	r3, #10
 800c57a:	e008      	b.n	800c58e <USART_SetConfig+0x722>
 800c57c:	2308      	movs	r3, #8
 800c57e:	e006      	b.n	800c58e <USART_SetConfig+0x722>
 800c580:	2306      	movs	r3, #6
 800c582:	e004      	b.n	800c58e <USART_SetConfig+0x722>
 800c584:	2304      	movs	r3, #4
 800c586:	e002      	b.n	800c58e <USART_SetConfig+0x722>
 800c588:	2302      	movs	r3, #2
 800c58a:	e000      	b.n	800c58e <USART_SetConfig+0x722>
 800c58c:	2301      	movs	r3, #1
 800c58e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c592:	005a      	lsls	r2, r3, #1
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	085b      	lsrs	r3, r3, #1
 800c59a:	441a      	add	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5a4:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800c5a6:	e1d4      	b.n	800c952 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5a8:	f107 030c 	add.w	r3, r7, #12
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fb fc3d 	bl	8007e2c <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d044      	beq.n	800c646 <USART_SetConfig+0x7da>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d03e      	beq.n	800c642 <USART_SetConfig+0x7d6>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d038      	beq.n	800c63e <USART_SetConfig+0x7d2>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d0:	2b03      	cmp	r3, #3
 800c5d2:	d032      	beq.n	800c63a <USART_SetConfig+0x7ce>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d8:	2b04      	cmp	r3, #4
 800c5da:	d02c      	beq.n	800c636 <USART_SetConfig+0x7ca>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e0:	2b05      	cmp	r3, #5
 800c5e2:	d026      	beq.n	800c632 <USART_SetConfig+0x7c6>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e8:	2b06      	cmp	r3, #6
 800c5ea:	d020      	beq.n	800c62e <USART_SetConfig+0x7c2>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f0:	2b07      	cmp	r3, #7
 800c5f2:	d01a      	beq.n	800c62a <USART_SetConfig+0x7be>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f8:	2b08      	cmp	r3, #8
 800c5fa:	d014      	beq.n	800c626 <USART_SetConfig+0x7ba>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c600:	2b09      	cmp	r3, #9
 800c602:	d00e      	beq.n	800c622 <USART_SetConfig+0x7b6>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c608:	2b0a      	cmp	r3, #10
 800c60a:	d008      	beq.n	800c61e <USART_SetConfig+0x7b2>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c610:	2b0b      	cmp	r3, #11
 800c612:	d102      	bne.n	800c61a <USART_SetConfig+0x7ae>
 800c614:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c618:	e016      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c61a:	2301      	movs	r3, #1
 800c61c:	e014      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c61e:	2380      	movs	r3, #128	; 0x80
 800c620:	e012      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c622:	2340      	movs	r3, #64	; 0x40
 800c624:	e010      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c626:	2320      	movs	r3, #32
 800c628:	e00e      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c62a:	2310      	movs	r3, #16
 800c62c:	e00c      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c62e:	230c      	movs	r3, #12
 800c630:	e00a      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c632:	230a      	movs	r3, #10
 800c634:	e008      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c636:	2308      	movs	r3, #8
 800c638:	e006      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c63a:	2306      	movs	r3, #6
 800c63c:	e004      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c63e:	2304      	movs	r3, #4
 800c640:	e002      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c642:	2302      	movs	r3, #2
 800c644:	e000      	b.n	800c648 <USART_SetConfig+0x7dc>
 800c646:	2301      	movs	r3, #1
 800c648:	fbb2 f3f3 	udiv	r3, r2, r3
 800c64c:	005a      	lsls	r2, r3, #1
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	085b      	lsrs	r3, r3, #1
 800c654:	441a      	add	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c65e:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800c660:	e177      	b.n	800c952 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c662:	4b8a      	ldr	r3, [pc, #552]	; (800c88c <USART_SetConfig+0xa20>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0320 	and.w	r3, r3, #32
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d05d      	beq.n	800c72a <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800c66e:	4b87      	ldr	r3, [pc, #540]	; (800c88c <USART_SetConfig+0xa20>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	08db      	lsrs	r3, r3, #3
 800c674:	f003 0303 	and.w	r3, r3, #3
 800c678:	4a85      	ldr	r2, [pc, #532]	; (800c890 <USART_SetConfig+0xa24>)
 800c67a:	40da      	lsrs	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c680:	2b00      	cmp	r3, #0
 800c682:	d044      	beq.n	800c70e <USART_SetConfig+0x8a2>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d03e      	beq.n	800c70a <USART_SetConfig+0x89e>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	2b02      	cmp	r3, #2
 800c692:	d038      	beq.n	800c706 <USART_SetConfig+0x89a>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c698:	2b03      	cmp	r3, #3
 800c69a:	d032      	beq.n	800c702 <USART_SetConfig+0x896>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a0:	2b04      	cmp	r3, #4
 800c6a2:	d02c      	beq.n	800c6fe <USART_SetConfig+0x892>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a8:	2b05      	cmp	r3, #5
 800c6aa:	d026      	beq.n	800c6fa <USART_SetConfig+0x88e>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b0:	2b06      	cmp	r3, #6
 800c6b2:	d020      	beq.n	800c6f6 <USART_SetConfig+0x88a>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b8:	2b07      	cmp	r3, #7
 800c6ba:	d01a      	beq.n	800c6f2 <USART_SetConfig+0x886>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c0:	2b08      	cmp	r3, #8
 800c6c2:	d014      	beq.n	800c6ee <USART_SetConfig+0x882>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c8:	2b09      	cmp	r3, #9
 800c6ca:	d00e      	beq.n	800c6ea <USART_SetConfig+0x87e>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d0:	2b0a      	cmp	r3, #10
 800c6d2:	d008      	beq.n	800c6e6 <USART_SetConfig+0x87a>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d8:	2b0b      	cmp	r3, #11
 800c6da:	d102      	bne.n	800c6e2 <USART_SetConfig+0x876>
 800c6dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6e0:	e016      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e014      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c6e6:	2380      	movs	r3, #128	; 0x80
 800c6e8:	e012      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c6ea:	2340      	movs	r3, #64	; 0x40
 800c6ec:	e010      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c6ee:	2320      	movs	r3, #32
 800c6f0:	e00e      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c6f2:	2310      	movs	r3, #16
 800c6f4:	e00c      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c6f6:	230c      	movs	r3, #12
 800c6f8:	e00a      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c6fa:	230a      	movs	r3, #10
 800c6fc:	e008      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c6fe:	2308      	movs	r3, #8
 800c700:	e006      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c702:	2306      	movs	r3, #6
 800c704:	e004      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c706:	2304      	movs	r3, #4
 800c708:	e002      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c70a:	2302      	movs	r3, #2
 800c70c:	e000      	b.n	800c710 <USART_SetConfig+0x8a4>
 800c70e:	2301      	movs	r3, #1
 800c710:	fbb2 f3f3 	udiv	r3, r2, r3
 800c714:	005a      	lsls	r2, r3, #1
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	085b      	lsrs	r3, r3, #1
 800c71c:	441a      	add	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	fbb2 f3f3 	udiv	r3, r2, r3
 800c726:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800c728:	e113      	b.n	800c952 <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d044      	beq.n	800c7bc <USART_SetConfig+0x950>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c736:	2b01      	cmp	r3, #1
 800c738:	d03e      	beq.n	800c7b8 <USART_SetConfig+0x94c>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d038      	beq.n	800c7b4 <USART_SetConfig+0x948>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c746:	2b03      	cmp	r3, #3
 800c748:	d032      	beq.n	800c7b0 <USART_SetConfig+0x944>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74e:	2b04      	cmp	r3, #4
 800c750:	d02c      	beq.n	800c7ac <USART_SetConfig+0x940>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c756:	2b05      	cmp	r3, #5
 800c758:	d026      	beq.n	800c7a8 <USART_SetConfig+0x93c>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75e:	2b06      	cmp	r3, #6
 800c760:	d020      	beq.n	800c7a4 <USART_SetConfig+0x938>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c766:	2b07      	cmp	r3, #7
 800c768:	d01a      	beq.n	800c7a0 <USART_SetConfig+0x934>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76e:	2b08      	cmp	r3, #8
 800c770:	d014      	beq.n	800c79c <USART_SetConfig+0x930>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c776:	2b09      	cmp	r3, #9
 800c778:	d00e      	beq.n	800c798 <USART_SetConfig+0x92c>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77e:	2b0a      	cmp	r3, #10
 800c780:	d008      	beq.n	800c794 <USART_SetConfig+0x928>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c786:	2b0b      	cmp	r3, #11
 800c788:	d102      	bne.n	800c790 <USART_SetConfig+0x924>
 800c78a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c78e:	e016      	b.n	800c7be <USART_SetConfig+0x952>
 800c790:	2301      	movs	r3, #1
 800c792:	e014      	b.n	800c7be <USART_SetConfig+0x952>
 800c794:	2380      	movs	r3, #128	; 0x80
 800c796:	e012      	b.n	800c7be <USART_SetConfig+0x952>
 800c798:	2340      	movs	r3, #64	; 0x40
 800c79a:	e010      	b.n	800c7be <USART_SetConfig+0x952>
 800c79c:	2320      	movs	r3, #32
 800c79e:	e00e      	b.n	800c7be <USART_SetConfig+0x952>
 800c7a0:	2310      	movs	r3, #16
 800c7a2:	e00c      	b.n	800c7be <USART_SetConfig+0x952>
 800c7a4:	230c      	movs	r3, #12
 800c7a6:	e00a      	b.n	800c7be <USART_SetConfig+0x952>
 800c7a8:	230a      	movs	r3, #10
 800c7aa:	e008      	b.n	800c7be <USART_SetConfig+0x952>
 800c7ac:	2308      	movs	r3, #8
 800c7ae:	e006      	b.n	800c7be <USART_SetConfig+0x952>
 800c7b0:	2306      	movs	r3, #6
 800c7b2:	e004      	b.n	800c7be <USART_SetConfig+0x952>
 800c7b4:	2304      	movs	r3, #4
 800c7b6:	e002      	b.n	800c7be <USART_SetConfig+0x952>
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	e000      	b.n	800c7be <USART_SetConfig+0x952>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	4a34      	ldr	r2, [pc, #208]	; (800c890 <USART_SetConfig+0xa24>)
 800c7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7c4:	005a      	lsls	r2, r3, #1
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	085b      	lsrs	r3, r3, #1
 800c7cc:	441a      	add	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c7d8:	e0bb      	b.n	800c952 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d044      	beq.n	800c86c <USART_SetConfig+0xa00>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d03e      	beq.n	800c868 <USART_SetConfig+0x9fc>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	d038      	beq.n	800c864 <USART_SetConfig+0x9f8>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	d032      	beq.n	800c860 <USART_SetConfig+0x9f4>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fe:	2b04      	cmp	r3, #4
 800c800:	d02c      	beq.n	800c85c <USART_SetConfig+0x9f0>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c806:	2b05      	cmp	r3, #5
 800c808:	d026      	beq.n	800c858 <USART_SetConfig+0x9ec>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80e:	2b06      	cmp	r3, #6
 800c810:	d020      	beq.n	800c854 <USART_SetConfig+0x9e8>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c816:	2b07      	cmp	r3, #7
 800c818:	d01a      	beq.n	800c850 <USART_SetConfig+0x9e4>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81e:	2b08      	cmp	r3, #8
 800c820:	d014      	beq.n	800c84c <USART_SetConfig+0x9e0>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c826:	2b09      	cmp	r3, #9
 800c828:	d00e      	beq.n	800c848 <USART_SetConfig+0x9dc>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82e:	2b0a      	cmp	r3, #10
 800c830:	d008      	beq.n	800c844 <USART_SetConfig+0x9d8>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c836:	2b0b      	cmp	r3, #11
 800c838:	d102      	bne.n	800c840 <USART_SetConfig+0x9d4>
 800c83a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c83e:	e016      	b.n	800c86e <USART_SetConfig+0xa02>
 800c840:	2301      	movs	r3, #1
 800c842:	e014      	b.n	800c86e <USART_SetConfig+0xa02>
 800c844:	2380      	movs	r3, #128	; 0x80
 800c846:	e012      	b.n	800c86e <USART_SetConfig+0xa02>
 800c848:	2340      	movs	r3, #64	; 0x40
 800c84a:	e010      	b.n	800c86e <USART_SetConfig+0xa02>
 800c84c:	2320      	movs	r3, #32
 800c84e:	e00e      	b.n	800c86e <USART_SetConfig+0xa02>
 800c850:	2310      	movs	r3, #16
 800c852:	e00c      	b.n	800c86e <USART_SetConfig+0xa02>
 800c854:	230c      	movs	r3, #12
 800c856:	e00a      	b.n	800c86e <USART_SetConfig+0xa02>
 800c858:	230a      	movs	r3, #10
 800c85a:	e008      	b.n	800c86e <USART_SetConfig+0xa02>
 800c85c:	2308      	movs	r3, #8
 800c85e:	e006      	b.n	800c86e <USART_SetConfig+0xa02>
 800c860:	2306      	movs	r3, #6
 800c862:	e004      	b.n	800c86e <USART_SetConfig+0xa02>
 800c864:	2304      	movs	r3, #4
 800c866:	e002      	b.n	800c86e <USART_SetConfig+0xa02>
 800c868:	2302      	movs	r3, #2
 800c86a:	e000      	b.n	800c86e <USART_SetConfig+0xa02>
 800c86c:	2301      	movs	r3, #1
 800c86e:	4a09      	ldr	r2, [pc, #36]	; (800c894 <USART_SetConfig+0xa28>)
 800c870:	fbb2 f3f3 	udiv	r3, r2, r3
 800c874:	005a      	lsls	r2, r3, #1
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	085b      	lsrs	r3, r3, #1
 800c87c:	441a      	add	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	fbb2 f3f3 	udiv	r3, r2, r3
 800c886:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c888:	e063      	b.n	800c952 <USART_SetConfig+0xae6>
 800c88a:	bf00      	nop
 800c88c:	58024400 	.word	0x58024400
 800c890:	03d09000 	.word	0x03d09000
 800c894:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d044      	beq.n	800c92a <USART_SetConfig+0xabe>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d03e      	beq.n	800c926 <USART_SetConfig+0xaba>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d038      	beq.n	800c922 <USART_SetConfig+0xab6>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b4:	2b03      	cmp	r3, #3
 800c8b6:	d032      	beq.n	800c91e <USART_SetConfig+0xab2>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8bc:	2b04      	cmp	r3, #4
 800c8be:	d02c      	beq.n	800c91a <USART_SetConfig+0xaae>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c4:	2b05      	cmp	r3, #5
 800c8c6:	d026      	beq.n	800c916 <USART_SetConfig+0xaaa>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8cc:	2b06      	cmp	r3, #6
 800c8ce:	d020      	beq.n	800c912 <USART_SetConfig+0xaa6>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d4:	2b07      	cmp	r3, #7
 800c8d6:	d01a      	beq.n	800c90e <USART_SetConfig+0xaa2>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8dc:	2b08      	cmp	r3, #8
 800c8de:	d014      	beq.n	800c90a <USART_SetConfig+0xa9e>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e4:	2b09      	cmp	r3, #9
 800c8e6:	d00e      	beq.n	800c906 <USART_SetConfig+0xa9a>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ec:	2b0a      	cmp	r3, #10
 800c8ee:	d008      	beq.n	800c902 <USART_SetConfig+0xa96>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f4:	2b0b      	cmp	r3, #11
 800c8f6:	d102      	bne.n	800c8fe <USART_SetConfig+0xa92>
 800c8f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c8fc:	e016      	b.n	800c92c <USART_SetConfig+0xac0>
 800c8fe:	2301      	movs	r3, #1
 800c900:	e014      	b.n	800c92c <USART_SetConfig+0xac0>
 800c902:	2380      	movs	r3, #128	; 0x80
 800c904:	e012      	b.n	800c92c <USART_SetConfig+0xac0>
 800c906:	2340      	movs	r3, #64	; 0x40
 800c908:	e010      	b.n	800c92c <USART_SetConfig+0xac0>
 800c90a:	2320      	movs	r3, #32
 800c90c:	e00e      	b.n	800c92c <USART_SetConfig+0xac0>
 800c90e:	2310      	movs	r3, #16
 800c910:	e00c      	b.n	800c92c <USART_SetConfig+0xac0>
 800c912:	230c      	movs	r3, #12
 800c914:	e00a      	b.n	800c92c <USART_SetConfig+0xac0>
 800c916:	230a      	movs	r3, #10
 800c918:	e008      	b.n	800c92c <USART_SetConfig+0xac0>
 800c91a:	2308      	movs	r3, #8
 800c91c:	e006      	b.n	800c92c <USART_SetConfig+0xac0>
 800c91e:	2306      	movs	r3, #6
 800c920:	e004      	b.n	800c92c <USART_SetConfig+0xac0>
 800c922:	2304      	movs	r3, #4
 800c924:	e002      	b.n	800c92c <USART_SetConfig+0xac0>
 800c926:	2302      	movs	r3, #2
 800c928:	e000      	b.n	800c92c <USART_SetConfig+0xac0>
 800c92a:	2301      	movs	r3, #1
 800c92c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c930:	fbb2 f3f3 	udiv	r3, r2, r3
 800c934:	005a      	lsls	r2, r3, #1
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	085b      	lsrs	r3, r3, #1
 800c93c:	441a      	add	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	fbb2 f3f3 	udiv	r3, r2, r3
 800c946:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c948:	e003      	b.n	800c952 <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 800c950:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c954:	2b0f      	cmp	r3, #15
 800c956:	d916      	bls.n	800c986 <USART_SetConfig+0xb1a>
 800c958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c95e:	d212      	bcs.n	800c986 <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	b29b      	uxth	r3, r3
 800c964:	f023 030f 	bic.w	r3, r3, #15
 800c968:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96c:	085b      	lsrs	r3, r3, #1
 800c96e:	b29b      	uxth	r3, r3
 800c970:	f003 0307 	and.w	r3, r3, #7
 800c974:	b29a      	uxth	r2, r3
 800c976:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c978:	4313      	orrs	r3, r2
 800c97a:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c982:	60da      	str	r2, [r3, #12]
 800c984:	e002      	b.n	800c98c <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2201      	movs	r2, #1
 800c996:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800c9a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3738      	adds	r7, #56	; 0x38
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af02      	add	r7, sp, #8
 800c9b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9be:	f7f6 fac3 	bl	8002f48 <HAL_GetTick>
 800c9c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 0308 	and.w	r3, r3, #8
 800c9ce:	2b08      	cmp	r3, #8
 800c9d0:	d10e      	bne.n	800c9f0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c9d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff fa0d 	bl	800be00 <USART_WaitOnFlagUntilTimeout>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	e01e      	b.n	800ca2e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 0304 	and.w	r3, r3, #4
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d10e      	bne.n	800ca1c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c9fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f7ff f9f7 	bl	800be00 <USART_WaitOnFlagUntilTimeout>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca18:	2303      	movs	r3, #3
 800ca1a:	e008      	b.n	800ca2e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3710      	adds	r7, #16
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800ca36:	b480      	push	{r7}
 800ca38:	b085      	sub	sp, #20
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d101      	bne.n	800ca4c <HAL_USARTEx_EnableSlaveMode+0x16>
 800ca48:	2302      	movs	r3, #2
 800ca4a:	e043      	b.n	800cad4 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2202      	movs	r2, #2
 800ca58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f022 0201 	bic.w	r2, r2, #1
 800ca72:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	685a      	ldr	r2, [r3, #4]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	689a      	ldr	r2, [r3, #8]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca92:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f042 0201 	orr.w	r2, r2, #1
 800caa2:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	641a      	str	r2, [r3, #64]	; 0x40

  husart->State = HAL_USART_STATE_READY;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f042 0201 	orr.w	r2, r2, #1
 800cac8:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d101      	bne.n	800caf8 <HAL_USARTEx_ConfigNSS+0x18>
 800caf4:	2302      	movs	r3, #2
 800caf6:	e02a      	b.n	800cb4e <HAL_USARTEx_ConfigNSS+0x6e>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2202      	movs	r2, #2
 800cb04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f022 0201 	bic.w	r2, r2, #1
 800cb1e:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f023 0108 	bic.w	r1, r3, #8
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	430a      	orrs	r2, r1
 800cb32:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr

0800cb5a <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800cb5a:	b480      	push	{r7}
 800cb5c:	b085      	sub	sp, #20
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d101      	bne.n	800cb70 <HAL_USARTEx_DisableFifoMode+0x16>
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	e027      	b.n	800cbc0 <HAL_USARTEx_DisableFifoMode+0x66>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2201      	movs	r2, #1
 800cb74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2202      	movs	r2, #2
 800cb7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f022 0201 	bic.w	r2, r2, #1
 800cb96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb9e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d101      	bne.n	800cbe4 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	e02d      	b.n	800cc40 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2202      	movs	r2, #2
 800cbf0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f022 0201 	bic.w	r2, r2, #1
 800cc0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	430a      	orrs	r2, r1
 800cc1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f84f 	bl	800ccc4 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2201      	movs	r2, #1
 800cc32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3710      	adds	r7, #16
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d101      	bne.n	800cc60 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800cc5c:	2302      	movs	r3, #2
 800cc5e:	e02d      	b.n	800ccbc <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2201      	movs	r2, #1
 800cc64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2202      	movs	r2, #2
 800cc6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f022 0201 	bic.w	r2, r2, #1
 800cc86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 f811 	bl	800ccc4 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68fa      	ldr	r2, [r7, #12]
 800cca8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d106      	bne.n	800cce2 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cce0:	e02f      	b.n	800cd42 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cce2:	2310      	movs	r3, #16
 800cce4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cce6:	2310      	movs	r3, #16
 800cce8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800ccf0:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	f003 0307 	and.w	r3, r3, #7
 800ccf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800cd00:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	f003 0307 	and.w	r3, r3, #7
 800cd08:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd0a:	7bbb      	ldrb	r3, [r7, #14]
 800cd0c:	7b3a      	ldrb	r2, [r7, #12]
 800cd0e:	4910      	ldr	r1, [pc, #64]	; (800cd50 <USARTEx_SetNbDataToProcess+0x8c>)
 800cd10:	5c8a      	ldrb	r2, [r1, r2]
 800cd12:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800cd16:	7b3a      	ldrb	r2, [r7, #12]
 800cd18:	490e      	ldr	r1, [pc, #56]	; (800cd54 <USARTEx_SetNbDataToProcess+0x90>)
 800cd1a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd26:	7bfb      	ldrb	r3, [r7, #15]
 800cd28:	7b7a      	ldrb	r2, [r7, #13]
 800cd2a:	4909      	ldr	r1, [pc, #36]	; (800cd50 <USARTEx_SetNbDataToProcess+0x8c>)
 800cd2c:	5c8a      	ldrb	r2, [r1, r2]
 800cd2e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800cd32:	7b7a      	ldrb	r2, [r7, #13]
 800cd34:	4907      	ldr	r1, [pc, #28]	; (800cd54 <USARTEx_SetNbDataToProcess+0x90>)
 800cd36:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd38:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800cd42:	bf00      	nop
 800cd44:	3714      	adds	r7, #20
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	0800d7dc 	.word	0x0800d7dc
 800cd54:	0800d7e4 	.word	0x0800d7e4

0800cd58 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cd58:	b084      	sub	sp, #16
 800cd5a:	b480      	push	{r7}
 800cd5c:	b085      	sub	sp, #20
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	f107 001c 	add.w	r0, r7, #28
 800cd66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800cd6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800cd70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800cd72:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800cd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800cd76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800cd7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800cd7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	685a      	ldr	r2, [r3, #4]
 800cd8a:	4b07      	ldr	r3, [pc, #28]	; (800cda8 <SDMMC_Init+0x50>)
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	431a      	orrs	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3714      	adds	r7, #20
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	b004      	add	sp, #16
 800cda4:	4770      	bx	lr
 800cda6:	bf00      	nop
 800cda8:	ffc02c00 	.word	0xffc02c00

0800cdac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b083      	sub	sp, #12
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f043 0203 	orr.w	r2, r3, #3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 0303 	and.w	r3, r3, #3
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ce22:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ce28:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ce2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	4b06      	ldr	r3, [pc, #24]	; (800ce54 <SDMMC_SendCommand+0x50>)
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	431a      	orrs	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	fffee0c0 	.word	0xfffee0c0

0800ce58 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	691b      	ldr	r3, [r3, #16]
 800ce64:	b2db      	uxtb	r3, r3
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr

0800ce72 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ce72:	b480      	push	{r7}
 800ce74:	b085      	sub	sp, #20
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
 800ce7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	3314      	adds	r3, #20
 800ce80:	461a      	mov	r2, r3
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	4413      	add	r3, r2
 800ce86:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cebe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800cec4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ceca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	4313      	orrs	r3, r2
 800ced0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	431a      	orrs	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cee2:	2300      	movs	r3, #0

}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3714      	adds	r7, #20
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b088      	sub	sp, #32
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cefe:	2310      	movs	r3, #16
 800cf00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf12:	f107 0308 	add.w	r3, r7, #8
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f7ff ff73 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cf1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf22:	2110      	movs	r1, #16
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 f995 	bl	800d254 <SDMMC_GetCmdResp1>
 800cf2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf2c:	69fb      	ldr	r3, [r7, #28]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3720      	adds	r7, #32
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b088      	sub	sp, #32
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cf44:	2307      	movs	r3, #7
 800cf46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf58:	f107 0308 	add.w	r3, r7, #8
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7ff ff50 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cf64:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf68:	2107      	movs	r1, #7
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 f972 	bl	800d254 <SDMMC_GetCmdResp1>
 800cf70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf72:	69fb      	ldr	r3, [r7, #28]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3720      	adds	r7, #32
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b088      	sub	sp, #32
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cf84:	2300      	movs	r3, #0
 800cf86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf90:	2300      	movs	r3, #0
 800cf92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf9a:	f107 0308 	add.w	r3, r7, #8
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f7ff ff2f 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 fb96 	bl	800d6d8 <SDMMC_GetCmdError>
 800cfac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfae:	69fb      	ldr	r3, [r7, #28]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3720      	adds	r7, #32
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cfc0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cfc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cfc6:	2308      	movs	r3, #8
 800cfc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfda:	f107 0308 	add.w	r3, r7, #8
 800cfde:	4619      	mov	r1, r3
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff ff0f 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fb28 	bl	800d63c <SDMMC_GetCmdResp7>
 800cfec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfee:	69fb      	ldr	r3, [r7, #28]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3720      	adds	r7, #32
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d006:	2337      	movs	r3, #55	; 0x37
 800d008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d00a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d00e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d010:	2300      	movs	r3, #0
 800d012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d018:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d01a:	f107 0308 	add.w	r3, r7, #8
 800d01e:	4619      	mov	r1, r3
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff feef 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d026:	f241 3288 	movw	r2, #5000	; 0x1388
 800d02a:	2137      	movs	r1, #55	; 0x37
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 f911 	bl	800d254 <SDMMC_GetCmdResp1>
 800d032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d034:	69fb      	ldr	r3, [r7, #28]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3720      	adds	r7, #32
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b088      	sub	sp, #32
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d04c:	2329      	movs	r3, #41	; 0x29
 800d04e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d050:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d056:	2300      	movs	r3, #0
 800d058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d05a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d05e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d060:	f107 0308 	add.w	r3, r7, #8
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff fecc 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 fa2d 	bl	800d4cc <SDMMC_GetCmdResp3>
 800d072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d074:	69fb      	ldr	r3, [r7, #28]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3720      	adds	r7, #32
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b088      	sub	sp, #32
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d08c:	2306      	movs	r3, #6
 800d08e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d090:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d096:	2300      	movs	r3, #0
 800d098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d09a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d09e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0a0:	f107 0308 	add.w	r3, r7, #8
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7ff feac 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d0ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0b0:	2106      	movs	r1, #6
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f8ce 	bl	800d254 <SDMMC_GetCmdResp1>
 800d0b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0ba:	69fb      	ldr	r3, [r7, #28]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3720      	adds	r7, #32
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b088      	sub	sp, #32
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d0d0:	2333      	movs	r3, #51	; 0x33
 800d0d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0e4:	f107 0308 	add.w	r3, r7, #8
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff fe8a 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d0f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0f4:	2133      	movs	r1, #51	; 0x33
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f8ac 	bl	800d254 <SDMMC_GetCmdResp1>
 800d0fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0fe:	69fb      	ldr	r3, [r7, #28]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3720      	adds	r7, #32
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b088      	sub	sp, #32
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d110:	2300      	movs	r3, #0
 800d112:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d114:	2302      	movs	r3, #2
 800d116:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d118:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d11c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d11e:	2300      	movs	r3, #0
 800d120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d126:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d128:	f107 0308 	add.w	r3, r7, #8
 800d12c:	4619      	mov	r1, r3
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7ff fe68 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 f97f 	bl	800d438 <SDMMC_GetCmdResp2>
 800d13a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d13c:	69fb      	ldr	r3, [r7, #28]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3720      	adds	r7, #32
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b088      	sub	sp, #32
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d154:	2309      	movs	r3, #9
 800d156:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d158:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d15c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d15e:	2300      	movs	r3, #0
 800d160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d166:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d168:	f107 0308 	add.w	r3, r7, #8
 800d16c:	4619      	mov	r1, r3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7ff fe48 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 f95f 	bl	800d438 <SDMMC_GetCmdResp2>
 800d17a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d17c:	69fb      	ldr	r3, [r7, #28]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3720      	adds	r7, #32
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b088      	sub	sp, #32
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d190:	2300      	movs	r3, #0
 800d192:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d194:	2303      	movs	r3, #3
 800d196:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d19c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1a8:	f107 0308 	add.w	r3, r7, #8
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff fe28 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d1b4:	683a      	ldr	r2, [r7, #0]
 800d1b6:	2103      	movs	r1, #3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f9c7 	bl	800d54c <SDMMC_GetCmdResp6>
 800d1be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1c0:	69fb      	ldr	r3, [r7, #28]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3720      	adds	r7, #32
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b088      	sub	sp, #32
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
 800d1d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d1d8:	230d      	movs	r3, #13
 800d1da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1ec:	f107 0308 	add.w	r3, r7, #8
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7ff fe06 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d1f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1fc:	210d      	movs	r1, #13
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f828 	bl	800d254 <SDMMC_GetCmdResp1>
 800d204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d206:	69fb      	ldr	r3, [r7, #28]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3720      	adds	r7, #32
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b088      	sub	sp, #32
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d218:	2300      	movs	r3, #0
 800d21a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d21c:	230d      	movs	r3, #13
 800d21e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d220:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d226:	2300      	movs	r3, #0
 800d228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d22a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d22e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d230:	f107 0308 	add.w	r3, r7, #8
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f7ff fde4 	bl	800ce04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d240:	210d      	movs	r1, #13
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f806 	bl	800d254 <SDMMC_GetCmdResp1>
 800d248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d24a:	69fb      	ldr	r3, [r7, #28]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3720      	adds	r7, #32
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b088      	sub	sp, #32
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	460b      	mov	r3, r1
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d262:	4b70      	ldr	r3, [pc, #448]	; (800d424 <SDMMC_GetCmdResp1+0x1d0>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a70      	ldr	r2, [pc, #448]	; (800d428 <SDMMC_GetCmdResp1+0x1d4>)
 800d268:	fba2 2303 	umull	r2, r3, r2, r3
 800d26c:	0a5a      	lsrs	r2, r3, #9
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	fb02 f303 	mul.w	r3, r2, r3
 800d274:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	1e5a      	subs	r2, r3, #1
 800d27a:	61fa      	str	r2, [r7, #28]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d102      	bne.n	800d286 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d284:	e0c9      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d28c:	69ba      	ldr	r2, [r7, #24]
 800d28e:	4b67      	ldr	r3, [pc, #412]	; (800d42c <SDMMC_GetCmdResp1+0x1d8>)
 800d290:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d292:	2b00      	cmp	r3, #0
 800d294:	d0ef      	beq.n	800d276 <SDMMC_GetCmdResp1+0x22>
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1ea      	bne.n	800d276 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a4:	f003 0304 	and.w	r3, r3, #4
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d004      	beq.n	800d2b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2204      	movs	r2, #4
 800d2b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2b2:	2304      	movs	r3, #4
 800d2b4:	e0b1      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ba:	f003 0301 	and.w	r3, r3, #1
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d004      	beq.n	800d2cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e0a6      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	4a58      	ldr	r2, [pc, #352]	; (800d430 <SDMMC_GetCmdResp1+0x1dc>)
 800d2d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f7ff fdc0 	bl	800ce58 <SDMMC_GetCommandResponse>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	461a      	mov	r2, r3
 800d2dc:	7afb      	ldrb	r3, [r7, #11]
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d001      	beq.n	800d2e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e099      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f7ff fdc2 	bl	800ce72 <SDMMC_GetResponse>
 800d2ee:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d2f0:	697a      	ldr	r2, [r7, #20]
 800d2f2:	4b50      	ldr	r3, [pc, #320]	; (800d434 <SDMMC_GetCmdResp1+0x1e0>)
 800d2f4:	4013      	ands	r3, r2
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e08d      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	2b00      	cmp	r3, #0
 800d302:	da02      	bge.n	800d30a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d308:	e087      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d314:	2340      	movs	r3, #64	; 0x40
 800d316:	e080      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d322:	2380      	movs	r3, #128	; 0x80
 800d324:	e079      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d330:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d334:	e071      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d002      	beq.n	800d346 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d340:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d344:	e069      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d002      	beq.n	800d356 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d354:	e061      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d364:	e059      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d002      	beq.n	800d376 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d374:	e051      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d002      	beq.n	800d386 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d384:	e049      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d390:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d394:	e041      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d3a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3a4:	e039      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d3b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d3b4:	e031      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d3c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d3c4:	e029      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d3d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d3d4:	e021      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d3e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d3e4:	e019      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d3f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d3f4:	e011      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d400:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d404:	e009      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	f003 0308 	and.w	r3, r3, #8
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d410:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d414:	e001      	b.n	800d41a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3720      	adds	r7, #32
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	24000000 	.word	0x24000000
 800d428:	10624dd3 	.word	0x10624dd3
 800d42c:	00200045 	.word	0x00200045
 800d430:	002000c5 	.word	0x002000c5
 800d434:	fdffe008 	.word	0xfdffe008

0800d438 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d438:	b480      	push	{r7}
 800d43a:	b085      	sub	sp, #20
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d440:	4b1f      	ldr	r3, [pc, #124]	; (800d4c0 <SDMMC_GetCmdResp2+0x88>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a1f      	ldr	r2, [pc, #124]	; (800d4c4 <SDMMC_GetCmdResp2+0x8c>)
 800d446:	fba2 2303 	umull	r2, r3, r2, r3
 800d44a:	0a5b      	lsrs	r3, r3, #9
 800d44c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d450:	fb02 f303 	mul.w	r3, r2, r3
 800d454:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	1e5a      	subs	r2, r3, #1
 800d45a:	60fa      	str	r2, [r7, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d102      	bne.n	800d466 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d460:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d464:	e026      	b.n	800d4b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d46a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d472:	2b00      	cmp	r3, #0
 800d474:	d0ef      	beq.n	800d456 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1ea      	bne.n	800d456 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d484:	f003 0304 	and.w	r3, r3, #4
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d004      	beq.n	800d496 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2204      	movs	r2, #4
 800d490:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d492:	2304      	movs	r3, #4
 800d494:	e00e      	b.n	800d4b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49a:	f003 0301 	and.w	r3, r3, #1
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d004      	beq.n	800d4ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e003      	b.n	800d4b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4a06      	ldr	r2, [pc, #24]	; (800d4c8 <SDMMC_GetCmdResp2+0x90>)
 800d4b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr
 800d4c0:	24000000 	.word	0x24000000
 800d4c4:	10624dd3 	.word	0x10624dd3
 800d4c8:	002000c5 	.word	0x002000c5

0800d4cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d4d4:	4b1a      	ldr	r3, [pc, #104]	; (800d540 <SDMMC_GetCmdResp3+0x74>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a1a      	ldr	r2, [pc, #104]	; (800d544 <SDMMC_GetCmdResp3+0x78>)
 800d4da:	fba2 2303 	umull	r2, r3, r2, r3
 800d4de:	0a5b      	lsrs	r3, r3, #9
 800d4e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4e4:	fb02 f303 	mul.w	r3, r2, r3
 800d4e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	1e5a      	subs	r2, r3, #1
 800d4ee:	60fa      	str	r2, [r7, #12]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d102      	bne.n	800d4fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4f8:	e01b      	b.n	800d532 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d506:	2b00      	cmp	r3, #0
 800d508:	d0ef      	beq.n	800d4ea <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1ea      	bne.n	800d4ea <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d518:	f003 0304 	and.w	r3, r3, #4
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d004      	beq.n	800d52a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2204      	movs	r2, #4
 800d524:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d526:	2304      	movs	r3, #4
 800d528:	e003      	b.n	800d532 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4a06      	ldr	r2, [pc, #24]	; (800d548 <SDMMC_GetCmdResp3+0x7c>)
 800d52e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3714      	adds	r7, #20
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	24000000 	.word	0x24000000
 800d544:	10624dd3 	.word	0x10624dd3
 800d548:	002000c5 	.word	0x002000c5

0800d54c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b088      	sub	sp, #32
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	460b      	mov	r3, r1
 800d556:	607a      	str	r2, [r7, #4]
 800d558:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d55a:	4b35      	ldr	r3, [pc, #212]	; (800d630 <SDMMC_GetCmdResp6+0xe4>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a35      	ldr	r2, [pc, #212]	; (800d634 <SDMMC_GetCmdResp6+0xe8>)
 800d560:	fba2 2303 	umull	r2, r3, r2, r3
 800d564:	0a5b      	lsrs	r3, r3, #9
 800d566:	f241 3288 	movw	r2, #5000	; 0x1388
 800d56a:	fb02 f303 	mul.w	r3, r2, r3
 800d56e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	1e5a      	subs	r2, r3, #1
 800d574:	61fa      	str	r2, [r7, #28]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d102      	bne.n	800d580 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d57a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d57e:	e052      	b.n	800d626 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d584:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d0ef      	beq.n	800d570 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1ea      	bne.n	800d570 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59e:	f003 0304 	and.w	r3, r3, #4
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d004      	beq.n	800d5b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2204      	movs	r2, #4
 800d5aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5ac:	2304      	movs	r3, #4
 800d5ae:	e03a      	b.n	800d626 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b4:	f003 0301 	and.w	r3, r3, #1
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d004      	beq.n	800d5c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e02f      	b.n	800d626 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff fc46 	bl	800ce58 <SDMMC_GetCommandResponse>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	7afb      	ldrb	r3, [r7, #11]
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d001      	beq.n	800d5da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e025      	b.n	800d626 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	4a16      	ldr	r2, [pc, #88]	; (800d638 <SDMMC_GetCmdResp6+0xec>)
 800d5de:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f7ff fc45 	bl	800ce72 <SDMMC_GetResponse>
 800d5e8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d106      	bne.n	800d602 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	0c1b      	lsrs	r3, r3, #16
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d5fe:	2300      	movs	r3, #0
 800d600:	e011      	b.n	800d626 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d60c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d610:	e009      	b.n	800d626 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d002      	beq.n	800d622 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d61c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d620:	e001      	b.n	800d626 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d626:	4618      	mov	r0, r3
 800d628:	3720      	adds	r7, #32
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	24000000 	.word	0x24000000
 800d634:	10624dd3 	.word	0x10624dd3
 800d638:	002000c5 	.word	0x002000c5

0800d63c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d644:	4b22      	ldr	r3, [pc, #136]	; (800d6d0 <SDMMC_GetCmdResp7+0x94>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a22      	ldr	r2, [pc, #136]	; (800d6d4 <SDMMC_GetCmdResp7+0x98>)
 800d64a:	fba2 2303 	umull	r2, r3, r2, r3
 800d64e:	0a5b      	lsrs	r3, r3, #9
 800d650:	f241 3288 	movw	r2, #5000	; 0x1388
 800d654:	fb02 f303 	mul.w	r3, r2, r3
 800d658:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	1e5a      	subs	r2, r3, #1
 800d65e:	60fa      	str	r2, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d102      	bne.n	800d66a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d664:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d668:	e02c      	b.n	800d6c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d676:	2b00      	cmp	r3, #0
 800d678:	d0ef      	beq.n	800d65a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1ea      	bne.n	800d65a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d688:	f003 0304 	and.w	r3, r3, #4
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d004      	beq.n	800d69a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2204      	movs	r2, #4
 800d694:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d696:	2304      	movs	r3, #4
 800d698:	e014      	b.n	800d6c4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d69e:	f003 0301 	and.w	r3, r3, #1
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d004      	beq.n	800d6b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e009      	b.n	800d6c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d002      	beq.n	800d6c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2240      	movs	r2, #64	; 0x40
 800d6c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d6c2:	2300      	movs	r3, #0

}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	24000000 	.word	0x24000000
 800d6d4:	10624dd3 	.word	0x10624dd3

0800d6d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b085      	sub	sp, #20
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d6e0:	4b11      	ldr	r3, [pc, #68]	; (800d728 <SDMMC_GetCmdError+0x50>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4a11      	ldr	r2, [pc, #68]	; (800d72c <SDMMC_GetCmdError+0x54>)
 800d6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6ea:	0a5b      	lsrs	r3, r3, #9
 800d6ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6f0:	fb02 f303 	mul.w	r3, r2, r3
 800d6f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	1e5a      	subs	r2, r3, #1
 800d6fa:	60fa      	str	r2, [r7, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d102      	bne.n	800d706 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d704:	e009      	b.n	800d71a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d0f1      	beq.n	800d6f6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	4a06      	ldr	r2, [pc, #24]	; (800d730 <SDMMC_GetCmdError+0x58>)
 800d716:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3714      	adds	r7, #20
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	24000000 	.word	0x24000000
 800d72c:	10624dd3 	.word	0x10624dd3
 800d730:	002000c5 	.word	0x002000c5

0800d734 <memset>:
 800d734:	4402      	add	r2, r0
 800d736:	4603      	mov	r3, r0
 800d738:	4293      	cmp	r3, r2
 800d73a:	d100      	bne.n	800d73e <memset+0xa>
 800d73c:	4770      	bx	lr
 800d73e:	f803 1b01 	strb.w	r1, [r3], #1
 800d742:	e7f9      	b.n	800d738 <memset+0x4>

0800d744 <__libc_init_array>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	4d0d      	ldr	r5, [pc, #52]	; (800d77c <__libc_init_array+0x38>)
 800d748:	4c0d      	ldr	r4, [pc, #52]	; (800d780 <__libc_init_array+0x3c>)
 800d74a:	1b64      	subs	r4, r4, r5
 800d74c:	10a4      	asrs	r4, r4, #2
 800d74e:	2600      	movs	r6, #0
 800d750:	42a6      	cmp	r6, r4
 800d752:	d109      	bne.n	800d768 <__libc_init_array+0x24>
 800d754:	4d0b      	ldr	r5, [pc, #44]	; (800d784 <__libc_init_array+0x40>)
 800d756:	4c0c      	ldr	r4, [pc, #48]	; (800d788 <__libc_init_array+0x44>)
 800d758:	f000 f818 	bl	800d78c <_init>
 800d75c:	1b64      	subs	r4, r4, r5
 800d75e:	10a4      	asrs	r4, r4, #2
 800d760:	2600      	movs	r6, #0
 800d762:	42a6      	cmp	r6, r4
 800d764:	d105      	bne.n	800d772 <__libc_init_array+0x2e>
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	f855 3b04 	ldr.w	r3, [r5], #4
 800d76c:	4798      	blx	r3
 800d76e:	3601      	adds	r6, #1
 800d770:	e7ee      	b.n	800d750 <__libc_init_array+0xc>
 800d772:	f855 3b04 	ldr.w	r3, [r5], #4
 800d776:	4798      	blx	r3
 800d778:	3601      	adds	r6, #1
 800d77a:	e7f2      	b.n	800d762 <__libc_init_array+0x1e>
 800d77c:	0800d7f4 	.word	0x0800d7f4
 800d780:	0800d7f4 	.word	0x0800d7f4
 800d784:	0800d7f4 	.word	0x0800d7f4
 800d788:	0800d7f8 	.word	0x0800d7f8

0800d78c <_init>:
 800d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78e:	bf00      	nop
 800d790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d792:	bc08      	pop	{r3}
 800d794:	469e      	mov	lr, r3
 800d796:	4770      	bx	lr

0800d798 <_fini>:
 800d798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79a:	bf00      	nop
 800d79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d79e:	bc08      	pop	{r3}
 800d7a0:	469e      	mov	lr, r3
 800d7a2:	4770      	bx	lr
