
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109cc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08010ca0  08010ca0  00011ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080111a0  080111a0  000121a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080111a8  080111a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080111ac  080111ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  080111b0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000078c  240001d8  08011388  000131d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000964  08011388  00013964  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000131d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023374  00000000  00000000  00013206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004115  00000000  00000000  0003657a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ca0  00000000  00000000  0003a690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000165e  00000000  00000000  0003c330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00006771  00000000  00000000  0003d98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000295eb  00000000  00000000  000440ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00175b58  00000000  00000000  0006d6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e3242  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008e24  00000000  00000000  001e3288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000050  00000000  00000000  001ec0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010c84 	.word	0x08010c84

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	08010c84 	.word	0x08010c84

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ab0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ab4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ab8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac0:	e000      	b.n	8000ac4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ac2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ace:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	int i=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffc7 	bl	8000a98 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x16>
	}
	return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b28:	f000 fdb8 	bl	800169c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f001 fbd2 	bl	80022d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f830 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 fc94 	bl	8001460 <MX_GPIO_Init>
  MX_MDMA_Init();
 8000b38:	f000 fba6 	bl	8001288 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 8000b3c:	f000 f9b6 	bl	8000eac <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8000b40:	f000 f898 	bl	8000c74 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b44:	f000 f8d6 	bl	8000cf4 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000b48:	f000 f914 	bl	8000d74 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000b4c:	f000 f9cc 	bl	8000ee8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b50:	f000 fa20 	bl	8000f94 <MX_SPI2_Init>
  MX_UART8_Init();
 8000b54:	f000 fb00 	bl	8001158 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000b58:	f000 fb4a 	bl	80011f0 <MX_USART1_UART_Init>
  MX_SPI4_Init();
 8000b5c:	f000 fa70 	bl	8001040 <MX_SPI4_Init>
  MX_FATFS_Init();
 8000b60:	f00b fb58 	bl	800c214 <MX_FATFS_Init>
  MX_TIM6_Init();
 8000b64:	f000 fac2 	bl	80010ec <MX_TIM6_Init>
  MX_RTC_Init();
 8000b68:	f000 f944 	bl	8000df4 <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count++; //Increment count variable
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <main+0x68>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <main+0x68>)
 8000b74:	6013      	str	r3, [r2, #0]
//	  char temp_buf[200];
	  		// Use sprintf to format the device ID into the buffer
//	  sprintf(temp_buf, "USART: Hello World from Aerosentinel Argus Navigation Module! Count =%lu \n", count);
//	  UART_Transmit_P(temp_buf);
	  printf("Hello World from Aerosentinel Argus Navigation Module! Count =%lu \n", count); // Hello World Test
 8000b76:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <main+0x68>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <main+0x6c>)
 8000b7e:	f00c fda9 	bl	800d6d4 <iprintf>
	  HAL_Delay(250);
 8000b82:	20fa      	movs	r0, #250	@ 0xfa
 8000b84:	f001 fc38 	bl	80023f8 <HAL_Delay>
	  count++; //Increment count variable
 8000b88:	bf00      	nop
 8000b8a:	e7ef      	b.n	8000b6c <main+0x48>
 8000b8c:	240007e0 	.word	0x240007e0
 8000b90:	08010ce0 	.word	0x08010ce0

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09c      	sub	sp, #112	@ 0x70
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9e:	224c      	movs	r2, #76	@ 0x4c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f00c fea0 	bl	800d8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2220      	movs	r2, #32
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00c fe9a 	bl	800d8e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f003 f8c7 	bl	8003d48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <SystemClock_Config+0xdc>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8000c70 <SystemClock_Config+0xdc>)
 8000bc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <SystemClock_Config+0xdc>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd6:	bf00      	nop
 8000bd8:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <SystemClock_Config+0xdc>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000be4:	d1f8      	bne.n	8000bd8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000be6:	2309      	movs	r3, #9
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000c00:	231f      	movs	r3, #31
 8000c02:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c10:	230c      	movs	r3, #12
 8000c12:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000c18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 f8ca 	bl	8003dbc <HAL_RCC_OscConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c2e:	f000 fd61 	bl	80016f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c32:	233f      	movs	r3, #63	@ 0x3f
 8000c34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c36:	2303      	movs	r3, #3
 8000c38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c42:	2340      	movs	r3, #64	@ 0x40
 8000c44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c46:	2340      	movs	r3, #64	@ 0x40
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c50:	2340      	movs	r3, #64	@ 0x40
 8000c52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2103      	movs	r1, #3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 fc89 	bl	8004570 <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c64:	f000 fd46 	bl	80016f4 <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3770      	adds	r7, #112	@ 0x70
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	58024800 	.word	0x58024800

08000c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <MX_I2C1_Init+0x78>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c80:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf0 <MX_I2C1_Init+0x7c>)
 8000c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cae:	480e      	ldr	r0, [pc, #56]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cb0:	f002 fc8c 	bl	80035cc <HAL_I2C_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cba:	f000 fd1b 	bl	80016f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4809      	ldr	r0, [pc, #36]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cc2:	f002 fd1f 	bl	8003704 <HAL_I2CEx_ConfigAnalogFilter>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ccc:	f000 fd12 	bl	80016f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cd4:	f002 fd61 	bl	800379a <HAL_I2CEx_ConfigDigitalFilter>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 fd09 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	240001f4 	.word	0x240001f4
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	20a0a3f6 	.word	0x20a0a3f6

08000cf4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <MX_I2C2_Init+0x78>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d00:	4a1b      	ldr	r2, [pc, #108]	@ (8000d70 <MX_I2C2_Init+0x7c>)
 8000d02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d04:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d10:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d16:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d2e:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d30:	f002 fc4c 	bl	80035cc <HAL_I2C_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d3a:	f000 fcdb 	bl	80016f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d42:	f002 fcdf 	bl	8003704 <HAL_I2CEx_ConfigAnalogFilter>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d4c:	f000 fcd2 	bl	80016f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d50:	2100      	movs	r1, #0
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d54:	f002 fd21 	bl	800379a <HAL_I2CEx_ConfigDigitalFilter>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d5e:	f000 fcc9 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	24000248 	.word	0x24000248
 8000d6c:	40005800 	.word	0x40005800
 8000d70:	20a0a3f6 	.word	0x20a0a3f6

08000d74 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dec <MX_I2C4_Init+0x78>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000d80:	4a1b      	ldr	r2, [pc, #108]	@ (8000df0 <MX_I2C4_Init+0x7c>)
 8000d82:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000dae:	480e      	ldr	r0, [pc, #56]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000db0:	f002 fc0c 	bl	80035cc <HAL_I2C_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000dba:	f000 fc9b 	bl	80016f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000dbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dc2:	4809      	ldr	r0, [pc, #36]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000dc4:	f002 fc9e 	bl	8003704 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8000dce:	f000 fc91 	bl	80016f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <MX_I2C4_Init+0x74>)
 8000dd6:	f002 fce0 	bl	800379a <HAL_I2CEx_ConfigDigitalFilter>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000de0:	f000 fc88 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2400029c 	.word	0x2400029c
 8000dec:	58001c00 	.word	0x58001c00
 8000df0:	60405858 	.word	0x60405858

08000df4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e08:	2300      	movs	r3, #0
 8000e0a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e0e:	4a26      	ldr	r2, [pc, #152]	@ (8000ea8 <MX_RTC_Init+0xb4>)
 8000e10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e12:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e18:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e1a:	227f      	movs	r2, #127	@ 0x7f
 8000e1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e20:	22ff      	movs	r2, #255	@ 0xff
 8000e22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e3c:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e3e:	f006 fb09 	bl	8007454 <HAL_RTC_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000e48:	f000 fc54 	bl	80016f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2201      	movs	r2, #1
 8000e64:	4619      	mov	r1, r3
 8000e66:	480f      	ldr	r0, [pc, #60]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e68:	f006 fb76 	bl	8007558 <HAL_RTC_SetTime>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000e72:	f000 fc3f 	bl	80016f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e76:	2301      	movs	r3, #1
 8000e78:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <MX_RTC_Init+0xb0>)
 8000e8e:	f006 fc01 	bl	8007694 <HAL_RTC_SetDate>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000e98:	f000 fc2c 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	240002f0 	.word	0x240002f0
 8000ea8:	58004000 	.word	0x58004000

08000eac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <MX_SDMMC1_SD_Init+0x34>)
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <MX_SDMMC1_SD_Init+0x38>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <MX_SDMMC1_SD_Init+0x34>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <MX_SDMMC1_SD_Init+0x34>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <MX_SDMMC1_SD_Init+0x34>)
 8000ec4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ec8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000eca:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <MX_SDMMC1_SD_Init+0x34>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <MX_SDMMC1_SD_Init+0x34>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	24000314 	.word	0x24000314
 8000ee4:	52007000 	.word	0x52007000

08000ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b27      	ldr	r3, [pc, #156]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000eee:	4a28      	ldr	r2, [pc, #160]	@ (8000f90 <MX_SPI1_Init+0xa8>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000ef4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b24      	ldr	r3, [pc, #144]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b22      	ldr	r3, [pc, #136]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f02:	2207      	movs	r2, #7
 8000f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f06:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f14:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f1c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000f20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f40:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <MX_SPI1_Init+0xa4>)
 8000f7a:	f008 f92d 	bl	80091d8 <HAL_SPI_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f84:	f000 fbb6 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	24000390 	.word	0x24000390
 8000f90:	40013000 	.word	0x40013000

08000f94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f98:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000f9a:	4a28      	ldr	r2, [pc, #160]	@ (800103c <MX_SPI2_Init+0xa8>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fa0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fac:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fae:	2207      	movs	r2, #7
 8000fb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb2:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fc0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fc8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000fcc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fe8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fec:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <MX_SPI2_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8001014:	2200      	movs	r2, #0
 8001016:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <MX_SPI2_Init+0xa4>)
 800101a:	2200      	movs	r2, #0
 800101c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8001020:	2200      	movs	r2, #0
 8001022:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8001026:	f008 f8d7 	bl	80091d8 <HAL_SPI_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001030:	f000 fb60 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	24000418 	.word	0x24000418
 800103c:	40003800 	.word	0x40003800

08001040 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 8001046:	4a28      	ldr	r2, [pc, #160]	@ (80010e8 <MX_SPI4_Init+0xa8>)
 8001048:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 800104c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001050:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 800105a:	2207      	movs	r2, #7
 800105c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105e:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 800106c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001070:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 8001074:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001078:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001098:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800109a:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_SPI4_Init+0xa4>)
 80010d2:	f008 f881 	bl	80091d8 <HAL_SPI_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80010dc:	f000 fb0a 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	240004a0 	.word	0x240004a0
 80010e8:	40013400 	.word	0x40013400

080010ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_TIM6_Init+0x64>)
 80010fe:	4a15      	ldr	r2, [pc, #84]	@ (8001154 <MX_TIM6_Init+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 49999;
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <MX_TIM6_Init+0x64>)
 8001104:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001108:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <MX_TIM6_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <MX_TIM6_Init+0x64>)
 8001112:	2209      	movs	r2, #9
 8001114:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <MX_TIM6_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <MX_TIM6_Init+0x64>)
 800111e:	f008 f99a 	bl	8009456 <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001128:	f000 fae4 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800112c:	2320      	movs	r3, #32
 800112e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <MX_TIM6_Init+0x64>)
 800113a:	f008 fbcf 	bl	80098dc <HAL_TIMEx_MasterConfigSynchronization>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001144:	f000 fad6 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	24000528 	.word	0x24000528
 8001154:	40001000 	.word	0x40001000

08001158 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <MX_UART8_Init+0x90>)
 800115e:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <MX_UART8_Init+0x94>)
 8001160:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001162:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <MX_UART8_Init+0x90>)
 8001164:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001168:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <MX_UART8_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <MX_UART8_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <MX_UART8_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <MX_UART8_Init+0x90>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <MX_UART8_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <MX_UART8_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MX_UART8_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_UART8_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <MX_UART8_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80011a0:	4811      	ldr	r0, [pc, #68]	@ (80011e8 <MX_UART8_Init+0x90>)
 80011a2:	f008 fc55 	bl	8009a50 <HAL_UART_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80011ac:	f000 faa2 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <MX_UART8_Init+0x90>)
 80011b4:	f00a f99a 	bl	800b4ec <HAL_UARTEx_SetTxFifoThreshold>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80011be:	f000 fa99 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <MX_UART8_Init+0x90>)
 80011c6:	f00a f9cf 	bl	800b568 <HAL_UARTEx_SetRxFifoThreshold>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f000 fa90 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_UART8_Init+0x90>)
 80011d6:	f00a f950 	bl	800b47a <HAL_UARTEx_DisableFifoMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f000 fa88 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	24000574 	.word	0x24000574
 80011ec:	40007c00 	.word	0x40007c00

080011f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	@ (8001284 <MX_USART1_UART_Init+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001238:	4811      	ldr	r0, [pc, #68]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 800123a:	f008 fc09 	bl	8009a50 <HAL_UART_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 fa56 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 800124c:	f00a f94e 	bl	800b4ec <HAL_UARTEx_SetTxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001256:	f000 fa4d 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4808      	ldr	r0, [pc, #32]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 800125e:	f00a f983 	bl	800b568 <HAL_UARTEx_SetRxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001268:	f000 fa44 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_USART1_UART_Init+0x90>)
 800126e:	f00a f904 	bl	800b47a <HAL_UARTEx_DisableFifoMode>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 fa3c 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	24000608 	.word	0x24000608
 8001284:	40011000 	.word	0x40011000

08001288 <MX_MDMA_Init>:
  *   hmdma_mdma_channel0_sdmmc1_command_end_0
  *   hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0
  *   hmdma_mdma_channel2_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800128e:	4b6d      	ldr	r3, [pc, #436]	@ (8001444 <MX_MDMA_Init+0x1bc>)
 8001290:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001294:	4a6b      	ldr	r2, [pc, #428]	@ (8001444 <MX_MDMA_Init+0x1bc>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800129e:	4b69      	ldr	r3, [pc, #420]	@ (8001444 <MX_MDMA_Init+0x1bc>)
 80012a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sdmmc1_command_end_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sdmmc1_command_end_0.Instance = MDMA_Channel0;
 80012ac:	4b66      	ldr	r3, [pc, #408]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012ae:	4a67      	ldr	r2, [pc, #412]	@ (800144c <MX_MDMA_Init+0x1c4>)
 80012b0:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.Request = MDMA_REQUEST_SDMMC1_COMMAND_END;
 80012b2:	4b65      	ldr	r3, [pc, #404]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012b4:	221f      	movs	r2, #31
 80012b6:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80012b8:	4b63      	ldr	r3, [pc, #396]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.Priority = MDMA_PRIORITY_LOW;
 80012be:	4b62      	ldr	r3, [pc, #392]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80012c4:	4b60      	ldr	r3, [pc, #384]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80012ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80012d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012d2:	2208      	movs	r2, #8
 80012d4:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80012d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80012dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80012e2:	4b59      	ldr	r3, [pc, #356]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.BufferTransferLength = 1;
 80012ea:	4b57      	ldr	r3, [pc, #348]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80012f0:	4b55      	ldr	r3, [pc, #340]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80012f6:	4b54      	ldr	r3, [pc, #336]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceBlockAddressOffset = 0;
 80012fc:	4b52      	ldr	r3, [pc, #328]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestBlockAddressOffset = 0;
 8001302:	4b51      	ldr	r3, [pc, #324]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 8001304:	2200      	movs	r2, #0
 8001306:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sdmmc1_command_end_0) != HAL_OK)
 8001308:	484f      	ldr	r0, [pc, #316]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 800130a:	f002 fa92 	bl	8003832 <HAL_MDMA_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8001314:	f000 f9ee 	bl	80016f4 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel0_sdmmc1_command_end_0, 0, 0) != HAL_OK)
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	484a      	ldr	r0, [pc, #296]	@ (8001448 <MX_MDMA_Init+0x1c0>)
 800131e:	f002 fad4 	bl	80038ca <HAL_MDMA_ConfigPostRequestMask>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8001328:	f000 f9e4 	bl	80016f4 <Error_Handler>
  }

  /* Configure MDMA channel MDMA_Channel1 */
  /* Configure MDMA request hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0 on MDMA_Channel1 */
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Instance = MDMA_Channel1;
 800132c:	4b48      	ldr	r3, [pc, #288]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 800132e:	4a49      	ldr	r2, [pc, #292]	@ (8001454 <MX_MDMA_Init+0x1cc>)
 8001330:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.Request = MDMA_REQUEST_SDMMC1_DMA_ENDBUFFER;
 8001332:	4b47      	ldr	r3, [pc, #284]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 8001334:	221e      	movs	r2, #30
 8001336:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001338:	4b45      	ldr	r3, [pc, #276]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.Priority = MDMA_PRIORITY_LOW;
 800133e:	4b44      	ldr	r3, [pc, #272]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001344:	4b42      	ldr	r3, [pc, #264]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800134a:	4b41      	ldr	r3, [pc, #260]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 800134c:	2202      	movs	r2, #2
 800134e:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001350:	4b3f      	ldr	r3, [pc, #252]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 8001352:	2208      	movs	r2, #8
 8001354:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001356:	4b3e      	ldr	r3, [pc, #248]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800135c:	4b3c      	ldr	r3, [pc, #240]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001362:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 8001364:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001368:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.BufferTransferLength = 1;
 800136a:	4b39      	ldr	r3, [pc, #228]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 800136c:	2201      	movs	r2, #1
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001370:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 8001372:	2200      	movs	r2, #0
 8001374:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001376:	4b36      	ldr	r3, [pc, #216]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 8001378:	2200      	movs	r2, #0
 800137a:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.SourceBlockAddressOffset = 0;
 800137c:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 800137e:	2200      	movs	r2, #0
 8001380:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0.Init.DestBlockAddressOffset = 0;
 8001382:	4b33      	ldr	r3, [pc, #204]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 8001384:	2200      	movs	r2, #0
 8001386:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0) != HAL_OK)
 8001388:	4831      	ldr	r0, [pc, #196]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 800138a:	f002 fa52 	bl	8003832 <HAL_MDMA_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_MDMA_Init+0x110>
  {
    Error_Handler();
 8001394:	f000 f9ae 	bl	80016f4 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0, 0, 0) != HAL_OK)
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	482c      	ldr	r0, [pc, #176]	@ (8001450 <MX_MDMA_Init+0x1c8>)
 800139e:	f002 fa94 	bl	80038ca <HAL_MDMA_ConfigPostRequestMask>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_MDMA_Init+0x124>
  {
    Error_Handler();
 80013a8:	f000 f9a4 	bl	80016f4 <Error_Handler>
  }

  /* Configure MDMA channel MDMA_Channel2 */
  /* Configure MDMA request hmdma_mdma_channel2_sdmmc1_end_data_0 on MDMA_Channel2 */
  hmdma_mdma_channel2_sdmmc1_end_data_0.Instance = MDMA_Channel2;
 80013ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013ae:	4a2b      	ldr	r2, [pc, #172]	@ (800145c <MX_MDMA_Init+0x1d4>)
 80013b0:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 80013b2:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013b4:	221d      	movs	r2, #29
 80013b6:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 80013be:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80013ca:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013d2:	2208      	movs	r2, #8
 80013d4:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 80013fc:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel2_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 8001404:	2200      	movs	r2, #0
 8001406:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel2_sdmmc1_end_data_0) != HAL_OK)
 8001408:	4813      	ldr	r0, [pc, #76]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 800140a:	f002 fa12 	bl	8003832 <HAL_MDMA_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_MDMA_Init+0x190>
  {
    Error_Handler();
 8001414:	f000 f96e 	bl	80016f4 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel2_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	480e      	ldr	r0, [pc, #56]	@ (8001458 <MX_MDMA_Init+0x1d0>)
 800141e:	f002 fa54 	bl	80038ca <HAL_MDMA_ConfigPostRequestMask>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_MDMA_Init+0x1a4>
  {
    Error_Handler();
 8001428:	f000 f964 	bl	80016f4 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	207a      	movs	r0, #122	@ 0x7a
 8001432:	f001 f8e0 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001436:	207a      	movs	r0, #122	@ 0x7a
 8001438:	f001 f8f7 	bl	800262a <HAL_NVIC_EnableIRQ>

}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	58024400 	.word	0x58024400
 8001448:	2400069c 	.word	0x2400069c
 800144c:	52000040 	.word	0x52000040
 8001450:	24000708 	.word	0x24000708
 8001454:	52000080 	.word	0x52000080
 8001458:	24000774 	.word	0x24000774
 800145c:	520000c0 	.word	0x520000c0

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	@ 0x30
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	4b83      	ldr	r3, [pc, #524]	@ (8001684 <MX_GPIO_Init+0x224>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147c:	4a81      	ldr	r2, [pc, #516]	@ (8001684 <MX_GPIO_Init+0x224>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001486:	4b7f      	ldr	r3, [pc, #508]	@ (8001684 <MX_GPIO_Init+0x224>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001494:	4b7b      	ldr	r3, [pc, #492]	@ (8001684 <MX_GPIO_Init+0x224>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149a:	4a7a      	ldr	r2, [pc, #488]	@ (8001684 <MX_GPIO_Init+0x224>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a4:	4b77      	ldr	r3, [pc, #476]	@ (8001684 <MX_GPIO_Init+0x224>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b74      	ldr	r3, [pc, #464]	@ (8001684 <MX_GPIO_Init+0x224>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b8:	4a72      	ldr	r2, [pc, #456]	@ (8001684 <MX_GPIO_Init+0x224>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014c2:	4b70      	ldr	r3, [pc, #448]	@ (8001684 <MX_GPIO_Init+0x224>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001684 <MX_GPIO_Init+0x224>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d6:	4a6b      	ldr	r2, [pc, #428]	@ (8001684 <MX_GPIO_Init+0x224>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e0:	4b68      	ldr	r3, [pc, #416]	@ (8001684 <MX_GPIO_Init+0x224>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ee:	4b65      	ldr	r3, [pc, #404]	@ (8001684 <MX_GPIO_Init+0x224>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f4:	4a63      	ldr	r2, [pc, #396]	@ (8001684 <MX_GPIO_Init+0x224>)
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014fe:	4b61      	ldr	r3, [pc, #388]	@ (8001684 <MX_GPIO_Init+0x224>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150c:	4b5d      	ldr	r3, [pc, #372]	@ (8001684 <MX_GPIO_Init+0x224>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	4a5c      	ldr	r2, [pc, #368]	@ (8001684 <MX_GPIO_Init+0x224>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800151c:	4b59      	ldr	r3, [pc, #356]	@ (8001684 <MX_GPIO_Init+0x224>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2110      	movs	r1, #16
 800152e:	4856      	ldr	r0, [pc, #344]	@ (8001688 <MX_GPIO_Init+0x228>)
 8001530:	f002 f832 	bl	8003598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2110      	movs	r1, #16
 8001538:	4854      	ldr	r0, [pc, #336]	@ (800168c <MX_GPIO_Init+0x22c>)
 800153a:	f002 f82d 	bl	8003598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001544:	4852      	ldr	r0, [pc, #328]	@ (8001690 <MX_GPIO_Init+0x230>)
 8001546:	f002 f827 	bl	8003598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800154a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	484d      	ldr	r0, [pc, #308]	@ (8001694 <MX_GPIO_Init+0x234>)
 8001560:	f001 fe5a 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001564:	2310      	movs	r3, #16
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001570:	2302      	movs	r3, #2
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4843      	ldr	r0, [pc, #268]	@ (8001688 <MX_GPIO_Init+0x228>)
 800157c:	f001 fe4c 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001580:	2302      	movs	r3, #2
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	4841      	ldr	r0, [pc, #260]	@ (8001698 <MX_GPIO_Init+0x238>)
 8001594:	f001 fe40 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	483a      	ldr	r0, [pc, #232]	@ (8001694 <MX_GPIO_Init+0x234>)
 80015ac:	f001 fe34 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015b0:	2308      	movs	r3, #8
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b4:	2303      	movs	r3, #3
 80015b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4834      	ldr	r0, [pc, #208]	@ (8001694 <MX_GPIO_Init+0x234>)
 80015c4:	f001 fe28 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 80015c8:	2310      	movs	r3, #16
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	482b      	ldr	r0, [pc, #172]	@ (800168c <MX_GPIO_Init+0x22c>)
 80015e0:	f001 fe1a 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015e4:	2304      	movs	r3, #4
 80015e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e8:	2303      	movs	r3, #3
 80015ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4826      	ldr	r0, [pc, #152]	@ (8001690 <MX_GPIO_Init+0x230>)
 80015f8:	f001 fe0e 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 80015fc:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	481d      	ldr	r0, [pc, #116]	@ (8001688 <MX_GPIO_Init+0x228>)
 8001612:	f001 fe01 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 8001616:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4818      	ldr	r0, [pc, #96]	@ (8001690 <MX_GPIO_Init+0x230>)
 8001630:	f001 fdf2 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001634:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	4619      	mov	r1, r3
 8001648:	480f      	ldr	r0, [pc, #60]	@ (8001688 <MX_GPIO_Init+0x228>)
 800164a:	f001 fde5 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800164e:	2308      	movs	r3, #8
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	480a      	ldr	r0, [pc, #40]	@ (800168c <MX_GPIO_Init+0x22c>)
 8001662:	f001 fdd9 	bl	8003218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800166c:	4808      	ldr	r0, [pc, #32]	@ (8001690 <MX_GPIO_Init+0x230>)
 800166e:	f001 ff93 	bl	8003598 <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2110      	movs	r1, #16
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_GPIO_Init+0x22c>)
 8001678:	f001 ff8e 	bl	8003598 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 800167c:	bf00      	nop
 800167e:	3730      	adds	r7, #48	@ 0x30
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58024400 	.word	0x58024400
 8001688:	58021000 	.word	0x58021000
 800168c:	58020000 	.word	0x58020000
 8001690:	58020400 	.word	0x58020400
 8001694:	58020800 	.word	0x58020800
 8001698:	58020c00 	.word	0x58020c00

0800169c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80016a2:	463b      	mov	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80016ae:	f000 ffd7 	bl	8002660 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016be:	231f      	movs	r3, #31
 80016c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80016c2:	2387      	movs	r3, #135	@ 0x87
 80016c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016ca:	2300      	movs	r3, #0
 80016cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016ce:	2301      	movs	r3, #1
 80016d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016de:	463b      	mov	r3, r7
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fff5 	bl	80026d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016e6:	2004      	movs	r0, #4
 80016e8:	f000 ffd2 	bl	8002690 <HAL_MPU_Enable>

}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <Error_Handler+0x8>

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_MspInit+0x30>)
 8001708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800170c:	4a08      	ldr	r2, [pc, #32]	@ (8001730 <HAL_MspInit+0x30>)
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_MspInit+0x30>)
 8001718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	58024400 	.word	0x58024400

08001734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0bc      	sub	sp, #240	@ 0xf0
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	22b8      	movs	r2, #184	@ 0xb8
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f00c f8c7 	bl	800d8e8 <memset>
  if(hi2c->Instance==I2C1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a74      	ldr	r2, [pc, #464]	@ (8001930 <HAL_I2C_MspInit+0x1fc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d147      	bne.n	80017f4 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001764:	f04f 0208 	mov.w	r2, #8
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fa84 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001786:	f7ff ffb5 	bl	80016f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	4b6a      	ldr	r3, [pc, #424]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001790:	4a68      	ldr	r2, [pc, #416]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800179a:	4b66      	ldr	r3, [pc, #408]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80017a8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b0:	2312      	movs	r3, #18
 80017b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c2:	2304      	movs	r3, #4
 80017c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017cc:	4619      	mov	r1, r3
 80017ce:	485a      	ldr	r0, [pc, #360]	@ (8001938 <HAL_I2C_MspInit+0x204>)
 80017d0:	f001 fd22 	bl	8003218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d4:	4b57      	ldr	r3, [pc, #348]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 80017d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017da:	4a56      	ldr	r2, [pc, #344]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 80017dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017e4:	4b53      	ldr	r3, [pc, #332]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 80017e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80017f2:	e098      	b.n	8001926 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a50      	ldr	r2, [pc, #320]	@ (800193c <HAL_I2C_MspInit+0x208>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d147      	bne.n	800188e <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017fe:	f04f 0208 	mov.w	r2, #8
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fa37 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001820:	f7ff ff68 	bl	80016f4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	4b43      	ldr	r3, [pc, #268]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182a:	4a42      	ldr	r2, [pc, #264]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001834:	4b3f      	ldr	r3, [pc, #252]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001842:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001846:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800185c:	2304      	movs	r3, #4
 800185e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001866:	4619      	mov	r1, r3
 8001868:	4833      	ldr	r0, [pc, #204]	@ (8001938 <HAL_I2C_MspInit+0x204>)
 800186a:	f001 fcd5 	bl	8003218 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800186e:	4b31      	ldr	r3, [pc, #196]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 8001870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001874:	4a2f      	ldr	r2, [pc, #188]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 8001876:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800187a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800187e:	4b2d      	ldr	r3, [pc, #180]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 8001880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
}
 800188c:	e04b      	b.n	8001926 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a2b      	ldr	r2, [pc, #172]	@ (8001940 <HAL_I2C_MspInit+0x20c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d146      	bne.n	8001926 <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001898:	f04f 0210 	mov.w	r2, #16
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 f9ea 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 80018ba:	f7ff ff1b 	bl	80016f4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ce:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80018dc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80018e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e4:	2312      	movs	r3, #18
 80018e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80018f6:	2304      	movs	r3, #4
 80018f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001900:	4619      	mov	r1, r3
 8001902:	4810      	ldr	r0, [pc, #64]	@ (8001944 <HAL_I2C_MspInit+0x210>)
 8001904:	f001 fc88 	bl	8003218 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001908:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 800190a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800190e:	4a09      	ldr	r2, [pc, #36]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001914:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_I2C_MspInit+0x200>)
 800191a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800191e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
}
 8001926:	bf00      	nop
 8001928:	37f0      	adds	r7, #240	@ 0xf0
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40005400 	.word	0x40005400
 8001934:	58024400 	.word	0x58024400
 8001938:	58020400 	.word	0x58020400
 800193c:	40005800 	.word	0x40005800
 8001940:	58001c00 	.word	0x58001c00
 8001944:	58020c00 	.word	0x58020c00

08001948 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b0b0      	sub	sp, #192	@ 0xc0
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	22b8      	movs	r2, #184	@ 0xb8
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f00b ffc5 	bl	800d8e8 <memset>
  if(hrtc->Instance==RTC)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <HAL_RTC_MspInit+0x5c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d119      	bne.n	800199c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001968:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001974:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	4618      	mov	r0, r3
 8001982:	f003 f981 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800198c:	f7ff feb2 	bl	80016f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <HAL_RTC_MspInit+0x60>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <HAL_RTC_MspInit+0x60>)
 8001996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800199a:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800199c:	bf00      	nop
 800199e:	37c0      	adds	r7, #192	@ 0xc0
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	58004000 	.word	0x58004000
 80019a8:	58024400 	.word	0x58024400

080019ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b0ba      	sub	sp, #232	@ 0xe8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 0318 	add.w	r3, r7, #24
 80019c8:	22b8      	movs	r2, #184	@ 0xb8
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f00b ff8b 	bl	800d8e8 <memset>
  if(hsd->Instance==SDMMC1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a45      	ldr	r2, [pc, #276]	@ (8001aec <HAL_SD_MspInit+0x140>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	f040 8083 	bne.w	8001ae4 <HAL_SD_MspInit+0x138>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80019de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 3;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80019ee:	230c      	movs	r3, #12
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80019f2:	2302      	movs	r3, #2
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019f6:	2302      	movs	r3, #2
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019fe:	23c0      	movs	r3, #192	@ 0xc0
 8001a00:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001a0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 f937 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_SD_MspInit+0x78>
    {
      Error_Handler();
 8001a20:	f7ff fe68 	bl	80016f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001a24:	4b32      	ldr	r3, [pc, #200]	@ (8001af0 <HAL_SD_MspInit+0x144>)
 8001a26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a2a:	4a31      	ldr	r2, [pc, #196]	@ (8001af0 <HAL_SD_MspInit+0x144>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001a34:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <HAL_SD_MspInit+0x144>)
 8001a36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	4b2b      	ldr	r3, [pc, #172]	@ (8001af0 <HAL_SD_MspInit+0x144>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a48:	4a29      	ldr	r2, [pc, #164]	@ (8001af0 <HAL_SD_MspInit+0x144>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a52:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <HAL_SD_MspInit+0x144>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a60:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_SD_MspInit+0x144>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a66:	4a22      	ldr	r2, [pc, #136]	@ (8001af0 <HAL_SD_MspInit+0x144>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a70:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <HAL_SD_MspInit+0x144>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a96:	230c      	movs	r3, #12
 8001a98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4814      	ldr	r0, [pc, #80]	@ (8001af4 <HAL_SD_MspInit+0x148>)
 8001aa4:	f001 fbb8 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8001aa8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001aac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001acc:	4619      	mov	r1, r3
 8001ace:	480a      	ldr	r0, [pc, #40]	@ (8001af8 <HAL_SD_MspInit+0x14c>)
 8001ad0:	f001 fba2 	bl	8003218 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2031      	movs	r0, #49	@ 0x31
 8001ada:	f000 fd8c 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001ade:	2031      	movs	r0, #49	@ 0x31
 8001ae0:	f000 fda3 	bl	800262a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001ae4:	bf00      	nop
 8001ae6:	37e8      	adds	r7, #232	@ 0xe8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	52007000 	.word	0x52007000
 8001af0:	58024400 	.word	0x58024400
 8001af4:	58020c00 	.word	0x58020c00
 8001af8:	58020800 	.word	0x58020800

08001afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0be      	sub	sp, #248	@ 0xf8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b18:	22b8      	movs	r2, #184	@ 0xb8
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00b fee3 	bl	800d8e8 <memset>
  if(hspi->Instance==SPI1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a97      	ldr	r2, [pc, #604]	@ (8001d84 <HAL_SPI_MspInit+0x288>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d16a      	bne.n	8001c02 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001b2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 f8a0 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001b4e:	f7ff fdd1 	bl	80016f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b52:	4b8d      	ldr	r3, [pc, #564]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b58:	4a8b      	ldr	r2, [pc, #556]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001b5a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b62:	4b89      	ldr	r3, [pc, #548]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	4b85      	ldr	r3, [pc, #532]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b76:	4a84      	ldr	r2, [pc, #528]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b80:	4b81      	ldr	r3, [pc, #516]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	623b      	str	r3, [r7, #32]
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b94:	4a7c      	ldr	r2, [pc, #496]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bac:	2310      	movs	r3, #16
 8001bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bc4:	2305      	movs	r3, #5
 8001bc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	486e      	ldr	r0, [pc, #440]	@ (8001d8c <HAL_SPI_MspInit+0x290>)
 8001bd2:	f001 fb21 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bd6:	23a0      	movs	r3, #160	@ 0xa0
 8001bd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4865      	ldr	r0, [pc, #404]	@ (8001d90 <HAL_SPI_MspInit+0x294>)
 8001bfc:	f001 fb0c 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001c00:	e0bb      	b.n	8001d7a <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a63      	ldr	r2, [pc, #396]	@ (8001d94 <HAL_SPI_MspInit+0x298>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d16b      	bne.n	8001ce4 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f830 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8001c2e:	f7ff fd61 	bl	80016f4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c32:	4b55      	ldr	r3, [pc, #340]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c38:	4a53      	ldr	r2, [pc, #332]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001c3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c42:	4b51      	ldr	r3, [pc, #324]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b4d      	ldr	r3, [pc, #308]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c56:	4a4c      	ldr	r2, [pc, #304]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c60:	4b49      	ldr	r3, [pc, #292]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	4b46      	ldr	r3, [pc, #280]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c74:	4a44      	ldr	r2, [pc, #272]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c7e:	4b42      	ldr	r3, [pc, #264]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4837      	ldr	r0, [pc, #220]	@ (8001d90 <HAL_SPI_MspInit+0x294>)
 8001cb4:	f001 fab0 	bl	8003218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8001cb8:	2306      	movs	r3, #6
 8001cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	482e      	ldr	r0, [pc, #184]	@ (8001d98 <HAL_SPI_MspInit+0x29c>)
 8001cde:	f001 fa9b 	bl	8003218 <HAL_GPIO_Init>
}
 8001ce2:	e04a      	b.n	8001d7a <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8001d9c <HAL_SPI_MspInit+0x2a0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d145      	bne.n	8001d7a <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001cee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 ffbf 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 8001d10:	f7ff fcf0 	bl	80016f4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d14:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001d1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d24:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d38:	4a13      	ldr	r2, [pc, #76]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001d3a:	f043 0310 	orr.w	r3, r3, #16
 8001d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_SPI_MspInit+0x28c>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d50:	2364      	movs	r3, #100	@ 0x64
 8001d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d68:	2305      	movs	r3, #5
 8001d6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d6e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d72:	4619      	mov	r1, r3
 8001d74:	480a      	ldr	r0, [pc, #40]	@ (8001da0 <HAL_SPI_MspInit+0x2a4>)
 8001d76:	f001 fa4f 	bl	8003218 <HAL_GPIO_Init>
}
 8001d7a:	bf00      	nop
 8001d7c:	37f8      	adds	r7, #248	@ 0xf8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40013000 	.word	0x40013000
 8001d88:	58024400 	.word	0x58024400
 8001d8c:	58020400 	.word	0x58020400
 8001d90:	58020000 	.word	0x58020000
 8001d94:	40003800 	.word	0x40003800
 8001d98:	58020800 	.word	0x58020800
 8001d9c:	40013400 	.word	0x40013400
 8001da0:	58021000 	.word	0x58021000

08001da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0e      	ldr	r2, [pc, #56]	@ (8001dec <HAL_TIM_Base_MspInit+0x48>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d116      	bne.n	8001de4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <HAL_TIM_Base_MspInit+0x4c>)
 8001db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <HAL_TIM_Base_MspInit+0x4c>)
 8001dbe:	f043 0310 	orr.w	r3, r3, #16
 8001dc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_TIM_Base_MspInit+0x4c>)
 8001dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2036      	movs	r0, #54	@ 0x36
 8001dda:	f000 fc0c 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dde:	2036      	movs	r0, #54	@ 0x36
 8001de0:	f000 fc23 	bl	800262a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40001000 	.word	0x40001000
 8001df0:	58024400 	.word	0x58024400

08001df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b0ba      	sub	sp, #232	@ 0xe8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e0c:	f107 0318 	add.w	r3, r7, #24
 8001e10:	22b8      	movs	r2, #184	@ 0xb8
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f00b fd67 	bl	800d8e8 <memset>
  if(huart->Instance==UART8)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a51      	ldr	r2, [pc, #324]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d14e      	bne.n	8001ec2 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001e24:	f04f 0202 	mov.w	r2, #2
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 ff24 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001e46:	f7ff fc55 	bl	80016f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001e4a:	4b47      	ldr	r3, [pc, #284]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e50:	4a45      	ldr	r2, [pc, #276]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001e52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e5a:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e68:	4b3f      	ldr	r3, [pc, #252]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e78:	4b3b      	ldr	r3, [pc, #236]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001e86:	2303      	movs	r3, #3
 8001e88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4830      	ldr	r0, [pc, #192]	@ (8001f6c <HAL_UART_MspInit+0x178>)
 8001eac:	f001 f9b4 	bl	8003218 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2053      	movs	r0, #83	@ 0x53
 8001eb6:	f000 fb9e 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001eba:	2053      	movs	r0, #83	@ 0x53
 8001ebc:	f000 fbb5 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ec0:	e04b      	b.n	8001f5a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f70 <HAL_UART_MspInit+0x17c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d146      	bne.n	8001f5a <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ecc:	f04f 0201 	mov.w	r2, #1
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ede:	f107 0318 	add.w	r3, r7, #24
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fed0 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8001eee:	f7ff fc01 	bl	80016f4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001efa:	f043 0310 	orr.w	r3, r3, #16
 8001efe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f16:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f2e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f48:	2307      	movs	r3, #7
 8001f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4807      	ldr	r0, [pc, #28]	@ (8001f74 <HAL_UART_MspInit+0x180>)
 8001f56:	f001 f95f 	bl	8003218 <HAL_GPIO_Init>
}
 8001f5a:	bf00      	nop
 8001f5c:	37e8      	adds	r7, #232	@ 0xe8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40007c00 	.word	0x40007c00
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	58021000 	.word	0x58021000
 8001f70:	40011000 	.word	0x40011000
 8001f74:	58020000 	.word	0x58020000

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <NMI_Handler+0x4>

08001f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <MemManage_Handler+0x4>

08001f90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <UsageFault_Handler+0x4>

08001fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fce:	f000 f9f3 	bl	80023b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <SDMMC1_IRQHandler+0x10>)
 8001fde:	f005 ff07 	bl	8007df0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	24000314 	.word	0x24000314

08001fec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <TIM6_DAC_IRQHandler+0x10>)
 8001ff2:	f007 fa87 	bl	8009504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	24000528 	.word	0x24000528

08002000 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <UART8_IRQHandler+0x10>)
 8002006:	f007 fd73 	bl	8009af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	24000574 	.word	0x24000574

08002014 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_sdmmc1_command_end_0);
 8002018:	4805      	ldr	r0, [pc, #20]	@ (8002030 <MDMA_IRQHandler+0x1c>)
 800201a:	f001 fca9 	bl	8003970 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel1_sdmmc1_dma_endbuffer_0);
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <MDMA_IRQHandler+0x20>)
 8002020:	f001 fca6 	bl	8003970 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel2_sdmmc1_end_data_0);
 8002024:	4804      	ldr	r0, [pc, #16]	@ (8002038 <MDMA_IRQHandler+0x24>)
 8002026:	f001 fca3 	bl	8003970 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2400069c 	.word	0x2400069c
 8002034:	24000708 	.word	0x24000708
 8002038:	24000774 	.word	0x24000774

0800203c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return 1;
 8002040:	2301      	movs	r3, #1
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_kill>:

int _kill(int pid, int sig)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002056:	f00b fcbb 	bl	800d9d0 <__errno>
 800205a:	4603      	mov	r3, r0
 800205c:	2216      	movs	r2, #22
 800205e:	601a      	str	r2, [r3, #0]
  return -1;
 8002060:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_exit>:

void _exit (int status)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ffe7 	bl	800204c <_kill>
  while (1) {}    /* Make sure we hang here */
 800207e:	bf00      	nop
 8002080:	e7fd      	b.n	800207e <_exit+0x12>

08002082 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e00a      	b.n	80020aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002094:	f3af 8000 	nop.w
 8002098:	4601      	mov	r1, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	60ba      	str	r2, [r7, #8]
 80020a0:	b2ca      	uxtb	r2, r1
 80020a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3301      	adds	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	dbf0      	blt.n	8002094 <_read+0x12>
  }

  return len;
 80020b2:	687b      	ldr	r3, [r7, #4]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_close>:
  }
  return len;
}

int _close(int file)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e4:	605a      	str	r2, [r3, #4]
  return 0;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_isatty>:

int _isatty(int file)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800212c:	4a14      	ldr	r2, [pc, #80]	@ (8002180 <_sbrk+0x5c>)
 800212e:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <_sbrk+0x60>)
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002138:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <_sbrk+0x64>)
 8002142:	4a12      	ldr	r2, [pc, #72]	@ (800218c <_sbrk+0x68>)
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d207      	bcs.n	8002164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002154:	f00b fc3c 	bl	800d9d0 <__errno>
 8002158:	4603      	mov	r3, r0
 800215a:	220c      	movs	r2, #12
 800215c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	e009      	b.n	8002178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002164:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216a:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	4a05      	ldr	r2, [pc, #20]	@ (8002188 <_sbrk+0x64>)
 8002174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	24050000 	.word	0x24050000
 8002184:	00000400 	.word	0x00000400
 8002188:	240007e4 	.word	0x240007e4
 800218c:	24000968 	.word	0x24000968

08002190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002194:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <SystemInit+0xd0>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219a:	4a31      	ldr	r2, [pc, #196]	@ (8002260 <SystemInit+0xd0>)
 800219c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002264 <SystemInit+0xd4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	2b06      	cmp	r3, #6
 80021ae:	d807      	bhi.n	80021c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002264 <SystemInit+0xd4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 030f 	bic.w	r3, r3, #15
 80021b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002264 <SystemInit+0xd4>)
 80021ba:	f043 0307 	orr.w	r3, r3, #7
 80021be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021c0:	4b29      	ldr	r3, [pc, #164]	@ (8002268 <SystemInit+0xd8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a28      	ldr	r2, [pc, #160]	@ (8002268 <SystemInit+0xd8>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021cc:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <SystemInit+0xd8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021d2:	4b25      	ldr	r3, [pc, #148]	@ (8002268 <SystemInit+0xd8>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4924      	ldr	r1, [pc, #144]	@ (8002268 <SystemInit+0xd8>)
 80021d8:	4b24      	ldr	r3, [pc, #144]	@ (800226c <SystemInit+0xdc>)
 80021da:	4013      	ands	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021de:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <SystemInit+0xd4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <SystemInit+0xd4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 030f 	bic.w	r3, r3, #15
 80021f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002264 <SystemInit+0xd4>)
 80021f4:	f043 0307 	orr.w	r3, r3, #7
 80021f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80021fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <SystemInit+0xd8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002200:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <SystemInit+0xd8>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <SystemInit+0xd8>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800220c:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <SystemInit+0xd8>)
 800220e:	4a18      	ldr	r2, [pc, #96]	@ (8002270 <SystemInit+0xe0>)
 8002210:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <SystemInit+0xd8>)
 8002214:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <SystemInit+0xe4>)
 8002216:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002218:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <SystemInit+0xd8>)
 800221a:	4a17      	ldr	r2, [pc, #92]	@ (8002278 <SystemInit+0xe8>)
 800221c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <SystemInit+0xd8>)
 8002220:	2200      	movs	r2, #0
 8002222:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002224:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <SystemInit+0xd8>)
 8002226:	4a14      	ldr	r2, [pc, #80]	@ (8002278 <SystemInit+0xe8>)
 8002228:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800222a:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <SystemInit+0xd8>)
 800222c:	2200      	movs	r2, #0
 800222e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002230:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <SystemInit+0xd8>)
 8002232:	4a11      	ldr	r2, [pc, #68]	@ (8002278 <SystemInit+0xe8>)
 8002234:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002236:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <SystemInit+0xd8>)
 8002238:	2200      	movs	r2, #0
 800223a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800223c:	4b0a      	ldr	r3, [pc, #40]	@ (8002268 <SystemInit+0xd8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <SystemInit+0xd8>)
 8002242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002246:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002248:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <SystemInit+0xd8>)
 800224a:	2200      	movs	r2, #0
 800224c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <SystemInit+0xec>)
 8002250:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002254:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00
 8002264:	52002000 	.word	0x52002000
 8002268:	58024400 	.word	0x58024400
 800226c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002270:	02020200 	.word	0x02020200
 8002274:	01ff0000 	.word	0x01ff0000
 8002278:	01010280 	.word	0x01010280
 800227c:	52004000 	.word	0x52004000

08002280 <Reset_Handler>:
 8002280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b8 <LoopFillZerobss+0xe>
 8002284:	f7ff ff84 	bl	8002190 <SystemInit>
 8002288:	480c      	ldr	r0, [pc, #48]	@ (80022bc <LoopFillZerobss+0x12>)
 800228a:	490d      	ldr	r1, [pc, #52]	@ (80022c0 <LoopFillZerobss+0x16>)
 800228c:	4a0d      	ldr	r2, [pc, #52]	@ (80022c4 <LoopFillZerobss+0x1a>)
 800228e:	2300      	movs	r3, #0
 8002290:	e002      	b.n	8002298 <LoopCopyDataInit>

08002292 <CopyDataInit>:
 8002292:	58d4      	ldr	r4, [r2, r3]
 8002294:	50c4      	str	r4, [r0, r3]
 8002296:	3304      	adds	r3, #4

08002298 <LoopCopyDataInit>:
 8002298:	18c4      	adds	r4, r0, r3
 800229a:	428c      	cmp	r4, r1
 800229c:	d3f9      	bcc.n	8002292 <CopyDataInit>
 800229e:	4a0a      	ldr	r2, [pc, #40]	@ (80022c8 <LoopFillZerobss+0x1e>)
 80022a0:	4c0a      	ldr	r4, [pc, #40]	@ (80022cc <LoopFillZerobss+0x22>)
 80022a2:	2300      	movs	r3, #0
 80022a4:	e001      	b.n	80022aa <LoopFillZerobss>

080022a6 <FillZerobss>:
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	3204      	adds	r2, #4

080022aa <LoopFillZerobss>:
 80022aa:	42a2      	cmp	r2, r4
 80022ac:	d3fb      	bcc.n	80022a6 <FillZerobss>
 80022ae:	f00b fb95 	bl	800d9dc <__libc_init_array>
 80022b2:	f7fe fc37 	bl	8000b24 <main>
 80022b6:	4770      	bx	lr
 80022b8:	24050000 	.word	0x24050000
 80022bc:	24000000 	.word	0x24000000
 80022c0:	240001d8 	.word	0x240001d8
 80022c4:	080111b0 	.word	0x080111b0
 80022c8:	240001d8 	.word	0x240001d8
 80022cc:	24000964 	.word	0x24000964

080022d0 <ADC3_IRQHandler>:
 80022d0:	e7fe      	b.n	80022d0 <ADC3_IRQHandler>
	...

080022d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022da:	2003      	movs	r0, #3
 80022dc:	f000 f980 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022e0:	f002 fafc 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_Init+0x68>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	4913      	ldr	r1, [pc, #76]	@ (8002340 <HAL_Init+0x6c>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022fe:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <HAL_Init+0x68>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	4a0e      	ldr	r2, [pc, #56]	@ (8002340 <HAL_Init+0x6c>)
 8002308:	5cd3      	ldrb	r3, [r2, r3]
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
 8002314:	4a0b      	ldr	r2, [pc, #44]	@ (8002344 <HAL_Init+0x70>)
 8002316:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002318:	4a0b      	ldr	r2, [pc, #44]	@ (8002348 <HAL_Init+0x74>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800231e:	200a      	movs	r0, #10
 8002320:	f000 f814 	bl	800234c <HAL_InitTick>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e002      	b.n	8002334 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800232e:	f7ff f9e7 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	58024400 	.word	0x58024400
 8002340:	08010d24 	.word	0x08010d24
 8002344:	24000004 	.word	0x24000004
 8002348:	24000000 	.word	0x24000000

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002354:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_InitTick+0x60>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e021      	b.n	80023a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <HAL_InitTick+0x64>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_InitTick+0x60>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800236e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f965 	bl	8002646 <HAL_SYSTICK_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00e      	b.n	80023a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d80a      	bhi.n	80023a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238c:	2200      	movs	r2, #0
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f000 f92f 	bl	80025f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002398:	4a06      	ldr	r2, [pc, #24]	@ (80023b4 <HAL_InitTick+0x68>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	2400000c 	.word	0x2400000c
 80023b0:	24000000 	.word	0x24000000
 80023b4:	24000008 	.word	0x24000008

080023b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_IncTick+0x20>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_IncTick+0x24>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <HAL_IncTick+0x24>)
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	2400000c 	.word	0x2400000c
 80023dc:	240007e8 	.word	0x240007e8

080023e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_GetTick+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	240007e8 	.word	0x240007e8

080023f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff ffee 	bl	80023e0 <HAL_GetTick>
 8002404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d005      	beq.n	800241e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <HAL_Delay+0x44>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241e:	bf00      	nop
 8002420:	f7ff ffde 	bl	80023e0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	429a      	cmp	r2, r3
 800242e:	d8f7      	bhi.n	8002420 <HAL_Delay+0x28>
  {
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2400000c 	.word	0x2400000c

08002440 <__NVIC_SetPriorityGrouping>:
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <__NVIC_SetPriorityGrouping+0x40>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	4313      	orrs	r3, r2
 800246c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246e:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <__NVIC_SetPriorityGrouping+0x40>)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	60d3      	str	r3, [r2, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00
 8002484:	05fa0000 	.word	0x05fa0000

08002488 <__NVIC_GetPriorityGrouping>:
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4907      	ldr	r1, [pc, #28]	@ (80024dc <__NVIC_EnableIRQ+0x38>)
 80024be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	@ (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	@ (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	@ 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	@ 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <SysTick_Config>:
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f7ff ff8e 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff29 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002604:	f7ff ff40 	bl	8002488 <__NVIC_GetPriorityGrouping>
 8002608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7ff ff90 	bl	8002534 <NVIC_EncodePriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff5f 	bl	80024e0 <__NVIC_SetPriority>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff33 	bl	80024a4 <__NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffa4 	bl	800259c <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002664:	f3bf 8f5f 	dmb	sy
}
 8002668:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800266a:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <HAL_MPU_Disable+0x28>)
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	4a06      	ldr	r2, [pc, #24]	@ (8002688 <HAL_MPU_Disable+0x28>)
 8002670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002674:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_MPU_Disable+0x2c>)
 8002678:	2200      	movs	r2, #0
 800267a:	605a      	str	r2, [r3, #4]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	e000ed90 	.word	0xe000ed90

08002690 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002698:	4a0b      	ldr	r2, [pc, #44]	@ (80026c8 <HAL_MPU_Enable+0x38>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80026a2:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <HAL_MPU_Enable+0x3c>)
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	4a09      	ldr	r2, [pc, #36]	@ (80026cc <HAL_MPU_Enable+0x3c>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80026ae:	f3bf 8f4f 	dsb	sy
}
 80026b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026b4:	f3bf 8f6f 	isb	sy
}
 80026b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000ed90 	.word	0xe000ed90
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	785a      	ldrb	r2, [r3, #1]
 80026dc:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <HAL_MPU_ConfigRegion+0x7c>)
 80026de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80026e0:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <HAL_MPU_ConfigRegion+0x7c>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4a19      	ldr	r2, [pc, #100]	@ (800274c <HAL_MPU_ConfigRegion+0x7c>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80026ec:	4a17      	ldr	r2, [pc, #92]	@ (800274c <HAL_MPU_ConfigRegion+0x7c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7b1b      	ldrb	r3, [r3, #12]
 80026f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7adb      	ldrb	r3, [r3, #11]
 80026fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002700:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7a9b      	ldrb	r3, [r3, #10]
 8002706:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7b5b      	ldrb	r3, [r3, #13]
 800270e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002710:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	7b9b      	ldrb	r3, [r3, #14]
 8002716:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002718:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7bdb      	ldrb	r3, [r3, #15]
 800271e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002720:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7a5b      	ldrb	r3, [r3, #9]
 8002726:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7a1b      	ldrb	r3, [r3, #8]
 800272e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002730:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002738:	4a04      	ldr	r2, [pc, #16]	@ (800274c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800273a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800273c:	6113      	str	r3, [r2, #16]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed90 	.word	0xe000ed90

08002750 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff fe42 	bl	80023e0 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e2dc      	b.n	8002d22 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d008      	beq.n	8002786 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2280      	movs	r2, #128	@ 0x80
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e2cd      	b.n	8002d22 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a76      	ldr	r2, [pc, #472]	@ (8002964 <HAL_DMA_Abort+0x214>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a74      	ldr	r2, [pc, #464]	@ (8002968 <HAL_DMA_Abort+0x218>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a73      	ldr	r2, [pc, #460]	@ (800296c <HAL_DMA_Abort+0x21c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a71      	ldr	r2, [pc, #452]	@ (8002970 <HAL_DMA_Abort+0x220>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a70      	ldr	r2, [pc, #448]	@ (8002974 <HAL_DMA_Abort+0x224>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002978 <HAL_DMA_Abort+0x228>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6d      	ldr	r2, [pc, #436]	@ (800297c <HAL_DMA_Abort+0x22c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002980 <HAL_DMA_Abort+0x230>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6a      	ldr	r2, [pc, #424]	@ (8002984 <HAL_DMA_Abort+0x234>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a68      	ldr	r2, [pc, #416]	@ (8002988 <HAL_DMA_Abort+0x238>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a67      	ldr	r2, [pc, #412]	@ (800298c <HAL_DMA_Abort+0x23c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a65      	ldr	r2, [pc, #404]	@ (8002990 <HAL_DMA_Abort+0x240>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a64      	ldr	r2, [pc, #400]	@ (8002994 <HAL_DMA_Abort+0x244>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a62      	ldr	r2, [pc, #392]	@ (8002998 <HAL_DMA_Abort+0x248>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a61      	ldr	r2, [pc, #388]	@ (800299c <HAL_DMA_Abort+0x24c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_Abort+0xd6>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5f      	ldr	r2, [pc, #380]	@ (80029a0 <HAL_DMA_Abort+0x250>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_DMA_Abort+0xda>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_DMA_Abort+0xdc>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d013      	beq.n	8002858 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 021e 	bic.w	r2, r2, #30
 800283e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800284e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	e00a      	b.n	800286e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 020e 	bic.w	r2, r2, #14
 8002866:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a3c      	ldr	r2, [pc, #240]	@ (8002964 <HAL_DMA_Abort+0x214>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d072      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3a      	ldr	r2, [pc, #232]	@ (8002968 <HAL_DMA_Abort+0x218>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d06d      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a39      	ldr	r2, [pc, #228]	@ (800296c <HAL_DMA_Abort+0x21c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d068      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a37      	ldr	r2, [pc, #220]	@ (8002970 <HAL_DMA_Abort+0x220>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d063      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a36      	ldr	r2, [pc, #216]	@ (8002974 <HAL_DMA_Abort+0x224>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d05e      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a34      	ldr	r2, [pc, #208]	@ (8002978 <HAL_DMA_Abort+0x228>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d059      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a33      	ldr	r2, [pc, #204]	@ (800297c <HAL_DMA_Abort+0x22c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d054      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a31      	ldr	r2, [pc, #196]	@ (8002980 <HAL_DMA_Abort+0x230>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d04f      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a30      	ldr	r2, [pc, #192]	@ (8002984 <HAL_DMA_Abort+0x234>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d04a      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002988 <HAL_DMA_Abort+0x238>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d045      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2d      	ldr	r2, [pc, #180]	@ (800298c <HAL_DMA_Abort+0x23c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d040      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002990 <HAL_DMA_Abort+0x240>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d03b      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002994 <HAL_DMA_Abort+0x244>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d036      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a28      	ldr	r2, [pc, #160]	@ (8002998 <HAL_DMA_Abort+0x248>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d031      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a27      	ldr	r2, [pc, #156]	@ (800299c <HAL_DMA_Abort+0x24c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d02c      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a25      	ldr	r2, [pc, #148]	@ (80029a0 <HAL_DMA_Abort+0x250>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d027      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a24      	ldr	r2, [pc, #144]	@ (80029a4 <HAL_DMA_Abort+0x254>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d022      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a22      	ldr	r2, [pc, #136]	@ (80029a8 <HAL_DMA_Abort+0x258>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01d      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a21      	ldr	r2, [pc, #132]	@ (80029ac <HAL_DMA_Abort+0x25c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d018      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1f      	ldr	r2, [pc, #124]	@ (80029b0 <HAL_DMA_Abort+0x260>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1e      	ldr	r2, [pc, #120]	@ (80029b4 <HAL_DMA_Abort+0x264>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00e      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1c      	ldr	r2, [pc, #112]	@ (80029b8 <HAL_DMA_Abort+0x268>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1b      	ldr	r2, [pc, #108]	@ (80029bc <HAL_DMA_Abort+0x26c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_DMA_Abort+0x20e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a19      	ldr	r2, [pc, #100]	@ (80029c0 <HAL_DMA_Abort+0x270>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d132      	bne.n	80029c4 <HAL_DMA_Abort+0x274>
 800295e:	2301      	movs	r3, #1
 8002960:	e031      	b.n	80029c6 <HAL_DMA_Abort+0x276>
 8002962:	bf00      	nop
 8002964:	40020010 	.word	0x40020010
 8002968:	40020028 	.word	0x40020028
 800296c:	40020040 	.word	0x40020040
 8002970:	40020058 	.word	0x40020058
 8002974:	40020070 	.word	0x40020070
 8002978:	40020088 	.word	0x40020088
 800297c:	400200a0 	.word	0x400200a0
 8002980:	400200b8 	.word	0x400200b8
 8002984:	40020410 	.word	0x40020410
 8002988:	40020428 	.word	0x40020428
 800298c:	40020440 	.word	0x40020440
 8002990:	40020458 	.word	0x40020458
 8002994:	40020470 	.word	0x40020470
 8002998:	40020488 	.word	0x40020488
 800299c:	400204a0 	.word	0x400204a0
 80029a0:	400204b8 	.word	0x400204b8
 80029a4:	58025408 	.word	0x58025408
 80029a8:	5802541c 	.word	0x5802541c
 80029ac:	58025430 	.word	0x58025430
 80029b0:	58025444 	.word	0x58025444
 80029b4:	58025458 	.word	0x58025458
 80029b8:	5802546c 	.word	0x5802546c
 80029bc:	58025480 	.word	0x58025480
 80029c0:	58025494 	.word	0x58025494
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6d      	ldr	r2, [pc, #436]	@ (8002b94 <HAL_DMA_Abort+0x444>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d04a      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a6b      	ldr	r2, [pc, #428]	@ (8002b98 <HAL_DMA_Abort+0x448>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d045      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6a      	ldr	r2, [pc, #424]	@ (8002b9c <HAL_DMA_Abort+0x44c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d040      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a68      	ldr	r2, [pc, #416]	@ (8002ba0 <HAL_DMA_Abort+0x450>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d03b      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a67      	ldr	r2, [pc, #412]	@ (8002ba4 <HAL_DMA_Abort+0x454>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d036      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a65      	ldr	r2, [pc, #404]	@ (8002ba8 <HAL_DMA_Abort+0x458>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d031      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a64      	ldr	r2, [pc, #400]	@ (8002bac <HAL_DMA_Abort+0x45c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d02c      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a62      	ldr	r2, [pc, #392]	@ (8002bb0 <HAL_DMA_Abort+0x460>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d027      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a61      	ldr	r2, [pc, #388]	@ (8002bb4 <HAL_DMA_Abort+0x464>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d022      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5f      	ldr	r2, [pc, #380]	@ (8002bb8 <HAL_DMA_Abort+0x468>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01d      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5e      	ldr	r2, [pc, #376]	@ (8002bbc <HAL_DMA_Abort+0x46c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d018      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5c      	ldr	r2, [pc, #368]	@ (8002bc0 <HAL_DMA_Abort+0x470>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5b      	ldr	r2, [pc, #364]	@ (8002bc4 <HAL_DMA_Abort+0x474>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a59      	ldr	r2, [pc, #356]	@ (8002bc8 <HAL_DMA_Abort+0x478>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a58      	ldr	r2, [pc, #352]	@ (8002bcc <HAL_DMA_Abort+0x47c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_DMA_Abort+0x32a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a56      	ldr	r2, [pc, #344]	@ (8002bd0 <HAL_DMA_Abort+0x480>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d108      	bne.n	8002a8c <HAL_DMA_Abort+0x33c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e007      	b.n	8002a9c <HAL_DMA_Abort+0x34c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0201 	bic.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a9c:	e013      	b.n	8002ac6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a9e:	f7ff fc9f 	bl	80023e0 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d90c      	bls.n	8002ac6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e12d      	b.n	8002d22 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e5      	bne.n	8002a9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b94 <HAL_DMA_Abort+0x444>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d04a      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b98 <HAL_DMA_Abort+0x448>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d045      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2c      	ldr	r2, [pc, #176]	@ (8002b9c <HAL_DMA_Abort+0x44c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d040      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba0 <HAL_DMA_Abort+0x450>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d03b      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a29      	ldr	r2, [pc, #164]	@ (8002ba4 <HAL_DMA_Abort+0x454>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d036      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a27      	ldr	r2, [pc, #156]	@ (8002ba8 <HAL_DMA_Abort+0x458>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d031      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a26      	ldr	r2, [pc, #152]	@ (8002bac <HAL_DMA_Abort+0x45c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d02c      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a24      	ldr	r2, [pc, #144]	@ (8002bb0 <HAL_DMA_Abort+0x460>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d027      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <HAL_DMA_Abort+0x464>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d022      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a21      	ldr	r2, [pc, #132]	@ (8002bb8 <HAL_DMA_Abort+0x468>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01d      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a20      	ldr	r2, [pc, #128]	@ (8002bbc <HAL_DMA_Abort+0x46c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d018      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc0 <HAL_DMA_Abort+0x470>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d013      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc4 <HAL_DMA_Abort+0x474>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00e      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc8 <HAL_DMA_Abort+0x478>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1a      	ldr	r2, [pc, #104]	@ (8002bcc <HAL_DMA_Abort+0x47c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d004      	beq.n	8002b72 <HAL_DMA_Abort+0x422>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a18      	ldr	r2, [pc, #96]	@ (8002bd0 <HAL_DMA_Abort+0x480>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Abort+0x426>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_DMA_Abort+0x428>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02b      	beq.n	8002bd4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	223f      	movs	r2, #63	@ 0x3f
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	e02a      	b.n	8002bea <HAL_DMA_Abort+0x49a>
 8002b94:	40020010 	.word	0x40020010
 8002b98:	40020028 	.word	0x40020028
 8002b9c:	40020040 	.word	0x40020040
 8002ba0:	40020058 	.word	0x40020058
 8002ba4:	40020070 	.word	0x40020070
 8002ba8:	40020088 	.word	0x40020088
 8002bac:	400200a0 	.word	0x400200a0
 8002bb0:	400200b8 	.word	0x400200b8
 8002bb4:	40020410 	.word	0x40020410
 8002bb8:	40020428 	.word	0x40020428
 8002bbc:	40020440 	.word	0x40020440
 8002bc0:	40020458 	.word	0x40020458
 8002bc4:	40020470 	.word	0x40020470
 8002bc8:	40020488 	.word	0x40020488
 8002bcc:	400204a0 	.word	0x400204a0
 8002bd0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	2201      	movs	r2, #1
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a4f      	ldr	r2, [pc, #316]	@ (8002d2c <HAL_DMA_Abort+0x5dc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d072      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d30 <HAL_DMA_Abort+0x5e0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d06d      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a4c      	ldr	r2, [pc, #304]	@ (8002d34 <HAL_DMA_Abort+0x5e4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d068      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d38 <HAL_DMA_Abort+0x5e8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d063      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a49      	ldr	r2, [pc, #292]	@ (8002d3c <HAL_DMA_Abort+0x5ec>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d05e      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a47      	ldr	r2, [pc, #284]	@ (8002d40 <HAL_DMA_Abort+0x5f0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d059      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a46      	ldr	r2, [pc, #280]	@ (8002d44 <HAL_DMA_Abort+0x5f4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d054      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a44      	ldr	r2, [pc, #272]	@ (8002d48 <HAL_DMA_Abort+0x5f8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04f      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a43      	ldr	r2, [pc, #268]	@ (8002d4c <HAL_DMA_Abort+0x5fc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d04a      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a41      	ldr	r2, [pc, #260]	@ (8002d50 <HAL_DMA_Abort+0x600>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d045      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a40      	ldr	r2, [pc, #256]	@ (8002d54 <HAL_DMA_Abort+0x604>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d040      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a3e      	ldr	r2, [pc, #248]	@ (8002d58 <HAL_DMA_Abort+0x608>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d03b      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a3d      	ldr	r2, [pc, #244]	@ (8002d5c <HAL_DMA_Abort+0x60c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d036      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3b      	ldr	r2, [pc, #236]	@ (8002d60 <HAL_DMA_Abort+0x610>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d031      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d64 <HAL_DMA_Abort+0x614>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d02c      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a38      	ldr	r2, [pc, #224]	@ (8002d68 <HAL_DMA_Abort+0x618>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d027      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a37      	ldr	r2, [pc, #220]	@ (8002d6c <HAL_DMA_Abort+0x61c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d022      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a35      	ldr	r2, [pc, #212]	@ (8002d70 <HAL_DMA_Abort+0x620>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01d      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a34      	ldr	r2, [pc, #208]	@ (8002d74 <HAL_DMA_Abort+0x624>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d018      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a32      	ldr	r2, [pc, #200]	@ (8002d78 <HAL_DMA_Abort+0x628>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a31      	ldr	r2, [pc, #196]	@ (8002d7c <HAL_DMA_Abort+0x62c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d80 <HAL_DMA_Abort+0x630>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d009      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2e      	ldr	r2, [pc, #184]	@ (8002d84 <HAL_DMA_Abort+0x634>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_DMA_Abort+0x58a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d88 <HAL_DMA_Abort+0x638>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_Abort+0x58e>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_DMA_Abort+0x590>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d015      	beq.n	8002d10 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00c      	beq.n	8002d10 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d04:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d0e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40020010 	.word	0x40020010
 8002d30:	40020028 	.word	0x40020028
 8002d34:	40020040 	.word	0x40020040
 8002d38:	40020058 	.word	0x40020058
 8002d3c:	40020070 	.word	0x40020070
 8002d40:	40020088 	.word	0x40020088
 8002d44:	400200a0 	.word	0x400200a0
 8002d48:	400200b8 	.word	0x400200b8
 8002d4c:	40020410 	.word	0x40020410
 8002d50:	40020428 	.word	0x40020428
 8002d54:	40020440 	.word	0x40020440
 8002d58:	40020458 	.word	0x40020458
 8002d5c:	40020470 	.word	0x40020470
 8002d60:	40020488 	.word	0x40020488
 8002d64:	400204a0 	.word	0x400204a0
 8002d68:	400204b8 	.word	0x400204b8
 8002d6c:	58025408 	.word	0x58025408
 8002d70:	5802541c 	.word	0x5802541c
 8002d74:	58025430 	.word	0x58025430
 8002d78:	58025444 	.word	0x58025444
 8002d7c:	58025458 	.word	0x58025458
 8002d80:	5802546c 	.word	0x5802546c
 8002d84:	58025480 	.word	0x58025480
 8002d88:	58025494 	.word	0x58025494

08002d8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e237      	b.n	800320e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d004      	beq.n	8002db4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2280      	movs	r2, #128	@ 0x80
 8002dae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e22c      	b.n	800320e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5c      	ldr	r2, [pc, #368]	@ (8002f2c <HAL_DMA_Abort_IT+0x1a0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04a      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f30 <HAL_DMA_Abort_IT+0x1a4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d045      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a59      	ldr	r2, [pc, #356]	@ (8002f34 <HAL_DMA_Abort_IT+0x1a8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d040      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a58      	ldr	r2, [pc, #352]	@ (8002f38 <HAL_DMA_Abort_IT+0x1ac>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d03b      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a56      	ldr	r2, [pc, #344]	@ (8002f3c <HAL_DMA_Abort_IT+0x1b0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d036      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a55      	ldr	r2, [pc, #340]	@ (8002f40 <HAL_DMA_Abort_IT+0x1b4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d031      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a53      	ldr	r2, [pc, #332]	@ (8002f44 <HAL_DMA_Abort_IT+0x1b8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02c      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a52      	ldr	r2, [pc, #328]	@ (8002f48 <HAL_DMA_Abort_IT+0x1bc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d027      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a50      	ldr	r2, [pc, #320]	@ (8002f4c <HAL_DMA_Abort_IT+0x1c0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d022      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a4f      	ldr	r2, [pc, #316]	@ (8002f50 <HAL_DMA_Abort_IT+0x1c4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01d      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f54 <HAL_DMA_Abort_IT+0x1c8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a4c      	ldr	r2, [pc, #304]	@ (8002f58 <HAL_DMA_Abort_IT+0x1cc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a4a      	ldr	r2, [pc, #296]	@ (8002f5c <HAL_DMA_Abort_IT+0x1d0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a49      	ldr	r2, [pc, #292]	@ (8002f60 <HAL_DMA_Abort_IT+0x1d4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a47      	ldr	r2, [pc, #284]	@ (8002f64 <HAL_DMA_Abort_IT+0x1d8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a46      	ldr	r2, [pc, #280]	@ (8002f68 <HAL_DMA_Abort_IT+0x1dc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_DMA_Abort_IT+0xcc>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_DMA_Abort_IT+0xce>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8086 	beq.w	8002f6c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2204      	movs	r2, #4
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f2c <HAL_DMA_Abort_IT+0x1a0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d04a      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2e      	ldr	r2, [pc, #184]	@ (8002f30 <HAL_DMA_Abort_IT+0x1a4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d045      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2c      	ldr	r2, [pc, #176]	@ (8002f34 <HAL_DMA_Abort_IT+0x1a8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d040      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f38 <HAL_DMA_Abort_IT+0x1ac>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d03b      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a29      	ldr	r2, [pc, #164]	@ (8002f3c <HAL_DMA_Abort_IT+0x1b0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d036      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a28      	ldr	r2, [pc, #160]	@ (8002f40 <HAL_DMA_Abort_IT+0x1b4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d031      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a26      	ldr	r2, [pc, #152]	@ (8002f44 <HAL_DMA_Abort_IT+0x1b8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d02c      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a25      	ldr	r2, [pc, #148]	@ (8002f48 <HAL_DMA_Abort_IT+0x1bc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d027      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a23      	ldr	r2, [pc, #140]	@ (8002f4c <HAL_DMA_Abort_IT+0x1c0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d022      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a22      	ldr	r2, [pc, #136]	@ (8002f50 <HAL_DMA_Abort_IT+0x1c4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d01d      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a20      	ldr	r2, [pc, #128]	@ (8002f54 <HAL_DMA_Abort_IT+0x1c8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d018      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1f      	ldr	r2, [pc, #124]	@ (8002f58 <HAL_DMA_Abort_IT+0x1cc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f5c <HAL_DMA_Abort_IT+0x1d0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00e      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1c      	ldr	r2, [pc, #112]	@ (8002f60 <HAL_DMA_Abort_IT+0x1d4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f64 <HAL_DMA_Abort_IT+0x1d8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x17c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a19      	ldr	r2, [pc, #100]	@ (8002f68 <HAL_DMA_Abort_IT+0x1dc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d108      	bne.n	8002f1a <HAL_DMA_Abort_IT+0x18e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e178      	b.n	800320c <HAL_DMA_Abort_IT+0x480>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e16f      	b.n	800320c <HAL_DMA_Abort_IT+0x480>
 8002f2c:	40020010 	.word	0x40020010
 8002f30:	40020028 	.word	0x40020028
 8002f34:	40020040 	.word	0x40020040
 8002f38:	40020058 	.word	0x40020058
 8002f3c:	40020070 	.word	0x40020070
 8002f40:	40020088 	.word	0x40020088
 8002f44:	400200a0 	.word	0x400200a0
 8002f48:	400200b8 	.word	0x400200b8
 8002f4c:	40020410 	.word	0x40020410
 8002f50:	40020428 	.word	0x40020428
 8002f54:	40020440 	.word	0x40020440
 8002f58:	40020458 	.word	0x40020458
 8002f5c:	40020470 	.word	0x40020470
 8002f60:	40020488 	.word	0x40020488
 8002f64:	400204a0 	.word	0x400204a0
 8002f68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 020e 	bic.w	r2, r2, #14
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6c      	ldr	r2, [pc, #432]	@ (8003134 <HAL_DMA_Abort_IT+0x3a8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d04a      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a6b      	ldr	r2, [pc, #428]	@ (8003138 <HAL_DMA_Abort_IT+0x3ac>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d045      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a69      	ldr	r2, [pc, #420]	@ (800313c <HAL_DMA_Abort_IT+0x3b0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d040      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a68      	ldr	r2, [pc, #416]	@ (8003140 <HAL_DMA_Abort_IT+0x3b4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d03b      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a66      	ldr	r2, [pc, #408]	@ (8003144 <HAL_DMA_Abort_IT+0x3b8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d036      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a65      	ldr	r2, [pc, #404]	@ (8003148 <HAL_DMA_Abort_IT+0x3bc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d031      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a63      	ldr	r2, [pc, #396]	@ (800314c <HAL_DMA_Abort_IT+0x3c0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02c      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a62      	ldr	r2, [pc, #392]	@ (8003150 <HAL_DMA_Abort_IT+0x3c4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d027      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a60      	ldr	r2, [pc, #384]	@ (8003154 <HAL_DMA_Abort_IT+0x3c8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d022      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a5f      	ldr	r2, [pc, #380]	@ (8003158 <HAL_DMA_Abort_IT+0x3cc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d01d      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800315c <HAL_DMA_Abort_IT+0x3d0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d018      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5c      	ldr	r2, [pc, #368]	@ (8003160 <HAL_DMA_Abort_IT+0x3d4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d013      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a5a      	ldr	r2, [pc, #360]	@ (8003164 <HAL_DMA_Abort_IT+0x3d8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00e      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a59      	ldr	r2, [pc, #356]	@ (8003168 <HAL_DMA_Abort_IT+0x3dc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a57      	ldr	r2, [pc, #348]	@ (800316c <HAL_DMA_Abort_IT+0x3e0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_DMA_Abort_IT+0x290>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a56      	ldr	r2, [pc, #344]	@ (8003170 <HAL_DMA_Abort_IT+0x3e4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d108      	bne.n	800302e <HAL_DMA_Abort_IT+0x2a2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e007      	b.n	800303e <HAL_DMA_Abort_IT+0x2b2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a3c      	ldr	r2, [pc, #240]	@ (8003134 <HAL_DMA_Abort_IT+0x3a8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d072      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a3a      	ldr	r2, [pc, #232]	@ (8003138 <HAL_DMA_Abort_IT+0x3ac>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d06d      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a39      	ldr	r2, [pc, #228]	@ (800313c <HAL_DMA_Abort_IT+0x3b0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d068      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a37      	ldr	r2, [pc, #220]	@ (8003140 <HAL_DMA_Abort_IT+0x3b4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d063      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a36      	ldr	r2, [pc, #216]	@ (8003144 <HAL_DMA_Abort_IT+0x3b8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d05e      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a34      	ldr	r2, [pc, #208]	@ (8003148 <HAL_DMA_Abort_IT+0x3bc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d059      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a33      	ldr	r2, [pc, #204]	@ (800314c <HAL_DMA_Abort_IT+0x3c0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d054      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a31      	ldr	r2, [pc, #196]	@ (8003150 <HAL_DMA_Abort_IT+0x3c4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d04f      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a30      	ldr	r2, [pc, #192]	@ (8003154 <HAL_DMA_Abort_IT+0x3c8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d04a      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a2e      	ldr	r2, [pc, #184]	@ (8003158 <HAL_DMA_Abort_IT+0x3cc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d045      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2d      	ldr	r2, [pc, #180]	@ (800315c <HAL_DMA_Abort_IT+0x3d0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d040      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003160 <HAL_DMA_Abort_IT+0x3d4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d03b      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003164 <HAL_DMA_Abort_IT+0x3d8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d036      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a28      	ldr	r2, [pc, #160]	@ (8003168 <HAL_DMA_Abort_IT+0x3dc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d031      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a27      	ldr	r2, [pc, #156]	@ (800316c <HAL_DMA_Abort_IT+0x3e0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d02c      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a25      	ldr	r2, [pc, #148]	@ (8003170 <HAL_DMA_Abort_IT+0x3e4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d027      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a24      	ldr	r2, [pc, #144]	@ (8003174 <HAL_DMA_Abort_IT+0x3e8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d022      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a22      	ldr	r2, [pc, #136]	@ (8003178 <HAL_DMA_Abort_IT+0x3ec>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01d      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a21      	ldr	r2, [pc, #132]	@ (800317c <HAL_DMA_Abort_IT+0x3f0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d018      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1f      	ldr	r2, [pc, #124]	@ (8003180 <HAL_DMA_Abort_IT+0x3f4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1e      	ldr	r2, [pc, #120]	@ (8003184 <HAL_DMA_Abort_IT+0x3f8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00e      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1c      	ldr	r2, [pc, #112]	@ (8003188 <HAL_DMA_Abort_IT+0x3fc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1b      	ldr	r2, [pc, #108]	@ (800318c <HAL_DMA_Abort_IT+0x400>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d004      	beq.n	800312e <HAL_DMA_Abort_IT+0x3a2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a19      	ldr	r2, [pc, #100]	@ (8003190 <HAL_DMA_Abort_IT+0x404>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d132      	bne.n	8003194 <HAL_DMA_Abort_IT+0x408>
 800312e:	2301      	movs	r3, #1
 8003130:	e031      	b.n	8003196 <HAL_DMA_Abort_IT+0x40a>
 8003132:	bf00      	nop
 8003134:	40020010 	.word	0x40020010
 8003138:	40020028 	.word	0x40020028
 800313c:	40020040 	.word	0x40020040
 8003140:	40020058 	.word	0x40020058
 8003144:	40020070 	.word	0x40020070
 8003148:	40020088 	.word	0x40020088
 800314c:	400200a0 	.word	0x400200a0
 8003150:	400200b8 	.word	0x400200b8
 8003154:	40020410 	.word	0x40020410
 8003158:	40020428 	.word	0x40020428
 800315c:	40020440 	.word	0x40020440
 8003160:	40020458 	.word	0x40020458
 8003164:	40020470 	.word	0x40020470
 8003168:	40020488 	.word	0x40020488
 800316c:	400204a0 	.word	0x400204a0
 8003170:	400204b8 	.word	0x400204b8
 8003174:	58025408 	.word	0x58025408
 8003178:	5802541c 	.word	0x5802541c
 800317c:	58025430 	.word	0x58025430
 8003180:	58025444 	.word	0x58025444
 8003184:	58025458 	.word	0x58025458
 8003188:	5802546c 	.word	0x5802546c
 800318c:	58025480 	.word	0x58025480
 8003190:	58025494 	.word	0x58025494
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d028      	beq.n	80031ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2201      	movs	r2, #1
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop

08003218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	@ 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003226:	4b86      	ldr	r3, [pc, #536]	@ (8003440 <HAL_GPIO_Init+0x228>)
 8003228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800322a:	e18c      	b.n	8003546 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 817e 	beq.w	8003540 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d005      	beq.n	800325c <HAL_GPIO_Init+0x44>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d130      	bne.n	80032be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003292:	2201      	movs	r2, #1
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 0201 	and.w	r2, r3, #1
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d017      	beq.n	80032fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d123      	bne.n	800334e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	08da      	lsrs	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3208      	adds	r2, #8
 800330e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	08da      	lsrs	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3208      	adds	r2, #8
 8003348:	69b9      	ldr	r1, [r7, #24]
 800334a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	2203      	movs	r2, #3
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0203 	and.w	r2, r3, #3
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80d8 	beq.w	8003540 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003390:	4b2c      	ldr	r3, [pc, #176]	@ (8003444 <HAL_GPIO_Init+0x22c>)
 8003392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003396:	4a2b      	ldr	r2, [pc, #172]	@ (8003444 <HAL_GPIO_Init+0x22c>)
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80033a0:	4b28      	ldr	r3, [pc, #160]	@ (8003444 <HAL_GPIO_Init+0x22c>)
 80033a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ae:	4a26      	ldr	r2, [pc, #152]	@ (8003448 <HAL_GPIO_Init+0x230>)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <HAL_GPIO_Init+0x234>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d04a      	beq.n	8003470 <HAL_GPIO_Init+0x258>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003450 <HAL_GPIO_Init+0x238>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02b      	beq.n	800343a <HAL_GPIO_Init+0x222>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003454 <HAL_GPIO_Init+0x23c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d025      	beq.n	8003436 <HAL_GPIO_Init+0x21e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003458 <HAL_GPIO_Init+0x240>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01f      	beq.n	8003432 <HAL_GPIO_Init+0x21a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a19      	ldr	r2, [pc, #100]	@ (800345c <HAL_GPIO_Init+0x244>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d019      	beq.n	800342e <HAL_GPIO_Init+0x216>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a18      	ldr	r2, [pc, #96]	@ (8003460 <HAL_GPIO_Init+0x248>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_GPIO_Init+0x212>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a17      	ldr	r2, [pc, #92]	@ (8003464 <HAL_GPIO_Init+0x24c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00d      	beq.n	8003426 <HAL_GPIO_Init+0x20e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a16      	ldr	r2, [pc, #88]	@ (8003468 <HAL_GPIO_Init+0x250>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_Init+0x20a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a15      	ldr	r2, [pc, #84]	@ (800346c <HAL_GPIO_Init+0x254>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_GPIO_Init+0x206>
 800341a:	2309      	movs	r3, #9
 800341c:	e029      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800341e:	230a      	movs	r3, #10
 8003420:	e027      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003422:	2307      	movs	r3, #7
 8003424:	e025      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003426:	2306      	movs	r3, #6
 8003428:	e023      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800342a:	2305      	movs	r3, #5
 800342c:	e021      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800342e:	2304      	movs	r3, #4
 8003430:	e01f      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003432:	2303      	movs	r3, #3
 8003434:	e01d      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003436:	2302      	movs	r3, #2
 8003438:	e01b      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800343a:	2301      	movs	r3, #1
 800343c:	e019      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800343e:	bf00      	nop
 8003440:	58000080 	.word	0x58000080
 8003444:	58024400 	.word	0x58024400
 8003448:	58000400 	.word	0x58000400
 800344c:	58020000 	.word	0x58020000
 8003450:	58020400 	.word	0x58020400
 8003454:	58020800 	.word	0x58020800
 8003458:	58020c00 	.word	0x58020c00
 800345c:	58021000 	.word	0x58021000
 8003460:	58021400 	.word	0x58021400
 8003464:	58021800 	.word	0x58021800
 8003468:	58021c00 	.word	0x58021c00
 800346c:	58022400 	.word	0x58022400
 8003470:	2300      	movs	r3, #0
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	f002 0203 	and.w	r2, r2, #3
 8003478:	0092      	lsls	r2, r2, #2
 800347a:	4093      	lsls	r3, r2
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003482:	4938      	ldr	r1, [pc, #224]	@ (8003564 <HAL_GPIO_Init+0x34c>)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f ae6b 	bne.w	800322c <HAL_GPIO_Init+0x14>
  }
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	3724      	adds	r7, #36	@ 0x24
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	58000400 	.word	0x58000400

08003568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	887b      	ldrh	r3, [r7, #2]
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
 8003584:	e001      	b.n	800358a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
 80035a4:	4613      	mov	r3, r2
 80035a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035a8:	787b      	ldrb	r3, [r7, #1]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ae:	887a      	ldrh	r2, [r7, #2]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035b4:	e003      	b.n	80035be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035b6:	887b      	ldrh	r3, [r7, #2]
 80035b8:	041a      	lsls	r2, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	619a      	str	r2, [r3, #24]
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e08b      	b.n	80036f6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe f89e 	bl	8001734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	@ 0x24
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800361c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800362c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	e006      	b.n	8003654 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003652:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d108      	bne.n	800366e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	e007      	b.n	800367e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800367c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <HAL_I2C_Init+0x134>)
 800368a:	430b      	orrs	r3, r1
 800368c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800369c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69d9      	ldr	r1, [r3, #28]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	02008000 	.word	0x02008000

08003704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b20      	cmp	r3, #32
 8003718:	d138      	bne.n	800378c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003724:	2302      	movs	r3, #2
 8003726:	e032      	b.n	800378e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	@ 0x24
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d139      	bne.n	8003824 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e033      	b.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2224      	movs	r2, #36	@ 0x24
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800383a:	f7fe fdd1 	bl	80023e0 <HAL_GetTick>
 800383e:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e03b      	b.n	80038c2 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800386a:	e00f      	b.n	800388c <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800386c:	f7fe fdb8 	bl	80023e0 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b05      	cmp	r3, #5
 8003878:	d908      	bls.n	800388c <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2240      	movs	r2, #64	@ 0x40
 800387e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2203      	movs	r2, #3
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e01a      	b.n	80038c2 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e8      	bne.n	800386c <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f9bc 	bl	8003c18 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b087      	sub	sp, #28
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e03e      	b.n	8003962 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_MDMA_ConfigPostRequestMask+0x28>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e037      	b.n	8003962 <HAL_MDMA_ConfigPostRequestMask+0x98>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d126      	bne.n	8003954 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11c      	bne.n	800394e <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d108      	bne.n	800393c <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003938:	611a      	str	r2, [r3, #16]
 800393a:	e00d      	b.n	8003958 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800394a:	611a      	str	r2, [r3, #16]
 800394c:	e004      	b.n	8003958 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
 8003952:	e001      	b.n	8003958 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003960:	7dfb      	ldrb	r3, [r7, #23]
}
 8003962:	4618      	mov	r0, r3
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800397c:	4b91      	ldr	r3, [pc, #580]	@ (8003bc4 <HAL_MDMA_IRQHandler+0x254>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a91      	ldr	r2, [pc, #580]	@ (8003bc8 <HAL_MDMA_IRQHandler+0x258>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	4b8e      	ldr	r3, [pc, #568]	@ (8003bcc <HAL_MDMA_IRQHandler+0x25c>)
 8003992:	4413      	add	r3, r2
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2201      	movs	r2, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80039a2:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 812d 	beq.w	8003c0c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d054      	beq.n	8003a6a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d04d      	beq.n	8003a6a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0202 	bic.w	r2, r2, #2
 80039dc:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	669a      	str	r2, [r3, #104]	@ 0x68
 80039fc:	e005      	b.n	8003a0a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a2e:	f043 0208 	orr.w	r2, r3, #8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a44:	f043 0210 	orr.w	r2, r3, #16
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2201      	movs	r2, #1
 8003a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d012      	beq.n	8003a9e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d012      	beq.n	8003ad2 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2208      	movs	r2, #8
 8003ac0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d012      	beq.n	8003b06 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2204      	movs	r2, #4
 8003af4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d039      	beq.n	8003b88 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d032      	beq.n	8003b88 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8003b30:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d110      	bne.n	8003b60 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d05c      	beq.n	8003c10 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
        }
        return;
 8003b5e:	e057      	b.n	8003c10 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2202      	movs	r2, #2
 8003b66:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d040      	beq.n	8003c12 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2204      	movs	r2, #4
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d30d      	bcc.n	8003bd0 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f2      	bne.n	8003ba8 <HAL_MDMA_IRQHandler+0x238>
 8003bc2:	e006      	b.n	8003bd2 <HAL_MDMA_IRQHandler+0x262>
 8003bc4:	24000000 	.word	0x24000000
 8003bc8:	1b4e81b5 	.word	0x1b4e81b5
 8003bcc:	adffffc0 	.word	0xadffffc0
        break;
 8003bd0:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2203      	movs	r2, #3
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003bf0:	e003      	b.n	8003bfa <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
 8003c0a:	e002      	b.n	8003c12 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8003c10:	bf00      	nop
    }
  }
}
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68d9      	ldr	r1, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003c3e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003c4a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003c56:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8003c60:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003c6c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003c6e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c78:	d107      	bne.n	8003c8a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8003c88:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	da11      	bge.n	8003cbe <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003ca8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cae:	425b      	negs	r3, r3
 8003cb0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	621a      	str	r2, [r3, #32]
 8003cbc:	e006      	b.n	8003ccc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	da15      	bge.n	8003d00 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003ce2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	425b      	negs	r3, r3
 8003cea:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a19      	ldr	r1, [r3, #32]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	041a      	lsls	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	621a      	str	r2, [r3, #32]
 8003cfe:	e009      	b.n	8003d14 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6a19      	ldr	r1, [r3, #32]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0a:	041a      	lsls	r2, r3, #16
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1c:	d006      	beq.n	8003d2c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d2a:	e003      	b.n	8003d34 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2200      	movs	r2, #0
 8003d32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d50:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <HAL_PWREx_ConfigSupply+0x70>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d00a      	beq.n	8003d72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d5c:	4b16      	ldr	r3, [pc, #88]	@ (8003db8 <HAL_PWREx_ConfigSupply+0x70>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d001      	beq.n	8003d6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e01f      	b.n	8003dae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e01d      	b.n	8003dae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d72:	4b11      	ldr	r3, [pc, #68]	@ (8003db8 <HAL_PWREx_ConfigSupply+0x70>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f023 0207 	bic.w	r2, r3, #7
 8003d7a:	490f      	ldr	r1, [pc, #60]	@ (8003db8 <HAL_PWREx_ConfigSupply+0x70>)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d82:	f7fe fb2d 	bl	80023e0 <HAL_GetTick>
 8003d86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d88:	e009      	b.n	8003d9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d8a:	f7fe fb29 	bl	80023e0 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d98:	d901      	bls.n	8003d9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e007      	b.n	8003dae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d9e:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <HAL_PWREx_ConfigSupply+0x70>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003daa:	d1ee      	bne.n	8003d8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	58024800 	.word	0x58024800

08003dbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08c      	sub	sp, #48	@ 0x30
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e3c8      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8087 	beq.w	8003eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ddc:	4b88      	ldr	r3, [pc, #544]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003de6:	4b86      	ldr	r3, [pc, #536]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d007      	beq.n	8003e02 <HAL_RCC_OscConfig+0x46>
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	2b18      	cmp	r3, #24
 8003df6:	d110      	bne.n	8003e1a <HAL_RCC_OscConfig+0x5e>
 8003df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d10b      	bne.n	8003e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e02:	4b7f      	ldr	r3, [pc, #508]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d06c      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x12c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d168      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e3a2      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_OscConfig+0x76>
 8003e24:	4b76      	ldr	r3, [pc, #472]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a75      	ldr	r2, [pc, #468]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	e02e      	b.n	8003e90 <HAL_RCC_OscConfig+0xd4>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x98>
 8003e3a:	4b71      	ldr	r3, [pc, #452]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a70      	ldr	r2, [pc, #448]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	4b6e      	ldr	r3, [pc, #440]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a6d      	ldr	r2, [pc, #436]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	e01d      	b.n	8003e90 <HAL_RCC_OscConfig+0xd4>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0xbc>
 8003e5e:	4b68      	ldr	r3, [pc, #416]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a67      	ldr	r2, [pc, #412]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b65      	ldr	r3, [pc, #404]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a64      	ldr	r2, [pc, #400]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0xd4>
 8003e78:	4b61      	ldr	r3, [pc, #388]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a60      	ldr	r2, [pc, #384]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b5e      	ldr	r3, [pc, #376]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a5d      	ldr	r2, [pc, #372]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe faa2 	bl	80023e0 <HAL_GetTick>
 8003e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe fa9e 	bl	80023e0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	@ 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e356      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eb2:	4b53      	ldr	r3, [pc, #332]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xe4>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fa8e 	bl	80023e0 <HAL_GetTick>
 8003ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe fa8a 	bl	80023e0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	@ 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e342      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eda:	4b49      	ldr	r3, [pc, #292]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x10c>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 808c 	beq.w	8004010 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef8:	4b41      	ldr	r3, [pc, #260]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f02:	4b3f      	ldr	r3, [pc, #252]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <HAL_RCC_OscConfig+0x162>
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	2b18      	cmp	r3, #24
 8003f12:	d137      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1c8>
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d132      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f1e:	4b38      	ldr	r3, [pc, #224]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_RCC_OscConfig+0x17a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e314      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f36:	4b32      	ldr	r3, [pc, #200]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 0219 	bic.w	r2, r3, #25
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	492f      	ldr	r1, [pc, #188]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fe fa4a 	bl	80023e0 <HAL_GetTick>
 8003f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f50:	f7fe fa46 	bl	80023e0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e2fe      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f62:	4b27      	ldr	r3, [pc, #156]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6e:	4b24      	ldr	r3, [pc, #144]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	4920      	ldr	r1, [pc, #128]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f82:	e045      	b.n	8004010 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d026      	beq.n	8003fda <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f023 0219 	bic.w	r2, r3, #25
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4919      	ldr	r1, [pc, #100]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7fe fa1f 	bl	80023e0 <HAL_GetTick>
 8003fa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa6:	f7fe fa1b 	bl	80023e0 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e2d3      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fb8:	4b11      	ldr	r3, [pc, #68]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	490b      	ldr	r1, [pc, #44]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
 8003fd8:	e01a      	b.n	8004010 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fda:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a08      	ldr	r2, [pc, #32]	@ (8004000 <HAL_RCC_OscConfig+0x244>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fe f9fb 	bl	80023e0 <HAL_GetTick>
 8003fea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fec:	e00a      	b.n	8004004 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fe f9f7 	bl	80023e0 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d903      	bls.n	8004004 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e2af      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
 8004000:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004004:	4b96      	ldr	r3, [pc, #600]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1ee      	bne.n	8003fee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d06a      	beq.n	80040f2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401c:	4b90      	ldr	r3, [pc, #576]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004024:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004026:	4b8e      	ldr	r3, [pc, #568]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b08      	cmp	r3, #8
 8004030:	d007      	beq.n	8004042 <HAL_RCC_OscConfig+0x286>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b18      	cmp	r3, #24
 8004036:	d11b      	bne.n	8004070 <HAL_RCC_OscConfig+0x2b4>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d116      	bne.n	8004070 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004042:	4b87      	ldr	r3, [pc, #540]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_RCC_OscConfig+0x29e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	2b80      	cmp	r3, #128	@ 0x80
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e282      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800405a:	4b81      	ldr	r3, [pc, #516]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	061b      	lsls	r3, r3, #24
 8004068:	497d      	ldr	r1, [pc, #500]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800406e:	e040      	b.n	80040f2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d023      	beq.n	80040c0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004078:	4b79      	ldr	r3, [pc, #484]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a78      	ldr	r2, [pc, #480]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 800407e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fe f9ac 	bl	80023e0 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800408c:	f7fe f9a8 	bl	80023e0 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e260      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800409e:	4b70      	ldr	r3, [pc, #448]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	4969      	ldr	r1, [pc, #420]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60cb      	str	r3, [r1, #12]
 80040be:	e018      	b.n	80040f2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040c0:	4b67      	ldr	r3, [pc, #412]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a66      	ldr	r2, [pc, #408]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 80040c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fe f988 	bl	80023e0 <HAL_GetTick>
 80040d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040d4:	f7fe f984 	bl	80023e0 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e23c      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d036      	beq.n	800416c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d019      	beq.n	800413a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004106:	4b56      	ldr	r3, [pc, #344]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800410a:	4a55      	ldr	r2, [pc, #340]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fe f965 	bl	80023e0 <HAL_GetTick>
 8004116:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411a:	f7fe f961 	bl	80023e0 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e219      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800412c:	4b4c      	ldr	r3, [pc, #304]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 800412e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x35e>
 8004138:	e018      	b.n	800416c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800413a:	4b49      	ldr	r3, [pc, #292]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 800413c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413e:	4a48      	ldr	r2, [pc, #288]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fe f94b 	bl	80023e0 <HAL_GetTick>
 800414a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414e:	f7fe f947 	bl	80023e0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1ff      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004160:	4b3f      	ldr	r3, [pc, #252]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d036      	beq.n	80041e6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d019      	beq.n	80041b4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004180:	4b37      	ldr	r3, [pc, #220]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a36      	ldr	r2, [pc, #216]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004186:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800418a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800418c:	f7fe f928 	bl	80023e0 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004194:	f7fe f924 	bl	80023e0 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e1dc      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x3d8>
 80041b2:	e018      	b.n	80041e6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a29      	ldr	r2, [pc, #164]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 80041ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041c0:	f7fe f90e 	bl	80023e0 <HAL_GetTick>
 80041c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c8:	f7fe f90a 	bl	80023e0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e1c2      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041da:	4b21      	ldr	r3, [pc, #132]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 8086 	beq.w	8004300 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004264 <HAL_RCC_OscConfig+0x4a8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004264 <HAL_RCC_OscConfig+0x4a8>)
 80041fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004200:	f7fe f8ee 	bl	80023e0 <HAL_GetTick>
 8004204:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004208:	f7fe f8ea 	bl	80023e0 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	@ 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e1a2      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800421a:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <HAL_RCC_OscConfig+0x4a8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d106      	bne.n	800423c <HAL_RCC_OscConfig+0x480>
 800422e:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004232:	4a0b      	ldr	r2, [pc, #44]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6713      	str	r3, [r2, #112]	@ 0x70
 800423a:	e032      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e6>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d111      	bne.n	8004268 <HAL_RCC_OscConfig+0x4ac>
 8004244:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004248:	4a05      	ldr	r2, [pc, #20]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004250:	4b03      	ldr	r3, [pc, #12]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004254:	4a02      	ldr	r2, [pc, #8]	@ (8004260 <HAL_RCC_OscConfig+0x4a4>)
 8004256:	f023 0304 	bic.w	r3, r3, #4
 800425a:	6713      	str	r3, [r2, #112]	@ 0x70
 800425c:	e021      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e6>
 800425e:	bf00      	nop
 8004260:	58024400 	.word	0x58024400
 8004264:	58024800 	.word	0x58024800
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b05      	cmp	r3, #5
 800426e:	d10c      	bne.n	800428a <HAL_RCC_OscConfig+0x4ce>
 8004270:	4b83      	ldr	r3, [pc, #524]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004274:	4a82      	ldr	r2, [pc, #520]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004276:	f043 0304 	orr.w	r3, r3, #4
 800427a:	6713      	str	r3, [r2, #112]	@ 0x70
 800427c:	4b80      	ldr	r3, [pc, #512]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004280:	4a7f      	ldr	r2, [pc, #508]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6713      	str	r3, [r2, #112]	@ 0x70
 8004288:	e00b      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e6>
 800428a:	4b7d      	ldr	r3, [pc, #500]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428e:	4a7c      	ldr	r2, [pc, #496]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	6713      	str	r3, [r2, #112]	@ 0x70
 8004296:	4b7a      	ldr	r3, [pc, #488]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429a:	4a79      	ldr	r2, [pc, #484]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 800429c:	f023 0304 	bic.w	r3, r3, #4
 80042a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d015      	beq.n	80042d6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fe f899 	bl	80023e0 <HAL_GetTick>
 80042ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042b0:	e00a      	b.n	80042c8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fe f895 	bl	80023e0 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e14b      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c8:	4b6d      	ldr	r3, [pc, #436]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ee      	beq.n	80042b2 <HAL_RCC_OscConfig+0x4f6>
 80042d4:	e014      	b.n	8004300 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fe f883 	bl	80023e0 <HAL_GetTick>
 80042da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fe f87f 	bl	80023e0 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e135      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042f4:	4b62      	ldr	r3, [pc, #392]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1ee      	bne.n	80042de <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 812a 	beq.w	800455e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800430a:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004312:	2b18      	cmp	r3, #24
 8004314:	f000 80ba 	beq.w	800448c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	2b02      	cmp	r3, #2
 800431e:	f040 8095 	bne.w	800444c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004322:	4b57      	ldr	r3, [pc, #348]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a56      	ldr	r2, [pc, #344]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004328:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800432c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fe f857 	bl	80023e0 <HAL_GetTick>
 8004332:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004336:	f7fe f853 	bl	80023e0 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e10b      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004348:	4b4d      	ldr	r3, [pc, #308]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f0      	bne.n	8004336 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004354:	4b4a      	ldr	r3, [pc, #296]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004358:	4b4a      	ldr	r3, [pc, #296]	@ (8004484 <HAL_RCC_OscConfig+0x6c8>)
 800435a:	4013      	ands	r3, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004364:	0112      	lsls	r2, r2, #4
 8004366:	430a      	orrs	r2, r1
 8004368:	4945      	ldr	r1, [pc, #276]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	628b      	str	r3, [r1, #40]	@ 0x28
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	3b01      	subs	r3, #1
 8004374:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437c:	3b01      	subs	r3, #1
 800437e:	025b      	lsls	r3, r3, #9
 8004380:	b29b      	uxth	r3, r3
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004388:	3b01      	subs	r3, #1
 800438a:	041b      	lsls	r3, r3, #16
 800438c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004396:	3b01      	subs	r3, #1
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800439e:	4938      	ldr	r1, [pc, #224]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80043a4:	4b36      	ldr	r3, [pc, #216]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	4a35      	ldr	r2, [pc, #212]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043b0:	4b33      	ldr	r3, [pc, #204]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043b4:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <HAL_RCC_OscConfig+0x6cc>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043bc:	00d2      	lsls	r2, r2, #3
 80043be:	4930      	ldr	r1, [pc, #192]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	f023 020c 	bic.w	r2, r3, #12
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	492b      	ldr	r1, [pc, #172]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	f023 0202 	bic.w	r2, r3, #2
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e2:	4927      	ldr	r1, [pc, #156]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043e8:	4b25      	ldr	r3, [pc, #148]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	4a24      	ldr	r2, [pc, #144]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f4:	4b22      	ldr	r3, [pc, #136]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f8:	4a21      	ldr	r2, [pc, #132]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 80043fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004400:	4b1f      	ldr	r3, [pc, #124]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	4a1e      	ldr	r2, [pc, #120]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004406:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800440a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800440c:	4b1c      	ldr	r3, [pc, #112]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	4a1b      	ldr	r2, [pc, #108]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004418:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a18      	ldr	r2, [pc, #96]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 800441e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fd ffdc 	bl	80023e0 <HAL_GetTick>
 8004428:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442c:	f7fd ffd8 	bl	80023e0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e090      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800443e:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x670>
 800444a:	e088      	b.n	800455e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444c:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a0b      	ldr	r2, [pc, #44]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004452:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd ffc2 	bl	80023e0 <HAL_GetTick>
 800445c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fd ffbe 	bl	80023e0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e076      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004472:	4b03      	ldr	r3, [pc, #12]	@ (8004480 <HAL_RCC_OscConfig+0x6c4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x6a4>
 800447e:	e06e      	b.n	800455e <HAL_RCC_OscConfig+0x7a2>
 8004480:	58024400 	.word	0x58024400
 8004484:	fffffc0c 	.word	0xfffffc0c
 8004488:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800448c:	4b36      	ldr	r3, [pc, #216]	@ (8004568 <HAL_RCC_OscConfig+0x7ac>)
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004492:	4b35      	ldr	r3, [pc, #212]	@ (8004568 <HAL_RCC_OscConfig+0x7ac>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004496:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	2b01      	cmp	r3, #1
 800449e:	d031      	beq.n	8004504 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f003 0203 	and.w	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d12a      	bne.n	8004504 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d122      	bne.n	8004504 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d11a      	bne.n	8004504 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	0a5b      	lsrs	r3, r3, #9
 80044d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d111      	bne.n	8004504 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d108      	bne.n	8004504 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	0e1b      	lsrs	r3, r3, #24
 80044f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e02b      	b.n	8004560 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004508:	4b17      	ldr	r3, [pc, #92]	@ (8004568 <HAL_RCC_OscConfig+0x7ac>)
 800450a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450c:	08db      	lsrs	r3, r3, #3
 800450e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004512:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	429a      	cmp	r2, r3
 800451c:	d01f      	beq.n	800455e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800451e:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <HAL_RCC_OscConfig+0x7ac>)
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	4a11      	ldr	r2, [pc, #68]	@ (8004568 <HAL_RCC_OscConfig+0x7ac>)
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800452a:	f7fd ff59 	bl	80023e0 <HAL_GetTick>
 800452e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004530:	bf00      	nop
 8004532:	f7fd ff55 	bl	80023e0 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	4293      	cmp	r3, r2
 800453c:	d0f9      	beq.n	8004532 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800453e:	4b0a      	ldr	r3, [pc, #40]	@ (8004568 <HAL_RCC_OscConfig+0x7ac>)
 8004540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <HAL_RCC_OscConfig+0x7b0>)
 8004544:	4013      	ands	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800454a:	00d2      	lsls	r2, r2, #3
 800454c:	4906      	ldr	r1, [pc, #24]	@ (8004568 <HAL_RCC_OscConfig+0x7ac>)
 800454e:	4313      	orrs	r3, r2
 8004550:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004552:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_RCC_OscConfig+0x7ac>)
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	4a04      	ldr	r2, [pc, #16]	@ (8004568 <HAL_RCC_OscConfig+0x7ac>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3730      	adds	r7, #48	@ 0x30
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	58024400 	.word	0x58024400
 800456c:	ffff0007 	.word	0xffff0007

08004570 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e19c      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b8a      	ldr	r3, [pc, #552]	@ (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d910      	bls.n	80045b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b87      	ldr	r3, [pc, #540]	@ (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 020f 	bic.w	r2, r3, #15
 800459a:	4985      	ldr	r1, [pc, #532]	@ (80047b0 <HAL_RCC_ClockConfig+0x240>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a2:	4b83      	ldr	r3, [pc, #524]	@ (80047b0 <HAL_RCC_ClockConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e184      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d010      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	4b7b      	ldr	r3, [pc, #492]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d908      	bls.n	80045e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045d0:	4b78      	ldr	r3, [pc, #480]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	4975      	ldr	r1, [pc, #468]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	4b70      	ldr	r3, [pc, #448]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d908      	bls.n	8004610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045fe:	4b6d      	ldr	r3, [pc, #436]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	496a      	ldr	r1, [pc, #424]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800460c:	4313      	orrs	r3, r2
 800460e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699a      	ldr	r2, [r3, #24]
 8004620:	4b64      	ldr	r3, [pc, #400]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004628:	429a      	cmp	r2, r3
 800462a:	d908      	bls.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800462c:	4b61      	ldr	r3, [pc, #388]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	495e      	ldr	r1, [pc, #376]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800463a:	4313      	orrs	r3, r2
 800463c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	4b59      	ldr	r3, [pc, #356]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004656:	429a      	cmp	r2, r3
 8004658:	d908      	bls.n	800466c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800465a:	4b56      	ldr	r3, [pc, #344]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4953      	ldr	r1, [pc, #332]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004668:	4313      	orrs	r3, r2
 800466a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	4b4d      	ldr	r3, [pc, #308]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	429a      	cmp	r2, r3
 8004686:	d908      	bls.n	800469a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b4a      	ldr	r3, [pc, #296]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f023 020f 	bic.w	r2, r3, #15
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4947      	ldr	r1, [pc, #284]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004696:	4313      	orrs	r3, r2
 8004698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d055      	beq.n	8004752 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046a6:	4b43      	ldr	r3, [pc, #268]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4940      	ldr	r1, [pc, #256]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d107      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046c0:	4b3c      	ldr	r3, [pc, #240]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d121      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0f6      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046d8:	4b36      	ldr	r3, [pc, #216]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d115      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0ea      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046f0:	4b30      	ldr	r3, [pc, #192]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0de      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004700:	4b2c      	ldr	r3, [pc, #176]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0d6      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004710:	4b28      	ldr	r3, [pc, #160]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f023 0207 	bic.w	r2, r3, #7
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4925      	ldr	r1, [pc, #148]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800471e:	4313      	orrs	r3, r2
 8004720:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004722:	f7fd fe5d 	bl	80023e0 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004728:	e00a      	b.n	8004740 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472a:	f7fd fe59 	bl	80023e0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0be      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004740:	4b1c      	ldr	r3, [pc, #112]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	429a      	cmp	r2, r3
 8004750:	d1eb      	bne.n	800472a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d010      	beq.n	8004780 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4b14      	ldr	r3, [pc, #80]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	429a      	cmp	r2, r3
 800476c:	d208      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476e:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f023 020f 	bic.w	r2, r3, #15
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	490e      	ldr	r1, [pc, #56]	@ (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800477c:	4313      	orrs	r3, r2
 800477e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d214      	bcs.n	80047b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 020f 	bic.w	r2, r3, #15
 8004796:	4906      	ldr	r1, [pc, #24]	@ (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	4313      	orrs	r3, r2
 800479c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b04      	ldr	r3, [pc, #16]	@ (80047b0 <HAL_RCC_ClockConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e086      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
 80047b0:	52002000 	.word	0x52002000
 80047b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d010      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	4b3f      	ldr	r3, [pc, #252]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d208      	bcs.n	80047e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047d4:	4b3c      	ldr	r3, [pc, #240]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	4939      	ldr	r1, [pc, #228]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d010      	beq.n	8004814 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	4b34      	ldr	r3, [pc, #208]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047fe:	429a      	cmp	r2, r3
 8004800:	d208      	bcs.n	8004814 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004802:	4b31      	ldr	r3, [pc, #196]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	492e      	ldr	r1, [pc, #184]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004810:	4313      	orrs	r3, r2
 8004812:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d010      	beq.n	8004842 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	4b28      	ldr	r3, [pc, #160]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800482c:	429a      	cmp	r2, r3
 800482e:	d208      	bcs.n	8004842 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004830:	4b25      	ldr	r3, [pc, #148]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	4922      	ldr	r1, [pc, #136]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 800483e:	4313      	orrs	r3, r2
 8004840:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d010      	beq.n	8004870 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800485a:	429a      	cmp	r2, r3
 800485c:	d208      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800485e:	4b1a      	ldr	r3, [pc, #104]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	4917      	ldr	r1, [pc, #92]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 800486c:	4313      	orrs	r3, r2
 800486e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004870:	f000 f834 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b14      	ldr	r3, [pc, #80]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	4912      	ldr	r1, [pc, #72]	@ (80048cc <HAL_RCC_ClockConfig+0x35c>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800488e:	4b0e      	ldr	r3, [pc, #56]	@ (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	4a0d      	ldr	r2, [pc, #52]	@ (80048cc <HAL_RCC_ClockConfig+0x35c>)
 8004898:	5cd3      	ldrb	r3, [r2, r3]
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	4a0a      	ldr	r2, [pc, #40]	@ (80048d0 <HAL_RCC_ClockConfig+0x360>)
 80048a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048a8:	4a0a      	ldr	r2, [pc, #40]	@ (80048d4 <HAL_RCC_ClockConfig+0x364>)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80048ae:	4b0a      	ldr	r3, [pc, #40]	@ (80048d8 <HAL_RCC_ClockConfig+0x368>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fd fd4a 	bl	800234c <HAL_InitTick>
 80048b8:	4603      	mov	r3, r0
 80048ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
 80048cc:	08010d24 	.word	0x08010d24
 80048d0:	24000004 	.word	0x24000004
 80048d4:	24000000 	.word	0x24000000
 80048d8:	24000008 	.word	0x24000008

080048dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	@ 0x24
 80048e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e2:	4bb3      	ldr	r3, [pc, #716]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ea:	2b18      	cmp	r3, #24
 80048ec:	f200 8155 	bhi.w	8004b9a <HAL_RCC_GetSysClockFreq+0x2be>
 80048f0:	a201      	add	r2, pc, #4	@ (adr r2, 80048f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	0800495d 	.word	0x0800495d
 80048fc:	08004b9b 	.word	0x08004b9b
 8004900:	08004b9b 	.word	0x08004b9b
 8004904:	08004b9b 	.word	0x08004b9b
 8004908:	08004b9b 	.word	0x08004b9b
 800490c:	08004b9b 	.word	0x08004b9b
 8004910:	08004b9b 	.word	0x08004b9b
 8004914:	08004b9b 	.word	0x08004b9b
 8004918:	08004983 	.word	0x08004983
 800491c:	08004b9b 	.word	0x08004b9b
 8004920:	08004b9b 	.word	0x08004b9b
 8004924:	08004b9b 	.word	0x08004b9b
 8004928:	08004b9b 	.word	0x08004b9b
 800492c:	08004b9b 	.word	0x08004b9b
 8004930:	08004b9b 	.word	0x08004b9b
 8004934:	08004b9b 	.word	0x08004b9b
 8004938:	08004989 	.word	0x08004989
 800493c:	08004b9b 	.word	0x08004b9b
 8004940:	08004b9b 	.word	0x08004b9b
 8004944:	08004b9b 	.word	0x08004b9b
 8004948:	08004b9b 	.word	0x08004b9b
 800494c:	08004b9b 	.word	0x08004b9b
 8004950:	08004b9b 	.word	0x08004b9b
 8004954:	08004b9b 	.word	0x08004b9b
 8004958:	0800498f 	.word	0x0800498f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800495c:	4b94      	ldr	r3, [pc, #592]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d009      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004968:	4b91      	ldr	r3, [pc, #580]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	08db      	lsrs	r3, r3, #3
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	4a90      	ldr	r2, [pc, #576]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
 8004978:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800497a:	e111      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800497c:	4b8d      	ldr	r3, [pc, #564]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800497e:	61bb      	str	r3, [r7, #24]
      break;
 8004980:	e10e      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004982:	4b8d      	ldr	r3, [pc, #564]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004984:	61bb      	str	r3, [r7, #24]
      break;
 8004986:	e10b      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004988:	4b8c      	ldr	r3, [pc, #560]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800498a:	61bb      	str	r3, [r7, #24]
      break;
 800498c:	e108      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800498e:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004998:	4b85      	ldr	r3, [pc, #532]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800499a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049a4:	4b82      	ldr	r3, [pc, #520]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80049ae:	4b80      	ldr	r3, [pc, #512]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b2:	08db      	lsrs	r3, r3, #3
 80049b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80e1 	beq.w	8004b94 <HAL_RCC_GetSysClockFreq+0x2b8>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	f000 8083 	beq.w	8004ae0 <HAL_RCC_GetSysClockFreq+0x204>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	f200 80a1 	bhi.w	8004b24 <HAL_RCC_GetSysClockFreq+0x248>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x114>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d056      	beq.n	8004a9c <HAL_RCC_GetSysClockFreq+0x1c0>
 80049ee:	e099      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049f0:	4b6f      	ldr	r3, [pc, #444]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d02d      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049fc:	4b6c      	ldr	r3, [pc, #432]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	08db      	lsrs	r3, r3, #3
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	4a6b      	ldr	r2, [pc, #428]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a26:	4b62      	ldr	r3, [pc, #392]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a56:	e087      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004bc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6a:	4b51      	ldr	r3, [pc, #324]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a9a:	e065      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aae:	4b40      	ldr	r3, [pc, #256]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ac2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ada:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ade:	e043      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004bcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8004aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af2:	4b2f      	ldr	r3, [pc, #188]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b06:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b22:	e021      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b36:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b4a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004b68:	4b11      	ldr	r3, [pc, #68]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6c:	0a5b      	lsrs	r3, r3, #9
 8004b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b72:	3301      	adds	r3, #1
 8004b74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	ee07 3a90 	vmov	s15, r3
 8004b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8c:	ee17 3a90 	vmov	r3, s15
 8004b90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004b92:	e005      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
      break;
 8004b98:	e002      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004b9a:	4b07      	ldr	r3, [pc, #28]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b9c:	61bb      	str	r3, [r7, #24]
      break;
 8004b9e:	bf00      	nop
  }

  return sysclockfreq;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3724      	adds	r7, #36	@ 0x24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	03d09000 	.word	0x03d09000
 8004bb8:	003d0900 	.word	0x003d0900
 8004bbc:	02dc6c00 	.word	0x02dc6c00
 8004bc0:	46000000 	.word	0x46000000
 8004bc4:	4c742400 	.word	0x4c742400
 8004bc8:	4a742400 	.word	0x4a742400
 8004bcc:	4c371b00 	.word	0x4c371b00

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bd6:	f7ff fe81 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	0a1b      	lsrs	r3, r3, #8
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	490f      	ldr	r1, [pc, #60]	@ (8004c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8004be8:	5ccb      	ldrb	r3, [r1, r3]
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	4a09      	ldr	r2, [pc, #36]	@ (8004c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8004bfe:	5cd3      	ldrb	r3, [r2, r3]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0a:	4a07      	ldr	r2, [pc, #28]	@ (8004c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c0e:	4a07      	ldr	r2, [pc, #28]	@ (8004c2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c14:	4b04      	ldr	r3, [pc, #16]	@ (8004c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c16:	681b      	ldr	r3, [r3, #0]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	58024400 	.word	0x58024400
 8004c24:	08010d24 	.word	0x08010d24
 8004c28:	24000004 	.word	0x24000004
 8004c2c:	24000000 	.word	0x24000000

08004c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c34:	f7ff ffcc 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4904      	ldr	r1, [pc, #16]	@ (8004c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	58024400 	.word	0x58024400
 8004c58:	08010d24 	.word	0x08010d24

08004c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004c60:	f7ff ffb6 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	4904      	ldr	r1, [pc, #16]	@ (8004c84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	58024400 	.word	0x58024400
 8004c84:	08010d24 	.word	0x08010d24

08004c88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c8c:	b0c6      	sub	sp, #280	@ 0x118
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004cac:	2500      	movs	r5, #0
 8004cae:	ea54 0305 	orrs.w	r3, r4, r5
 8004cb2:	d049      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cbe:	d02f      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004cc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cc4:	d828      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cca:	d01a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ccc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cd0:	d822      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cda:	d007      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cdc:	e01c      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cde:	4bab      	ldr	r3, [pc, #684]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce2:	4aaa      	ldr	r2, [pc, #680]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004cea:	e01a      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f002 fa49 	bl	800718c <RCCEx_PLL2_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d00:	e00f      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d06:	3328      	adds	r3, #40	@ 0x28
 8004d08:	2102      	movs	r1, #2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f002 faf0 	bl	80072f0 <RCCEx_PLL3_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d16:	e004      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d1e:	e000      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10a      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d2a:	4b98      	ldr	r3, [pc, #608]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d38:	4a94      	ldr	r2, [pc, #592]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d3e:	e003      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004d54:	f04f 0900 	mov.w	r9, #0
 8004d58:	ea58 0309 	orrs.w	r3, r8, r9
 8004d5c:	d047      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d82a      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004d68:	a201      	add	r2, pc, #4	@ (adr r2, 8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004d85 	.word	0x08004d85
 8004d74:	08004d93 	.word	0x08004d93
 8004d78:	08004da9 	.word	0x08004da9
 8004d7c:	08004dc7 	.word	0x08004dc7
 8004d80:	08004dc7 	.word	0x08004dc7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d84:	4b81      	ldr	r3, [pc, #516]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	4a80      	ldr	r2, [pc, #512]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d90:	e01a      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d96:	3308      	adds	r3, #8
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f002 f9f6 	bl	800718c <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004da6:	e00f      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dac:	3328      	adds	r3, #40	@ 0x28
 8004dae:	2100      	movs	r1, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f002 fa9d 	bl	80072f0 <RCCEx_PLL3_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dbc:	e004      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dd0:	4b6e      	ldr	r3, [pc, #440]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd4:	f023 0107 	bic.w	r1, r3, #7
 8004dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dde:	4a6b      	ldr	r2, [pc, #428]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004de4:	e003      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004dfa:	f04f 0b00 	mov.w	fp, #0
 8004dfe:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e02:	d05b      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e0c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004e10:	d03b      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004e12:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004e16:	d834      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e1c:	d037      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004e1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e22:	d82e      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e28:	d033      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e2e:	d828      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e34:	d01a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004e36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e3a:	d822      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004e40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e44:	d007      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004e46:	e01c      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e48:	4b50      	ldr	r3, [pc, #320]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	4a4f      	ldr	r2, [pc, #316]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e54:	e01e      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f002 f994 	bl	800718c <RCCEx_PLL2_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e6a:	e013      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e70:	3328      	adds	r3, #40	@ 0x28
 8004e72:	2100      	movs	r1, #0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f002 fa3b 	bl	80072f0 <RCCEx_PLL3_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e80:	e008      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e88:	e004      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e8a:	bf00      	nop
 8004e8c:	e002      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e8e:	bf00      	nop
 8004e90:	e000      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004eac:	4a37      	ldr	r2, [pc, #220]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eb2:	e003      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004ed2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d05d      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ee4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ee8:	d03b      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004eea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004eee:	d834      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ef0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ef4:	d037      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004ef6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004efa:	d82e      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004efc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f00:	d033      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004f02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f06:	d828      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004f08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f0c:	d01a      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f12:	d822      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f1c:	d007      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004f1e:	e01c      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f20:	4b1a      	ldr	r3, [pc, #104]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f24:	4a19      	ldr	r2, [pc, #100]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f2c:	e01e      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f32:	3308      	adds	r3, #8
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f002 f928 	bl	800718c <RCCEx_PLL2_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f42:	e013      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f48:	3328      	adds	r3, #40	@ 0x28
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f002 f9cf 	bl	80072f0 <RCCEx_PLL3_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f58:	e008      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f60:	e004      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10d      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f74:	4b05      	ldr	r3, [pc, #20]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f78:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f84:	4a01      	ldr	r2, [pc, #4]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f86:	430b      	orrs	r3, r1
 8004f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f8a:	e005      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004fa4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004fae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	d03a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fbe:	2b30      	cmp	r3, #48	@ 0x30
 8004fc0:	d01f      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004fc2:	2b30      	cmp	r3, #48	@ 0x30
 8004fc4:	d819      	bhi.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d00c      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d815      	bhi.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d019      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d111      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd6:	4baa      	ldr	r3, [pc, #680]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fda:	4aa9      	ldr	r2, [pc, #676]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004fe2:	e011      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe8:	3308      	adds	r3, #8
 8004fea:	2102      	movs	r1, #2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f002 f8cd 	bl	800718c <RCCEx_PLL2_Config>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ff8:	e006      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005000:	e002      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005002:	bf00      	nop
 8005004:	e000      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005010:	4b9b      	ldr	r3, [pc, #620]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005014:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501e:	4a98      	ldr	r2, [pc, #608]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005020:	430b      	orrs	r3, r1
 8005022:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005024:	e003      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005026:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800502a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800502e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800503a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800503e:	2300      	movs	r3, #0
 8005040:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005044:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005048:	460b      	mov	r3, r1
 800504a:	4313      	orrs	r3, r2
 800504c:	d051      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800504e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005058:	d035      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800505a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800505e:	d82e      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005064:	d031      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005066:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800506a:	d828      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x436>
 800506c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005070:	d01a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005076:	d822      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800507c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005080:	d007      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005082:	e01c      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005084:	4b7e      	ldr	r3, [pc, #504]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	4a7d      	ldr	r2, [pc, #500]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800508a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800508e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005090:	e01c      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005096:	3308      	adds	r3, #8
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f002 f876 	bl	800718c <RCCEx_PLL2_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050a6:	e011      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ac:	3328      	adds	r3, #40	@ 0x28
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f002 f91d 	bl	80072f0 <RCCEx_PLL3_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050bc:	e006      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050c4:	e002      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80050c6:	bf00      	nop
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80050ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80050dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e2:	4a67      	ldr	r2, [pc, #412]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80050e8:	e003      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80050fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005108:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800510c:	460b      	mov	r3, r1
 800510e:	4313      	orrs	r3, r2
 8005110:	d053      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800511c:	d033      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800511e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005122:	d82c      	bhi.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005124:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005128:	d02f      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800512a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800512e:	d826      	bhi.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005130:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005134:	d02b      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005136:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800513a:	d820      	bhi.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800513c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005140:	d012      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005146:	d81a      	bhi.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d022      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005150:	d115      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005156:	3308      	adds	r3, #8
 8005158:	2101      	movs	r1, #1
 800515a:	4618      	mov	r0, r3
 800515c:	f002 f816 	bl	800718c <RCCEx_PLL2_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005166:	e015      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800516c:	3328      	adds	r3, #40	@ 0x28
 800516e:	2101      	movs	r1, #1
 8005170:	4618      	mov	r0, r3
 8005172:	f002 f8bd 	bl	80072f0 <RCCEx_PLL3_Config>
 8005176:	4603      	mov	r3, r0
 8005178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800517c:	e00a      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005184:	e006      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005186:	bf00      	nop
 8005188:	e004      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800519c:	4b38      	ldr	r3, [pc, #224]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800519e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80051a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051aa:	4a35      	ldr	r2, [pc, #212]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80051b0:	e003      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80051c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80051d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d058      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80051e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051e6:	d033      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80051e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051ec:	d82c      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f2:	d02f      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f8:	d826      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051fe:	d02b      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005200:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005204:	d820      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800520a:	d012      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800520c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005210:	d81a      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d022      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005216:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800521a:	d115      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800521c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005220:	3308      	adds	r3, #8
 8005222:	2101      	movs	r1, #1
 8005224:	4618      	mov	r0, r3
 8005226:	f001 ffb1 	bl	800718c <RCCEx_PLL2_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005230:	e015      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005236:	3328      	adds	r3, #40	@ 0x28
 8005238:	2101      	movs	r1, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f002 f858 	bl	80072f0 <RCCEx_PLL3_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005246:	e00a      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800524e:	e006      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005250:	bf00      	nop
 8005252:	e004      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005254:	bf00      	nop
 8005256:	e002      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005258:	bf00      	nop
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800525c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10e      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005266:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800526e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005272:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005276:	4a02      	ldr	r2, [pc, #8]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005278:	430b      	orrs	r3, r1
 800527a:	6593      	str	r3, [r2, #88]	@ 0x58
 800527c:	e006      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800527e:	bf00      	nop
 8005280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005288:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800528c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800529c:	2300      	movs	r3, #0
 800529e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80052a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4313      	orrs	r3, r2
 80052aa:	d037      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80052ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052b6:	d00e      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80052b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052bc:	d816      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d018      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80052c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052c6:	d111      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c8:	4bc4      	ldr	r3, [pc, #784]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052cc:	4ac3      	ldr	r2, [pc, #780]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052d4:	e00f      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052da:	3308      	adds	r3, #8
 80052dc:	2101      	movs	r1, #1
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 ff54 	bl	800718c <RCCEx_PLL2_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052ea:	e004      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052f2:	e000      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80052f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052fe:	4bb7      	ldr	r3, [pc, #732]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005302:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800530c:	4ab3      	ldr	r2, [pc, #716]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800530e:	430b      	orrs	r3, r1
 8005310:	6513      	str	r3, [r2, #80]	@ 0x50
 8005312:	e003      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005318:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005328:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800532c:	2300      	movs	r3, #0
 800532e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005332:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005336:	460b      	mov	r3, r1
 8005338:	4313      	orrs	r3, r2
 800533a:	d039      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005342:	2b03      	cmp	r3, #3
 8005344:	d81c      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005346:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005389 	.word	0x08005389
 8005350:	0800535d 	.word	0x0800535d
 8005354:	0800536b 	.word	0x0800536b
 8005358:	08005389 	.word	0x08005389
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800535c:	4b9f      	ldr	r3, [pc, #636]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	4a9e      	ldr	r2, [pc, #632]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005368:	e00f      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536e:	3308      	adds	r3, #8
 8005370:	2102      	movs	r1, #2
 8005372:	4618      	mov	r0, r3
 8005374:	f001 ff0a 	bl	800718c <RCCEx_PLL2_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800537e:	e004      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005386:	e000      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10a      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005392:	4b92      	ldr	r3, [pc, #584]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005396:	f023 0103 	bic.w	r1, r3, #3
 800539a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800539e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a0:	4a8e      	ldr	r2, [pc, #568]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053a2:	430b      	orrs	r3, r1
 80053a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053a6:	e003      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80053bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053c0:	2300      	movs	r3, #0
 80053c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f000 8099 	beq.w	8005504 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d2:	4b83      	ldr	r3, [pc, #524]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a82      	ldr	r2, [pc, #520]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053de:	f7fc ffff 	bl	80023e0 <HAL_GetTick>
 80053e2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e6:	e00b      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e8:	f7fc fffa 	bl	80023e0 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b64      	cmp	r3, #100	@ 0x64
 80053f6:	d903      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053fe:	e005      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005400:	4b77      	ldr	r3, [pc, #476]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0ed      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800540c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005410:	2b00      	cmp	r3, #0
 8005412:	d173      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005414:	4b71      	ldr	r3, [pc, #452]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005416:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005420:	4053      	eors	r3, r2
 8005422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005426:	2b00      	cmp	r3, #0
 8005428:	d015      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800542a:	4b6c      	ldr	r3, [pc, #432]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005432:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005436:	4b69      	ldr	r3, [pc, #420]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543a:	4a68      	ldr	r2, [pc, #416]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800543c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005440:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005442:	4b66      	ldr	r3, [pc, #408]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005446:	4a65      	ldr	r2, [pc, #404]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800544e:	4a63      	ldr	r2, [pc, #396]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005454:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800545e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005462:	d118      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fc ffbc 	bl	80023e0 <HAL_GetTick>
 8005468:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800546c:	e00d      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546e:	f7fc ffb7 	bl	80023e0 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005478:	1ad2      	subs	r2, r2, r3
 800547a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800547e:	429a      	cmp	r2, r3
 8005480:	d903      	bls.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005488:	e005      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800548a:	4b54      	ldr	r3, [pc, #336]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800548c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0eb      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005496:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800549a:	2b00      	cmp	r3, #0
 800549c:	d129      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800549e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054ae:	d10e      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80054b0:	4b4a      	ldr	r3, [pc, #296]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054c0:	091a      	lsrs	r2, r3, #4
 80054c2:	4b48      	ldr	r3, [pc, #288]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	4a45      	ldr	r2, [pc, #276]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054c8:	430b      	orrs	r3, r1
 80054ca:	6113      	str	r3, [r2, #16]
 80054cc:	e005      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80054ce:	4b43      	ldr	r3, [pc, #268]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	4a42      	ldr	r2, [pc, #264]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054d8:	6113      	str	r3, [r2, #16]
 80054da:	4b40      	ldr	r3, [pc, #256]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ea:	4a3c      	ldr	r2, [pc, #240]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054ec:	430b      	orrs	r3, r1
 80054ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f0:	e008      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80054fa:	e003      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f002 0301 	and.w	r3, r2, #1
 8005510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800551a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800551e:	460b      	mov	r3, r1
 8005520:	4313      	orrs	r3, r2
 8005522:	f000 808f 	beq.w	8005644 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800552c:	2b28      	cmp	r3, #40	@ 0x28
 800552e:	d871      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005530:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	0800561d 	.word	0x0800561d
 800553c:	08005615 	.word	0x08005615
 8005540:	08005615 	.word	0x08005615
 8005544:	08005615 	.word	0x08005615
 8005548:	08005615 	.word	0x08005615
 800554c:	08005615 	.word	0x08005615
 8005550:	08005615 	.word	0x08005615
 8005554:	08005615 	.word	0x08005615
 8005558:	080055e9 	.word	0x080055e9
 800555c:	08005615 	.word	0x08005615
 8005560:	08005615 	.word	0x08005615
 8005564:	08005615 	.word	0x08005615
 8005568:	08005615 	.word	0x08005615
 800556c:	08005615 	.word	0x08005615
 8005570:	08005615 	.word	0x08005615
 8005574:	08005615 	.word	0x08005615
 8005578:	080055ff 	.word	0x080055ff
 800557c:	08005615 	.word	0x08005615
 8005580:	08005615 	.word	0x08005615
 8005584:	08005615 	.word	0x08005615
 8005588:	08005615 	.word	0x08005615
 800558c:	08005615 	.word	0x08005615
 8005590:	08005615 	.word	0x08005615
 8005594:	08005615 	.word	0x08005615
 8005598:	0800561d 	.word	0x0800561d
 800559c:	08005615 	.word	0x08005615
 80055a0:	08005615 	.word	0x08005615
 80055a4:	08005615 	.word	0x08005615
 80055a8:	08005615 	.word	0x08005615
 80055ac:	08005615 	.word	0x08005615
 80055b0:	08005615 	.word	0x08005615
 80055b4:	08005615 	.word	0x08005615
 80055b8:	0800561d 	.word	0x0800561d
 80055bc:	08005615 	.word	0x08005615
 80055c0:	08005615 	.word	0x08005615
 80055c4:	08005615 	.word	0x08005615
 80055c8:	08005615 	.word	0x08005615
 80055cc:	08005615 	.word	0x08005615
 80055d0:	08005615 	.word	0x08005615
 80055d4:	08005615 	.word	0x08005615
 80055d8:	0800561d 	.word	0x0800561d
 80055dc:	58024400 	.word	0x58024400
 80055e0:	58024800 	.word	0x58024800
 80055e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ec:	3308      	adds	r3, #8
 80055ee:	2101      	movs	r1, #1
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fdcb 	bl	800718c <RCCEx_PLL2_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80055fc:	e00f      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005602:	3328      	adds	r3, #40	@ 0x28
 8005604:	2101      	movs	r1, #1
 8005606:	4618      	mov	r0, r3
 8005608:	f001 fe72 	bl	80072f0 <RCCEx_PLL3_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005612:	e004      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800561a:	e000      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800561c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800561e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005626:	4bbf      	ldr	r3, [pc, #764]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800562e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005632:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005634:	4abb      	ldr	r2, [pc, #748]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005636:	430b      	orrs	r3, r1
 8005638:	6553      	str	r3, [r2, #84]	@ 0x54
 800563a:	e003      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005640:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	f002 0302 	and.w	r3, r2, #2
 8005650:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005654:	2300      	movs	r3, #0
 8005656:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800565a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800565e:	460b      	mov	r3, r1
 8005660:	4313      	orrs	r3, r2
 8005662:	d041      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800566a:	2b05      	cmp	r3, #5
 800566c:	d824      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800566e:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	080056c1 	.word	0x080056c1
 8005678:	0800568d 	.word	0x0800568d
 800567c:	080056a3 	.word	0x080056a3
 8005680:	080056c1 	.word	0x080056c1
 8005684:	080056c1 	.word	0x080056c1
 8005688:	080056c1 	.word	0x080056c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800568c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005690:	3308      	adds	r3, #8
 8005692:	2101      	movs	r1, #1
 8005694:	4618      	mov	r0, r3
 8005696:	f001 fd79 	bl	800718c <RCCEx_PLL2_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056a0:	e00f      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a6:	3328      	adds	r3, #40	@ 0x28
 80056a8:	2101      	movs	r1, #1
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 fe20 	bl	80072f0 <RCCEx_PLL3_Config>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056b6:	e004      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056be:	e000      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80056c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056ca:	4b96      	ldr	r3, [pc, #600]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80056cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ce:	f023 0107 	bic.w	r1, r3, #7
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d8:	4a92      	ldr	r2, [pc, #584]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80056da:	430b      	orrs	r3, r1
 80056dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80056de:	e003      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f002 0304 	and.w	r3, r2, #4
 80056f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056f8:	2300      	movs	r3, #0
 80056fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005702:	460b      	mov	r3, r1
 8005704:	4313      	orrs	r3, r2
 8005706:	d044      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005710:	2b05      	cmp	r3, #5
 8005712:	d825      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005714:	a201      	add	r2, pc, #4	@ (adr r2, 800571c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005769 	.word	0x08005769
 8005720:	08005735 	.word	0x08005735
 8005724:	0800574b 	.word	0x0800574b
 8005728:	08005769 	.word	0x08005769
 800572c:	08005769 	.word	0x08005769
 8005730:	08005769 	.word	0x08005769
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005738:	3308      	adds	r3, #8
 800573a:	2101      	movs	r1, #1
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fd25 	bl	800718c <RCCEx_PLL2_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005748:	e00f      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800574a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800574e:	3328      	adds	r3, #40	@ 0x28
 8005750:	2101      	movs	r1, #1
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fdcc 	bl	80072f0 <RCCEx_PLL3_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800575e:	e004      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005766:	e000      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005772:	4b6c      	ldr	r3, [pc, #432]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005776:	f023 0107 	bic.w	r1, r3, #7
 800577a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005782:	4a68      	ldr	r2, [pc, #416]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005784:	430b      	orrs	r3, r1
 8005786:	6593      	str	r3, [r2, #88]	@ 0x58
 8005788:	e003      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800578e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	f002 0320 	and.w	r3, r2, #32
 800579e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057a2:	2300      	movs	r3, #0
 80057a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80057a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4313      	orrs	r3, r2
 80057b0:	d055      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80057b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057be:	d033      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80057c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057c4:	d82c      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ca:	d02f      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d0:	d826      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057d6:	d02b      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80057d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057dc:	d820      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057e2:	d012      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80057e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057e8:	d81a      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d022      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80057ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057f2:	d115      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	3308      	adds	r3, #8
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 fcc5 	bl	800718c <RCCEx_PLL2_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005808:	e015      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800580a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580e:	3328      	adds	r3, #40	@ 0x28
 8005810:	2102      	movs	r1, #2
 8005812:	4618      	mov	r0, r3
 8005814:	f001 fd6c 	bl	80072f0 <RCCEx_PLL3_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800581e:	e00a      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005826:	e006      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005828:	bf00      	nop
 800582a:	e004      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800582c:	bf00      	nop
 800582e:	e002      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005830:	bf00      	nop
 8005832:	e000      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005836:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800583e:	4b39      	ldr	r3, [pc, #228]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005842:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800584e:	4a35      	ldr	r2, [pc, #212]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005850:	430b      	orrs	r3, r1
 8005852:	6553      	str	r3, [r2, #84]	@ 0x54
 8005854:	e003      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005856:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800585a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800585e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800586a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005874:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d058      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005882:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005886:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800588a:	d033      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800588c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005890:	d82c      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005896:	d02f      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800589c:	d826      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800589e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058a2:	d02b      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80058a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058a8:	d820      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80058aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058ae:	d012      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80058b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058b4:	d81a      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d022      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058be:	d115      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c4:	3308      	adds	r3, #8
 80058c6:	2100      	movs	r1, #0
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 fc5f 	bl	800718c <RCCEx_PLL2_Config>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058d4:	e015      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058da:	3328      	adds	r3, #40	@ 0x28
 80058dc:	2102      	movs	r1, #2
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 fd06 	bl	80072f0 <RCCEx_PLL3_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058ea:	e00a      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058f2:	e006      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058f4:	bf00      	nop
 80058f6:	e004      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058f8:	bf00      	nop
 80058fa:	e002      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058fc:	bf00      	nop
 80058fe:	e000      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005902:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10e      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800590a:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800590c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800591a:	4a02      	ldr	r2, [pc, #8]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800591c:	430b      	orrs	r3, r1
 800591e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005922:	bf00      	nop
 8005924:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800592c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800593c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005940:	2300      	movs	r3, #0
 8005942:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005946:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800594a:	460b      	mov	r3, r1
 800594c:	4313      	orrs	r3, r2
 800594e:	d055      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005954:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005958:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800595c:	d033      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800595e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005962:	d82c      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005968:	d02f      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800596a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800596e:	d826      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005970:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005974:	d02b      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005976:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800597a:	d820      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800597c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005980:	d012      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005982:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005986:	d81a      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005988:	2b00      	cmp	r3, #0
 800598a:	d022      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800598c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005990:	d115      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005996:	3308      	adds	r3, #8
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f001 fbf6 	bl	800718c <RCCEx_PLL2_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059a6:	e015      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ac:	3328      	adds	r3, #40	@ 0x28
 80059ae:	2102      	movs	r1, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 fc9d 	bl	80072f0 <RCCEx_PLL3_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059bc:	e00a      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059c4:	e006      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059c6:	bf00      	nop
 80059c8:	e004      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059ca:	bf00      	nop
 80059cc:	e002      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059ce:	bf00      	nop
 80059d0:	e000      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10b      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80059dc:	4ba0      	ldr	r3, [pc, #640]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80059e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ec:	4a9c      	ldr	r2, [pc, #624]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059ee:	430b      	orrs	r3, r1
 80059f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80059f2:	e003      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f002 0308 	and.w	r3, r2, #8
 8005a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a12:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a16:	460b      	mov	r3, r1
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	d01e      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a28:	d10c      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2e:	3328      	adds	r3, #40	@ 0x28
 8005a30:	2102      	movs	r1, #2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f001 fc5c 	bl	80072f0 <RCCEx_PLL3_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005a44:	4b86      	ldr	r3, [pc, #536]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a48:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a54:	4a82      	ldr	r2, [pc, #520]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a56:	430b      	orrs	r3, r1
 8005a58:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f002 0310 	and.w	r3, r2, #16
 8005a66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a70:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005a74:	460b      	mov	r3, r1
 8005a76:	4313      	orrs	r3, r2
 8005a78:	d01e      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a86:	d10c      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a8c:	3328      	adds	r3, #40	@ 0x28
 8005a8e:	2102      	movs	r1, #2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 fc2d 	bl	80072f0 <RCCEx_PLL3_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ab2:	4a6b      	ldr	r2, [pc, #428]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005ac4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005aca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	d03e      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005adc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ae0:	d022      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ae6:	d81b      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af0:	d00b      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005af2:	e015      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af8:	3308      	adds	r3, #8
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fb45 	bl	800718c <RCCEx_PLL2_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b08:	e00f      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0e:	3328      	adds	r3, #40	@ 0x28
 8005b10:	2102      	movs	r1, #2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fbec 	bl	80072f0 <RCCEx_PLL3_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b1e:	e004      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b26:	e000      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10b      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b32:	4b4b      	ldr	r3, [pc, #300]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b42:	4a47      	ldr	r2, [pc, #284]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b44:	430b      	orrs	r3, r1
 8005b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b48:	e003      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005b5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b60:	2300      	movs	r3, #0
 8005b62:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	d03b      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b7a:	d01f      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005b7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b80:	d818      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b86:	d003      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005b88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b8c:	d007      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005b8e:	e011      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b90:	4b33      	ldr	r3, [pc, #204]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	4a32      	ldr	r2, [pc, #200]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b9c:	e00f      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba2:	3328      	adds	r3, #40	@ 0x28
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fba2 	bl	80072f0 <RCCEx_PLL3_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005bb2:	e004      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bba:	e000      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10b      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bc6:	4b26      	ldr	r3, [pc, #152]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bd6:	4a22      	ldr	r2, [pc, #136]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bdc:	e003      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005be2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bf8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	d034      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c10:	d007      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005c12:	e011      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c14:	4b12      	ldr	r3, [pc, #72]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	4a11      	ldr	r2, [pc, #68]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c20:	e00e      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c26:	3308      	adds	r3, #8
 8005c28:	2102      	movs	r1, #2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 faae 	bl	800718c <RCCEx_PLL2_Config>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c36:	e003      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10d      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c48:	4b05      	ldr	r3, [pc, #20]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c56:	4a02      	ldr	r2, [pc, #8]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c5c:	e006      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005c5e:	bf00      	nop
 8005c60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005c78:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c7e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005c82:	460b      	mov	r3, r1
 8005c84:	4313      	orrs	r3, r2
 8005c86:	d00c      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8c:	3328      	adds	r3, #40	@ 0x28
 8005c8e:	2102      	movs	r1, #2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 fb2d 	bl	80072f0 <RCCEx_PLL3_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005cae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cb4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	d036      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cc8:	d018      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005cca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cce:	d811      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd4:	d014      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005cd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cda:	d80b      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d011      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ce4:	d106      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce6:	4bb7      	ldr	r3, [pc, #732]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cea:	4ab6      	ldr	r2, [pc, #728]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005cf2:	e008      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cfa:	e004      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005cfc:	bf00      	nop
 8005cfe:	e002      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005d00:	bf00      	nop
 8005d02:	e000      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d0e:	4bad      	ldr	r3, [pc, #692]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d1c:	4aa9      	ldr	r2, [pc, #676]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d22:	e003      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005d42:	460b      	mov	r3, r1
 8005d44:	4313      	orrs	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d48:	4b9e      	ldr	r3, [pc, #632]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d56:	4a9b      	ldr	r2, [pc, #620]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005d72:	460b      	mov	r3, r1
 8005d74:	4313      	orrs	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d78:	4b92      	ldr	r3, [pc, #584]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d86:	4a8f      	ldr	r2, [pc, #572]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005da2:	460b      	mov	r3, r1
 8005da4:	4313      	orrs	r3, r2
 8005da6:	d00e      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005da8:	4b86      	ldr	r3, [pc, #536]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	4a85      	ldr	r2, [pc, #532]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005dae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005db2:	6113      	str	r3, [r2, #16]
 8005db4:	4b83      	ldr	r3, [pc, #524]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005db6:	6919      	ldr	r1, [r3, #16]
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dc0:	4a80      	ldr	r2, [pc, #512]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4313      	orrs	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005de2:	4b78      	ldr	r3, [pc, #480]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df0:	4a74      	ldr	r2, [pc, #464]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005df2:	430b      	orrs	r3, r1
 8005df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005e02:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e04:	2300      	movs	r3, #0
 8005e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	d00a      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e12:	4b6c      	ldr	r3, [pc, #432]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e16:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e22:	4a68      	ldr	r2, [pc, #416]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e24:	430b      	orrs	r3, r1
 8005e26:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	2100      	movs	r1, #0
 8005e32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d011      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e48:	3308      	adds	r3, #8
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 f99d 	bl	800718c <RCCEx_PLL2_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	2100      	movs	r1, #0
 8005e72:	6239      	str	r1, [r7, #32]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4313      	orrs	r3, r2
 8005e82:	d011      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e88:	3308      	adds	r3, #8
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 f97d 	bl	800718c <RCCEx_PLL2_Config>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	61b9      	str	r1, [r7, #24]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	d011      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	3308      	adds	r3, #8
 8005eca:	2102      	movs	r1, #2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 f95d 	bl	800718c <RCCEx_PLL2_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	6139      	str	r1, [r7, #16]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005efe:	460b      	mov	r3, r1
 8005f00:	4313      	orrs	r3, r2
 8005f02:	d011      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f08:	3328      	adds	r3, #40	@ 0x28
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 f9ef 	bl	80072f0 <RCCEx_PLL3_Config>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	2100      	movs	r1, #0
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4313      	orrs	r3, r2
 8005f42:	d011      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f48:	3328      	adds	r3, #40	@ 0x28
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 f9cf 	bl	80072f0 <RCCEx_PLL3_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	2100      	movs	r1, #0
 8005f72:	6039      	str	r1, [r7, #0]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4313      	orrs	r3, r2
 8005f82:	d011      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f88:	3328      	adds	r3, #40	@ 0x28
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 f9af 	bl	80072f0 <RCCEx_PLL3_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005fa8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fc2:	bf00      	nop
 8005fc4:	58024400 	.word	0x58024400

08005fc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b090      	sub	sp, #64	@ 0x40
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fd6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	f040 8094 	bne.w	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005fe0:	4b9b      	ldr	r3, [pc, #620]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	f200 8087 	bhi.w	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	0800600d 	.word	0x0800600d
 8005ffc:	08006035 	.word	0x08006035
 8006000:	0800605d 	.word	0x0800605d
 8006004:	080060f9 	.word	0x080060f9
 8006008:	08006085 	.word	0x08006085
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800600c:	4b90      	ldr	r3, [pc, #576]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006018:	d108      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800601a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800601e:	4618      	mov	r0, r3
 8006020:	f000 ff62 	bl	8006ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006028:	f000 bc93 	b.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800602c:	2300      	movs	r3, #0
 800602e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006030:	f000 bc8f 	b.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006034:	4b86      	ldr	r3, [pc, #536]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800603c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006040:	d108      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006042:	f107 0318 	add.w	r3, r7, #24
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fca6 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006050:	f000 bc7f 	b.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006058:	f000 bc7b 	b.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800605c:	4b7c      	ldr	r3, [pc, #496]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006068:	d108      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800606a:	f107 030c 	add.w	r3, r7, #12
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fde6 	bl	8006c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006078:	f000 bc6b 	b.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006080:	f000 bc67 	b.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006084:	4b72      	ldr	r3, [pc, #456]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006088:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800608e:	4b70      	ldr	r3, [pc, #448]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b04      	cmp	r3, #4
 8006098:	d10c      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800609a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	08db      	lsrs	r3, r3, #3
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	4a6a      	ldr	r2, [pc, #424]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80060ac:	fa22 f303 	lsr.w	r3, r2, r3
 80060b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060b2:	e01f      	b.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060b4:	4b66      	ldr	r3, [pc, #408]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060c0:	d106      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80060c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060c8:	d102      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060ca:	4b63      	ldr	r3, [pc, #396]	@ (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80060cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060ce:	e011      	b.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060d0:	4b5f      	ldr	r3, [pc, #380]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060dc:	d106      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80060de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060e4:	d102      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060e6:	4b5d      	ldr	r3, [pc, #372]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060ea:	e003      	b.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80060f0:	f000 bc2f 	b.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80060f4:	f000 bc2d 	b.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80060f8:	4b59      	ldr	r3, [pc, #356]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80060fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060fc:	f000 bc29 	b.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006104:	f000 bc25 	b.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800610c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006110:	430b      	orrs	r3, r1
 8006112:	f040 80a7 	bne.w	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006116:	4b4e      	ldr	r3, [pc, #312]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800611e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006122:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006126:	d054      	beq.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800612e:	f200 808b 	bhi.w	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006138:	f000 8083 	beq.w	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006142:	f200 8081 	bhi.w	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800614c:	d02f      	beq.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006154:	d878      	bhi.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800615c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006162:	d012      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006164:	e070      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006166:	4b3a      	ldr	r3, [pc, #232]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006172:	d107      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006178:	4618      	mov	r0, r3
 800617a:	f000 feb5 	bl	8006ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800617e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006182:	e3e6      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006188:	e3e3      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800618a:	4b31      	ldr	r3, [pc, #196]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006196:	d107      	bne.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006198:	f107 0318 	add.w	r3, r7, #24
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fbfb 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061a6:	e3d4      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ac:	e3d1      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061ae:	4b28      	ldr	r3, [pc, #160]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061ba:	d107      	bne.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061bc:	f107 030c 	add.w	r3, r7, #12
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fd3d 	bl	8006c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ca:	e3c2      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d0:	e3bf      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80061d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80061da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d10c      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80061e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d109      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061ee:	4b18      	ldr	r3, [pc, #96]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	08db      	lsrs	r3, r3, #3
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	4a16      	ldr	r2, [pc, #88]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80061fa:	fa22 f303 	lsr.w	r3, r2, r3
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006200:	e01e      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006202:	4b13      	ldr	r3, [pc, #76]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800620e:	d106      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006216:	d102      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006218:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800621c:	e010      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800621e:	4b0c      	ldr	r3, [pc, #48]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006226:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800622a:	d106      	bne.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800622c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006232:	d102      	bne.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006234:	4b09      	ldr	r3, [pc, #36]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006238:	e002      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800623e:	e388      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006240:	e387      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006242:	4b07      	ldr	r3, [pc, #28]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006246:	e384      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800624c:	e381      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800624e:	bf00      	nop
 8006250:	58024400 	.word	0x58024400
 8006254:	03d09000 	.word	0x03d09000
 8006258:	003d0900 	.word	0x003d0900
 800625c:	02dc6c00 	.word	0x02dc6c00
 8006260:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006268:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800626c:	430b      	orrs	r3, r1
 800626e:	f040 809c 	bne.w	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006272:	4b9e      	ldr	r3, [pc, #632]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006276:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800627a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800627c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006282:	d054      	beq.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800628a:	f200 808b 	bhi.w	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006290:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006294:	f000 8083 	beq.w	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800629e:	f200 8081 	bhi.w	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062a8:	d02f      	beq.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062b0:	d878      	bhi.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062be:	d012      	beq.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80062c0:	e070      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062c2:	4b8a      	ldr	r3, [pc, #552]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062ce:	d107      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fe07 	bl	8006ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062de:	e338      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062e4:	e335      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062e6:	4b81      	ldr	r3, [pc, #516]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062f2:	d107      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f4:	f107 0318 	add.w	r3, r7, #24
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fb4d 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006302:	e326      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006308:	e323      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800630a:	4b78      	ldr	r3, [pc, #480]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006316:	d107      	bne.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006318:	f107 030c 	add.w	r3, r7, #12
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fc8f 	bl	8006c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006326:	e314      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632c:	e311      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800632e:	4b6f      	ldr	r3, [pc, #444]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006332:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006336:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006338:	4b6c      	ldr	r3, [pc, #432]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b04      	cmp	r3, #4
 8006342:	d10c      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800634a:	4b68      	ldr	r3, [pc, #416]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	08db      	lsrs	r3, r3, #3
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	4a66      	ldr	r2, [pc, #408]	@ (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006356:	fa22 f303 	lsr.w	r3, r2, r3
 800635a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800635c:	e01e      	b.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800635e:	4b63      	ldr	r3, [pc, #396]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800636a:	d106      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800636c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006372:	d102      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006374:	4b5f      	ldr	r3, [pc, #380]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006378:	e010      	b.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800637a:	4b5c      	ldr	r3, [pc, #368]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006382:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006386:	d106      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8006388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800638e:	d102      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006390:	4b59      	ldr	r3, [pc, #356]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006394:	e002      	b.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800639a:	e2da      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800639c:	e2d9      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800639e:	4b57      	ldr	r3, [pc, #348]	@ (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80063a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063a2:	e2d6      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063a8:	e2d3      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80063aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80063b2:	430b      	orrs	r3, r1
 80063b4:	f040 80a7 	bne.w	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80063b8:	4b4c      	ldr	r3, [pc, #304]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80063ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063bc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80063c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80063c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063c8:	d055      	beq.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d0:	f200 8096 	bhi.w	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80063d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063da:	f000 8084 	beq.w	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80063de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063e4:	f200 808c 	bhi.w	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80063e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ee:	d030      	beq.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80063f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f6:	f200 8083 	bhi.w	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80063fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006406:	d012      	beq.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006408:	e07a      	b.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800640a:	4b38      	ldr	r3, [pc, #224]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006412:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006416:	d107      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fd63 	bl	8006ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006426:	e294      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642c:	e291      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800642e:	4b2f      	ldr	r3, [pc, #188]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800643a:	d107      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800643c:	f107 0318 	add.w	r3, r7, #24
 8006440:	4618      	mov	r0, r3
 8006442:	f000 faa9 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800644a:	e282      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006450:	e27f      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006452:	4b26      	ldr	r3, [pc, #152]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800645a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800645e:	d107      	bne.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006460:	f107 030c 	add.w	r3, r7, #12
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fbeb 	bl	8006c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800646e:	e270      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006470:	2300      	movs	r3, #0
 8006472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006474:	e26d      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006476:	4b1d      	ldr	r3, [pc, #116]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800647a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800647e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006480:	4b1a      	ldr	r3, [pc, #104]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b04      	cmp	r3, #4
 800648a:	d10c      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800648c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006492:	4b16      	ldr	r3, [pc, #88]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	08db      	lsrs	r3, r3, #3
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	4a14      	ldr	r2, [pc, #80]	@ (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800649e:	fa22 f303 	lsr.w	r3, r2, r3
 80064a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064a4:	e01e      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064a6:	4b11      	ldr	r3, [pc, #68]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064b2:	d106      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80064b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064ba:	d102      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064bc:	4b0d      	ldr	r3, [pc, #52]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80064be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064c0:	e010      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064c2:	4b0a      	ldr	r3, [pc, #40]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ce:	d106      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80064d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064d6:	d102      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80064d8:	4b07      	ldr	r3, [pc, #28]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064dc:	e002      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80064e2:	e236      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80064e4:	e235      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80064e6:	4b05      	ldr	r3, [pc, #20]	@ (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80064e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ea:	e232      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80064ec:	58024400 	.word	0x58024400
 80064f0:	03d09000 	.word	0x03d09000
 80064f4:	003d0900 	.word	0x003d0900
 80064f8:	02dc6c00 	.word	0x02dc6c00
 80064fc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006504:	e225      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800650e:	430b      	orrs	r3, r1
 8006510:	f040 8085 	bne.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006514:	4b9c      	ldr	r3, [pc, #624]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006518:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800651c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006524:	d06b      	beq.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800652c:	d874      	bhi.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800652e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006530:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006534:	d056      	beq.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006538:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800653c:	d86c      	bhi.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006544:	d03b      	beq.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800654c:	d864      	bhi.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800654e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006554:	d021      	beq.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800655c:	d85c      	bhi.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800656a:	d004      	beq.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800656c:	e054      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800656e:	f7fe fb5f 	bl	8004c30 <HAL_RCC_GetPCLK1Freq>
 8006572:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006574:	e1ed      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006576:	4b84      	ldr	r3, [pc, #528]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800657e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006582:	d107      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006584:	f107 0318 	add.w	r3, r7, #24
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fa05 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006592:	e1de      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006598:	e1db      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800659a:	4b7b      	ldr	r3, [pc, #492]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065a6:	d107      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065a8:	f107 030c 	add.w	r3, r7, #12
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fb47 	bl	8006c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065b6:	e1cc      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065bc:	e1c9      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065be:	4b72      	ldr	r3, [pc, #456]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d109      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065ca:	4b6f      	ldr	r3, [pc, #444]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	08db      	lsrs	r3, r3, #3
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	4a6d      	ldr	r2, [pc, #436]	@ (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80065d6:	fa22 f303 	lsr.w	r3, r2, r3
 80065da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065dc:	e1b9      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e2:	e1b6      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80065e4:	4b68      	ldr	r3, [pc, #416]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065f0:	d102      	bne.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80065f2:	4b67      	ldr	r3, [pc, #412]	@ (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80065f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065f6:	e1ac      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065fc:	e1a9      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80065fe:	4b62      	ldr	r3, [pc, #392]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800660a:	d102      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800660c:	4b61      	ldr	r3, [pc, #388]	@ (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800660e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006610:	e19f      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006616:	e19c      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661c:	e199      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800661e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006622:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006626:	430b      	orrs	r3, r1
 8006628:	d173      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800662a:	4b57      	ldr	r3, [pc, #348]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800662c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006632:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800663a:	d02f      	beq.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006642:	d863      	bhi.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006650:	d012      	beq.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006652:	e05b      	b.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006654:	4b4c      	ldr	r3, [pc, #304]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800665c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006660:	d107      	bne.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006662:	f107 0318 	add.w	r3, r7, #24
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f996 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006670:	e16f      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006676:	e16c      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006678:	4b43      	ldr	r3, [pc, #268]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006684:	d107      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006686:	f107 030c 	add.w	r3, r7, #12
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fad8 	bl	8006c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006694:	e15d      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800669a:	e15a      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800669c:	4b3a      	ldr	r3, [pc, #232]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800669e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066a6:	4b38      	ldr	r3, [pc, #224]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d10c      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80066b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066b8:	4b33      	ldr	r3, [pc, #204]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	08db      	lsrs	r3, r3, #3
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	4a32      	ldr	r2, [pc, #200]	@ (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80066c4:	fa22 f303 	lsr.w	r3, r2, r3
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ca:	e01e      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d8:	d106      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80066da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066e0:	d102      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80066e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e6:	e010      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066e8:	4b27      	ldr	r3, [pc, #156]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066f4:	d106      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80066f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066fc:	d102      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066fe:	4b25      	ldr	r3, [pc, #148]	@ (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006702:	e002      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006708:	e123      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800670a:	e122      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006710:	e11f      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006716:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800671a:	430b      	orrs	r3, r1
 800671c:	d13c      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800671e:	4b1a      	ldr	r3, [pc, #104]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006726:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006734:	d012      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006736:	e023      	b.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006738:	4b13      	ldr	r3, [pc, #76]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006744:	d107      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fbcc 	bl	8006ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006754:	e0fd      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800675a:	e0fa      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800675c:	4b0a      	ldr	r3, [pc, #40]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006768:	d107      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800676a:	f107 0318 	add.w	r3, r7, #24
 800676e:	4618      	mov	r0, r3
 8006770:	f000 f912 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006778:	e0eb      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800677e:	e0e8      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006784:	e0e5      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006786:	bf00      	nop
 8006788:	58024400 	.word	0x58024400
 800678c:	03d09000 	.word	0x03d09000
 8006790:	003d0900 	.word	0x003d0900
 8006794:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80067a0:	430b      	orrs	r3, r1
 80067a2:	f040 8085 	bne.w	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80067a6:	4b6d      	ldr	r3, [pc, #436]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80067a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067aa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80067ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80067b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067b6:	d06b      	beq.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80067b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067be:	d874      	bhi.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80067c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c6:	d056      	beq.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80067c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ce:	d86c      	bhi.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80067d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067d6:	d03b      	beq.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80067d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067de:	d864      	bhi.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e6:	d021      	beq.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80067e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ee:	d85c      	bhi.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80067f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067fc:	d004      	beq.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80067fe:	e054      	b.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006800:	f000 f8b4 	bl	800696c <HAL_RCCEx_GetD3PCLK1Freq>
 8006804:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006806:	e0a4      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006808:	4b54      	ldr	r3, [pc, #336]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006814:	d107      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006816:	f107 0318 	add.w	r3, r7, #24
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f8bc 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006824:	e095      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800682a:	e092      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800682c:	4b4b      	ldr	r3, [pc, #300]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006838:	d107      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800683a:	f107 030c 	add.w	r3, r7, #12
 800683e:	4618      	mov	r0, r3
 8006840:	f000 f9fe 	bl	8006c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006848:	e083      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800684e:	e080      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006850:	4b42      	ldr	r3, [pc, #264]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b04      	cmp	r3, #4
 800685a:	d109      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800685c:	4b3f      	ldr	r3, [pc, #252]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	08db      	lsrs	r3, r3, #3
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	4a3e      	ldr	r2, [pc, #248]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006868:	fa22 f303 	lsr.w	r3, r2, r3
 800686c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800686e:	e070      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006874:	e06d      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006876:	4b39      	ldr	r3, [pc, #228]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006882:	d102      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006884:	4b37      	ldr	r3, [pc, #220]	@ (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006888:	e063      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800688e:	e060      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006890:	4b32      	ldr	r3, [pc, #200]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800689c:	d102      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800689e:	4b32      	ldr	r3, [pc, #200]	@ (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80068a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a2:	e056      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068a8:	e053      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ae:	e050      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80068b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068b4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80068b8:	430b      	orrs	r3, r1
 80068ba:	d148      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80068bc:	4b27      	ldr	r3, [pc, #156]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80068be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80068c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068cc:	d02a      	beq.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80068ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d4:	d838      	bhi.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80068d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80068dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e2:	d00d      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80068e4:	e030      	b.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068e6:	4b1d      	ldr	r3, [pc, #116]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f2:	d102      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80068f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f8:	e02b      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068fe:	e028      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006900:	4b16      	ldr	r3, [pc, #88]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006908:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800690c:	d107      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800690e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fae8 	bl	8006ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800691c:	e019      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006922:	e016      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006924:	4b0d      	ldr	r3, [pc, #52]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800692c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006930:	d107      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006932:	f107 0318 	add.w	r3, r7, #24
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f82e 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006940:	e007      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006946:	e004      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800694c:	e001      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006954:	4618      	mov	r0, r3
 8006956:	3740      	adds	r7, #64	@ 0x40
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	58024400 	.word	0x58024400
 8006960:	03d09000 	.word	0x03d09000
 8006964:	003d0900 	.word	0x003d0900
 8006968:	02dc6c00 	.word	0x02dc6c00

0800696c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006970:	f7fe f92e 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8006974:	4602      	mov	r2, r0
 8006976:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	091b      	lsrs	r3, r3, #4
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	4904      	ldr	r1, [pc, #16]	@ (8006994 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006982:	5ccb      	ldrb	r3, [r1, r3]
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800698c:	4618      	mov	r0, r3
 800698e:	bd80      	pop	{r7, pc}
 8006990:	58024400 	.word	0x58024400
 8006994:	08010d24 	.word	0x08010d24

08006998 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006998:	b480      	push	{r7}
 800699a:	b089      	sub	sp, #36	@ 0x24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80069aa:	4b9f      	ldr	r3, [pc, #636]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ae:	0b1b      	lsrs	r3, r3, #12
 80069b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	091b      	lsrs	r3, r3, #4
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80069c2:	4b99      	ldr	r3, [pc, #612]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c6:	08db      	lsrs	r3, r3, #3
 80069c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8111 	beq.w	8006c08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	f000 8083 	beq.w	8006af4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	f200 80a1 	bhi.w	8006b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d056      	beq.n	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a02:	e099      	b.n	8006b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a04:	4b88      	ldr	r3, [pc, #544]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d02d      	beq.n	8006a6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a10:	4b85      	ldr	r3, [pc, #532]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	08db      	lsrs	r3, r3, #3
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	4a84      	ldr	r2, [pc, #528]	@ (8006c2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	ee07 3a90 	vmov	s15, r3
 8006a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a6a:	e087      	b.n	8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aae:	e065      	b.n	8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac2:	4b59      	ldr	r3, [pc, #356]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af2:	e043      	b.n	8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b06:	4b48      	ldr	r3, [pc, #288]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b36:	e021      	b.n	8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4a:	4b37      	ldr	r3, [pc, #220]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b80:	0a5b      	lsrs	r3, r3, #9
 8006b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ba2:	ee17 2a90 	vmov	r2, s15
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006baa:	4b1f      	ldr	r3, [pc, #124]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bae:	0c1b      	lsrs	r3, r3, #16
 8006bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bd0:	ee17 2a90 	vmov	r2, s15
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006bd8:	4b13      	ldr	r3, [pc, #76]	@ (8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bdc:	0e1b      	lsrs	r3, r3, #24
 8006bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bfe:	ee17 2a90 	vmov	r2, s15
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c06:	e008      	b.n	8006c1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	609a      	str	r2, [r3, #8]
}
 8006c1a:	bf00      	nop
 8006c1c:	3724      	adds	r7, #36	@ 0x24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	03d09000 	.word	0x03d09000
 8006c30:	46000000 	.word	0x46000000
 8006c34:	4c742400 	.word	0x4c742400
 8006c38:	4a742400 	.word	0x4a742400
 8006c3c:	4c371b00 	.word	0x4c371b00

08006c40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b089      	sub	sp, #36	@ 0x24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c48:	4ba1      	ldr	r3, [pc, #644]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006c52:	4b9f      	ldr	r3, [pc, #636]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c56:	0d1b      	lsrs	r3, r3, #20
 8006c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c5e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c62:	0a1b      	lsrs	r3, r3, #8
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006c6a:	4b99      	ldr	r3, [pc, #612]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6e:	08db      	lsrs	r3, r3, #3
 8006c70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8111 	beq.w	8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	f000 8083 	beq.w	8006d9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	f200 80a1 	bhi.w	8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d056      	beq.n	8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006caa:	e099      	b.n	8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cac:	4b88      	ldr	r3, [pc, #544]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d02d      	beq.n	8006d14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cb8:	4b85      	ldr	r3, [pc, #532]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	08db      	lsrs	r3, r3, #3
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	4a84      	ldr	r2, [pc, #528]	@ (8006ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	ee07 3a90 	vmov	s15, r3
 8006cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d12:	e087      	b.n	8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d26:	4b6a      	ldr	r3, [pc, #424]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d56:	e065      	b.n	8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6a:	4b59      	ldr	r3, [pc, #356]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d9a:	e043      	b.n	8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dae:	4b48      	ldr	r3, [pc, #288]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dde:	e021      	b.n	8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df2:	4b37      	ldr	r3, [pc, #220]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e24:	4b2a      	ldr	r3, [pc, #168]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e28:	0a5b      	lsrs	r3, r3, #9
 8006e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e4a:	ee17 2a90 	vmov	r2, s15
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006e52:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e56:	0c1b      	lsrs	r3, r3, #16
 8006e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e5c:	ee07 3a90 	vmov	s15, r3
 8006e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e78:	ee17 2a90 	vmov	r2, s15
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006e80:	4b13      	ldr	r3, [pc, #76]	@ (8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e84:	0e1b      	lsrs	r3, r3, #24
 8006e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ea6:	ee17 2a90 	vmov	r2, s15
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006eae:	e008      	b.n	8006ec2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	609a      	str	r2, [r3, #8]
}
 8006ec2:	bf00      	nop
 8006ec4:	3724      	adds	r7, #36	@ 0x24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	58024400 	.word	0x58024400
 8006ed4:	03d09000 	.word	0x03d09000
 8006ed8:	46000000 	.word	0x46000000
 8006edc:	4c742400 	.word	0x4c742400
 8006ee0:	4a742400 	.word	0x4a742400
 8006ee4:	4c371b00 	.word	0x4c371b00

08006ee8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b089      	sub	sp, #36	@ 0x24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ef0:	4ba0      	ldr	r3, [pc, #640]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef4:	f003 0303 	and.w	r3, r3, #3
 8006ef8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006efa:	4b9e      	ldr	r3, [pc, #632]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efe:	091b      	lsrs	r3, r3, #4
 8006f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f06:	4b9b      	ldr	r3, [pc, #620]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f10:	4b98      	ldr	r3, [pc, #608]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f14:	08db      	lsrs	r3, r3, #3
 8006f16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	fb02 f303 	mul.w	r3, r2, r3
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8111 	beq.w	8007156 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	f000 8083 	beq.w	8007042 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	f200 80a1 	bhi.w	8007086 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d056      	beq.n	8006ffe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006f50:	e099      	b.n	8007086 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f52:	4b88      	ldr	r3, [pc, #544]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d02d      	beq.n	8006fba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f5e:	4b85      	ldr	r3, [pc, #532]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	08db      	lsrs	r3, r3, #3
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	4a83      	ldr	r2, [pc, #524]	@ (8007178 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	ee07 3a90 	vmov	s15, r3
 8006f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f88:	4b7a      	ldr	r3, [pc, #488]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f90:	ee07 3a90 	vmov	s15, r3
 8006f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f98:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f9c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800717c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fb8:	e087      	b.n	80070ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	ee07 3a90 	vmov	s15, r3
 8006fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fcc:	4b69      	ldr	r3, [pc, #420]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fe0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800717c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ffc:	e065      	b.n	80070ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007008:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007184 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800700c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007010:	4b58      	ldr	r3, [pc, #352]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007018:	ee07 3a90 	vmov	s15, r3
 800701c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007020:	ed97 6a03 	vldr	s12, [r7, #12]
 8007024:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800717c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007030:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007040:	e043      	b.n	80070ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007188 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007054:	4b47      	ldr	r3, [pc, #284]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705c:	ee07 3a90 	vmov	s15, r3
 8007060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007064:	ed97 6a03 	vldr	s12, [r7, #12]
 8007068:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800717c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800706c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007074:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800707c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007080:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007084:	e021      	b.n	80070ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	ee07 3a90 	vmov	s15, r3
 800708c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007090:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007098:	4b36      	ldr	r3, [pc, #216]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800709a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a0:	ee07 3a90 	vmov	s15, r3
 80070a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800717c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80070ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ce:	0a5b      	lsrs	r3, r3, #9
 80070d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070d4:	ee07 3a90 	vmov	s15, r3
 80070d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f0:	ee17 2a90 	vmov	r2, s15
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80070f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fc:	0c1b      	lsrs	r3, r3, #16
 80070fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800710e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007112:	edd7 6a07 	vldr	s13, [r7, #28]
 8007116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800711a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800711e:	ee17 2a90 	vmov	r2, s15
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007126:	4b13      	ldr	r3, [pc, #76]	@ (8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712a:	0e1b      	lsrs	r3, r3, #24
 800712c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007130:	ee07 3a90 	vmov	s15, r3
 8007134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800713c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007140:	edd7 6a07 	vldr	s13, [r7, #28]
 8007144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800714c:	ee17 2a90 	vmov	r2, s15
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007154:	e008      	b.n	8007168 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	609a      	str	r2, [r3, #8]
}
 8007168:	bf00      	nop
 800716a:	3724      	adds	r7, #36	@ 0x24
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	58024400 	.word	0x58024400
 8007178:	03d09000 	.word	0x03d09000
 800717c:	46000000 	.word	0x46000000
 8007180:	4c742400 	.word	0x4c742400
 8007184:	4a742400 	.word	0x4a742400
 8007188:	4c371b00 	.word	0x4c371b00

0800718c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800719a:	4b53      	ldr	r3, [pc, #332]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 800719c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d101      	bne.n	80071aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e099      	b.n	80072de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80071aa:	4b4f      	ldr	r3, [pc, #316]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a4e      	ldr	r2, [pc, #312]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 80071b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071b6:	f7fb f913 	bl	80023e0 <HAL_GetTick>
 80071ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071bc:	e008      	b.n	80071d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071be:	f7fb f90f 	bl	80023e0 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e086      	b.n	80072de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071d0:	4b45      	ldr	r3, [pc, #276]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f0      	bne.n	80071be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80071dc:	4b42      	ldr	r3, [pc, #264]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	031b      	lsls	r3, r3, #12
 80071ea:	493f      	ldr	r1, [pc, #252]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	3b01      	subs	r3, #1
 8007200:	025b      	lsls	r3, r3, #9
 8007202:	b29b      	uxth	r3, r3
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	3b01      	subs	r3, #1
 800720c:	041b      	lsls	r3, r3, #16
 800720e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	3b01      	subs	r3, #1
 800721a:	061b      	lsls	r3, r3, #24
 800721c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007220:	4931      	ldr	r1, [pc, #196]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007222:	4313      	orrs	r3, r2
 8007224:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007226:	4b30      	ldr	r3, [pc, #192]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	492d      	ldr	r1, [pc, #180]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007234:	4313      	orrs	r3, r2
 8007236:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007238:	4b2b      	ldr	r3, [pc, #172]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 800723a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723c:	f023 0220 	bic.w	r2, r3, #32
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	4928      	ldr	r1, [pc, #160]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007246:	4313      	orrs	r3, r2
 8007248:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800724a:	4b27      	ldr	r3, [pc, #156]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 800724c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724e:	4a26      	ldr	r2, [pc, #152]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007250:	f023 0310 	bic.w	r3, r3, #16
 8007254:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007256:	4b24      	ldr	r3, [pc, #144]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007258:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800725a:	4b24      	ldr	r3, [pc, #144]	@ (80072ec <RCCEx_PLL2_Config+0x160>)
 800725c:	4013      	ands	r3, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	69d2      	ldr	r2, [r2, #28]
 8007262:	00d2      	lsls	r2, r2, #3
 8007264:	4920      	ldr	r1, [pc, #128]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007266:	4313      	orrs	r3, r2
 8007268:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800726a:	4b1f      	ldr	r3, [pc, #124]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 800726c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726e:	4a1e      	ldr	r2, [pc, #120]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007270:	f043 0310 	orr.w	r3, r3, #16
 8007274:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800727c:	4b1a      	ldr	r3, [pc, #104]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 800727e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007280:	4a19      	ldr	r2, [pc, #100]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007282:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007286:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007288:	e00f      	b.n	80072aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d106      	bne.n	800729e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007290:	4b15      	ldr	r3, [pc, #84]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007294:	4a14      	ldr	r2, [pc, #80]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 8007296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800729a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800729c:	e005      	b.n	80072aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800729e:	4b12      	ldr	r3, [pc, #72]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	4a11      	ldr	r2, [pc, #68]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 80072a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80072aa:	4b0f      	ldr	r3, [pc, #60]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a0e      	ldr	r2, [pc, #56]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 80072b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072b6:	f7fb f893 	bl	80023e0 <HAL_GetTick>
 80072ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072bc:	e008      	b.n	80072d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072be:	f7fb f88f 	bl	80023e0 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e006      	b.n	80072de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072d0:	4b05      	ldr	r3, [pc, #20]	@ (80072e8 <RCCEx_PLL2_Config+0x15c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0f0      	beq.n	80072be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	58024400 	.word	0x58024400
 80072ec:	ffff0007 	.word	0xffff0007

080072f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072fe:	4b53      	ldr	r3, [pc, #332]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	2b03      	cmp	r3, #3
 8007308:	d101      	bne.n	800730e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e099      	b.n	8007442 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800730e:	4b4f      	ldr	r3, [pc, #316]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a4e      	ldr	r2, [pc, #312]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731a:	f7fb f861 	bl	80023e0 <HAL_GetTick>
 800731e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007320:	e008      	b.n	8007334 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007322:	f7fb f85d 	bl	80023e0 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d901      	bls.n	8007334 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e086      	b.n	8007442 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007334:	4b45      	ldr	r3, [pc, #276]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1f0      	bne.n	8007322 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007340:	4b42      	ldr	r3, [pc, #264]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007344:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	051b      	lsls	r3, r3, #20
 800734e:	493f      	ldr	r1, [pc, #252]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007350:	4313      	orrs	r3, r2
 8007352:	628b      	str	r3, [r1, #40]	@ 0x28
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	3b01      	subs	r3, #1
 800735a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	3b01      	subs	r3, #1
 8007364:	025b      	lsls	r3, r3, #9
 8007366:	b29b      	uxth	r3, r3
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	3b01      	subs	r3, #1
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	3b01      	subs	r3, #1
 800737e:	061b      	lsls	r3, r3, #24
 8007380:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007384:	4931      	ldr	r1, [pc, #196]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007386:	4313      	orrs	r3, r2
 8007388:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800738a:	4b30      	ldr	r3, [pc, #192]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 800738c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	492d      	ldr	r1, [pc, #180]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007398:	4313      	orrs	r3, r2
 800739a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800739c:	4b2b      	ldr	r3, [pc, #172]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 800739e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	4928      	ldr	r1, [pc, #160]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80073ae:	4b27      	ldr	r3, [pc, #156]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b2:	4a26      	ldr	r2, [pc, #152]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073ba:	4b24      	ldr	r3, [pc, #144]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073be:	4b24      	ldr	r3, [pc, #144]	@ (8007450 <RCCEx_PLL3_Config+0x160>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	69d2      	ldr	r2, [r2, #28]
 80073c6:	00d2      	lsls	r2, r2, #3
 80073c8:	4920      	ldr	r1, [pc, #128]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80073ce:	4b1f      	ldr	r3, [pc, #124]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	4a1e      	ldr	r2, [pc, #120]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80073e0:	4b1a      	ldr	r3, [pc, #104]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e4:	4a19      	ldr	r2, [pc, #100]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80073ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073ec:	e00f      	b.n	800740e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d106      	bne.n	8007402 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80073f4:	4b15      	ldr	r3, [pc, #84]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f8:	4a14      	ldr	r2, [pc, #80]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 80073fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007400:	e005      	b.n	800740e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007402:	4b12      	ldr	r3, [pc, #72]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	4a11      	ldr	r2, [pc, #68]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007408:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800740c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800740e:	4b0f      	ldr	r3, [pc, #60]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a0e      	ldr	r2, [pc, #56]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800741a:	f7fa ffe1 	bl	80023e0 <HAL_GetTick>
 800741e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007420:	e008      	b.n	8007434 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007422:	f7fa ffdd 	bl	80023e0 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d901      	bls.n	8007434 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e006      	b.n	8007442 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007434:	4b05      	ldr	r3, [pc, #20]	@ (800744c <RCCEx_PLL3_Config+0x15c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0f0      	beq.n	8007422 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	58024400 	.word	0x58024400
 8007450:	ffff0007 	.word	0xffff0007

08007454 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d071      	beq.n	800754a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7fa fa64 	bl	8001948 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f003 0310 	and.w	r3, r3, #16
 8007492:	2b10      	cmp	r3, #16
 8007494:	d050      	beq.n	8007538 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	22ca      	movs	r2, #202	@ 0xca
 800749c:	625a      	str	r2, [r3, #36]	@ 0x24
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2253      	movs	r2, #83	@ 0x53
 80074a4:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f9a0 	bl	80077ec <RTC_EnterInitMode>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d124      	bne.n	8007500 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6899      	ldr	r1, [r3, #8]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	4b24      	ldr	r3, [pc, #144]	@ (8007554 <HAL_RTC_Init+0x100>)
 80074c2:	400b      	ands	r3, r1
 80074c4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6899      	ldr	r1, [r3, #8]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	0419      	lsls	r1, r3, #16
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f9ac 	bl	8007854 <RTC_ExitInitMode>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d113      	bne.n	800752e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0203 	bic.w	r2, r2, #3
 8007514:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69da      	ldr	r2, [r3, #28]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	22ff      	movs	r2, #255	@ 0xff
 8007534:	625a      	str	r2, [r3, #36]	@ 0x24
 8007536:	e001      	b.n	800753c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d103      	bne.n	800754a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	ff8fffbf 	.word	0xff8fffbf

08007558 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007558:	b590      	push	{r4, r7, lr}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d101      	bne.n	8007572 <HAL_RTC_SetTime+0x1a>
 800756e:	2302      	movs	r3, #2
 8007570:	e089      	b.n	8007686 <HAL_RTC_SetTime+0x12e>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2202      	movs	r2, #2
 800757e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	22ca      	movs	r2, #202	@ 0xca
 8007588:	625a      	str	r2, [r3, #36]	@ 0x24
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2253      	movs	r2, #83	@ 0x53
 8007590:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f92a 	bl	80077ec <RTC_EnterInitMode>
 8007598:	4603      	mov	r3, r0
 800759a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800759c:	7cfb      	ldrb	r3, [r7, #19]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d161      	bne.n	8007666 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d126      	bne.n	80075f6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 f985 	bl	80078d0 <RTC_ByteToBcd2>
 80075c6:	4603      	mov	r3, r0
 80075c8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 f97e 	bl	80078d0 <RTC_ByteToBcd2>
 80075d4:	4603      	mov	r3, r0
 80075d6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80075d8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	789b      	ldrb	r3, [r3, #2]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 f976 	bl	80078d0 <RTC_ByteToBcd2>
 80075e4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80075e6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	78db      	ldrb	r3, [r3, #3]
 80075ee:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	e018      	b.n	8007628 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007616:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800761c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	78db      	ldrb	r3, [r3, #3]
 8007622:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007624:	4313      	orrs	r3, r2
 8007626:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	6979      	ldr	r1, [r7, #20]
 800762e:	4b18      	ldr	r3, [pc, #96]	@ (8007690 <HAL_RTC_SetTime+0x138>)
 8007630:	400b      	ands	r3, r1
 8007632:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007642:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6899      	ldr	r1, [r3, #8]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	431a      	orrs	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f8f9 	bl	8007854 <RTC_ExitInitMode>
 8007662:	4603      	mov	r3, r0
 8007664:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	22ff      	movs	r2, #255	@ 0xff
 800766c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800766e:	7cfb      	ldrb	r3, [r7, #19]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007684:	7cfb      	ldrb	r3, [r7, #19]
}
 8007686:	4618      	mov	r0, r3
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	bd90      	pop	{r4, r7, pc}
 800768e:	bf00      	nop
 8007690:	007f7f7f 	.word	0x007f7f7f

08007694 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007694:	b590      	push	{r4, r7, lr}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <HAL_RTC_SetDate+0x1a>
 80076aa:	2302      	movs	r3, #2
 80076ac:	e073      	b.n	8007796 <HAL_RTC_SetDate+0x102>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2202      	movs	r2, #2
 80076ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10e      	bne.n	80076e2 <HAL_RTC_SetDate+0x4e>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	f003 0310 	and.w	r3, r3, #16
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d008      	beq.n	80076e2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	f023 0310 	bic.w	r3, r3, #16
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	330a      	adds	r3, #10
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d11c      	bne.n	8007722 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	78db      	ldrb	r3, [r3, #3]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 f8ef 	bl	80078d0 <RTC_ByteToBcd2>
 80076f2:	4603      	mov	r3, r0
 80076f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f8e8 	bl	80078d0 <RTC_ByteToBcd2>
 8007700:	4603      	mov	r3, r0
 8007702:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007704:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	789b      	ldrb	r3, [r3, #2]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 f8e0 	bl	80078d0 <RTC_ByteToBcd2>
 8007710:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007712:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e00e      	b.n	8007740 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	78db      	ldrb	r3, [r3, #3]
 8007726:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	785b      	ldrb	r3, [r3, #1]
 800772c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800772e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007734:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	22ca      	movs	r2, #202	@ 0xca
 8007746:	625a      	str	r2, [r3, #36]	@ 0x24
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2253      	movs	r2, #83	@ 0x53
 800774e:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f84b 	bl	80077ec <RTC_EnterInitMode>
 8007756:	4603      	mov	r3, r0
 8007758:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800775a:	7cfb      	ldrb	r3, [r7, #19]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	6979      	ldr	r1, [r7, #20]
 8007766:	4b0e      	ldr	r3, [pc, #56]	@ (80077a0 <HAL_RTC_SetDate+0x10c>)
 8007768:	400b      	ands	r3, r1
 800776a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f871 	bl	8007854 <RTC_ExitInitMode>
 8007772:	4603      	mov	r3, r0
 8007774:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	22ff      	movs	r2, #255	@ 0xff
 800777c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800777e:	7cfb      	ldrb	r3, [r7, #19]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007794:	7cfb      	ldrb	r3, [r7, #19]


}
 8007796:	4618      	mov	r0, r3
 8007798:	371c      	adds	r7, #28
 800779a:	46bd      	mov	sp, r7
 800779c:	bd90      	pop	{r4, r7, pc}
 800779e:	bf00      	nop
 80077a0:	00ffff3f 	.word	0x00ffff3f

080077a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a0d      	ldr	r2, [pc, #52]	@ (80077e8 <HAL_RTC_WaitForSynchro+0x44>)
 80077b2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80077b4:	f7fa fe14 	bl	80023e0 <HAL_GetTick>
 80077b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077ba:	e009      	b.n	80077d0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077bc:	f7fa fe10 	bl	80023e0 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077ca:	d901      	bls.n	80077d0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e007      	b.n	80077e0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0ee      	beq.n	80077bc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	0003ff5f 	.word	0x0003ff5f

080077ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007802:	2b00      	cmp	r3, #0
 8007804:	d120      	bne.n	8007848 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f04f 32ff 	mov.w	r2, #4294967295
 800780e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007810:	f7fa fde6 	bl	80023e0 <HAL_GetTick>
 8007814:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007816:	e00d      	b.n	8007834 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007818:	f7fa fde2 	bl	80023e0 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007826:	d905      	bls.n	8007834 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2203      	movs	r2, #3
 8007830:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <RTC_EnterInitMode+0x5c>
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d1e7      	bne.n	8007818 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007860:	4b1a      	ldr	r3, [pc, #104]	@ (80078cc <RTC_ExitInitMode+0x78>)
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	4a19      	ldr	r2, [pc, #100]	@ (80078cc <RTC_ExitInitMode+0x78>)
 8007866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800786a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800786c:	4b17      	ldr	r3, [pc, #92]	@ (80078cc <RTC_ExitInitMode+0x78>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10c      	bne.n	8007892 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff ff93 	bl	80077a4 <HAL_RTC_WaitForSynchro>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01e      	beq.n	80078c2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2203      	movs	r2, #3
 8007888:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	73fb      	strb	r3, [r7, #15]
 8007890:	e017      	b.n	80078c2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007892:	4b0e      	ldr	r3, [pc, #56]	@ (80078cc <RTC_ExitInitMode+0x78>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	4a0d      	ldr	r2, [pc, #52]	@ (80078cc <RTC_ExitInitMode+0x78>)
 8007898:	f023 0320 	bic.w	r3, r3, #32
 800789c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff ff80 	bl	80077a4 <HAL_RTC_WaitForSynchro>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2203      	movs	r2, #3
 80078ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80078b6:	4b05      	ldr	r3, [pc, #20]	@ (80078cc <RTC_ExitInitMode+0x78>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	4a04      	ldr	r2, [pc, #16]	@ (80078cc <RTC_ExitInitMode+0x78>)
 80078bc:	f043 0320 	orr.w	r3, r3, #32
 80078c0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	58004000 	.word	0x58004000

080078d0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80078e2:	e005      	b.n	80078f0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	3b0a      	subs	r3, #10
 80078ee:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	2b09      	cmp	r3, #9
 80078f4:	d8f6      	bhi.n	80078e4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	7afb      	ldrb	r3, [r7, #11]
 8007900:	4313      	orrs	r3, r2
 8007902:	b2db      	uxtb	r3, r3
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	@ 0x28
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e075      	b.n	8007a0e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d105      	bne.n	800793a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7fa f839 	bl	80019ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2204      	movs	r2, #4
 800793e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f868 	bl	8007a18 <HAL_SD_InitCard>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e05d      	b.n	8007a0e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007952:	f107 0308 	add.w	r3, r7, #8
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fdaf 	bl	80084bc <HAL_SD_GetCardStatus>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e052      	b.n	8007a0e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007968:	7e3b      	ldrb	r3, [r7, #24]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800796e:	7e7b      	ldrb	r3, [r7, #25]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007978:	2b01      	cmp	r3, #1
 800797a:	d10a      	bne.n	8007992 <HAL_SD_Init+0x82>
 800797c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797e:	2b00      	cmp	r3, #0
 8007980:	d102      	bne.n	8007988 <HAL_SD_Init+0x78>
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800798e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007990:	e00b      	b.n	80079aa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007996:	2b01      	cmp	r3, #1
 8007998:	d104      	bne.n	80079a4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80079a2:	e002      	b.n	80079aa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fe6d 	bl	8008690 <HAL_SD_ConfigWideBusOperation>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e026      	b.n	8007a0e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80079c0:	f7fa fd0e 	bl	80023e0 <HAL_GetTick>
 80079c4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80079c6:	e011      	b.n	80079ec <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80079c8:	f7fa fd0a 	bl	80023e0 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d6:	d109      	bne.n	80079ec <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80079de:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e010      	b.n	8007a0e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 ff61 	bl	80088b4 <HAL_SD_GetCardState>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d1e7      	bne.n	80079c8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3728      	adds	r7, #40	@ 0x28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a18:	b590      	push	{r4, r7, lr}
 8007a1a:	b08d      	sub	sp, #52	@ 0x34
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007a30:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007a34:	f04f 0100 	mov.w	r1, #0
 8007a38:	f7fe fac6 	bl	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a3c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d109      	bne.n	8007a58 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007a52:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e070      	b.n	8007b3a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	4a39      	ldr	r2, [pc, #228]	@ (8007b44 <HAL_SD_InitCard+0x12c>)
 8007a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a62:	091b      	lsrs	r3, r3, #4
 8007a64:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681c      	ldr	r4, [r3, #0]
 8007a6a:	466a      	mov	r2, sp
 8007a6c:	f107 0318 	add.w	r3, r7, #24
 8007a70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a74:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a78:	f107 030c 	add.w	r3, r7, #12
 8007a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f003 fdfe 	bl	800b680 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f003 fe41 	bl	800b710 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d007      	beq.n	8007ab6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007aa6:	4a28      	ldr	r2, [pc, #160]	@ (8007b48 <HAL_SD_InitCard+0x130>)
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aae:	3301      	adds	r3, #1
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fa fca1 	bl	80023f8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 ffea 	bl	8008a90 <SD_PowerON>
 8007abc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e02e      	b.n	8007b3a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 ff09 	bl	80088f4 <SD_InitCard>
 8007ae2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e01b      	b.n	8007b3a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f003 fe96 	bl	800b83c <SDMMC_CmdBlockLength>
 8007b10:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00f      	beq.n	8007b38 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8007b4c <HAL_SD_InitCard+0x134>)
 8007b1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	372c      	adds	r7, #44	@ 0x2c
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd90      	pop	{r4, r7, pc}
 8007b42:	bf00      	nop
 8007b44:	014f8b59 	.word	0x014f8b59
 8007b48:	00012110 	.word	0x00012110
 8007b4c:	1fe00fff 	.word	0x1fe00fff

08007b50 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08c      	sub	sp, #48	@ 0x30
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d107      	bne.n	8007b78 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b6c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e08d      	b.n	8007c94 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	f040 8086 	bne.w	8007c92 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	441a      	add	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d907      	bls.n	8007baa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b9e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e074      	b.n	8007c94 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2203      	movs	r2, #3
 8007bae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	025a      	lsls	r2, r3, #9
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d002      	beq.n	8007bd6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd2:	025b      	lsls	r3, r3, #9
 8007bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	025b      	lsls	r3, r3, #9
 8007be0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007be2:	2390      	movs	r3, #144	@ 0x90
 8007be4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007be6:	2302      	movs	r3, #2
 8007be8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f107 0210 	add.w	r2, r7, #16
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f003 fdf1 	bl	800b7e4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c10:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d90a      	bls.n	8007c3e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2282      	movs	r2, #130	@ 0x82
 8007c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c34:	4618      	mov	r0, r3
 8007c36:	f003 fe47 	bl	800b8c8 <SDMMC_CmdReadMultiBlock>
 8007c3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007c3c:	e009      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2281      	movs	r2, #129	@ 0x81
 8007c42:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f003 fe19 	bl	800b882 <SDMMC_CmdReadSingleBlock>
 8007c50:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d012      	beq.n	8007c7e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8007c9c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007c5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c66:	431a      	orrs	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e00a      	b.n	8007c94 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007c8c:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e000      	b.n	8007c94 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007c92:	2302      	movs	r3, #2
  }
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3730      	adds	r7, #48	@ 0x30
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	1fe00fff 	.word	0x1fe00fff

08007ca0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08c      	sub	sp, #48	@ 0x30
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d107      	bne.n	8007cc8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cbc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e08d      	b.n	8007de4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	f040 8086 	bne.w	8007de2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007cdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	441a      	add	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d907      	bls.n	8007cfa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cee:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e074      	b.n	8007de4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2200      	movs	r2, #0
 8007d08:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	025a      	lsls	r2, r3, #9
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d002      	beq.n	8007d26 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d22:	025b      	lsls	r3, r3, #9
 8007d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d26:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	025b      	lsls	r3, r3, #9
 8007d30:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d32:	2390      	movs	r3, #144	@ 0x90
 8007d34:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007d36:	2300      	movs	r3, #0
 8007d38:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f107 0210 	add.w	r2, r7, #16
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f003 fd49 	bl	800b7e4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d60:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d90a      	bls.n	8007d8e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	22a0      	movs	r2, #160	@ 0xa0
 8007d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d84:	4618      	mov	r0, r3
 8007d86:	f003 fde5 	bl	800b954 <SDMMC_CmdWriteMultiBlock>
 8007d8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007d8c:	e009      	b.n	8007da2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2290      	movs	r2, #144	@ 0x90
 8007d92:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f003 fdb7 	bl	800b90e <SDMMC_CmdWriteSingleBlock>
 8007da0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d012      	beq.n	8007dce <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a0f      	ldr	r2, [pc, #60]	@ (8007dec <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007dae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db6:	431a      	orrs	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e00a      	b.n	8007de4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8007ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	e000      	b.n	8007de4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007de2:	2302      	movs	r3, #2
  }
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3730      	adds	r7, #48	@ 0x30
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	1fe00fff 	.word	0x1fe00fff

08007df0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <HAL_SD_IRQHandler+0x2e>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 f926 	bl	8009068 <SD_Read_IT>
 8007e1c:	e19a      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80ac 	beq.w	8007f86 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e36:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	4b59      	ldr	r3, [pc, #356]	@ (8007fa8 <HAL_SD_IRQHandler+0x1b8>)
 8007e44:	400b      	ands	r3, r1
 8007e46:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007e56:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e66:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f003 0308 	and.w	r3, r3, #8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d038      	beq.n	8007ee4 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d104      	bne.n	8007e86 <HAL_SD_IRQHandler+0x96>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d011      	beq.n	8007eaa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f003 fd86 	bl	800b99c <SDMMC_CmdStopTransfer>
 8007e90:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d008      	beq.n	8007eaa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f95b 	bl	8008160 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a3f      	ldr	r2, [pc, #252]	@ (8007fac <HAL_SD_IRQHandler+0x1bc>)
 8007eb0:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d104      	bne.n	8007ed4 <HAL_SD_IRQHandler+0xe4>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f004 fa31 	bl	800c33c <HAL_SD_RxCpltCallback>
 8007eda:	e13b      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f004 fa23 	bl	800c328 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ee2:	e137      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 8132 	beq.w	8008154 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2200      	movs	r2, #0
 8007efe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2200      	movs	r2, #0
 8007f06:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d104      	bne.n	8007f1c <HAL_SD_IRQHandler+0x12c>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d011      	beq.n	8007f40 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f003 fd3b 	bl	800b99c <SDMMC_CmdStopTransfer>
 8007f26:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d008      	beq.n	8007f40 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	431a      	orrs	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f910 	bl	8008160 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d104      	bne.n	8007f62 <HAL_SD_IRQHandler+0x172>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f004 f9e0 	bl	800c328 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <HAL_SD_IRQHandler+0x18e>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 80eb 	beq.w	8008154 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f004 f9dc 	bl	800c33c <HAL_SD_RxCpltCallback>
}
 8007f84:	e0e6      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00d      	beq.n	8007fb0 <HAL_SD_IRQHandler+0x1c0>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f003 0308 	and.w	r3, r3, #8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d008      	beq.n	8007fb0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 f8a8 	bl	80090f4 <SD_Write_IT>
 8007fa4:	e0d6      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
 8007fa6:	bf00      	nop
 8007fa8:	ffff3ec5 	.word	0xffff3ec5
 8007fac:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 809d 	beq.w	80080fa <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fd2:	f043 0202 	orr.w	r2, r3, #2
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fec:	f043 0208 	orr.w	r2, r3, #8
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008006:	f043 0220 	orr.w	r2, r3, #32
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008014:	f003 0310 	and.w	r3, r3, #16
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008020:	f043 0210 	orr.w	r2, r3, #16
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a4b      	ldr	r2, [pc, #300]	@ (800815c <HAL_SD_IRQHandler+0x36c>)
 800802e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800803e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800804e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800805e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800806e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f003 fc91 	bl	800b99c <SDMMC_CmdStopTransfer>
 800807a:	4602      	mov	r2, r0
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008094:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800809e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f003 0308 	and.w	r3, r3, #8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f851 	bl	8008160 <HAL_SD_ErrorCallback>
}
 80080be:	e049      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d044      	beq.n	8008154 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d040      	beq.n	8008154 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80080e0:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2200      	movs	r2, #0
 80080e8:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f834 	bl	8008160 <HAL_SD_ErrorCallback>
}
 80080f8:	e02c      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d025      	beq.n	8008154 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008110:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10c      	bne.n	800813a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f001 f84a 	bl	80091c4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008130:	e010      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 f832 	bl	800919c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008138:	e00c      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f001 f833 	bl	80091b0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800814a:	e003      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 f81b 	bl	8009188 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008152:	e7ff      	b.n	8008154 <HAL_SD_IRQHandler+0x364>
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	18000f3a 	.word	0x18000f3a

08008160 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008182:	0f9b      	lsrs	r3, r3, #30
 8008184:	b2da      	uxtb	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800818e:	0e9b      	lsrs	r3, r3, #26
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081a0:	0e1b      	lsrs	r3, r3, #24
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 0303 	and.w	r3, r3, #3
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081b2:	0c1b      	lsrs	r3, r3, #16
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081d4:	0d1b      	lsrs	r3, r3, #20
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081e0:	0c1b      	lsrs	r3, r3, #16
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081f2:	0bdb      	lsrs	r3, r3, #15
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008204:	0b9b      	lsrs	r3, r3, #14
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	b2da      	uxtb	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008216:	0b5b      	lsrs	r3, r3, #13
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	b2da      	uxtb	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008228:	0b1b      	lsrs	r3, r3, #12
 800822a:	b2db      	uxtb	r3, r3
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	b2da      	uxtb	r2, r3
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2200      	movs	r2, #0
 800823a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	2b00      	cmp	r3, #0
 8008242:	d163      	bne.n	800830c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008248:	009a      	lsls	r2, r3, #2
 800824a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800824e:	4013      	ands	r3, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008254:	0f92      	lsrs	r2, r2, #30
 8008256:	431a      	orrs	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008260:	0edb      	lsrs	r3, r3, #27
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	b2da      	uxtb	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008272:	0e1b      	lsrs	r3, r3, #24
 8008274:	b2db      	uxtb	r3, r3
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	b2da      	uxtb	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008284:	0d5b      	lsrs	r3, r3, #21
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	b2da      	uxtb	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008296:	0c9b      	lsrs	r3, r3, #18
 8008298:	b2db      	uxtb	r3, r3
 800829a:	f003 0307 	and.w	r3, r3, #7
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082a8:	0bdb      	lsrs	r3, r3, #15
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f003 0307 	and.w	r3, r3, #7
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	7e1b      	ldrb	r3, [r3, #24]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	3302      	adds	r3, #2
 80082cc:	2201      	movs	r2, #1
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80082d6:	fb03 f202 	mul.w	r2, r3, r2
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	7a1b      	ldrb	r3, [r3, #8]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 030f 	and.w	r3, r3, #15
 80082e8:	2201      	movs	r2, #1
 80082ea:	409a      	lsls	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80082f8:	0a52      	lsrs	r2, r2, #9
 80082fa:	fb03 f202 	mul.w	r2, r3, r2
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008308:	655a      	str	r2, [r3, #84]	@ 0x54
 800830a:	e031      	b.n	8008370 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008310:	2b01      	cmp	r3, #1
 8008312:	d11d      	bne.n	8008350 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008318:	041b      	lsls	r3, r3, #16
 800831a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008322:	0c1b      	lsrs	r3, r3, #16
 8008324:	431a      	orrs	r2, r3
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	3301      	adds	r3, #1
 8008330:	029a      	lsls	r2, r3, #10
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008344:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	655a      	str	r2, [r3, #84]	@ 0x54
 800834e:	e00f      	b.n	8008370 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a58      	ldr	r2, [pc, #352]	@ (80084b8 <HAL_SD_GetCardCSD+0x344>)
 8008356:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e09d      	b.n	80084ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008374:	0b9b      	lsrs	r3, r3, #14
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	b2da      	uxtb	r2, r3
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008386:	09db      	lsrs	r3, r3, #7
 8008388:	b2db      	uxtb	r3, r3
 800838a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800838e:	b2da      	uxtb	r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008398:	b2db      	uxtb	r3, r3
 800839a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083a8:	0fdb      	lsrs	r3, r3, #31
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083b4:	0f5b      	lsrs	r3, r3, #29
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083c6:	0e9b      	lsrs	r3, r3, #26
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083d8:	0d9b      	lsrs	r3, r3, #22
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f003 030f 	and.w	r3, r3, #15
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083ea:	0d5b      	lsrs	r3, r3, #21
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008406:	0c1b      	lsrs	r3, r3, #16
 8008408:	b2db      	uxtb	r3, r3
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	b2da      	uxtb	r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800841a:	0bdb      	lsrs	r3, r3, #15
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	b2da      	uxtb	r2, r3
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800842e:	0b9b      	lsrs	r3, r3, #14
 8008430:	b2db      	uxtb	r3, r3
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	b2da      	uxtb	r2, r3
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008442:	0b5b      	lsrs	r3, r3, #13
 8008444:	b2db      	uxtb	r3, r3
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	b2da      	uxtb	r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008456:	0b1b      	lsrs	r3, r3, #12
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	b2da      	uxtb	r2, r3
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800846a:	0a9b      	lsrs	r3, r3, #10
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	b2da      	uxtb	r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800847e:	0a1b      	lsrs	r3, r3, #8
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	b2da      	uxtb	r2, r3
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008492:	085b      	lsrs	r3, r3, #1
 8008494:	b2db      	uxtb	r3, r3
 8008496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800849a:	b2da      	uxtb	r2, r3
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	1fe00fff 	.word	0x1fe00fff

080084bc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b094      	sub	sp, #80	@ 0x50
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d101      	bne.n	80084dc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e0a7      	b.n	800862c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80084dc:	f107 0308 	add.w	r3, r7, #8
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fb62 	bl	8008bac <SD_SendSDStatus>
 80084e8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80084ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d011      	beq.n	8008514 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a4f      	ldr	r2, [pc, #316]	@ (8008634 <HAL_SD_GetCardStatus+0x178>)
 80084f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008512:	e070      	b.n	80085f6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	099b      	lsrs	r3, r3, #6
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	b2da      	uxtb	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	095b      	lsrs	r3, r3, #5
 8008528:	b2db      	uxtb	r3, r3
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	b2da      	uxtb	r2, r3
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	0a1b      	lsrs	r3, r3, #8
 8008538:	b29b      	uxth	r3, r3
 800853a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800853e:	b29a      	uxth	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	0e1b      	lsrs	r3, r3, #24
 8008544:	b29b      	uxth	r3, r3
 8008546:	4313      	orrs	r3, r2
 8008548:	b29a      	uxth	r2, r3
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	061a      	lsls	r2, r3, #24
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800855a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	0a1b      	lsrs	r3, r3, #8
 8008560:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008564:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	0e1b      	lsrs	r3, r3, #24
 800856a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	b2da      	uxtb	r2, r3
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	0a1b      	lsrs	r3, r3, #8
 800857c:	b2da      	uxtb	r2, r3
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	0d1b      	lsrs	r3, r3, #20
 8008586:	b2db      	uxtb	r3, r3
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	b2da      	uxtb	r2, r3
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	0c1b      	lsrs	r3, r3, #16
 8008596:	b29b      	uxth	r3, r3
 8008598:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800859c:	b29a      	uxth	r2, r3
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	4313      	orrs	r3, r2
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	0a9b      	lsrs	r3, r3, #10
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	0a1b      	lsrs	r3, r3, #8
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 0303 	and.w	r3, r3, #3
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	091b      	lsrs	r3, r3, #4
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	0e1b      	lsrs	r3, r3, #24
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80085fe:	4618      	mov	r0, r3
 8008600:	f003 f91c 	bl	800b83c <SDMMC_CmdBlockLength>
 8008604:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00d      	beq.n	8008628 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a08      	ldr	r2, [pc, #32]	@ (8008634 <HAL_SD_GetCardStatus+0x178>)
 8008612:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008618:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008628:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800862c:	4618      	mov	r0, r3
 800862e:	3750      	adds	r7, #80	@ 0x50
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	1fe00fff 	.word	0x1fe00fff

08008638 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b08d      	sub	sp, #52	@ 0x34
 8008694:	af02      	add	r7, sp, #8
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2203      	movs	r2, #3
 80086a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d02e      	beq.n	800870e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086b6:	d106      	bne.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80086c4:	e029      	b.n	800871a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086cc:	d10a      	bne.n	80086e4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fb64 	bl	8008d9c <SD_WideBus_Enable>
 80086d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80086e2:	e01a      	b.n	800871a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10a      	bne.n	8008700 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fba1 	bl	8008e32 <SD_WideBus_Disable>
 80086f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80086fe:	e00c      	b.n	800871a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008704:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	635a      	str	r2, [r3, #52]	@ 0x34
 800870c:	e005      	b.n	800871a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008712:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a5f      	ldr	r2, [pc, #380]	@ (80088a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008728:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008730:	e096      	b.n	8008860 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008732:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008736:	f04f 0100 	mov.w	r1, #0
 800873a:	f7fd fc45 	bl	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq>
 800873e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8083 	beq.w	800884e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	4950      	ldr	r1, [pc, #320]	@ (80088a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008766:	fba1 1303 	umull	r1, r3, r1, r3
 800876a:	0e1b      	lsrs	r3, r3, #24
 800876c:	429a      	cmp	r2, r3
 800876e:	d303      	bcc.n	8008778 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	61bb      	str	r3, [r7, #24]
 8008776:	e05a      	b.n	800882e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800877c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008780:	d103      	bne.n	800878a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	61bb      	str	r3, [r7, #24]
 8008788:	e051      	b.n	800882e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800878e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008792:	d126      	bne.n	80087e2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10e      	bne.n	80087ba <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	4a43      	ldr	r2, [pc, #268]	@ (80088ac <HAL_SD_ConfigWideBusOperation+0x21c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d906      	bls.n	80087b2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	4a40      	ldr	r2, [pc, #256]	@ (80088a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80087a8:	fba2 2303 	umull	r2, r3, r2, r3
 80087ac:	0e5b      	lsrs	r3, r3, #25
 80087ae:	61bb      	str	r3, [r7, #24]
 80087b0:	e03d      	b.n	800882e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	61bb      	str	r3, [r7, #24]
 80087b8:	e039      	b.n	800882e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c6:	4a39      	ldr	r2, [pc, #228]	@ (80088ac <HAL_SD_ConfigWideBusOperation+0x21c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d906      	bls.n	80087da <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	4a36      	ldr	r2, [pc, #216]	@ (80088a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80087d0:	fba2 2303 	umull	r2, r3, r2, r3
 80087d4:	0e5b      	lsrs	r3, r3, #25
 80087d6:	61bb      	str	r3, [r7, #24]
 80087d8:	e029      	b.n	800882e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	61bb      	str	r3, [r7, #24]
 80087e0:	e025      	b.n	800882e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10e      	bne.n	8008808 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	4a30      	ldr	r2, [pc, #192]	@ (80088b0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d906      	bls.n	8008800 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	4a2c      	ldr	r2, [pc, #176]	@ (80088a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80087f6:	fba2 2303 	umull	r2, r3, r2, r3
 80087fa:	0e1b      	lsrs	r3, r3, #24
 80087fc:	61bb      	str	r3, [r7, #24]
 80087fe:	e016      	b.n	800882e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	61bb      	str	r3, [r7, #24]
 8008806:	e012      	b.n	800882e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	fbb2 f3f3 	udiv	r3, r2, r3
 8008814:	4a26      	ldr	r2, [pc, #152]	@ (80088b0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d906      	bls.n	8008828 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	4a22      	ldr	r2, [pc, #136]	@ (80088a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800881e:	fba2 2303 	umull	r2, r3, r2, r3
 8008822:	0e1b      	lsrs	r3, r3, #24
 8008824:	61bb      	str	r3, [r7, #24]
 8008826:	e002      	b.n	800882e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681c      	ldr	r4, [r3, #0]
 8008832:	466a      	mov	r2, sp
 8008834:	f107 0314 	add.w	r3, r7, #20
 8008838:	e893 0003 	ldmia.w	r3, {r0, r1}
 800883c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008840:	f107 0308 	add.w	r3, r7, #8
 8008844:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008846:	4620      	mov	r0, r4
 8008848:	f002 ff1a 	bl	800b680 <SDMMC_Init>
 800884c:	e008      	b.n	8008860 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008852:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008868:	4618      	mov	r0, r3
 800886a:	f002 ffe7 	bl	800b83c <SDMMC_CmdBlockLength>
 800886e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00c      	beq.n	8008890 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a0a      	ldr	r2, [pc, #40]	@ (80088a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800887c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800889c:	4618      	mov	r0, r3
 800889e:	372c      	adds	r7, #44	@ 0x2c
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd90      	pop	{r4, r7, pc}
 80088a4:	1fe00fff 	.word	0x1fe00fff
 80088a8:	55e63b89 	.word	0x55e63b89
 80088ac:	02faf080 	.word	0x02faf080
 80088b0:	017d7840 	.word	0x017d7840

080088b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80088c0:	f107 030c 	add.w	r3, r7, #12
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa40 	bl	8008d4c <SD_SendStatus>
 80088cc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	431a      	orrs	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	0a5b      	lsrs	r3, r3, #9
 80088e4:	f003 030f 	and.w	r3, r3, #15
 80088e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80088ea:	693b      	ldr	r3, [r7, #16]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b090      	sub	sp, #64	@ 0x40
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008900:	f7f9 fd6e 	bl	80023e0 <HAL_GetTick>
 8008904:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4618      	mov	r0, r3
 800890c:	f002 ff11 	bl	800b732 <SDMMC_GetPowerState>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d102      	bne.n	800891c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008916:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800891a:	e0b5      	b.n	8008a88 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008920:	2b03      	cmp	r3, #3
 8008922:	d02e      	beq.n	8008982 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	f003 f95c 	bl	800bbe6 <SDMMC_CmdSendCID>
 800892e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <SD_InitCard+0x46>
    {
      return errorstate;
 8008936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008938:	e0a6      	b.n	8008a88 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2100      	movs	r1, #0
 8008940:	4618      	mov	r0, r3
 8008942:	f002 ff3c 	bl	800b7be <SDMMC_GetResponse>
 8008946:	4602      	mov	r2, r0
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2104      	movs	r1, #4
 8008952:	4618      	mov	r0, r3
 8008954:	f002 ff33 	bl	800b7be <SDMMC_GetResponse>
 8008958:	4602      	mov	r2, r0
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2108      	movs	r1, #8
 8008964:	4618      	mov	r0, r3
 8008966:	f002 ff2a 	bl	800b7be <SDMMC_GetResponse>
 800896a:	4602      	mov	r2, r0
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	210c      	movs	r1, #12
 8008976:	4618      	mov	r0, r3
 8008978:	f002 ff21 	bl	800b7be <SDMMC_GetResponse>
 800897c:	4602      	mov	r2, r0
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008986:	2b03      	cmp	r3, #3
 8008988:	d01d      	beq.n	80089c6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800898a:	e019      	b.n	80089c0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f107 020a 	add.w	r2, r7, #10
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f003 f964 	bl	800bc64 <SDMMC_CmdSetRelAdd>
 800899c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800899e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	e06f      	b.n	8008a88 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80089a8:	f7f9 fd1a 	bl	80023e0 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d902      	bls.n	80089c0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80089ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80089be:	e063      	b.n	8008a88 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80089c0:	897b      	ldrh	r3, [r7, #10]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0e2      	beq.n	800898c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d036      	beq.n	8008a3c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80089ce:	897b      	ldrh	r3, [r7, #10]
 80089d0:	461a      	mov	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089de:	041b      	lsls	r3, r3, #16
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f003 f91e 	bl	800bc24 <SDMMC_CmdSendCSD>
 80089e8:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <SD_InitCard+0x100>
    {
      return errorstate;
 80089f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f2:	e049      	b.n	8008a88 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2100      	movs	r1, #0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f002 fedf 	bl	800b7be <SDMMC_GetResponse>
 8008a00:	4602      	mov	r2, r0
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2104      	movs	r1, #4
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f002 fed6 	bl	800b7be <SDMMC_GetResponse>
 8008a12:	4602      	mov	r2, r0
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2108      	movs	r1, #8
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f002 fecd 	bl	800b7be <SDMMC_GetResponse>
 8008a24:	4602      	mov	r2, r0
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	210c      	movs	r1, #12
 8008a30:	4618      	mov	r0, r3
 8008a32:	f002 fec4 	bl	800b7be <SDMMC_GetResponse>
 8008a36:	4602      	mov	r2, r0
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2104      	movs	r1, #4
 8008a42:	4618      	mov	r0, r3
 8008a44:	f002 febb 	bl	800b7be <SDMMC_GetResponse>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	0d1a      	lsrs	r2, r3, #20
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008a50:	f107 030c 	add.w	r3, r7, #12
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff fb8c 	bl	8008174 <HAL_SD_GetCardCSD>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a62:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a66:	e00f      	b.n	8008a88 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a70:	041b      	lsls	r3, r3, #16
 8008a72:	4619      	mov	r1, r3
 8008a74:	4610      	mov	r0, r2
 8008a76:	f002 ffcd 	bl	800ba14 <SDMMC_CmdSelDesel>
 8008a7a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <SD_InitCard+0x192>
  {
    return errorstate;
 8008a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a84:	e000      	b.n	8008a88 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3740      	adds	r7, #64	@ 0x40
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f002 ffd6 	bl	800ba5a <SDMMC_CmdGoIdleState>
 8008aae:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <SD_PowerON+0x2a>
  {
    return errorstate;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	e072      	b.n	8008ba0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f002 ffe9 	bl	800ba96 <SDMMC_CmdOperCond>
 8008ac4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008acc:	d10d      	bne.n	8008aea <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f002 ffbe 	bl	800ba5a <SDMMC_CmdGoIdleState>
 8008ade:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d004      	beq.n	8008af0 <SD_PowerON+0x60>
    {
      return errorstate;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	e05a      	b.n	8008ba0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d137      	bne.n	8008b68 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2100      	movs	r1, #0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f002 ffe9 	bl	800bad6 <SDMMC_CmdAppCommand>
 8008b04:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d02d      	beq.n	8008b68 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008b10:	e046      	b.n	8008ba0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2100      	movs	r1, #0
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f002 ffdc 	bl	800bad6 <SDMMC_CmdAppCommand>
 8008b1e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <SD_PowerON+0x9a>
    {
      return errorstate;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	e03a      	b.n	8008ba0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	491e      	ldr	r1, [pc, #120]	@ (8008ba8 <SD_PowerON+0x118>)
 8008b30:	4618      	mov	r0, r3
 8008b32:	f002 fff3 	bl	800bb1c <SDMMC_CmdAppOperCommand>
 8008b36:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b3e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008b42:	e02d      	b.n	8008ba0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f002 fe37 	bl	800b7be <SDMMC_GetResponse>
 8008b50:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	0fdb      	lsrs	r3, r3, #31
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d101      	bne.n	8008b5e <SD_PowerON+0xce>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e000      	b.n	8008b60 <SD_PowerON+0xd0>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	613b      	str	r3, [r7, #16]

    count++;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	3301      	adds	r3, #1
 8008b66:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d802      	bhi.n	8008b78 <SD_PowerON+0xe8>
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0cc      	beq.n	8008b12 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d902      	bls.n	8008b88 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b86:	e00b      	b.n	8008ba0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	c1100000 	.word	0xc1100000

08008bac <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08c      	sub	sp, #48	@ 0x30
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bb6:	f7f9 fc13 	bl	80023e0 <HAL_GetTick>
 8008bba:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f002 fdf9 	bl	800b7be <SDMMC_GetResponse>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bd6:	d102      	bne.n	8008bde <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008bd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008bdc:	e0b0      	b.n	8008d40 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2140      	movs	r1, #64	@ 0x40
 8008be4:	4618      	mov	r0, r3
 8008be6:	f002 fe29 	bl	800b83c <SDMMC_CmdBlockLength>
 8008bea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d005      	beq.n	8008bfe <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	e0a0      	b.n	8008d40 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c06:	041b      	lsls	r3, r3, #16
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	f002 ff63 	bl	800bad6 <SDMMC_CmdAppCommand>
 8008c10:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	e08d      	b.n	8008d40 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c24:	f04f 33ff 	mov.w	r3, #4294967295
 8008c28:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008c2a:	2340      	movs	r3, #64	@ 0x40
 8008c2c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008c2e:	2360      	movs	r3, #96	@ 0x60
 8008c30:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c32:	2302      	movs	r3, #2
 8008c34:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f107 0208 	add.w	r2, r7, #8
 8008c46:	4611      	mov	r1, r2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f002 fdcb 	bl	800b7e4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f003 f84b 	bl	800bcee <SDMMC_CmdStatusRegister>
 8008c58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d02b      	beq.n	8008cb8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	e069      	b.n	8008d40 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d013      	beq.n	8008ca2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c7e:	e00d      	b.n	8008c9c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f002 fd25 	bl	800b6d4 <SDMMC_ReadFIFO>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8e:	601a      	str	r2, [r3, #0]
        pData++;
 8008c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c92:	3304      	adds	r3, #4
 8008c94:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c98:	3301      	adds	r3, #1
 8008c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9e:	2b07      	cmp	r3, #7
 8008ca0:	d9ee      	bls.n	8008c80 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ca2:	f7f9 fb9d 	bl	80023e0 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb0:	d102      	bne.n	8008cb8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cb2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008cb6:	e043      	b.n	8008d40 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cbe:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0d2      	beq.n	8008c6c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ccc:	f003 0308 	and.w	r3, r3, #8
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	e033      	b.n	8008d40 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e02a      	b.n	8008d40 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cf0:	f003 0320 	and.w	r3, r3, #32
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d017      	beq.n	8008d28 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008cf8:	2320      	movs	r3, #32
 8008cfa:	e021      	b.n	8008d40 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f002 fce7 	bl	800b6d4 <SDMMC_ReadFIFO>
 8008d06:	4602      	mov	r2, r0
 8008d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0a:	601a      	str	r2, [r3, #0]
    pData++;
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	3304      	adds	r3, #4
 8008d10:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d12:	f7f9 fb65 	bl	80023e0 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d102      	bne.n	8008d28 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008d26:	e00b      	b.n	8008d40 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e2      	bne.n	8008cfc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a03      	ldr	r2, [pc, #12]	@ (8008d48 <SD_SendSDStatus+0x19c>)
 8008d3c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3730      	adds	r7, #48	@ 0x30
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	18000f3a 	.word	0x18000f3a

08008d4c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008d60:	e018      	b.n	8008d94 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d6a:	041b      	lsls	r3, r3, #16
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4610      	mov	r0, r2
 8008d70:	f002 ff9a 	bl	800bca8 <SDMMC_CmdSendStatus>
 8008d74:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	e009      	b.n	8008d94 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2100      	movs	r1, #0
 8008d86:	4618      	mov	r0, r3
 8008d88:	f002 fd19 	bl	800b7be <SDMMC_GetResponse>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008da4:	2300      	movs	r3, #0
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	2300      	movs	r3, #0
 8008daa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2100      	movs	r1, #0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f002 fd03 	bl	800b7be <SDMMC_GetResponse>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dc2:	d102      	bne.n	8008dca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008dc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008dc8:	e02f      	b.n	8008e2a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008dca:	f107 030c 	add.w	r3, r7, #12
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f879 	bl	8008ec8 <SD_FindSCR>
 8008dd6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	e023      	b.n	8008e2a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01c      	beq.n	8008e26 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008df4:	041b      	lsls	r3, r3, #16
 8008df6:	4619      	mov	r1, r3
 8008df8:	4610      	mov	r0, r2
 8008dfa:	f002 fe6c 	bl	800bad6 <SDMMC_CmdAppCommand>
 8008dfe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	e00f      	b.n	8008e2a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2102      	movs	r1, #2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f002 fea3 	bl	800bb5c <SDMMC_CmdBusWidth>
 8008e16:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	e003      	b.n	8008e2a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e22:	2300      	movs	r3, #0
 8008e24:	e001      	b.n	8008e2a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e26:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b086      	sub	sp, #24
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2100      	movs	r1, #0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f002 fcb8 	bl	800b7be <SDMMC_GetResponse>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e58:	d102      	bne.n	8008e60 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008e5e:	e02f      	b.n	8008ec0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e60:	f107 030c 	add.w	r3, r7, #12
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f82e 	bl	8008ec8 <SD_FindSCR>
 8008e6c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	e023      	b.n	8008ec0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01c      	beq.n	8008ebc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e8a:	041b      	lsls	r3, r3, #16
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f002 fe21 	bl	800bad6 <SDMMC_CmdAppCommand>
 8008e94:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	e00f      	b.n	8008ec0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f002 fe58 	bl	800bb5c <SDMMC_CmdBusWidth>
 8008eac:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	e003      	b.n	8008ec0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e001      	b.n	8008ec0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ebc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b08e      	sub	sp, #56	@ 0x38
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ed2:	f7f9 fa85 	bl	80023e0 <HAL_GetTick>
 8008ed6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008edc:	2300      	movs	r3, #0
 8008ede:	60bb      	str	r3, [r7, #8]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2108      	movs	r1, #8
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f002 fca4 	bl	800b83c <SDMMC_CmdBlockLength>
 8008ef4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efe:	e0ad      	b.n	800905c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f08:	041b      	lsls	r3, r3, #16
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	f002 fde2 	bl	800bad6 <SDMMC_CmdAppCommand>
 8008f12:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1c:	e09e      	b.n	800905c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f22:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008f24:	2308      	movs	r3, #8
 8008f26:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008f28:	2330      	movs	r3, #48	@ 0x30
 8008f2a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f34:	2301      	movs	r3, #1
 8008f36:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f107 0210 	add.w	r2, r7, #16
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f002 fc4e 	bl	800b7e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f002 fe28 	bl	800bba2 <SDMMC_CmdSendSCR>
 8008f52:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d027      	beq.n	8008faa <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5c:	e07e      	b.n	800905c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d113      	bne.n	8008f94 <SD_FindSCR+0xcc>
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d110      	bne.n	8008f94 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f002 fbac 	bl	800b6d4 <SDMMC_ReadFIFO>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f002 fba5 	bl	800b6d4 <SDMMC_ReadFIFO>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	60fb      	str	r3, [r7, #12]
      index++;
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f90:	3301      	adds	r3, #1
 8008f92:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f94:	f7f9 fa24 	bl	80023e0 <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa2:	d102      	bne.n	8008faa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008fa4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008fa8:	e058      	b.n	800905c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fb0:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0d1      	beq.n	8008f5e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc0:	f003 0308 	and.w	r3, r3, #8
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2208      	movs	r2, #8
 8008fce:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008fd0:	2308      	movs	r3, #8
 8008fd2:	e043      	b.n	800905c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d005      	beq.n	8008fee <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fea:	2302      	movs	r3, #2
 8008fec:	e036      	b.n	800905c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ff4:	f003 0320 	and.w	r3, r3, #32
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2220      	movs	r2, #32
 8009002:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009004:	2320      	movs	r3, #32
 8009006:	e029      	b.n	800905c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a15      	ldr	r2, [pc, #84]	@ (8009064 <SD_FindSCR+0x19c>)
 800900e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	061a      	lsls	r2, r3, #24
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	021b      	lsls	r3, r3, #8
 8009018:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800901c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	0a1b      	lsrs	r3, r3, #8
 8009022:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009026:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	0e1b      	lsrs	r3, r3, #24
 800902c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800902e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009030:	601a      	str	r2, [r3, #0]
    scr++;
 8009032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009034:	3304      	adds	r3, #4
 8009036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	061a      	lsls	r2, r3, #24
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	021b      	lsls	r3, r3, #8
 8009040:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009044:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	0a1b      	lsrs	r3, r3, #8
 800904a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800904e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	0e1b      	lsrs	r3, r3, #24
 8009054:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009058:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3738      	adds	r7, #56	@ 0x38
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	18000f3a 	.word	0x18000f3a

08009068 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009074:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907a:	2b1f      	cmp	r3, #31
 800907c:	d936      	bls.n	80090ec <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e027      	b.n	80090d4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4618      	mov	r0, r3
 800908a:	f002 fb23 	bl	800b6d4 <SDMMC_ReadFIFO>
 800908e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	b2da      	uxtb	r2, r3
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	3301      	adds	r3, #1
 800909c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	3301      	adds	r3, #1
 80090ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	0c1b      	lsrs	r3, r3, #16
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	3301      	adds	r3, #1
 80090bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	0e1b      	lsrs	r3, r3, #24
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	3301      	adds	r3, #1
 80090cc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	3301      	adds	r3, #1
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	2b07      	cmp	r3, #7
 80090d8:	d9d4      	bls.n	8009084 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e4:	f1a3 0220 	sub.w	r2, r3, #32
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 80090ec:	bf00      	nop
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	2b1f      	cmp	r3, #31
 8009108:	d93a      	bls.n	8009180 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	e02b      	b.n	8009168 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	3301      	adds	r3, #1
 800911a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	021a      	lsls	r2, r3, #8
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4313      	orrs	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	3301      	adds	r3, #1
 800912c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	041a      	lsls	r2, r3, #16
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
      tmp++;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	3301      	adds	r3, #1
 800913e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	061a      	lsls	r2, r3, #24
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	3301      	adds	r3, #1
 8009150:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f107 020c 	add.w	r2, r7, #12
 800915a:	4611      	mov	r1, r2
 800915c:	4618      	mov	r0, r3
 800915e:	f002 fac6 	bl	800b6ee <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	3301      	adds	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2b07      	cmp	r3, #7
 800916c:	d9d0      	bls.n	8009110 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	f1a3 0220 	sub.w	r2, r3, #32
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	621a      	str	r2, [r3, #32]
  }
}
 8009180:	bf00      	nop
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e10f      	b.n	800940a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a87      	ldr	r2, [pc, #540]	@ (8009414 <HAL_SPI_Init+0x23c>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d00f      	beq.n	800921a <HAL_SPI_Init+0x42>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a86      	ldr	r2, [pc, #536]	@ (8009418 <HAL_SPI_Init+0x240>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d00a      	beq.n	800921a <HAL_SPI_Init+0x42>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a84      	ldr	r2, [pc, #528]	@ (800941c <HAL_SPI_Init+0x244>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d005      	beq.n	800921a <HAL_SPI_Init+0x42>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2b0f      	cmp	r3, #15
 8009214:	d901      	bls.n	800921a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e0f7      	b.n	800940a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f900 	bl	8009420 <SPI_GetPacketSize>
 8009220:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a7b      	ldr	r2, [pc, #492]	@ (8009414 <HAL_SPI_Init+0x23c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00c      	beq.n	8009246 <HAL_SPI_Init+0x6e>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a79      	ldr	r2, [pc, #484]	@ (8009418 <HAL_SPI_Init+0x240>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d007      	beq.n	8009246 <HAL_SPI_Init+0x6e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a78      	ldr	r2, [pc, #480]	@ (800941c <HAL_SPI_Init+0x244>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d002      	beq.n	8009246 <HAL_SPI_Init+0x6e>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b08      	cmp	r3, #8
 8009244:	d811      	bhi.n	800926a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800924a:	4a72      	ldr	r2, [pc, #456]	@ (8009414 <HAL_SPI_Init+0x23c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d009      	beq.n	8009264 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a70      	ldr	r2, [pc, #448]	@ (8009418 <HAL_SPI_Init+0x240>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d004      	beq.n	8009264 <HAL_SPI_Init+0x8c>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a6f      	ldr	r2, [pc, #444]	@ (800941c <HAL_SPI_Init+0x244>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d104      	bne.n	800926e <HAL_SPI_Init+0x96>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b10      	cmp	r3, #16
 8009268:	d901      	bls.n	800926e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e0cd      	b.n	800940a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7f8 fc3a 	bl	8001afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0201 	bic.w	r2, r2, #1
 800929e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80092aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092b4:	d119      	bne.n	80092ea <HAL_SPI_Init+0x112>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092be:	d103      	bne.n	80092c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d008      	beq.n	80092da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10c      	bne.n	80092ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80092d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092d8:	d107      	bne.n	80092ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00f      	beq.n	8009316 <HAL_SPI_Init+0x13e>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	2b06      	cmp	r3, #6
 80092fc:	d90b      	bls.n	8009316 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	e007      	b.n	8009326 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009324:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69da      	ldr	r2, [r3, #28]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932e:	431a      	orrs	r2, r3
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	431a      	orrs	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009338:	ea42 0103 	orr.w	r1, r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009350:	431a      	orrs	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	431a      	orrs	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	431a      	orrs	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800937a:	431a      	orrs	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009386:	ea42 0103 	orr.w	r1, r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d113      	bne.n	80093c6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80093c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 0201 	bic.w	r2, r2, #1
 80093d4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00a      	beq.n	80093f8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	40013000 	.word	0x40013000
 8009418:	40003800 	.word	0x40003800
 800941c:	40003c00 	.word	0x40003c00

08009420 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942c:	095b      	lsrs	r3, r3, #5
 800942e:	3301      	adds	r3, #1
 8009430:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	3301      	adds	r3, #1
 8009438:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	3307      	adds	r3, #7
 800943e:	08db      	lsrs	r3, r3, #3
 8009440:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	fb02 f303 	mul.w	r3, r2, r3
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e049      	b.n	80094fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	d106      	bne.n	8009482 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7f8 fc91 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2202      	movs	r2, #2
 8009486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3304      	adds	r3, #4
 8009492:	4619      	mov	r1, r3
 8009494:	4610      	mov	r0, r2
 8009496:	f000 f96f 	bl	8009778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d020      	beq.n	8009568 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01b      	beq.n	8009568 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0202 	mvn.w	r2, #2
 8009538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f8f3 	bl	800973a <HAL_TIM_IC_CaptureCallback>
 8009554:	e005      	b.n	8009562 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f8e5 	bl	8009726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f8f6 	bl	800974e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f003 0304 	and.w	r3, r3, #4
 800956e:	2b00      	cmp	r3, #0
 8009570:	d020      	beq.n	80095b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d01b      	beq.n	80095b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f06f 0204 	mvn.w	r2, #4
 8009584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2202      	movs	r2, #2
 800958a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f8cd 	bl	800973a <HAL_TIM_IC_CaptureCallback>
 80095a0:	e005      	b.n	80095ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f8bf 	bl	8009726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f8d0 	bl	800974e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f003 0308 	and.w	r3, r3, #8
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d020      	beq.n	8009600 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f003 0308 	and.w	r3, r3, #8
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01b      	beq.n	8009600 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f06f 0208 	mvn.w	r2, #8
 80095d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2204      	movs	r2, #4
 80095d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	f003 0303 	and.w	r3, r3, #3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d003      	beq.n	80095ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f8a7 	bl	800973a <HAL_TIM_IC_CaptureCallback>
 80095ec:	e005      	b.n	80095fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f899 	bl	8009726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f8aa 	bl	800974e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	f003 0310 	and.w	r3, r3, #16
 8009606:	2b00      	cmp	r3, #0
 8009608:	d020      	beq.n	800964c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f003 0310 	and.w	r3, r3, #16
 8009610:	2b00      	cmp	r3, #0
 8009612:	d01b      	beq.n	800964c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f06f 0210 	mvn.w	r2, #16
 800961c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2208      	movs	r2, #8
 8009622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f881 	bl	800973a <HAL_TIM_IC_CaptureCallback>
 8009638:	e005      	b.n	8009646 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f873 	bl	8009726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f884 	bl	800974e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00c      	beq.n	8009670 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d007      	beq.n	8009670 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f06f 0201 	mvn.w	r2, #1
 8009668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f851 	bl	8009712 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009676:	2b00      	cmp	r3, #0
 8009678:	d104      	bne.n	8009684 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00c      	beq.n	800969e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800968a:	2b00      	cmp	r3, #0
 800968c:	d007      	beq.n	800969e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f9c5 	bl	8009a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00c      	beq.n	80096c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80096ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f9bd 	bl	8009a3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00c      	beq.n	80096e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d007      	beq.n	80096e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80096de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f83e 	bl	8009762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00c      	beq.n	800970a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d007      	beq.n	800970a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f06f 0220 	mvn.w	r2, #32
 8009702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f985 	bl	8009a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800971a:	bf00      	nop
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009726:	b480      	push	{r7}
 8009728:	b083      	sub	sp, #12
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800972e:	bf00      	nop
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009742:	bf00      	nop
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800976a:	bf00      	nop
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
	...

08009778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a4a      	ldr	r2, [pc, #296]	@ (80098b4 <TIM_Base_SetConfig+0x13c>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d013      	beq.n	80097b8 <TIM_Base_SetConfig+0x40>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009796:	d00f      	beq.n	80097b8 <TIM_Base_SetConfig+0x40>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a47      	ldr	r2, [pc, #284]	@ (80098b8 <TIM_Base_SetConfig+0x140>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d00b      	beq.n	80097b8 <TIM_Base_SetConfig+0x40>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a46      	ldr	r2, [pc, #280]	@ (80098bc <TIM_Base_SetConfig+0x144>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d007      	beq.n	80097b8 <TIM_Base_SetConfig+0x40>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a45      	ldr	r2, [pc, #276]	@ (80098c0 <TIM_Base_SetConfig+0x148>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d003      	beq.n	80097b8 <TIM_Base_SetConfig+0x40>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a44      	ldr	r2, [pc, #272]	@ (80098c4 <TIM_Base_SetConfig+0x14c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d108      	bne.n	80097ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a39      	ldr	r2, [pc, #228]	@ (80098b4 <TIM_Base_SetConfig+0x13c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d027      	beq.n	8009822 <TIM_Base_SetConfig+0xaa>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d8:	d023      	beq.n	8009822 <TIM_Base_SetConfig+0xaa>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a36      	ldr	r2, [pc, #216]	@ (80098b8 <TIM_Base_SetConfig+0x140>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d01f      	beq.n	8009822 <TIM_Base_SetConfig+0xaa>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a35      	ldr	r2, [pc, #212]	@ (80098bc <TIM_Base_SetConfig+0x144>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d01b      	beq.n	8009822 <TIM_Base_SetConfig+0xaa>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a34      	ldr	r2, [pc, #208]	@ (80098c0 <TIM_Base_SetConfig+0x148>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d017      	beq.n	8009822 <TIM_Base_SetConfig+0xaa>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a33      	ldr	r2, [pc, #204]	@ (80098c4 <TIM_Base_SetConfig+0x14c>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d013      	beq.n	8009822 <TIM_Base_SetConfig+0xaa>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a32      	ldr	r2, [pc, #200]	@ (80098c8 <TIM_Base_SetConfig+0x150>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d00f      	beq.n	8009822 <TIM_Base_SetConfig+0xaa>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a31      	ldr	r2, [pc, #196]	@ (80098cc <TIM_Base_SetConfig+0x154>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d00b      	beq.n	8009822 <TIM_Base_SetConfig+0xaa>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a30      	ldr	r2, [pc, #192]	@ (80098d0 <TIM_Base_SetConfig+0x158>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d007      	beq.n	8009822 <TIM_Base_SetConfig+0xaa>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a2f      	ldr	r2, [pc, #188]	@ (80098d4 <TIM_Base_SetConfig+0x15c>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d003      	beq.n	8009822 <TIM_Base_SetConfig+0xaa>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a2e      	ldr	r2, [pc, #184]	@ (80098d8 <TIM_Base_SetConfig+0x160>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d108      	bne.n	8009834 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	4313      	orrs	r3, r2
 8009832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	4313      	orrs	r3, r2
 8009840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a16      	ldr	r2, [pc, #88]	@ (80098b4 <TIM_Base_SetConfig+0x13c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d00f      	beq.n	8009880 <TIM_Base_SetConfig+0x108>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a18      	ldr	r2, [pc, #96]	@ (80098c4 <TIM_Base_SetConfig+0x14c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d00b      	beq.n	8009880 <TIM_Base_SetConfig+0x108>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a17      	ldr	r2, [pc, #92]	@ (80098c8 <TIM_Base_SetConfig+0x150>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d007      	beq.n	8009880 <TIM_Base_SetConfig+0x108>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a16      	ldr	r2, [pc, #88]	@ (80098cc <TIM_Base_SetConfig+0x154>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d003      	beq.n	8009880 <TIM_Base_SetConfig+0x108>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a15      	ldr	r2, [pc, #84]	@ (80098d0 <TIM_Base_SetConfig+0x158>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d103      	bne.n	8009888 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	691a      	ldr	r2, [r3, #16]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b01      	cmp	r3, #1
 8009898:	d105      	bne.n	80098a6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	f023 0201 	bic.w	r2, r3, #1
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	611a      	str	r2, [r3, #16]
  }
}
 80098a6:	bf00      	nop
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	40010000 	.word	0x40010000
 80098b8:	40000400 	.word	0x40000400
 80098bc:	40000800 	.word	0x40000800
 80098c0:	40000c00 	.word	0x40000c00
 80098c4:	40010400 	.word	0x40010400
 80098c8:	40014000 	.word	0x40014000
 80098cc:	40014400 	.word	0x40014400
 80098d0:	40014800 	.word	0x40014800
 80098d4:	4000e000 	.word	0x4000e000
 80098d8:	4000e400 	.word	0x4000e400

080098dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d101      	bne.n	80098f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098f0:	2302      	movs	r3, #2
 80098f2:	e077      	b.n	80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a35      	ldr	r2, [pc, #212]	@ (80099f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d004      	beq.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a34      	ldr	r2, [pc, #208]	@ (80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d108      	bne.n	800993a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800992e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009940:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a25      	ldr	r2, [pc, #148]	@ (80099f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d02c      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009966:	d027      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a22      	ldr	r2, [pc, #136]	@ (80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d022      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a21      	ldr	r2, [pc, #132]	@ (80099fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d01d      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a1f      	ldr	r2, [pc, #124]	@ (8009a00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d018      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a1a      	ldr	r2, [pc, #104]	@ (80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d013      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a1b      	ldr	r2, [pc, #108]	@ (8009a04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d00e      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a1a      	ldr	r2, [pc, #104]	@ (8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d009      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a18      	ldr	r2, [pc, #96]	@ (8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d004      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a17      	ldr	r2, [pc, #92]	@ (8009a10 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d10c      	bne.n	80099d2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	40010000 	.word	0x40010000
 80099f4:	40010400 	.word	0x40010400
 80099f8:	40000400 	.word	0x40000400
 80099fc:	40000800 	.word	0x40000800
 8009a00:	40000c00 	.word	0x40000c00
 8009a04:	40001800 	.word	0x40001800
 8009a08:	40014000 	.word	0x40014000
 8009a0c:	4000e000 	.word	0x4000e000
 8009a10:	4000e400 	.word	0x4000e400

08009a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e042      	b.n	8009ae8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d106      	bne.n	8009a7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7f8 f9bd 	bl	8001df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2224      	movs	r2, #36	@ 0x24
 8009a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0201 	bic.w	r2, r2, #1
 8009a90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 fa6e 	bl	800af7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fbff 	bl	800a2a4 <UART_SetConfig>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d101      	bne.n	8009ab0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e01b      	b.n	8009ae8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689a      	ldr	r2, [r3, #8]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f042 0201 	orr.w	r2, r2, #1
 8009ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 faed 	bl	800b0c0 <UART_CheckIdleState>
 8009ae6:	4603      	mov	r3, r0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b0ba      	sub	sp, #232	@ 0xe8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009b1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009b1e:	4013      	ands	r3, r2
 8009b20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d11b      	bne.n	8009b64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b30:	f003 0320 	and.w	r3, r3, #32
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d015      	beq.n	8009b64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b3c:	f003 0320 	and.w	r3, r3, #32
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d105      	bne.n	8009b50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d009      	beq.n	8009b64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 8377 	beq.w	800a248 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	4798      	blx	r3
      }
      return;
 8009b62:	e371      	b.n	800a248 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 8123 	beq.w	8009db4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b72:	4b8d      	ldr	r3, [pc, #564]	@ (8009da8 <HAL_UART_IRQHandler+0x2b8>)
 8009b74:	4013      	ands	r3, r2
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8009dac <HAL_UART_IRQHandler+0x2bc>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 8116 	beq.w	8009db4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d011      	beq.n	8009bb8 <HAL_UART_IRQHandler+0xc8>
 8009b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00b      	beq.n	8009bb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bae:	f043 0201 	orr.w	r2, r3, #1
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bbc:	f003 0302 	and.w	r3, r3, #2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d011      	beq.n	8009be8 <HAL_UART_IRQHandler+0xf8>
 8009bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00b      	beq.n	8009be8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bde:	f043 0204 	orr.w	r2, r3, #4
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bec:	f003 0304 	and.w	r3, r3, #4
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d011      	beq.n	8009c18 <HAL_UART_IRQHandler+0x128>
 8009bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00b      	beq.n	8009c18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2204      	movs	r2, #4
 8009c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c0e:	f043 0202 	orr.w	r2, r3, #2
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c1c:	f003 0308 	and.w	r3, r3, #8
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d017      	beq.n	8009c54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c28:	f003 0320 	and.w	r3, r3, #32
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d105      	bne.n	8009c3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c34:	4b5c      	ldr	r3, [pc, #368]	@ (8009da8 <HAL_UART_IRQHandler+0x2b8>)
 8009c36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00b      	beq.n	8009c54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2208      	movs	r2, #8
 8009c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c4a:	f043 0208 	orr.w	r2, r3, #8
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d012      	beq.n	8009c86 <HAL_UART_IRQHandler+0x196>
 8009c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00c      	beq.n	8009c86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c7c:	f043 0220 	orr.w	r2, r3, #32
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 82dd 	beq.w	800a24c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d013      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d105      	bne.n	8009cb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d007      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ccc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cda:	2b40      	cmp	r3, #64	@ 0x40
 8009cdc:	d005      	beq.n	8009cea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009ce2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d054      	beq.n	8009d94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f001 fb00 	bl	800b2f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cfa:	2b40      	cmp	r3, #64	@ 0x40
 8009cfc:	d146      	bne.n	8009d8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3308      	adds	r3, #8
 8009d04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d0c:	e853 3f00 	ldrex	r3, [r3]
 8009d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3308      	adds	r3, #8
 8009d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1d9      	bne.n	8009cfe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d017      	beq.n	8009d84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d5a:	4a15      	ldr	r2, [pc, #84]	@ (8009db0 <HAL_UART_IRQHandler+0x2c0>)
 8009d5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7f9 f811 	bl	8002d8c <HAL_DMA_Abort_IT>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d019      	beq.n	8009da4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009d7e:	4610      	mov	r0, r2
 8009d80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d82:	e00f      	b.n	8009da4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fa77 	bl	800a278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d8a:	e00b      	b.n	8009da4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fa73 	bl	800a278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d92:	e007      	b.n	8009da4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fa6f 	bl	800a278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009da2:	e253      	b.n	800a24c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da4:	bf00      	nop
    return;
 8009da6:	e251      	b.n	800a24c <HAL_UART_IRQHandler+0x75c>
 8009da8:	10000001 	.word	0x10000001
 8009dac:	04000120 	.word	0x04000120
 8009db0:	0800b3bd 	.word	0x0800b3bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	f040 81e7 	bne.w	800a18c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc2:	f003 0310 	and.w	r3, r3, #16
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 81e0 	beq.w	800a18c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dd0:	f003 0310 	and.w	r3, r3, #16
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 81d9 	beq.w	800a18c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2210      	movs	r2, #16
 8009de0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dec:	2b40      	cmp	r3, #64	@ 0x40
 8009dee:	f040 8151 	bne.w	800a094 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a96      	ldr	r2, [pc, #600]	@ (800a054 <HAL_UART_IRQHandler+0x564>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d068      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a93      	ldr	r2, [pc, #588]	@ (800a058 <HAL_UART_IRQHandler+0x568>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d061      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a91      	ldr	r2, [pc, #580]	@ (800a05c <HAL_UART_IRQHandler+0x56c>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d05a      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a8e      	ldr	r2, [pc, #568]	@ (800a060 <HAL_UART_IRQHandler+0x570>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d053      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a8c      	ldr	r2, [pc, #560]	@ (800a064 <HAL_UART_IRQHandler+0x574>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d04c      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a89      	ldr	r2, [pc, #548]	@ (800a068 <HAL_UART_IRQHandler+0x578>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d045      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a87      	ldr	r2, [pc, #540]	@ (800a06c <HAL_UART_IRQHandler+0x57c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d03e      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a84      	ldr	r2, [pc, #528]	@ (800a070 <HAL_UART_IRQHandler+0x580>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d037      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a82      	ldr	r2, [pc, #520]	@ (800a074 <HAL_UART_IRQHandler+0x584>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d030      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a7f      	ldr	r2, [pc, #508]	@ (800a078 <HAL_UART_IRQHandler+0x588>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d029      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a7d      	ldr	r2, [pc, #500]	@ (800a07c <HAL_UART_IRQHandler+0x58c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d022      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a7a      	ldr	r2, [pc, #488]	@ (800a080 <HAL_UART_IRQHandler+0x590>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d01b      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a78      	ldr	r2, [pc, #480]	@ (800a084 <HAL_UART_IRQHandler+0x594>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d014      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a75      	ldr	r2, [pc, #468]	@ (800a088 <HAL_UART_IRQHandler+0x598>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00d      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a73      	ldr	r2, [pc, #460]	@ (800a08c <HAL_UART_IRQHandler+0x59c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d006      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x3e2>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a70      	ldr	r2, [pc, #448]	@ (800a090 <HAL_UART_IRQHandler+0x5a0>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d106      	bne.n	8009ee0 <HAL_UART_IRQHandler+0x3f0>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	e005      	b.n	8009eec <HAL_UART_IRQHandler+0x3fc>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ef0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 81ab 	beq.w	800a250 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f04:	429a      	cmp	r2, r3
 8009f06:	f080 81a3 	bcs.w	800a250 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f1a:	69db      	ldr	r3, [r3, #28]
 8009f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f20:	f000 8087 	beq.w	800a032 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f30:	e853 3f00 	ldrex	r3, [r3]
 8009f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1da      	bne.n	8009f24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3308      	adds	r3, #8
 8009f74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f78:	e853 3f00 	ldrex	r3, [r3]
 8009f7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f80:	f023 0301 	bic.w	r3, r3, #1
 8009f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009fa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1e1      	bne.n	8009f6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3308      	adds	r3, #8
 8009fb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fb4:	e853 3f00 	ldrex	r3, [r3]
 8009fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009fba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3308      	adds	r3, #8
 8009fca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009fce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009fd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1e3      	bne.n	8009faa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a000:	f023 0310 	bic.w	r3, r3, #16
 800a004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	461a      	mov	r2, r3
 800a00e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a012:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a014:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a018:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e4      	bne.n	8009ff0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7f8 fb8f 	bl	8002750 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2202      	movs	r2, #2
 800a036:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a044:	b29b      	uxth	r3, r3
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	b29b      	uxth	r3, r3
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f91d 	bl	800a28c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a052:	e0fd      	b.n	800a250 <HAL_UART_IRQHandler+0x760>
 800a054:	40020010 	.word	0x40020010
 800a058:	40020028 	.word	0x40020028
 800a05c:	40020040 	.word	0x40020040
 800a060:	40020058 	.word	0x40020058
 800a064:	40020070 	.word	0x40020070
 800a068:	40020088 	.word	0x40020088
 800a06c:	400200a0 	.word	0x400200a0
 800a070:	400200b8 	.word	0x400200b8
 800a074:	40020410 	.word	0x40020410
 800a078:	40020428 	.word	0x40020428
 800a07c:	40020440 	.word	0x40020440
 800a080:	40020458 	.word	0x40020458
 800a084:	40020470 	.word	0x40020470
 800a088:	40020488 	.word	0x40020488
 800a08c:	400204a0 	.word	0x400204a0
 800a090:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 80cf 	beq.w	800a254 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a0b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 80ca 	beq.w	800a254 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a0e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e4      	bne.n	800a0c0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	623b      	str	r3, [r7, #32]
   return(result);
 800a106:	6a3a      	ldr	r2, [r7, #32]
 800a108:	4b55      	ldr	r3, [pc, #340]	@ (800a260 <HAL_UART_IRQHandler+0x770>)
 800a10a:	4013      	ands	r3, r2
 800a10c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3308      	adds	r3, #8
 800a116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a11a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e3      	bne.n	800a0f6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2220      	movs	r2, #32
 800a132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	e853 3f00 	ldrex	r3, [r3]
 800a14e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f023 0310 	bic.w	r3, r3, #16
 800a156:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a164:	61fb      	str	r3, [r7, #28]
 800a166:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a168:	69b9      	ldr	r1, [r7, #24]
 800a16a:	69fa      	ldr	r2, [r7, #28]
 800a16c:	e841 2300 	strex	r3, r2, [r1]
 800a170:	617b      	str	r3, [r7, #20]
   return(result);
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e4      	bne.n	800a142 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2202      	movs	r2, #2
 800a17c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a17e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f881 	bl	800a28c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a18a:	e063      	b.n	800a254 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00e      	beq.n	800a1b6 <HAL_UART_IRQHandler+0x6c6>
 800a198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a19c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d008      	beq.n	800a1b6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a1ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f001 f945 	bl	800b43e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1b4:	e051      	b.n	800a25a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d014      	beq.n	800a1ec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d105      	bne.n	800a1da <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a1ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d008      	beq.n	800a1ec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d03a      	beq.n	800a258 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
    }
    return;
 800a1ea:	e035      	b.n	800a258 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d009      	beq.n	800a20c <HAL_UART_IRQHandler+0x71c>
 800a1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a200:	2b00      	cmp	r3, #0
 800a202:	d003      	beq.n	800a20c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f001 f8ef 	bl	800b3e8 <UART_EndTransmit_IT>
    return;
 800a20a:	e026      	b.n	800a25a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a20c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a210:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d009      	beq.n	800a22c <HAL_UART_IRQHandler+0x73c>
 800a218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a21c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f001 f91e 	bl	800b466 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a22a:	e016      	b.n	800a25a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a22c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d010      	beq.n	800a25a <HAL_UART_IRQHandler+0x76a>
 800a238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	da0c      	bge.n	800a25a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 f906 	bl	800b452 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a246:	e008      	b.n	800a25a <HAL_UART_IRQHandler+0x76a>
      return;
 800a248:	bf00      	nop
 800a24a:	e006      	b.n	800a25a <HAL_UART_IRQHandler+0x76a>
    return;
 800a24c:	bf00      	nop
 800a24e:	e004      	b.n	800a25a <HAL_UART_IRQHandler+0x76a>
      return;
 800a250:	bf00      	nop
 800a252:	e002      	b.n	800a25a <HAL_UART_IRQHandler+0x76a>
      return;
 800a254:	bf00      	nop
 800a256:	e000      	b.n	800a25a <HAL_UART_IRQHandler+0x76a>
    return;
 800a258:	bf00      	nop
  }
}
 800a25a:	37e8      	adds	r7, #232	@ 0xe8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	effffffe 	.word	0xeffffffe

0800a264 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2a8:	b092      	sub	sp, #72	@ 0x48
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	431a      	orrs	r2, r3
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	4bbe      	ldr	r3, [pc, #760]	@ (800a5cc <UART_SetConfig+0x328>)
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	6812      	ldr	r2, [r2, #0]
 800a2da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2dc:	430b      	orrs	r3, r1
 800a2de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	68da      	ldr	r2, [r3, #12]
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	430a      	orrs	r2, r1
 800a2f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4ab3      	ldr	r2, [pc, #716]	@ (800a5d0 <UART_SetConfig+0x32c>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d004      	beq.n	800a310 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a30c:	4313      	orrs	r3, r2
 800a30e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689a      	ldr	r2, [r3, #8]
 800a316:	4baf      	ldr	r3, [pc, #700]	@ (800a5d4 <UART_SetConfig+0x330>)
 800a318:	4013      	ands	r3, r2
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	6812      	ldr	r2, [r2, #0]
 800a31e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a320:	430b      	orrs	r3, r1
 800a322:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a32a:	f023 010f 	bic.w	r1, r3, #15
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	430a      	orrs	r2, r1
 800a338:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4aa6      	ldr	r2, [pc, #664]	@ (800a5d8 <UART_SetConfig+0x334>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d177      	bne.n	800a434 <UART_SetConfig+0x190>
 800a344:	4ba5      	ldr	r3, [pc, #660]	@ (800a5dc <UART_SetConfig+0x338>)
 800a346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a348:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a34c:	2b28      	cmp	r3, #40	@ 0x28
 800a34e:	d86d      	bhi.n	800a42c <UART_SetConfig+0x188>
 800a350:	a201      	add	r2, pc, #4	@ (adr r2, 800a358 <UART_SetConfig+0xb4>)
 800a352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a3fd 	.word	0x0800a3fd
 800a35c:	0800a42d 	.word	0x0800a42d
 800a360:	0800a42d 	.word	0x0800a42d
 800a364:	0800a42d 	.word	0x0800a42d
 800a368:	0800a42d 	.word	0x0800a42d
 800a36c:	0800a42d 	.word	0x0800a42d
 800a370:	0800a42d 	.word	0x0800a42d
 800a374:	0800a42d 	.word	0x0800a42d
 800a378:	0800a405 	.word	0x0800a405
 800a37c:	0800a42d 	.word	0x0800a42d
 800a380:	0800a42d 	.word	0x0800a42d
 800a384:	0800a42d 	.word	0x0800a42d
 800a388:	0800a42d 	.word	0x0800a42d
 800a38c:	0800a42d 	.word	0x0800a42d
 800a390:	0800a42d 	.word	0x0800a42d
 800a394:	0800a42d 	.word	0x0800a42d
 800a398:	0800a40d 	.word	0x0800a40d
 800a39c:	0800a42d 	.word	0x0800a42d
 800a3a0:	0800a42d 	.word	0x0800a42d
 800a3a4:	0800a42d 	.word	0x0800a42d
 800a3a8:	0800a42d 	.word	0x0800a42d
 800a3ac:	0800a42d 	.word	0x0800a42d
 800a3b0:	0800a42d 	.word	0x0800a42d
 800a3b4:	0800a42d 	.word	0x0800a42d
 800a3b8:	0800a415 	.word	0x0800a415
 800a3bc:	0800a42d 	.word	0x0800a42d
 800a3c0:	0800a42d 	.word	0x0800a42d
 800a3c4:	0800a42d 	.word	0x0800a42d
 800a3c8:	0800a42d 	.word	0x0800a42d
 800a3cc:	0800a42d 	.word	0x0800a42d
 800a3d0:	0800a42d 	.word	0x0800a42d
 800a3d4:	0800a42d 	.word	0x0800a42d
 800a3d8:	0800a41d 	.word	0x0800a41d
 800a3dc:	0800a42d 	.word	0x0800a42d
 800a3e0:	0800a42d 	.word	0x0800a42d
 800a3e4:	0800a42d 	.word	0x0800a42d
 800a3e8:	0800a42d 	.word	0x0800a42d
 800a3ec:	0800a42d 	.word	0x0800a42d
 800a3f0:	0800a42d 	.word	0x0800a42d
 800a3f4:	0800a42d 	.word	0x0800a42d
 800a3f8:	0800a425 	.word	0x0800a425
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e326      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a404:	2304      	movs	r3, #4
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e322      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a40c:	2308      	movs	r3, #8
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a412:	e31e      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a414:	2310      	movs	r3, #16
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41a:	e31a      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a41c:	2320      	movs	r3, #32
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a422:	e316      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a424:	2340      	movs	r3, #64	@ 0x40
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e312      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a42c:	2380      	movs	r3, #128	@ 0x80
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e30e      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a69      	ldr	r2, [pc, #420]	@ (800a5e0 <UART_SetConfig+0x33c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d130      	bne.n	800a4a0 <UART_SetConfig+0x1fc>
 800a43e:	4b67      	ldr	r3, [pc, #412]	@ (800a5dc <UART_SetConfig+0x338>)
 800a440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a442:	f003 0307 	and.w	r3, r3, #7
 800a446:	2b05      	cmp	r3, #5
 800a448:	d826      	bhi.n	800a498 <UART_SetConfig+0x1f4>
 800a44a:	a201      	add	r2, pc, #4	@ (adr r2, 800a450 <UART_SetConfig+0x1ac>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a469 	.word	0x0800a469
 800a454:	0800a471 	.word	0x0800a471
 800a458:	0800a479 	.word	0x0800a479
 800a45c:	0800a481 	.word	0x0800a481
 800a460:	0800a489 	.word	0x0800a489
 800a464:	0800a491 	.word	0x0800a491
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46e:	e2f0      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a470:	2304      	movs	r3, #4
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e2ec      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a478:	2308      	movs	r3, #8
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47e:	e2e8      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a480:	2310      	movs	r3, #16
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a486:	e2e4      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a488:	2320      	movs	r3, #32
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48e:	e2e0      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a490:	2340      	movs	r3, #64	@ 0x40
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a496:	e2dc      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a498:	2380      	movs	r3, #128	@ 0x80
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e2d8      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a4f      	ldr	r2, [pc, #316]	@ (800a5e4 <UART_SetConfig+0x340>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d130      	bne.n	800a50c <UART_SetConfig+0x268>
 800a4aa:	4b4c      	ldr	r3, [pc, #304]	@ (800a5dc <UART_SetConfig+0x338>)
 800a4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ae:	f003 0307 	and.w	r3, r3, #7
 800a4b2:	2b05      	cmp	r3, #5
 800a4b4:	d826      	bhi.n	800a504 <UART_SetConfig+0x260>
 800a4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4bc <UART_SetConfig+0x218>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a4d5 	.word	0x0800a4d5
 800a4c0:	0800a4dd 	.word	0x0800a4dd
 800a4c4:	0800a4e5 	.word	0x0800a4e5
 800a4c8:	0800a4ed 	.word	0x0800a4ed
 800a4cc:	0800a4f5 	.word	0x0800a4f5
 800a4d0:	0800a4fd 	.word	0x0800a4fd
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4da:	e2ba      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a4dc:	2304      	movs	r3, #4
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e2b6      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a4e4:	2308      	movs	r3, #8
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ea:	e2b2      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f2:	e2ae      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a4f4:	2320      	movs	r3, #32
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fa:	e2aa      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a4fc:	2340      	movs	r3, #64	@ 0x40
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a502:	e2a6      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a504:	2380      	movs	r3, #128	@ 0x80
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e2a2      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a35      	ldr	r2, [pc, #212]	@ (800a5e8 <UART_SetConfig+0x344>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d130      	bne.n	800a578 <UART_SetConfig+0x2d4>
 800a516:	4b31      	ldr	r3, [pc, #196]	@ (800a5dc <UART_SetConfig+0x338>)
 800a518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a51a:	f003 0307 	and.w	r3, r3, #7
 800a51e:	2b05      	cmp	r3, #5
 800a520:	d826      	bhi.n	800a570 <UART_SetConfig+0x2cc>
 800a522:	a201      	add	r2, pc, #4	@ (adr r2, 800a528 <UART_SetConfig+0x284>)
 800a524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a528:	0800a541 	.word	0x0800a541
 800a52c:	0800a549 	.word	0x0800a549
 800a530:	0800a551 	.word	0x0800a551
 800a534:	0800a559 	.word	0x0800a559
 800a538:	0800a561 	.word	0x0800a561
 800a53c:	0800a569 	.word	0x0800a569
 800a540:	2300      	movs	r3, #0
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a546:	e284      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a548:	2304      	movs	r3, #4
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e280      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a550:	2308      	movs	r3, #8
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a556:	e27c      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a558:	2310      	movs	r3, #16
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55e:	e278      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a560:	2320      	movs	r3, #32
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a566:	e274      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a568:	2340      	movs	r3, #64	@ 0x40
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56e:	e270      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a570:	2380      	movs	r3, #128	@ 0x80
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e26c      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a1b      	ldr	r2, [pc, #108]	@ (800a5ec <UART_SetConfig+0x348>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d142      	bne.n	800a608 <UART_SetConfig+0x364>
 800a582:	4b16      	ldr	r3, [pc, #88]	@ (800a5dc <UART_SetConfig+0x338>)
 800a584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	2b05      	cmp	r3, #5
 800a58c:	d838      	bhi.n	800a600 <UART_SetConfig+0x35c>
 800a58e:	a201      	add	r2, pc, #4	@ (adr r2, 800a594 <UART_SetConfig+0x2f0>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5ad 	.word	0x0800a5ad
 800a598:	0800a5b5 	.word	0x0800a5b5
 800a59c:	0800a5bd 	.word	0x0800a5bd
 800a5a0:	0800a5c5 	.word	0x0800a5c5
 800a5a4:	0800a5f1 	.word	0x0800a5f1
 800a5a8:	0800a5f9 	.word	0x0800a5f9
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b2:	e24e      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a5b4:	2304      	movs	r3, #4
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ba:	e24a      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a5bc:	2308      	movs	r3, #8
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c2:	e246      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a5c4:	2310      	movs	r3, #16
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ca:	e242      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a5cc:	cfff69f3 	.word	0xcfff69f3
 800a5d0:	58000c00 	.word	0x58000c00
 800a5d4:	11fff4ff 	.word	0x11fff4ff
 800a5d8:	40011000 	.word	0x40011000
 800a5dc:	58024400 	.word	0x58024400
 800a5e0:	40004400 	.word	0x40004400
 800a5e4:	40004800 	.word	0x40004800
 800a5e8:	40004c00 	.word	0x40004c00
 800a5ec:	40005000 	.word	0x40005000
 800a5f0:	2320      	movs	r3, #32
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f6:	e22c      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a5f8:	2340      	movs	r3, #64	@ 0x40
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fe:	e228      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a600:	2380      	movs	r3, #128	@ 0x80
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a606:	e224      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4ab1      	ldr	r2, [pc, #708]	@ (800a8d4 <UART_SetConfig+0x630>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d176      	bne.n	800a700 <UART_SetConfig+0x45c>
 800a612:	4bb1      	ldr	r3, [pc, #708]	@ (800a8d8 <UART_SetConfig+0x634>)
 800a614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a61a:	2b28      	cmp	r3, #40	@ 0x28
 800a61c:	d86c      	bhi.n	800a6f8 <UART_SetConfig+0x454>
 800a61e:	a201      	add	r2, pc, #4	@ (adr r2, 800a624 <UART_SetConfig+0x380>)
 800a620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a624:	0800a6c9 	.word	0x0800a6c9
 800a628:	0800a6f9 	.word	0x0800a6f9
 800a62c:	0800a6f9 	.word	0x0800a6f9
 800a630:	0800a6f9 	.word	0x0800a6f9
 800a634:	0800a6f9 	.word	0x0800a6f9
 800a638:	0800a6f9 	.word	0x0800a6f9
 800a63c:	0800a6f9 	.word	0x0800a6f9
 800a640:	0800a6f9 	.word	0x0800a6f9
 800a644:	0800a6d1 	.word	0x0800a6d1
 800a648:	0800a6f9 	.word	0x0800a6f9
 800a64c:	0800a6f9 	.word	0x0800a6f9
 800a650:	0800a6f9 	.word	0x0800a6f9
 800a654:	0800a6f9 	.word	0x0800a6f9
 800a658:	0800a6f9 	.word	0x0800a6f9
 800a65c:	0800a6f9 	.word	0x0800a6f9
 800a660:	0800a6f9 	.word	0x0800a6f9
 800a664:	0800a6d9 	.word	0x0800a6d9
 800a668:	0800a6f9 	.word	0x0800a6f9
 800a66c:	0800a6f9 	.word	0x0800a6f9
 800a670:	0800a6f9 	.word	0x0800a6f9
 800a674:	0800a6f9 	.word	0x0800a6f9
 800a678:	0800a6f9 	.word	0x0800a6f9
 800a67c:	0800a6f9 	.word	0x0800a6f9
 800a680:	0800a6f9 	.word	0x0800a6f9
 800a684:	0800a6e1 	.word	0x0800a6e1
 800a688:	0800a6f9 	.word	0x0800a6f9
 800a68c:	0800a6f9 	.word	0x0800a6f9
 800a690:	0800a6f9 	.word	0x0800a6f9
 800a694:	0800a6f9 	.word	0x0800a6f9
 800a698:	0800a6f9 	.word	0x0800a6f9
 800a69c:	0800a6f9 	.word	0x0800a6f9
 800a6a0:	0800a6f9 	.word	0x0800a6f9
 800a6a4:	0800a6e9 	.word	0x0800a6e9
 800a6a8:	0800a6f9 	.word	0x0800a6f9
 800a6ac:	0800a6f9 	.word	0x0800a6f9
 800a6b0:	0800a6f9 	.word	0x0800a6f9
 800a6b4:	0800a6f9 	.word	0x0800a6f9
 800a6b8:	0800a6f9 	.word	0x0800a6f9
 800a6bc:	0800a6f9 	.word	0x0800a6f9
 800a6c0:	0800a6f9 	.word	0x0800a6f9
 800a6c4:	0800a6f1 	.word	0x0800a6f1
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e1c0      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a6d0:	2304      	movs	r3, #4
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e1bc      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a6d8:	2308      	movs	r3, #8
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e1b8      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a6e0:	2310      	movs	r3, #16
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e6:	e1b4      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a6e8:	2320      	movs	r3, #32
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ee:	e1b0      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a6f0:	2340      	movs	r3, #64	@ 0x40
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e1ac      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a6f8:	2380      	movs	r3, #128	@ 0x80
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e1a8      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a75      	ldr	r2, [pc, #468]	@ (800a8dc <UART_SetConfig+0x638>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d130      	bne.n	800a76c <UART_SetConfig+0x4c8>
 800a70a:	4b73      	ldr	r3, [pc, #460]	@ (800a8d8 <UART_SetConfig+0x634>)
 800a70c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a70e:	f003 0307 	and.w	r3, r3, #7
 800a712:	2b05      	cmp	r3, #5
 800a714:	d826      	bhi.n	800a764 <UART_SetConfig+0x4c0>
 800a716:	a201      	add	r2, pc, #4	@ (adr r2, 800a71c <UART_SetConfig+0x478>)
 800a718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71c:	0800a735 	.word	0x0800a735
 800a720:	0800a73d 	.word	0x0800a73d
 800a724:	0800a745 	.word	0x0800a745
 800a728:	0800a74d 	.word	0x0800a74d
 800a72c:	0800a755 	.word	0x0800a755
 800a730:	0800a75d 	.word	0x0800a75d
 800a734:	2300      	movs	r3, #0
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73a:	e18a      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a73c:	2304      	movs	r3, #4
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e186      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a744:	2308      	movs	r3, #8
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74a:	e182      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a74c:	2310      	movs	r3, #16
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a752:	e17e      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a754:	2320      	movs	r3, #32
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75a:	e17a      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a75c:	2340      	movs	r3, #64	@ 0x40
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a762:	e176      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a764:	2380      	movs	r3, #128	@ 0x80
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e172      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a5b      	ldr	r2, [pc, #364]	@ (800a8e0 <UART_SetConfig+0x63c>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d130      	bne.n	800a7d8 <UART_SetConfig+0x534>
 800a776:	4b58      	ldr	r3, [pc, #352]	@ (800a8d8 <UART_SetConfig+0x634>)
 800a778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	2b05      	cmp	r3, #5
 800a780:	d826      	bhi.n	800a7d0 <UART_SetConfig+0x52c>
 800a782:	a201      	add	r2, pc, #4	@ (adr r2, 800a788 <UART_SetConfig+0x4e4>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a7a1 	.word	0x0800a7a1
 800a78c:	0800a7a9 	.word	0x0800a7a9
 800a790:	0800a7b1 	.word	0x0800a7b1
 800a794:	0800a7b9 	.word	0x0800a7b9
 800a798:	0800a7c1 	.word	0x0800a7c1
 800a79c:	0800a7c9 	.word	0x0800a7c9
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a6:	e154      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a7a8:	2304      	movs	r3, #4
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ae:	e150      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a7b0:	2308      	movs	r3, #8
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b6:	e14c      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7be:	e148      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c6:	e144      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a7c8:	2340      	movs	r3, #64	@ 0x40
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ce:	e140      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a7d0:	2380      	movs	r3, #128	@ 0x80
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d6:	e13c      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a41      	ldr	r2, [pc, #260]	@ (800a8e4 <UART_SetConfig+0x640>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	f040 8082 	bne.w	800a8e8 <UART_SetConfig+0x644>
 800a7e4:	4b3c      	ldr	r3, [pc, #240]	@ (800a8d8 <UART_SetConfig+0x634>)
 800a7e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a7ec:	2b28      	cmp	r3, #40	@ 0x28
 800a7ee:	d86d      	bhi.n	800a8cc <UART_SetConfig+0x628>
 800a7f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f8 <UART_SetConfig+0x554>)
 800a7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f6:	bf00      	nop
 800a7f8:	0800a89d 	.word	0x0800a89d
 800a7fc:	0800a8cd 	.word	0x0800a8cd
 800a800:	0800a8cd 	.word	0x0800a8cd
 800a804:	0800a8cd 	.word	0x0800a8cd
 800a808:	0800a8cd 	.word	0x0800a8cd
 800a80c:	0800a8cd 	.word	0x0800a8cd
 800a810:	0800a8cd 	.word	0x0800a8cd
 800a814:	0800a8cd 	.word	0x0800a8cd
 800a818:	0800a8a5 	.word	0x0800a8a5
 800a81c:	0800a8cd 	.word	0x0800a8cd
 800a820:	0800a8cd 	.word	0x0800a8cd
 800a824:	0800a8cd 	.word	0x0800a8cd
 800a828:	0800a8cd 	.word	0x0800a8cd
 800a82c:	0800a8cd 	.word	0x0800a8cd
 800a830:	0800a8cd 	.word	0x0800a8cd
 800a834:	0800a8cd 	.word	0x0800a8cd
 800a838:	0800a8ad 	.word	0x0800a8ad
 800a83c:	0800a8cd 	.word	0x0800a8cd
 800a840:	0800a8cd 	.word	0x0800a8cd
 800a844:	0800a8cd 	.word	0x0800a8cd
 800a848:	0800a8cd 	.word	0x0800a8cd
 800a84c:	0800a8cd 	.word	0x0800a8cd
 800a850:	0800a8cd 	.word	0x0800a8cd
 800a854:	0800a8cd 	.word	0x0800a8cd
 800a858:	0800a8b5 	.word	0x0800a8b5
 800a85c:	0800a8cd 	.word	0x0800a8cd
 800a860:	0800a8cd 	.word	0x0800a8cd
 800a864:	0800a8cd 	.word	0x0800a8cd
 800a868:	0800a8cd 	.word	0x0800a8cd
 800a86c:	0800a8cd 	.word	0x0800a8cd
 800a870:	0800a8cd 	.word	0x0800a8cd
 800a874:	0800a8cd 	.word	0x0800a8cd
 800a878:	0800a8bd 	.word	0x0800a8bd
 800a87c:	0800a8cd 	.word	0x0800a8cd
 800a880:	0800a8cd 	.word	0x0800a8cd
 800a884:	0800a8cd 	.word	0x0800a8cd
 800a888:	0800a8cd 	.word	0x0800a8cd
 800a88c:	0800a8cd 	.word	0x0800a8cd
 800a890:	0800a8cd 	.word	0x0800a8cd
 800a894:	0800a8cd 	.word	0x0800a8cd
 800a898:	0800a8c5 	.word	0x0800a8c5
 800a89c:	2301      	movs	r3, #1
 800a89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a2:	e0d6      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a8a4:	2304      	movs	r3, #4
 800a8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8aa:	e0d2      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a8ac:	2308      	movs	r3, #8
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b2:	e0ce      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a8b4:	2310      	movs	r3, #16
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ba:	e0ca      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a8bc:	2320      	movs	r3, #32
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c2:	e0c6      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a8c4:	2340      	movs	r3, #64	@ 0x40
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ca:	e0c2      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a8cc:	2380      	movs	r3, #128	@ 0x80
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d2:	e0be      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a8d4:	40011400 	.word	0x40011400
 800a8d8:	58024400 	.word	0x58024400
 800a8dc:	40007800 	.word	0x40007800
 800a8e0:	40007c00 	.word	0x40007c00
 800a8e4:	40011800 	.word	0x40011800
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4aad      	ldr	r2, [pc, #692]	@ (800aba4 <UART_SetConfig+0x900>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d176      	bne.n	800a9e0 <UART_SetConfig+0x73c>
 800a8f2:	4bad      	ldr	r3, [pc, #692]	@ (800aba8 <UART_SetConfig+0x904>)
 800a8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8fa:	2b28      	cmp	r3, #40	@ 0x28
 800a8fc:	d86c      	bhi.n	800a9d8 <UART_SetConfig+0x734>
 800a8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a904 <UART_SetConfig+0x660>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a9a9 	.word	0x0800a9a9
 800a908:	0800a9d9 	.word	0x0800a9d9
 800a90c:	0800a9d9 	.word	0x0800a9d9
 800a910:	0800a9d9 	.word	0x0800a9d9
 800a914:	0800a9d9 	.word	0x0800a9d9
 800a918:	0800a9d9 	.word	0x0800a9d9
 800a91c:	0800a9d9 	.word	0x0800a9d9
 800a920:	0800a9d9 	.word	0x0800a9d9
 800a924:	0800a9b1 	.word	0x0800a9b1
 800a928:	0800a9d9 	.word	0x0800a9d9
 800a92c:	0800a9d9 	.word	0x0800a9d9
 800a930:	0800a9d9 	.word	0x0800a9d9
 800a934:	0800a9d9 	.word	0x0800a9d9
 800a938:	0800a9d9 	.word	0x0800a9d9
 800a93c:	0800a9d9 	.word	0x0800a9d9
 800a940:	0800a9d9 	.word	0x0800a9d9
 800a944:	0800a9b9 	.word	0x0800a9b9
 800a948:	0800a9d9 	.word	0x0800a9d9
 800a94c:	0800a9d9 	.word	0x0800a9d9
 800a950:	0800a9d9 	.word	0x0800a9d9
 800a954:	0800a9d9 	.word	0x0800a9d9
 800a958:	0800a9d9 	.word	0x0800a9d9
 800a95c:	0800a9d9 	.word	0x0800a9d9
 800a960:	0800a9d9 	.word	0x0800a9d9
 800a964:	0800a9c1 	.word	0x0800a9c1
 800a968:	0800a9d9 	.word	0x0800a9d9
 800a96c:	0800a9d9 	.word	0x0800a9d9
 800a970:	0800a9d9 	.word	0x0800a9d9
 800a974:	0800a9d9 	.word	0x0800a9d9
 800a978:	0800a9d9 	.word	0x0800a9d9
 800a97c:	0800a9d9 	.word	0x0800a9d9
 800a980:	0800a9d9 	.word	0x0800a9d9
 800a984:	0800a9c9 	.word	0x0800a9c9
 800a988:	0800a9d9 	.word	0x0800a9d9
 800a98c:	0800a9d9 	.word	0x0800a9d9
 800a990:	0800a9d9 	.word	0x0800a9d9
 800a994:	0800a9d9 	.word	0x0800a9d9
 800a998:	0800a9d9 	.word	0x0800a9d9
 800a99c:	0800a9d9 	.word	0x0800a9d9
 800a9a0:	0800a9d9 	.word	0x0800a9d9
 800a9a4:	0800a9d1 	.word	0x0800a9d1
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ae:	e050      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a9b0:	2304      	movs	r3, #4
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9b6:	e04c      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a9b8:	2308      	movs	r3, #8
 800a9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9be:	e048      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a9c0:	2310      	movs	r3, #16
 800a9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9c6:	e044      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a9c8:	2320      	movs	r3, #32
 800a9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ce:	e040      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a9d0:	2340      	movs	r3, #64	@ 0x40
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9d6:	e03c      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a9d8:	2380      	movs	r3, #128	@ 0x80
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9de:	e038      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a71      	ldr	r2, [pc, #452]	@ (800abac <UART_SetConfig+0x908>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d130      	bne.n	800aa4c <UART_SetConfig+0x7a8>
 800a9ea:	4b6f      	ldr	r3, [pc, #444]	@ (800aba8 <UART_SetConfig+0x904>)
 800a9ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ee:	f003 0307 	and.w	r3, r3, #7
 800a9f2:	2b05      	cmp	r3, #5
 800a9f4:	d826      	bhi.n	800aa44 <UART_SetConfig+0x7a0>
 800a9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9fc <UART_SetConfig+0x758>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa15 	.word	0x0800aa15
 800aa00:	0800aa1d 	.word	0x0800aa1d
 800aa04:	0800aa25 	.word	0x0800aa25
 800aa08:	0800aa2d 	.word	0x0800aa2d
 800aa0c:	0800aa35 	.word	0x0800aa35
 800aa10:	0800aa3d 	.word	0x0800aa3d
 800aa14:	2302      	movs	r3, #2
 800aa16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa1a:	e01a      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa22:	e016      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800aa24:	2308      	movs	r3, #8
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa2a:	e012      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800aa2c:	2310      	movs	r3, #16
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa32:	e00e      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800aa34:	2320      	movs	r3, #32
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa3a:	e00a      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800aa3c:	2340      	movs	r3, #64	@ 0x40
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa42:	e006      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800aa44:	2380      	movs	r3, #128	@ 0x80
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4a:	e002      	b.n	800aa52 <UART_SetConfig+0x7ae>
 800aa4c:	2380      	movs	r3, #128	@ 0x80
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a55      	ldr	r2, [pc, #340]	@ (800abac <UART_SetConfig+0x908>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	f040 80f8 	bne.w	800ac4e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa62:	2b20      	cmp	r3, #32
 800aa64:	dc46      	bgt.n	800aaf4 <UART_SetConfig+0x850>
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	db75      	blt.n	800ab56 <UART_SetConfig+0x8b2>
 800aa6a:	3b02      	subs	r3, #2
 800aa6c:	2b1e      	cmp	r3, #30
 800aa6e:	d872      	bhi.n	800ab56 <UART_SetConfig+0x8b2>
 800aa70:	a201      	add	r2, pc, #4	@ (adr r2, 800aa78 <UART_SetConfig+0x7d4>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aafb 	.word	0x0800aafb
 800aa7c:	0800ab57 	.word	0x0800ab57
 800aa80:	0800ab03 	.word	0x0800ab03
 800aa84:	0800ab57 	.word	0x0800ab57
 800aa88:	0800ab57 	.word	0x0800ab57
 800aa8c:	0800ab57 	.word	0x0800ab57
 800aa90:	0800ab13 	.word	0x0800ab13
 800aa94:	0800ab57 	.word	0x0800ab57
 800aa98:	0800ab57 	.word	0x0800ab57
 800aa9c:	0800ab57 	.word	0x0800ab57
 800aaa0:	0800ab57 	.word	0x0800ab57
 800aaa4:	0800ab57 	.word	0x0800ab57
 800aaa8:	0800ab57 	.word	0x0800ab57
 800aaac:	0800ab57 	.word	0x0800ab57
 800aab0:	0800ab23 	.word	0x0800ab23
 800aab4:	0800ab57 	.word	0x0800ab57
 800aab8:	0800ab57 	.word	0x0800ab57
 800aabc:	0800ab57 	.word	0x0800ab57
 800aac0:	0800ab57 	.word	0x0800ab57
 800aac4:	0800ab57 	.word	0x0800ab57
 800aac8:	0800ab57 	.word	0x0800ab57
 800aacc:	0800ab57 	.word	0x0800ab57
 800aad0:	0800ab57 	.word	0x0800ab57
 800aad4:	0800ab57 	.word	0x0800ab57
 800aad8:	0800ab57 	.word	0x0800ab57
 800aadc:	0800ab57 	.word	0x0800ab57
 800aae0:	0800ab57 	.word	0x0800ab57
 800aae4:	0800ab57 	.word	0x0800ab57
 800aae8:	0800ab57 	.word	0x0800ab57
 800aaec:	0800ab57 	.word	0x0800ab57
 800aaf0:	0800ab49 	.word	0x0800ab49
 800aaf4:	2b40      	cmp	r3, #64	@ 0x40
 800aaf6:	d02a      	beq.n	800ab4e <UART_SetConfig+0x8aa>
 800aaf8:	e02d      	b.n	800ab56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aafa:	f7fb ff37 	bl	800696c <HAL_RCCEx_GetD3PCLK1Freq>
 800aafe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab00:	e02f      	b.n	800ab62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fb ff46 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab10:	e027      	b.n	800ab62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab12:	f107 0318 	add.w	r3, r7, #24
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fc f892 	bl	8006c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab20:	e01f      	b.n	800ab62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab22:	4b21      	ldr	r3, [pc, #132]	@ (800aba8 <UART_SetConfig+0x904>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0320 	and.w	r3, r3, #32
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d009      	beq.n	800ab42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aba8 <UART_SetConfig+0x904>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	08db      	lsrs	r3, r3, #3
 800ab34:	f003 0303 	and.w	r3, r3, #3
 800ab38:	4a1d      	ldr	r2, [pc, #116]	@ (800abb0 <UART_SetConfig+0x90c>)
 800ab3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab40:	e00f      	b.n	800ab62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ab42:	4b1b      	ldr	r3, [pc, #108]	@ (800abb0 <UART_SetConfig+0x90c>)
 800ab44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab46:	e00c      	b.n	800ab62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab48:	4b1a      	ldr	r3, [pc, #104]	@ (800abb4 <UART_SetConfig+0x910>)
 800ab4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab4c:	e009      	b.n	800ab62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab54:	e005      	b.n	800ab62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 81ee 	beq.w	800af46 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6e:	4a12      	ldr	r2, [pc, #72]	@ (800abb8 <UART_SetConfig+0x914>)
 800ab70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab74:	461a      	mov	r2, r3
 800ab76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab7c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	685a      	ldr	r2, [r3, #4]
 800ab82:	4613      	mov	r3, r2
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	4413      	add	r3, r2
 800ab88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d305      	bcc.n	800ab9a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d910      	bls.n	800abbc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aba0:	e1d1      	b.n	800af46 <UART_SetConfig+0xca2>
 800aba2:	bf00      	nop
 800aba4:	40011c00 	.word	0x40011c00
 800aba8:	58024400 	.word	0x58024400
 800abac:	58000c00 	.word	0x58000c00
 800abb0:	03d09000 	.word	0x03d09000
 800abb4:	003d0900 	.word	0x003d0900
 800abb8:	08010d34 	.word	0x08010d34
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abbe:	2200      	movs	r2, #0
 800abc0:	60bb      	str	r3, [r7, #8]
 800abc2:	60fa      	str	r2, [r7, #12]
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc8:	4ac0      	ldr	r2, [pc, #768]	@ (800aecc <UART_SetConfig+0xc28>)
 800abca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abce:	b29b      	uxth	r3, r3
 800abd0:	2200      	movs	r2, #0
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	607a      	str	r2, [r7, #4]
 800abd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800abde:	f7f5 fdab 	bl	8000738 <__aeabi_uldivmod>
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	4610      	mov	r0, r2
 800abe8:	4619      	mov	r1, r3
 800abea:	f04f 0200 	mov.w	r2, #0
 800abee:	f04f 0300 	mov.w	r3, #0
 800abf2:	020b      	lsls	r3, r1, #8
 800abf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800abf8:	0202      	lsls	r2, r0, #8
 800abfa:	6979      	ldr	r1, [r7, #20]
 800abfc:	6849      	ldr	r1, [r1, #4]
 800abfe:	0849      	lsrs	r1, r1, #1
 800ac00:	2000      	movs	r0, #0
 800ac02:	460c      	mov	r4, r1
 800ac04:	4605      	mov	r5, r0
 800ac06:	eb12 0804 	adds.w	r8, r2, r4
 800ac0a:	eb43 0905 	adc.w	r9, r3, r5
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	469a      	mov	sl, r3
 800ac16:	4693      	mov	fp, r2
 800ac18:	4652      	mov	r2, sl
 800ac1a:	465b      	mov	r3, fp
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	4649      	mov	r1, r9
 800ac20:	f7f5 fd8a 	bl	8000738 <__aeabi_uldivmod>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4613      	mov	r3, r2
 800ac2a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac32:	d308      	bcc.n	800ac46 <UART_SetConfig+0x9a2>
 800ac34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac3a:	d204      	bcs.n	800ac46 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac42:	60da      	str	r2, [r3, #12]
 800ac44:	e17f      	b.n	800af46 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac4c:	e17b      	b.n	800af46 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac56:	f040 80bd 	bne.w	800add4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ac5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac5e:	2b20      	cmp	r3, #32
 800ac60:	dc48      	bgt.n	800acf4 <UART_SetConfig+0xa50>
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	db7b      	blt.n	800ad5e <UART_SetConfig+0xaba>
 800ac66:	2b20      	cmp	r3, #32
 800ac68:	d879      	bhi.n	800ad5e <UART_SetConfig+0xaba>
 800ac6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac70 <UART_SetConfig+0x9cc>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800acfb 	.word	0x0800acfb
 800ac74:	0800ad03 	.word	0x0800ad03
 800ac78:	0800ad5f 	.word	0x0800ad5f
 800ac7c:	0800ad5f 	.word	0x0800ad5f
 800ac80:	0800ad0b 	.word	0x0800ad0b
 800ac84:	0800ad5f 	.word	0x0800ad5f
 800ac88:	0800ad5f 	.word	0x0800ad5f
 800ac8c:	0800ad5f 	.word	0x0800ad5f
 800ac90:	0800ad1b 	.word	0x0800ad1b
 800ac94:	0800ad5f 	.word	0x0800ad5f
 800ac98:	0800ad5f 	.word	0x0800ad5f
 800ac9c:	0800ad5f 	.word	0x0800ad5f
 800aca0:	0800ad5f 	.word	0x0800ad5f
 800aca4:	0800ad5f 	.word	0x0800ad5f
 800aca8:	0800ad5f 	.word	0x0800ad5f
 800acac:	0800ad5f 	.word	0x0800ad5f
 800acb0:	0800ad2b 	.word	0x0800ad2b
 800acb4:	0800ad5f 	.word	0x0800ad5f
 800acb8:	0800ad5f 	.word	0x0800ad5f
 800acbc:	0800ad5f 	.word	0x0800ad5f
 800acc0:	0800ad5f 	.word	0x0800ad5f
 800acc4:	0800ad5f 	.word	0x0800ad5f
 800acc8:	0800ad5f 	.word	0x0800ad5f
 800accc:	0800ad5f 	.word	0x0800ad5f
 800acd0:	0800ad5f 	.word	0x0800ad5f
 800acd4:	0800ad5f 	.word	0x0800ad5f
 800acd8:	0800ad5f 	.word	0x0800ad5f
 800acdc:	0800ad5f 	.word	0x0800ad5f
 800ace0:	0800ad5f 	.word	0x0800ad5f
 800ace4:	0800ad5f 	.word	0x0800ad5f
 800ace8:	0800ad5f 	.word	0x0800ad5f
 800acec:	0800ad5f 	.word	0x0800ad5f
 800acf0:	0800ad51 	.word	0x0800ad51
 800acf4:	2b40      	cmp	r3, #64	@ 0x40
 800acf6:	d02e      	beq.n	800ad56 <UART_SetConfig+0xab2>
 800acf8:	e031      	b.n	800ad5e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acfa:	f7f9 ff99 	bl	8004c30 <HAL_RCC_GetPCLK1Freq>
 800acfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad00:	e033      	b.n	800ad6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad02:	f7f9 ffab 	bl	8004c5c <HAL_RCC_GetPCLK2Freq>
 800ad06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad08:	e02f      	b.n	800ad6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fb fe42 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad18:	e027      	b.n	800ad6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad1a:	f107 0318 	add.w	r3, r7, #24
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fb ff8e 	bl	8006c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad28:	e01f      	b.n	800ad6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad2a:	4b69      	ldr	r3, [pc, #420]	@ (800aed0 <UART_SetConfig+0xc2c>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f003 0320 	and.w	r3, r3, #32
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d009      	beq.n	800ad4a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad36:	4b66      	ldr	r3, [pc, #408]	@ (800aed0 <UART_SetConfig+0xc2c>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	08db      	lsrs	r3, r3, #3
 800ad3c:	f003 0303 	and.w	r3, r3, #3
 800ad40:	4a64      	ldr	r2, [pc, #400]	@ (800aed4 <UART_SetConfig+0xc30>)
 800ad42:	fa22 f303 	lsr.w	r3, r2, r3
 800ad46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad48:	e00f      	b.n	800ad6a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ad4a:	4b62      	ldr	r3, [pc, #392]	@ (800aed4 <UART_SetConfig+0xc30>)
 800ad4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad4e:	e00c      	b.n	800ad6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad50:	4b61      	ldr	r3, [pc, #388]	@ (800aed8 <UART_SetConfig+0xc34>)
 800ad52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad54:	e009      	b.n	800ad6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad5c:	e005      	b.n	800ad6a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ad68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 80ea 	beq.w	800af46 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad76:	4a55      	ldr	r2, [pc, #340]	@ (800aecc <UART_SetConfig+0xc28>)
 800ad78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad80:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad84:	005a      	lsls	r2, r3, #1
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	085b      	lsrs	r3, r3, #1
 800ad8c:	441a      	add	r2, r3
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9a:	2b0f      	cmp	r3, #15
 800ad9c:	d916      	bls.n	800adcc <UART_SetConfig+0xb28>
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ada4:	d212      	bcs.n	800adcc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ada6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	f023 030f 	bic.w	r3, r3, #15
 800adae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb2:	085b      	lsrs	r3, r3, #1
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	f003 0307 	and.w	r3, r3, #7
 800adba:	b29a      	uxth	r2, r3
 800adbc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800adbe:	4313      	orrs	r3, r2
 800adc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800adc8:	60da      	str	r2, [r3, #12]
 800adca:	e0bc      	b.n	800af46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800add2:	e0b8      	b.n	800af46 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800add4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800add8:	2b20      	cmp	r3, #32
 800adda:	dc4b      	bgt.n	800ae74 <UART_SetConfig+0xbd0>
 800addc:	2b00      	cmp	r3, #0
 800adde:	f2c0 8087 	blt.w	800aef0 <UART_SetConfig+0xc4c>
 800ade2:	2b20      	cmp	r3, #32
 800ade4:	f200 8084 	bhi.w	800aef0 <UART_SetConfig+0xc4c>
 800ade8:	a201      	add	r2, pc, #4	@ (adr r2, 800adf0 <UART_SetConfig+0xb4c>)
 800adea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adee:	bf00      	nop
 800adf0:	0800ae7b 	.word	0x0800ae7b
 800adf4:	0800ae83 	.word	0x0800ae83
 800adf8:	0800aef1 	.word	0x0800aef1
 800adfc:	0800aef1 	.word	0x0800aef1
 800ae00:	0800ae8b 	.word	0x0800ae8b
 800ae04:	0800aef1 	.word	0x0800aef1
 800ae08:	0800aef1 	.word	0x0800aef1
 800ae0c:	0800aef1 	.word	0x0800aef1
 800ae10:	0800ae9b 	.word	0x0800ae9b
 800ae14:	0800aef1 	.word	0x0800aef1
 800ae18:	0800aef1 	.word	0x0800aef1
 800ae1c:	0800aef1 	.word	0x0800aef1
 800ae20:	0800aef1 	.word	0x0800aef1
 800ae24:	0800aef1 	.word	0x0800aef1
 800ae28:	0800aef1 	.word	0x0800aef1
 800ae2c:	0800aef1 	.word	0x0800aef1
 800ae30:	0800aeab 	.word	0x0800aeab
 800ae34:	0800aef1 	.word	0x0800aef1
 800ae38:	0800aef1 	.word	0x0800aef1
 800ae3c:	0800aef1 	.word	0x0800aef1
 800ae40:	0800aef1 	.word	0x0800aef1
 800ae44:	0800aef1 	.word	0x0800aef1
 800ae48:	0800aef1 	.word	0x0800aef1
 800ae4c:	0800aef1 	.word	0x0800aef1
 800ae50:	0800aef1 	.word	0x0800aef1
 800ae54:	0800aef1 	.word	0x0800aef1
 800ae58:	0800aef1 	.word	0x0800aef1
 800ae5c:	0800aef1 	.word	0x0800aef1
 800ae60:	0800aef1 	.word	0x0800aef1
 800ae64:	0800aef1 	.word	0x0800aef1
 800ae68:	0800aef1 	.word	0x0800aef1
 800ae6c:	0800aef1 	.word	0x0800aef1
 800ae70:	0800aee3 	.word	0x0800aee3
 800ae74:	2b40      	cmp	r3, #64	@ 0x40
 800ae76:	d037      	beq.n	800aee8 <UART_SetConfig+0xc44>
 800ae78:	e03a      	b.n	800aef0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae7a:	f7f9 fed9 	bl	8004c30 <HAL_RCC_GetPCLK1Freq>
 800ae7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae80:	e03c      	b.n	800aefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae82:	f7f9 feeb 	bl	8004c5c <HAL_RCC_GetPCLK2Freq>
 800ae86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae88:	e038      	b.n	800aefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fb fd82 	bl	8006998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae98:	e030      	b.n	800aefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae9a:	f107 0318 	add.w	r3, r7, #24
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fb fece 	bl	8006c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea8:	e028      	b.n	800aefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeaa:	4b09      	ldr	r3, [pc, #36]	@ (800aed0 <UART_SetConfig+0xc2c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0320 	and.w	r3, r3, #32
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d012      	beq.n	800aedc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aeb6:	4b06      	ldr	r3, [pc, #24]	@ (800aed0 <UART_SetConfig+0xc2c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	08db      	lsrs	r3, r3, #3
 800aebc:	f003 0303 	and.w	r3, r3, #3
 800aec0:	4a04      	ldr	r2, [pc, #16]	@ (800aed4 <UART_SetConfig+0xc30>)
 800aec2:	fa22 f303 	lsr.w	r3, r2, r3
 800aec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aec8:	e018      	b.n	800aefc <UART_SetConfig+0xc58>
 800aeca:	bf00      	nop
 800aecc:	08010d34 	.word	0x08010d34
 800aed0:	58024400 	.word	0x58024400
 800aed4:	03d09000 	.word	0x03d09000
 800aed8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800aedc:	4b24      	ldr	r3, [pc, #144]	@ (800af70 <UART_SetConfig+0xccc>)
 800aede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee0:	e00c      	b.n	800aefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aee2:	4b24      	ldr	r3, [pc, #144]	@ (800af74 <UART_SetConfig+0xcd0>)
 800aee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee6:	e009      	b.n	800aefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aee8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aeec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeee:	e005      	b.n	800aefc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aefa:	bf00      	nop
    }

    if (pclk != 0U)
 800aefc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d021      	beq.n	800af46 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af06:	4a1c      	ldr	r2, [pc, #112]	@ (800af78 <UART_SetConfig+0xcd4>)
 800af08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af0c:	461a      	mov	r2, r3
 800af0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af10:	fbb3 f2f2 	udiv	r2, r3, r2
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	085b      	lsrs	r3, r3, #1
 800af1a:	441a      	add	r2, r3
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	fbb2 f3f3 	udiv	r3, r2, r3
 800af24:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af28:	2b0f      	cmp	r3, #15
 800af2a:	d909      	bls.n	800af40 <UART_SetConfig+0xc9c>
 800af2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af32:	d205      	bcs.n	800af40 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af36:	b29a      	uxth	r2, r3
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	60da      	str	r2, [r3, #12]
 800af3e:	e002      	b.n	800af46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2201      	movs	r2, #1
 800af4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2201      	movs	r2, #1
 800af52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2200      	movs	r2, #0
 800af5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	2200      	movs	r2, #0
 800af60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800af62:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800af66:	4618      	mov	r0, r3
 800af68:	3748      	adds	r7, #72	@ 0x48
 800af6a:	46bd      	mov	sp, r7
 800af6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af70:	03d09000 	.word	0x03d09000
 800af74:	003d0900 	.word	0x003d0900
 800af78:	08010d34 	.word	0x08010d34

0800af7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af88:	f003 0308 	and.w	r3, r3, #8
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	430a      	orrs	r2, r1
 800afa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00a      	beq.n	800afc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	430a      	orrs	r2, r1
 800afc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afcc:	f003 0302 	and.w	r3, r3, #2
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	430a      	orrs	r2, r1
 800afe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afee:	f003 0304 	and.w	r3, r3, #4
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00a      	beq.n	800b00c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	430a      	orrs	r2, r1
 800b00a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b010:	f003 0310 	and.w	r3, r3, #16
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00a      	beq.n	800b02e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	430a      	orrs	r2, r1
 800b02c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b032:	f003 0320 	and.w	r3, r3, #32
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00a      	beq.n	800b050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	430a      	orrs	r2, r1
 800b04e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d01a      	beq.n	800b092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	430a      	orrs	r2, r1
 800b070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b07a:	d10a      	bne.n	800b092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	430a      	orrs	r2, r1
 800b090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00a      	beq.n	800b0b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	605a      	str	r2, [r3, #4]
  }
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b098      	sub	sp, #96	@ 0x60
 800b0c4:	af02      	add	r7, sp, #8
 800b0c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0d0:	f7f7 f986 	bl	80023e0 <HAL_GetTick>
 800b0d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 0308 	and.w	r3, r3, #8
 800b0e0:	2b08      	cmp	r3, #8
 800b0e2:	d12f      	bne.n	800b144 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f88e 	bl	800b214 <UART_WaitOnFlagUntilTimeout>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d022      	beq.n	800b144 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b106:	e853 3f00 	ldrex	r3, [r3]
 800b10a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b10e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b112:	653b      	str	r3, [r7, #80]	@ 0x50
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	461a      	mov	r2, r3
 800b11a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b11c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b11e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b124:	e841 2300 	strex	r3, r2, [r1]
 800b128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b12a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1e6      	bne.n	800b0fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2220      	movs	r2, #32
 800b134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b140:	2303      	movs	r3, #3
 800b142:	e063      	b.n	800b20c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0304 	and.w	r3, r3, #4
 800b14e:	2b04      	cmp	r3, #4
 800b150:	d149      	bne.n	800b1e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b152:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b15a:	2200      	movs	r2, #0
 800b15c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f857 	bl	800b214 <UART_WaitOnFlagUntilTimeout>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d03c      	beq.n	800b1e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b174:	e853 3f00 	ldrex	r3, [r3]
 800b178:	623b      	str	r3, [r7, #32]
   return(result);
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	461a      	mov	r2, r3
 800b188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b18a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b18c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b192:	e841 2300 	strex	r3, r2, [r1]
 800b196:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1e6      	bne.n	800b16c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	e853 3f00 	ldrex	r3, [r3]
 800b1ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f023 0301 	bic.w	r3, r3, #1
 800b1b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3308      	adds	r3, #8
 800b1bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1be:	61fa      	str	r2, [r7, #28]
 800b1c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	69b9      	ldr	r1, [r7, #24]
 800b1c4:	69fa      	ldr	r2, [r7, #28]
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	617b      	str	r3, [r7, #20]
   return(result);
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e5      	bne.n	800b19e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e012      	b.n	800b20c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3758      	adds	r7, #88	@ 0x58
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	603b      	str	r3, [r7, #0]
 800b220:	4613      	mov	r3, r2
 800b222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b224:	e04f      	b.n	800b2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22c:	d04b      	beq.n	800b2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b22e:	f7f7 f8d7 	bl	80023e0 <HAL_GetTick>
 800b232:	4602      	mov	r2, r0
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d302      	bcc.n	800b244 <UART_WaitOnFlagUntilTimeout+0x30>
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b244:	2303      	movs	r3, #3
 800b246:	e04e      	b.n	800b2e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	2b00      	cmp	r3, #0
 800b254:	d037      	beq.n	800b2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2b80      	cmp	r3, #128	@ 0x80
 800b25a:	d034      	beq.n	800b2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2b40      	cmp	r3, #64	@ 0x40
 800b260:	d031      	beq.n	800b2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	f003 0308 	and.w	r3, r3, #8
 800b26c:	2b08      	cmp	r3, #8
 800b26e:	d110      	bne.n	800b292 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2208      	movs	r2, #8
 800b276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f000 f839 	bl	800b2f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2208      	movs	r2, #8
 800b282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	e029      	b.n	800b2e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	69db      	ldr	r3, [r3, #28]
 800b298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b29c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2a0:	d111      	bne.n	800b2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f000 f81f 	bl	800b2f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	e00f      	b.n	800b2e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69da      	ldr	r2, [r3, #28]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	bf0c      	ite	eq
 800b2d6:	2301      	moveq	r3, #1
 800b2d8:	2300      	movne	r3, #0
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	461a      	mov	r2, r3
 800b2de:	79fb      	ldrb	r3, [r7, #7]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d0a0      	beq.n	800b226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b095      	sub	sp, #84	@ 0x54
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b300:	e853 3f00 	ldrex	r3, [r3]
 800b304:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b30c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	461a      	mov	r2, r3
 800b314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b316:	643b      	str	r3, [r7, #64]	@ 0x40
 800b318:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b31c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b31e:	e841 2300 	strex	r3, r2, [r1]
 800b322:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1e6      	bne.n	800b2f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3308      	adds	r3, #8
 800b330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	e853 3f00 	ldrex	r3, [r3]
 800b338:	61fb      	str	r3, [r7, #28]
   return(result);
 800b33a:	69fa      	ldr	r2, [r7, #28]
 800b33c:	4b1e      	ldr	r3, [pc, #120]	@ (800b3b8 <UART_EndRxTransfer+0xc8>)
 800b33e:	4013      	ands	r3, r2
 800b340:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3308      	adds	r3, #8
 800b348:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b34a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b34c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b352:	e841 2300 	strex	r3, r2, [r1]
 800b356:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1e5      	bne.n	800b32a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b362:	2b01      	cmp	r3, #1
 800b364:	d118      	bne.n	800b398 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	e853 3f00 	ldrex	r3, [r3]
 800b372:	60bb      	str	r3, [r7, #8]
   return(result);
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f023 0310 	bic.w	r3, r3, #16
 800b37a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	461a      	mov	r2, r3
 800b382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b384:	61bb      	str	r3, [r7, #24]
 800b386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b388:	6979      	ldr	r1, [r7, #20]
 800b38a:	69ba      	ldr	r2, [r7, #24]
 800b38c:	e841 2300 	strex	r3, r2, [r1]
 800b390:	613b      	str	r3, [r7, #16]
   return(result);
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1e6      	bne.n	800b366 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2220      	movs	r2, #32
 800b39c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b3ac:	bf00      	nop
 800b3ae:	3754      	adds	r7, #84	@ 0x54
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	effffffe 	.word	0xeffffffe

0800b3bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f7fe ff4c 	bl	800a278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3e0:	bf00      	nop
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	e853 3f00 	ldrex	r3, [r3]
 800b3fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b404:	61fb      	str	r3, [r7, #28]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	461a      	mov	r2, r3
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	61bb      	str	r3, [r7, #24]
 800b410:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b412:	6979      	ldr	r1, [r7, #20]
 800b414:	69ba      	ldr	r2, [r7, #24]
 800b416:	e841 2300 	strex	r3, r2, [r1]
 800b41a:	613b      	str	r3, [r7, #16]
   return(result);
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1e6      	bne.n	800b3f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2220      	movs	r2, #32
 800b426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7fe ff17 	bl	800a264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b436:	bf00      	nop
 800b438:	3720      	adds	r7, #32
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b446:	bf00      	nop
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b452:	b480      	push	{r7}
 800b454:	b083      	sub	sp, #12
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b45a:	bf00      	nop
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b46e:	bf00      	nop
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b47a:	b480      	push	{r7}
 800b47c:	b085      	sub	sp, #20
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d101      	bne.n	800b490 <HAL_UARTEx_DisableFifoMode+0x16>
 800b48c:	2302      	movs	r3, #2
 800b48e:	e027      	b.n	800b4e0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2224      	movs	r2, #36	@ 0x24
 800b49c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f022 0201 	bic.w	r2, r2, #1
 800b4b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b4be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d101      	bne.n	800b504 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b500:	2302      	movs	r3, #2
 800b502:	e02d      	b.n	800b560 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2224      	movs	r2, #36	@ 0x24
 800b510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f022 0201 	bic.w	r2, r2, #1
 800b52a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	430a      	orrs	r2, r1
 800b53e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f84f 	bl	800b5e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2220      	movs	r2, #32
 800b552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d101      	bne.n	800b580 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b57c:	2302      	movs	r3, #2
 800b57e:	e02d      	b.n	800b5dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2224      	movs	r2, #36	@ 0x24
 800b58c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f022 0201 	bic.w	r2, r2, #1
 800b5a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	430a      	orrs	r2, r1
 800b5ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f811 	bl	800b5e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d108      	bne.n	800b606 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b604:	e031      	b.n	800b66a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b606:	2310      	movs	r3, #16
 800b608:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b60a:	2310      	movs	r3, #16
 800b60c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	0e5b      	lsrs	r3, r3, #25
 800b616:	b2db      	uxtb	r3, r3
 800b618:	f003 0307 	and.w	r3, r3, #7
 800b61c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	0f5b      	lsrs	r3, r3, #29
 800b626:	b2db      	uxtb	r3, r3
 800b628:	f003 0307 	and.w	r3, r3, #7
 800b62c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	7b3a      	ldrb	r2, [r7, #12]
 800b632:	4911      	ldr	r1, [pc, #68]	@ (800b678 <UARTEx_SetNbDataToProcess+0x94>)
 800b634:	5c8a      	ldrb	r2, [r1, r2]
 800b636:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b63a:	7b3a      	ldrb	r2, [r7, #12]
 800b63c:	490f      	ldr	r1, [pc, #60]	@ (800b67c <UARTEx_SetNbDataToProcess+0x98>)
 800b63e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b640:	fb93 f3f2 	sdiv	r3, r3, r2
 800b644:	b29a      	uxth	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	7b7a      	ldrb	r2, [r7, #13]
 800b650:	4909      	ldr	r1, [pc, #36]	@ (800b678 <UARTEx_SetNbDataToProcess+0x94>)
 800b652:	5c8a      	ldrb	r2, [r1, r2]
 800b654:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b658:	7b7a      	ldrb	r2, [r7, #13]
 800b65a:	4908      	ldr	r1, [pc, #32]	@ (800b67c <UARTEx_SetNbDataToProcess+0x98>)
 800b65c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b65e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b662:	b29a      	uxth	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b66a:	bf00      	nop
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	08010d4c 	.word	0x08010d4c
 800b67c:	08010d54 	.word	0x08010d54

0800b680 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b680:	b084      	sub	sp, #16
 800b682:	b480      	push	{r7}
 800b684:	b085      	sub	sp, #20
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	f107 001c 	add.w	r0, r7, #28
 800b68e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b692:	2300      	movs	r3, #0
 800b694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b696:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b698:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b69a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b69e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b6a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b6a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	4b07      	ldr	r3, [pc, #28]	@ (800b6d0 <SDMMC_Init+0x50>)
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	431a      	orrs	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	b004      	add	sp, #16
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	ffc02c00 	.word	0xffc02c00

0800b6d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b083      	sub	sp, #12
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f043 0203 	orr.w	r2, r3, #3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 0303 	and.w	r3, r3, #3
}
 800b742:	4618      	mov	r0, r3
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
	...

0800b750 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b76e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b774:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b77a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4313      	orrs	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68da      	ldr	r2, [r3, #12]
 800b786:	4b06      	ldr	r3, [pc, #24]	@ (800b7a0 <SDMMC_SendCommand+0x50>)
 800b788:	4013      	ands	r3, r2
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	431a      	orrs	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	fffee0c0 	.word	0xfffee0c0

0800b7a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	b2db      	uxtb	r3, r3
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	370c      	adds	r7, #12
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b085      	sub	sp, #20
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3314      	adds	r3, #20
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b80a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b810:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b816:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b822:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	431a      	orrs	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b82e:	2300      	movs	r3, #0

}
 800b830:	4618      	mov	r0, r3
 800b832:	3714      	adds	r7, #20
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b088      	sub	sp, #32
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b84a:	2310      	movs	r3, #16
 800b84c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b84e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b854:	2300      	movs	r3, #0
 800b856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b85c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b85e:	f107 0308 	add.w	r3, r7, #8
 800b862:	4619      	mov	r1, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f7ff ff73 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b86a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b86e:	2110      	movs	r1, #16
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fa5f 	bl	800bd34 <SDMMC_GetCmdResp1>
 800b876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b878:	69fb      	ldr	r3, [r7, #28]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3720      	adds	r7, #32
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b088      	sub	sp, #32
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b890:	2311      	movs	r3, #17
 800b892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b89a:	2300      	movs	r3, #0
 800b89c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b89e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8a4:	f107 0308 	add.w	r3, r7, #8
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff ff50 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b8b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8b4:	2111      	movs	r1, #17
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fa3c 	bl	800bd34 <SDMMC_GetCmdResp1>
 800b8bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8be:	69fb      	ldr	r3, [r7, #28]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3720      	adds	r7, #32
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b088      	sub	sp, #32
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b8d6:	2312      	movs	r3, #18
 800b8d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b8de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ea:	f107 0308 	add.w	r3, r7, #8
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7ff ff2d 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b8f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8fa:	2112      	movs	r1, #18
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fa19 	bl	800bd34 <SDMMC_GetCmdResp1>
 800b902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b904:	69fb      	ldr	r3, [r7, #28]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3720      	adds	r7, #32
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b088      	sub	sp, #32
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
 800b916:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b91c:	2318      	movs	r3, #24
 800b91e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b926:	2300      	movs	r3, #0
 800b928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b92a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b92e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b930:	f107 0308 	add.w	r3, r7, #8
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff ff0a 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b93c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b940:	2118      	movs	r1, #24
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f9f6 	bl	800bd34 <SDMMC_GetCmdResp1>
 800b948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b94a:	69fb      	ldr	r3, [r7, #28]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3720      	adds	r7, #32
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b088      	sub	sp, #32
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b962:	2319      	movs	r3, #25
 800b964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b966:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b96a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b96c:	2300      	movs	r3, #0
 800b96e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b974:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b976:	f107 0308 	add.w	r3, r7, #8
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f7ff fee7 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b982:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b986:	2119      	movs	r1, #25
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f9d3 	bl	800bd34 <SDMMC_GetCmdResp1>
 800b98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b990:	69fb      	ldr	r3, [r7, #28]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3720      	adds	r7, #32
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
	...

0800b99c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b9a8:	230c      	movs	r3, #12
 800b9aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b9b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b9ba:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9d4:	f107 0308 	add.w	r3, r7, #8
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7ff feb8 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b9e0:	4a0b      	ldr	r2, [pc, #44]	@ (800ba10 <SDMMC_CmdStopTransfer+0x74>)
 800b9e2:	210c      	movs	r1, #12
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 f9a5 	bl	800bd34 <SDMMC_GetCmdResp1>
 800b9ea:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9fe:	d101      	bne.n	800ba04 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ba00:	2300      	movs	r3, #0
 800ba02:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ba04:	69fb      	ldr	r3, [r7, #28]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3720      	adds	r7, #32
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	05f5e100 	.word	0x05f5e100

0800ba14 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ba22:	2307      	movs	r3, #7
 800ba24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba36:	f107 0308 	add.w	r3, r7, #8
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff fe87 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ba42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba46:	2107      	movs	r1, #7
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 f973 	bl	800bd34 <SDMMC_GetCmdResp1>
 800ba4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba50:	69fb      	ldr	r3, [r7, #28]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3720      	adds	r7, #32
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b088      	sub	sp, #32
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ba66:	2300      	movs	r3, #0
 800ba68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba78:	f107 0308 	add.w	r3, r7, #8
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7ff fe66 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fb97 	bl	800c1b8 <SDMMC_GetCmdError>
 800ba8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba8c:	69fb      	ldr	r3, [r7, #28]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3720      	adds	r7, #32
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b088      	sub	sp, #32
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ba9e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800baa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800baa4:	2308      	movs	r3, #8
 800baa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800baac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baae:	2300      	movs	r3, #0
 800bab0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bab6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bab8:	f107 0308 	add.w	r3, r7, #8
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7ff fe46 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fb29 	bl	800c11c <SDMMC_GetCmdResp7>
 800baca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bacc:	69fb      	ldr	r3, [r7, #28]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3720      	adds	r7, #32
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b088      	sub	sp, #32
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bae4:	2337      	movs	r3, #55	@ 0x37
 800bae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800baec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baee:	2300      	movs	r3, #0
 800baf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800baf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baf8:	f107 0308 	add.w	r3, r7, #8
 800bafc:	4619      	mov	r1, r3
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff fe26 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bb04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb08:	2137      	movs	r1, #55	@ 0x37
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f912 	bl	800bd34 <SDMMC_GetCmdResp1>
 800bb10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb12:	69fb      	ldr	r3, [r7, #28]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3720      	adds	r7, #32
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b088      	sub	sp, #32
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bb2a:	2329      	movs	r3, #41	@ 0x29
 800bb2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb34:	2300      	movs	r3, #0
 800bb36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb3e:	f107 0308 	add.w	r3, r7, #8
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7ff fe03 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fa2e 	bl	800bfac <SDMMC_GetCmdResp3>
 800bb50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb52:	69fb      	ldr	r3, [r7, #28]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3720      	adds	r7, #32
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b088      	sub	sp, #32
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bb6a:	2306      	movs	r3, #6
 800bb6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb74:	2300      	movs	r3, #0
 800bb76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb7e:	f107 0308 	add.w	r3, r7, #8
 800bb82:	4619      	mov	r1, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f7ff fde3 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bb8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb8e:	2106      	movs	r1, #6
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f8cf 	bl	800bd34 <SDMMC_GetCmdResp1>
 800bb96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb98:	69fb      	ldr	r3, [r7, #28]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3720      	adds	r7, #32
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b088      	sub	sp, #32
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bbae:	2333      	movs	r3, #51	@ 0x33
 800bbb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bbb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bbc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbc2:	f107 0308 	add.w	r3, r7, #8
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7ff fdc1 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bbce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbd2:	2133      	movs	r1, #51	@ 0x33
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f8ad 	bl	800bd34 <SDMMC_GetCmdResp1>
 800bbda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbdc:	69fb      	ldr	r3, [r7, #28]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3720      	adds	r7, #32
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b088      	sub	sp, #32
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bbf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800bbfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc06:	f107 0308 	add.w	r3, r7, #8
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7ff fd9f 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f980 	bl	800bf18 <SDMMC_GetCmdResp2>
 800bc18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc1a:	69fb      	ldr	r3, [r7, #28]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3720      	adds	r7, #32
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b088      	sub	sp, #32
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bc32:	2309      	movs	r3, #9
 800bc34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bc36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800bc3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc46:	f107 0308 	add.w	r3, r7, #8
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7ff fd7f 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f960 	bl	800bf18 <SDMMC_GetCmdResp2>
 800bc58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc5a:	69fb      	ldr	r3, [r7, #28]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3720      	adds	r7, #32
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bc72:	2303      	movs	r3, #3
 800bc74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc86:	f107 0308 	add.w	r3, r7, #8
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7ff fd5f 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	2103      	movs	r1, #3
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f9c8 	bl	800c02c <SDMMC_GetCmdResp6>
 800bc9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc9e:	69fb      	ldr	r3, [r7, #28]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3720      	adds	r7, #32
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b088      	sub	sp, #32
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bcb6:	230d      	movs	r3, #13
 800bcb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bcbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcca:	f107 0308 	add.w	r3, r7, #8
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff fd3d 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bcd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcda:	210d      	movs	r1, #13
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f829 	bl	800bd34 <SDMMC_GetCmdResp1>
 800bce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bce4:	69fb      	ldr	r3, [r7, #28]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3720      	adds	r7, #32
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b088      	sub	sp, #32
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bcfa:	230d      	movs	r3, #13
 800bcfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd04:	2300      	movs	r3, #0
 800bd06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd0e:	f107 0308 	add.w	r3, r7, #8
 800bd12:	4619      	mov	r1, r3
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f7ff fd1b 	bl	800b750 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bd1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd1e:	210d      	movs	r1, #13
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f807 	bl	800bd34 <SDMMC_GetCmdResp1>
 800bd26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd28:	69fb      	ldr	r3, [r7, #28]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3720      	adds	r7, #32
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd42:	4b70      	ldr	r3, [pc, #448]	@ (800bf04 <SDMMC_GetCmdResp1+0x1d0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a70      	ldr	r2, [pc, #448]	@ (800bf08 <SDMMC_GetCmdResp1+0x1d4>)
 800bd48:	fba2 2303 	umull	r2, r3, r2, r3
 800bd4c:	0a5a      	lsrs	r2, r3, #9
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	fb02 f303 	mul.w	r3, r2, r3
 800bd54:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	1e5a      	subs	r2, r3, #1
 800bd5a:	61fa      	str	r2, [r7, #28]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bd64:	e0c9      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd6a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	4b67      	ldr	r3, [pc, #412]	@ (800bf0c <SDMMC_GetCmdResp1+0x1d8>)
 800bd70:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0ef      	beq.n	800bd56 <SDMMC_GetCmdResp1+0x22>
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1ea      	bne.n	800bd56 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd84:	f003 0304 	and.w	r3, r3, #4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d004      	beq.n	800bd96 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2204      	movs	r2, #4
 800bd90:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd92:	2304      	movs	r3, #4
 800bd94:	e0b1      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d004      	beq.n	800bdac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2201      	movs	r2, #1
 800bda6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e0a6      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4a58      	ldr	r2, [pc, #352]	@ (800bf10 <SDMMC_GetCmdResp1+0x1dc>)
 800bdb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f7ff fcf6 	bl	800b7a4 <SDMMC_GetCommandResponse>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	461a      	mov	r2, r3
 800bdbc:	7afb      	ldrb	r3, [r7, #11]
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d001      	beq.n	800bdc6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e099      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7ff fcf8 	bl	800b7be <SDMMC_GetResponse>
 800bdce:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bdd0:	697a      	ldr	r2, [r7, #20]
 800bdd2:	4b50      	ldr	r3, [pc, #320]	@ (800bf14 <SDMMC_GetCmdResp1+0x1e0>)
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d101      	bne.n	800bdde <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bdda:	2300      	movs	r3, #0
 800bddc:	e08d      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	da02      	bge.n	800bdea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bde4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bde8:	e087      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bdf4:	2340      	movs	r3, #64	@ 0x40
 800bdf6:	e080      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800be02:	2380      	movs	r3, #128	@ 0x80
 800be04:	e079      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d002      	beq.n	800be16 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800be10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be14:	e071      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be24:	e069      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be34:	e061      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d002      	beq.n	800be46 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800be44:	e059      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be54:	e051      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800be64:	e049      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800be74:	e041      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800be80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be84:	e039      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d002      	beq.n	800be96 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800be94:	e031      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bea0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800bea4:	e029      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d002      	beq.n	800beb6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800beb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800beb4:	e021      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bec0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bec4:	e019      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800becc:	2b00      	cmp	r3, #0
 800bece:	d002      	beq.n	800bed6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bed0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800bed4:	e011      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bee0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bee4:	e009      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	f003 0308 	and.w	r3, r3, #8
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bef0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800bef4:	e001      	b.n	800befa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bef6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800befa:	4618      	mov	r0, r3
 800befc:	3720      	adds	r7, #32
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	24000000 	.word	0x24000000
 800bf08:	10624dd3 	.word	0x10624dd3
 800bf0c:	00200045 	.word	0x00200045
 800bf10:	002000c5 	.word	0x002000c5
 800bf14:	fdffe008 	.word	0xfdffe008

0800bf18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf20:	4b1f      	ldr	r3, [pc, #124]	@ (800bfa0 <SDMMC_GetCmdResp2+0x88>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a1f      	ldr	r2, [pc, #124]	@ (800bfa4 <SDMMC_GetCmdResp2+0x8c>)
 800bf26:	fba2 2303 	umull	r2, r3, r2, r3
 800bf2a:	0a5b      	lsrs	r3, r3, #9
 800bf2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf30:	fb02 f303 	mul.w	r3, r2, r3
 800bf34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	1e5a      	subs	r2, r3, #1
 800bf3a:	60fa      	str	r2, [r7, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d102      	bne.n	800bf46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bf44:	e026      	b.n	800bf94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf4a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d0ef      	beq.n	800bf36 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1ea      	bne.n	800bf36 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf64:	f003 0304 	and.w	r3, r3, #4
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d004      	beq.n	800bf76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2204      	movs	r2, #4
 800bf70:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf72:	2304      	movs	r3, #4
 800bf74:	e00e      	b.n	800bf94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf7a:	f003 0301 	and.w	r3, r3, #1
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d004      	beq.n	800bf8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e003      	b.n	800bf94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a06      	ldr	r2, [pc, #24]	@ (800bfa8 <SDMMC_GetCmdResp2+0x90>)
 800bf90:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3714      	adds	r7, #20
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	24000000 	.word	0x24000000
 800bfa4:	10624dd3 	.word	0x10624dd3
 800bfa8:	002000c5 	.word	0x002000c5

0800bfac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bfb4:	4b1a      	ldr	r3, [pc, #104]	@ (800c020 <SDMMC_GetCmdResp3+0x74>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a1a      	ldr	r2, [pc, #104]	@ (800c024 <SDMMC_GetCmdResp3+0x78>)
 800bfba:	fba2 2303 	umull	r2, r3, r2, r3
 800bfbe:	0a5b      	lsrs	r3, r3, #9
 800bfc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfc4:	fb02 f303 	mul.w	r3, r2, r3
 800bfc8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	1e5a      	subs	r2, r3, #1
 800bfce:	60fa      	str	r2, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfd4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bfd8:	e01b      	b.n	800c012 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfde:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0ef      	beq.n	800bfca <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1ea      	bne.n	800bfca <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bff8:	f003 0304 	and.w	r3, r3, #4
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d004      	beq.n	800c00a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2204      	movs	r2, #4
 800c004:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c006:	2304      	movs	r3, #4
 800c008:	e003      	b.n	800c012 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a06      	ldr	r2, [pc, #24]	@ (800c028 <SDMMC_GetCmdResp3+0x7c>)
 800c00e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	24000000 	.word	0x24000000
 800c024:	10624dd3 	.word	0x10624dd3
 800c028:	002000c5 	.word	0x002000c5

0800c02c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b088      	sub	sp, #32
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	460b      	mov	r3, r1
 800c036:	607a      	str	r2, [r7, #4]
 800c038:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c03a:	4b35      	ldr	r3, [pc, #212]	@ (800c110 <SDMMC_GetCmdResp6+0xe4>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a35      	ldr	r2, [pc, #212]	@ (800c114 <SDMMC_GetCmdResp6+0xe8>)
 800c040:	fba2 2303 	umull	r2, r3, r2, r3
 800c044:	0a5b      	lsrs	r3, r3, #9
 800c046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c04a:	fb02 f303 	mul.w	r3, r2, r3
 800c04e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	1e5a      	subs	r2, r3, #1
 800c054:	61fa      	str	r2, [r7, #28]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d102      	bne.n	800c060 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c05a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c05e:	e052      	b.n	800c106 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c064:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d0ef      	beq.n	800c050 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1ea      	bne.n	800c050 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c07e:	f003 0304 	and.w	r3, r3, #4
 800c082:	2b00      	cmp	r3, #0
 800c084:	d004      	beq.n	800c090 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2204      	movs	r2, #4
 800c08a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c08c:	2304      	movs	r3, #4
 800c08e:	e03a      	b.n	800c106 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c094:	f003 0301 	and.w	r3, r3, #1
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e02f      	b.n	800c106 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f7ff fb7c 	bl	800b7a4 <SDMMC_GetCommandResponse>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	7afb      	ldrb	r3, [r7, #11]
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d001      	beq.n	800c0ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e025      	b.n	800c106 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	4a16      	ldr	r2, [pc, #88]	@ (800c118 <SDMMC_GetCmdResp6+0xec>)
 800c0be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f7ff fb7b 	bl	800b7be <SDMMC_GetResponse>
 800c0c8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d106      	bne.n	800c0e2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	0c1b      	lsrs	r3, r3, #16
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	e011      	b.n	800c106 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d002      	beq.n	800c0f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c0f0:	e009      	b.n	800c106 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c100:	e001      	b.n	800c106 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c102:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c106:	4618      	mov	r0, r3
 800c108:	3720      	adds	r7, #32
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	24000000 	.word	0x24000000
 800c114:	10624dd3 	.word	0x10624dd3
 800c118:	002000c5 	.word	0x002000c5

0800c11c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c124:	4b22      	ldr	r3, [pc, #136]	@ (800c1b0 <SDMMC_GetCmdResp7+0x94>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a22      	ldr	r2, [pc, #136]	@ (800c1b4 <SDMMC_GetCmdResp7+0x98>)
 800c12a:	fba2 2303 	umull	r2, r3, r2, r3
 800c12e:	0a5b      	lsrs	r3, r3, #9
 800c130:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c134:	fb02 f303 	mul.w	r3, r2, r3
 800c138:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	1e5a      	subs	r2, r3, #1
 800c13e:	60fa      	str	r2, [r7, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d102      	bne.n	800c14a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c144:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c148:	e02c      	b.n	800c1a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c14e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c156:	2b00      	cmp	r3, #0
 800c158:	d0ef      	beq.n	800c13a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1ea      	bne.n	800c13a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c168:	f003 0304 	and.w	r3, r3, #4
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d004      	beq.n	800c17a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2204      	movs	r2, #4
 800c174:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c176:	2304      	movs	r3, #4
 800c178:	e014      	b.n	800c1a4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c17e:	f003 0301 	and.w	r3, r3, #1
 800c182:	2b00      	cmp	r3, #0
 800c184:	d004      	beq.n	800c190 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c18c:	2301      	movs	r3, #1
 800c18e:	e009      	b.n	800c1a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2240      	movs	r2, #64	@ 0x40
 800c1a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c1a2:	2300      	movs	r3, #0

}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	24000000 	.word	0x24000000
 800c1b4:	10624dd3 	.word	0x10624dd3

0800c1b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c1c0:	4b11      	ldr	r3, [pc, #68]	@ (800c208 <SDMMC_GetCmdError+0x50>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a11      	ldr	r2, [pc, #68]	@ (800c20c <SDMMC_GetCmdError+0x54>)
 800c1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ca:	0a5b      	lsrs	r3, r3, #9
 800c1cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1d0:	fb02 f303 	mul.w	r3, r2, r3
 800c1d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	1e5a      	subs	r2, r3, #1
 800c1da:	60fa      	str	r2, [r7, #12]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d102      	bne.n	800c1e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c1e4:	e009      	b.n	800c1fa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d0f1      	beq.n	800c1d6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4a06      	ldr	r2, [pc, #24]	@ (800c210 <SDMMC_GetCmdError+0x58>)
 800c1f6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	24000000 	.word	0x24000000
 800c20c:	10624dd3 	.word	0x10624dd3
 800c210:	002000c5 	.word	0x002000c5

0800c214 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c218:	4904      	ldr	r1, [pc, #16]	@ (800c22c <MX_FATFS_Init+0x18>)
 800c21a:	4805      	ldr	r0, [pc, #20]	@ (800c230 <MX_FATFS_Init+0x1c>)
 800c21c:	f000 fa8e 	bl	800c73c <FATFS_LinkDriver>
 800c220:	4603      	mov	r3, r0
 800c222:	461a      	mov	r2, r3
 800c224:	4b03      	ldr	r3, [pc, #12]	@ (800c234 <MX_FATFS_Init+0x20>)
 800c226:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c228:	bf00      	nop
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	240007f0 	.word	0x240007f0
 800c230:	08010d5c 	.word	0x08010d5c
 800c234:	240007ec 	.word	0x240007ec

0800c238 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c23e:	2300      	movs	r3, #0
 800c240:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c242:	f000 f885 	bl	800c350 <BSP_SD_IsDetected>
 800c246:	4603      	mov	r3, r0
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d001      	beq.n	800c250 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c24c:	2302      	movs	r3, #2
 800c24e:	e012      	b.n	800c276 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c250:	480b      	ldr	r0, [pc, #44]	@ (800c280 <BSP_SD_Init+0x48>)
 800c252:	f7fb fb5d 	bl	8007910 <HAL_SD_Init>
 800c256:	4603      	mov	r3, r0
 800c258:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d109      	bne.n	800c274 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c260:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c264:	4806      	ldr	r0, [pc, #24]	@ (800c280 <BSP_SD_Init+0x48>)
 800c266:	f7fc fa13 	bl	8008690 <HAL_SD_ConfigWideBusOperation>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c274:	79fb      	ldrb	r3, [r7, #7]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	24000314 	.word	0x24000314

0800c284 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	68f9      	ldr	r1, [r7, #12]
 800c29a:	4806      	ldr	r0, [pc, #24]	@ (800c2b4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c29c:	f7fb fc58 	bl	8007b50 <HAL_SD_ReadBlocks_DMA>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d001      	beq.n	800c2aa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	24000314 	.word	0x24000314

0800c2b8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	68f9      	ldr	r1, [r7, #12]
 800c2ce:	4806      	ldr	r0, [pc, #24]	@ (800c2e8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c2d0:	f7fb fce6 	bl	8007ca0 <HAL_SD_WriteBlocks_DMA>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3718      	adds	r7, #24
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	24000314 	.word	0x24000314

0800c2ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c2f0:	4805      	ldr	r0, [pc, #20]	@ (800c308 <BSP_SD_GetCardState+0x1c>)
 800c2f2:	f7fc fadf 	bl	80088b4 <HAL_SD_GetCardState>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	bf14      	ite	ne
 800c2fc:	2301      	movne	r3, #1
 800c2fe:	2300      	moveq	r3, #0
 800c300:	b2db      	uxtb	r3, r3
}
 800c302:	4618      	mov	r0, r3
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	24000314 	.word	0x24000314

0800c30c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	4803      	ldr	r0, [pc, #12]	@ (800c324 <BSP_SD_GetCardInfo+0x18>)
 800c318:	f7fc f98e 	bl	8008638 <HAL_SD_GetCardInfo>
}
 800c31c:	bf00      	nop
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	24000314 	.word	0x24000314

0800c328 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c330:	f000 f9a0 	bl	800c674 <BSP_SD_WriteCpltCallback>
}
 800c334:	bf00      	nop
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c344:	f000 f9a2 	bl	800c68c <BSP_SD_ReadCpltCallback>
}
 800c348:	bf00      	nop
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c356:	2301      	movs	r3, #1
 800c358:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c35a:	f000 f80b 	bl	800c374 <BSP_PlatformIsDetected>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d101      	bne.n	800c368 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c364:	2300      	movs	r3, #0
 800c366:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	b2db      	uxtb	r3, r3
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c37a:	2301      	movs	r3, #1
 800c37c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c37e:	2180      	movs	r1, #128	@ 0x80
 800c380:	4806      	ldr	r0, [pc, #24]	@ (800c39c <BSP_PlatformIsDetected+0x28>)
 800c382:	f7f7 f8f1 	bl	8003568 <HAL_GPIO_ReadPin>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d001      	beq.n	800c390 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c38c:	2300      	movs	r3, #0
 800c38e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c390:	79fb      	ldrb	r3, [r7, #7]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	58020800 	.word	0x58020800

0800c3a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c3a8:	f7f6 f81a 	bl	80023e0 <HAL_GetTick>
 800c3ac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c3ae:	e006      	b.n	800c3be <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c3b0:	f7ff ff9c 	bl	800c2ec <BSP_SD_GetCardState>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d101      	bne.n	800c3be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	e009      	b.n	800c3d2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c3be:	f7f6 f80f 	bl	80023e0 <HAL_GetTick>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	1ad3      	subs	r3, r2, r3
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d8f0      	bhi.n	800c3b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c3ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
	...

0800c3dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c414 <SD_CheckStatus+0x38>)
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c3ec:	f7ff ff7e 	bl	800c2ec <BSP_SD_GetCardState>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d107      	bne.n	800c406 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c3f6:	4b07      	ldr	r3, [pc, #28]	@ (800c414 <SD_CheckStatus+0x38>)
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	f023 0301 	bic.w	r3, r3, #1
 800c400:	b2da      	uxtb	r2, r3
 800c402:	4b04      	ldr	r3, [pc, #16]	@ (800c414 <SD_CheckStatus+0x38>)
 800c404:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c406:	4b03      	ldr	r3, [pc, #12]	@ (800c414 <SD_CheckStatus+0x38>)
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	b2db      	uxtb	r3, r3
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	2400000d 	.word	0x2400000d

0800c418 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c422:	f7ff ff09 	bl	800c238 <BSP_SD_Init>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d107      	bne.n	800c43c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c42c:	79fb      	ldrb	r3, [r7, #7]
 800c42e:	4618      	mov	r0, r3
 800c430:	f7ff ffd4 	bl	800c3dc <SD_CheckStatus>
 800c434:	4603      	mov	r3, r0
 800c436:	461a      	mov	r2, r3
 800c438:	4b04      	ldr	r3, [pc, #16]	@ (800c44c <SD_initialize+0x34>)
 800c43a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c43c:	4b03      	ldr	r3, [pc, #12]	@ (800c44c <SD_initialize+0x34>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	b2db      	uxtb	r3, r3
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	2400000d 	.word	0x2400000d

0800c450 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c45a:	79fb      	ldrb	r3, [r7, #7]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff ffbd 	bl	800c3dc <SD_CheckStatus>
 800c462:	4603      	mov	r3, r0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	60b9      	str	r1, [r7, #8]
 800c474:	607a      	str	r2, [r7, #4]
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	4603      	mov	r3, r0
 800c47a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c480:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c484:	f7ff ff8c 	bl	800c3a0 <SD_CheckStatusWithTimeout>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	da01      	bge.n	800c492 <SD_read+0x26>
  {
    return res;
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	e03b      	b.n	800c50a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c492:	683a      	ldr	r2, [r7, #0]
 800c494:	6879      	ldr	r1, [r7, #4]
 800c496:	68b8      	ldr	r0, [r7, #8]
 800c498:	f7ff fef4 	bl	800c284 <BSP_SD_ReadBlocks_DMA>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d132      	bne.n	800c508 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c4a2:	4b1c      	ldr	r3, [pc, #112]	@ (800c514 <SD_read+0xa8>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c4a8:	f7f5 ff9a 	bl	80023e0 <HAL_GetTick>
 800c4ac:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c4ae:	bf00      	nop
 800c4b0:	4b18      	ldr	r3, [pc, #96]	@ (800c514 <SD_read+0xa8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d108      	bne.n	800c4ca <SD_read+0x5e>
 800c4b8:	f7f5 ff92 	bl	80023e0 <HAL_GetTick>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d9f2      	bls.n	800c4b0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c4ca:	4b12      	ldr	r3, [pc, #72]	@ (800c514 <SD_read+0xa8>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d102      	bne.n	800c4d8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	75fb      	strb	r3, [r7, #23]
 800c4d6:	e017      	b.n	800c508 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c514 <SD_read+0xa8>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c4de:	f7f5 ff7f 	bl	80023e0 <HAL_GetTick>
 800c4e2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c4e4:	e007      	b.n	800c4f6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c4e6:	f7ff ff01 	bl	800c2ec <BSP_SD_GetCardState>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d102      	bne.n	800c4f6 <SD_read+0x8a>
          {
            res = RES_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c4f4:	e008      	b.n	800c508 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c4f6:	f7f5 ff73 	bl	80023e0 <HAL_GetTick>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c504:	4293      	cmp	r3, r2
 800c506:	d9ee      	bls.n	800c4e6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c508:	7dfb      	ldrb	r3, [r7, #23]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	240007f8 	.word	0x240007f8

0800c518 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60b9      	str	r1, [r7, #8]
 800c520:	607a      	str	r2, [r7, #4]
 800c522:	603b      	str	r3, [r7, #0]
 800c524:	4603      	mov	r3, r0
 800c526:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c528:	2301      	movs	r3, #1
 800c52a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c52c:	4b24      	ldr	r3, [pc, #144]	@ (800c5c0 <SD_write+0xa8>)
 800c52e:	2200      	movs	r2, #0
 800c530:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c532:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c536:	f7ff ff33 	bl	800c3a0 <SD_CheckStatusWithTimeout>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	da01      	bge.n	800c544 <SD_write+0x2c>
  {
    return res;
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	e038      	b.n	800c5b6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	6879      	ldr	r1, [r7, #4]
 800c548:	68b8      	ldr	r0, [r7, #8]
 800c54a:	f7ff feb5 	bl	800c2b8 <BSP_SD_WriteBlocks_DMA>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d12f      	bne.n	800c5b4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c554:	f7f5 ff44 	bl	80023e0 <HAL_GetTick>
 800c558:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c55a:	bf00      	nop
 800c55c:	4b18      	ldr	r3, [pc, #96]	@ (800c5c0 <SD_write+0xa8>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d108      	bne.n	800c576 <SD_write+0x5e>
 800c564:	f7f5 ff3c 	bl	80023e0 <HAL_GetTick>
 800c568:	4602      	mov	r2, r0
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c572:	4293      	cmp	r3, r2
 800c574:	d9f2      	bls.n	800c55c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c576:	4b12      	ldr	r3, [pc, #72]	@ (800c5c0 <SD_write+0xa8>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d102      	bne.n	800c584 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	75fb      	strb	r3, [r7, #23]
 800c582:	e017      	b.n	800c5b4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c584:	4b0e      	ldr	r3, [pc, #56]	@ (800c5c0 <SD_write+0xa8>)
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c58a:	f7f5 ff29 	bl	80023e0 <HAL_GetTick>
 800c58e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c590:	e007      	b.n	800c5a2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c592:	f7ff feab 	bl	800c2ec <BSP_SD_GetCardState>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d102      	bne.n	800c5a2 <SD_write+0x8a>
          {
            res = RES_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	75fb      	strb	r3, [r7, #23]
            break;
 800c5a0:	e008      	b.n	800c5b4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c5a2:	f7f5 ff1d 	bl	80023e0 <HAL_GetTick>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d9ee      	bls.n	800c592 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3718      	adds	r7, #24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	240007f4 	.word	0x240007f4

0800c5c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08c      	sub	sp, #48	@ 0x30
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	603a      	str	r2, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c5da:	4b25      	ldr	r3, [pc, #148]	@ (800c670 <SD_ioctl+0xac>)
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	f003 0301 	and.w	r3, r3, #1
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d001      	beq.n	800c5ec <SD_ioctl+0x28>
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	e03c      	b.n	800c666 <SD_ioctl+0xa2>

  switch (cmd)
 800c5ec:	79bb      	ldrb	r3, [r7, #6]
 800c5ee:	2b03      	cmp	r3, #3
 800c5f0:	d834      	bhi.n	800c65c <SD_ioctl+0x98>
 800c5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f8 <SD_ioctl+0x34>)
 800c5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f8:	0800c609 	.word	0x0800c609
 800c5fc:	0800c611 	.word	0x0800c611
 800c600:	0800c629 	.word	0x0800c629
 800c604:	0800c643 	.word	0x0800c643
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c608:	2300      	movs	r3, #0
 800c60a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c60e:	e028      	b.n	800c662 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c610:	f107 0308 	add.w	r3, r7, #8
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff fe79 	bl	800c30c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c61a:	6a3a      	ldr	r2, [r7, #32]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c620:	2300      	movs	r3, #0
 800c622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c626:	e01c      	b.n	800c662 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c628:	f107 0308 	add.w	r3, r7, #8
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7ff fe6d 	bl	800c30c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c634:	b29a      	uxth	r2, r3
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c640:	e00f      	b.n	800c662 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c642:	f107 0308 	add.w	r3, r7, #8
 800c646:	4618      	mov	r0, r3
 800c648:	f7ff fe60 	bl	800c30c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64e:	0a5a      	lsrs	r2, r3, #9
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c654:	2300      	movs	r3, #0
 800c656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c65a:	e002      	b.n	800c662 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c65c:	2304      	movs	r3, #4
 800c65e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c662:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c666:	4618      	mov	r0, r3
 800c668:	3730      	adds	r7, #48	@ 0x30
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	2400000d 	.word	0x2400000d

0800c674 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c678:	4b03      	ldr	r3, [pc, #12]	@ (800c688 <BSP_SD_WriteCpltCallback+0x14>)
 800c67a:	2201      	movs	r2, #1
 800c67c:	601a      	str	r2, [r3, #0]
}
 800c67e:	bf00      	nop
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	240007f4 	.word	0x240007f4

0800c68c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c68c:	b480      	push	{r7}
 800c68e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c690:	4b03      	ldr	r3, [pc, #12]	@ (800c6a0 <BSP_SD_ReadCpltCallback+0x14>)
 800c692:	2201      	movs	r2, #1
 800c694:	601a      	str	r2, [r3, #0]
}
 800c696:	bf00      	nop
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	240007f8 	.word	0x240007f8

0800c6a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b087      	sub	sp, #28
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c6ba:	4b1f      	ldr	r3, [pc, #124]	@ (800c738 <FATFS_LinkDriverEx+0x94>)
 800c6bc:	7e1b      	ldrb	r3, [r3, #24]
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d831      	bhi.n	800c728 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c6c4:	4b1c      	ldr	r3, [pc, #112]	@ (800c738 <FATFS_LinkDriverEx+0x94>)
 800c6c6:	7e1b      	ldrb	r3, [r3, #24]
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c738 <FATFS_LinkDriverEx+0x94>)
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c6d2:	4b19      	ldr	r3, [pc, #100]	@ (800c738 <FATFS_LinkDriverEx+0x94>)
 800c6d4:	7e1b      	ldrb	r3, [r3, #24]
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	4a17      	ldr	r2, [pc, #92]	@ (800c738 <FATFS_LinkDriverEx+0x94>)
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4413      	add	r3, r2
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c6e2:	4b15      	ldr	r3, [pc, #84]	@ (800c738 <FATFS_LinkDriverEx+0x94>)
 800c6e4:	7e1b      	ldrb	r3, [r3, #24]
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	4b13      	ldr	r3, [pc, #76]	@ (800c738 <FATFS_LinkDriverEx+0x94>)
 800c6ec:	4413      	add	r3, r2
 800c6ee:	79fa      	ldrb	r2, [r7, #7]
 800c6f0:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 800c6f2:	4b11      	ldr	r3, [pc, #68]	@ (800c738 <FATFS_LinkDriverEx+0x94>)
 800c6f4:	7e1b      	ldrb	r3, [r3, #24]
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	1c5a      	adds	r2, r3, #1
 800c6fa:	b2d1      	uxtb	r1, r2
 800c6fc:	4a0e      	ldr	r2, [pc, #56]	@ (800c738 <FATFS_LinkDriverEx+0x94>)
 800c6fe:	7611      	strb	r1, [r2, #24]
 800c700:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c702:	7dbb      	ldrb	r3, [r7, #22]
 800c704:	3330      	adds	r3, #48	@ 0x30
 800c706:	b2da      	uxtb	r2, r3
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	3301      	adds	r3, #1
 800c710:	223a      	movs	r2, #58	@ 0x3a
 800c712:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	3302      	adds	r3, #2
 800c718:	222f      	movs	r2, #47	@ 0x2f
 800c71a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	3303      	adds	r3, #3
 800c720:	2200      	movs	r2, #0
 800c722:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c724:	2300      	movs	r3, #0
 800c726:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c728:	7dfb      	ldrb	r3, [r7, #23]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	371c      	adds	r7, #28
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	240007fc 	.word	0x240007fc

0800c73c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c746:	2200      	movs	r2, #0
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff ffaa 	bl	800c6a4 <FATFS_LinkDriverEx>
 800c750:	4603      	mov	r3, r0
}
 800c752:	4618      	mov	r0, r3
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
	...

0800c75c <malloc>:
 800c75c:	4b02      	ldr	r3, [pc, #8]	@ (800c768 <malloc+0xc>)
 800c75e:	4601      	mov	r1, r0
 800c760:	6818      	ldr	r0, [r3, #0]
 800c762:	f000 b825 	b.w	800c7b0 <_malloc_r>
 800c766:	bf00      	nop
 800c768:	2400001c 	.word	0x2400001c

0800c76c <sbrk_aligned>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	4e0f      	ldr	r6, [pc, #60]	@ (800c7ac <sbrk_aligned+0x40>)
 800c770:	460c      	mov	r4, r1
 800c772:	6831      	ldr	r1, [r6, #0]
 800c774:	4605      	mov	r5, r0
 800c776:	b911      	cbnz	r1, 800c77e <sbrk_aligned+0x12>
 800c778:	f001 f908 	bl	800d98c <_sbrk_r>
 800c77c:	6030      	str	r0, [r6, #0]
 800c77e:	4621      	mov	r1, r4
 800c780:	4628      	mov	r0, r5
 800c782:	f001 f903 	bl	800d98c <_sbrk_r>
 800c786:	1c43      	adds	r3, r0, #1
 800c788:	d103      	bne.n	800c792 <sbrk_aligned+0x26>
 800c78a:	f04f 34ff 	mov.w	r4, #4294967295
 800c78e:	4620      	mov	r0, r4
 800c790:	bd70      	pop	{r4, r5, r6, pc}
 800c792:	1cc4      	adds	r4, r0, #3
 800c794:	f024 0403 	bic.w	r4, r4, #3
 800c798:	42a0      	cmp	r0, r4
 800c79a:	d0f8      	beq.n	800c78e <sbrk_aligned+0x22>
 800c79c:	1a21      	subs	r1, r4, r0
 800c79e:	4628      	mov	r0, r5
 800c7a0:	f001 f8f4 	bl	800d98c <_sbrk_r>
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	d1f2      	bne.n	800c78e <sbrk_aligned+0x22>
 800c7a8:	e7ef      	b.n	800c78a <sbrk_aligned+0x1e>
 800c7aa:	bf00      	nop
 800c7ac:	24000818 	.word	0x24000818

0800c7b0 <_malloc_r>:
 800c7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7b4:	1ccd      	adds	r5, r1, #3
 800c7b6:	f025 0503 	bic.w	r5, r5, #3
 800c7ba:	3508      	adds	r5, #8
 800c7bc:	2d0c      	cmp	r5, #12
 800c7be:	bf38      	it	cc
 800c7c0:	250c      	movcc	r5, #12
 800c7c2:	2d00      	cmp	r5, #0
 800c7c4:	4606      	mov	r6, r0
 800c7c6:	db01      	blt.n	800c7cc <_malloc_r+0x1c>
 800c7c8:	42a9      	cmp	r1, r5
 800c7ca:	d904      	bls.n	800c7d6 <_malloc_r+0x26>
 800c7cc:	230c      	movs	r3, #12
 800c7ce:	6033      	str	r3, [r6, #0]
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8ac <_malloc_r+0xfc>
 800c7da:	f000 f869 	bl	800c8b0 <__malloc_lock>
 800c7de:	f8d8 3000 	ldr.w	r3, [r8]
 800c7e2:	461c      	mov	r4, r3
 800c7e4:	bb44      	cbnz	r4, 800c838 <_malloc_r+0x88>
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f7ff ffbf 	bl	800c76c <sbrk_aligned>
 800c7ee:	1c43      	adds	r3, r0, #1
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	d158      	bne.n	800c8a6 <_malloc_r+0xf6>
 800c7f4:	f8d8 4000 	ldr.w	r4, [r8]
 800c7f8:	4627      	mov	r7, r4
 800c7fa:	2f00      	cmp	r7, #0
 800c7fc:	d143      	bne.n	800c886 <_malloc_r+0xd6>
 800c7fe:	2c00      	cmp	r4, #0
 800c800:	d04b      	beq.n	800c89a <_malloc_r+0xea>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	4639      	mov	r1, r7
 800c806:	4630      	mov	r0, r6
 800c808:	eb04 0903 	add.w	r9, r4, r3
 800c80c:	f001 f8be 	bl	800d98c <_sbrk_r>
 800c810:	4581      	cmp	r9, r0
 800c812:	d142      	bne.n	800c89a <_malloc_r+0xea>
 800c814:	6821      	ldr	r1, [r4, #0]
 800c816:	1a6d      	subs	r5, r5, r1
 800c818:	4629      	mov	r1, r5
 800c81a:	4630      	mov	r0, r6
 800c81c:	f7ff ffa6 	bl	800c76c <sbrk_aligned>
 800c820:	3001      	adds	r0, #1
 800c822:	d03a      	beq.n	800c89a <_malloc_r+0xea>
 800c824:	6823      	ldr	r3, [r4, #0]
 800c826:	442b      	add	r3, r5
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	f8d8 3000 	ldr.w	r3, [r8]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	bb62      	cbnz	r2, 800c88c <_malloc_r+0xdc>
 800c832:	f8c8 7000 	str.w	r7, [r8]
 800c836:	e00f      	b.n	800c858 <_malloc_r+0xa8>
 800c838:	6822      	ldr	r2, [r4, #0]
 800c83a:	1b52      	subs	r2, r2, r5
 800c83c:	d420      	bmi.n	800c880 <_malloc_r+0xd0>
 800c83e:	2a0b      	cmp	r2, #11
 800c840:	d917      	bls.n	800c872 <_malloc_r+0xc2>
 800c842:	1961      	adds	r1, r4, r5
 800c844:	42a3      	cmp	r3, r4
 800c846:	6025      	str	r5, [r4, #0]
 800c848:	bf18      	it	ne
 800c84a:	6059      	strne	r1, [r3, #4]
 800c84c:	6863      	ldr	r3, [r4, #4]
 800c84e:	bf08      	it	eq
 800c850:	f8c8 1000 	streq.w	r1, [r8]
 800c854:	5162      	str	r2, [r4, r5]
 800c856:	604b      	str	r3, [r1, #4]
 800c858:	4630      	mov	r0, r6
 800c85a:	f000 f82f 	bl	800c8bc <__malloc_unlock>
 800c85e:	f104 000b 	add.w	r0, r4, #11
 800c862:	1d23      	adds	r3, r4, #4
 800c864:	f020 0007 	bic.w	r0, r0, #7
 800c868:	1ac2      	subs	r2, r0, r3
 800c86a:	bf1c      	itt	ne
 800c86c:	1a1b      	subne	r3, r3, r0
 800c86e:	50a3      	strne	r3, [r4, r2]
 800c870:	e7af      	b.n	800c7d2 <_malloc_r+0x22>
 800c872:	6862      	ldr	r2, [r4, #4]
 800c874:	42a3      	cmp	r3, r4
 800c876:	bf0c      	ite	eq
 800c878:	f8c8 2000 	streq.w	r2, [r8]
 800c87c:	605a      	strne	r2, [r3, #4]
 800c87e:	e7eb      	b.n	800c858 <_malloc_r+0xa8>
 800c880:	4623      	mov	r3, r4
 800c882:	6864      	ldr	r4, [r4, #4]
 800c884:	e7ae      	b.n	800c7e4 <_malloc_r+0x34>
 800c886:	463c      	mov	r4, r7
 800c888:	687f      	ldr	r7, [r7, #4]
 800c88a:	e7b6      	b.n	800c7fa <_malloc_r+0x4a>
 800c88c:	461a      	mov	r2, r3
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	42a3      	cmp	r3, r4
 800c892:	d1fb      	bne.n	800c88c <_malloc_r+0xdc>
 800c894:	2300      	movs	r3, #0
 800c896:	6053      	str	r3, [r2, #4]
 800c898:	e7de      	b.n	800c858 <_malloc_r+0xa8>
 800c89a:	230c      	movs	r3, #12
 800c89c:	6033      	str	r3, [r6, #0]
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f000 f80c 	bl	800c8bc <__malloc_unlock>
 800c8a4:	e794      	b.n	800c7d0 <_malloc_r+0x20>
 800c8a6:	6005      	str	r5, [r0, #0]
 800c8a8:	e7d6      	b.n	800c858 <_malloc_r+0xa8>
 800c8aa:	bf00      	nop
 800c8ac:	2400081c 	.word	0x2400081c

0800c8b0 <__malloc_lock>:
 800c8b0:	4801      	ldr	r0, [pc, #4]	@ (800c8b8 <__malloc_lock+0x8>)
 800c8b2:	f001 b8b8 	b.w	800da26 <__retarget_lock_acquire_recursive>
 800c8b6:	bf00      	nop
 800c8b8:	24000960 	.word	0x24000960

0800c8bc <__malloc_unlock>:
 800c8bc:	4801      	ldr	r0, [pc, #4]	@ (800c8c4 <__malloc_unlock+0x8>)
 800c8be:	f001 b8b3 	b.w	800da28 <__retarget_lock_release_recursive>
 800c8c2:	bf00      	nop
 800c8c4:	24000960 	.word	0x24000960

0800c8c8 <__cvt>:
 800c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ca:	ed2d 8b02 	vpush	{d8}
 800c8ce:	eeb0 8b40 	vmov.f64	d8, d0
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	4617      	mov	r7, r2
 800c8d6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c8d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8da:	ee18 2a90 	vmov	r2, s17
 800c8de:	f025 0520 	bic.w	r5, r5, #32
 800c8e2:	2a00      	cmp	r2, #0
 800c8e4:	bfb6      	itet	lt
 800c8e6:	222d      	movlt	r2, #45	@ 0x2d
 800c8e8:	2200      	movge	r2, #0
 800c8ea:	eeb1 8b40 	vneglt.f64	d8, d0
 800c8ee:	2d46      	cmp	r5, #70	@ 0x46
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	701a      	strb	r2, [r3, #0]
 800c8f4:	d004      	beq.n	800c900 <__cvt+0x38>
 800c8f6:	2d45      	cmp	r5, #69	@ 0x45
 800c8f8:	d100      	bne.n	800c8fc <__cvt+0x34>
 800c8fa:	3401      	adds	r4, #1
 800c8fc:	2102      	movs	r1, #2
 800c8fe:	e000      	b.n	800c902 <__cvt+0x3a>
 800c900:	2103      	movs	r1, #3
 800c902:	ab03      	add	r3, sp, #12
 800c904:	9301      	str	r3, [sp, #4]
 800c906:	ab02      	add	r3, sp, #8
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	4622      	mov	r2, r4
 800c90c:	4633      	mov	r3, r6
 800c90e:	eeb0 0b48 	vmov.f64	d0, d8
 800c912:	f001 f929 	bl	800db68 <_dtoa_r>
 800c916:	2d47      	cmp	r5, #71	@ 0x47
 800c918:	d114      	bne.n	800c944 <__cvt+0x7c>
 800c91a:	07fb      	lsls	r3, r7, #31
 800c91c:	d50a      	bpl.n	800c934 <__cvt+0x6c>
 800c91e:	1902      	adds	r2, r0, r4
 800c920:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c928:	bf08      	it	eq
 800c92a:	9203      	streq	r2, [sp, #12]
 800c92c:	2130      	movs	r1, #48	@ 0x30
 800c92e:	9b03      	ldr	r3, [sp, #12]
 800c930:	4293      	cmp	r3, r2
 800c932:	d319      	bcc.n	800c968 <__cvt+0xa0>
 800c934:	9b03      	ldr	r3, [sp, #12]
 800c936:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c938:	1a1b      	subs	r3, r3, r0
 800c93a:	6013      	str	r3, [r2, #0]
 800c93c:	b005      	add	sp, #20
 800c93e:	ecbd 8b02 	vpop	{d8}
 800c942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c944:	2d46      	cmp	r5, #70	@ 0x46
 800c946:	eb00 0204 	add.w	r2, r0, r4
 800c94a:	d1e9      	bne.n	800c920 <__cvt+0x58>
 800c94c:	7803      	ldrb	r3, [r0, #0]
 800c94e:	2b30      	cmp	r3, #48	@ 0x30
 800c950:	d107      	bne.n	800c962 <__cvt+0x9a>
 800c952:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c95a:	bf1c      	itt	ne
 800c95c:	f1c4 0401 	rsbne	r4, r4, #1
 800c960:	6034      	strne	r4, [r6, #0]
 800c962:	6833      	ldr	r3, [r6, #0]
 800c964:	441a      	add	r2, r3
 800c966:	e7db      	b.n	800c920 <__cvt+0x58>
 800c968:	1c5c      	adds	r4, r3, #1
 800c96a:	9403      	str	r4, [sp, #12]
 800c96c:	7019      	strb	r1, [r3, #0]
 800c96e:	e7de      	b.n	800c92e <__cvt+0x66>

0800c970 <__exponent>:
 800c970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c972:	2900      	cmp	r1, #0
 800c974:	bfba      	itte	lt
 800c976:	4249      	neglt	r1, r1
 800c978:	232d      	movlt	r3, #45	@ 0x2d
 800c97a:	232b      	movge	r3, #43	@ 0x2b
 800c97c:	2909      	cmp	r1, #9
 800c97e:	7002      	strb	r2, [r0, #0]
 800c980:	7043      	strb	r3, [r0, #1]
 800c982:	dd29      	ble.n	800c9d8 <__exponent+0x68>
 800c984:	f10d 0307 	add.w	r3, sp, #7
 800c988:	461d      	mov	r5, r3
 800c98a:	270a      	movs	r7, #10
 800c98c:	461a      	mov	r2, r3
 800c98e:	fbb1 f6f7 	udiv	r6, r1, r7
 800c992:	fb07 1416 	mls	r4, r7, r6, r1
 800c996:	3430      	adds	r4, #48	@ 0x30
 800c998:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c99c:	460c      	mov	r4, r1
 800c99e:	2c63      	cmp	r4, #99	@ 0x63
 800c9a0:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9a4:	4631      	mov	r1, r6
 800c9a6:	dcf1      	bgt.n	800c98c <__exponent+0x1c>
 800c9a8:	3130      	adds	r1, #48	@ 0x30
 800c9aa:	1e94      	subs	r4, r2, #2
 800c9ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c9b0:	1c41      	adds	r1, r0, #1
 800c9b2:	4623      	mov	r3, r4
 800c9b4:	42ab      	cmp	r3, r5
 800c9b6:	d30a      	bcc.n	800c9ce <__exponent+0x5e>
 800c9b8:	f10d 0309 	add.w	r3, sp, #9
 800c9bc:	1a9b      	subs	r3, r3, r2
 800c9be:	42ac      	cmp	r4, r5
 800c9c0:	bf88      	it	hi
 800c9c2:	2300      	movhi	r3, #0
 800c9c4:	3302      	adds	r3, #2
 800c9c6:	4403      	add	r3, r0
 800c9c8:	1a18      	subs	r0, r3, r0
 800c9ca:	b003      	add	sp, #12
 800c9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c9d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c9d6:	e7ed      	b.n	800c9b4 <__exponent+0x44>
 800c9d8:	2330      	movs	r3, #48	@ 0x30
 800c9da:	3130      	adds	r1, #48	@ 0x30
 800c9dc:	7083      	strb	r3, [r0, #2]
 800c9de:	70c1      	strb	r1, [r0, #3]
 800c9e0:	1d03      	adds	r3, r0, #4
 800c9e2:	e7f1      	b.n	800c9c8 <__exponent+0x58>
 800c9e4:	0000      	movs	r0, r0
	...

0800c9e8 <_printf_float>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	b08d      	sub	sp, #52	@ 0x34
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c9f4:	4616      	mov	r6, r2
 800c9f6:	461f      	mov	r7, r3
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	f000 ff8f 	bl	800d91c <_localeconv_r>
 800c9fe:	f8d0 b000 	ldr.w	fp, [r0]
 800ca02:	4658      	mov	r0, fp
 800ca04:	f7f3 fcd4 	bl	80003b0 <strlen>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca10:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ca14:	6822      	ldr	r2, [r4, #0]
 800ca16:	9005      	str	r0, [sp, #20]
 800ca18:	3307      	adds	r3, #7
 800ca1a:	f023 0307 	bic.w	r3, r3, #7
 800ca1e:	f103 0108 	add.w	r1, r3, #8
 800ca22:	f8c8 1000 	str.w	r1, [r8]
 800ca26:	ed93 0b00 	vldr	d0, [r3]
 800ca2a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800cc88 <_printf_float+0x2a0>
 800ca2e:	eeb0 7bc0 	vabs.f64	d7, d0
 800ca32:	eeb4 7b46 	vcmp.f64	d7, d6
 800ca36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca3a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ca3e:	dd24      	ble.n	800ca8a <_printf_float+0xa2>
 800ca40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ca44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca48:	d502      	bpl.n	800ca50 <_printf_float+0x68>
 800ca4a:	232d      	movs	r3, #45	@ 0x2d
 800ca4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca50:	498f      	ldr	r1, [pc, #572]	@ (800cc90 <_printf_float+0x2a8>)
 800ca52:	4b90      	ldr	r3, [pc, #576]	@ (800cc94 <_printf_float+0x2ac>)
 800ca54:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ca58:	bf94      	ite	ls
 800ca5a:	4688      	movls	r8, r1
 800ca5c:	4698      	movhi	r8, r3
 800ca5e:	f022 0204 	bic.w	r2, r2, #4
 800ca62:	2303      	movs	r3, #3
 800ca64:	6123      	str	r3, [r4, #16]
 800ca66:	6022      	str	r2, [r4, #0]
 800ca68:	f04f 0a00 	mov.w	sl, #0
 800ca6c:	9700      	str	r7, [sp, #0]
 800ca6e:	4633      	mov	r3, r6
 800ca70:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ca72:	4621      	mov	r1, r4
 800ca74:	4628      	mov	r0, r5
 800ca76:	f000 f9d1 	bl	800ce1c <_printf_common>
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	f040 8089 	bne.w	800cb92 <_printf_float+0x1aa>
 800ca80:	f04f 30ff 	mov.w	r0, #4294967295
 800ca84:	b00d      	add	sp, #52	@ 0x34
 800ca86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ca8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca92:	d709      	bvc.n	800caa8 <_printf_float+0xc0>
 800ca94:	ee10 3a90 	vmov	r3, s1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	bfbc      	itt	lt
 800ca9c:	232d      	movlt	r3, #45	@ 0x2d
 800ca9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800caa2:	497d      	ldr	r1, [pc, #500]	@ (800cc98 <_printf_float+0x2b0>)
 800caa4:	4b7d      	ldr	r3, [pc, #500]	@ (800cc9c <_printf_float+0x2b4>)
 800caa6:	e7d5      	b.n	800ca54 <_printf_float+0x6c>
 800caa8:	6863      	ldr	r3, [r4, #4]
 800caaa:	1c59      	adds	r1, r3, #1
 800caac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800cab0:	d139      	bne.n	800cb26 <_printf_float+0x13e>
 800cab2:	2306      	movs	r3, #6
 800cab4:	6063      	str	r3, [r4, #4]
 800cab6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800caba:	2300      	movs	r3, #0
 800cabc:	6022      	str	r2, [r4, #0]
 800cabe:	9303      	str	r3, [sp, #12]
 800cac0:	ab0a      	add	r3, sp, #40	@ 0x28
 800cac2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cac6:	ab09      	add	r3, sp, #36	@ 0x24
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	6861      	ldr	r1, [r4, #4]
 800cacc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cad0:	4628      	mov	r0, r5
 800cad2:	f7ff fef9 	bl	800c8c8 <__cvt>
 800cad6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cada:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cadc:	4680      	mov	r8, r0
 800cade:	d129      	bne.n	800cb34 <_printf_float+0x14c>
 800cae0:	1cc8      	adds	r0, r1, #3
 800cae2:	db02      	blt.n	800caea <_printf_float+0x102>
 800cae4:	6863      	ldr	r3, [r4, #4]
 800cae6:	4299      	cmp	r1, r3
 800cae8:	dd41      	ble.n	800cb6e <_printf_float+0x186>
 800caea:	f1a9 0902 	sub.w	r9, r9, #2
 800caee:	fa5f f989 	uxtb.w	r9, r9
 800caf2:	3901      	subs	r1, #1
 800caf4:	464a      	mov	r2, r9
 800caf6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cafa:	9109      	str	r1, [sp, #36]	@ 0x24
 800cafc:	f7ff ff38 	bl	800c970 <__exponent>
 800cb00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb02:	1813      	adds	r3, r2, r0
 800cb04:	2a01      	cmp	r2, #1
 800cb06:	4682      	mov	sl, r0
 800cb08:	6123      	str	r3, [r4, #16]
 800cb0a:	dc02      	bgt.n	800cb12 <_printf_float+0x12a>
 800cb0c:	6822      	ldr	r2, [r4, #0]
 800cb0e:	07d2      	lsls	r2, r2, #31
 800cb10:	d501      	bpl.n	800cb16 <_printf_float+0x12e>
 800cb12:	3301      	adds	r3, #1
 800cb14:	6123      	str	r3, [r4, #16]
 800cb16:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0a6      	beq.n	800ca6c <_printf_float+0x84>
 800cb1e:	232d      	movs	r3, #45	@ 0x2d
 800cb20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb24:	e7a2      	b.n	800ca6c <_printf_float+0x84>
 800cb26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cb2a:	d1c4      	bne.n	800cab6 <_printf_float+0xce>
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1c2      	bne.n	800cab6 <_printf_float+0xce>
 800cb30:	2301      	movs	r3, #1
 800cb32:	e7bf      	b.n	800cab4 <_printf_float+0xcc>
 800cb34:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cb38:	d9db      	bls.n	800caf2 <_printf_float+0x10a>
 800cb3a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800cb3e:	d118      	bne.n	800cb72 <_printf_float+0x18a>
 800cb40:	2900      	cmp	r1, #0
 800cb42:	6863      	ldr	r3, [r4, #4]
 800cb44:	dd0b      	ble.n	800cb5e <_printf_float+0x176>
 800cb46:	6121      	str	r1, [r4, #16]
 800cb48:	b913      	cbnz	r3, 800cb50 <_printf_float+0x168>
 800cb4a:	6822      	ldr	r2, [r4, #0]
 800cb4c:	07d0      	lsls	r0, r2, #31
 800cb4e:	d502      	bpl.n	800cb56 <_printf_float+0x16e>
 800cb50:	3301      	adds	r3, #1
 800cb52:	440b      	add	r3, r1
 800cb54:	6123      	str	r3, [r4, #16]
 800cb56:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cb58:	f04f 0a00 	mov.w	sl, #0
 800cb5c:	e7db      	b.n	800cb16 <_printf_float+0x12e>
 800cb5e:	b913      	cbnz	r3, 800cb66 <_printf_float+0x17e>
 800cb60:	6822      	ldr	r2, [r4, #0]
 800cb62:	07d2      	lsls	r2, r2, #31
 800cb64:	d501      	bpl.n	800cb6a <_printf_float+0x182>
 800cb66:	3302      	adds	r3, #2
 800cb68:	e7f4      	b.n	800cb54 <_printf_float+0x16c>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e7f2      	b.n	800cb54 <_printf_float+0x16c>
 800cb6e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800cb72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb74:	4299      	cmp	r1, r3
 800cb76:	db05      	blt.n	800cb84 <_printf_float+0x19c>
 800cb78:	6823      	ldr	r3, [r4, #0]
 800cb7a:	6121      	str	r1, [r4, #16]
 800cb7c:	07d8      	lsls	r0, r3, #31
 800cb7e:	d5ea      	bpl.n	800cb56 <_printf_float+0x16e>
 800cb80:	1c4b      	adds	r3, r1, #1
 800cb82:	e7e7      	b.n	800cb54 <_printf_float+0x16c>
 800cb84:	2900      	cmp	r1, #0
 800cb86:	bfd4      	ite	le
 800cb88:	f1c1 0202 	rsble	r2, r1, #2
 800cb8c:	2201      	movgt	r2, #1
 800cb8e:	4413      	add	r3, r2
 800cb90:	e7e0      	b.n	800cb54 <_printf_float+0x16c>
 800cb92:	6823      	ldr	r3, [r4, #0]
 800cb94:	055a      	lsls	r2, r3, #21
 800cb96:	d407      	bmi.n	800cba8 <_printf_float+0x1c0>
 800cb98:	6923      	ldr	r3, [r4, #16]
 800cb9a:	4642      	mov	r2, r8
 800cb9c:	4631      	mov	r1, r6
 800cb9e:	4628      	mov	r0, r5
 800cba0:	47b8      	blx	r7
 800cba2:	3001      	adds	r0, #1
 800cba4:	d12a      	bne.n	800cbfc <_printf_float+0x214>
 800cba6:	e76b      	b.n	800ca80 <_printf_float+0x98>
 800cba8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cbac:	f240 80e0 	bls.w	800cd70 <_printf_float+0x388>
 800cbb0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800cbb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbbc:	d133      	bne.n	800cc26 <_printf_float+0x23e>
 800cbbe:	4a38      	ldr	r2, [pc, #224]	@ (800cca0 <_printf_float+0x2b8>)
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	4631      	mov	r1, r6
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	47b8      	blx	r7
 800cbc8:	3001      	adds	r0, #1
 800cbca:	f43f af59 	beq.w	800ca80 <_printf_float+0x98>
 800cbce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cbd2:	4543      	cmp	r3, r8
 800cbd4:	db02      	blt.n	800cbdc <_printf_float+0x1f4>
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	07d8      	lsls	r0, r3, #31
 800cbda:	d50f      	bpl.n	800cbfc <_printf_float+0x214>
 800cbdc:	9b05      	ldr	r3, [sp, #20]
 800cbde:	465a      	mov	r2, fp
 800cbe0:	4631      	mov	r1, r6
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	47b8      	blx	r7
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	f43f af4a 	beq.w	800ca80 <_printf_float+0x98>
 800cbec:	f04f 0900 	mov.w	r9, #0
 800cbf0:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbf4:	f104 0a1a 	add.w	sl, r4, #26
 800cbf8:	45c8      	cmp	r8, r9
 800cbfa:	dc09      	bgt.n	800cc10 <_printf_float+0x228>
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	079b      	lsls	r3, r3, #30
 800cc00:	f100 8107 	bmi.w	800ce12 <_printf_float+0x42a>
 800cc04:	68e0      	ldr	r0, [r4, #12]
 800cc06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc08:	4298      	cmp	r0, r3
 800cc0a:	bfb8      	it	lt
 800cc0c:	4618      	movlt	r0, r3
 800cc0e:	e739      	b.n	800ca84 <_printf_float+0x9c>
 800cc10:	2301      	movs	r3, #1
 800cc12:	4652      	mov	r2, sl
 800cc14:	4631      	mov	r1, r6
 800cc16:	4628      	mov	r0, r5
 800cc18:	47b8      	blx	r7
 800cc1a:	3001      	adds	r0, #1
 800cc1c:	f43f af30 	beq.w	800ca80 <_printf_float+0x98>
 800cc20:	f109 0901 	add.w	r9, r9, #1
 800cc24:	e7e8      	b.n	800cbf8 <_printf_float+0x210>
 800cc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	dc3b      	bgt.n	800cca4 <_printf_float+0x2bc>
 800cc2c:	4a1c      	ldr	r2, [pc, #112]	@ (800cca0 <_printf_float+0x2b8>)
 800cc2e:	2301      	movs	r3, #1
 800cc30:	4631      	mov	r1, r6
 800cc32:	4628      	mov	r0, r5
 800cc34:	47b8      	blx	r7
 800cc36:	3001      	adds	r0, #1
 800cc38:	f43f af22 	beq.w	800ca80 <_printf_float+0x98>
 800cc3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cc40:	ea59 0303 	orrs.w	r3, r9, r3
 800cc44:	d102      	bne.n	800cc4c <_printf_float+0x264>
 800cc46:	6823      	ldr	r3, [r4, #0]
 800cc48:	07d9      	lsls	r1, r3, #31
 800cc4a:	d5d7      	bpl.n	800cbfc <_printf_float+0x214>
 800cc4c:	9b05      	ldr	r3, [sp, #20]
 800cc4e:	465a      	mov	r2, fp
 800cc50:	4631      	mov	r1, r6
 800cc52:	4628      	mov	r0, r5
 800cc54:	47b8      	blx	r7
 800cc56:	3001      	adds	r0, #1
 800cc58:	f43f af12 	beq.w	800ca80 <_printf_float+0x98>
 800cc5c:	f04f 0a00 	mov.w	sl, #0
 800cc60:	f104 0b1a 	add.w	fp, r4, #26
 800cc64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc66:	425b      	negs	r3, r3
 800cc68:	4553      	cmp	r3, sl
 800cc6a:	dc01      	bgt.n	800cc70 <_printf_float+0x288>
 800cc6c:	464b      	mov	r3, r9
 800cc6e:	e794      	b.n	800cb9a <_printf_float+0x1b2>
 800cc70:	2301      	movs	r3, #1
 800cc72:	465a      	mov	r2, fp
 800cc74:	4631      	mov	r1, r6
 800cc76:	4628      	mov	r0, r5
 800cc78:	47b8      	blx	r7
 800cc7a:	3001      	adds	r0, #1
 800cc7c:	f43f af00 	beq.w	800ca80 <_printf_float+0x98>
 800cc80:	f10a 0a01 	add.w	sl, sl, #1
 800cc84:	e7ee      	b.n	800cc64 <_printf_float+0x27c>
 800cc86:	bf00      	nop
 800cc88:	ffffffff 	.word	0xffffffff
 800cc8c:	7fefffff 	.word	0x7fefffff
 800cc90:	08010d70 	.word	0x08010d70
 800cc94:	08010d74 	.word	0x08010d74
 800cc98:	08010d78 	.word	0x08010d78
 800cc9c:	08010d7c 	.word	0x08010d7c
 800cca0:	08010d80 	.word	0x08010d80
 800cca4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cca6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ccaa:	4553      	cmp	r3, sl
 800ccac:	bfa8      	it	ge
 800ccae:	4653      	movge	r3, sl
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	4699      	mov	r9, r3
 800ccb4:	dc37      	bgt.n	800cd26 <_printf_float+0x33e>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	9307      	str	r3, [sp, #28]
 800ccba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ccbe:	f104 021a 	add.w	r2, r4, #26
 800ccc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ccc4:	9907      	ldr	r1, [sp, #28]
 800ccc6:	9306      	str	r3, [sp, #24]
 800ccc8:	eba3 0309 	sub.w	r3, r3, r9
 800cccc:	428b      	cmp	r3, r1
 800ccce:	dc31      	bgt.n	800cd34 <_printf_float+0x34c>
 800ccd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccd2:	459a      	cmp	sl, r3
 800ccd4:	dc3b      	bgt.n	800cd4e <_printf_float+0x366>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	07da      	lsls	r2, r3, #31
 800ccda:	d438      	bmi.n	800cd4e <_printf_float+0x366>
 800ccdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccde:	ebaa 0903 	sub.w	r9, sl, r3
 800cce2:	9b06      	ldr	r3, [sp, #24]
 800cce4:	ebaa 0303 	sub.w	r3, sl, r3
 800cce8:	4599      	cmp	r9, r3
 800ccea:	bfa8      	it	ge
 800ccec:	4699      	movge	r9, r3
 800ccee:	f1b9 0f00 	cmp.w	r9, #0
 800ccf2:	dc34      	bgt.n	800cd5e <_printf_float+0x376>
 800ccf4:	f04f 0800 	mov.w	r8, #0
 800ccf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ccfc:	f104 0b1a 	add.w	fp, r4, #26
 800cd00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd02:	ebaa 0303 	sub.w	r3, sl, r3
 800cd06:	eba3 0309 	sub.w	r3, r3, r9
 800cd0a:	4543      	cmp	r3, r8
 800cd0c:	f77f af76 	ble.w	800cbfc <_printf_float+0x214>
 800cd10:	2301      	movs	r3, #1
 800cd12:	465a      	mov	r2, fp
 800cd14:	4631      	mov	r1, r6
 800cd16:	4628      	mov	r0, r5
 800cd18:	47b8      	blx	r7
 800cd1a:	3001      	adds	r0, #1
 800cd1c:	f43f aeb0 	beq.w	800ca80 <_printf_float+0x98>
 800cd20:	f108 0801 	add.w	r8, r8, #1
 800cd24:	e7ec      	b.n	800cd00 <_printf_float+0x318>
 800cd26:	4642      	mov	r2, r8
 800cd28:	4631      	mov	r1, r6
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	47b8      	blx	r7
 800cd2e:	3001      	adds	r0, #1
 800cd30:	d1c1      	bne.n	800ccb6 <_printf_float+0x2ce>
 800cd32:	e6a5      	b.n	800ca80 <_printf_float+0x98>
 800cd34:	2301      	movs	r3, #1
 800cd36:	4631      	mov	r1, r6
 800cd38:	4628      	mov	r0, r5
 800cd3a:	9206      	str	r2, [sp, #24]
 800cd3c:	47b8      	blx	r7
 800cd3e:	3001      	adds	r0, #1
 800cd40:	f43f ae9e 	beq.w	800ca80 <_printf_float+0x98>
 800cd44:	9b07      	ldr	r3, [sp, #28]
 800cd46:	9a06      	ldr	r2, [sp, #24]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	9307      	str	r3, [sp, #28]
 800cd4c:	e7b9      	b.n	800ccc2 <_printf_float+0x2da>
 800cd4e:	9b05      	ldr	r3, [sp, #20]
 800cd50:	465a      	mov	r2, fp
 800cd52:	4631      	mov	r1, r6
 800cd54:	4628      	mov	r0, r5
 800cd56:	47b8      	blx	r7
 800cd58:	3001      	adds	r0, #1
 800cd5a:	d1bf      	bne.n	800ccdc <_printf_float+0x2f4>
 800cd5c:	e690      	b.n	800ca80 <_printf_float+0x98>
 800cd5e:	9a06      	ldr	r2, [sp, #24]
 800cd60:	464b      	mov	r3, r9
 800cd62:	4442      	add	r2, r8
 800cd64:	4631      	mov	r1, r6
 800cd66:	4628      	mov	r0, r5
 800cd68:	47b8      	blx	r7
 800cd6a:	3001      	adds	r0, #1
 800cd6c:	d1c2      	bne.n	800ccf4 <_printf_float+0x30c>
 800cd6e:	e687      	b.n	800ca80 <_printf_float+0x98>
 800cd70:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800cd74:	f1b9 0f01 	cmp.w	r9, #1
 800cd78:	dc01      	bgt.n	800cd7e <_printf_float+0x396>
 800cd7a:	07db      	lsls	r3, r3, #31
 800cd7c:	d536      	bpl.n	800cdec <_printf_float+0x404>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	4642      	mov	r2, r8
 800cd82:	4631      	mov	r1, r6
 800cd84:	4628      	mov	r0, r5
 800cd86:	47b8      	blx	r7
 800cd88:	3001      	adds	r0, #1
 800cd8a:	f43f ae79 	beq.w	800ca80 <_printf_float+0x98>
 800cd8e:	9b05      	ldr	r3, [sp, #20]
 800cd90:	465a      	mov	r2, fp
 800cd92:	4631      	mov	r1, r6
 800cd94:	4628      	mov	r0, r5
 800cd96:	47b8      	blx	r7
 800cd98:	3001      	adds	r0, #1
 800cd9a:	f43f ae71 	beq.w	800ca80 <_printf_float+0x98>
 800cd9e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800cda2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdaa:	f109 39ff 	add.w	r9, r9, #4294967295
 800cdae:	d018      	beq.n	800cde2 <_printf_float+0x3fa>
 800cdb0:	464b      	mov	r3, r9
 800cdb2:	f108 0201 	add.w	r2, r8, #1
 800cdb6:	4631      	mov	r1, r6
 800cdb8:	4628      	mov	r0, r5
 800cdba:	47b8      	blx	r7
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d10c      	bne.n	800cdda <_printf_float+0x3f2>
 800cdc0:	e65e      	b.n	800ca80 <_printf_float+0x98>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	465a      	mov	r2, fp
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	4628      	mov	r0, r5
 800cdca:	47b8      	blx	r7
 800cdcc:	3001      	adds	r0, #1
 800cdce:	f43f ae57 	beq.w	800ca80 <_printf_float+0x98>
 800cdd2:	f108 0801 	add.w	r8, r8, #1
 800cdd6:	45c8      	cmp	r8, r9
 800cdd8:	dbf3      	blt.n	800cdc2 <_printf_float+0x3da>
 800cdda:	4653      	mov	r3, sl
 800cddc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cde0:	e6dc      	b.n	800cb9c <_printf_float+0x1b4>
 800cde2:	f04f 0800 	mov.w	r8, #0
 800cde6:	f104 0b1a 	add.w	fp, r4, #26
 800cdea:	e7f4      	b.n	800cdd6 <_printf_float+0x3ee>
 800cdec:	2301      	movs	r3, #1
 800cdee:	4642      	mov	r2, r8
 800cdf0:	e7e1      	b.n	800cdb6 <_printf_float+0x3ce>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	464a      	mov	r2, r9
 800cdf6:	4631      	mov	r1, r6
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	47b8      	blx	r7
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	f43f ae3f 	beq.w	800ca80 <_printf_float+0x98>
 800ce02:	f108 0801 	add.w	r8, r8, #1
 800ce06:	68e3      	ldr	r3, [r4, #12]
 800ce08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce0a:	1a5b      	subs	r3, r3, r1
 800ce0c:	4543      	cmp	r3, r8
 800ce0e:	dcf0      	bgt.n	800cdf2 <_printf_float+0x40a>
 800ce10:	e6f8      	b.n	800cc04 <_printf_float+0x21c>
 800ce12:	f04f 0800 	mov.w	r8, #0
 800ce16:	f104 0919 	add.w	r9, r4, #25
 800ce1a:	e7f4      	b.n	800ce06 <_printf_float+0x41e>

0800ce1c <_printf_common>:
 800ce1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce20:	4616      	mov	r6, r2
 800ce22:	4698      	mov	r8, r3
 800ce24:	688a      	ldr	r2, [r1, #8]
 800ce26:	690b      	ldr	r3, [r1, #16]
 800ce28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	bfb8      	it	lt
 800ce30:	4613      	movlt	r3, r2
 800ce32:	6033      	str	r3, [r6, #0]
 800ce34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ce38:	4607      	mov	r7, r0
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	b10a      	cbz	r2, 800ce42 <_printf_common+0x26>
 800ce3e:	3301      	adds	r3, #1
 800ce40:	6033      	str	r3, [r6, #0]
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	0699      	lsls	r1, r3, #26
 800ce46:	bf42      	ittt	mi
 800ce48:	6833      	ldrmi	r3, [r6, #0]
 800ce4a:	3302      	addmi	r3, #2
 800ce4c:	6033      	strmi	r3, [r6, #0]
 800ce4e:	6825      	ldr	r5, [r4, #0]
 800ce50:	f015 0506 	ands.w	r5, r5, #6
 800ce54:	d106      	bne.n	800ce64 <_printf_common+0x48>
 800ce56:	f104 0a19 	add.w	sl, r4, #25
 800ce5a:	68e3      	ldr	r3, [r4, #12]
 800ce5c:	6832      	ldr	r2, [r6, #0]
 800ce5e:	1a9b      	subs	r3, r3, r2
 800ce60:	42ab      	cmp	r3, r5
 800ce62:	dc26      	bgt.n	800ceb2 <_printf_common+0x96>
 800ce64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ce68:	6822      	ldr	r2, [r4, #0]
 800ce6a:	3b00      	subs	r3, #0
 800ce6c:	bf18      	it	ne
 800ce6e:	2301      	movne	r3, #1
 800ce70:	0692      	lsls	r2, r2, #26
 800ce72:	d42b      	bmi.n	800cecc <_printf_common+0xb0>
 800ce74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ce78:	4641      	mov	r1, r8
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	47c8      	blx	r9
 800ce7e:	3001      	adds	r0, #1
 800ce80:	d01e      	beq.n	800cec0 <_printf_common+0xa4>
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	6922      	ldr	r2, [r4, #16]
 800ce86:	f003 0306 	and.w	r3, r3, #6
 800ce8a:	2b04      	cmp	r3, #4
 800ce8c:	bf02      	ittt	eq
 800ce8e:	68e5      	ldreq	r5, [r4, #12]
 800ce90:	6833      	ldreq	r3, [r6, #0]
 800ce92:	1aed      	subeq	r5, r5, r3
 800ce94:	68a3      	ldr	r3, [r4, #8]
 800ce96:	bf0c      	ite	eq
 800ce98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce9c:	2500      	movne	r5, #0
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	bfc4      	itt	gt
 800cea2:	1a9b      	subgt	r3, r3, r2
 800cea4:	18ed      	addgt	r5, r5, r3
 800cea6:	2600      	movs	r6, #0
 800cea8:	341a      	adds	r4, #26
 800ceaa:	42b5      	cmp	r5, r6
 800ceac:	d11a      	bne.n	800cee4 <_printf_common+0xc8>
 800ceae:	2000      	movs	r0, #0
 800ceb0:	e008      	b.n	800cec4 <_printf_common+0xa8>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	4652      	mov	r2, sl
 800ceb6:	4641      	mov	r1, r8
 800ceb8:	4638      	mov	r0, r7
 800ceba:	47c8      	blx	r9
 800cebc:	3001      	adds	r0, #1
 800cebe:	d103      	bne.n	800cec8 <_printf_common+0xac>
 800cec0:	f04f 30ff 	mov.w	r0, #4294967295
 800cec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec8:	3501      	adds	r5, #1
 800ceca:	e7c6      	b.n	800ce5a <_printf_common+0x3e>
 800cecc:	18e1      	adds	r1, r4, r3
 800cece:	1c5a      	adds	r2, r3, #1
 800ced0:	2030      	movs	r0, #48	@ 0x30
 800ced2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ced6:	4422      	add	r2, r4
 800ced8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cedc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cee0:	3302      	adds	r3, #2
 800cee2:	e7c7      	b.n	800ce74 <_printf_common+0x58>
 800cee4:	2301      	movs	r3, #1
 800cee6:	4622      	mov	r2, r4
 800cee8:	4641      	mov	r1, r8
 800ceea:	4638      	mov	r0, r7
 800ceec:	47c8      	blx	r9
 800ceee:	3001      	adds	r0, #1
 800cef0:	d0e6      	beq.n	800cec0 <_printf_common+0xa4>
 800cef2:	3601      	adds	r6, #1
 800cef4:	e7d9      	b.n	800ceaa <_printf_common+0x8e>
	...

0800cef8 <_printf_i>:
 800cef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cefc:	7e0f      	ldrb	r7, [r1, #24]
 800cefe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf00:	2f78      	cmp	r7, #120	@ 0x78
 800cf02:	4691      	mov	r9, r2
 800cf04:	4680      	mov	r8, r0
 800cf06:	460c      	mov	r4, r1
 800cf08:	469a      	mov	sl, r3
 800cf0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cf0e:	d807      	bhi.n	800cf20 <_printf_i+0x28>
 800cf10:	2f62      	cmp	r7, #98	@ 0x62
 800cf12:	d80a      	bhi.n	800cf2a <_printf_i+0x32>
 800cf14:	2f00      	cmp	r7, #0
 800cf16:	f000 80d2 	beq.w	800d0be <_printf_i+0x1c6>
 800cf1a:	2f58      	cmp	r7, #88	@ 0x58
 800cf1c:	f000 80b9 	beq.w	800d092 <_printf_i+0x19a>
 800cf20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cf28:	e03a      	b.n	800cfa0 <_printf_i+0xa8>
 800cf2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cf2e:	2b15      	cmp	r3, #21
 800cf30:	d8f6      	bhi.n	800cf20 <_printf_i+0x28>
 800cf32:	a101      	add	r1, pc, #4	@ (adr r1, 800cf38 <_printf_i+0x40>)
 800cf34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf38:	0800cf91 	.word	0x0800cf91
 800cf3c:	0800cfa5 	.word	0x0800cfa5
 800cf40:	0800cf21 	.word	0x0800cf21
 800cf44:	0800cf21 	.word	0x0800cf21
 800cf48:	0800cf21 	.word	0x0800cf21
 800cf4c:	0800cf21 	.word	0x0800cf21
 800cf50:	0800cfa5 	.word	0x0800cfa5
 800cf54:	0800cf21 	.word	0x0800cf21
 800cf58:	0800cf21 	.word	0x0800cf21
 800cf5c:	0800cf21 	.word	0x0800cf21
 800cf60:	0800cf21 	.word	0x0800cf21
 800cf64:	0800d0a5 	.word	0x0800d0a5
 800cf68:	0800cfcf 	.word	0x0800cfcf
 800cf6c:	0800d05f 	.word	0x0800d05f
 800cf70:	0800cf21 	.word	0x0800cf21
 800cf74:	0800cf21 	.word	0x0800cf21
 800cf78:	0800d0c7 	.word	0x0800d0c7
 800cf7c:	0800cf21 	.word	0x0800cf21
 800cf80:	0800cfcf 	.word	0x0800cfcf
 800cf84:	0800cf21 	.word	0x0800cf21
 800cf88:	0800cf21 	.word	0x0800cf21
 800cf8c:	0800d067 	.word	0x0800d067
 800cf90:	6833      	ldr	r3, [r6, #0]
 800cf92:	1d1a      	adds	r2, r3, #4
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	6032      	str	r2, [r6, #0]
 800cf98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e09d      	b.n	800d0e0 <_printf_i+0x1e8>
 800cfa4:	6833      	ldr	r3, [r6, #0]
 800cfa6:	6820      	ldr	r0, [r4, #0]
 800cfa8:	1d19      	adds	r1, r3, #4
 800cfaa:	6031      	str	r1, [r6, #0]
 800cfac:	0606      	lsls	r6, r0, #24
 800cfae:	d501      	bpl.n	800cfb4 <_printf_i+0xbc>
 800cfb0:	681d      	ldr	r5, [r3, #0]
 800cfb2:	e003      	b.n	800cfbc <_printf_i+0xc4>
 800cfb4:	0645      	lsls	r5, r0, #25
 800cfb6:	d5fb      	bpl.n	800cfb0 <_printf_i+0xb8>
 800cfb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cfbc:	2d00      	cmp	r5, #0
 800cfbe:	da03      	bge.n	800cfc8 <_printf_i+0xd0>
 800cfc0:	232d      	movs	r3, #45	@ 0x2d
 800cfc2:	426d      	negs	r5, r5
 800cfc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfc8:	4859      	ldr	r0, [pc, #356]	@ (800d130 <_printf_i+0x238>)
 800cfca:	230a      	movs	r3, #10
 800cfcc:	e011      	b.n	800cff2 <_printf_i+0xfa>
 800cfce:	6821      	ldr	r1, [r4, #0]
 800cfd0:	6833      	ldr	r3, [r6, #0]
 800cfd2:	0608      	lsls	r0, r1, #24
 800cfd4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cfd8:	d402      	bmi.n	800cfe0 <_printf_i+0xe8>
 800cfda:	0649      	lsls	r1, r1, #25
 800cfdc:	bf48      	it	mi
 800cfde:	b2ad      	uxthmi	r5, r5
 800cfe0:	2f6f      	cmp	r7, #111	@ 0x6f
 800cfe2:	4853      	ldr	r0, [pc, #332]	@ (800d130 <_printf_i+0x238>)
 800cfe4:	6033      	str	r3, [r6, #0]
 800cfe6:	bf14      	ite	ne
 800cfe8:	230a      	movne	r3, #10
 800cfea:	2308      	moveq	r3, #8
 800cfec:	2100      	movs	r1, #0
 800cfee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cff2:	6866      	ldr	r6, [r4, #4]
 800cff4:	60a6      	str	r6, [r4, #8]
 800cff6:	2e00      	cmp	r6, #0
 800cff8:	bfa2      	ittt	ge
 800cffa:	6821      	ldrge	r1, [r4, #0]
 800cffc:	f021 0104 	bicge.w	r1, r1, #4
 800d000:	6021      	strge	r1, [r4, #0]
 800d002:	b90d      	cbnz	r5, 800d008 <_printf_i+0x110>
 800d004:	2e00      	cmp	r6, #0
 800d006:	d04b      	beq.n	800d0a0 <_printf_i+0x1a8>
 800d008:	4616      	mov	r6, r2
 800d00a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d00e:	fb03 5711 	mls	r7, r3, r1, r5
 800d012:	5dc7      	ldrb	r7, [r0, r7]
 800d014:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d018:	462f      	mov	r7, r5
 800d01a:	42bb      	cmp	r3, r7
 800d01c:	460d      	mov	r5, r1
 800d01e:	d9f4      	bls.n	800d00a <_printf_i+0x112>
 800d020:	2b08      	cmp	r3, #8
 800d022:	d10b      	bne.n	800d03c <_printf_i+0x144>
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	07df      	lsls	r7, r3, #31
 800d028:	d508      	bpl.n	800d03c <_printf_i+0x144>
 800d02a:	6923      	ldr	r3, [r4, #16]
 800d02c:	6861      	ldr	r1, [r4, #4]
 800d02e:	4299      	cmp	r1, r3
 800d030:	bfde      	ittt	le
 800d032:	2330      	movle	r3, #48	@ 0x30
 800d034:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d038:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d03c:	1b92      	subs	r2, r2, r6
 800d03e:	6122      	str	r2, [r4, #16]
 800d040:	f8cd a000 	str.w	sl, [sp]
 800d044:	464b      	mov	r3, r9
 800d046:	aa03      	add	r2, sp, #12
 800d048:	4621      	mov	r1, r4
 800d04a:	4640      	mov	r0, r8
 800d04c:	f7ff fee6 	bl	800ce1c <_printf_common>
 800d050:	3001      	adds	r0, #1
 800d052:	d14a      	bne.n	800d0ea <_printf_i+0x1f2>
 800d054:	f04f 30ff 	mov.w	r0, #4294967295
 800d058:	b004      	add	sp, #16
 800d05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d05e:	6823      	ldr	r3, [r4, #0]
 800d060:	f043 0320 	orr.w	r3, r3, #32
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	4833      	ldr	r0, [pc, #204]	@ (800d134 <_printf_i+0x23c>)
 800d068:	2778      	movs	r7, #120	@ 0x78
 800d06a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	6831      	ldr	r1, [r6, #0]
 800d072:	061f      	lsls	r7, r3, #24
 800d074:	f851 5b04 	ldr.w	r5, [r1], #4
 800d078:	d402      	bmi.n	800d080 <_printf_i+0x188>
 800d07a:	065f      	lsls	r7, r3, #25
 800d07c:	bf48      	it	mi
 800d07e:	b2ad      	uxthmi	r5, r5
 800d080:	6031      	str	r1, [r6, #0]
 800d082:	07d9      	lsls	r1, r3, #31
 800d084:	bf44      	itt	mi
 800d086:	f043 0320 	orrmi.w	r3, r3, #32
 800d08a:	6023      	strmi	r3, [r4, #0]
 800d08c:	b11d      	cbz	r5, 800d096 <_printf_i+0x19e>
 800d08e:	2310      	movs	r3, #16
 800d090:	e7ac      	b.n	800cfec <_printf_i+0xf4>
 800d092:	4827      	ldr	r0, [pc, #156]	@ (800d130 <_printf_i+0x238>)
 800d094:	e7e9      	b.n	800d06a <_printf_i+0x172>
 800d096:	6823      	ldr	r3, [r4, #0]
 800d098:	f023 0320 	bic.w	r3, r3, #32
 800d09c:	6023      	str	r3, [r4, #0]
 800d09e:	e7f6      	b.n	800d08e <_printf_i+0x196>
 800d0a0:	4616      	mov	r6, r2
 800d0a2:	e7bd      	b.n	800d020 <_printf_i+0x128>
 800d0a4:	6833      	ldr	r3, [r6, #0]
 800d0a6:	6825      	ldr	r5, [r4, #0]
 800d0a8:	6961      	ldr	r1, [r4, #20]
 800d0aa:	1d18      	adds	r0, r3, #4
 800d0ac:	6030      	str	r0, [r6, #0]
 800d0ae:	062e      	lsls	r6, r5, #24
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	d501      	bpl.n	800d0b8 <_printf_i+0x1c0>
 800d0b4:	6019      	str	r1, [r3, #0]
 800d0b6:	e002      	b.n	800d0be <_printf_i+0x1c6>
 800d0b8:	0668      	lsls	r0, r5, #25
 800d0ba:	d5fb      	bpl.n	800d0b4 <_printf_i+0x1bc>
 800d0bc:	8019      	strh	r1, [r3, #0]
 800d0be:	2300      	movs	r3, #0
 800d0c0:	6123      	str	r3, [r4, #16]
 800d0c2:	4616      	mov	r6, r2
 800d0c4:	e7bc      	b.n	800d040 <_printf_i+0x148>
 800d0c6:	6833      	ldr	r3, [r6, #0]
 800d0c8:	1d1a      	adds	r2, r3, #4
 800d0ca:	6032      	str	r2, [r6, #0]
 800d0cc:	681e      	ldr	r6, [r3, #0]
 800d0ce:	6862      	ldr	r2, [r4, #4]
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f7f3 f91c 	bl	8000310 <memchr>
 800d0d8:	b108      	cbz	r0, 800d0de <_printf_i+0x1e6>
 800d0da:	1b80      	subs	r0, r0, r6
 800d0dc:	6060      	str	r0, [r4, #4]
 800d0de:	6863      	ldr	r3, [r4, #4]
 800d0e0:	6123      	str	r3, [r4, #16]
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0e8:	e7aa      	b.n	800d040 <_printf_i+0x148>
 800d0ea:	6923      	ldr	r3, [r4, #16]
 800d0ec:	4632      	mov	r2, r6
 800d0ee:	4649      	mov	r1, r9
 800d0f0:	4640      	mov	r0, r8
 800d0f2:	47d0      	blx	sl
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	d0ad      	beq.n	800d054 <_printf_i+0x15c>
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	079b      	lsls	r3, r3, #30
 800d0fc:	d413      	bmi.n	800d126 <_printf_i+0x22e>
 800d0fe:	68e0      	ldr	r0, [r4, #12]
 800d100:	9b03      	ldr	r3, [sp, #12]
 800d102:	4298      	cmp	r0, r3
 800d104:	bfb8      	it	lt
 800d106:	4618      	movlt	r0, r3
 800d108:	e7a6      	b.n	800d058 <_printf_i+0x160>
 800d10a:	2301      	movs	r3, #1
 800d10c:	4632      	mov	r2, r6
 800d10e:	4649      	mov	r1, r9
 800d110:	4640      	mov	r0, r8
 800d112:	47d0      	blx	sl
 800d114:	3001      	adds	r0, #1
 800d116:	d09d      	beq.n	800d054 <_printf_i+0x15c>
 800d118:	3501      	adds	r5, #1
 800d11a:	68e3      	ldr	r3, [r4, #12]
 800d11c:	9903      	ldr	r1, [sp, #12]
 800d11e:	1a5b      	subs	r3, r3, r1
 800d120:	42ab      	cmp	r3, r5
 800d122:	dcf2      	bgt.n	800d10a <_printf_i+0x212>
 800d124:	e7eb      	b.n	800d0fe <_printf_i+0x206>
 800d126:	2500      	movs	r5, #0
 800d128:	f104 0619 	add.w	r6, r4, #25
 800d12c:	e7f5      	b.n	800d11a <_printf_i+0x222>
 800d12e:	bf00      	nop
 800d130:	08010d82 	.word	0x08010d82
 800d134:	08010d93 	.word	0x08010d93

0800d138 <_scanf_float>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	b087      	sub	sp, #28
 800d13e:	4617      	mov	r7, r2
 800d140:	9303      	str	r3, [sp, #12]
 800d142:	688b      	ldr	r3, [r1, #8]
 800d144:	1e5a      	subs	r2, r3, #1
 800d146:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d14a:	bf81      	itttt	hi
 800d14c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d150:	eb03 0b05 	addhi.w	fp, r3, r5
 800d154:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d158:	608b      	strhi	r3, [r1, #8]
 800d15a:	680b      	ldr	r3, [r1, #0]
 800d15c:	460a      	mov	r2, r1
 800d15e:	f04f 0500 	mov.w	r5, #0
 800d162:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d166:	f842 3b1c 	str.w	r3, [r2], #28
 800d16a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d16e:	4680      	mov	r8, r0
 800d170:	460c      	mov	r4, r1
 800d172:	bf98      	it	ls
 800d174:	f04f 0b00 	movls.w	fp, #0
 800d178:	9201      	str	r2, [sp, #4]
 800d17a:	4616      	mov	r6, r2
 800d17c:	46aa      	mov	sl, r5
 800d17e:	46a9      	mov	r9, r5
 800d180:	9502      	str	r5, [sp, #8]
 800d182:	68a2      	ldr	r2, [r4, #8]
 800d184:	b152      	cbz	r2, 800d19c <_scanf_float+0x64>
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	2b4e      	cmp	r3, #78	@ 0x4e
 800d18c:	d864      	bhi.n	800d258 <_scanf_float+0x120>
 800d18e:	2b40      	cmp	r3, #64	@ 0x40
 800d190:	d83c      	bhi.n	800d20c <_scanf_float+0xd4>
 800d192:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d196:	b2c8      	uxtb	r0, r1
 800d198:	280e      	cmp	r0, #14
 800d19a:	d93a      	bls.n	800d212 <_scanf_float+0xda>
 800d19c:	f1b9 0f00 	cmp.w	r9, #0
 800d1a0:	d003      	beq.n	800d1aa <_scanf_float+0x72>
 800d1a2:	6823      	ldr	r3, [r4, #0]
 800d1a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1ae:	f1ba 0f01 	cmp.w	sl, #1
 800d1b2:	f200 8117 	bhi.w	800d3e4 <_scanf_float+0x2ac>
 800d1b6:	9b01      	ldr	r3, [sp, #4]
 800d1b8:	429e      	cmp	r6, r3
 800d1ba:	f200 8108 	bhi.w	800d3ce <_scanf_float+0x296>
 800d1be:	2001      	movs	r0, #1
 800d1c0:	b007      	add	sp, #28
 800d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d1ca:	2a0d      	cmp	r2, #13
 800d1cc:	d8e6      	bhi.n	800d19c <_scanf_float+0x64>
 800d1ce:	a101      	add	r1, pc, #4	@ (adr r1, 800d1d4 <_scanf_float+0x9c>)
 800d1d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d1d4:	0800d31b 	.word	0x0800d31b
 800d1d8:	0800d19d 	.word	0x0800d19d
 800d1dc:	0800d19d 	.word	0x0800d19d
 800d1e0:	0800d19d 	.word	0x0800d19d
 800d1e4:	0800d37b 	.word	0x0800d37b
 800d1e8:	0800d353 	.word	0x0800d353
 800d1ec:	0800d19d 	.word	0x0800d19d
 800d1f0:	0800d19d 	.word	0x0800d19d
 800d1f4:	0800d329 	.word	0x0800d329
 800d1f8:	0800d19d 	.word	0x0800d19d
 800d1fc:	0800d19d 	.word	0x0800d19d
 800d200:	0800d19d 	.word	0x0800d19d
 800d204:	0800d19d 	.word	0x0800d19d
 800d208:	0800d2e1 	.word	0x0800d2e1
 800d20c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d210:	e7db      	b.n	800d1ca <_scanf_float+0x92>
 800d212:	290e      	cmp	r1, #14
 800d214:	d8c2      	bhi.n	800d19c <_scanf_float+0x64>
 800d216:	a001      	add	r0, pc, #4	@ (adr r0, 800d21c <_scanf_float+0xe4>)
 800d218:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d21c:	0800d2d1 	.word	0x0800d2d1
 800d220:	0800d19d 	.word	0x0800d19d
 800d224:	0800d2d1 	.word	0x0800d2d1
 800d228:	0800d367 	.word	0x0800d367
 800d22c:	0800d19d 	.word	0x0800d19d
 800d230:	0800d279 	.word	0x0800d279
 800d234:	0800d2b7 	.word	0x0800d2b7
 800d238:	0800d2b7 	.word	0x0800d2b7
 800d23c:	0800d2b7 	.word	0x0800d2b7
 800d240:	0800d2b7 	.word	0x0800d2b7
 800d244:	0800d2b7 	.word	0x0800d2b7
 800d248:	0800d2b7 	.word	0x0800d2b7
 800d24c:	0800d2b7 	.word	0x0800d2b7
 800d250:	0800d2b7 	.word	0x0800d2b7
 800d254:	0800d2b7 	.word	0x0800d2b7
 800d258:	2b6e      	cmp	r3, #110	@ 0x6e
 800d25a:	d809      	bhi.n	800d270 <_scanf_float+0x138>
 800d25c:	2b60      	cmp	r3, #96	@ 0x60
 800d25e:	d8b2      	bhi.n	800d1c6 <_scanf_float+0x8e>
 800d260:	2b54      	cmp	r3, #84	@ 0x54
 800d262:	d07b      	beq.n	800d35c <_scanf_float+0x224>
 800d264:	2b59      	cmp	r3, #89	@ 0x59
 800d266:	d199      	bne.n	800d19c <_scanf_float+0x64>
 800d268:	2d07      	cmp	r5, #7
 800d26a:	d197      	bne.n	800d19c <_scanf_float+0x64>
 800d26c:	2508      	movs	r5, #8
 800d26e:	e02c      	b.n	800d2ca <_scanf_float+0x192>
 800d270:	2b74      	cmp	r3, #116	@ 0x74
 800d272:	d073      	beq.n	800d35c <_scanf_float+0x224>
 800d274:	2b79      	cmp	r3, #121	@ 0x79
 800d276:	e7f6      	b.n	800d266 <_scanf_float+0x12e>
 800d278:	6821      	ldr	r1, [r4, #0]
 800d27a:	05c8      	lsls	r0, r1, #23
 800d27c:	d51b      	bpl.n	800d2b6 <_scanf_float+0x17e>
 800d27e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d282:	6021      	str	r1, [r4, #0]
 800d284:	f109 0901 	add.w	r9, r9, #1
 800d288:	f1bb 0f00 	cmp.w	fp, #0
 800d28c:	d003      	beq.n	800d296 <_scanf_float+0x15e>
 800d28e:	3201      	adds	r2, #1
 800d290:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d294:	60a2      	str	r2, [r4, #8]
 800d296:	68a3      	ldr	r3, [r4, #8]
 800d298:	3b01      	subs	r3, #1
 800d29a:	60a3      	str	r3, [r4, #8]
 800d29c:	6923      	ldr	r3, [r4, #16]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	6123      	str	r3, [r4, #16]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	607b      	str	r3, [r7, #4]
 800d2aa:	f340 8087 	ble.w	800d3bc <_scanf_float+0x284>
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	603b      	str	r3, [r7, #0]
 800d2b4:	e765      	b.n	800d182 <_scanf_float+0x4a>
 800d2b6:	eb1a 0105 	adds.w	r1, sl, r5
 800d2ba:	f47f af6f 	bne.w	800d19c <_scanf_float+0x64>
 800d2be:	6822      	ldr	r2, [r4, #0]
 800d2c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d2c4:	6022      	str	r2, [r4, #0]
 800d2c6:	460d      	mov	r5, r1
 800d2c8:	468a      	mov	sl, r1
 800d2ca:	f806 3b01 	strb.w	r3, [r6], #1
 800d2ce:	e7e2      	b.n	800d296 <_scanf_float+0x15e>
 800d2d0:	6822      	ldr	r2, [r4, #0]
 800d2d2:	0610      	lsls	r0, r2, #24
 800d2d4:	f57f af62 	bpl.w	800d19c <_scanf_float+0x64>
 800d2d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d2dc:	6022      	str	r2, [r4, #0]
 800d2de:	e7f4      	b.n	800d2ca <_scanf_float+0x192>
 800d2e0:	f1ba 0f00 	cmp.w	sl, #0
 800d2e4:	d10e      	bne.n	800d304 <_scanf_float+0x1cc>
 800d2e6:	f1b9 0f00 	cmp.w	r9, #0
 800d2ea:	d10e      	bne.n	800d30a <_scanf_float+0x1d2>
 800d2ec:	6822      	ldr	r2, [r4, #0]
 800d2ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d2f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d2f6:	d108      	bne.n	800d30a <_scanf_float+0x1d2>
 800d2f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d2fc:	6022      	str	r2, [r4, #0]
 800d2fe:	f04f 0a01 	mov.w	sl, #1
 800d302:	e7e2      	b.n	800d2ca <_scanf_float+0x192>
 800d304:	f1ba 0f02 	cmp.w	sl, #2
 800d308:	d055      	beq.n	800d3b6 <_scanf_float+0x27e>
 800d30a:	2d01      	cmp	r5, #1
 800d30c:	d002      	beq.n	800d314 <_scanf_float+0x1dc>
 800d30e:	2d04      	cmp	r5, #4
 800d310:	f47f af44 	bne.w	800d19c <_scanf_float+0x64>
 800d314:	3501      	adds	r5, #1
 800d316:	b2ed      	uxtb	r5, r5
 800d318:	e7d7      	b.n	800d2ca <_scanf_float+0x192>
 800d31a:	f1ba 0f01 	cmp.w	sl, #1
 800d31e:	f47f af3d 	bne.w	800d19c <_scanf_float+0x64>
 800d322:	f04f 0a02 	mov.w	sl, #2
 800d326:	e7d0      	b.n	800d2ca <_scanf_float+0x192>
 800d328:	b97d      	cbnz	r5, 800d34a <_scanf_float+0x212>
 800d32a:	f1b9 0f00 	cmp.w	r9, #0
 800d32e:	f47f af38 	bne.w	800d1a2 <_scanf_float+0x6a>
 800d332:	6822      	ldr	r2, [r4, #0]
 800d334:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d338:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d33c:	f040 8101 	bne.w	800d542 <_scanf_float+0x40a>
 800d340:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d344:	6022      	str	r2, [r4, #0]
 800d346:	2501      	movs	r5, #1
 800d348:	e7bf      	b.n	800d2ca <_scanf_float+0x192>
 800d34a:	2d03      	cmp	r5, #3
 800d34c:	d0e2      	beq.n	800d314 <_scanf_float+0x1dc>
 800d34e:	2d05      	cmp	r5, #5
 800d350:	e7de      	b.n	800d310 <_scanf_float+0x1d8>
 800d352:	2d02      	cmp	r5, #2
 800d354:	f47f af22 	bne.w	800d19c <_scanf_float+0x64>
 800d358:	2503      	movs	r5, #3
 800d35a:	e7b6      	b.n	800d2ca <_scanf_float+0x192>
 800d35c:	2d06      	cmp	r5, #6
 800d35e:	f47f af1d 	bne.w	800d19c <_scanf_float+0x64>
 800d362:	2507      	movs	r5, #7
 800d364:	e7b1      	b.n	800d2ca <_scanf_float+0x192>
 800d366:	6822      	ldr	r2, [r4, #0]
 800d368:	0591      	lsls	r1, r2, #22
 800d36a:	f57f af17 	bpl.w	800d19c <_scanf_float+0x64>
 800d36e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d372:	6022      	str	r2, [r4, #0]
 800d374:	f8cd 9008 	str.w	r9, [sp, #8]
 800d378:	e7a7      	b.n	800d2ca <_scanf_float+0x192>
 800d37a:	6822      	ldr	r2, [r4, #0]
 800d37c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d380:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d384:	d006      	beq.n	800d394 <_scanf_float+0x25c>
 800d386:	0550      	lsls	r0, r2, #21
 800d388:	f57f af08 	bpl.w	800d19c <_scanf_float+0x64>
 800d38c:	f1b9 0f00 	cmp.w	r9, #0
 800d390:	f000 80d7 	beq.w	800d542 <_scanf_float+0x40a>
 800d394:	0591      	lsls	r1, r2, #22
 800d396:	bf58      	it	pl
 800d398:	9902      	ldrpl	r1, [sp, #8]
 800d39a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d39e:	bf58      	it	pl
 800d3a0:	eba9 0101 	subpl.w	r1, r9, r1
 800d3a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d3a8:	bf58      	it	pl
 800d3aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d3ae:	6022      	str	r2, [r4, #0]
 800d3b0:	f04f 0900 	mov.w	r9, #0
 800d3b4:	e789      	b.n	800d2ca <_scanf_float+0x192>
 800d3b6:	f04f 0a03 	mov.w	sl, #3
 800d3ba:	e786      	b.n	800d2ca <_scanf_float+0x192>
 800d3bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d3c0:	4639      	mov	r1, r7
 800d3c2:	4640      	mov	r0, r8
 800d3c4:	4798      	blx	r3
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f43f aedb 	beq.w	800d182 <_scanf_float+0x4a>
 800d3cc:	e6e6      	b.n	800d19c <_scanf_float+0x64>
 800d3ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d3d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d3d6:	463a      	mov	r2, r7
 800d3d8:	4640      	mov	r0, r8
 800d3da:	4798      	blx	r3
 800d3dc:	6923      	ldr	r3, [r4, #16]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	6123      	str	r3, [r4, #16]
 800d3e2:	e6e8      	b.n	800d1b6 <_scanf_float+0x7e>
 800d3e4:	1e6b      	subs	r3, r5, #1
 800d3e6:	2b06      	cmp	r3, #6
 800d3e8:	d824      	bhi.n	800d434 <_scanf_float+0x2fc>
 800d3ea:	2d02      	cmp	r5, #2
 800d3ec:	d836      	bhi.n	800d45c <_scanf_float+0x324>
 800d3ee:	9b01      	ldr	r3, [sp, #4]
 800d3f0:	429e      	cmp	r6, r3
 800d3f2:	f67f aee4 	bls.w	800d1be <_scanf_float+0x86>
 800d3f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d3fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d3fe:	463a      	mov	r2, r7
 800d400:	4640      	mov	r0, r8
 800d402:	4798      	blx	r3
 800d404:	6923      	ldr	r3, [r4, #16]
 800d406:	3b01      	subs	r3, #1
 800d408:	6123      	str	r3, [r4, #16]
 800d40a:	e7f0      	b.n	800d3ee <_scanf_float+0x2b6>
 800d40c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d410:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d414:	463a      	mov	r2, r7
 800d416:	4640      	mov	r0, r8
 800d418:	4798      	blx	r3
 800d41a:	6923      	ldr	r3, [r4, #16]
 800d41c:	3b01      	subs	r3, #1
 800d41e:	6123      	str	r3, [r4, #16]
 800d420:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d424:	fa5f fa8a 	uxtb.w	sl, sl
 800d428:	f1ba 0f02 	cmp.w	sl, #2
 800d42c:	d1ee      	bne.n	800d40c <_scanf_float+0x2d4>
 800d42e:	3d03      	subs	r5, #3
 800d430:	b2ed      	uxtb	r5, r5
 800d432:	1b76      	subs	r6, r6, r5
 800d434:	6823      	ldr	r3, [r4, #0]
 800d436:	05da      	lsls	r2, r3, #23
 800d438:	d530      	bpl.n	800d49c <_scanf_float+0x364>
 800d43a:	055b      	lsls	r3, r3, #21
 800d43c:	d511      	bpl.n	800d462 <_scanf_float+0x32a>
 800d43e:	9b01      	ldr	r3, [sp, #4]
 800d440:	429e      	cmp	r6, r3
 800d442:	f67f aebc 	bls.w	800d1be <_scanf_float+0x86>
 800d446:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d44a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d44e:	463a      	mov	r2, r7
 800d450:	4640      	mov	r0, r8
 800d452:	4798      	blx	r3
 800d454:	6923      	ldr	r3, [r4, #16]
 800d456:	3b01      	subs	r3, #1
 800d458:	6123      	str	r3, [r4, #16]
 800d45a:	e7f0      	b.n	800d43e <_scanf_float+0x306>
 800d45c:	46aa      	mov	sl, r5
 800d45e:	46b3      	mov	fp, r6
 800d460:	e7de      	b.n	800d420 <_scanf_float+0x2e8>
 800d462:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d466:	6923      	ldr	r3, [r4, #16]
 800d468:	2965      	cmp	r1, #101	@ 0x65
 800d46a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d46e:	f106 35ff 	add.w	r5, r6, #4294967295
 800d472:	6123      	str	r3, [r4, #16]
 800d474:	d00c      	beq.n	800d490 <_scanf_float+0x358>
 800d476:	2945      	cmp	r1, #69	@ 0x45
 800d478:	d00a      	beq.n	800d490 <_scanf_float+0x358>
 800d47a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d47e:	463a      	mov	r2, r7
 800d480:	4640      	mov	r0, r8
 800d482:	4798      	blx	r3
 800d484:	6923      	ldr	r3, [r4, #16]
 800d486:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d48a:	3b01      	subs	r3, #1
 800d48c:	1eb5      	subs	r5, r6, #2
 800d48e:	6123      	str	r3, [r4, #16]
 800d490:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d494:	463a      	mov	r2, r7
 800d496:	4640      	mov	r0, r8
 800d498:	4798      	blx	r3
 800d49a:	462e      	mov	r6, r5
 800d49c:	6822      	ldr	r2, [r4, #0]
 800d49e:	f012 0210 	ands.w	r2, r2, #16
 800d4a2:	d001      	beq.n	800d4a8 <_scanf_float+0x370>
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	e68b      	b.n	800d1c0 <_scanf_float+0x88>
 800d4a8:	7032      	strb	r2, [r6, #0]
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d4b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4b4:	d11a      	bne.n	800d4ec <_scanf_float+0x3b4>
 800d4b6:	9b02      	ldr	r3, [sp, #8]
 800d4b8:	454b      	cmp	r3, r9
 800d4ba:	eba3 0209 	sub.w	r2, r3, r9
 800d4be:	d121      	bne.n	800d504 <_scanf_float+0x3cc>
 800d4c0:	9901      	ldr	r1, [sp, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	4640      	mov	r0, r8
 800d4c6:	f002 fb51 	bl	800fb6c <_strtod_r>
 800d4ca:	9b03      	ldr	r3, [sp, #12]
 800d4cc:	6821      	ldr	r1, [r4, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f011 0f02 	tst.w	r1, #2
 800d4d4:	f103 0204 	add.w	r2, r3, #4
 800d4d8:	d01f      	beq.n	800d51a <_scanf_float+0x3e2>
 800d4da:	9903      	ldr	r1, [sp, #12]
 800d4dc:	600a      	str	r2, [r1, #0]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	ed83 0b00 	vstr	d0, [r3]
 800d4e4:	68e3      	ldr	r3, [r4, #12]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	60e3      	str	r3, [r4, #12]
 800d4ea:	e7db      	b.n	800d4a4 <_scanf_float+0x36c>
 800d4ec:	9b04      	ldr	r3, [sp, #16]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d0e6      	beq.n	800d4c0 <_scanf_float+0x388>
 800d4f2:	9905      	ldr	r1, [sp, #20]
 800d4f4:	230a      	movs	r3, #10
 800d4f6:	3101      	adds	r1, #1
 800d4f8:	4640      	mov	r0, r8
 800d4fa:	f002 fbb7 	bl	800fc6c <_strtol_r>
 800d4fe:	9b04      	ldr	r3, [sp, #16]
 800d500:	9e05      	ldr	r6, [sp, #20]
 800d502:	1ac2      	subs	r2, r0, r3
 800d504:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d508:	429e      	cmp	r6, r3
 800d50a:	bf28      	it	cs
 800d50c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d510:	490d      	ldr	r1, [pc, #52]	@ (800d548 <_scanf_float+0x410>)
 800d512:	4630      	mov	r0, r6
 800d514:	f000 f8f0 	bl	800d6f8 <siprintf>
 800d518:	e7d2      	b.n	800d4c0 <_scanf_float+0x388>
 800d51a:	f011 0f04 	tst.w	r1, #4
 800d51e:	9903      	ldr	r1, [sp, #12]
 800d520:	600a      	str	r2, [r1, #0]
 800d522:	d1dc      	bne.n	800d4de <_scanf_float+0x3a6>
 800d524:	eeb4 0b40 	vcmp.f64	d0, d0
 800d528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d52c:	681d      	ldr	r5, [r3, #0]
 800d52e:	d705      	bvc.n	800d53c <_scanf_float+0x404>
 800d530:	4806      	ldr	r0, [pc, #24]	@ (800d54c <_scanf_float+0x414>)
 800d532:	f000 fa89 	bl	800da48 <nanf>
 800d536:	ed85 0a00 	vstr	s0, [r5]
 800d53a:	e7d3      	b.n	800d4e4 <_scanf_float+0x3ac>
 800d53c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d540:	e7f9      	b.n	800d536 <_scanf_float+0x3fe>
 800d542:	f04f 0900 	mov.w	r9, #0
 800d546:	e630      	b.n	800d1aa <_scanf_float+0x72>
 800d548:	08010da4 	.word	0x08010da4
 800d54c:	0801113d 	.word	0x0801113d

0800d550 <std>:
 800d550:	2300      	movs	r3, #0
 800d552:	b510      	push	{r4, lr}
 800d554:	4604      	mov	r4, r0
 800d556:	e9c0 3300 	strd	r3, r3, [r0]
 800d55a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d55e:	6083      	str	r3, [r0, #8]
 800d560:	8181      	strh	r1, [r0, #12]
 800d562:	6643      	str	r3, [r0, #100]	@ 0x64
 800d564:	81c2      	strh	r2, [r0, #14]
 800d566:	6183      	str	r3, [r0, #24]
 800d568:	4619      	mov	r1, r3
 800d56a:	2208      	movs	r2, #8
 800d56c:	305c      	adds	r0, #92	@ 0x5c
 800d56e:	f000 f9bb 	bl	800d8e8 <memset>
 800d572:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a8 <std+0x58>)
 800d574:	6263      	str	r3, [r4, #36]	@ 0x24
 800d576:	4b0d      	ldr	r3, [pc, #52]	@ (800d5ac <std+0x5c>)
 800d578:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d57a:	4b0d      	ldr	r3, [pc, #52]	@ (800d5b0 <std+0x60>)
 800d57c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d57e:	4b0d      	ldr	r3, [pc, #52]	@ (800d5b4 <std+0x64>)
 800d580:	6323      	str	r3, [r4, #48]	@ 0x30
 800d582:	4b0d      	ldr	r3, [pc, #52]	@ (800d5b8 <std+0x68>)
 800d584:	6224      	str	r4, [r4, #32]
 800d586:	429c      	cmp	r4, r3
 800d588:	d006      	beq.n	800d598 <std+0x48>
 800d58a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d58e:	4294      	cmp	r4, r2
 800d590:	d002      	beq.n	800d598 <std+0x48>
 800d592:	33d0      	adds	r3, #208	@ 0xd0
 800d594:	429c      	cmp	r4, r3
 800d596:	d105      	bne.n	800d5a4 <std+0x54>
 800d598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5a0:	f000 ba40 	b.w	800da24 <__retarget_lock_init_recursive>
 800d5a4:	bd10      	pop	{r4, pc}
 800d5a6:	bf00      	nop
 800d5a8:	0800d739 	.word	0x0800d739
 800d5ac:	0800d75b 	.word	0x0800d75b
 800d5b0:	0800d793 	.word	0x0800d793
 800d5b4:	0800d7b7 	.word	0x0800d7b7
 800d5b8:	24000820 	.word	0x24000820

0800d5bc <stdio_exit_handler>:
 800d5bc:	4a02      	ldr	r2, [pc, #8]	@ (800d5c8 <stdio_exit_handler+0xc>)
 800d5be:	4903      	ldr	r1, [pc, #12]	@ (800d5cc <stdio_exit_handler+0x10>)
 800d5c0:	4803      	ldr	r0, [pc, #12]	@ (800d5d0 <stdio_exit_handler+0x14>)
 800d5c2:	f000 b869 	b.w	800d698 <_fwalk_sglue>
 800d5c6:	bf00      	nop
 800d5c8:	24000010 	.word	0x24000010
 800d5cc:	080102ad 	.word	0x080102ad
 800d5d0:	24000020 	.word	0x24000020

0800d5d4 <cleanup_stdio>:
 800d5d4:	6841      	ldr	r1, [r0, #4]
 800d5d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d608 <cleanup_stdio+0x34>)
 800d5d8:	4299      	cmp	r1, r3
 800d5da:	b510      	push	{r4, lr}
 800d5dc:	4604      	mov	r4, r0
 800d5de:	d001      	beq.n	800d5e4 <cleanup_stdio+0x10>
 800d5e0:	f002 fe64 	bl	80102ac <_fflush_r>
 800d5e4:	68a1      	ldr	r1, [r4, #8]
 800d5e6:	4b09      	ldr	r3, [pc, #36]	@ (800d60c <cleanup_stdio+0x38>)
 800d5e8:	4299      	cmp	r1, r3
 800d5ea:	d002      	beq.n	800d5f2 <cleanup_stdio+0x1e>
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f002 fe5d 	bl	80102ac <_fflush_r>
 800d5f2:	68e1      	ldr	r1, [r4, #12]
 800d5f4:	4b06      	ldr	r3, [pc, #24]	@ (800d610 <cleanup_stdio+0x3c>)
 800d5f6:	4299      	cmp	r1, r3
 800d5f8:	d004      	beq.n	800d604 <cleanup_stdio+0x30>
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d600:	f002 be54 	b.w	80102ac <_fflush_r>
 800d604:	bd10      	pop	{r4, pc}
 800d606:	bf00      	nop
 800d608:	24000820 	.word	0x24000820
 800d60c:	24000888 	.word	0x24000888
 800d610:	240008f0 	.word	0x240008f0

0800d614 <global_stdio_init.part.0>:
 800d614:	b510      	push	{r4, lr}
 800d616:	4b0b      	ldr	r3, [pc, #44]	@ (800d644 <global_stdio_init.part.0+0x30>)
 800d618:	4c0b      	ldr	r4, [pc, #44]	@ (800d648 <global_stdio_init.part.0+0x34>)
 800d61a:	4a0c      	ldr	r2, [pc, #48]	@ (800d64c <global_stdio_init.part.0+0x38>)
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	4620      	mov	r0, r4
 800d620:	2200      	movs	r2, #0
 800d622:	2104      	movs	r1, #4
 800d624:	f7ff ff94 	bl	800d550 <std>
 800d628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d62c:	2201      	movs	r2, #1
 800d62e:	2109      	movs	r1, #9
 800d630:	f7ff ff8e 	bl	800d550 <std>
 800d634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d638:	2202      	movs	r2, #2
 800d63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d63e:	2112      	movs	r1, #18
 800d640:	f7ff bf86 	b.w	800d550 <std>
 800d644:	24000958 	.word	0x24000958
 800d648:	24000820 	.word	0x24000820
 800d64c:	0800d5bd 	.word	0x0800d5bd

0800d650 <__sfp_lock_acquire>:
 800d650:	4801      	ldr	r0, [pc, #4]	@ (800d658 <__sfp_lock_acquire+0x8>)
 800d652:	f000 b9e8 	b.w	800da26 <__retarget_lock_acquire_recursive>
 800d656:	bf00      	nop
 800d658:	24000961 	.word	0x24000961

0800d65c <__sfp_lock_release>:
 800d65c:	4801      	ldr	r0, [pc, #4]	@ (800d664 <__sfp_lock_release+0x8>)
 800d65e:	f000 b9e3 	b.w	800da28 <__retarget_lock_release_recursive>
 800d662:	bf00      	nop
 800d664:	24000961 	.word	0x24000961

0800d668 <__sinit>:
 800d668:	b510      	push	{r4, lr}
 800d66a:	4604      	mov	r4, r0
 800d66c:	f7ff fff0 	bl	800d650 <__sfp_lock_acquire>
 800d670:	6a23      	ldr	r3, [r4, #32]
 800d672:	b11b      	cbz	r3, 800d67c <__sinit+0x14>
 800d674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d678:	f7ff bff0 	b.w	800d65c <__sfp_lock_release>
 800d67c:	4b04      	ldr	r3, [pc, #16]	@ (800d690 <__sinit+0x28>)
 800d67e:	6223      	str	r3, [r4, #32]
 800d680:	4b04      	ldr	r3, [pc, #16]	@ (800d694 <__sinit+0x2c>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1f5      	bne.n	800d674 <__sinit+0xc>
 800d688:	f7ff ffc4 	bl	800d614 <global_stdio_init.part.0>
 800d68c:	e7f2      	b.n	800d674 <__sinit+0xc>
 800d68e:	bf00      	nop
 800d690:	0800d5d5 	.word	0x0800d5d5
 800d694:	24000958 	.word	0x24000958

0800d698 <_fwalk_sglue>:
 800d698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d69c:	4607      	mov	r7, r0
 800d69e:	4688      	mov	r8, r1
 800d6a0:	4614      	mov	r4, r2
 800d6a2:	2600      	movs	r6, #0
 800d6a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6a8:	f1b9 0901 	subs.w	r9, r9, #1
 800d6ac:	d505      	bpl.n	800d6ba <_fwalk_sglue+0x22>
 800d6ae:	6824      	ldr	r4, [r4, #0]
 800d6b0:	2c00      	cmp	r4, #0
 800d6b2:	d1f7      	bne.n	800d6a4 <_fwalk_sglue+0xc>
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ba:	89ab      	ldrh	r3, [r5, #12]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d907      	bls.n	800d6d0 <_fwalk_sglue+0x38>
 800d6c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	d003      	beq.n	800d6d0 <_fwalk_sglue+0x38>
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	4638      	mov	r0, r7
 800d6cc:	47c0      	blx	r8
 800d6ce:	4306      	orrs	r6, r0
 800d6d0:	3568      	adds	r5, #104	@ 0x68
 800d6d2:	e7e9      	b.n	800d6a8 <_fwalk_sglue+0x10>

0800d6d4 <iprintf>:
 800d6d4:	b40f      	push	{r0, r1, r2, r3}
 800d6d6:	b507      	push	{r0, r1, r2, lr}
 800d6d8:	4906      	ldr	r1, [pc, #24]	@ (800d6f4 <iprintf+0x20>)
 800d6da:	ab04      	add	r3, sp, #16
 800d6dc:	6808      	ldr	r0, [r1, #0]
 800d6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6e2:	6881      	ldr	r1, [r0, #8]
 800d6e4:	9301      	str	r3, [sp, #4]
 800d6e6:	f002 fc45 	bl	800ff74 <_vfiprintf_r>
 800d6ea:	b003      	add	sp, #12
 800d6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6f0:	b004      	add	sp, #16
 800d6f2:	4770      	bx	lr
 800d6f4:	2400001c 	.word	0x2400001c

0800d6f8 <siprintf>:
 800d6f8:	b40e      	push	{r1, r2, r3}
 800d6fa:	b500      	push	{lr}
 800d6fc:	b09c      	sub	sp, #112	@ 0x70
 800d6fe:	ab1d      	add	r3, sp, #116	@ 0x74
 800d700:	9002      	str	r0, [sp, #8]
 800d702:	9006      	str	r0, [sp, #24]
 800d704:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d708:	4809      	ldr	r0, [pc, #36]	@ (800d730 <siprintf+0x38>)
 800d70a:	9107      	str	r1, [sp, #28]
 800d70c:	9104      	str	r1, [sp, #16]
 800d70e:	4909      	ldr	r1, [pc, #36]	@ (800d734 <siprintf+0x3c>)
 800d710:	f853 2b04 	ldr.w	r2, [r3], #4
 800d714:	9105      	str	r1, [sp, #20]
 800d716:	6800      	ldr	r0, [r0, #0]
 800d718:	9301      	str	r3, [sp, #4]
 800d71a:	a902      	add	r1, sp, #8
 800d71c:	f002 fb04 	bl	800fd28 <_svfiprintf_r>
 800d720:	9b02      	ldr	r3, [sp, #8]
 800d722:	2200      	movs	r2, #0
 800d724:	701a      	strb	r2, [r3, #0]
 800d726:	b01c      	add	sp, #112	@ 0x70
 800d728:	f85d eb04 	ldr.w	lr, [sp], #4
 800d72c:	b003      	add	sp, #12
 800d72e:	4770      	bx	lr
 800d730:	2400001c 	.word	0x2400001c
 800d734:	ffff0208 	.word	0xffff0208

0800d738 <__sread>:
 800d738:	b510      	push	{r4, lr}
 800d73a:	460c      	mov	r4, r1
 800d73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d740:	f000 f912 	bl	800d968 <_read_r>
 800d744:	2800      	cmp	r0, #0
 800d746:	bfab      	itete	ge
 800d748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d74a:	89a3      	ldrhlt	r3, [r4, #12]
 800d74c:	181b      	addge	r3, r3, r0
 800d74e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d752:	bfac      	ite	ge
 800d754:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d756:	81a3      	strhlt	r3, [r4, #12]
 800d758:	bd10      	pop	{r4, pc}

0800d75a <__swrite>:
 800d75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d75e:	461f      	mov	r7, r3
 800d760:	898b      	ldrh	r3, [r1, #12]
 800d762:	05db      	lsls	r3, r3, #23
 800d764:	4605      	mov	r5, r0
 800d766:	460c      	mov	r4, r1
 800d768:	4616      	mov	r6, r2
 800d76a:	d505      	bpl.n	800d778 <__swrite+0x1e>
 800d76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d770:	2302      	movs	r3, #2
 800d772:	2200      	movs	r2, #0
 800d774:	f000 f8e6 	bl	800d944 <_lseek_r>
 800d778:	89a3      	ldrh	r3, [r4, #12]
 800d77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d77e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d782:	81a3      	strh	r3, [r4, #12]
 800d784:	4632      	mov	r2, r6
 800d786:	463b      	mov	r3, r7
 800d788:	4628      	mov	r0, r5
 800d78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d78e:	f000 b90d 	b.w	800d9ac <_write_r>

0800d792 <__sseek>:
 800d792:	b510      	push	{r4, lr}
 800d794:	460c      	mov	r4, r1
 800d796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d79a:	f000 f8d3 	bl	800d944 <_lseek_r>
 800d79e:	1c43      	adds	r3, r0, #1
 800d7a0:	89a3      	ldrh	r3, [r4, #12]
 800d7a2:	bf15      	itete	ne
 800d7a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d7a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d7aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d7ae:	81a3      	strheq	r3, [r4, #12]
 800d7b0:	bf18      	it	ne
 800d7b2:	81a3      	strhne	r3, [r4, #12]
 800d7b4:	bd10      	pop	{r4, pc}

0800d7b6 <__sclose>:
 800d7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7ba:	f000 b8b3 	b.w	800d924 <_close_r>

0800d7be <__swbuf_r>:
 800d7be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c0:	460e      	mov	r6, r1
 800d7c2:	4614      	mov	r4, r2
 800d7c4:	4605      	mov	r5, r0
 800d7c6:	b118      	cbz	r0, 800d7d0 <__swbuf_r+0x12>
 800d7c8:	6a03      	ldr	r3, [r0, #32]
 800d7ca:	b90b      	cbnz	r3, 800d7d0 <__swbuf_r+0x12>
 800d7cc:	f7ff ff4c 	bl	800d668 <__sinit>
 800d7d0:	69a3      	ldr	r3, [r4, #24]
 800d7d2:	60a3      	str	r3, [r4, #8]
 800d7d4:	89a3      	ldrh	r3, [r4, #12]
 800d7d6:	071a      	lsls	r2, r3, #28
 800d7d8:	d501      	bpl.n	800d7de <__swbuf_r+0x20>
 800d7da:	6923      	ldr	r3, [r4, #16]
 800d7dc:	b943      	cbnz	r3, 800d7f0 <__swbuf_r+0x32>
 800d7de:	4621      	mov	r1, r4
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	f000 f82b 	bl	800d83c <__swsetup_r>
 800d7e6:	b118      	cbz	r0, 800d7f0 <__swbuf_r+0x32>
 800d7e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d7ec:	4638      	mov	r0, r7
 800d7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7f0:	6823      	ldr	r3, [r4, #0]
 800d7f2:	6922      	ldr	r2, [r4, #16]
 800d7f4:	1a98      	subs	r0, r3, r2
 800d7f6:	6963      	ldr	r3, [r4, #20]
 800d7f8:	b2f6      	uxtb	r6, r6
 800d7fa:	4283      	cmp	r3, r0
 800d7fc:	4637      	mov	r7, r6
 800d7fe:	dc05      	bgt.n	800d80c <__swbuf_r+0x4e>
 800d800:	4621      	mov	r1, r4
 800d802:	4628      	mov	r0, r5
 800d804:	f002 fd52 	bl	80102ac <_fflush_r>
 800d808:	2800      	cmp	r0, #0
 800d80a:	d1ed      	bne.n	800d7e8 <__swbuf_r+0x2a>
 800d80c:	68a3      	ldr	r3, [r4, #8]
 800d80e:	3b01      	subs	r3, #1
 800d810:	60a3      	str	r3, [r4, #8]
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	6022      	str	r2, [r4, #0]
 800d818:	701e      	strb	r6, [r3, #0]
 800d81a:	6962      	ldr	r2, [r4, #20]
 800d81c:	1c43      	adds	r3, r0, #1
 800d81e:	429a      	cmp	r2, r3
 800d820:	d004      	beq.n	800d82c <__swbuf_r+0x6e>
 800d822:	89a3      	ldrh	r3, [r4, #12]
 800d824:	07db      	lsls	r3, r3, #31
 800d826:	d5e1      	bpl.n	800d7ec <__swbuf_r+0x2e>
 800d828:	2e0a      	cmp	r6, #10
 800d82a:	d1df      	bne.n	800d7ec <__swbuf_r+0x2e>
 800d82c:	4621      	mov	r1, r4
 800d82e:	4628      	mov	r0, r5
 800d830:	f002 fd3c 	bl	80102ac <_fflush_r>
 800d834:	2800      	cmp	r0, #0
 800d836:	d0d9      	beq.n	800d7ec <__swbuf_r+0x2e>
 800d838:	e7d6      	b.n	800d7e8 <__swbuf_r+0x2a>
	...

0800d83c <__swsetup_r>:
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	4b29      	ldr	r3, [pc, #164]	@ (800d8e4 <__swsetup_r+0xa8>)
 800d840:	4605      	mov	r5, r0
 800d842:	6818      	ldr	r0, [r3, #0]
 800d844:	460c      	mov	r4, r1
 800d846:	b118      	cbz	r0, 800d850 <__swsetup_r+0x14>
 800d848:	6a03      	ldr	r3, [r0, #32]
 800d84a:	b90b      	cbnz	r3, 800d850 <__swsetup_r+0x14>
 800d84c:	f7ff ff0c 	bl	800d668 <__sinit>
 800d850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d854:	0719      	lsls	r1, r3, #28
 800d856:	d422      	bmi.n	800d89e <__swsetup_r+0x62>
 800d858:	06da      	lsls	r2, r3, #27
 800d85a:	d407      	bmi.n	800d86c <__swsetup_r+0x30>
 800d85c:	2209      	movs	r2, #9
 800d85e:	602a      	str	r2, [r5, #0]
 800d860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d864:	81a3      	strh	r3, [r4, #12]
 800d866:	f04f 30ff 	mov.w	r0, #4294967295
 800d86a:	e033      	b.n	800d8d4 <__swsetup_r+0x98>
 800d86c:	0758      	lsls	r0, r3, #29
 800d86e:	d512      	bpl.n	800d896 <__swsetup_r+0x5a>
 800d870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d872:	b141      	cbz	r1, 800d886 <__swsetup_r+0x4a>
 800d874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d878:	4299      	cmp	r1, r3
 800d87a:	d002      	beq.n	800d882 <__swsetup_r+0x46>
 800d87c:	4628      	mov	r0, r5
 800d87e:	f000 fec9 	bl	800e614 <_free_r>
 800d882:	2300      	movs	r3, #0
 800d884:	6363      	str	r3, [r4, #52]	@ 0x34
 800d886:	89a3      	ldrh	r3, [r4, #12]
 800d888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d88c:	81a3      	strh	r3, [r4, #12]
 800d88e:	2300      	movs	r3, #0
 800d890:	6063      	str	r3, [r4, #4]
 800d892:	6923      	ldr	r3, [r4, #16]
 800d894:	6023      	str	r3, [r4, #0]
 800d896:	89a3      	ldrh	r3, [r4, #12]
 800d898:	f043 0308 	orr.w	r3, r3, #8
 800d89c:	81a3      	strh	r3, [r4, #12]
 800d89e:	6923      	ldr	r3, [r4, #16]
 800d8a0:	b94b      	cbnz	r3, 800d8b6 <__swsetup_r+0x7a>
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d8a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8ac:	d003      	beq.n	800d8b6 <__swsetup_r+0x7a>
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	f002 fd49 	bl	8010348 <__smakebuf_r>
 800d8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ba:	f013 0201 	ands.w	r2, r3, #1
 800d8be:	d00a      	beq.n	800d8d6 <__swsetup_r+0x9a>
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	60a2      	str	r2, [r4, #8]
 800d8c4:	6962      	ldr	r2, [r4, #20]
 800d8c6:	4252      	negs	r2, r2
 800d8c8:	61a2      	str	r2, [r4, #24]
 800d8ca:	6922      	ldr	r2, [r4, #16]
 800d8cc:	b942      	cbnz	r2, 800d8e0 <__swsetup_r+0xa4>
 800d8ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d8d2:	d1c5      	bne.n	800d860 <__swsetup_r+0x24>
 800d8d4:	bd38      	pop	{r3, r4, r5, pc}
 800d8d6:	0799      	lsls	r1, r3, #30
 800d8d8:	bf58      	it	pl
 800d8da:	6962      	ldrpl	r2, [r4, #20]
 800d8dc:	60a2      	str	r2, [r4, #8]
 800d8de:	e7f4      	b.n	800d8ca <__swsetup_r+0x8e>
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	e7f7      	b.n	800d8d4 <__swsetup_r+0x98>
 800d8e4:	2400001c 	.word	0x2400001c

0800d8e8 <memset>:
 800d8e8:	4402      	add	r2, r0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d100      	bne.n	800d8f2 <memset+0xa>
 800d8f0:	4770      	bx	lr
 800d8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800d8f6:	e7f9      	b.n	800d8ec <memset+0x4>

0800d8f8 <strncmp>:
 800d8f8:	b510      	push	{r4, lr}
 800d8fa:	b16a      	cbz	r2, 800d918 <strncmp+0x20>
 800d8fc:	3901      	subs	r1, #1
 800d8fe:	1884      	adds	r4, r0, r2
 800d900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d904:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d908:	429a      	cmp	r2, r3
 800d90a:	d103      	bne.n	800d914 <strncmp+0x1c>
 800d90c:	42a0      	cmp	r0, r4
 800d90e:	d001      	beq.n	800d914 <strncmp+0x1c>
 800d910:	2a00      	cmp	r2, #0
 800d912:	d1f5      	bne.n	800d900 <strncmp+0x8>
 800d914:	1ad0      	subs	r0, r2, r3
 800d916:	bd10      	pop	{r4, pc}
 800d918:	4610      	mov	r0, r2
 800d91a:	e7fc      	b.n	800d916 <strncmp+0x1e>

0800d91c <_localeconv_r>:
 800d91c:	4800      	ldr	r0, [pc, #0]	@ (800d920 <_localeconv_r+0x4>)
 800d91e:	4770      	bx	lr
 800d920:	2400015c 	.word	0x2400015c

0800d924 <_close_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	4d06      	ldr	r5, [pc, #24]	@ (800d940 <_close_r+0x1c>)
 800d928:	2300      	movs	r3, #0
 800d92a:	4604      	mov	r4, r0
 800d92c:	4608      	mov	r0, r1
 800d92e:	602b      	str	r3, [r5, #0]
 800d930:	f7f4 fbc4 	bl	80020bc <_close>
 800d934:	1c43      	adds	r3, r0, #1
 800d936:	d102      	bne.n	800d93e <_close_r+0x1a>
 800d938:	682b      	ldr	r3, [r5, #0]
 800d93a:	b103      	cbz	r3, 800d93e <_close_r+0x1a>
 800d93c:	6023      	str	r3, [r4, #0]
 800d93e:	bd38      	pop	{r3, r4, r5, pc}
 800d940:	2400095c 	.word	0x2400095c

0800d944 <_lseek_r>:
 800d944:	b538      	push	{r3, r4, r5, lr}
 800d946:	4d07      	ldr	r5, [pc, #28]	@ (800d964 <_lseek_r+0x20>)
 800d948:	4604      	mov	r4, r0
 800d94a:	4608      	mov	r0, r1
 800d94c:	4611      	mov	r1, r2
 800d94e:	2200      	movs	r2, #0
 800d950:	602a      	str	r2, [r5, #0]
 800d952:	461a      	mov	r2, r3
 800d954:	f7f4 fbd9 	bl	800210a <_lseek>
 800d958:	1c43      	adds	r3, r0, #1
 800d95a:	d102      	bne.n	800d962 <_lseek_r+0x1e>
 800d95c:	682b      	ldr	r3, [r5, #0]
 800d95e:	b103      	cbz	r3, 800d962 <_lseek_r+0x1e>
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	bd38      	pop	{r3, r4, r5, pc}
 800d964:	2400095c 	.word	0x2400095c

0800d968 <_read_r>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4d07      	ldr	r5, [pc, #28]	@ (800d988 <_read_r+0x20>)
 800d96c:	4604      	mov	r4, r0
 800d96e:	4608      	mov	r0, r1
 800d970:	4611      	mov	r1, r2
 800d972:	2200      	movs	r2, #0
 800d974:	602a      	str	r2, [r5, #0]
 800d976:	461a      	mov	r2, r3
 800d978:	f7f4 fb83 	bl	8002082 <_read>
 800d97c:	1c43      	adds	r3, r0, #1
 800d97e:	d102      	bne.n	800d986 <_read_r+0x1e>
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	b103      	cbz	r3, 800d986 <_read_r+0x1e>
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	bd38      	pop	{r3, r4, r5, pc}
 800d988:	2400095c 	.word	0x2400095c

0800d98c <_sbrk_r>:
 800d98c:	b538      	push	{r3, r4, r5, lr}
 800d98e:	4d06      	ldr	r5, [pc, #24]	@ (800d9a8 <_sbrk_r+0x1c>)
 800d990:	2300      	movs	r3, #0
 800d992:	4604      	mov	r4, r0
 800d994:	4608      	mov	r0, r1
 800d996:	602b      	str	r3, [r5, #0]
 800d998:	f7f4 fbc4 	bl	8002124 <_sbrk>
 800d99c:	1c43      	adds	r3, r0, #1
 800d99e:	d102      	bne.n	800d9a6 <_sbrk_r+0x1a>
 800d9a0:	682b      	ldr	r3, [r5, #0]
 800d9a2:	b103      	cbz	r3, 800d9a6 <_sbrk_r+0x1a>
 800d9a4:	6023      	str	r3, [r4, #0]
 800d9a6:	bd38      	pop	{r3, r4, r5, pc}
 800d9a8:	2400095c 	.word	0x2400095c

0800d9ac <_write_r>:
 800d9ac:	b538      	push	{r3, r4, r5, lr}
 800d9ae:	4d07      	ldr	r5, [pc, #28]	@ (800d9cc <_write_r+0x20>)
 800d9b0:	4604      	mov	r4, r0
 800d9b2:	4608      	mov	r0, r1
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	602a      	str	r2, [r5, #0]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	f7f3 f893 	bl	8000ae6 <_write>
 800d9c0:	1c43      	adds	r3, r0, #1
 800d9c2:	d102      	bne.n	800d9ca <_write_r+0x1e>
 800d9c4:	682b      	ldr	r3, [r5, #0]
 800d9c6:	b103      	cbz	r3, 800d9ca <_write_r+0x1e>
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	bd38      	pop	{r3, r4, r5, pc}
 800d9cc:	2400095c 	.word	0x2400095c

0800d9d0 <__errno>:
 800d9d0:	4b01      	ldr	r3, [pc, #4]	@ (800d9d8 <__errno+0x8>)
 800d9d2:	6818      	ldr	r0, [r3, #0]
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	2400001c 	.word	0x2400001c

0800d9dc <__libc_init_array>:
 800d9dc:	b570      	push	{r4, r5, r6, lr}
 800d9de:	4d0d      	ldr	r5, [pc, #52]	@ (800da14 <__libc_init_array+0x38>)
 800d9e0:	4c0d      	ldr	r4, [pc, #52]	@ (800da18 <__libc_init_array+0x3c>)
 800d9e2:	1b64      	subs	r4, r4, r5
 800d9e4:	10a4      	asrs	r4, r4, #2
 800d9e6:	2600      	movs	r6, #0
 800d9e8:	42a6      	cmp	r6, r4
 800d9ea:	d109      	bne.n	800da00 <__libc_init_array+0x24>
 800d9ec:	4d0b      	ldr	r5, [pc, #44]	@ (800da1c <__libc_init_array+0x40>)
 800d9ee:	4c0c      	ldr	r4, [pc, #48]	@ (800da20 <__libc_init_array+0x44>)
 800d9f0:	f003 f948 	bl	8010c84 <_init>
 800d9f4:	1b64      	subs	r4, r4, r5
 800d9f6:	10a4      	asrs	r4, r4, #2
 800d9f8:	2600      	movs	r6, #0
 800d9fa:	42a6      	cmp	r6, r4
 800d9fc:	d105      	bne.n	800da0a <__libc_init_array+0x2e>
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	f855 3b04 	ldr.w	r3, [r5], #4
 800da04:	4798      	blx	r3
 800da06:	3601      	adds	r6, #1
 800da08:	e7ee      	b.n	800d9e8 <__libc_init_array+0xc>
 800da0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800da0e:	4798      	blx	r3
 800da10:	3601      	adds	r6, #1
 800da12:	e7f2      	b.n	800d9fa <__libc_init_array+0x1e>
 800da14:	080111a8 	.word	0x080111a8
 800da18:	080111a8 	.word	0x080111a8
 800da1c:	080111a8 	.word	0x080111a8
 800da20:	080111ac 	.word	0x080111ac

0800da24 <__retarget_lock_init_recursive>:
 800da24:	4770      	bx	lr

0800da26 <__retarget_lock_acquire_recursive>:
 800da26:	4770      	bx	lr

0800da28 <__retarget_lock_release_recursive>:
 800da28:	4770      	bx	lr

0800da2a <memcpy>:
 800da2a:	440a      	add	r2, r1
 800da2c:	4291      	cmp	r1, r2
 800da2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800da32:	d100      	bne.n	800da36 <memcpy+0xc>
 800da34:	4770      	bx	lr
 800da36:	b510      	push	{r4, lr}
 800da38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da40:	4291      	cmp	r1, r2
 800da42:	d1f9      	bne.n	800da38 <memcpy+0xe>
 800da44:	bd10      	pop	{r4, pc}
	...

0800da48 <nanf>:
 800da48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800da50 <nanf+0x8>
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	7fc00000 	.word	0x7fc00000

0800da54 <quorem>:
 800da54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da58:	6903      	ldr	r3, [r0, #16]
 800da5a:	690c      	ldr	r4, [r1, #16]
 800da5c:	42a3      	cmp	r3, r4
 800da5e:	4607      	mov	r7, r0
 800da60:	db7e      	blt.n	800db60 <quorem+0x10c>
 800da62:	3c01      	subs	r4, #1
 800da64:	f101 0814 	add.w	r8, r1, #20
 800da68:	00a3      	lsls	r3, r4, #2
 800da6a:	f100 0514 	add.w	r5, r0, #20
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da7e:	3301      	adds	r3, #1
 800da80:	429a      	cmp	r2, r3
 800da82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da86:	fbb2 f6f3 	udiv	r6, r2, r3
 800da8a:	d32e      	bcc.n	800daea <quorem+0x96>
 800da8c:	f04f 0a00 	mov.w	sl, #0
 800da90:	46c4      	mov	ip, r8
 800da92:	46ae      	mov	lr, r5
 800da94:	46d3      	mov	fp, sl
 800da96:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da9a:	b298      	uxth	r0, r3
 800da9c:	fb06 a000 	mla	r0, r6, r0, sl
 800daa0:	0c02      	lsrs	r2, r0, #16
 800daa2:	0c1b      	lsrs	r3, r3, #16
 800daa4:	fb06 2303 	mla	r3, r6, r3, r2
 800daa8:	f8de 2000 	ldr.w	r2, [lr]
 800daac:	b280      	uxth	r0, r0
 800daae:	b292      	uxth	r2, r2
 800dab0:	1a12      	subs	r2, r2, r0
 800dab2:	445a      	add	r2, fp
 800dab4:	f8de 0000 	ldr.w	r0, [lr]
 800dab8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dac2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dac6:	b292      	uxth	r2, r2
 800dac8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dacc:	45e1      	cmp	r9, ip
 800dace:	f84e 2b04 	str.w	r2, [lr], #4
 800dad2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dad6:	d2de      	bcs.n	800da96 <quorem+0x42>
 800dad8:	9b00      	ldr	r3, [sp, #0]
 800dada:	58eb      	ldr	r3, [r5, r3]
 800dadc:	b92b      	cbnz	r3, 800daea <quorem+0x96>
 800dade:	9b01      	ldr	r3, [sp, #4]
 800dae0:	3b04      	subs	r3, #4
 800dae2:	429d      	cmp	r5, r3
 800dae4:	461a      	mov	r2, r3
 800dae6:	d32f      	bcc.n	800db48 <quorem+0xf4>
 800dae8:	613c      	str	r4, [r7, #16]
 800daea:	4638      	mov	r0, r7
 800daec:	f001 f8a0 	bl	800ec30 <__mcmp>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	db25      	blt.n	800db40 <quorem+0xec>
 800daf4:	4629      	mov	r1, r5
 800daf6:	2000      	movs	r0, #0
 800daf8:	f858 2b04 	ldr.w	r2, [r8], #4
 800dafc:	f8d1 c000 	ldr.w	ip, [r1]
 800db00:	fa1f fe82 	uxth.w	lr, r2
 800db04:	fa1f f38c 	uxth.w	r3, ip
 800db08:	eba3 030e 	sub.w	r3, r3, lr
 800db0c:	4403      	add	r3, r0
 800db0e:	0c12      	lsrs	r2, r2, #16
 800db10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800db14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800db18:	b29b      	uxth	r3, r3
 800db1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db1e:	45c1      	cmp	r9, r8
 800db20:	f841 3b04 	str.w	r3, [r1], #4
 800db24:	ea4f 4022 	mov.w	r0, r2, asr #16
 800db28:	d2e6      	bcs.n	800daf8 <quorem+0xa4>
 800db2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db32:	b922      	cbnz	r2, 800db3e <quorem+0xea>
 800db34:	3b04      	subs	r3, #4
 800db36:	429d      	cmp	r5, r3
 800db38:	461a      	mov	r2, r3
 800db3a:	d30b      	bcc.n	800db54 <quorem+0x100>
 800db3c:	613c      	str	r4, [r7, #16]
 800db3e:	3601      	adds	r6, #1
 800db40:	4630      	mov	r0, r6
 800db42:	b003      	add	sp, #12
 800db44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db48:	6812      	ldr	r2, [r2, #0]
 800db4a:	3b04      	subs	r3, #4
 800db4c:	2a00      	cmp	r2, #0
 800db4e:	d1cb      	bne.n	800dae8 <quorem+0x94>
 800db50:	3c01      	subs	r4, #1
 800db52:	e7c6      	b.n	800dae2 <quorem+0x8e>
 800db54:	6812      	ldr	r2, [r2, #0]
 800db56:	3b04      	subs	r3, #4
 800db58:	2a00      	cmp	r2, #0
 800db5a:	d1ef      	bne.n	800db3c <quorem+0xe8>
 800db5c:	3c01      	subs	r4, #1
 800db5e:	e7ea      	b.n	800db36 <quorem+0xe2>
 800db60:	2000      	movs	r0, #0
 800db62:	e7ee      	b.n	800db42 <quorem+0xee>
 800db64:	0000      	movs	r0, r0
	...

0800db68 <_dtoa_r>:
 800db68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db6c:	ed2d 8b02 	vpush	{d8}
 800db70:	69c7      	ldr	r7, [r0, #28]
 800db72:	b091      	sub	sp, #68	@ 0x44
 800db74:	ed8d 0b02 	vstr	d0, [sp, #8]
 800db78:	ec55 4b10 	vmov	r4, r5, d0
 800db7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800db7e:	9107      	str	r1, [sp, #28]
 800db80:	4681      	mov	r9, r0
 800db82:	9209      	str	r2, [sp, #36]	@ 0x24
 800db84:	930d      	str	r3, [sp, #52]	@ 0x34
 800db86:	b97f      	cbnz	r7, 800dba8 <_dtoa_r+0x40>
 800db88:	2010      	movs	r0, #16
 800db8a:	f7fe fde7 	bl	800c75c <malloc>
 800db8e:	4602      	mov	r2, r0
 800db90:	f8c9 001c 	str.w	r0, [r9, #28]
 800db94:	b920      	cbnz	r0, 800dba0 <_dtoa_r+0x38>
 800db96:	4ba0      	ldr	r3, [pc, #640]	@ (800de18 <_dtoa_r+0x2b0>)
 800db98:	21ef      	movs	r1, #239	@ 0xef
 800db9a:	48a0      	ldr	r0, [pc, #640]	@ (800de1c <_dtoa_r+0x2b4>)
 800db9c:	f002 fc54 	bl	8010448 <__assert_func>
 800dba0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dba4:	6007      	str	r7, [r0, #0]
 800dba6:	60c7      	str	r7, [r0, #12]
 800dba8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dbac:	6819      	ldr	r1, [r3, #0]
 800dbae:	b159      	cbz	r1, 800dbc8 <_dtoa_r+0x60>
 800dbb0:	685a      	ldr	r2, [r3, #4]
 800dbb2:	604a      	str	r2, [r1, #4]
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	4093      	lsls	r3, r2
 800dbb8:	608b      	str	r3, [r1, #8]
 800dbba:	4648      	mov	r0, r9
 800dbbc:	f000 fdb4 	bl	800e728 <_Bfree>
 800dbc0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	601a      	str	r2, [r3, #0]
 800dbc8:	1e2b      	subs	r3, r5, #0
 800dbca:	bfbb      	ittet	lt
 800dbcc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dbd0:	9303      	strlt	r3, [sp, #12]
 800dbd2:	2300      	movge	r3, #0
 800dbd4:	2201      	movlt	r2, #1
 800dbd6:	bfac      	ite	ge
 800dbd8:	6033      	strge	r3, [r6, #0]
 800dbda:	6032      	strlt	r2, [r6, #0]
 800dbdc:	4b90      	ldr	r3, [pc, #576]	@ (800de20 <_dtoa_r+0x2b8>)
 800dbde:	9e03      	ldr	r6, [sp, #12]
 800dbe0:	43b3      	bics	r3, r6
 800dbe2:	d110      	bne.n	800dc06 <_dtoa_r+0x9e>
 800dbe4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dbe6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dbea:	6013      	str	r3, [r2, #0]
 800dbec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800dbf0:	4323      	orrs	r3, r4
 800dbf2:	f000 84de 	beq.w	800e5b2 <_dtoa_r+0xa4a>
 800dbf6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dbf8:	4f8a      	ldr	r7, [pc, #552]	@ (800de24 <_dtoa_r+0x2bc>)
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 84e0 	beq.w	800e5c0 <_dtoa_r+0xa58>
 800dc00:	1cfb      	adds	r3, r7, #3
 800dc02:	f000 bcdb 	b.w	800e5bc <_dtoa_r+0xa54>
 800dc06:	ed9d 8b02 	vldr	d8, [sp, #8]
 800dc0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc12:	d10a      	bne.n	800dc2a <_dtoa_r+0xc2>
 800dc14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dc16:	2301      	movs	r3, #1
 800dc18:	6013      	str	r3, [r2, #0]
 800dc1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc1c:	b113      	cbz	r3, 800dc24 <_dtoa_r+0xbc>
 800dc1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800dc20:	4b81      	ldr	r3, [pc, #516]	@ (800de28 <_dtoa_r+0x2c0>)
 800dc22:	6013      	str	r3, [r2, #0]
 800dc24:	4f81      	ldr	r7, [pc, #516]	@ (800de2c <_dtoa_r+0x2c4>)
 800dc26:	f000 bccb 	b.w	800e5c0 <_dtoa_r+0xa58>
 800dc2a:	aa0e      	add	r2, sp, #56	@ 0x38
 800dc2c:	a90f      	add	r1, sp, #60	@ 0x3c
 800dc2e:	4648      	mov	r0, r9
 800dc30:	eeb0 0b48 	vmov.f64	d0, d8
 800dc34:	f001 f91c 	bl	800ee70 <__d2b>
 800dc38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800dc3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc3e:	9001      	str	r0, [sp, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d045      	beq.n	800dcd0 <_dtoa_r+0x168>
 800dc44:	eeb0 7b48 	vmov.f64	d7, d8
 800dc48:	ee18 1a90 	vmov	r1, s17
 800dc4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800dc50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800dc54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800dc58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800dc5c:	2500      	movs	r5, #0
 800dc5e:	ee07 1a90 	vmov	s15, r1
 800dc62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800dc66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800de00 <_dtoa_r+0x298>
 800dc6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800de08 <_dtoa_r+0x2a0>
 800dc72:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dc76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800de10 <_dtoa_r+0x2a8>
 800dc7a:	ee07 3a90 	vmov	s15, r3
 800dc7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800dc82:	eeb0 7b46 	vmov.f64	d7, d6
 800dc86:	eea4 7b05 	vfma.f64	d7, d4, d5
 800dc8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800dc8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800dc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc96:	ee16 8a90 	vmov	r8, s13
 800dc9a:	d508      	bpl.n	800dcae <_dtoa_r+0x146>
 800dc9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800dca0:	eeb4 6b47 	vcmp.f64	d6, d7
 800dca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dca8:	bf18      	it	ne
 800dcaa:	f108 38ff 	addne.w	r8, r8, #4294967295
 800dcae:	f1b8 0f16 	cmp.w	r8, #22
 800dcb2:	d82b      	bhi.n	800dd0c <_dtoa_r+0x1a4>
 800dcb4:	495e      	ldr	r1, [pc, #376]	@ (800de30 <_dtoa_r+0x2c8>)
 800dcb6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800dcba:	ed91 7b00 	vldr	d7, [r1]
 800dcbe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc6:	d501      	bpl.n	800dccc <_dtoa_r+0x164>
 800dcc8:	f108 38ff 	add.w	r8, r8, #4294967295
 800dccc:	2100      	movs	r1, #0
 800dcce:	e01e      	b.n	800dd0e <_dtoa_r+0x1a6>
 800dcd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800dcd8:	2920      	cmp	r1, #32
 800dcda:	bfc1      	itttt	gt
 800dcdc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800dce0:	408e      	lslgt	r6, r1
 800dce2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800dce6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800dcea:	bfd6      	itet	le
 800dcec:	f1c1 0120 	rsble	r1, r1, #32
 800dcf0:	4331      	orrgt	r1, r6
 800dcf2:	fa04 f101 	lslle.w	r1, r4, r1
 800dcf6:	ee07 1a90 	vmov	s15, r1
 800dcfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	ee17 1a90 	vmov	r1, s15
 800dd04:	2501      	movs	r5, #1
 800dd06:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800dd0a:	e7a8      	b.n	800dc5e <_dtoa_r+0xf6>
 800dd0c:	2101      	movs	r1, #1
 800dd0e:	1ad2      	subs	r2, r2, r3
 800dd10:	1e53      	subs	r3, r2, #1
 800dd12:	9306      	str	r3, [sp, #24]
 800dd14:	bf45      	ittet	mi
 800dd16:	f1c2 0301 	rsbmi	r3, r2, #1
 800dd1a:	9305      	strmi	r3, [sp, #20]
 800dd1c:	2300      	movpl	r3, #0
 800dd1e:	2300      	movmi	r3, #0
 800dd20:	bf4c      	ite	mi
 800dd22:	9306      	strmi	r3, [sp, #24]
 800dd24:	9305      	strpl	r3, [sp, #20]
 800dd26:	f1b8 0f00 	cmp.w	r8, #0
 800dd2a:	910c      	str	r1, [sp, #48]	@ 0x30
 800dd2c:	db18      	blt.n	800dd60 <_dtoa_r+0x1f8>
 800dd2e:	9b06      	ldr	r3, [sp, #24]
 800dd30:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800dd34:	4443      	add	r3, r8
 800dd36:	9306      	str	r3, [sp, #24]
 800dd38:	2300      	movs	r3, #0
 800dd3a:	9a07      	ldr	r2, [sp, #28]
 800dd3c:	2a09      	cmp	r2, #9
 800dd3e:	d849      	bhi.n	800ddd4 <_dtoa_r+0x26c>
 800dd40:	2a05      	cmp	r2, #5
 800dd42:	bfc4      	itt	gt
 800dd44:	3a04      	subgt	r2, #4
 800dd46:	9207      	strgt	r2, [sp, #28]
 800dd48:	9a07      	ldr	r2, [sp, #28]
 800dd4a:	f1a2 0202 	sub.w	r2, r2, #2
 800dd4e:	bfcc      	ite	gt
 800dd50:	2400      	movgt	r4, #0
 800dd52:	2401      	movle	r4, #1
 800dd54:	2a03      	cmp	r2, #3
 800dd56:	d848      	bhi.n	800ddea <_dtoa_r+0x282>
 800dd58:	e8df f002 	tbb	[pc, r2]
 800dd5c:	3a2c2e0b 	.word	0x3a2c2e0b
 800dd60:	9b05      	ldr	r3, [sp, #20]
 800dd62:	2200      	movs	r2, #0
 800dd64:	eba3 0308 	sub.w	r3, r3, r8
 800dd68:	9305      	str	r3, [sp, #20]
 800dd6a:	920a      	str	r2, [sp, #40]	@ 0x28
 800dd6c:	f1c8 0300 	rsb	r3, r8, #0
 800dd70:	e7e3      	b.n	800dd3a <_dtoa_r+0x1d2>
 800dd72:	2200      	movs	r2, #0
 800dd74:	9208      	str	r2, [sp, #32]
 800dd76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd78:	2a00      	cmp	r2, #0
 800dd7a:	dc39      	bgt.n	800ddf0 <_dtoa_r+0x288>
 800dd7c:	f04f 0b01 	mov.w	fp, #1
 800dd80:	46da      	mov	sl, fp
 800dd82:	465a      	mov	r2, fp
 800dd84:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800dd88:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	2004      	movs	r0, #4
 800dd90:	f100 0614 	add.w	r6, r0, #20
 800dd94:	4296      	cmp	r6, r2
 800dd96:	d930      	bls.n	800ddfa <_dtoa_r+0x292>
 800dd98:	6079      	str	r1, [r7, #4]
 800dd9a:	4648      	mov	r0, r9
 800dd9c:	9304      	str	r3, [sp, #16]
 800dd9e:	f000 fc83 	bl	800e6a8 <_Balloc>
 800dda2:	9b04      	ldr	r3, [sp, #16]
 800dda4:	4607      	mov	r7, r0
 800dda6:	2800      	cmp	r0, #0
 800dda8:	d146      	bne.n	800de38 <_dtoa_r+0x2d0>
 800ddaa:	4b22      	ldr	r3, [pc, #136]	@ (800de34 <_dtoa_r+0x2cc>)
 800ddac:	4602      	mov	r2, r0
 800ddae:	f240 11af 	movw	r1, #431	@ 0x1af
 800ddb2:	e6f2      	b.n	800db9a <_dtoa_r+0x32>
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	e7dd      	b.n	800dd74 <_dtoa_r+0x20c>
 800ddb8:	2200      	movs	r2, #0
 800ddba:	9208      	str	r2, [sp, #32]
 800ddbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddbe:	eb08 0b02 	add.w	fp, r8, r2
 800ddc2:	f10b 0a01 	add.w	sl, fp, #1
 800ddc6:	4652      	mov	r2, sl
 800ddc8:	2a01      	cmp	r2, #1
 800ddca:	bfb8      	it	lt
 800ddcc:	2201      	movlt	r2, #1
 800ddce:	e7db      	b.n	800dd88 <_dtoa_r+0x220>
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	e7f2      	b.n	800ddba <_dtoa_r+0x252>
 800ddd4:	2401      	movs	r4, #1
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800dddc:	f04f 3bff 	mov.w	fp, #4294967295
 800dde0:	2100      	movs	r1, #0
 800dde2:	46da      	mov	sl, fp
 800dde4:	2212      	movs	r2, #18
 800dde6:	9109      	str	r1, [sp, #36]	@ 0x24
 800dde8:	e7ce      	b.n	800dd88 <_dtoa_r+0x220>
 800ddea:	2201      	movs	r2, #1
 800ddec:	9208      	str	r2, [sp, #32]
 800ddee:	e7f5      	b.n	800dddc <_dtoa_r+0x274>
 800ddf0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ddf4:	46da      	mov	sl, fp
 800ddf6:	465a      	mov	r2, fp
 800ddf8:	e7c6      	b.n	800dd88 <_dtoa_r+0x220>
 800ddfa:	3101      	adds	r1, #1
 800ddfc:	0040      	lsls	r0, r0, #1
 800ddfe:	e7c7      	b.n	800dd90 <_dtoa_r+0x228>
 800de00:	636f4361 	.word	0x636f4361
 800de04:	3fd287a7 	.word	0x3fd287a7
 800de08:	8b60c8b3 	.word	0x8b60c8b3
 800de0c:	3fc68a28 	.word	0x3fc68a28
 800de10:	509f79fb 	.word	0x509f79fb
 800de14:	3fd34413 	.word	0x3fd34413
 800de18:	08010db6 	.word	0x08010db6
 800de1c:	08010dcd 	.word	0x08010dcd
 800de20:	7ff00000 	.word	0x7ff00000
 800de24:	08010db2 	.word	0x08010db2
 800de28:	08010d81 	.word	0x08010d81
 800de2c:	08010d80 	.word	0x08010d80
 800de30:	08010ec8 	.word	0x08010ec8
 800de34:	08010e25 	.word	0x08010e25
 800de38:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800de3c:	f1ba 0f0e 	cmp.w	sl, #14
 800de40:	6010      	str	r0, [r2, #0]
 800de42:	d86f      	bhi.n	800df24 <_dtoa_r+0x3bc>
 800de44:	2c00      	cmp	r4, #0
 800de46:	d06d      	beq.n	800df24 <_dtoa_r+0x3bc>
 800de48:	f1b8 0f00 	cmp.w	r8, #0
 800de4c:	f340 80c2 	ble.w	800dfd4 <_dtoa_r+0x46c>
 800de50:	4aca      	ldr	r2, [pc, #808]	@ (800e17c <_dtoa_r+0x614>)
 800de52:	f008 010f 	and.w	r1, r8, #15
 800de56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800de5a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800de5e:	ed92 7b00 	vldr	d7, [r2]
 800de62:	ea4f 1128 	mov.w	r1, r8, asr #4
 800de66:	f000 80a9 	beq.w	800dfbc <_dtoa_r+0x454>
 800de6a:	4ac5      	ldr	r2, [pc, #788]	@ (800e180 <_dtoa_r+0x618>)
 800de6c:	ed92 6b08 	vldr	d6, [r2, #32]
 800de70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800de74:	ed8d 6b02 	vstr	d6, [sp, #8]
 800de78:	f001 010f 	and.w	r1, r1, #15
 800de7c:	2203      	movs	r2, #3
 800de7e:	48c0      	ldr	r0, [pc, #768]	@ (800e180 <_dtoa_r+0x618>)
 800de80:	2900      	cmp	r1, #0
 800de82:	f040 809d 	bne.w	800dfc0 <_dtoa_r+0x458>
 800de86:	ed9d 6b02 	vldr	d6, [sp, #8]
 800de8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800de8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800de94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de98:	2900      	cmp	r1, #0
 800de9a:	f000 80c1 	beq.w	800e020 <_dtoa_r+0x4b8>
 800de9e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800dea2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deaa:	f140 80b9 	bpl.w	800e020 <_dtoa_r+0x4b8>
 800deae:	f1ba 0f00 	cmp.w	sl, #0
 800deb2:	f000 80b5 	beq.w	800e020 <_dtoa_r+0x4b8>
 800deb6:	f1bb 0f00 	cmp.w	fp, #0
 800deba:	dd31      	ble.n	800df20 <_dtoa_r+0x3b8>
 800debc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800dec0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dec4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dec8:	f108 31ff 	add.w	r1, r8, #4294967295
 800decc:	9104      	str	r1, [sp, #16]
 800dece:	3201      	adds	r2, #1
 800ded0:	465c      	mov	r4, fp
 800ded2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ded6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800deda:	ee07 2a90 	vmov	s15, r2
 800dede:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dee2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dee6:	ee15 2a90 	vmov	r2, s11
 800deea:	ec51 0b15 	vmov	r0, r1, d5
 800deee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800def2:	2c00      	cmp	r4, #0
 800def4:	f040 8098 	bne.w	800e028 <_dtoa_r+0x4c0>
 800def8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800defc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800df00:	ec41 0b17 	vmov	d7, r0, r1
 800df04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800df08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df0c:	f300 8261 	bgt.w	800e3d2 <_dtoa_r+0x86a>
 800df10:	eeb1 7b47 	vneg.f64	d7, d7
 800df14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800df18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df1c:	f100 80f5 	bmi.w	800e10a <_dtoa_r+0x5a2>
 800df20:	ed8d 8b02 	vstr	d8, [sp, #8]
 800df24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800df26:	2a00      	cmp	r2, #0
 800df28:	f2c0 812c 	blt.w	800e184 <_dtoa_r+0x61c>
 800df2c:	f1b8 0f0e 	cmp.w	r8, #14
 800df30:	f300 8128 	bgt.w	800e184 <_dtoa_r+0x61c>
 800df34:	4b91      	ldr	r3, [pc, #580]	@ (800e17c <_dtoa_r+0x614>)
 800df36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800df3a:	ed93 6b00 	vldr	d6, [r3]
 800df3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df40:	2b00      	cmp	r3, #0
 800df42:	da03      	bge.n	800df4c <_dtoa_r+0x3e4>
 800df44:	f1ba 0f00 	cmp.w	sl, #0
 800df48:	f340 80d2 	ble.w	800e0f0 <_dtoa_r+0x588>
 800df4c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800df50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df54:	463e      	mov	r6, r7
 800df56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800df5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800df5e:	ee15 3a10 	vmov	r3, s10
 800df62:	3330      	adds	r3, #48	@ 0x30
 800df64:	f806 3b01 	strb.w	r3, [r6], #1
 800df68:	1bf3      	subs	r3, r6, r7
 800df6a:	459a      	cmp	sl, r3
 800df6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800df70:	eea3 7b46 	vfms.f64	d7, d3, d6
 800df74:	f040 80f8 	bne.w	800e168 <_dtoa_r+0x600>
 800df78:	ee37 7b07 	vadd.f64	d7, d7, d7
 800df7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800df80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df84:	f300 80dd 	bgt.w	800e142 <_dtoa_r+0x5da>
 800df88:	eeb4 7b46 	vcmp.f64	d7, d6
 800df8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df90:	d104      	bne.n	800df9c <_dtoa_r+0x434>
 800df92:	ee15 3a10 	vmov	r3, s10
 800df96:	07db      	lsls	r3, r3, #31
 800df98:	f100 80d3 	bmi.w	800e142 <_dtoa_r+0x5da>
 800df9c:	9901      	ldr	r1, [sp, #4]
 800df9e:	4648      	mov	r0, r9
 800dfa0:	f000 fbc2 	bl	800e728 <_Bfree>
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dfa8:	7033      	strb	r3, [r6, #0]
 800dfaa:	f108 0301 	add.w	r3, r8, #1
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 8304 	beq.w	800e5c0 <_dtoa_r+0xa58>
 800dfb8:	601e      	str	r6, [r3, #0]
 800dfba:	e301      	b.n	800e5c0 <_dtoa_r+0xa58>
 800dfbc:	2202      	movs	r2, #2
 800dfbe:	e75e      	b.n	800de7e <_dtoa_r+0x316>
 800dfc0:	07cc      	lsls	r4, r1, #31
 800dfc2:	d504      	bpl.n	800dfce <_dtoa_r+0x466>
 800dfc4:	ed90 6b00 	vldr	d6, [r0]
 800dfc8:	3201      	adds	r2, #1
 800dfca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dfce:	1049      	asrs	r1, r1, #1
 800dfd0:	3008      	adds	r0, #8
 800dfd2:	e755      	b.n	800de80 <_dtoa_r+0x318>
 800dfd4:	d022      	beq.n	800e01c <_dtoa_r+0x4b4>
 800dfd6:	f1c8 0100 	rsb	r1, r8, #0
 800dfda:	4a68      	ldr	r2, [pc, #416]	@ (800e17c <_dtoa_r+0x614>)
 800dfdc:	f001 000f 	and.w	r0, r1, #15
 800dfe0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dfe4:	ed92 7b00 	vldr	d7, [r2]
 800dfe8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800dfec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dff0:	4863      	ldr	r0, [pc, #396]	@ (800e180 <_dtoa_r+0x618>)
 800dff2:	1109      	asrs	r1, r1, #4
 800dff4:	2400      	movs	r4, #0
 800dff6:	2202      	movs	r2, #2
 800dff8:	b929      	cbnz	r1, 800e006 <_dtoa_r+0x49e>
 800dffa:	2c00      	cmp	r4, #0
 800dffc:	f43f af49 	beq.w	800de92 <_dtoa_r+0x32a>
 800e000:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e004:	e745      	b.n	800de92 <_dtoa_r+0x32a>
 800e006:	07ce      	lsls	r6, r1, #31
 800e008:	d505      	bpl.n	800e016 <_dtoa_r+0x4ae>
 800e00a:	ed90 6b00 	vldr	d6, [r0]
 800e00e:	3201      	adds	r2, #1
 800e010:	2401      	movs	r4, #1
 800e012:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e016:	1049      	asrs	r1, r1, #1
 800e018:	3008      	adds	r0, #8
 800e01a:	e7ed      	b.n	800dff8 <_dtoa_r+0x490>
 800e01c:	2202      	movs	r2, #2
 800e01e:	e738      	b.n	800de92 <_dtoa_r+0x32a>
 800e020:	f8cd 8010 	str.w	r8, [sp, #16]
 800e024:	4654      	mov	r4, sl
 800e026:	e754      	b.n	800ded2 <_dtoa_r+0x36a>
 800e028:	4a54      	ldr	r2, [pc, #336]	@ (800e17c <_dtoa_r+0x614>)
 800e02a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800e02e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e032:	9a08      	ldr	r2, [sp, #32]
 800e034:	ec41 0b17 	vmov	d7, r0, r1
 800e038:	443c      	add	r4, r7
 800e03a:	b34a      	cbz	r2, 800e090 <_dtoa_r+0x528>
 800e03c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800e040:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800e044:	463e      	mov	r6, r7
 800e046:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e04a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e04e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e052:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e056:	ee14 2a90 	vmov	r2, s9
 800e05a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e05e:	3230      	adds	r2, #48	@ 0x30
 800e060:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e06c:	f806 2b01 	strb.w	r2, [r6], #1
 800e070:	d438      	bmi.n	800e0e4 <_dtoa_r+0x57c>
 800e072:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e076:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07e:	d462      	bmi.n	800e146 <_dtoa_r+0x5de>
 800e080:	42a6      	cmp	r6, r4
 800e082:	f43f af4d 	beq.w	800df20 <_dtoa_r+0x3b8>
 800e086:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e08a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e08e:	e7e0      	b.n	800e052 <_dtoa_r+0x4ea>
 800e090:	4621      	mov	r1, r4
 800e092:	463e      	mov	r6, r7
 800e094:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e098:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e09c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e0a0:	ee14 2a90 	vmov	r2, s9
 800e0a4:	3230      	adds	r2, #48	@ 0x30
 800e0a6:	f806 2b01 	strb.w	r2, [r6], #1
 800e0aa:	42a6      	cmp	r6, r4
 800e0ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e0b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e0b4:	d119      	bne.n	800e0ea <_dtoa_r+0x582>
 800e0b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800e0ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e0be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c6:	dc3e      	bgt.n	800e146 <_dtoa_r+0x5de>
 800e0c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e0cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800e0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d4:	f57f af24 	bpl.w	800df20 <_dtoa_r+0x3b8>
 800e0d8:	460e      	mov	r6, r1
 800e0da:	3901      	subs	r1, #1
 800e0dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e0e0:	2b30      	cmp	r3, #48	@ 0x30
 800e0e2:	d0f9      	beq.n	800e0d8 <_dtoa_r+0x570>
 800e0e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e0e8:	e758      	b.n	800df9c <_dtoa_r+0x434>
 800e0ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e0ee:	e7d5      	b.n	800e09c <_dtoa_r+0x534>
 800e0f0:	d10b      	bne.n	800e10a <_dtoa_r+0x5a2>
 800e0f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e0f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e0fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e106:	f2c0 8161 	blt.w	800e3cc <_dtoa_r+0x864>
 800e10a:	2400      	movs	r4, #0
 800e10c:	4625      	mov	r5, r4
 800e10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e110:	43db      	mvns	r3, r3
 800e112:	9304      	str	r3, [sp, #16]
 800e114:	463e      	mov	r6, r7
 800e116:	f04f 0800 	mov.w	r8, #0
 800e11a:	4621      	mov	r1, r4
 800e11c:	4648      	mov	r0, r9
 800e11e:	f000 fb03 	bl	800e728 <_Bfree>
 800e122:	2d00      	cmp	r5, #0
 800e124:	d0de      	beq.n	800e0e4 <_dtoa_r+0x57c>
 800e126:	f1b8 0f00 	cmp.w	r8, #0
 800e12a:	d005      	beq.n	800e138 <_dtoa_r+0x5d0>
 800e12c:	45a8      	cmp	r8, r5
 800e12e:	d003      	beq.n	800e138 <_dtoa_r+0x5d0>
 800e130:	4641      	mov	r1, r8
 800e132:	4648      	mov	r0, r9
 800e134:	f000 faf8 	bl	800e728 <_Bfree>
 800e138:	4629      	mov	r1, r5
 800e13a:	4648      	mov	r0, r9
 800e13c:	f000 faf4 	bl	800e728 <_Bfree>
 800e140:	e7d0      	b.n	800e0e4 <_dtoa_r+0x57c>
 800e142:	f8cd 8010 	str.w	r8, [sp, #16]
 800e146:	4633      	mov	r3, r6
 800e148:	461e      	mov	r6, r3
 800e14a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e14e:	2a39      	cmp	r2, #57	@ 0x39
 800e150:	d106      	bne.n	800e160 <_dtoa_r+0x5f8>
 800e152:	429f      	cmp	r7, r3
 800e154:	d1f8      	bne.n	800e148 <_dtoa_r+0x5e0>
 800e156:	9a04      	ldr	r2, [sp, #16]
 800e158:	3201      	adds	r2, #1
 800e15a:	9204      	str	r2, [sp, #16]
 800e15c:	2230      	movs	r2, #48	@ 0x30
 800e15e:	703a      	strb	r2, [r7, #0]
 800e160:	781a      	ldrb	r2, [r3, #0]
 800e162:	3201      	adds	r2, #1
 800e164:	701a      	strb	r2, [r3, #0]
 800e166:	e7bd      	b.n	800e0e4 <_dtoa_r+0x57c>
 800e168:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e16c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e174:	f47f aeef 	bne.w	800df56 <_dtoa_r+0x3ee>
 800e178:	e710      	b.n	800df9c <_dtoa_r+0x434>
 800e17a:	bf00      	nop
 800e17c:	08010ec8 	.word	0x08010ec8
 800e180:	08010ea0 	.word	0x08010ea0
 800e184:	9908      	ldr	r1, [sp, #32]
 800e186:	2900      	cmp	r1, #0
 800e188:	f000 80e3 	beq.w	800e352 <_dtoa_r+0x7ea>
 800e18c:	9907      	ldr	r1, [sp, #28]
 800e18e:	2901      	cmp	r1, #1
 800e190:	f300 80c8 	bgt.w	800e324 <_dtoa_r+0x7bc>
 800e194:	2d00      	cmp	r5, #0
 800e196:	f000 80c1 	beq.w	800e31c <_dtoa_r+0x7b4>
 800e19a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e19e:	9e05      	ldr	r6, [sp, #20]
 800e1a0:	461c      	mov	r4, r3
 800e1a2:	9304      	str	r3, [sp, #16]
 800e1a4:	9b05      	ldr	r3, [sp, #20]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	9305      	str	r3, [sp, #20]
 800e1aa:	9b06      	ldr	r3, [sp, #24]
 800e1ac:	2101      	movs	r1, #1
 800e1ae:	4413      	add	r3, r2
 800e1b0:	4648      	mov	r0, r9
 800e1b2:	9306      	str	r3, [sp, #24]
 800e1b4:	f000 fbb6 	bl	800e924 <__i2b>
 800e1b8:	9b04      	ldr	r3, [sp, #16]
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	b166      	cbz	r6, 800e1d8 <_dtoa_r+0x670>
 800e1be:	9a06      	ldr	r2, [sp, #24]
 800e1c0:	2a00      	cmp	r2, #0
 800e1c2:	dd09      	ble.n	800e1d8 <_dtoa_r+0x670>
 800e1c4:	42b2      	cmp	r2, r6
 800e1c6:	9905      	ldr	r1, [sp, #20]
 800e1c8:	bfa8      	it	ge
 800e1ca:	4632      	movge	r2, r6
 800e1cc:	1a89      	subs	r1, r1, r2
 800e1ce:	9105      	str	r1, [sp, #20]
 800e1d0:	9906      	ldr	r1, [sp, #24]
 800e1d2:	1ab6      	subs	r6, r6, r2
 800e1d4:	1a8a      	subs	r2, r1, r2
 800e1d6:	9206      	str	r2, [sp, #24]
 800e1d8:	b1fb      	cbz	r3, 800e21a <_dtoa_r+0x6b2>
 800e1da:	9a08      	ldr	r2, [sp, #32]
 800e1dc:	2a00      	cmp	r2, #0
 800e1de:	f000 80bc 	beq.w	800e35a <_dtoa_r+0x7f2>
 800e1e2:	b19c      	cbz	r4, 800e20c <_dtoa_r+0x6a4>
 800e1e4:	4629      	mov	r1, r5
 800e1e6:	4622      	mov	r2, r4
 800e1e8:	4648      	mov	r0, r9
 800e1ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1ec:	f000 fc5a 	bl	800eaa4 <__pow5mult>
 800e1f0:	9a01      	ldr	r2, [sp, #4]
 800e1f2:	4601      	mov	r1, r0
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	4648      	mov	r0, r9
 800e1f8:	f000 fbaa 	bl	800e950 <__multiply>
 800e1fc:	9901      	ldr	r1, [sp, #4]
 800e1fe:	9004      	str	r0, [sp, #16]
 800e200:	4648      	mov	r0, r9
 800e202:	f000 fa91 	bl	800e728 <_Bfree>
 800e206:	9a04      	ldr	r2, [sp, #16]
 800e208:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e20a:	9201      	str	r2, [sp, #4]
 800e20c:	1b1a      	subs	r2, r3, r4
 800e20e:	d004      	beq.n	800e21a <_dtoa_r+0x6b2>
 800e210:	9901      	ldr	r1, [sp, #4]
 800e212:	4648      	mov	r0, r9
 800e214:	f000 fc46 	bl	800eaa4 <__pow5mult>
 800e218:	9001      	str	r0, [sp, #4]
 800e21a:	2101      	movs	r1, #1
 800e21c:	4648      	mov	r0, r9
 800e21e:	f000 fb81 	bl	800e924 <__i2b>
 800e222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e224:	4604      	mov	r4, r0
 800e226:	2b00      	cmp	r3, #0
 800e228:	f000 81d0 	beq.w	800e5cc <_dtoa_r+0xa64>
 800e22c:	461a      	mov	r2, r3
 800e22e:	4601      	mov	r1, r0
 800e230:	4648      	mov	r0, r9
 800e232:	f000 fc37 	bl	800eaa4 <__pow5mult>
 800e236:	9b07      	ldr	r3, [sp, #28]
 800e238:	2b01      	cmp	r3, #1
 800e23a:	4604      	mov	r4, r0
 800e23c:	f300 8095 	bgt.w	800e36a <_dtoa_r+0x802>
 800e240:	9b02      	ldr	r3, [sp, #8]
 800e242:	2b00      	cmp	r3, #0
 800e244:	f040 808b 	bne.w	800e35e <_dtoa_r+0x7f6>
 800e248:	9b03      	ldr	r3, [sp, #12]
 800e24a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e24e:	2a00      	cmp	r2, #0
 800e250:	f040 8087 	bne.w	800e362 <_dtoa_r+0x7fa>
 800e254:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e258:	0d12      	lsrs	r2, r2, #20
 800e25a:	0512      	lsls	r2, r2, #20
 800e25c:	2a00      	cmp	r2, #0
 800e25e:	f000 8082 	beq.w	800e366 <_dtoa_r+0x7fe>
 800e262:	9b05      	ldr	r3, [sp, #20]
 800e264:	3301      	adds	r3, #1
 800e266:	9305      	str	r3, [sp, #20]
 800e268:	9b06      	ldr	r3, [sp, #24]
 800e26a:	3301      	adds	r3, #1
 800e26c:	9306      	str	r3, [sp, #24]
 800e26e:	2301      	movs	r3, #1
 800e270:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e274:	2b00      	cmp	r3, #0
 800e276:	f000 81af 	beq.w	800e5d8 <_dtoa_r+0xa70>
 800e27a:	6922      	ldr	r2, [r4, #16]
 800e27c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e280:	6910      	ldr	r0, [r2, #16]
 800e282:	f000 fb03 	bl	800e88c <__hi0bits>
 800e286:	f1c0 0020 	rsb	r0, r0, #32
 800e28a:	9b06      	ldr	r3, [sp, #24]
 800e28c:	4418      	add	r0, r3
 800e28e:	f010 001f 	ands.w	r0, r0, #31
 800e292:	d076      	beq.n	800e382 <_dtoa_r+0x81a>
 800e294:	f1c0 0220 	rsb	r2, r0, #32
 800e298:	2a04      	cmp	r2, #4
 800e29a:	dd69      	ble.n	800e370 <_dtoa_r+0x808>
 800e29c:	9b05      	ldr	r3, [sp, #20]
 800e29e:	f1c0 001c 	rsb	r0, r0, #28
 800e2a2:	4403      	add	r3, r0
 800e2a4:	9305      	str	r3, [sp, #20]
 800e2a6:	9b06      	ldr	r3, [sp, #24]
 800e2a8:	4406      	add	r6, r0
 800e2aa:	4403      	add	r3, r0
 800e2ac:	9306      	str	r3, [sp, #24]
 800e2ae:	9b05      	ldr	r3, [sp, #20]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	dd05      	ble.n	800e2c0 <_dtoa_r+0x758>
 800e2b4:	9901      	ldr	r1, [sp, #4]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	4648      	mov	r0, r9
 800e2ba:	f000 fc4d 	bl	800eb58 <__lshift>
 800e2be:	9001      	str	r0, [sp, #4]
 800e2c0:	9b06      	ldr	r3, [sp, #24]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	dd05      	ble.n	800e2d2 <_dtoa_r+0x76a>
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	4648      	mov	r0, r9
 800e2cc:	f000 fc44 	bl	800eb58 <__lshift>
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d056      	beq.n	800e386 <_dtoa_r+0x81e>
 800e2d8:	9801      	ldr	r0, [sp, #4]
 800e2da:	4621      	mov	r1, r4
 800e2dc:	f000 fca8 	bl	800ec30 <__mcmp>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	da50      	bge.n	800e386 <_dtoa_r+0x81e>
 800e2e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800e2e8:	9304      	str	r3, [sp, #16]
 800e2ea:	9901      	ldr	r1, [sp, #4]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	220a      	movs	r2, #10
 800e2f0:	4648      	mov	r0, r9
 800e2f2:	f000 fa3b 	bl	800e76c <__multadd>
 800e2f6:	9b08      	ldr	r3, [sp, #32]
 800e2f8:	9001      	str	r0, [sp, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f000 816e 	beq.w	800e5dc <_dtoa_r+0xa74>
 800e300:	4629      	mov	r1, r5
 800e302:	2300      	movs	r3, #0
 800e304:	220a      	movs	r2, #10
 800e306:	4648      	mov	r0, r9
 800e308:	f000 fa30 	bl	800e76c <__multadd>
 800e30c:	f1bb 0f00 	cmp.w	fp, #0
 800e310:	4605      	mov	r5, r0
 800e312:	dc64      	bgt.n	800e3de <_dtoa_r+0x876>
 800e314:	9b07      	ldr	r3, [sp, #28]
 800e316:	2b02      	cmp	r3, #2
 800e318:	dc3e      	bgt.n	800e398 <_dtoa_r+0x830>
 800e31a:	e060      	b.n	800e3de <_dtoa_r+0x876>
 800e31c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e31e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e322:	e73c      	b.n	800e19e <_dtoa_r+0x636>
 800e324:	f10a 34ff 	add.w	r4, sl, #4294967295
 800e328:	42a3      	cmp	r3, r4
 800e32a:	bfbf      	itttt	lt
 800e32c:	1ae2      	sublt	r2, r4, r3
 800e32e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e330:	189b      	addlt	r3, r3, r2
 800e332:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800e334:	bfae      	itee	ge
 800e336:	1b1c      	subge	r4, r3, r4
 800e338:	4623      	movlt	r3, r4
 800e33a:	2400      	movlt	r4, #0
 800e33c:	f1ba 0f00 	cmp.w	sl, #0
 800e340:	bfb5      	itete	lt
 800e342:	9a05      	ldrlt	r2, [sp, #20]
 800e344:	9e05      	ldrge	r6, [sp, #20]
 800e346:	eba2 060a 	sublt.w	r6, r2, sl
 800e34a:	4652      	movge	r2, sl
 800e34c:	bfb8      	it	lt
 800e34e:	2200      	movlt	r2, #0
 800e350:	e727      	b.n	800e1a2 <_dtoa_r+0x63a>
 800e352:	9e05      	ldr	r6, [sp, #20]
 800e354:	9d08      	ldr	r5, [sp, #32]
 800e356:	461c      	mov	r4, r3
 800e358:	e730      	b.n	800e1bc <_dtoa_r+0x654>
 800e35a:	461a      	mov	r2, r3
 800e35c:	e758      	b.n	800e210 <_dtoa_r+0x6a8>
 800e35e:	2300      	movs	r3, #0
 800e360:	e786      	b.n	800e270 <_dtoa_r+0x708>
 800e362:	9b02      	ldr	r3, [sp, #8]
 800e364:	e784      	b.n	800e270 <_dtoa_r+0x708>
 800e366:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e368:	e783      	b.n	800e272 <_dtoa_r+0x70a>
 800e36a:	2300      	movs	r3, #0
 800e36c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e36e:	e784      	b.n	800e27a <_dtoa_r+0x712>
 800e370:	d09d      	beq.n	800e2ae <_dtoa_r+0x746>
 800e372:	9b05      	ldr	r3, [sp, #20]
 800e374:	321c      	adds	r2, #28
 800e376:	4413      	add	r3, r2
 800e378:	9305      	str	r3, [sp, #20]
 800e37a:	9b06      	ldr	r3, [sp, #24]
 800e37c:	4416      	add	r6, r2
 800e37e:	4413      	add	r3, r2
 800e380:	e794      	b.n	800e2ac <_dtoa_r+0x744>
 800e382:	4602      	mov	r2, r0
 800e384:	e7f5      	b.n	800e372 <_dtoa_r+0x80a>
 800e386:	f1ba 0f00 	cmp.w	sl, #0
 800e38a:	f8cd 8010 	str.w	r8, [sp, #16]
 800e38e:	46d3      	mov	fp, sl
 800e390:	dc21      	bgt.n	800e3d6 <_dtoa_r+0x86e>
 800e392:	9b07      	ldr	r3, [sp, #28]
 800e394:	2b02      	cmp	r3, #2
 800e396:	dd1e      	ble.n	800e3d6 <_dtoa_r+0x86e>
 800e398:	f1bb 0f00 	cmp.w	fp, #0
 800e39c:	f47f aeb7 	bne.w	800e10e <_dtoa_r+0x5a6>
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	465b      	mov	r3, fp
 800e3a4:	2205      	movs	r2, #5
 800e3a6:	4648      	mov	r0, r9
 800e3a8:	f000 f9e0 	bl	800e76c <__multadd>
 800e3ac:	4601      	mov	r1, r0
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	9801      	ldr	r0, [sp, #4]
 800e3b2:	f000 fc3d 	bl	800ec30 <__mcmp>
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	f77f aea9 	ble.w	800e10e <_dtoa_r+0x5a6>
 800e3bc:	463e      	mov	r6, r7
 800e3be:	2331      	movs	r3, #49	@ 0x31
 800e3c0:	f806 3b01 	strb.w	r3, [r6], #1
 800e3c4:	9b04      	ldr	r3, [sp, #16]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	9304      	str	r3, [sp, #16]
 800e3ca:	e6a4      	b.n	800e116 <_dtoa_r+0x5ae>
 800e3cc:	f8cd 8010 	str.w	r8, [sp, #16]
 800e3d0:	4654      	mov	r4, sl
 800e3d2:	4625      	mov	r5, r4
 800e3d4:	e7f2      	b.n	800e3bc <_dtoa_r+0x854>
 800e3d6:	9b08      	ldr	r3, [sp, #32]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	f000 8103 	beq.w	800e5e4 <_dtoa_r+0xa7c>
 800e3de:	2e00      	cmp	r6, #0
 800e3e0:	dd05      	ble.n	800e3ee <_dtoa_r+0x886>
 800e3e2:	4629      	mov	r1, r5
 800e3e4:	4632      	mov	r2, r6
 800e3e6:	4648      	mov	r0, r9
 800e3e8:	f000 fbb6 	bl	800eb58 <__lshift>
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d058      	beq.n	800e4a6 <_dtoa_r+0x93e>
 800e3f4:	6869      	ldr	r1, [r5, #4]
 800e3f6:	4648      	mov	r0, r9
 800e3f8:	f000 f956 	bl	800e6a8 <_Balloc>
 800e3fc:	4606      	mov	r6, r0
 800e3fe:	b928      	cbnz	r0, 800e40c <_dtoa_r+0x8a4>
 800e400:	4b82      	ldr	r3, [pc, #520]	@ (800e60c <_dtoa_r+0xaa4>)
 800e402:	4602      	mov	r2, r0
 800e404:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e408:	f7ff bbc7 	b.w	800db9a <_dtoa_r+0x32>
 800e40c:	692a      	ldr	r2, [r5, #16]
 800e40e:	3202      	adds	r2, #2
 800e410:	0092      	lsls	r2, r2, #2
 800e412:	f105 010c 	add.w	r1, r5, #12
 800e416:	300c      	adds	r0, #12
 800e418:	f7ff fb07 	bl	800da2a <memcpy>
 800e41c:	2201      	movs	r2, #1
 800e41e:	4631      	mov	r1, r6
 800e420:	4648      	mov	r0, r9
 800e422:	f000 fb99 	bl	800eb58 <__lshift>
 800e426:	1c7b      	adds	r3, r7, #1
 800e428:	9305      	str	r3, [sp, #20]
 800e42a:	eb07 030b 	add.w	r3, r7, fp
 800e42e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e430:	9b02      	ldr	r3, [sp, #8]
 800e432:	f003 0301 	and.w	r3, r3, #1
 800e436:	46a8      	mov	r8, r5
 800e438:	9308      	str	r3, [sp, #32]
 800e43a:	4605      	mov	r5, r0
 800e43c:	9b05      	ldr	r3, [sp, #20]
 800e43e:	9801      	ldr	r0, [sp, #4]
 800e440:	4621      	mov	r1, r4
 800e442:	f103 3bff 	add.w	fp, r3, #4294967295
 800e446:	f7ff fb05 	bl	800da54 <quorem>
 800e44a:	4641      	mov	r1, r8
 800e44c:	9002      	str	r0, [sp, #8]
 800e44e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e452:	9801      	ldr	r0, [sp, #4]
 800e454:	f000 fbec 	bl	800ec30 <__mcmp>
 800e458:	462a      	mov	r2, r5
 800e45a:	9006      	str	r0, [sp, #24]
 800e45c:	4621      	mov	r1, r4
 800e45e:	4648      	mov	r0, r9
 800e460:	f000 fc02 	bl	800ec68 <__mdiff>
 800e464:	68c2      	ldr	r2, [r0, #12]
 800e466:	4606      	mov	r6, r0
 800e468:	b9fa      	cbnz	r2, 800e4aa <_dtoa_r+0x942>
 800e46a:	4601      	mov	r1, r0
 800e46c:	9801      	ldr	r0, [sp, #4]
 800e46e:	f000 fbdf 	bl	800ec30 <__mcmp>
 800e472:	4602      	mov	r2, r0
 800e474:	4631      	mov	r1, r6
 800e476:	4648      	mov	r0, r9
 800e478:	920a      	str	r2, [sp, #40]	@ 0x28
 800e47a:	f000 f955 	bl	800e728 <_Bfree>
 800e47e:	9b07      	ldr	r3, [sp, #28]
 800e480:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e482:	9e05      	ldr	r6, [sp, #20]
 800e484:	ea43 0102 	orr.w	r1, r3, r2
 800e488:	9b08      	ldr	r3, [sp, #32]
 800e48a:	4319      	orrs	r1, r3
 800e48c:	d10f      	bne.n	800e4ae <_dtoa_r+0x946>
 800e48e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e492:	d028      	beq.n	800e4e6 <_dtoa_r+0x97e>
 800e494:	9b06      	ldr	r3, [sp, #24]
 800e496:	2b00      	cmp	r3, #0
 800e498:	dd02      	ble.n	800e4a0 <_dtoa_r+0x938>
 800e49a:	9b02      	ldr	r3, [sp, #8]
 800e49c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800e4a0:	f88b a000 	strb.w	sl, [fp]
 800e4a4:	e639      	b.n	800e11a <_dtoa_r+0x5b2>
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	e7bd      	b.n	800e426 <_dtoa_r+0x8be>
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	e7e2      	b.n	800e474 <_dtoa_r+0x90c>
 800e4ae:	9b06      	ldr	r3, [sp, #24]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	db04      	blt.n	800e4be <_dtoa_r+0x956>
 800e4b4:	9907      	ldr	r1, [sp, #28]
 800e4b6:	430b      	orrs	r3, r1
 800e4b8:	9908      	ldr	r1, [sp, #32]
 800e4ba:	430b      	orrs	r3, r1
 800e4bc:	d120      	bne.n	800e500 <_dtoa_r+0x998>
 800e4be:	2a00      	cmp	r2, #0
 800e4c0:	ddee      	ble.n	800e4a0 <_dtoa_r+0x938>
 800e4c2:	9901      	ldr	r1, [sp, #4]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	4648      	mov	r0, r9
 800e4c8:	f000 fb46 	bl	800eb58 <__lshift>
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	9001      	str	r0, [sp, #4]
 800e4d0:	f000 fbae 	bl	800ec30 <__mcmp>
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	dc03      	bgt.n	800e4e0 <_dtoa_r+0x978>
 800e4d8:	d1e2      	bne.n	800e4a0 <_dtoa_r+0x938>
 800e4da:	f01a 0f01 	tst.w	sl, #1
 800e4de:	d0df      	beq.n	800e4a0 <_dtoa_r+0x938>
 800e4e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e4e4:	d1d9      	bne.n	800e49a <_dtoa_r+0x932>
 800e4e6:	2339      	movs	r3, #57	@ 0x39
 800e4e8:	f88b 3000 	strb.w	r3, [fp]
 800e4ec:	4633      	mov	r3, r6
 800e4ee:	461e      	mov	r6, r3
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e4f6:	2a39      	cmp	r2, #57	@ 0x39
 800e4f8:	d053      	beq.n	800e5a2 <_dtoa_r+0xa3a>
 800e4fa:	3201      	adds	r2, #1
 800e4fc:	701a      	strb	r2, [r3, #0]
 800e4fe:	e60c      	b.n	800e11a <_dtoa_r+0x5b2>
 800e500:	2a00      	cmp	r2, #0
 800e502:	dd07      	ble.n	800e514 <_dtoa_r+0x9ac>
 800e504:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e508:	d0ed      	beq.n	800e4e6 <_dtoa_r+0x97e>
 800e50a:	f10a 0301 	add.w	r3, sl, #1
 800e50e:	f88b 3000 	strb.w	r3, [fp]
 800e512:	e602      	b.n	800e11a <_dtoa_r+0x5b2>
 800e514:	9b05      	ldr	r3, [sp, #20]
 800e516:	9a05      	ldr	r2, [sp, #20]
 800e518:	f803 ac01 	strb.w	sl, [r3, #-1]
 800e51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e51e:	4293      	cmp	r3, r2
 800e520:	d029      	beq.n	800e576 <_dtoa_r+0xa0e>
 800e522:	9901      	ldr	r1, [sp, #4]
 800e524:	2300      	movs	r3, #0
 800e526:	220a      	movs	r2, #10
 800e528:	4648      	mov	r0, r9
 800e52a:	f000 f91f 	bl	800e76c <__multadd>
 800e52e:	45a8      	cmp	r8, r5
 800e530:	9001      	str	r0, [sp, #4]
 800e532:	f04f 0300 	mov.w	r3, #0
 800e536:	f04f 020a 	mov.w	r2, #10
 800e53a:	4641      	mov	r1, r8
 800e53c:	4648      	mov	r0, r9
 800e53e:	d107      	bne.n	800e550 <_dtoa_r+0x9e8>
 800e540:	f000 f914 	bl	800e76c <__multadd>
 800e544:	4680      	mov	r8, r0
 800e546:	4605      	mov	r5, r0
 800e548:	9b05      	ldr	r3, [sp, #20]
 800e54a:	3301      	adds	r3, #1
 800e54c:	9305      	str	r3, [sp, #20]
 800e54e:	e775      	b.n	800e43c <_dtoa_r+0x8d4>
 800e550:	f000 f90c 	bl	800e76c <__multadd>
 800e554:	4629      	mov	r1, r5
 800e556:	4680      	mov	r8, r0
 800e558:	2300      	movs	r3, #0
 800e55a:	220a      	movs	r2, #10
 800e55c:	4648      	mov	r0, r9
 800e55e:	f000 f905 	bl	800e76c <__multadd>
 800e562:	4605      	mov	r5, r0
 800e564:	e7f0      	b.n	800e548 <_dtoa_r+0x9e0>
 800e566:	f1bb 0f00 	cmp.w	fp, #0
 800e56a:	bfcc      	ite	gt
 800e56c:	465e      	movgt	r6, fp
 800e56e:	2601      	movle	r6, #1
 800e570:	443e      	add	r6, r7
 800e572:	f04f 0800 	mov.w	r8, #0
 800e576:	9901      	ldr	r1, [sp, #4]
 800e578:	2201      	movs	r2, #1
 800e57a:	4648      	mov	r0, r9
 800e57c:	f000 faec 	bl	800eb58 <__lshift>
 800e580:	4621      	mov	r1, r4
 800e582:	9001      	str	r0, [sp, #4]
 800e584:	f000 fb54 	bl	800ec30 <__mcmp>
 800e588:	2800      	cmp	r0, #0
 800e58a:	dcaf      	bgt.n	800e4ec <_dtoa_r+0x984>
 800e58c:	d102      	bne.n	800e594 <_dtoa_r+0xa2c>
 800e58e:	f01a 0f01 	tst.w	sl, #1
 800e592:	d1ab      	bne.n	800e4ec <_dtoa_r+0x984>
 800e594:	4633      	mov	r3, r6
 800e596:	461e      	mov	r6, r3
 800e598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e59c:	2a30      	cmp	r2, #48	@ 0x30
 800e59e:	d0fa      	beq.n	800e596 <_dtoa_r+0xa2e>
 800e5a0:	e5bb      	b.n	800e11a <_dtoa_r+0x5b2>
 800e5a2:	429f      	cmp	r7, r3
 800e5a4:	d1a3      	bne.n	800e4ee <_dtoa_r+0x986>
 800e5a6:	9b04      	ldr	r3, [sp, #16]
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	9304      	str	r3, [sp, #16]
 800e5ac:	2331      	movs	r3, #49	@ 0x31
 800e5ae:	703b      	strb	r3, [r7, #0]
 800e5b0:	e5b3      	b.n	800e11a <_dtoa_r+0x5b2>
 800e5b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e5b4:	4f16      	ldr	r7, [pc, #88]	@ (800e610 <_dtoa_r+0xaa8>)
 800e5b6:	b11b      	cbz	r3, 800e5c0 <_dtoa_r+0xa58>
 800e5b8:	f107 0308 	add.w	r3, r7, #8
 800e5bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	4638      	mov	r0, r7
 800e5c2:	b011      	add	sp, #68	@ 0x44
 800e5c4:	ecbd 8b02 	vpop	{d8}
 800e5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5cc:	9b07      	ldr	r3, [sp, #28]
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	f77f ae36 	ble.w	800e240 <_dtoa_r+0x6d8>
 800e5d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5d8:	2001      	movs	r0, #1
 800e5da:	e656      	b.n	800e28a <_dtoa_r+0x722>
 800e5dc:	f1bb 0f00 	cmp.w	fp, #0
 800e5e0:	f77f aed7 	ble.w	800e392 <_dtoa_r+0x82a>
 800e5e4:	463e      	mov	r6, r7
 800e5e6:	9801      	ldr	r0, [sp, #4]
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	f7ff fa33 	bl	800da54 <quorem>
 800e5ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e5f2:	f806 ab01 	strb.w	sl, [r6], #1
 800e5f6:	1bf2      	subs	r2, r6, r7
 800e5f8:	4593      	cmp	fp, r2
 800e5fa:	ddb4      	ble.n	800e566 <_dtoa_r+0x9fe>
 800e5fc:	9901      	ldr	r1, [sp, #4]
 800e5fe:	2300      	movs	r3, #0
 800e600:	220a      	movs	r2, #10
 800e602:	4648      	mov	r0, r9
 800e604:	f000 f8b2 	bl	800e76c <__multadd>
 800e608:	9001      	str	r0, [sp, #4]
 800e60a:	e7ec      	b.n	800e5e6 <_dtoa_r+0xa7e>
 800e60c:	08010e25 	.word	0x08010e25
 800e610:	08010da9 	.word	0x08010da9

0800e614 <_free_r>:
 800e614:	b538      	push	{r3, r4, r5, lr}
 800e616:	4605      	mov	r5, r0
 800e618:	2900      	cmp	r1, #0
 800e61a:	d041      	beq.n	800e6a0 <_free_r+0x8c>
 800e61c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e620:	1f0c      	subs	r4, r1, #4
 800e622:	2b00      	cmp	r3, #0
 800e624:	bfb8      	it	lt
 800e626:	18e4      	addlt	r4, r4, r3
 800e628:	f7fe f942 	bl	800c8b0 <__malloc_lock>
 800e62c:	4a1d      	ldr	r2, [pc, #116]	@ (800e6a4 <_free_r+0x90>)
 800e62e:	6813      	ldr	r3, [r2, #0]
 800e630:	b933      	cbnz	r3, 800e640 <_free_r+0x2c>
 800e632:	6063      	str	r3, [r4, #4]
 800e634:	6014      	str	r4, [r2, #0]
 800e636:	4628      	mov	r0, r5
 800e638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e63c:	f7fe b93e 	b.w	800c8bc <__malloc_unlock>
 800e640:	42a3      	cmp	r3, r4
 800e642:	d908      	bls.n	800e656 <_free_r+0x42>
 800e644:	6820      	ldr	r0, [r4, #0]
 800e646:	1821      	adds	r1, r4, r0
 800e648:	428b      	cmp	r3, r1
 800e64a:	bf01      	itttt	eq
 800e64c:	6819      	ldreq	r1, [r3, #0]
 800e64e:	685b      	ldreq	r3, [r3, #4]
 800e650:	1809      	addeq	r1, r1, r0
 800e652:	6021      	streq	r1, [r4, #0]
 800e654:	e7ed      	b.n	800e632 <_free_r+0x1e>
 800e656:	461a      	mov	r2, r3
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	b10b      	cbz	r3, 800e660 <_free_r+0x4c>
 800e65c:	42a3      	cmp	r3, r4
 800e65e:	d9fa      	bls.n	800e656 <_free_r+0x42>
 800e660:	6811      	ldr	r1, [r2, #0]
 800e662:	1850      	adds	r0, r2, r1
 800e664:	42a0      	cmp	r0, r4
 800e666:	d10b      	bne.n	800e680 <_free_r+0x6c>
 800e668:	6820      	ldr	r0, [r4, #0]
 800e66a:	4401      	add	r1, r0
 800e66c:	1850      	adds	r0, r2, r1
 800e66e:	4283      	cmp	r3, r0
 800e670:	6011      	str	r1, [r2, #0]
 800e672:	d1e0      	bne.n	800e636 <_free_r+0x22>
 800e674:	6818      	ldr	r0, [r3, #0]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	6053      	str	r3, [r2, #4]
 800e67a:	4408      	add	r0, r1
 800e67c:	6010      	str	r0, [r2, #0]
 800e67e:	e7da      	b.n	800e636 <_free_r+0x22>
 800e680:	d902      	bls.n	800e688 <_free_r+0x74>
 800e682:	230c      	movs	r3, #12
 800e684:	602b      	str	r3, [r5, #0]
 800e686:	e7d6      	b.n	800e636 <_free_r+0x22>
 800e688:	6820      	ldr	r0, [r4, #0]
 800e68a:	1821      	adds	r1, r4, r0
 800e68c:	428b      	cmp	r3, r1
 800e68e:	bf04      	itt	eq
 800e690:	6819      	ldreq	r1, [r3, #0]
 800e692:	685b      	ldreq	r3, [r3, #4]
 800e694:	6063      	str	r3, [r4, #4]
 800e696:	bf04      	itt	eq
 800e698:	1809      	addeq	r1, r1, r0
 800e69a:	6021      	streq	r1, [r4, #0]
 800e69c:	6054      	str	r4, [r2, #4]
 800e69e:	e7ca      	b.n	800e636 <_free_r+0x22>
 800e6a0:	bd38      	pop	{r3, r4, r5, pc}
 800e6a2:	bf00      	nop
 800e6a4:	2400081c 	.word	0x2400081c

0800e6a8 <_Balloc>:
 800e6a8:	b570      	push	{r4, r5, r6, lr}
 800e6aa:	69c6      	ldr	r6, [r0, #28]
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	460d      	mov	r5, r1
 800e6b0:	b976      	cbnz	r6, 800e6d0 <_Balloc+0x28>
 800e6b2:	2010      	movs	r0, #16
 800e6b4:	f7fe f852 	bl	800c75c <malloc>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	61e0      	str	r0, [r4, #28]
 800e6bc:	b920      	cbnz	r0, 800e6c8 <_Balloc+0x20>
 800e6be:	4b18      	ldr	r3, [pc, #96]	@ (800e720 <_Balloc+0x78>)
 800e6c0:	4818      	ldr	r0, [pc, #96]	@ (800e724 <_Balloc+0x7c>)
 800e6c2:	216b      	movs	r1, #107	@ 0x6b
 800e6c4:	f001 fec0 	bl	8010448 <__assert_func>
 800e6c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6cc:	6006      	str	r6, [r0, #0]
 800e6ce:	60c6      	str	r6, [r0, #12]
 800e6d0:	69e6      	ldr	r6, [r4, #28]
 800e6d2:	68f3      	ldr	r3, [r6, #12]
 800e6d4:	b183      	cbz	r3, 800e6f8 <_Balloc+0x50>
 800e6d6:	69e3      	ldr	r3, [r4, #28]
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e6de:	b9b8      	cbnz	r0, 800e710 <_Balloc+0x68>
 800e6e0:	2101      	movs	r1, #1
 800e6e2:	fa01 f605 	lsl.w	r6, r1, r5
 800e6e6:	1d72      	adds	r2, r6, #5
 800e6e8:	0092      	lsls	r2, r2, #2
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	f001 feca 	bl	8010484 <_calloc_r>
 800e6f0:	b160      	cbz	r0, 800e70c <_Balloc+0x64>
 800e6f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e6f6:	e00e      	b.n	800e716 <_Balloc+0x6e>
 800e6f8:	2221      	movs	r2, #33	@ 0x21
 800e6fa:	2104      	movs	r1, #4
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f001 fec1 	bl	8010484 <_calloc_r>
 800e702:	69e3      	ldr	r3, [r4, #28]
 800e704:	60f0      	str	r0, [r6, #12]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1e4      	bne.n	800e6d6 <_Balloc+0x2e>
 800e70c:	2000      	movs	r0, #0
 800e70e:	bd70      	pop	{r4, r5, r6, pc}
 800e710:	6802      	ldr	r2, [r0, #0]
 800e712:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e716:	2300      	movs	r3, #0
 800e718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e71c:	e7f7      	b.n	800e70e <_Balloc+0x66>
 800e71e:	bf00      	nop
 800e720:	08010db6 	.word	0x08010db6
 800e724:	08010e36 	.word	0x08010e36

0800e728 <_Bfree>:
 800e728:	b570      	push	{r4, r5, r6, lr}
 800e72a:	69c6      	ldr	r6, [r0, #28]
 800e72c:	4605      	mov	r5, r0
 800e72e:	460c      	mov	r4, r1
 800e730:	b976      	cbnz	r6, 800e750 <_Bfree+0x28>
 800e732:	2010      	movs	r0, #16
 800e734:	f7fe f812 	bl	800c75c <malloc>
 800e738:	4602      	mov	r2, r0
 800e73a:	61e8      	str	r0, [r5, #28]
 800e73c:	b920      	cbnz	r0, 800e748 <_Bfree+0x20>
 800e73e:	4b09      	ldr	r3, [pc, #36]	@ (800e764 <_Bfree+0x3c>)
 800e740:	4809      	ldr	r0, [pc, #36]	@ (800e768 <_Bfree+0x40>)
 800e742:	218f      	movs	r1, #143	@ 0x8f
 800e744:	f001 fe80 	bl	8010448 <__assert_func>
 800e748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e74c:	6006      	str	r6, [r0, #0]
 800e74e:	60c6      	str	r6, [r0, #12]
 800e750:	b13c      	cbz	r4, 800e762 <_Bfree+0x3a>
 800e752:	69eb      	ldr	r3, [r5, #28]
 800e754:	6862      	ldr	r2, [r4, #4]
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e75c:	6021      	str	r1, [r4, #0]
 800e75e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e762:	bd70      	pop	{r4, r5, r6, pc}
 800e764:	08010db6 	.word	0x08010db6
 800e768:	08010e36 	.word	0x08010e36

0800e76c <__multadd>:
 800e76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e770:	690d      	ldr	r5, [r1, #16]
 800e772:	4607      	mov	r7, r0
 800e774:	460c      	mov	r4, r1
 800e776:	461e      	mov	r6, r3
 800e778:	f101 0c14 	add.w	ip, r1, #20
 800e77c:	2000      	movs	r0, #0
 800e77e:	f8dc 3000 	ldr.w	r3, [ip]
 800e782:	b299      	uxth	r1, r3
 800e784:	fb02 6101 	mla	r1, r2, r1, r6
 800e788:	0c1e      	lsrs	r6, r3, #16
 800e78a:	0c0b      	lsrs	r3, r1, #16
 800e78c:	fb02 3306 	mla	r3, r2, r6, r3
 800e790:	b289      	uxth	r1, r1
 800e792:	3001      	adds	r0, #1
 800e794:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e798:	4285      	cmp	r5, r0
 800e79a:	f84c 1b04 	str.w	r1, [ip], #4
 800e79e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e7a2:	dcec      	bgt.n	800e77e <__multadd+0x12>
 800e7a4:	b30e      	cbz	r6, 800e7ea <__multadd+0x7e>
 800e7a6:	68a3      	ldr	r3, [r4, #8]
 800e7a8:	42ab      	cmp	r3, r5
 800e7aa:	dc19      	bgt.n	800e7e0 <__multadd+0x74>
 800e7ac:	6861      	ldr	r1, [r4, #4]
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	3101      	adds	r1, #1
 800e7b2:	f7ff ff79 	bl	800e6a8 <_Balloc>
 800e7b6:	4680      	mov	r8, r0
 800e7b8:	b928      	cbnz	r0, 800e7c6 <__multadd+0x5a>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	4b0c      	ldr	r3, [pc, #48]	@ (800e7f0 <__multadd+0x84>)
 800e7be:	480d      	ldr	r0, [pc, #52]	@ (800e7f4 <__multadd+0x88>)
 800e7c0:	21ba      	movs	r1, #186	@ 0xba
 800e7c2:	f001 fe41 	bl	8010448 <__assert_func>
 800e7c6:	6922      	ldr	r2, [r4, #16]
 800e7c8:	3202      	adds	r2, #2
 800e7ca:	f104 010c 	add.w	r1, r4, #12
 800e7ce:	0092      	lsls	r2, r2, #2
 800e7d0:	300c      	adds	r0, #12
 800e7d2:	f7ff f92a 	bl	800da2a <memcpy>
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f7ff ffa5 	bl	800e728 <_Bfree>
 800e7de:	4644      	mov	r4, r8
 800e7e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e7e4:	3501      	adds	r5, #1
 800e7e6:	615e      	str	r6, [r3, #20]
 800e7e8:	6125      	str	r5, [r4, #16]
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f0:	08010e25 	.word	0x08010e25
 800e7f4:	08010e36 	.word	0x08010e36

0800e7f8 <__s2b>:
 800e7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7fc:	460c      	mov	r4, r1
 800e7fe:	4615      	mov	r5, r2
 800e800:	461f      	mov	r7, r3
 800e802:	2209      	movs	r2, #9
 800e804:	3308      	adds	r3, #8
 800e806:	4606      	mov	r6, r0
 800e808:	fb93 f3f2 	sdiv	r3, r3, r2
 800e80c:	2100      	movs	r1, #0
 800e80e:	2201      	movs	r2, #1
 800e810:	429a      	cmp	r2, r3
 800e812:	db09      	blt.n	800e828 <__s2b+0x30>
 800e814:	4630      	mov	r0, r6
 800e816:	f7ff ff47 	bl	800e6a8 <_Balloc>
 800e81a:	b940      	cbnz	r0, 800e82e <__s2b+0x36>
 800e81c:	4602      	mov	r2, r0
 800e81e:	4b19      	ldr	r3, [pc, #100]	@ (800e884 <__s2b+0x8c>)
 800e820:	4819      	ldr	r0, [pc, #100]	@ (800e888 <__s2b+0x90>)
 800e822:	21d3      	movs	r1, #211	@ 0xd3
 800e824:	f001 fe10 	bl	8010448 <__assert_func>
 800e828:	0052      	lsls	r2, r2, #1
 800e82a:	3101      	adds	r1, #1
 800e82c:	e7f0      	b.n	800e810 <__s2b+0x18>
 800e82e:	9b08      	ldr	r3, [sp, #32]
 800e830:	6143      	str	r3, [r0, #20]
 800e832:	2d09      	cmp	r5, #9
 800e834:	f04f 0301 	mov.w	r3, #1
 800e838:	6103      	str	r3, [r0, #16]
 800e83a:	dd16      	ble.n	800e86a <__s2b+0x72>
 800e83c:	f104 0909 	add.w	r9, r4, #9
 800e840:	46c8      	mov	r8, r9
 800e842:	442c      	add	r4, r5
 800e844:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e848:	4601      	mov	r1, r0
 800e84a:	3b30      	subs	r3, #48	@ 0x30
 800e84c:	220a      	movs	r2, #10
 800e84e:	4630      	mov	r0, r6
 800e850:	f7ff ff8c 	bl	800e76c <__multadd>
 800e854:	45a0      	cmp	r8, r4
 800e856:	d1f5      	bne.n	800e844 <__s2b+0x4c>
 800e858:	f1a5 0408 	sub.w	r4, r5, #8
 800e85c:	444c      	add	r4, r9
 800e85e:	1b2d      	subs	r5, r5, r4
 800e860:	1963      	adds	r3, r4, r5
 800e862:	42bb      	cmp	r3, r7
 800e864:	db04      	blt.n	800e870 <__s2b+0x78>
 800e866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e86a:	340a      	adds	r4, #10
 800e86c:	2509      	movs	r5, #9
 800e86e:	e7f6      	b.n	800e85e <__s2b+0x66>
 800e870:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e874:	4601      	mov	r1, r0
 800e876:	3b30      	subs	r3, #48	@ 0x30
 800e878:	220a      	movs	r2, #10
 800e87a:	4630      	mov	r0, r6
 800e87c:	f7ff ff76 	bl	800e76c <__multadd>
 800e880:	e7ee      	b.n	800e860 <__s2b+0x68>
 800e882:	bf00      	nop
 800e884:	08010e25 	.word	0x08010e25
 800e888:	08010e36 	.word	0x08010e36

0800e88c <__hi0bits>:
 800e88c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e890:	4603      	mov	r3, r0
 800e892:	bf36      	itet	cc
 800e894:	0403      	lslcc	r3, r0, #16
 800e896:	2000      	movcs	r0, #0
 800e898:	2010      	movcc	r0, #16
 800e89a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e89e:	bf3c      	itt	cc
 800e8a0:	021b      	lslcc	r3, r3, #8
 800e8a2:	3008      	addcc	r0, #8
 800e8a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e8a8:	bf3c      	itt	cc
 800e8aa:	011b      	lslcc	r3, r3, #4
 800e8ac:	3004      	addcc	r0, #4
 800e8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8b2:	bf3c      	itt	cc
 800e8b4:	009b      	lslcc	r3, r3, #2
 800e8b6:	3002      	addcc	r0, #2
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	db05      	blt.n	800e8c8 <__hi0bits+0x3c>
 800e8bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e8c0:	f100 0001 	add.w	r0, r0, #1
 800e8c4:	bf08      	it	eq
 800e8c6:	2020      	moveq	r0, #32
 800e8c8:	4770      	bx	lr

0800e8ca <__lo0bits>:
 800e8ca:	6803      	ldr	r3, [r0, #0]
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	f013 0007 	ands.w	r0, r3, #7
 800e8d2:	d00b      	beq.n	800e8ec <__lo0bits+0x22>
 800e8d4:	07d9      	lsls	r1, r3, #31
 800e8d6:	d421      	bmi.n	800e91c <__lo0bits+0x52>
 800e8d8:	0798      	lsls	r0, r3, #30
 800e8da:	bf49      	itett	mi
 800e8dc:	085b      	lsrmi	r3, r3, #1
 800e8de:	089b      	lsrpl	r3, r3, #2
 800e8e0:	2001      	movmi	r0, #1
 800e8e2:	6013      	strmi	r3, [r2, #0]
 800e8e4:	bf5c      	itt	pl
 800e8e6:	6013      	strpl	r3, [r2, #0]
 800e8e8:	2002      	movpl	r0, #2
 800e8ea:	4770      	bx	lr
 800e8ec:	b299      	uxth	r1, r3
 800e8ee:	b909      	cbnz	r1, 800e8f4 <__lo0bits+0x2a>
 800e8f0:	0c1b      	lsrs	r3, r3, #16
 800e8f2:	2010      	movs	r0, #16
 800e8f4:	b2d9      	uxtb	r1, r3
 800e8f6:	b909      	cbnz	r1, 800e8fc <__lo0bits+0x32>
 800e8f8:	3008      	adds	r0, #8
 800e8fa:	0a1b      	lsrs	r3, r3, #8
 800e8fc:	0719      	lsls	r1, r3, #28
 800e8fe:	bf04      	itt	eq
 800e900:	091b      	lsreq	r3, r3, #4
 800e902:	3004      	addeq	r0, #4
 800e904:	0799      	lsls	r1, r3, #30
 800e906:	bf04      	itt	eq
 800e908:	089b      	lsreq	r3, r3, #2
 800e90a:	3002      	addeq	r0, #2
 800e90c:	07d9      	lsls	r1, r3, #31
 800e90e:	d403      	bmi.n	800e918 <__lo0bits+0x4e>
 800e910:	085b      	lsrs	r3, r3, #1
 800e912:	f100 0001 	add.w	r0, r0, #1
 800e916:	d003      	beq.n	800e920 <__lo0bits+0x56>
 800e918:	6013      	str	r3, [r2, #0]
 800e91a:	4770      	bx	lr
 800e91c:	2000      	movs	r0, #0
 800e91e:	4770      	bx	lr
 800e920:	2020      	movs	r0, #32
 800e922:	4770      	bx	lr

0800e924 <__i2b>:
 800e924:	b510      	push	{r4, lr}
 800e926:	460c      	mov	r4, r1
 800e928:	2101      	movs	r1, #1
 800e92a:	f7ff febd 	bl	800e6a8 <_Balloc>
 800e92e:	4602      	mov	r2, r0
 800e930:	b928      	cbnz	r0, 800e93e <__i2b+0x1a>
 800e932:	4b05      	ldr	r3, [pc, #20]	@ (800e948 <__i2b+0x24>)
 800e934:	4805      	ldr	r0, [pc, #20]	@ (800e94c <__i2b+0x28>)
 800e936:	f240 1145 	movw	r1, #325	@ 0x145
 800e93a:	f001 fd85 	bl	8010448 <__assert_func>
 800e93e:	2301      	movs	r3, #1
 800e940:	6144      	str	r4, [r0, #20]
 800e942:	6103      	str	r3, [r0, #16]
 800e944:	bd10      	pop	{r4, pc}
 800e946:	bf00      	nop
 800e948:	08010e25 	.word	0x08010e25
 800e94c:	08010e36 	.word	0x08010e36

0800e950 <__multiply>:
 800e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e954:	4614      	mov	r4, r2
 800e956:	690a      	ldr	r2, [r1, #16]
 800e958:	6923      	ldr	r3, [r4, #16]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	bfa8      	it	ge
 800e95e:	4623      	movge	r3, r4
 800e960:	460f      	mov	r7, r1
 800e962:	bfa4      	itt	ge
 800e964:	460c      	movge	r4, r1
 800e966:	461f      	movge	r7, r3
 800e968:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e96c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e970:	68a3      	ldr	r3, [r4, #8]
 800e972:	6861      	ldr	r1, [r4, #4]
 800e974:	eb0a 0609 	add.w	r6, sl, r9
 800e978:	42b3      	cmp	r3, r6
 800e97a:	b085      	sub	sp, #20
 800e97c:	bfb8      	it	lt
 800e97e:	3101      	addlt	r1, #1
 800e980:	f7ff fe92 	bl	800e6a8 <_Balloc>
 800e984:	b930      	cbnz	r0, 800e994 <__multiply+0x44>
 800e986:	4602      	mov	r2, r0
 800e988:	4b44      	ldr	r3, [pc, #272]	@ (800ea9c <__multiply+0x14c>)
 800e98a:	4845      	ldr	r0, [pc, #276]	@ (800eaa0 <__multiply+0x150>)
 800e98c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e990:	f001 fd5a 	bl	8010448 <__assert_func>
 800e994:	f100 0514 	add.w	r5, r0, #20
 800e998:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e99c:	462b      	mov	r3, r5
 800e99e:	2200      	movs	r2, #0
 800e9a0:	4543      	cmp	r3, r8
 800e9a2:	d321      	bcc.n	800e9e8 <__multiply+0x98>
 800e9a4:	f107 0114 	add.w	r1, r7, #20
 800e9a8:	f104 0214 	add.w	r2, r4, #20
 800e9ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e9b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e9b4:	9302      	str	r3, [sp, #8]
 800e9b6:	1b13      	subs	r3, r2, r4
 800e9b8:	3b15      	subs	r3, #21
 800e9ba:	f023 0303 	bic.w	r3, r3, #3
 800e9be:	3304      	adds	r3, #4
 800e9c0:	f104 0715 	add.w	r7, r4, #21
 800e9c4:	42ba      	cmp	r2, r7
 800e9c6:	bf38      	it	cc
 800e9c8:	2304      	movcc	r3, #4
 800e9ca:	9301      	str	r3, [sp, #4]
 800e9cc:	9b02      	ldr	r3, [sp, #8]
 800e9ce:	9103      	str	r1, [sp, #12]
 800e9d0:	428b      	cmp	r3, r1
 800e9d2:	d80c      	bhi.n	800e9ee <__multiply+0x9e>
 800e9d4:	2e00      	cmp	r6, #0
 800e9d6:	dd03      	ble.n	800e9e0 <__multiply+0x90>
 800e9d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d05b      	beq.n	800ea98 <__multiply+0x148>
 800e9e0:	6106      	str	r6, [r0, #16]
 800e9e2:	b005      	add	sp, #20
 800e9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e8:	f843 2b04 	str.w	r2, [r3], #4
 800e9ec:	e7d8      	b.n	800e9a0 <__multiply+0x50>
 800e9ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800e9f2:	f1ba 0f00 	cmp.w	sl, #0
 800e9f6:	d024      	beq.n	800ea42 <__multiply+0xf2>
 800e9f8:	f104 0e14 	add.w	lr, r4, #20
 800e9fc:	46a9      	mov	r9, r5
 800e9fe:	f04f 0c00 	mov.w	ip, #0
 800ea02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea06:	f8d9 3000 	ldr.w	r3, [r9]
 800ea0a:	fa1f fb87 	uxth.w	fp, r7
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	fb0a 330b 	mla	r3, sl, fp, r3
 800ea14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ea18:	f8d9 7000 	ldr.w	r7, [r9]
 800ea1c:	4463      	add	r3, ip
 800ea1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ea22:	fb0a c70b 	mla	r7, sl, fp, ip
 800ea26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ea30:	4572      	cmp	r2, lr
 800ea32:	f849 3b04 	str.w	r3, [r9], #4
 800ea36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ea3a:	d8e2      	bhi.n	800ea02 <__multiply+0xb2>
 800ea3c:	9b01      	ldr	r3, [sp, #4]
 800ea3e:	f845 c003 	str.w	ip, [r5, r3]
 800ea42:	9b03      	ldr	r3, [sp, #12]
 800ea44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ea48:	3104      	adds	r1, #4
 800ea4a:	f1b9 0f00 	cmp.w	r9, #0
 800ea4e:	d021      	beq.n	800ea94 <__multiply+0x144>
 800ea50:	682b      	ldr	r3, [r5, #0]
 800ea52:	f104 0c14 	add.w	ip, r4, #20
 800ea56:	46ae      	mov	lr, r5
 800ea58:	f04f 0a00 	mov.w	sl, #0
 800ea5c:	f8bc b000 	ldrh.w	fp, [ip]
 800ea60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ea64:	fb09 770b 	mla	r7, r9, fp, r7
 800ea68:	4457      	add	r7, sl
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ea70:	f84e 3b04 	str.w	r3, [lr], #4
 800ea74:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ea78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea7c:	f8be 3000 	ldrh.w	r3, [lr]
 800ea80:	fb09 330a 	mla	r3, r9, sl, r3
 800ea84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ea88:	4562      	cmp	r2, ip
 800ea8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea8e:	d8e5      	bhi.n	800ea5c <__multiply+0x10c>
 800ea90:	9f01      	ldr	r7, [sp, #4]
 800ea92:	51eb      	str	r3, [r5, r7]
 800ea94:	3504      	adds	r5, #4
 800ea96:	e799      	b.n	800e9cc <__multiply+0x7c>
 800ea98:	3e01      	subs	r6, #1
 800ea9a:	e79b      	b.n	800e9d4 <__multiply+0x84>
 800ea9c:	08010e25 	.word	0x08010e25
 800eaa0:	08010e36 	.word	0x08010e36

0800eaa4 <__pow5mult>:
 800eaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaa8:	4615      	mov	r5, r2
 800eaaa:	f012 0203 	ands.w	r2, r2, #3
 800eaae:	4607      	mov	r7, r0
 800eab0:	460e      	mov	r6, r1
 800eab2:	d007      	beq.n	800eac4 <__pow5mult+0x20>
 800eab4:	4c25      	ldr	r4, [pc, #148]	@ (800eb4c <__pow5mult+0xa8>)
 800eab6:	3a01      	subs	r2, #1
 800eab8:	2300      	movs	r3, #0
 800eaba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eabe:	f7ff fe55 	bl	800e76c <__multadd>
 800eac2:	4606      	mov	r6, r0
 800eac4:	10ad      	asrs	r5, r5, #2
 800eac6:	d03d      	beq.n	800eb44 <__pow5mult+0xa0>
 800eac8:	69fc      	ldr	r4, [r7, #28]
 800eaca:	b97c      	cbnz	r4, 800eaec <__pow5mult+0x48>
 800eacc:	2010      	movs	r0, #16
 800eace:	f7fd fe45 	bl	800c75c <malloc>
 800ead2:	4602      	mov	r2, r0
 800ead4:	61f8      	str	r0, [r7, #28]
 800ead6:	b928      	cbnz	r0, 800eae4 <__pow5mult+0x40>
 800ead8:	4b1d      	ldr	r3, [pc, #116]	@ (800eb50 <__pow5mult+0xac>)
 800eada:	481e      	ldr	r0, [pc, #120]	@ (800eb54 <__pow5mult+0xb0>)
 800eadc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800eae0:	f001 fcb2 	bl	8010448 <__assert_func>
 800eae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eae8:	6004      	str	r4, [r0, #0]
 800eaea:	60c4      	str	r4, [r0, #12]
 800eaec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800eaf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eaf4:	b94c      	cbnz	r4, 800eb0a <__pow5mult+0x66>
 800eaf6:	f240 2171 	movw	r1, #625	@ 0x271
 800eafa:	4638      	mov	r0, r7
 800eafc:	f7ff ff12 	bl	800e924 <__i2b>
 800eb00:	2300      	movs	r3, #0
 800eb02:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb06:	4604      	mov	r4, r0
 800eb08:	6003      	str	r3, [r0, #0]
 800eb0a:	f04f 0900 	mov.w	r9, #0
 800eb0e:	07eb      	lsls	r3, r5, #31
 800eb10:	d50a      	bpl.n	800eb28 <__pow5mult+0x84>
 800eb12:	4631      	mov	r1, r6
 800eb14:	4622      	mov	r2, r4
 800eb16:	4638      	mov	r0, r7
 800eb18:	f7ff ff1a 	bl	800e950 <__multiply>
 800eb1c:	4631      	mov	r1, r6
 800eb1e:	4680      	mov	r8, r0
 800eb20:	4638      	mov	r0, r7
 800eb22:	f7ff fe01 	bl	800e728 <_Bfree>
 800eb26:	4646      	mov	r6, r8
 800eb28:	106d      	asrs	r5, r5, #1
 800eb2a:	d00b      	beq.n	800eb44 <__pow5mult+0xa0>
 800eb2c:	6820      	ldr	r0, [r4, #0]
 800eb2e:	b938      	cbnz	r0, 800eb40 <__pow5mult+0x9c>
 800eb30:	4622      	mov	r2, r4
 800eb32:	4621      	mov	r1, r4
 800eb34:	4638      	mov	r0, r7
 800eb36:	f7ff ff0b 	bl	800e950 <__multiply>
 800eb3a:	6020      	str	r0, [r4, #0]
 800eb3c:	f8c0 9000 	str.w	r9, [r0]
 800eb40:	4604      	mov	r4, r0
 800eb42:	e7e4      	b.n	800eb0e <__pow5mult+0x6a>
 800eb44:	4630      	mov	r0, r6
 800eb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb4a:	bf00      	nop
 800eb4c:	08010e90 	.word	0x08010e90
 800eb50:	08010db6 	.word	0x08010db6
 800eb54:	08010e36 	.word	0x08010e36

0800eb58 <__lshift>:
 800eb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb5c:	460c      	mov	r4, r1
 800eb5e:	6849      	ldr	r1, [r1, #4]
 800eb60:	6923      	ldr	r3, [r4, #16]
 800eb62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb66:	68a3      	ldr	r3, [r4, #8]
 800eb68:	4607      	mov	r7, r0
 800eb6a:	4691      	mov	r9, r2
 800eb6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb70:	f108 0601 	add.w	r6, r8, #1
 800eb74:	42b3      	cmp	r3, r6
 800eb76:	db0b      	blt.n	800eb90 <__lshift+0x38>
 800eb78:	4638      	mov	r0, r7
 800eb7a:	f7ff fd95 	bl	800e6a8 <_Balloc>
 800eb7e:	4605      	mov	r5, r0
 800eb80:	b948      	cbnz	r0, 800eb96 <__lshift+0x3e>
 800eb82:	4602      	mov	r2, r0
 800eb84:	4b28      	ldr	r3, [pc, #160]	@ (800ec28 <__lshift+0xd0>)
 800eb86:	4829      	ldr	r0, [pc, #164]	@ (800ec2c <__lshift+0xd4>)
 800eb88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eb8c:	f001 fc5c 	bl	8010448 <__assert_func>
 800eb90:	3101      	adds	r1, #1
 800eb92:	005b      	lsls	r3, r3, #1
 800eb94:	e7ee      	b.n	800eb74 <__lshift+0x1c>
 800eb96:	2300      	movs	r3, #0
 800eb98:	f100 0114 	add.w	r1, r0, #20
 800eb9c:	f100 0210 	add.w	r2, r0, #16
 800eba0:	4618      	mov	r0, r3
 800eba2:	4553      	cmp	r3, sl
 800eba4:	db33      	blt.n	800ec0e <__lshift+0xb6>
 800eba6:	6920      	ldr	r0, [r4, #16]
 800eba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ebac:	f104 0314 	add.w	r3, r4, #20
 800ebb0:	f019 091f 	ands.w	r9, r9, #31
 800ebb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ebb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ebbc:	d02b      	beq.n	800ec16 <__lshift+0xbe>
 800ebbe:	f1c9 0e20 	rsb	lr, r9, #32
 800ebc2:	468a      	mov	sl, r1
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	6818      	ldr	r0, [r3, #0]
 800ebc8:	fa00 f009 	lsl.w	r0, r0, r9
 800ebcc:	4310      	orrs	r0, r2
 800ebce:	f84a 0b04 	str.w	r0, [sl], #4
 800ebd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebd6:	459c      	cmp	ip, r3
 800ebd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ebdc:	d8f3      	bhi.n	800ebc6 <__lshift+0x6e>
 800ebde:	ebac 0304 	sub.w	r3, ip, r4
 800ebe2:	3b15      	subs	r3, #21
 800ebe4:	f023 0303 	bic.w	r3, r3, #3
 800ebe8:	3304      	adds	r3, #4
 800ebea:	f104 0015 	add.w	r0, r4, #21
 800ebee:	4584      	cmp	ip, r0
 800ebf0:	bf38      	it	cc
 800ebf2:	2304      	movcc	r3, #4
 800ebf4:	50ca      	str	r2, [r1, r3]
 800ebf6:	b10a      	cbz	r2, 800ebfc <__lshift+0xa4>
 800ebf8:	f108 0602 	add.w	r6, r8, #2
 800ebfc:	3e01      	subs	r6, #1
 800ebfe:	4638      	mov	r0, r7
 800ec00:	612e      	str	r6, [r5, #16]
 800ec02:	4621      	mov	r1, r4
 800ec04:	f7ff fd90 	bl	800e728 <_Bfree>
 800ec08:	4628      	mov	r0, r5
 800ec0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ec12:	3301      	adds	r3, #1
 800ec14:	e7c5      	b.n	800eba2 <__lshift+0x4a>
 800ec16:	3904      	subs	r1, #4
 800ec18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec20:	459c      	cmp	ip, r3
 800ec22:	d8f9      	bhi.n	800ec18 <__lshift+0xc0>
 800ec24:	e7ea      	b.n	800ebfc <__lshift+0xa4>
 800ec26:	bf00      	nop
 800ec28:	08010e25 	.word	0x08010e25
 800ec2c:	08010e36 	.word	0x08010e36

0800ec30 <__mcmp>:
 800ec30:	690a      	ldr	r2, [r1, #16]
 800ec32:	4603      	mov	r3, r0
 800ec34:	6900      	ldr	r0, [r0, #16]
 800ec36:	1a80      	subs	r0, r0, r2
 800ec38:	b530      	push	{r4, r5, lr}
 800ec3a:	d10e      	bne.n	800ec5a <__mcmp+0x2a>
 800ec3c:	3314      	adds	r3, #20
 800ec3e:	3114      	adds	r1, #20
 800ec40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ec44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ec48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ec4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ec50:	4295      	cmp	r5, r2
 800ec52:	d003      	beq.n	800ec5c <__mcmp+0x2c>
 800ec54:	d205      	bcs.n	800ec62 <__mcmp+0x32>
 800ec56:	f04f 30ff 	mov.w	r0, #4294967295
 800ec5a:	bd30      	pop	{r4, r5, pc}
 800ec5c:	42a3      	cmp	r3, r4
 800ec5e:	d3f3      	bcc.n	800ec48 <__mcmp+0x18>
 800ec60:	e7fb      	b.n	800ec5a <__mcmp+0x2a>
 800ec62:	2001      	movs	r0, #1
 800ec64:	e7f9      	b.n	800ec5a <__mcmp+0x2a>
	...

0800ec68 <__mdiff>:
 800ec68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec6c:	4689      	mov	r9, r1
 800ec6e:	4606      	mov	r6, r0
 800ec70:	4611      	mov	r1, r2
 800ec72:	4648      	mov	r0, r9
 800ec74:	4614      	mov	r4, r2
 800ec76:	f7ff ffdb 	bl	800ec30 <__mcmp>
 800ec7a:	1e05      	subs	r5, r0, #0
 800ec7c:	d112      	bne.n	800eca4 <__mdiff+0x3c>
 800ec7e:	4629      	mov	r1, r5
 800ec80:	4630      	mov	r0, r6
 800ec82:	f7ff fd11 	bl	800e6a8 <_Balloc>
 800ec86:	4602      	mov	r2, r0
 800ec88:	b928      	cbnz	r0, 800ec96 <__mdiff+0x2e>
 800ec8a:	4b3f      	ldr	r3, [pc, #252]	@ (800ed88 <__mdiff+0x120>)
 800ec8c:	f240 2137 	movw	r1, #567	@ 0x237
 800ec90:	483e      	ldr	r0, [pc, #248]	@ (800ed8c <__mdiff+0x124>)
 800ec92:	f001 fbd9 	bl	8010448 <__assert_func>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec9c:	4610      	mov	r0, r2
 800ec9e:	b003      	add	sp, #12
 800eca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca4:	bfbc      	itt	lt
 800eca6:	464b      	movlt	r3, r9
 800eca8:	46a1      	movlt	r9, r4
 800ecaa:	4630      	mov	r0, r6
 800ecac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ecb0:	bfba      	itte	lt
 800ecb2:	461c      	movlt	r4, r3
 800ecb4:	2501      	movlt	r5, #1
 800ecb6:	2500      	movge	r5, #0
 800ecb8:	f7ff fcf6 	bl	800e6a8 <_Balloc>
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	b918      	cbnz	r0, 800ecc8 <__mdiff+0x60>
 800ecc0:	4b31      	ldr	r3, [pc, #196]	@ (800ed88 <__mdiff+0x120>)
 800ecc2:	f240 2145 	movw	r1, #581	@ 0x245
 800ecc6:	e7e3      	b.n	800ec90 <__mdiff+0x28>
 800ecc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eccc:	6926      	ldr	r6, [r4, #16]
 800ecce:	60c5      	str	r5, [r0, #12]
 800ecd0:	f109 0310 	add.w	r3, r9, #16
 800ecd4:	f109 0514 	add.w	r5, r9, #20
 800ecd8:	f104 0e14 	add.w	lr, r4, #20
 800ecdc:	f100 0b14 	add.w	fp, r0, #20
 800ece0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ece4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ece8:	9301      	str	r3, [sp, #4]
 800ecea:	46d9      	mov	r9, fp
 800ecec:	f04f 0c00 	mov.w	ip, #0
 800ecf0:	9b01      	ldr	r3, [sp, #4]
 800ecf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ecf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ecfa:	9301      	str	r3, [sp, #4]
 800ecfc:	fa1f f38a 	uxth.w	r3, sl
 800ed00:	4619      	mov	r1, r3
 800ed02:	b283      	uxth	r3, r0
 800ed04:	1acb      	subs	r3, r1, r3
 800ed06:	0c00      	lsrs	r0, r0, #16
 800ed08:	4463      	add	r3, ip
 800ed0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ed0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ed18:	4576      	cmp	r6, lr
 800ed1a:	f849 3b04 	str.w	r3, [r9], #4
 800ed1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed22:	d8e5      	bhi.n	800ecf0 <__mdiff+0x88>
 800ed24:	1b33      	subs	r3, r6, r4
 800ed26:	3b15      	subs	r3, #21
 800ed28:	f023 0303 	bic.w	r3, r3, #3
 800ed2c:	3415      	adds	r4, #21
 800ed2e:	3304      	adds	r3, #4
 800ed30:	42a6      	cmp	r6, r4
 800ed32:	bf38      	it	cc
 800ed34:	2304      	movcc	r3, #4
 800ed36:	441d      	add	r5, r3
 800ed38:	445b      	add	r3, fp
 800ed3a:	461e      	mov	r6, r3
 800ed3c:	462c      	mov	r4, r5
 800ed3e:	4544      	cmp	r4, r8
 800ed40:	d30e      	bcc.n	800ed60 <__mdiff+0xf8>
 800ed42:	f108 0103 	add.w	r1, r8, #3
 800ed46:	1b49      	subs	r1, r1, r5
 800ed48:	f021 0103 	bic.w	r1, r1, #3
 800ed4c:	3d03      	subs	r5, #3
 800ed4e:	45a8      	cmp	r8, r5
 800ed50:	bf38      	it	cc
 800ed52:	2100      	movcc	r1, #0
 800ed54:	440b      	add	r3, r1
 800ed56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed5a:	b191      	cbz	r1, 800ed82 <__mdiff+0x11a>
 800ed5c:	6117      	str	r7, [r2, #16]
 800ed5e:	e79d      	b.n	800ec9c <__mdiff+0x34>
 800ed60:	f854 1b04 	ldr.w	r1, [r4], #4
 800ed64:	46e6      	mov	lr, ip
 800ed66:	0c08      	lsrs	r0, r1, #16
 800ed68:	fa1c fc81 	uxtah	ip, ip, r1
 800ed6c:	4471      	add	r1, lr
 800ed6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ed72:	b289      	uxth	r1, r1
 800ed74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ed78:	f846 1b04 	str.w	r1, [r6], #4
 800ed7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed80:	e7dd      	b.n	800ed3e <__mdiff+0xd6>
 800ed82:	3f01      	subs	r7, #1
 800ed84:	e7e7      	b.n	800ed56 <__mdiff+0xee>
 800ed86:	bf00      	nop
 800ed88:	08010e25 	.word	0x08010e25
 800ed8c:	08010e36 	.word	0x08010e36

0800ed90 <__ulp>:
 800ed90:	b082      	sub	sp, #8
 800ed92:	ed8d 0b00 	vstr	d0, [sp]
 800ed96:	9a01      	ldr	r2, [sp, #4]
 800ed98:	4b0f      	ldr	r3, [pc, #60]	@ (800edd8 <__ulp+0x48>)
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	dc08      	bgt.n	800edb6 <__ulp+0x26>
 800eda4:	425b      	negs	r3, r3
 800eda6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800edaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800edae:	da04      	bge.n	800edba <__ulp+0x2a>
 800edb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800edb4:	4113      	asrs	r3, r2
 800edb6:	2200      	movs	r2, #0
 800edb8:	e008      	b.n	800edcc <__ulp+0x3c>
 800edba:	f1a2 0314 	sub.w	r3, r2, #20
 800edbe:	2b1e      	cmp	r3, #30
 800edc0:	bfda      	itte	le
 800edc2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800edc6:	40da      	lsrle	r2, r3
 800edc8:	2201      	movgt	r2, #1
 800edca:	2300      	movs	r3, #0
 800edcc:	4619      	mov	r1, r3
 800edce:	4610      	mov	r0, r2
 800edd0:	ec41 0b10 	vmov	d0, r0, r1
 800edd4:	b002      	add	sp, #8
 800edd6:	4770      	bx	lr
 800edd8:	7ff00000 	.word	0x7ff00000

0800eddc <__b2d>:
 800eddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ede0:	6906      	ldr	r6, [r0, #16]
 800ede2:	f100 0814 	add.w	r8, r0, #20
 800ede6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800edea:	1f37      	subs	r7, r6, #4
 800edec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800edf0:	4610      	mov	r0, r2
 800edf2:	f7ff fd4b 	bl	800e88c <__hi0bits>
 800edf6:	f1c0 0320 	rsb	r3, r0, #32
 800edfa:	280a      	cmp	r0, #10
 800edfc:	600b      	str	r3, [r1, #0]
 800edfe:	491b      	ldr	r1, [pc, #108]	@ (800ee6c <__b2d+0x90>)
 800ee00:	dc15      	bgt.n	800ee2e <__b2d+0x52>
 800ee02:	f1c0 0c0b 	rsb	ip, r0, #11
 800ee06:	fa22 f30c 	lsr.w	r3, r2, ip
 800ee0a:	45b8      	cmp	r8, r7
 800ee0c:	ea43 0501 	orr.w	r5, r3, r1
 800ee10:	bf34      	ite	cc
 800ee12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ee16:	2300      	movcs	r3, #0
 800ee18:	3015      	adds	r0, #21
 800ee1a:	fa02 f000 	lsl.w	r0, r2, r0
 800ee1e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ee22:	4303      	orrs	r3, r0
 800ee24:	461c      	mov	r4, r3
 800ee26:	ec45 4b10 	vmov	d0, r4, r5
 800ee2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2e:	45b8      	cmp	r8, r7
 800ee30:	bf3a      	itte	cc
 800ee32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ee36:	f1a6 0708 	subcc.w	r7, r6, #8
 800ee3a:	2300      	movcs	r3, #0
 800ee3c:	380b      	subs	r0, #11
 800ee3e:	d012      	beq.n	800ee66 <__b2d+0x8a>
 800ee40:	f1c0 0120 	rsb	r1, r0, #32
 800ee44:	fa23 f401 	lsr.w	r4, r3, r1
 800ee48:	4082      	lsls	r2, r0
 800ee4a:	4322      	orrs	r2, r4
 800ee4c:	4547      	cmp	r7, r8
 800ee4e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ee52:	bf8c      	ite	hi
 800ee54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ee58:	2200      	movls	r2, #0
 800ee5a:	4083      	lsls	r3, r0
 800ee5c:	40ca      	lsrs	r2, r1
 800ee5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ee62:	4313      	orrs	r3, r2
 800ee64:	e7de      	b.n	800ee24 <__b2d+0x48>
 800ee66:	ea42 0501 	orr.w	r5, r2, r1
 800ee6a:	e7db      	b.n	800ee24 <__b2d+0x48>
 800ee6c:	3ff00000 	.word	0x3ff00000

0800ee70 <__d2b>:
 800ee70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee74:	460f      	mov	r7, r1
 800ee76:	2101      	movs	r1, #1
 800ee78:	ec59 8b10 	vmov	r8, r9, d0
 800ee7c:	4616      	mov	r6, r2
 800ee7e:	f7ff fc13 	bl	800e6a8 <_Balloc>
 800ee82:	4604      	mov	r4, r0
 800ee84:	b930      	cbnz	r0, 800ee94 <__d2b+0x24>
 800ee86:	4602      	mov	r2, r0
 800ee88:	4b23      	ldr	r3, [pc, #140]	@ (800ef18 <__d2b+0xa8>)
 800ee8a:	4824      	ldr	r0, [pc, #144]	@ (800ef1c <__d2b+0xac>)
 800ee8c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ee90:	f001 fada 	bl	8010448 <__assert_func>
 800ee94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee9c:	b10d      	cbz	r5, 800eea2 <__d2b+0x32>
 800ee9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eea2:	9301      	str	r3, [sp, #4]
 800eea4:	f1b8 0300 	subs.w	r3, r8, #0
 800eea8:	d023      	beq.n	800eef2 <__d2b+0x82>
 800eeaa:	4668      	mov	r0, sp
 800eeac:	9300      	str	r3, [sp, #0]
 800eeae:	f7ff fd0c 	bl	800e8ca <__lo0bits>
 800eeb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eeb6:	b1d0      	cbz	r0, 800eeee <__d2b+0x7e>
 800eeb8:	f1c0 0320 	rsb	r3, r0, #32
 800eebc:	fa02 f303 	lsl.w	r3, r2, r3
 800eec0:	430b      	orrs	r3, r1
 800eec2:	40c2      	lsrs	r2, r0
 800eec4:	6163      	str	r3, [r4, #20]
 800eec6:	9201      	str	r2, [sp, #4]
 800eec8:	9b01      	ldr	r3, [sp, #4]
 800eeca:	61a3      	str	r3, [r4, #24]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	bf0c      	ite	eq
 800eed0:	2201      	moveq	r2, #1
 800eed2:	2202      	movne	r2, #2
 800eed4:	6122      	str	r2, [r4, #16]
 800eed6:	b1a5      	cbz	r5, 800ef02 <__d2b+0x92>
 800eed8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800eedc:	4405      	add	r5, r0
 800eede:	603d      	str	r5, [r7, #0]
 800eee0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eee4:	6030      	str	r0, [r6, #0]
 800eee6:	4620      	mov	r0, r4
 800eee8:	b003      	add	sp, #12
 800eeea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeee:	6161      	str	r1, [r4, #20]
 800eef0:	e7ea      	b.n	800eec8 <__d2b+0x58>
 800eef2:	a801      	add	r0, sp, #4
 800eef4:	f7ff fce9 	bl	800e8ca <__lo0bits>
 800eef8:	9b01      	ldr	r3, [sp, #4]
 800eefa:	6163      	str	r3, [r4, #20]
 800eefc:	3020      	adds	r0, #32
 800eefe:	2201      	movs	r2, #1
 800ef00:	e7e8      	b.n	800eed4 <__d2b+0x64>
 800ef02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ef06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ef0a:	6038      	str	r0, [r7, #0]
 800ef0c:	6918      	ldr	r0, [r3, #16]
 800ef0e:	f7ff fcbd 	bl	800e88c <__hi0bits>
 800ef12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ef16:	e7e5      	b.n	800eee4 <__d2b+0x74>
 800ef18:	08010e25 	.word	0x08010e25
 800ef1c:	08010e36 	.word	0x08010e36

0800ef20 <__ratio>:
 800ef20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef24:	4688      	mov	r8, r1
 800ef26:	4669      	mov	r1, sp
 800ef28:	4681      	mov	r9, r0
 800ef2a:	f7ff ff57 	bl	800eddc <__b2d>
 800ef2e:	a901      	add	r1, sp, #4
 800ef30:	4640      	mov	r0, r8
 800ef32:	ec55 4b10 	vmov	r4, r5, d0
 800ef36:	f7ff ff51 	bl	800eddc <__b2d>
 800ef3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ef3e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ef42:	1ad2      	subs	r2, r2, r3
 800ef44:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ef48:	1a5b      	subs	r3, r3, r1
 800ef4a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ef4e:	ec57 6b10 	vmov	r6, r7, d0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	bfd6      	itet	le
 800ef56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ef5a:	462a      	movgt	r2, r5
 800ef5c:	463a      	movle	r2, r7
 800ef5e:	46ab      	mov	fp, r5
 800ef60:	46a2      	mov	sl, r4
 800ef62:	bfce      	itee	gt
 800ef64:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ef68:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ef6c:	ee00 3a90 	vmovle	s1, r3
 800ef70:	ec4b ab17 	vmov	d7, sl, fp
 800ef74:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ef78:	b003      	add	sp, #12
 800ef7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef7e <__copybits>:
 800ef7e:	3901      	subs	r1, #1
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	1149      	asrs	r1, r1, #5
 800ef84:	6914      	ldr	r4, [r2, #16]
 800ef86:	3101      	adds	r1, #1
 800ef88:	f102 0314 	add.w	r3, r2, #20
 800ef8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ef94:	1f05      	subs	r5, r0, #4
 800ef96:	42a3      	cmp	r3, r4
 800ef98:	d30c      	bcc.n	800efb4 <__copybits+0x36>
 800ef9a:	1aa3      	subs	r3, r4, r2
 800ef9c:	3b11      	subs	r3, #17
 800ef9e:	f023 0303 	bic.w	r3, r3, #3
 800efa2:	3211      	adds	r2, #17
 800efa4:	42a2      	cmp	r2, r4
 800efa6:	bf88      	it	hi
 800efa8:	2300      	movhi	r3, #0
 800efaa:	4418      	add	r0, r3
 800efac:	2300      	movs	r3, #0
 800efae:	4288      	cmp	r0, r1
 800efb0:	d305      	bcc.n	800efbe <__copybits+0x40>
 800efb2:	bd70      	pop	{r4, r5, r6, pc}
 800efb4:	f853 6b04 	ldr.w	r6, [r3], #4
 800efb8:	f845 6f04 	str.w	r6, [r5, #4]!
 800efbc:	e7eb      	b.n	800ef96 <__copybits+0x18>
 800efbe:	f840 3b04 	str.w	r3, [r0], #4
 800efc2:	e7f4      	b.n	800efae <__copybits+0x30>

0800efc4 <__any_on>:
 800efc4:	f100 0214 	add.w	r2, r0, #20
 800efc8:	6900      	ldr	r0, [r0, #16]
 800efca:	114b      	asrs	r3, r1, #5
 800efcc:	4298      	cmp	r0, r3
 800efce:	b510      	push	{r4, lr}
 800efd0:	db11      	blt.n	800eff6 <__any_on+0x32>
 800efd2:	dd0a      	ble.n	800efea <__any_on+0x26>
 800efd4:	f011 011f 	ands.w	r1, r1, #31
 800efd8:	d007      	beq.n	800efea <__any_on+0x26>
 800efda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800efde:	fa24 f001 	lsr.w	r0, r4, r1
 800efe2:	fa00 f101 	lsl.w	r1, r0, r1
 800efe6:	428c      	cmp	r4, r1
 800efe8:	d10b      	bne.n	800f002 <__any_on+0x3e>
 800efea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800efee:	4293      	cmp	r3, r2
 800eff0:	d803      	bhi.n	800effa <__any_on+0x36>
 800eff2:	2000      	movs	r0, #0
 800eff4:	bd10      	pop	{r4, pc}
 800eff6:	4603      	mov	r3, r0
 800eff8:	e7f7      	b.n	800efea <__any_on+0x26>
 800effa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800effe:	2900      	cmp	r1, #0
 800f000:	d0f5      	beq.n	800efee <__any_on+0x2a>
 800f002:	2001      	movs	r0, #1
 800f004:	e7f6      	b.n	800eff4 <__any_on+0x30>

0800f006 <sulp>:
 800f006:	b570      	push	{r4, r5, r6, lr}
 800f008:	4604      	mov	r4, r0
 800f00a:	460d      	mov	r5, r1
 800f00c:	4616      	mov	r6, r2
 800f00e:	ec45 4b10 	vmov	d0, r4, r5
 800f012:	f7ff febd 	bl	800ed90 <__ulp>
 800f016:	b17e      	cbz	r6, 800f038 <sulp+0x32>
 800f018:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f01c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f020:	2b00      	cmp	r3, #0
 800f022:	dd09      	ble.n	800f038 <sulp+0x32>
 800f024:	051b      	lsls	r3, r3, #20
 800f026:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800f02a:	2000      	movs	r0, #0
 800f02c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800f030:	ec41 0b17 	vmov	d7, r0, r1
 800f034:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f038:	bd70      	pop	{r4, r5, r6, pc}
 800f03a:	0000      	movs	r0, r0
 800f03c:	0000      	movs	r0, r0
	...

0800f040 <_strtod_l>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	ed2d 8b0a 	vpush	{d8-d12}
 800f048:	b097      	sub	sp, #92	@ 0x5c
 800f04a:	4688      	mov	r8, r1
 800f04c:	920e      	str	r2, [sp, #56]	@ 0x38
 800f04e:	2200      	movs	r2, #0
 800f050:	9212      	str	r2, [sp, #72]	@ 0x48
 800f052:	9005      	str	r0, [sp, #20]
 800f054:	f04f 0a00 	mov.w	sl, #0
 800f058:	f04f 0b00 	mov.w	fp, #0
 800f05c:	460a      	mov	r2, r1
 800f05e:	9211      	str	r2, [sp, #68]	@ 0x44
 800f060:	7811      	ldrb	r1, [r2, #0]
 800f062:	292b      	cmp	r1, #43	@ 0x2b
 800f064:	d04c      	beq.n	800f100 <_strtod_l+0xc0>
 800f066:	d839      	bhi.n	800f0dc <_strtod_l+0x9c>
 800f068:	290d      	cmp	r1, #13
 800f06a:	d833      	bhi.n	800f0d4 <_strtod_l+0x94>
 800f06c:	2908      	cmp	r1, #8
 800f06e:	d833      	bhi.n	800f0d8 <_strtod_l+0x98>
 800f070:	2900      	cmp	r1, #0
 800f072:	d03c      	beq.n	800f0ee <_strtod_l+0xae>
 800f074:	2200      	movs	r2, #0
 800f076:	9208      	str	r2, [sp, #32]
 800f078:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800f07a:	782a      	ldrb	r2, [r5, #0]
 800f07c:	2a30      	cmp	r2, #48	@ 0x30
 800f07e:	f040 80b5 	bne.w	800f1ec <_strtod_l+0x1ac>
 800f082:	786a      	ldrb	r2, [r5, #1]
 800f084:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f088:	2a58      	cmp	r2, #88	@ 0x58
 800f08a:	d170      	bne.n	800f16e <_strtod_l+0x12e>
 800f08c:	9302      	str	r3, [sp, #8]
 800f08e:	9b08      	ldr	r3, [sp, #32]
 800f090:	9301      	str	r3, [sp, #4]
 800f092:	ab12      	add	r3, sp, #72	@ 0x48
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	4a8b      	ldr	r2, [pc, #556]	@ (800f2c4 <_strtod_l+0x284>)
 800f098:	9805      	ldr	r0, [sp, #20]
 800f09a:	ab13      	add	r3, sp, #76	@ 0x4c
 800f09c:	a911      	add	r1, sp, #68	@ 0x44
 800f09e:	f001 fa6d 	bl	801057c <__gethex>
 800f0a2:	f010 060f 	ands.w	r6, r0, #15
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	d005      	beq.n	800f0b6 <_strtod_l+0x76>
 800f0aa:	2e06      	cmp	r6, #6
 800f0ac:	d12a      	bne.n	800f104 <_strtod_l+0xc4>
 800f0ae:	3501      	adds	r5, #1
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	9511      	str	r5, [sp, #68]	@ 0x44
 800f0b4:	9308      	str	r3, [sp, #32]
 800f0b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f040 852f 	bne.w	800fb1c <_strtod_l+0xadc>
 800f0be:	9b08      	ldr	r3, [sp, #32]
 800f0c0:	ec4b ab10 	vmov	d0, sl, fp
 800f0c4:	b1cb      	cbz	r3, 800f0fa <_strtod_l+0xba>
 800f0c6:	eeb1 0b40 	vneg.f64	d0, d0
 800f0ca:	b017      	add	sp, #92	@ 0x5c
 800f0cc:	ecbd 8b0a 	vpop	{d8-d12}
 800f0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d4:	2920      	cmp	r1, #32
 800f0d6:	d1cd      	bne.n	800f074 <_strtod_l+0x34>
 800f0d8:	3201      	adds	r2, #1
 800f0da:	e7c0      	b.n	800f05e <_strtod_l+0x1e>
 800f0dc:	292d      	cmp	r1, #45	@ 0x2d
 800f0de:	d1c9      	bne.n	800f074 <_strtod_l+0x34>
 800f0e0:	2101      	movs	r1, #1
 800f0e2:	9108      	str	r1, [sp, #32]
 800f0e4:	1c51      	adds	r1, r2, #1
 800f0e6:	9111      	str	r1, [sp, #68]	@ 0x44
 800f0e8:	7852      	ldrb	r2, [r2, #1]
 800f0ea:	2a00      	cmp	r2, #0
 800f0ec:	d1c4      	bne.n	800f078 <_strtod_l+0x38>
 800f0ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0f0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	f040 850f 	bne.w	800fb18 <_strtod_l+0xad8>
 800f0fa:	ec4b ab10 	vmov	d0, sl, fp
 800f0fe:	e7e4      	b.n	800f0ca <_strtod_l+0x8a>
 800f100:	2100      	movs	r1, #0
 800f102:	e7ee      	b.n	800f0e2 <_strtod_l+0xa2>
 800f104:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f106:	b13a      	cbz	r2, 800f118 <_strtod_l+0xd8>
 800f108:	2135      	movs	r1, #53	@ 0x35
 800f10a:	a814      	add	r0, sp, #80	@ 0x50
 800f10c:	f7ff ff37 	bl	800ef7e <__copybits>
 800f110:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f112:	9805      	ldr	r0, [sp, #20]
 800f114:	f7ff fb08 	bl	800e728 <_Bfree>
 800f118:	1e73      	subs	r3, r6, #1
 800f11a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f11c:	2b04      	cmp	r3, #4
 800f11e:	d806      	bhi.n	800f12e <_strtod_l+0xee>
 800f120:	e8df f003 	tbb	[pc, r3]
 800f124:	201d0314 	.word	0x201d0314
 800f128:	14          	.byte	0x14
 800f129:	00          	.byte	0x00
 800f12a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800f12e:	05e3      	lsls	r3, r4, #23
 800f130:	bf48      	it	mi
 800f132:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f13a:	0d1b      	lsrs	r3, r3, #20
 800f13c:	051b      	lsls	r3, r3, #20
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1b9      	bne.n	800f0b6 <_strtod_l+0x76>
 800f142:	f7fe fc45 	bl	800d9d0 <__errno>
 800f146:	2322      	movs	r3, #34	@ 0x22
 800f148:	6003      	str	r3, [r0, #0]
 800f14a:	e7b4      	b.n	800f0b6 <_strtod_l+0x76>
 800f14c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800f150:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f154:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f158:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f15c:	e7e7      	b.n	800f12e <_strtod_l+0xee>
 800f15e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800f2cc <_strtod_l+0x28c>
 800f162:	e7e4      	b.n	800f12e <_strtod_l+0xee>
 800f164:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f168:	f04f 3aff 	mov.w	sl, #4294967295
 800f16c:	e7df      	b.n	800f12e <_strtod_l+0xee>
 800f16e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f170:	1c5a      	adds	r2, r3, #1
 800f172:	9211      	str	r2, [sp, #68]	@ 0x44
 800f174:	785b      	ldrb	r3, [r3, #1]
 800f176:	2b30      	cmp	r3, #48	@ 0x30
 800f178:	d0f9      	beq.n	800f16e <_strtod_l+0x12e>
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d09b      	beq.n	800f0b6 <_strtod_l+0x76>
 800f17e:	2301      	movs	r3, #1
 800f180:	2600      	movs	r6, #0
 800f182:	9307      	str	r3, [sp, #28]
 800f184:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f186:	930a      	str	r3, [sp, #40]	@ 0x28
 800f188:	46b1      	mov	r9, r6
 800f18a:	4635      	mov	r5, r6
 800f18c:	220a      	movs	r2, #10
 800f18e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800f190:	7804      	ldrb	r4, [r0, #0]
 800f192:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800f196:	b2d9      	uxtb	r1, r3
 800f198:	2909      	cmp	r1, #9
 800f19a:	d929      	bls.n	800f1f0 <_strtod_l+0x1b0>
 800f19c:	494a      	ldr	r1, [pc, #296]	@ (800f2c8 <_strtod_l+0x288>)
 800f19e:	2201      	movs	r2, #1
 800f1a0:	f7fe fbaa 	bl	800d8f8 <strncmp>
 800f1a4:	b378      	cbz	r0, 800f206 <_strtod_l+0x1c6>
 800f1a6:	2000      	movs	r0, #0
 800f1a8:	4622      	mov	r2, r4
 800f1aa:	462b      	mov	r3, r5
 800f1ac:	4607      	mov	r7, r0
 800f1ae:	9006      	str	r0, [sp, #24]
 800f1b0:	2a65      	cmp	r2, #101	@ 0x65
 800f1b2:	d001      	beq.n	800f1b8 <_strtod_l+0x178>
 800f1b4:	2a45      	cmp	r2, #69	@ 0x45
 800f1b6:	d117      	bne.n	800f1e8 <_strtod_l+0x1a8>
 800f1b8:	b91b      	cbnz	r3, 800f1c2 <_strtod_l+0x182>
 800f1ba:	9b07      	ldr	r3, [sp, #28]
 800f1bc:	4303      	orrs	r3, r0
 800f1be:	d096      	beq.n	800f0ee <_strtod_l+0xae>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800f1c6:	f108 0201 	add.w	r2, r8, #1
 800f1ca:	9211      	str	r2, [sp, #68]	@ 0x44
 800f1cc:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f1d0:	2a2b      	cmp	r2, #43	@ 0x2b
 800f1d2:	d06b      	beq.n	800f2ac <_strtod_l+0x26c>
 800f1d4:	2a2d      	cmp	r2, #45	@ 0x2d
 800f1d6:	d071      	beq.n	800f2bc <_strtod_l+0x27c>
 800f1d8:	f04f 0e00 	mov.w	lr, #0
 800f1dc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800f1e0:	2c09      	cmp	r4, #9
 800f1e2:	d979      	bls.n	800f2d8 <_strtod_l+0x298>
 800f1e4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800f1e8:	2400      	movs	r4, #0
 800f1ea:	e094      	b.n	800f316 <_strtod_l+0x2d6>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	e7c7      	b.n	800f180 <_strtod_l+0x140>
 800f1f0:	2d08      	cmp	r5, #8
 800f1f2:	f100 0001 	add.w	r0, r0, #1
 800f1f6:	bfd4      	ite	le
 800f1f8:	fb02 3909 	mlale	r9, r2, r9, r3
 800f1fc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800f200:	3501      	adds	r5, #1
 800f202:	9011      	str	r0, [sp, #68]	@ 0x44
 800f204:	e7c3      	b.n	800f18e <_strtod_l+0x14e>
 800f206:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	9211      	str	r2, [sp, #68]	@ 0x44
 800f20c:	785a      	ldrb	r2, [r3, #1]
 800f20e:	b375      	cbz	r5, 800f26e <_strtod_l+0x22e>
 800f210:	4607      	mov	r7, r0
 800f212:	462b      	mov	r3, r5
 800f214:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f218:	2909      	cmp	r1, #9
 800f21a:	d913      	bls.n	800f244 <_strtod_l+0x204>
 800f21c:	2101      	movs	r1, #1
 800f21e:	9106      	str	r1, [sp, #24]
 800f220:	e7c6      	b.n	800f1b0 <_strtod_l+0x170>
 800f222:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f224:	1c5a      	adds	r2, r3, #1
 800f226:	9211      	str	r2, [sp, #68]	@ 0x44
 800f228:	785a      	ldrb	r2, [r3, #1]
 800f22a:	3001      	adds	r0, #1
 800f22c:	2a30      	cmp	r2, #48	@ 0x30
 800f22e:	d0f8      	beq.n	800f222 <_strtod_l+0x1e2>
 800f230:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f234:	2b08      	cmp	r3, #8
 800f236:	f200 8476 	bhi.w	800fb26 <_strtod_l+0xae6>
 800f23a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f23c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f23e:	4607      	mov	r7, r0
 800f240:	2000      	movs	r0, #0
 800f242:	4603      	mov	r3, r0
 800f244:	3a30      	subs	r2, #48	@ 0x30
 800f246:	f100 0101 	add.w	r1, r0, #1
 800f24a:	d023      	beq.n	800f294 <_strtod_l+0x254>
 800f24c:	440f      	add	r7, r1
 800f24e:	eb00 0c03 	add.w	ip, r0, r3
 800f252:	4619      	mov	r1, r3
 800f254:	240a      	movs	r4, #10
 800f256:	4561      	cmp	r1, ip
 800f258:	d10b      	bne.n	800f272 <_strtod_l+0x232>
 800f25a:	1c5c      	adds	r4, r3, #1
 800f25c:	4403      	add	r3, r0
 800f25e:	2b08      	cmp	r3, #8
 800f260:	4404      	add	r4, r0
 800f262:	dc11      	bgt.n	800f288 <_strtod_l+0x248>
 800f264:	230a      	movs	r3, #10
 800f266:	fb03 2909 	mla	r9, r3, r9, r2
 800f26a:	2100      	movs	r1, #0
 800f26c:	e013      	b.n	800f296 <_strtod_l+0x256>
 800f26e:	4628      	mov	r0, r5
 800f270:	e7dc      	b.n	800f22c <_strtod_l+0x1ec>
 800f272:	2908      	cmp	r1, #8
 800f274:	f101 0101 	add.w	r1, r1, #1
 800f278:	dc02      	bgt.n	800f280 <_strtod_l+0x240>
 800f27a:	fb04 f909 	mul.w	r9, r4, r9
 800f27e:	e7ea      	b.n	800f256 <_strtod_l+0x216>
 800f280:	2910      	cmp	r1, #16
 800f282:	bfd8      	it	le
 800f284:	4366      	mulle	r6, r4
 800f286:	e7e6      	b.n	800f256 <_strtod_l+0x216>
 800f288:	2b0f      	cmp	r3, #15
 800f28a:	dcee      	bgt.n	800f26a <_strtod_l+0x22a>
 800f28c:	230a      	movs	r3, #10
 800f28e:	fb03 2606 	mla	r6, r3, r6, r2
 800f292:	e7ea      	b.n	800f26a <_strtod_l+0x22a>
 800f294:	461c      	mov	r4, r3
 800f296:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f298:	1c5a      	adds	r2, r3, #1
 800f29a:	9211      	str	r2, [sp, #68]	@ 0x44
 800f29c:	785a      	ldrb	r2, [r3, #1]
 800f29e:	4608      	mov	r0, r1
 800f2a0:	4623      	mov	r3, r4
 800f2a2:	e7b7      	b.n	800f214 <_strtod_l+0x1d4>
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	2700      	movs	r7, #0
 800f2a8:	9306      	str	r3, [sp, #24]
 800f2aa:	e786      	b.n	800f1ba <_strtod_l+0x17a>
 800f2ac:	f04f 0e00 	mov.w	lr, #0
 800f2b0:	f108 0202 	add.w	r2, r8, #2
 800f2b4:	9211      	str	r2, [sp, #68]	@ 0x44
 800f2b6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f2ba:	e78f      	b.n	800f1dc <_strtod_l+0x19c>
 800f2bc:	f04f 0e01 	mov.w	lr, #1
 800f2c0:	e7f6      	b.n	800f2b0 <_strtod_l+0x270>
 800f2c2:	bf00      	nop
 800f2c4:	08010fa8 	.word	0x08010fa8
 800f2c8:	08010f90 	.word	0x08010f90
 800f2cc:	7ff00000 	.word	0x7ff00000
 800f2d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f2d2:	1c54      	adds	r4, r2, #1
 800f2d4:	9411      	str	r4, [sp, #68]	@ 0x44
 800f2d6:	7852      	ldrb	r2, [r2, #1]
 800f2d8:	2a30      	cmp	r2, #48	@ 0x30
 800f2da:	d0f9      	beq.n	800f2d0 <_strtod_l+0x290>
 800f2dc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800f2e0:	2c08      	cmp	r4, #8
 800f2e2:	d881      	bhi.n	800f1e8 <_strtod_l+0x1a8>
 800f2e4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800f2e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f2ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f2ee:	1c51      	adds	r1, r2, #1
 800f2f0:	9111      	str	r1, [sp, #68]	@ 0x44
 800f2f2:	7852      	ldrb	r2, [r2, #1]
 800f2f4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800f2f8:	2c09      	cmp	r4, #9
 800f2fa:	d938      	bls.n	800f36e <_strtod_l+0x32e>
 800f2fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800f2fe:	1b0c      	subs	r4, r1, r4
 800f300:	2c08      	cmp	r4, #8
 800f302:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800f306:	dc02      	bgt.n	800f30e <_strtod_l+0x2ce>
 800f308:	4564      	cmp	r4, ip
 800f30a:	bfa8      	it	ge
 800f30c:	4664      	movge	r4, ip
 800f30e:	f1be 0f00 	cmp.w	lr, #0
 800f312:	d000      	beq.n	800f316 <_strtod_l+0x2d6>
 800f314:	4264      	negs	r4, r4
 800f316:	2b00      	cmp	r3, #0
 800f318:	d14e      	bne.n	800f3b8 <_strtod_l+0x378>
 800f31a:	9b07      	ldr	r3, [sp, #28]
 800f31c:	4318      	orrs	r0, r3
 800f31e:	f47f aeca 	bne.w	800f0b6 <_strtod_l+0x76>
 800f322:	9b06      	ldr	r3, [sp, #24]
 800f324:	2b00      	cmp	r3, #0
 800f326:	f47f aee2 	bne.w	800f0ee <_strtod_l+0xae>
 800f32a:	2a69      	cmp	r2, #105	@ 0x69
 800f32c:	d027      	beq.n	800f37e <_strtod_l+0x33e>
 800f32e:	dc24      	bgt.n	800f37a <_strtod_l+0x33a>
 800f330:	2a49      	cmp	r2, #73	@ 0x49
 800f332:	d024      	beq.n	800f37e <_strtod_l+0x33e>
 800f334:	2a4e      	cmp	r2, #78	@ 0x4e
 800f336:	f47f aeda 	bne.w	800f0ee <_strtod_l+0xae>
 800f33a:	4997      	ldr	r1, [pc, #604]	@ (800f598 <_strtod_l+0x558>)
 800f33c:	a811      	add	r0, sp, #68	@ 0x44
 800f33e:	f001 fb3f 	bl	80109c0 <__match>
 800f342:	2800      	cmp	r0, #0
 800f344:	f43f aed3 	beq.w	800f0ee <_strtod_l+0xae>
 800f348:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	2b28      	cmp	r3, #40	@ 0x28
 800f34e:	d12d      	bne.n	800f3ac <_strtod_l+0x36c>
 800f350:	4992      	ldr	r1, [pc, #584]	@ (800f59c <_strtod_l+0x55c>)
 800f352:	aa14      	add	r2, sp, #80	@ 0x50
 800f354:	a811      	add	r0, sp, #68	@ 0x44
 800f356:	f001 fb47 	bl	80109e8 <__hexnan>
 800f35a:	2805      	cmp	r0, #5
 800f35c:	d126      	bne.n	800f3ac <_strtod_l+0x36c>
 800f35e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f360:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800f364:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f368:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f36c:	e6a3      	b.n	800f0b6 <_strtod_l+0x76>
 800f36e:	240a      	movs	r4, #10
 800f370:	fb04 2c0c 	mla	ip, r4, ip, r2
 800f374:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800f378:	e7b8      	b.n	800f2ec <_strtod_l+0x2ac>
 800f37a:	2a6e      	cmp	r2, #110	@ 0x6e
 800f37c:	e7db      	b.n	800f336 <_strtod_l+0x2f6>
 800f37e:	4988      	ldr	r1, [pc, #544]	@ (800f5a0 <_strtod_l+0x560>)
 800f380:	a811      	add	r0, sp, #68	@ 0x44
 800f382:	f001 fb1d 	bl	80109c0 <__match>
 800f386:	2800      	cmp	r0, #0
 800f388:	f43f aeb1 	beq.w	800f0ee <_strtod_l+0xae>
 800f38c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f38e:	4985      	ldr	r1, [pc, #532]	@ (800f5a4 <_strtod_l+0x564>)
 800f390:	3b01      	subs	r3, #1
 800f392:	a811      	add	r0, sp, #68	@ 0x44
 800f394:	9311      	str	r3, [sp, #68]	@ 0x44
 800f396:	f001 fb13 	bl	80109c0 <__match>
 800f39a:	b910      	cbnz	r0, 800f3a2 <_strtod_l+0x362>
 800f39c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f39e:	3301      	adds	r3, #1
 800f3a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f3a2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800f5b8 <_strtod_l+0x578>
 800f3a6:	f04f 0a00 	mov.w	sl, #0
 800f3aa:	e684      	b.n	800f0b6 <_strtod_l+0x76>
 800f3ac:	487e      	ldr	r0, [pc, #504]	@ (800f5a8 <_strtod_l+0x568>)
 800f3ae:	f001 f843 	bl	8010438 <nan>
 800f3b2:	ec5b ab10 	vmov	sl, fp, d0
 800f3b6:	e67e      	b.n	800f0b6 <_strtod_l+0x76>
 800f3b8:	ee07 9a90 	vmov	s15, r9
 800f3bc:	1be2      	subs	r2, r4, r7
 800f3be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f3c2:	2d00      	cmp	r5, #0
 800f3c4:	bf08      	it	eq
 800f3c6:	461d      	moveq	r5, r3
 800f3c8:	2b10      	cmp	r3, #16
 800f3ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	bfa8      	it	ge
 800f3d0:	2210      	movge	r2, #16
 800f3d2:	2b09      	cmp	r3, #9
 800f3d4:	ec5b ab17 	vmov	sl, fp, d7
 800f3d8:	dc15      	bgt.n	800f406 <_strtod_l+0x3c6>
 800f3da:	1be1      	subs	r1, r4, r7
 800f3dc:	2900      	cmp	r1, #0
 800f3de:	f43f ae6a 	beq.w	800f0b6 <_strtod_l+0x76>
 800f3e2:	eba4 0107 	sub.w	r1, r4, r7
 800f3e6:	dd72      	ble.n	800f4ce <_strtod_l+0x48e>
 800f3e8:	2916      	cmp	r1, #22
 800f3ea:	dc59      	bgt.n	800f4a0 <_strtod_l+0x460>
 800f3ec:	4b6f      	ldr	r3, [pc, #444]	@ (800f5ac <_strtod_l+0x56c>)
 800f3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3f4:	ed93 7b00 	vldr	d7, [r3]
 800f3f8:	ec4b ab16 	vmov	d6, sl, fp
 800f3fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f400:	ec5b ab17 	vmov	sl, fp, d7
 800f404:	e657      	b.n	800f0b6 <_strtod_l+0x76>
 800f406:	4969      	ldr	r1, [pc, #420]	@ (800f5ac <_strtod_l+0x56c>)
 800f408:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f40c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800f410:	ee06 6a90 	vmov	s13, r6
 800f414:	2b0f      	cmp	r3, #15
 800f416:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f41a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f41e:	ec5b ab16 	vmov	sl, fp, d6
 800f422:	ddda      	ble.n	800f3da <_strtod_l+0x39a>
 800f424:	1a9a      	subs	r2, r3, r2
 800f426:	1be1      	subs	r1, r4, r7
 800f428:	440a      	add	r2, r1
 800f42a:	2a00      	cmp	r2, #0
 800f42c:	f340 8094 	ble.w	800f558 <_strtod_l+0x518>
 800f430:	f012 000f 	ands.w	r0, r2, #15
 800f434:	d00a      	beq.n	800f44c <_strtod_l+0x40c>
 800f436:	495d      	ldr	r1, [pc, #372]	@ (800f5ac <_strtod_l+0x56c>)
 800f438:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f43c:	ed91 7b00 	vldr	d7, [r1]
 800f440:	ec4b ab16 	vmov	d6, sl, fp
 800f444:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f448:	ec5b ab17 	vmov	sl, fp, d7
 800f44c:	f032 020f 	bics.w	r2, r2, #15
 800f450:	d073      	beq.n	800f53a <_strtod_l+0x4fa>
 800f452:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800f456:	dd47      	ble.n	800f4e8 <_strtod_l+0x4a8>
 800f458:	2400      	movs	r4, #0
 800f45a:	4625      	mov	r5, r4
 800f45c:	9407      	str	r4, [sp, #28]
 800f45e:	4626      	mov	r6, r4
 800f460:	9a05      	ldr	r2, [sp, #20]
 800f462:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f5b8 <_strtod_l+0x578>
 800f466:	2322      	movs	r3, #34	@ 0x22
 800f468:	6013      	str	r3, [r2, #0]
 800f46a:	f04f 0a00 	mov.w	sl, #0
 800f46e:	9b07      	ldr	r3, [sp, #28]
 800f470:	2b00      	cmp	r3, #0
 800f472:	f43f ae20 	beq.w	800f0b6 <_strtod_l+0x76>
 800f476:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f478:	9805      	ldr	r0, [sp, #20]
 800f47a:	f7ff f955 	bl	800e728 <_Bfree>
 800f47e:	9805      	ldr	r0, [sp, #20]
 800f480:	4631      	mov	r1, r6
 800f482:	f7ff f951 	bl	800e728 <_Bfree>
 800f486:	9805      	ldr	r0, [sp, #20]
 800f488:	4629      	mov	r1, r5
 800f48a:	f7ff f94d 	bl	800e728 <_Bfree>
 800f48e:	9907      	ldr	r1, [sp, #28]
 800f490:	9805      	ldr	r0, [sp, #20]
 800f492:	f7ff f949 	bl	800e728 <_Bfree>
 800f496:	9805      	ldr	r0, [sp, #20]
 800f498:	4621      	mov	r1, r4
 800f49a:	f7ff f945 	bl	800e728 <_Bfree>
 800f49e:	e60a      	b.n	800f0b6 <_strtod_l+0x76>
 800f4a0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800f4a4:	1be0      	subs	r0, r4, r7
 800f4a6:	4281      	cmp	r1, r0
 800f4a8:	dbbc      	blt.n	800f424 <_strtod_l+0x3e4>
 800f4aa:	4a40      	ldr	r2, [pc, #256]	@ (800f5ac <_strtod_l+0x56c>)
 800f4ac:	f1c3 030f 	rsb	r3, r3, #15
 800f4b0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f4b4:	ed91 7b00 	vldr	d7, [r1]
 800f4b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f4ba:	ec4b ab16 	vmov	d6, sl, fp
 800f4be:	1acb      	subs	r3, r1, r3
 800f4c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f4c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f4c8:	ed92 6b00 	vldr	d6, [r2]
 800f4cc:	e796      	b.n	800f3fc <_strtod_l+0x3bc>
 800f4ce:	3116      	adds	r1, #22
 800f4d0:	dba8      	blt.n	800f424 <_strtod_l+0x3e4>
 800f4d2:	4b36      	ldr	r3, [pc, #216]	@ (800f5ac <_strtod_l+0x56c>)
 800f4d4:	1b3c      	subs	r4, r7, r4
 800f4d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f4da:	ed94 7b00 	vldr	d7, [r4]
 800f4de:	ec4b ab16 	vmov	d6, sl, fp
 800f4e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f4e6:	e78b      	b.n	800f400 <_strtod_l+0x3c0>
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	ec4b ab17 	vmov	d7, sl, fp
 800f4ee:	4e30      	ldr	r6, [pc, #192]	@ (800f5b0 <_strtod_l+0x570>)
 800f4f0:	1112      	asrs	r2, r2, #4
 800f4f2:	4601      	mov	r1, r0
 800f4f4:	2a01      	cmp	r2, #1
 800f4f6:	dc23      	bgt.n	800f540 <_strtod_l+0x500>
 800f4f8:	b108      	cbz	r0, 800f4fe <_strtod_l+0x4be>
 800f4fa:	ec5b ab17 	vmov	sl, fp, d7
 800f4fe:	4a2c      	ldr	r2, [pc, #176]	@ (800f5b0 <_strtod_l+0x570>)
 800f500:	482c      	ldr	r0, [pc, #176]	@ (800f5b4 <_strtod_l+0x574>)
 800f502:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f506:	ed92 7b00 	vldr	d7, [r2]
 800f50a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f50e:	ec4b ab16 	vmov	d6, sl, fp
 800f512:	4a29      	ldr	r2, [pc, #164]	@ (800f5b8 <_strtod_l+0x578>)
 800f514:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f518:	ee17 1a90 	vmov	r1, s15
 800f51c:	400a      	ands	r2, r1
 800f51e:	4282      	cmp	r2, r0
 800f520:	ec5b ab17 	vmov	sl, fp, d7
 800f524:	d898      	bhi.n	800f458 <_strtod_l+0x418>
 800f526:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800f52a:	4282      	cmp	r2, r0
 800f52c:	bf86      	itte	hi
 800f52e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800f5bc <_strtod_l+0x57c>
 800f532:	f04f 3aff 	movhi.w	sl, #4294967295
 800f536:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800f53a:	2200      	movs	r2, #0
 800f53c:	9206      	str	r2, [sp, #24]
 800f53e:	e076      	b.n	800f62e <_strtod_l+0x5ee>
 800f540:	f012 0f01 	tst.w	r2, #1
 800f544:	d004      	beq.n	800f550 <_strtod_l+0x510>
 800f546:	ed96 6b00 	vldr	d6, [r6]
 800f54a:	2001      	movs	r0, #1
 800f54c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f550:	3101      	adds	r1, #1
 800f552:	1052      	asrs	r2, r2, #1
 800f554:	3608      	adds	r6, #8
 800f556:	e7cd      	b.n	800f4f4 <_strtod_l+0x4b4>
 800f558:	d0ef      	beq.n	800f53a <_strtod_l+0x4fa>
 800f55a:	4252      	negs	r2, r2
 800f55c:	f012 000f 	ands.w	r0, r2, #15
 800f560:	d00a      	beq.n	800f578 <_strtod_l+0x538>
 800f562:	4912      	ldr	r1, [pc, #72]	@ (800f5ac <_strtod_l+0x56c>)
 800f564:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f568:	ed91 7b00 	vldr	d7, [r1]
 800f56c:	ec4b ab16 	vmov	d6, sl, fp
 800f570:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f574:	ec5b ab17 	vmov	sl, fp, d7
 800f578:	1112      	asrs	r2, r2, #4
 800f57a:	d0de      	beq.n	800f53a <_strtod_l+0x4fa>
 800f57c:	2a1f      	cmp	r2, #31
 800f57e:	dd1f      	ble.n	800f5c0 <_strtod_l+0x580>
 800f580:	2400      	movs	r4, #0
 800f582:	4625      	mov	r5, r4
 800f584:	9407      	str	r4, [sp, #28]
 800f586:	4626      	mov	r6, r4
 800f588:	9a05      	ldr	r2, [sp, #20]
 800f58a:	2322      	movs	r3, #34	@ 0x22
 800f58c:	f04f 0a00 	mov.w	sl, #0
 800f590:	f04f 0b00 	mov.w	fp, #0
 800f594:	6013      	str	r3, [r2, #0]
 800f596:	e76a      	b.n	800f46e <_strtod_l+0x42e>
 800f598:	08010d7d 	.word	0x08010d7d
 800f59c:	08010f94 	.word	0x08010f94
 800f5a0:	08010d75 	.word	0x08010d75
 800f5a4:	08010dac 	.word	0x08010dac
 800f5a8:	0801113d 	.word	0x0801113d
 800f5ac:	08010ec8 	.word	0x08010ec8
 800f5b0:	08010ea0 	.word	0x08010ea0
 800f5b4:	7ca00000 	.word	0x7ca00000
 800f5b8:	7ff00000 	.word	0x7ff00000
 800f5bc:	7fefffff 	.word	0x7fefffff
 800f5c0:	f012 0110 	ands.w	r1, r2, #16
 800f5c4:	bf18      	it	ne
 800f5c6:	216a      	movne	r1, #106	@ 0x6a
 800f5c8:	9106      	str	r1, [sp, #24]
 800f5ca:	ec4b ab17 	vmov	d7, sl, fp
 800f5ce:	49b0      	ldr	r1, [pc, #704]	@ (800f890 <_strtod_l+0x850>)
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	07d6      	lsls	r6, r2, #31
 800f5d4:	d504      	bpl.n	800f5e0 <_strtod_l+0x5a0>
 800f5d6:	ed91 6b00 	vldr	d6, [r1]
 800f5da:	2001      	movs	r0, #1
 800f5dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f5e0:	1052      	asrs	r2, r2, #1
 800f5e2:	f101 0108 	add.w	r1, r1, #8
 800f5e6:	d1f4      	bne.n	800f5d2 <_strtod_l+0x592>
 800f5e8:	b108      	cbz	r0, 800f5ee <_strtod_l+0x5ae>
 800f5ea:	ec5b ab17 	vmov	sl, fp, d7
 800f5ee:	9a06      	ldr	r2, [sp, #24]
 800f5f0:	b1b2      	cbz	r2, 800f620 <_strtod_l+0x5e0>
 800f5f2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800f5f6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800f5fa:	2a00      	cmp	r2, #0
 800f5fc:	4658      	mov	r0, fp
 800f5fe:	dd0f      	ble.n	800f620 <_strtod_l+0x5e0>
 800f600:	2a1f      	cmp	r2, #31
 800f602:	dd55      	ble.n	800f6b0 <_strtod_l+0x670>
 800f604:	2a34      	cmp	r2, #52	@ 0x34
 800f606:	bfde      	ittt	le
 800f608:	f04f 32ff 	movle.w	r2, #4294967295
 800f60c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800f610:	408a      	lslle	r2, r1
 800f612:	f04f 0a00 	mov.w	sl, #0
 800f616:	bfcc      	ite	gt
 800f618:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f61c:	ea02 0b00 	andle.w	fp, r2, r0
 800f620:	ec4b ab17 	vmov	d7, sl, fp
 800f624:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62c:	d0a8      	beq.n	800f580 <_strtod_l+0x540>
 800f62e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f630:	9805      	ldr	r0, [sp, #20]
 800f632:	f8cd 9000 	str.w	r9, [sp]
 800f636:	462a      	mov	r2, r5
 800f638:	f7ff f8de 	bl	800e7f8 <__s2b>
 800f63c:	9007      	str	r0, [sp, #28]
 800f63e:	2800      	cmp	r0, #0
 800f640:	f43f af0a 	beq.w	800f458 <_strtod_l+0x418>
 800f644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f646:	1b3f      	subs	r7, r7, r4
 800f648:	2b00      	cmp	r3, #0
 800f64a:	bfb4      	ite	lt
 800f64c:	463b      	movlt	r3, r7
 800f64e:	2300      	movge	r3, #0
 800f650:	930a      	str	r3, [sp, #40]	@ 0x28
 800f652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f654:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800f880 <_strtod_l+0x840>
 800f658:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f65c:	2400      	movs	r4, #0
 800f65e:	930d      	str	r3, [sp, #52]	@ 0x34
 800f660:	4625      	mov	r5, r4
 800f662:	9b07      	ldr	r3, [sp, #28]
 800f664:	9805      	ldr	r0, [sp, #20]
 800f666:	6859      	ldr	r1, [r3, #4]
 800f668:	f7ff f81e 	bl	800e6a8 <_Balloc>
 800f66c:	4606      	mov	r6, r0
 800f66e:	2800      	cmp	r0, #0
 800f670:	f43f aef6 	beq.w	800f460 <_strtod_l+0x420>
 800f674:	9b07      	ldr	r3, [sp, #28]
 800f676:	691a      	ldr	r2, [r3, #16]
 800f678:	ec4b ab19 	vmov	d9, sl, fp
 800f67c:	3202      	adds	r2, #2
 800f67e:	f103 010c 	add.w	r1, r3, #12
 800f682:	0092      	lsls	r2, r2, #2
 800f684:	300c      	adds	r0, #12
 800f686:	f7fe f9d0 	bl	800da2a <memcpy>
 800f68a:	eeb0 0b49 	vmov.f64	d0, d9
 800f68e:	9805      	ldr	r0, [sp, #20]
 800f690:	aa14      	add	r2, sp, #80	@ 0x50
 800f692:	a913      	add	r1, sp, #76	@ 0x4c
 800f694:	f7ff fbec 	bl	800ee70 <__d2b>
 800f698:	9012      	str	r0, [sp, #72]	@ 0x48
 800f69a:	2800      	cmp	r0, #0
 800f69c:	f43f aee0 	beq.w	800f460 <_strtod_l+0x420>
 800f6a0:	9805      	ldr	r0, [sp, #20]
 800f6a2:	2101      	movs	r1, #1
 800f6a4:	f7ff f93e 	bl	800e924 <__i2b>
 800f6a8:	4605      	mov	r5, r0
 800f6aa:	b940      	cbnz	r0, 800f6be <_strtod_l+0x67e>
 800f6ac:	2500      	movs	r5, #0
 800f6ae:	e6d7      	b.n	800f460 <_strtod_l+0x420>
 800f6b0:	f04f 31ff 	mov.w	r1, #4294967295
 800f6b4:	fa01 f202 	lsl.w	r2, r1, r2
 800f6b8:	ea02 0a0a 	and.w	sl, r2, sl
 800f6bc:	e7b0      	b.n	800f620 <_strtod_l+0x5e0>
 800f6be:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800f6c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f6c2:	2f00      	cmp	r7, #0
 800f6c4:	bfab      	itete	ge
 800f6c6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800f6c8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800f6ca:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800f6ce:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800f6d2:	bfac      	ite	ge
 800f6d4:	eb07 0903 	addge.w	r9, r7, r3
 800f6d8:	eba3 0807 	sublt.w	r8, r3, r7
 800f6dc:	9b06      	ldr	r3, [sp, #24]
 800f6de:	1aff      	subs	r7, r7, r3
 800f6e0:	4417      	add	r7, r2
 800f6e2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800f6e6:	4a6b      	ldr	r2, [pc, #428]	@ (800f894 <_strtod_l+0x854>)
 800f6e8:	3f01      	subs	r7, #1
 800f6ea:	4297      	cmp	r7, r2
 800f6ec:	da51      	bge.n	800f792 <_strtod_l+0x752>
 800f6ee:	1bd1      	subs	r1, r2, r7
 800f6f0:	291f      	cmp	r1, #31
 800f6f2:	eba3 0301 	sub.w	r3, r3, r1
 800f6f6:	f04f 0201 	mov.w	r2, #1
 800f6fa:	dc3e      	bgt.n	800f77a <_strtod_l+0x73a>
 800f6fc:	408a      	lsls	r2, r1
 800f6fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800f700:	2200      	movs	r2, #0
 800f702:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f704:	eb09 0703 	add.w	r7, r9, r3
 800f708:	4498      	add	r8, r3
 800f70a:	9b06      	ldr	r3, [sp, #24]
 800f70c:	45b9      	cmp	r9, r7
 800f70e:	4498      	add	r8, r3
 800f710:	464b      	mov	r3, r9
 800f712:	bfa8      	it	ge
 800f714:	463b      	movge	r3, r7
 800f716:	4543      	cmp	r3, r8
 800f718:	bfa8      	it	ge
 800f71a:	4643      	movge	r3, r8
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	bfc2      	ittt	gt
 800f720:	1aff      	subgt	r7, r7, r3
 800f722:	eba8 0803 	subgt.w	r8, r8, r3
 800f726:	eba9 0903 	subgt.w	r9, r9, r3
 800f72a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	dd16      	ble.n	800f75e <_strtod_l+0x71e>
 800f730:	4629      	mov	r1, r5
 800f732:	9805      	ldr	r0, [sp, #20]
 800f734:	461a      	mov	r2, r3
 800f736:	f7ff f9b5 	bl	800eaa4 <__pow5mult>
 800f73a:	4605      	mov	r5, r0
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d0b5      	beq.n	800f6ac <_strtod_l+0x66c>
 800f740:	4601      	mov	r1, r0
 800f742:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f744:	9805      	ldr	r0, [sp, #20]
 800f746:	f7ff f903 	bl	800e950 <__multiply>
 800f74a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f74c:	2800      	cmp	r0, #0
 800f74e:	f43f ae87 	beq.w	800f460 <_strtod_l+0x420>
 800f752:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f754:	9805      	ldr	r0, [sp, #20]
 800f756:	f7fe ffe7 	bl	800e728 <_Bfree>
 800f75a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f75c:	9312      	str	r3, [sp, #72]	@ 0x48
 800f75e:	2f00      	cmp	r7, #0
 800f760:	dc1b      	bgt.n	800f79a <_strtod_l+0x75a>
 800f762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f764:	2b00      	cmp	r3, #0
 800f766:	dd21      	ble.n	800f7ac <_strtod_l+0x76c>
 800f768:	4631      	mov	r1, r6
 800f76a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f76c:	9805      	ldr	r0, [sp, #20]
 800f76e:	f7ff f999 	bl	800eaa4 <__pow5mult>
 800f772:	4606      	mov	r6, r0
 800f774:	b9d0      	cbnz	r0, 800f7ac <_strtod_l+0x76c>
 800f776:	2600      	movs	r6, #0
 800f778:	e672      	b.n	800f460 <_strtod_l+0x420>
 800f77a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800f77e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800f782:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800f786:	37e2      	adds	r7, #226	@ 0xe2
 800f788:	fa02 f107 	lsl.w	r1, r2, r7
 800f78c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f78e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f790:	e7b8      	b.n	800f704 <_strtod_l+0x6c4>
 800f792:	2200      	movs	r2, #0
 800f794:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f796:	2201      	movs	r2, #1
 800f798:	e7f9      	b.n	800f78e <_strtod_l+0x74e>
 800f79a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f79c:	9805      	ldr	r0, [sp, #20]
 800f79e:	463a      	mov	r2, r7
 800f7a0:	f7ff f9da 	bl	800eb58 <__lshift>
 800f7a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800f7a6:	2800      	cmp	r0, #0
 800f7a8:	d1db      	bne.n	800f762 <_strtod_l+0x722>
 800f7aa:	e659      	b.n	800f460 <_strtod_l+0x420>
 800f7ac:	f1b8 0f00 	cmp.w	r8, #0
 800f7b0:	dd07      	ble.n	800f7c2 <_strtod_l+0x782>
 800f7b2:	4631      	mov	r1, r6
 800f7b4:	9805      	ldr	r0, [sp, #20]
 800f7b6:	4642      	mov	r2, r8
 800f7b8:	f7ff f9ce 	bl	800eb58 <__lshift>
 800f7bc:	4606      	mov	r6, r0
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d0d9      	beq.n	800f776 <_strtod_l+0x736>
 800f7c2:	f1b9 0f00 	cmp.w	r9, #0
 800f7c6:	dd08      	ble.n	800f7da <_strtod_l+0x79a>
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	9805      	ldr	r0, [sp, #20]
 800f7cc:	464a      	mov	r2, r9
 800f7ce:	f7ff f9c3 	bl	800eb58 <__lshift>
 800f7d2:	4605      	mov	r5, r0
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	f43f ae43 	beq.w	800f460 <_strtod_l+0x420>
 800f7da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f7dc:	9805      	ldr	r0, [sp, #20]
 800f7de:	4632      	mov	r2, r6
 800f7e0:	f7ff fa42 	bl	800ec68 <__mdiff>
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	f43f ae3a 	beq.w	800f460 <_strtod_l+0x420>
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800f7f2:	60c3      	str	r3, [r0, #12]
 800f7f4:	4629      	mov	r1, r5
 800f7f6:	f7ff fa1b 	bl	800ec30 <__mcmp>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	da4e      	bge.n	800f89c <_strtod_l+0x85c>
 800f7fe:	ea58 080a 	orrs.w	r8, r8, sl
 800f802:	d174      	bne.n	800f8ee <_strtod_l+0x8ae>
 800f804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d170      	bne.n	800f8ee <_strtod_l+0x8ae>
 800f80c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f810:	0d1b      	lsrs	r3, r3, #20
 800f812:	051b      	lsls	r3, r3, #20
 800f814:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f818:	d969      	bls.n	800f8ee <_strtod_l+0x8ae>
 800f81a:	6963      	ldr	r3, [r4, #20]
 800f81c:	b913      	cbnz	r3, 800f824 <_strtod_l+0x7e4>
 800f81e:	6923      	ldr	r3, [r4, #16]
 800f820:	2b01      	cmp	r3, #1
 800f822:	dd64      	ble.n	800f8ee <_strtod_l+0x8ae>
 800f824:	4621      	mov	r1, r4
 800f826:	2201      	movs	r2, #1
 800f828:	9805      	ldr	r0, [sp, #20]
 800f82a:	f7ff f995 	bl	800eb58 <__lshift>
 800f82e:	4629      	mov	r1, r5
 800f830:	4604      	mov	r4, r0
 800f832:	f7ff f9fd 	bl	800ec30 <__mcmp>
 800f836:	2800      	cmp	r0, #0
 800f838:	dd59      	ble.n	800f8ee <_strtod_l+0x8ae>
 800f83a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f83e:	9a06      	ldr	r2, [sp, #24]
 800f840:	0d1b      	lsrs	r3, r3, #20
 800f842:	051b      	lsls	r3, r3, #20
 800f844:	2a00      	cmp	r2, #0
 800f846:	d070      	beq.n	800f92a <_strtod_l+0x8ea>
 800f848:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f84c:	d86d      	bhi.n	800f92a <_strtod_l+0x8ea>
 800f84e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f852:	f67f ae99 	bls.w	800f588 <_strtod_l+0x548>
 800f856:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800f888 <_strtod_l+0x848>
 800f85a:	ec4b ab16 	vmov	d6, sl, fp
 800f85e:	4b0e      	ldr	r3, [pc, #56]	@ (800f898 <_strtod_l+0x858>)
 800f860:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f864:	ee17 2a90 	vmov	r2, s15
 800f868:	4013      	ands	r3, r2
 800f86a:	ec5b ab17 	vmov	sl, fp, d7
 800f86e:	2b00      	cmp	r3, #0
 800f870:	f47f ae01 	bne.w	800f476 <_strtod_l+0x436>
 800f874:	9a05      	ldr	r2, [sp, #20]
 800f876:	2322      	movs	r3, #34	@ 0x22
 800f878:	6013      	str	r3, [r2, #0]
 800f87a:	e5fc      	b.n	800f476 <_strtod_l+0x436>
 800f87c:	f3af 8000 	nop.w
 800f880:	ffc00000 	.word	0xffc00000
 800f884:	41dfffff 	.word	0x41dfffff
 800f888:	00000000 	.word	0x00000000
 800f88c:	39500000 	.word	0x39500000
 800f890:	08010fc0 	.word	0x08010fc0
 800f894:	fffffc02 	.word	0xfffffc02
 800f898:	7ff00000 	.word	0x7ff00000
 800f89c:	46d9      	mov	r9, fp
 800f89e:	d15d      	bne.n	800f95c <_strtod_l+0x91c>
 800f8a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8a4:	f1b8 0f00 	cmp.w	r8, #0
 800f8a8:	d02a      	beq.n	800f900 <_strtod_l+0x8c0>
 800f8aa:	4aab      	ldr	r2, [pc, #684]	@ (800fb58 <_strtod_l+0xb18>)
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d12a      	bne.n	800f906 <_strtod_l+0x8c6>
 800f8b0:	9b06      	ldr	r3, [sp, #24]
 800f8b2:	4652      	mov	r2, sl
 800f8b4:	b1fb      	cbz	r3, 800f8f6 <_strtod_l+0x8b6>
 800f8b6:	4ba9      	ldr	r3, [pc, #676]	@ (800fb5c <_strtod_l+0xb1c>)
 800f8b8:	ea0b 0303 	and.w	r3, fp, r3
 800f8bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f8c0:	f04f 31ff 	mov.w	r1, #4294967295
 800f8c4:	d81a      	bhi.n	800f8fc <_strtod_l+0x8bc>
 800f8c6:	0d1b      	lsrs	r3, r3, #20
 800f8c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f8cc:	fa01 f303 	lsl.w	r3, r1, r3
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d118      	bne.n	800f906 <_strtod_l+0x8c6>
 800f8d4:	4ba2      	ldr	r3, [pc, #648]	@ (800fb60 <_strtod_l+0xb20>)
 800f8d6:	4599      	cmp	r9, r3
 800f8d8:	d102      	bne.n	800f8e0 <_strtod_l+0x8a0>
 800f8da:	3201      	adds	r2, #1
 800f8dc:	f43f adc0 	beq.w	800f460 <_strtod_l+0x420>
 800f8e0:	4b9e      	ldr	r3, [pc, #632]	@ (800fb5c <_strtod_l+0xb1c>)
 800f8e2:	ea09 0303 	and.w	r3, r9, r3
 800f8e6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800f8ea:	f04f 0a00 	mov.w	sl, #0
 800f8ee:	9b06      	ldr	r3, [sp, #24]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d1b0      	bne.n	800f856 <_strtod_l+0x816>
 800f8f4:	e5bf      	b.n	800f476 <_strtod_l+0x436>
 800f8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f8fa:	e7e9      	b.n	800f8d0 <_strtod_l+0x890>
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	e7e7      	b.n	800f8d0 <_strtod_l+0x890>
 800f900:	ea53 030a 	orrs.w	r3, r3, sl
 800f904:	d099      	beq.n	800f83a <_strtod_l+0x7fa>
 800f906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f908:	b1c3      	cbz	r3, 800f93c <_strtod_l+0x8fc>
 800f90a:	ea13 0f09 	tst.w	r3, r9
 800f90e:	d0ee      	beq.n	800f8ee <_strtod_l+0x8ae>
 800f910:	9a06      	ldr	r2, [sp, #24]
 800f912:	4650      	mov	r0, sl
 800f914:	4659      	mov	r1, fp
 800f916:	f1b8 0f00 	cmp.w	r8, #0
 800f91a:	d013      	beq.n	800f944 <_strtod_l+0x904>
 800f91c:	f7ff fb73 	bl	800f006 <sulp>
 800f920:	ee39 7b00 	vadd.f64	d7, d9, d0
 800f924:	ec5b ab17 	vmov	sl, fp, d7
 800f928:	e7e1      	b.n	800f8ee <_strtod_l+0x8ae>
 800f92a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f92e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f932:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f936:	f04f 3aff 	mov.w	sl, #4294967295
 800f93a:	e7d8      	b.n	800f8ee <_strtod_l+0x8ae>
 800f93c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f93e:	ea13 0f0a 	tst.w	r3, sl
 800f942:	e7e4      	b.n	800f90e <_strtod_l+0x8ce>
 800f944:	f7ff fb5f 	bl	800f006 <sulp>
 800f948:	ee39 0b40 	vsub.f64	d0, d9, d0
 800f94c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f954:	ec5b ab10 	vmov	sl, fp, d0
 800f958:	d1c9      	bne.n	800f8ee <_strtod_l+0x8ae>
 800f95a:	e615      	b.n	800f588 <_strtod_l+0x548>
 800f95c:	4629      	mov	r1, r5
 800f95e:	4620      	mov	r0, r4
 800f960:	f7ff fade 	bl	800ef20 <__ratio>
 800f964:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800f968:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f970:	d85d      	bhi.n	800fa2e <_strtod_l+0x9ee>
 800f972:	f1b8 0f00 	cmp.w	r8, #0
 800f976:	d164      	bne.n	800fa42 <_strtod_l+0xa02>
 800f978:	f1ba 0f00 	cmp.w	sl, #0
 800f97c:	d14b      	bne.n	800fa16 <_strtod_l+0x9d6>
 800f97e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f982:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f986:	2b00      	cmp	r3, #0
 800f988:	d160      	bne.n	800fa4c <_strtod_l+0xa0c>
 800f98a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800f98e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f996:	d401      	bmi.n	800f99c <_strtod_l+0x95c>
 800f998:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f99c:	eeb1 ab48 	vneg.f64	d10, d8
 800f9a0:	486e      	ldr	r0, [pc, #440]	@ (800fb5c <_strtod_l+0xb1c>)
 800f9a2:	4970      	ldr	r1, [pc, #448]	@ (800fb64 <_strtod_l+0xb24>)
 800f9a4:	ea09 0700 	and.w	r7, r9, r0
 800f9a8:	428f      	cmp	r7, r1
 800f9aa:	ec53 2b1a 	vmov	r2, r3, d10
 800f9ae:	d17d      	bne.n	800faac <_strtod_l+0xa6c>
 800f9b0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800f9b4:	ec4b ab1c 	vmov	d12, sl, fp
 800f9b8:	eeb0 0b4c 	vmov.f64	d0, d12
 800f9bc:	f7ff f9e8 	bl	800ed90 <__ulp>
 800f9c0:	4866      	ldr	r0, [pc, #408]	@ (800fb5c <_strtod_l+0xb1c>)
 800f9c2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800f9c6:	ee1c 3a90 	vmov	r3, s25
 800f9ca:	4a67      	ldr	r2, [pc, #412]	@ (800fb68 <_strtod_l+0xb28>)
 800f9cc:	ea03 0100 	and.w	r1, r3, r0
 800f9d0:	4291      	cmp	r1, r2
 800f9d2:	ec5b ab1c 	vmov	sl, fp, d12
 800f9d6:	d93c      	bls.n	800fa52 <_strtod_l+0xa12>
 800f9d8:	ee19 2a90 	vmov	r2, s19
 800f9dc:	4b60      	ldr	r3, [pc, #384]	@ (800fb60 <_strtod_l+0xb20>)
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d104      	bne.n	800f9ec <_strtod_l+0x9ac>
 800f9e2:	ee19 3a10 	vmov	r3, s18
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	f43f ad3a 	beq.w	800f460 <_strtod_l+0x420>
 800f9ec:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800fb60 <_strtod_l+0xb20>
 800f9f0:	f04f 3aff 	mov.w	sl, #4294967295
 800f9f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f9f6:	9805      	ldr	r0, [sp, #20]
 800f9f8:	f7fe fe96 	bl	800e728 <_Bfree>
 800f9fc:	9805      	ldr	r0, [sp, #20]
 800f9fe:	4631      	mov	r1, r6
 800fa00:	f7fe fe92 	bl	800e728 <_Bfree>
 800fa04:	9805      	ldr	r0, [sp, #20]
 800fa06:	4629      	mov	r1, r5
 800fa08:	f7fe fe8e 	bl	800e728 <_Bfree>
 800fa0c:	9805      	ldr	r0, [sp, #20]
 800fa0e:	4621      	mov	r1, r4
 800fa10:	f7fe fe8a 	bl	800e728 <_Bfree>
 800fa14:	e625      	b.n	800f662 <_strtod_l+0x622>
 800fa16:	f1ba 0f01 	cmp.w	sl, #1
 800fa1a:	d103      	bne.n	800fa24 <_strtod_l+0x9e4>
 800fa1c:	f1bb 0f00 	cmp.w	fp, #0
 800fa20:	f43f adb2 	beq.w	800f588 <_strtod_l+0x548>
 800fa24:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800fa28:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800fa2c:	e7b8      	b.n	800f9a0 <_strtod_l+0x960>
 800fa2e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800fa32:	ee20 8b08 	vmul.f64	d8, d0, d8
 800fa36:	f1b8 0f00 	cmp.w	r8, #0
 800fa3a:	d0af      	beq.n	800f99c <_strtod_l+0x95c>
 800fa3c:	eeb0 ab48 	vmov.f64	d10, d8
 800fa40:	e7ae      	b.n	800f9a0 <_strtod_l+0x960>
 800fa42:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800fa46:	eeb0 8b4a 	vmov.f64	d8, d10
 800fa4a:	e7a9      	b.n	800f9a0 <_strtod_l+0x960>
 800fa4c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800fa50:	e7a6      	b.n	800f9a0 <_strtod_l+0x960>
 800fa52:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fa56:	9b06      	ldr	r3, [sp, #24]
 800fa58:	46d9      	mov	r9, fp
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1ca      	bne.n	800f9f4 <_strtod_l+0x9b4>
 800fa5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fa62:	0d1b      	lsrs	r3, r3, #20
 800fa64:	051b      	lsls	r3, r3, #20
 800fa66:	429f      	cmp	r7, r3
 800fa68:	d1c4      	bne.n	800f9f4 <_strtod_l+0x9b4>
 800fa6a:	ec51 0b18 	vmov	r0, r1, d8
 800fa6e:	f7f0 fe7b 	bl	8000768 <__aeabi_d2lz>
 800fa72:	f7f0 fe33 	bl	80006dc <__aeabi_l2d>
 800fa76:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800fa7a:	ec41 0b17 	vmov	d7, r0, r1
 800fa7e:	ea49 090a 	orr.w	r9, r9, sl
 800fa82:	ea59 0908 	orrs.w	r9, r9, r8
 800fa86:	ee38 8b47 	vsub.f64	d8, d8, d7
 800fa8a:	d03c      	beq.n	800fb06 <_strtod_l+0xac6>
 800fa8c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800fb40 <_strtod_l+0xb00>
 800fa90:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fa94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa98:	f53f aced 	bmi.w	800f476 <_strtod_l+0x436>
 800fa9c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800fb48 <_strtod_l+0xb08>
 800faa0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800faa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa8:	dda4      	ble.n	800f9f4 <_strtod_l+0x9b4>
 800faaa:	e4e4      	b.n	800f476 <_strtod_l+0x436>
 800faac:	9906      	ldr	r1, [sp, #24]
 800faae:	b1e1      	cbz	r1, 800faea <_strtod_l+0xaaa>
 800fab0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800fab4:	d819      	bhi.n	800faea <_strtod_l+0xaaa>
 800fab6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800faba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fabe:	d811      	bhi.n	800fae4 <_strtod_l+0xaa4>
 800fac0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800fac4:	ee18 3a10 	vmov	r3, s16
 800fac8:	2b01      	cmp	r3, #1
 800faca:	bf38      	it	cc
 800facc:	2301      	movcc	r3, #1
 800face:	ee08 3a10 	vmov	s16, r3
 800fad2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800fad6:	f1b8 0f00 	cmp.w	r8, #0
 800fada:	d111      	bne.n	800fb00 <_strtod_l+0xac0>
 800fadc:	eeb1 7b48 	vneg.f64	d7, d8
 800fae0:	ec53 2b17 	vmov	r2, r3, d7
 800fae4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800fae8:	1bcb      	subs	r3, r1, r7
 800faea:	eeb0 0b49 	vmov.f64	d0, d9
 800faee:	ec43 2b1a 	vmov	d10, r2, r3
 800faf2:	f7ff f94d 	bl	800ed90 <__ulp>
 800faf6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800fafa:	ec5b ab19 	vmov	sl, fp, d9
 800fafe:	e7aa      	b.n	800fa56 <_strtod_l+0xa16>
 800fb00:	eeb0 7b48 	vmov.f64	d7, d8
 800fb04:	e7ec      	b.n	800fae0 <_strtod_l+0xaa0>
 800fb06:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800fb50 <_strtod_l+0xb10>
 800fb0a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb12:	f57f af6f 	bpl.w	800f9f4 <_strtod_l+0x9b4>
 800fb16:	e4ae      	b.n	800f476 <_strtod_l+0x436>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	9308      	str	r3, [sp, #32]
 800fb1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fb20:	6013      	str	r3, [r2, #0]
 800fb22:	f7ff bacc 	b.w	800f0be <_strtod_l+0x7e>
 800fb26:	2a65      	cmp	r2, #101	@ 0x65
 800fb28:	f43f abbc 	beq.w	800f2a4 <_strtod_l+0x264>
 800fb2c:	2a45      	cmp	r2, #69	@ 0x45
 800fb2e:	f43f abb9 	beq.w	800f2a4 <_strtod_l+0x264>
 800fb32:	2301      	movs	r3, #1
 800fb34:	9306      	str	r3, [sp, #24]
 800fb36:	f7ff bbf0 	b.w	800f31a <_strtod_l+0x2da>
 800fb3a:	bf00      	nop
 800fb3c:	f3af 8000 	nop.w
 800fb40:	94a03595 	.word	0x94a03595
 800fb44:	3fdfffff 	.word	0x3fdfffff
 800fb48:	35afe535 	.word	0x35afe535
 800fb4c:	3fe00000 	.word	0x3fe00000
 800fb50:	94a03595 	.word	0x94a03595
 800fb54:	3fcfffff 	.word	0x3fcfffff
 800fb58:	000fffff 	.word	0x000fffff
 800fb5c:	7ff00000 	.word	0x7ff00000
 800fb60:	7fefffff 	.word	0x7fefffff
 800fb64:	7fe00000 	.word	0x7fe00000
 800fb68:	7c9fffff 	.word	0x7c9fffff

0800fb6c <_strtod_r>:
 800fb6c:	4b01      	ldr	r3, [pc, #4]	@ (800fb74 <_strtod_r+0x8>)
 800fb6e:	f7ff ba67 	b.w	800f040 <_strtod_l>
 800fb72:	bf00      	nop
 800fb74:	2400006c 	.word	0x2400006c

0800fb78 <_strtol_l.constprop.0>:
 800fb78:	2b24      	cmp	r3, #36	@ 0x24
 800fb7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb7e:	4686      	mov	lr, r0
 800fb80:	4690      	mov	r8, r2
 800fb82:	d801      	bhi.n	800fb88 <_strtol_l.constprop.0+0x10>
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d106      	bne.n	800fb96 <_strtol_l.constprop.0+0x1e>
 800fb88:	f7fd ff22 	bl	800d9d0 <__errno>
 800fb8c:	2316      	movs	r3, #22
 800fb8e:	6003      	str	r3, [r0, #0]
 800fb90:	2000      	movs	r0, #0
 800fb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb96:	4834      	ldr	r0, [pc, #208]	@ (800fc68 <_strtol_l.constprop.0+0xf0>)
 800fb98:	460d      	mov	r5, r1
 800fb9a:	462a      	mov	r2, r5
 800fb9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fba0:	5d06      	ldrb	r6, [r0, r4]
 800fba2:	f016 0608 	ands.w	r6, r6, #8
 800fba6:	d1f8      	bne.n	800fb9a <_strtol_l.constprop.0+0x22>
 800fba8:	2c2d      	cmp	r4, #45	@ 0x2d
 800fbaa:	d12d      	bne.n	800fc08 <_strtol_l.constprop.0+0x90>
 800fbac:	782c      	ldrb	r4, [r5, #0]
 800fbae:	2601      	movs	r6, #1
 800fbb0:	1c95      	adds	r5, r2, #2
 800fbb2:	f033 0210 	bics.w	r2, r3, #16
 800fbb6:	d109      	bne.n	800fbcc <_strtol_l.constprop.0+0x54>
 800fbb8:	2c30      	cmp	r4, #48	@ 0x30
 800fbba:	d12a      	bne.n	800fc12 <_strtol_l.constprop.0+0x9a>
 800fbbc:	782a      	ldrb	r2, [r5, #0]
 800fbbe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fbc2:	2a58      	cmp	r2, #88	@ 0x58
 800fbc4:	d125      	bne.n	800fc12 <_strtol_l.constprop.0+0x9a>
 800fbc6:	786c      	ldrb	r4, [r5, #1]
 800fbc8:	2310      	movs	r3, #16
 800fbca:	3502      	adds	r5, #2
 800fbcc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fbd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	fbbc f9f3 	udiv	r9, ip, r3
 800fbda:	4610      	mov	r0, r2
 800fbdc:	fb03 ca19 	mls	sl, r3, r9, ip
 800fbe0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fbe4:	2f09      	cmp	r7, #9
 800fbe6:	d81b      	bhi.n	800fc20 <_strtol_l.constprop.0+0xa8>
 800fbe8:	463c      	mov	r4, r7
 800fbea:	42a3      	cmp	r3, r4
 800fbec:	dd27      	ble.n	800fc3e <_strtol_l.constprop.0+0xc6>
 800fbee:	1c57      	adds	r7, r2, #1
 800fbf0:	d007      	beq.n	800fc02 <_strtol_l.constprop.0+0x8a>
 800fbf2:	4581      	cmp	r9, r0
 800fbf4:	d320      	bcc.n	800fc38 <_strtol_l.constprop.0+0xc0>
 800fbf6:	d101      	bne.n	800fbfc <_strtol_l.constprop.0+0x84>
 800fbf8:	45a2      	cmp	sl, r4
 800fbfa:	db1d      	blt.n	800fc38 <_strtol_l.constprop.0+0xc0>
 800fbfc:	fb00 4003 	mla	r0, r0, r3, r4
 800fc00:	2201      	movs	r2, #1
 800fc02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc06:	e7eb      	b.n	800fbe0 <_strtol_l.constprop.0+0x68>
 800fc08:	2c2b      	cmp	r4, #43	@ 0x2b
 800fc0a:	bf04      	itt	eq
 800fc0c:	782c      	ldrbeq	r4, [r5, #0]
 800fc0e:	1c95      	addeq	r5, r2, #2
 800fc10:	e7cf      	b.n	800fbb2 <_strtol_l.constprop.0+0x3a>
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d1da      	bne.n	800fbcc <_strtol_l.constprop.0+0x54>
 800fc16:	2c30      	cmp	r4, #48	@ 0x30
 800fc18:	bf0c      	ite	eq
 800fc1a:	2308      	moveq	r3, #8
 800fc1c:	230a      	movne	r3, #10
 800fc1e:	e7d5      	b.n	800fbcc <_strtol_l.constprop.0+0x54>
 800fc20:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fc24:	2f19      	cmp	r7, #25
 800fc26:	d801      	bhi.n	800fc2c <_strtol_l.constprop.0+0xb4>
 800fc28:	3c37      	subs	r4, #55	@ 0x37
 800fc2a:	e7de      	b.n	800fbea <_strtol_l.constprop.0+0x72>
 800fc2c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fc30:	2f19      	cmp	r7, #25
 800fc32:	d804      	bhi.n	800fc3e <_strtol_l.constprop.0+0xc6>
 800fc34:	3c57      	subs	r4, #87	@ 0x57
 800fc36:	e7d8      	b.n	800fbea <_strtol_l.constprop.0+0x72>
 800fc38:	f04f 32ff 	mov.w	r2, #4294967295
 800fc3c:	e7e1      	b.n	800fc02 <_strtol_l.constprop.0+0x8a>
 800fc3e:	1c53      	adds	r3, r2, #1
 800fc40:	d108      	bne.n	800fc54 <_strtol_l.constprop.0+0xdc>
 800fc42:	2322      	movs	r3, #34	@ 0x22
 800fc44:	f8ce 3000 	str.w	r3, [lr]
 800fc48:	4660      	mov	r0, ip
 800fc4a:	f1b8 0f00 	cmp.w	r8, #0
 800fc4e:	d0a0      	beq.n	800fb92 <_strtol_l.constprop.0+0x1a>
 800fc50:	1e69      	subs	r1, r5, #1
 800fc52:	e006      	b.n	800fc62 <_strtol_l.constprop.0+0xea>
 800fc54:	b106      	cbz	r6, 800fc58 <_strtol_l.constprop.0+0xe0>
 800fc56:	4240      	negs	r0, r0
 800fc58:	f1b8 0f00 	cmp.w	r8, #0
 800fc5c:	d099      	beq.n	800fb92 <_strtol_l.constprop.0+0x1a>
 800fc5e:	2a00      	cmp	r2, #0
 800fc60:	d1f6      	bne.n	800fc50 <_strtol_l.constprop.0+0xd8>
 800fc62:	f8c8 1000 	str.w	r1, [r8]
 800fc66:	e794      	b.n	800fb92 <_strtol_l.constprop.0+0x1a>
 800fc68:	08010fe9 	.word	0x08010fe9

0800fc6c <_strtol_r>:
 800fc6c:	f7ff bf84 	b.w	800fb78 <_strtol_l.constprop.0>

0800fc70 <__ssputs_r>:
 800fc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc74:	688e      	ldr	r6, [r1, #8]
 800fc76:	461f      	mov	r7, r3
 800fc78:	42be      	cmp	r6, r7
 800fc7a:	680b      	ldr	r3, [r1, #0]
 800fc7c:	4682      	mov	sl, r0
 800fc7e:	460c      	mov	r4, r1
 800fc80:	4690      	mov	r8, r2
 800fc82:	d82d      	bhi.n	800fce0 <__ssputs_r+0x70>
 800fc84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc8c:	d026      	beq.n	800fcdc <__ssputs_r+0x6c>
 800fc8e:	6965      	ldr	r5, [r4, #20]
 800fc90:	6909      	ldr	r1, [r1, #16]
 800fc92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc96:	eba3 0901 	sub.w	r9, r3, r1
 800fc9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc9e:	1c7b      	adds	r3, r7, #1
 800fca0:	444b      	add	r3, r9
 800fca2:	106d      	asrs	r5, r5, #1
 800fca4:	429d      	cmp	r5, r3
 800fca6:	bf38      	it	cc
 800fca8:	461d      	movcc	r5, r3
 800fcaa:	0553      	lsls	r3, r2, #21
 800fcac:	d527      	bpl.n	800fcfe <__ssputs_r+0x8e>
 800fcae:	4629      	mov	r1, r5
 800fcb0:	f7fc fd7e 	bl	800c7b0 <_malloc_r>
 800fcb4:	4606      	mov	r6, r0
 800fcb6:	b360      	cbz	r0, 800fd12 <__ssputs_r+0xa2>
 800fcb8:	6921      	ldr	r1, [r4, #16]
 800fcba:	464a      	mov	r2, r9
 800fcbc:	f7fd feb5 	bl	800da2a <memcpy>
 800fcc0:	89a3      	ldrh	r3, [r4, #12]
 800fcc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fcc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcca:	81a3      	strh	r3, [r4, #12]
 800fccc:	6126      	str	r6, [r4, #16]
 800fcce:	6165      	str	r5, [r4, #20]
 800fcd0:	444e      	add	r6, r9
 800fcd2:	eba5 0509 	sub.w	r5, r5, r9
 800fcd6:	6026      	str	r6, [r4, #0]
 800fcd8:	60a5      	str	r5, [r4, #8]
 800fcda:	463e      	mov	r6, r7
 800fcdc:	42be      	cmp	r6, r7
 800fcde:	d900      	bls.n	800fce2 <__ssputs_r+0x72>
 800fce0:	463e      	mov	r6, r7
 800fce2:	6820      	ldr	r0, [r4, #0]
 800fce4:	4632      	mov	r2, r6
 800fce6:	4641      	mov	r1, r8
 800fce8:	f000 fb6a 	bl	80103c0 <memmove>
 800fcec:	68a3      	ldr	r3, [r4, #8]
 800fcee:	1b9b      	subs	r3, r3, r6
 800fcf0:	60a3      	str	r3, [r4, #8]
 800fcf2:	6823      	ldr	r3, [r4, #0]
 800fcf4:	4433      	add	r3, r6
 800fcf6:	6023      	str	r3, [r4, #0]
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcfe:	462a      	mov	r2, r5
 800fd00:	f000 ff1f 	bl	8010b42 <_realloc_r>
 800fd04:	4606      	mov	r6, r0
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d1e0      	bne.n	800fccc <__ssputs_r+0x5c>
 800fd0a:	6921      	ldr	r1, [r4, #16]
 800fd0c:	4650      	mov	r0, sl
 800fd0e:	f7fe fc81 	bl	800e614 <_free_r>
 800fd12:	230c      	movs	r3, #12
 800fd14:	f8ca 3000 	str.w	r3, [sl]
 800fd18:	89a3      	ldrh	r3, [r4, #12]
 800fd1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd1e:	81a3      	strh	r3, [r4, #12]
 800fd20:	f04f 30ff 	mov.w	r0, #4294967295
 800fd24:	e7e9      	b.n	800fcfa <__ssputs_r+0x8a>
	...

0800fd28 <_svfiprintf_r>:
 800fd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2c:	4698      	mov	r8, r3
 800fd2e:	898b      	ldrh	r3, [r1, #12]
 800fd30:	061b      	lsls	r3, r3, #24
 800fd32:	b09d      	sub	sp, #116	@ 0x74
 800fd34:	4607      	mov	r7, r0
 800fd36:	460d      	mov	r5, r1
 800fd38:	4614      	mov	r4, r2
 800fd3a:	d510      	bpl.n	800fd5e <_svfiprintf_r+0x36>
 800fd3c:	690b      	ldr	r3, [r1, #16]
 800fd3e:	b973      	cbnz	r3, 800fd5e <_svfiprintf_r+0x36>
 800fd40:	2140      	movs	r1, #64	@ 0x40
 800fd42:	f7fc fd35 	bl	800c7b0 <_malloc_r>
 800fd46:	6028      	str	r0, [r5, #0]
 800fd48:	6128      	str	r0, [r5, #16]
 800fd4a:	b930      	cbnz	r0, 800fd5a <_svfiprintf_r+0x32>
 800fd4c:	230c      	movs	r3, #12
 800fd4e:	603b      	str	r3, [r7, #0]
 800fd50:	f04f 30ff 	mov.w	r0, #4294967295
 800fd54:	b01d      	add	sp, #116	@ 0x74
 800fd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd5a:	2340      	movs	r3, #64	@ 0x40
 800fd5c:	616b      	str	r3, [r5, #20]
 800fd5e:	2300      	movs	r3, #0
 800fd60:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd62:	2320      	movs	r3, #32
 800fd64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd68:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd6c:	2330      	movs	r3, #48	@ 0x30
 800fd6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ff0c <_svfiprintf_r+0x1e4>
 800fd72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd76:	f04f 0901 	mov.w	r9, #1
 800fd7a:	4623      	mov	r3, r4
 800fd7c:	469a      	mov	sl, r3
 800fd7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd82:	b10a      	cbz	r2, 800fd88 <_svfiprintf_r+0x60>
 800fd84:	2a25      	cmp	r2, #37	@ 0x25
 800fd86:	d1f9      	bne.n	800fd7c <_svfiprintf_r+0x54>
 800fd88:	ebba 0b04 	subs.w	fp, sl, r4
 800fd8c:	d00b      	beq.n	800fda6 <_svfiprintf_r+0x7e>
 800fd8e:	465b      	mov	r3, fp
 800fd90:	4622      	mov	r2, r4
 800fd92:	4629      	mov	r1, r5
 800fd94:	4638      	mov	r0, r7
 800fd96:	f7ff ff6b 	bl	800fc70 <__ssputs_r>
 800fd9a:	3001      	adds	r0, #1
 800fd9c:	f000 80a7 	beq.w	800feee <_svfiprintf_r+0x1c6>
 800fda0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fda2:	445a      	add	r2, fp
 800fda4:	9209      	str	r2, [sp, #36]	@ 0x24
 800fda6:	f89a 3000 	ldrb.w	r3, [sl]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f000 809f 	beq.w	800feee <_svfiprintf_r+0x1c6>
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800fdb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdba:	f10a 0a01 	add.w	sl, sl, #1
 800fdbe:	9304      	str	r3, [sp, #16]
 800fdc0:	9307      	str	r3, [sp, #28]
 800fdc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fdc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800fdc8:	4654      	mov	r4, sl
 800fdca:	2205      	movs	r2, #5
 800fdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdd0:	484e      	ldr	r0, [pc, #312]	@ (800ff0c <_svfiprintf_r+0x1e4>)
 800fdd2:	f7f0 fa9d 	bl	8000310 <memchr>
 800fdd6:	9a04      	ldr	r2, [sp, #16]
 800fdd8:	b9d8      	cbnz	r0, 800fe12 <_svfiprintf_r+0xea>
 800fdda:	06d0      	lsls	r0, r2, #27
 800fddc:	bf44      	itt	mi
 800fdde:	2320      	movmi	r3, #32
 800fde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fde4:	0711      	lsls	r1, r2, #28
 800fde6:	bf44      	itt	mi
 800fde8:	232b      	movmi	r3, #43	@ 0x2b
 800fdea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdee:	f89a 3000 	ldrb.w	r3, [sl]
 800fdf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdf4:	d015      	beq.n	800fe22 <_svfiprintf_r+0xfa>
 800fdf6:	9a07      	ldr	r2, [sp, #28]
 800fdf8:	4654      	mov	r4, sl
 800fdfa:	2000      	movs	r0, #0
 800fdfc:	f04f 0c0a 	mov.w	ip, #10
 800fe00:	4621      	mov	r1, r4
 800fe02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe06:	3b30      	subs	r3, #48	@ 0x30
 800fe08:	2b09      	cmp	r3, #9
 800fe0a:	d94b      	bls.n	800fea4 <_svfiprintf_r+0x17c>
 800fe0c:	b1b0      	cbz	r0, 800fe3c <_svfiprintf_r+0x114>
 800fe0e:	9207      	str	r2, [sp, #28]
 800fe10:	e014      	b.n	800fe3c <_svfiprintf_r+0x114>
 800fe12:	eba0 0308 	sub.w	r3, r0, r8
 800fe16:	fa09 f303 	lsl.w	r3, r9, r3
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	9304      	str	r3, [sp, #16]
 800fe1e:	46a2      	mov	sl, r4
 800fe20:	e7d2      	b.n	800fdc8 <_svfiprintf_r+0xa0>
 800fe22:	9b03      	ldr	r3, [sp, #12]
 800fe24:	1d19      	adds	r1, r3, #4
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	9103      	str	r1, [sp, #12]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	bfbb      	ittet	lt
 800fe2e:	425b      	neglt	r3, r3
 800fe30:	f042 0202 	orrlt.w	r2, r2, #2
 800fe34:	9307      	strge	r3, [sp, #28]
 800fe36:	9307      	strlt	r3, [sp, #28]
 800fe38:	bfb8      	it	lt
 800fe3a:	9204      	strlt	r2, [sp, #16]
 800fe3c:	7823      	ldrb	r3, [r4, #0]
 800fe3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe40:	d10a      	bne.n	800fe58 <_svfiprintf_r+0x130>
 800fe42:	7863      	ldrb	r3, [r4, #1]
 800fe44:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe46:	d132      	bne.n	800feae <_svfiprintf_r+0x186>
 800fe48:	9b03      	ldr	r3, [sp, #12]
 800fe4a:	1d1a      	adds	r2, r3, #4
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	9203      	str	r2, [sp, #12]
 800fe50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe54:	3402      	adds	r4, #2
 800fe56:	9305      	str	r3, [sp, #20]
 800fe58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ff1c <_svfiprintf_r+0x1f4>
 800fe5c:	7821      	ldrb	r1, [r4, #0]
 800fe5e:	2203      	movs	r2, #3
 800fe60:	4650      	mov	r0, sl
 800fe62:	f7f0 fa55 	bl	8000310 <memchr>
 800fe66:	b138      	cbz	r0, 800fe78 <_svfiprintf_r+0x150>
 800fe68:	9b04      	ldr	r3, [sp, #16]
 800fe6a:	eba0 000a 	sub.w	r0, r0, sl
 800fe6e:	2240      	movs	r2, #64	@ 0x40
 800fe70:	4082      	lsls	r2, r0
 800fe72:	4313      	orrs	r3, r2
 800fe74:	3401      	adds	r4, #1
 800fe76:	9304      	str	r3, [sp, #16]
 800fe78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe7c:	4824      	ldr	r0, [pc, #144]	@ (800ff10 <_svfiprintf_r+0x1e8>)
 800fe7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe82:	2206      	movs	r2, #6
 800fe84:	f7f0 fa44 	bl	8000310 <memchr>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d036      	beq.n	800fefa <_svfiprintf_r+0x1d2>
 800fe8c:	4b21      	ldr	r3, [pc, #132]	@ (800ff14 <_svfiprintf_r+0x1ec>)
 800fe8e:	bb1b      	cbnz	r3, 800fed8 <_svfiprintf_r+0x1b0>
 800fe90:	9b03      	ldr	r3, [sp, #12]
 800fe92:	3307      	adds	r3, #7
 800fe94:	f023 0307 	bic.w	r3, r3, #7
 800fe98:	3308      	adds	r3, #8
 800fe9a:	9303      	str	r3, [sp, #12]
 800fe9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe9e:	4433      	add	r3, r6
 800fea0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fea2:	e76a      	b.n	800fd7a <_svfiprintf_r+0x52>
 800fea4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fea8:	460c      	mov	r4, r1
 800feaa:	2001      	movs	r0, #1
 800feac:	e7a8      	b.n	800fe00 <_svfiprintf_r+0xd8>
 800feae:	2300      	movs	r3, #0
 800feb0:	3401      	adds	r4, #1
 800feb2:	9305      	str	r3, [sp, #20]
 800feb4:	4619      	mov	r1, r3
 800feb6:	f04f 0c0a 	mov.w	ip, #10
 800feba:	4620      	mov	r0, r4
 800febc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fec0:	3a30      	subs	r2, #48	@ 0x30
 800fec2:	2a09      	cmp	r2, #9
 800fec4:	d903      	bls.n	800fece <_svfiprintf_r+0x1a6>
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d0c6      	beq.n	800fe58 <_svfiprintf_r+0x130>
 800feca:	9105      	str	r1, [sp, #20]
 800fecc:	e7c4      	b.n	800fe58 <_svfiprintf_r+0x130>
 800fece:	fb0c 2101 	mla	r1, ip, r1, r2
 800fed2:	4604      	mov	r4, r0
 800fed4:	2301      	movs	r3, #1
 800fed6:	e7f0      	b.n	800feba <_svfiprintf_r+0x192>
 800fed8:	ab03      	add	r3, sp, #12
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	462a      	mov	r2, r5
 800fede:	4b0e      	ldr	r3, [pc, #56]	@ (800ff18 <_svfiprintf_r+0x1f0>)
 800fee0:	a904      	add	r1, sp, #16
 800fee2:	4638      	mov	r0, r7
 800fee4:	f7fc fd80 	bl	800c9e8 <_printf_float>
 800fee8:	1c42      	adds	r2, r0, #1
 800feea:	4606      	mov	r6, r0
 800feec:	d1d6      	bne.n	800fe9c <_svfiprintf_r+0x174>
 800feee:	89ab      	ldrh	r3, [r5, #12]
 800fef0:	065b      	lsls	r3, r3, #25
 800fef2:	f53f af2d 	bmi.w	800fd50 <_svfiprintf_r+0x28>
 800fef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fef8:	e72c      	b.n	800fd54 <_svfiprintf_r+0x2c>
 800fefa:	ab03      	add	r3, sp, #12
 800fefc:	9300      	str	r3, [sp, #0]
 800fefe:	462a      	mov	r2, r5
 800ff00:	4b05      	ldr	r3, [pc, #20]	@ (800ff18 <_svfiprintf_r+0x1f0>)
 800ff02:	a904      	add	r1, sp, #16
 800ff04:	4638      	mov	r0, r7
 800ff06:	f7fc fff7 	bl	800cef8 <_printf_i>
 800ff0a:	e7ed      	b.n	800fee8 <_svfiprintf_r+0x1c0>
 800ff0c:	080110e9 	.word	0x080110e9
 800ff10:	080110f3 	.word	0x080110f3
 800ff14:	0800c9e9 	.word	0x0800c9e9
 800ff18:	0800fc71 	.word	0x0800fc71
 800ff1c:	080110ef 	.word	0x080110ef

0800ff20 <__sfputc_r>:
 800ff20:	6893      	ldr	r3, [r2, #8]
 800ff22:	3b01      	subs	r3, #1
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	b410      	push	{r4}
 800ff28:	6093      	str	r3, [r2, #8]
 800ff2a:	da08      	bge.n	800ff3e <__sfputc_r+0x1e>
 800ff2c:	6994      	ldr	r4, [r2, #24]
 800ff2e:	42a3      	cmp	r3, r4
 800ff30:	db01      	blt.n	800ff36 <__sfputc_r+0x16>
 800ff32:	290a      	cmp	r1, #10
 800ff34:	d103      	bne.n	800ff3e <__sfputc_r+0x1e>
 800ff36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff3a:	f7fd bc40 	b.w	800d7be <__swbuf_r>
 800ff3e:	6813      	ldr	r3, [r2, #0]
 800ff40:	1c58      	adds	r0, r3, #1
 800ff42:	6010      	str	r0, [r2, #0]
 800ff44:	7019      	strb	r1, [r3, #0]
 800ff46:	4608      	mov	r0, r1
 800ff48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff4c:	4770      	bx	lr

0800ff4e <__sfputs_r>:
 800ff4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff50:	4606      	mov	r6, r0
 800ff52:	460f      	mov	r7, r1
 800ff54:	4614      	mov	r4, r2
 800ff56:	18d5      	adds	r5, r2, r3
 800ff58:	42ac      	cmp	r4, r5
 800ff5a:	d101      	bne.n	800ff60 <__sfputs_r+0x12>
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	e007      	b.n	800ff70 <__sfputs_r+0x22>
 800ff60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff64:	463a      	mov	r2, r7
 800ff66:	4630      	mov	r0, r6
 800ff68:	f7ff ffda 	bl	800ff20 <__sfputc_r>
 800ff6c:	1c43      	adds	r3, r0, #1
 800ff6e:	d1f3      	bne.n	800ff58 <__sfputs_r+0xa>
 800ff70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff74 <_vfiprintf_r>:
 800ff74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff78:	460d      	mov	r5, r1
 800ff7a:	b09d      	sub	sp, #116	@ 0x74
 800ff7c:	4614      	mov	r4, r2
 800ff7e:	4698      	mov	r8, r3
 800ff80:	4606      	mov	r6, r0
 800ff82:	b118      	cbz	r0, 800ff8c <_vfiprintf_r+0x18>
 800ff84:	6a03      	ldr	r3, [r0, #32]
 800ff86:	b90b      	cbnz	r3, 800ff8c <_vfiprintf_r+0x18>
 800ff88:	f7fd fb6e 	bl	800d668 <__sinit>
 800ff8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff8e:	07d9      	lsls	r1, r3, #31
 800ff90:	d405      	bmi.n	800ff9e <_vfiprintf_r+0x2a>
 800ff92:	89ab      	ldrh	r3, [r5, #12]
 800ff94:	059a      	lsls	r2, r3, #22
 800ff96:	d402      	bmi.n	800ff9e <_vfiprintf_r+0x2a>
 800ff98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff9a:	f7fd fd44 	bl	800da26 <__retarget_lock_acquire_recursive>
 800ff9e:	89ab      	ldrh	r3, [r5, #12]
 800ffa0:	071b      	lsls	r3, r3, #28
 800ffa2:	d501      	bpl.n	800ffa8 <_vfiprintf_r+0x34>
 800ffa4:	692b      	ldr	r3, [r5, #16]
 800ffa6:	b99b      	cbnz	r3, 800ffd0 <_vfiprintf_r+0x5c>
 800ffa8:	4629      	mov	r1, r5
 800ffaa:	4630      	mov	r0, r6
 800ffac:	f7fd fc46 	bl	800d83c <__swsetup_r>
 800ffb0:	b170      	cbz	r0, 800ffd0 <_vfiprintf_r+0x5c>
 800ffb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ffb4:	07dc      	lsls	r4, r3, #31
 800ffb6:	d504      	bpl.n	800ffc2 <_vfiprintf_r+0x4e>
 800ffb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ffbc:	b01d      	add	sp, #116	@ 0x74
 800ffbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc2:	89ab      	ldrh	r3, [r5, #12]
 800ffc4:	0598      	lsls	r0, r3, #22
 800ffc6:	d4f7      	bmi.n	800ffb8 <_vfiprintf_r+0x44>
 800ffc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ffca:	f7fd fd2d 	bl	800da28 <__retarget_lock_release_recursive>
 800ffce:	e7f3      	b.n	800ffb8 <_vfiprintf_r+0x44>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffd4:	2320      	movs	r3, #32
 800ffd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ffda:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffde:	2330      	movs	r3, #48	@ 0x30
 800ffe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010190 <_vfiprintf_r+0x21c>
 800ffe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ffe8:	f04f 0901 	mov.w	r9, #1
 800ffec:	4623      	mov	r3, r4
 800ffee:	469a      	mov	sl, r3
 800fff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fff4:	b10a      	cbz	r2, 800fffa <_vfiprintf_r+0x86>
 800fff6:	2a25      	cmp	r2, #37	@ 0x25
 800fff8:	d1f9      	bne.n	800ffee <_vfiprintf_r+0x7a>
 800fffa:	ebba 0b04 	subs.w	fp, sl, r4
 800fffe:	d00b      	beq.n	8010018 <_vfiprintf_r+0xa4>
 8010000:	465b      	mov	r3, fp
 8010002:	4622      	mov	r2, r4
 8010004:	4629      	mov	r1, r5
 8010006:	4630      	mov	r0, r6
 8010008:	f7ff ffa1 	bl	800ff4e <__sfputs_r>
 801000c:	3001      	adds	r0, #1
 801000e:	f000 80a7 	beq.w	8010160 <_vfiprintf_r+0x1ec>
 8010012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010014:	445a      	add	r2, fp
 8010016:	9209      	str	r2, [sp, #36]	@ 0x24
 8010018:	f89a 3000 	ldrb.w	r3, [sl]
 801001c:	2b00      	cmp	r3, #0
 801001e:	f000 809f 	beq.w	8010160 <_vfiprintf_r+0x1ec>
 8010022:	2300      	movs	r3, #0
 8010024:	f04f 32ff 	mov.w	r2, #4294967295
 8010028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801002c:	f10a 0a01 	add.w	sl, sl, #1
 8010030:	9304      	str	r3, [sp, #16]
 8010032:	9307      	str	r3, [sp, #28]
 8010034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010038:	931a      	str	r3, [sp, #104]	@ 0x68
 801003a:	4654      	mov	r4, sl
 801003c:	2205      	movs	r2, #5
 801003e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010042:	4853      	ldr	r0, [pc, #332]	@ (8010190 <_vfiprintf_r+0x21c>)
 8010044:	f7f0 f964 	bl	8000310 <memchr>
 8010048:	9a04      	ldr	r2, [sp, #16]
 801004a:	b9d8      	cbnz	r0, 8010084 <_vfiprintf_r+0x110>
 801004c:	06d1      	lsls	r1, r2, #27
 801004e:	bf44      	itt	mi
 8010050:	2320      	movmi	r3, #32
 8010052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010056:	0713      	lsls	r3, r2, #28
 8010058:	bf44      	itt	mi
 801005a:	232b      	movmi	r3, #43	@ 0x2b
 801005c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010060:	f89a 3000 	ldrb.w	r3, [sl]
 8010064:	2b2a      	cmp	r3, #42	@ 0x2a
 8010066:	d015      	beq.n	8010094 <_vfiprintf_r+0x120>
 8010068:	9a07      	ldr	r2, [sp, #28]
 801006a:	4654      	mov	r4, sl
 801006c:	2000      	movs	r0, #0
 801006e:	f04f 0c0a 	mov.w	ip, #10
 8010072:	4621      	mov	r1, r4
 8010074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010078:	3b30      	subs	r3, #48	@ 0x30
 801007a:	2b09      	cmp	r3, #9
 801007c:	d94b      	bls.n	8010116 <_vfiprintf_r+0x1a2>
 801007e:	b1b0      	cbz	r0, 80100ae <_vfiprintf_r+0x13a>
 8010080:	9207      	str	r2, [sp, #28]
 8010082:	e014      	b.n	80100ae <_vfiprintf_r+0x13a>
 8010084:	eba0 0308 	sub.w	r3, r0, r8
 8010088:	fa09 f303 	lsl.w	r3, r9, r3
 801008c:	4313      	orrs	r3, r2
 801008e:	9304      	str	r3, [sp, #16]
 8010090:	46a2      	mov	sl, r4
 8010092:	e7d2      	b.n	801003a <_vfiprintf_r+0xc6>
 8010094:	9b03      	ldr	r3, [sp, #12]
 8010096:	1d19      	adds	r1, r3, #4
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	9103      	str	r1, [sp, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	bfbb      	ittet	lt
 80100a0:	425b      	neglt	r3, r3
 80100a2:	f042 0202 	orrlt.w	r2, r2, #2
 80100a6:	9307      	strge	r3, [sp, #28]
 80100a8:	9307      	strlt	r3, [sp, #28]
 80100aa:	bfb8      	it	lt
 80100ac:	9204      	strlt	r2, [sp, #16]
 80100ae:	7823      	ldrb	r3, [r4, #0]
 80100b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80100b2:	d10a      	bne.n	80100ca <_vfiprintf_r+0x156>
 80100b4:	7863      	ldrb	r3, [r4, #1]
 80100b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80100b8:	d132      	bne.n	8010120 <_vfiprintf_r+0x1ac>
 80100ba:	9b03      	ldr	r3, [sp, #12]
 80100bc:	1d1a      	adds	r2, r3, #4
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	9203      	str	r2, [sp, #12]
 80100c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80100c6:	3402      	adds	r4, #2
 80100c8:	9305      	str	r3, [sp, #20]
 80100ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80101a0 <_vfiprintf_r+0x22c>
 80100ce:	7821      	ldrb	r1, [r4, #0]
 80100d0:	2203      	movs	r2, #3
 80100d2:	4650      	mov	r0, sl
 80100d4:	f7f0 f91c 	bl	8000310 <memchr>
 80100d8:	b138      	cbz	r0, 80100ea <_vfiprintf_r+0x176>
 80100da:	9b04      	ldr	r3, [sp, #16]
 80100dc:	eba0 000a 	sub.w	r0, r0, sl
 80100e0:	2240      	movs	r2, #64	@ 0x40
 80100e2:	4082      	lsls	r2, r0
 80100e4:	4313      	orrs	r3, r2
 80100e6:	3401      	adds	r4, #1
 80100e8:	9304      	str	r3, [sp, #16]
 80100ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ee:	4829      	ldr	r0, [pc, #164]	@ (8010194 <_vfiprintf_r+0x220>)
 80100f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80100f4:	2206      	movs	r2, #6
 80100f6:	f7f0 f90b 	bl	8000310 <memchr>
 80100fa:	2800      	cmp	r0, #0
 80100fc:	d03f      	beq.n	801017e <_vfiprintf_r+0x20a>
 80100fe:	4b26      	ldr	r3, [pc, #152]	@ (8010198 <_vfiprintf_r+0x224>)
 8010100:	bb1b      	cbnz	r3, 801014a <_vfiprintf_r+0x1d6>
 8010102:	9b03      	ldr	r3, [sp, #12]
 8010104:	3307      	adds	r3, #7
 8010106:	f023 0307 	bic.w	r3, r3, #7
 801010a:	3308      	adds	r3, #8
 801010c:	9303      	str	r3, [sp, #12]
 801010e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010110:	443b      	add	r3, r7
 8010112:	9309      	str	r3, [sp, #36]	@ 0x24
 8010114:	e76a      	b.n	800ffec <_vfiprintf_r+0x78>
 8010116:	fb0c 3202 	mla	r2, ip, r2, r3
 801011a:	460c      	mov	r4, r1
 801011c:	2001      	movs	r0, #1
 801011e:	e7a8      	b.n	8010072 <_vfiprintf_r+0xfe>
 8010120:	2300      	movs	r3, #0
 8010122:	3401      	adds	r4, #1
 8010124:	9305      	str	r3, [sp, #20]
 8010126:	4619      	mov	r1, r3
 8010128:	f04f 0c0a 	mov.w	ip, #10
 801012c:	4620      	mov	r0, r4
 801012e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010132:	3a30      	subs	r2, #48	@ 0x30
 8010134:	2a09      	cmp	r2, #9
 8010136:	d903      	bls.n	8010140 <_vfiprintf_r+0x1cc>
 8010138:	2b00      	cmp	r3, #0
 801013a:	d0c6      	beq.n	80100ca <_vfiprintf_r+0x156>
 801013c:	9105      	str	r1, [sp, #20]
 801013e:	e7c4      	b.n	80100ca <_vfiprintf_r+0x156>
 8010140:	fb0c 2101 	mla	r1, ip, r1, r2
 8010144:	4604      	mov	r4, r0
 8010146:	2301      	movs	r3, #1
 8010148:	e7f0      	b.n	801012c <_vfiprintf_r+0x1b8>
 801014a:	ab03      	add	r3, sp, #12
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	462a      	mov	r2, r5
 8010150:	4b12      	ldr	r3, [pc, #72]	@ (801019c <_vfiprintf_r+0x228>)
 8010152:	a904      	add	r1, sp, #16
 8010154:	4630      	mov	r0, r6
 8010156:	f7fc fc47 	bl	800c9e8 <_printf_float>
 801015a:	4607      	mov	r7, r0
 801015c:	1c78      	adds	r0, r7, #1
 801015e:	d1d6      	bne.n	801010e <_vfiprintf_r+0x19a>
 8010160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010162:	07d9      	lsls	r1, r3, #31
 8010164:	d405      	bmi.n	8010172 <_vfiprintf_r+0x1fe>
 8010166:	89ab      	ldrh	r3, [r5, #12]
 8010168:	059a      	lsls	r2, r3, #22
 801016a:	d402      	bmi.n	8010172 <_vfiprintf_r+0x1fe>
 801016c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801016e:	f7fd fc5b 	bl	800da28 <__retarget_lock_release_recursive>
 8010172:	89ab      	ldrh	r3, [r5, #12]
 8010174:	065b      	lsls	r3, r3, #25
 8010176:	f53f af1f 	bmi.w	800ffb8 <_vfiprintf_r+0x44>
 801017a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801017c:	e71e      	b.n	800ffbc <_vfiprintf_r+0x48>
 801017e:	ab03      	add	r3, sp, #12
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	462a      	mov	r2, r5
 8010184:	4b05      	ldr	r3, [pc, #20]	@ (801019c <_vfiprintf_r+0x228>)
 8010186:	a904      	add	r1, sp, #16
 8010188:	4630      	mov	r0, r6
 801018a:	f7fc feb5 	bl	800cef8 <_printf_i>
 801018e:	e7e4      	b.n	801015a <_vfiprintf_r+0x1e6>
 8010190:	080110e9 	.word	0x080110e9
 8010194:	080110f3 	.word	0x080110f3
 8010198:	0800c9e9 	.word	0x0800c9e9
 801019c:	0800ff4f 	.word	0x0800ff4f
 80101a0:	080110ef 	.word	0x080110ef

080101a4 <__sflush_r>:
 80101a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ac:	0716      	lsls	r6, r2, #28
 80101ae:	4605      	mov	r5, r0
 80101b0:	460c      	mov	r4, r1
 80101b2:	d454      	bmi.n	801025e <__sflush_r+0xba>
 80101b4:	684b      	ldr	r3, [r1, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	dc02      	bgt.n	80101c0 <__sflush_r+0x1c>
 80101ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80101bc:	2b00      	cmp	r3, #0
 80101be:	dd48      	ble.n	8010252 <__sflush_r+0xae>
 80101c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101c2:	2e00      	cmp	r6, #0
 80101c4:	d045      	beq.n	8010252 <__sflush_r+0xae>
 80101c6:	2300      	movs	r3, #0
 80101c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80101cc:	682f      	ldr	r7, [r5, #0]
 80101ce:	6a21      	ldr	r1, [r4, #32]
 80101d0:	602b      	str	r3, [r5, #0]
 80101d2:	d030      	beq.n	8010236 <__sflush_r+0x92>
 80101d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80101d6:	89a3      	ldrh	r3, [r4, #12]
 80101d8:	0759      	lsls	r1, r3, #29
 80101da:	d505      	bpl.n	80101e8 <__sflush_r+0x44>
 80101dc:	6863      	ldr	r3, [r4, #4]
 80101de:	1ad2      	subs	r2, r2, r3
 80101e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80101e2:	b10b      	cbz	r3, 80101e8 <__sflush_r+0x44>
 80101e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80101e6:	1ad2      	subs	r2, r2, r3
 80101e8:	2300      	movs	r3, #0
 80101ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101ec:	6a21      	ldr	r1, [r4, #32]
 80101ee:	4628      	mov	r0, r5
 80101f0:	47b0      	blx	r6
 80101f2:	1c43      	adds	r3, r0, #1
 80101f4:	89a3      	ldrh	r3, [r4, #12]
 80101f6:	d106      	bne.n	8010206 <__sflush_r+0x62>
 80101f8:	6829      	ldr	r1, [r5, #0]
 80101fa:	291d      	cmp	r1, #29
 80101fc:	d82b      	bhi.n	8010256 <__sflush_r+0xb2>
 80101fe:	4a2a      	ldr	r2, [pc, #168]	@ (80102a8 <__sflush_r+0x104>)
 8010200:	410a      	asrs	r2, r1
 8010202:	07d6      	lsls	r6, r2, #31
 8010204:	d427      	bmi.n	8010256 <__sflush_r+0xb2>
 8010206:	2200      	movs	r2, #0
 8010208:	6062      	str	r2, [r4, #4]
 801020a:	04d9      	lsls	r1, r3, #19
 801020c:	6922      	ldr	r2, [r4, #16]
 801020e:	6022      	str	r2, [r4, #0]
 8010210:	d504      	bpl.n	801021c <__sflush_r+0x78>
 8010212:	1c42      	adds	r2, r0, #1
 8010214:	d101      	bne.n	801021a <__sflush_r+0x76>
 8010216:	682b      	ldr	r3, [r5, #0]
 8010218:	b903      	cbnz	r3, 801021c <__sflush_r+0x78>
 801021a:	6560      	str	r0, [r4, #84]	@ 0x54
 801021c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801021e:	602f      	str	r7, [r5, #0]
 8010220:	b1b9      	cbz	r1, 8010252 <__sflush_r+0xae>
 8010222:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010226:	4299      	cmp	r1, r3
 8010228:	d002      	beq.n	8010230 <__sflush_r+0x8c>
 801022a:	4628      	mov	r0, r5
 801022c:	f7fe f9f2 	bl	800e614 <_free_r>
 8010230:	2300      	movs	r3, #0
 8010232:	6363      	str	r3, [r4, #52]	@ 0x34
 8010234:	e00d      	b.n	8010252 <__sflush_r+0xae>
 8010236:	2301      	movs	r3, #1
 8010238:	4628      	mov	r0, r5
 801023a:	47b0      	blx	r6
 801023c:	4602      	mov	r2, r0
 801023e:	1c50      	adds	r0, r2, #1
 8010240:	d1c9      	bne.n	80101d6 <__sflush_r+0x32>
 8010242:	682b      	ldr	r3, [r5, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d0c6      	beq.n	80101d6 <__sflush_r+0x32>
 8010248:	2b1d      	cmp	r3, #29
 801024a:	d001      	beq.n	8010250 <__sflush_r+0xac>
 801024c:	2b16      	cmp	r3, #22
 801024e:	d11e      	bne.n	801028e <__sflush_r+0xea>
 8010250:	602f      	str	r7, [r5, #0]
 8010252:	2000      	movs	r0, #0
 8010254:	e022      	b.n	801029c <__sflush_r+0xf8>
 8010256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801025a:	b21b      	sxth	r3, r3
 801025c:	e01b      	b.n	8010296 <__sflush_r+0xf2>
 801025e:	690f      	ldr	r7, [r1, #16]
 8010260:	2f00      	cmp	r7, #0
 8010262:	d0f6      	beq.n	8010252 <__sflush_r+0xae>
 8010264:	0793      	lsls	r3, r2, #30
 8010266:	680e      	ldr	r6, [r1, #0]
 8010268:	bf08      	it	eq
 801026a:	694b      	ldreq	r3, [r1, #20]
 801026c:	600f      	str	r7, [r1, #0]
 801026e:	bf18      	it	ne
 8010270:	2300      	movne	r3, #0
 8010272:	eba6 0807 	sub.w	r8, r6, r7
 8010276:	608b      	str	r3, [r1, #8]
 8010278:	f1b8 0f00 	cmp.w	r8, #0
 801027c:	dde9      	ble.n	8010252 <__sflush_r+0xae>
 801027e:	6a21      	ldr	r1, [r4, #32]
 8010280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010282:	4643      	mov	r3, r8
 8010284:	463a      	mov	r2, r7
 8010286:	4628      	mov	r0, r5
 8010288:	47b0      	blx	r6
 801028a:	2800      	cmp	r0, #0
 801028c:	dc08      	bgt.n	80102a0 <__sflush_r+0xfc>
 801028e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010296:	81a3      	strh	r3, [r4, #12]
 8010298:	f04f 30ff 	mov.w	r0, #4294967295
 801029c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a0:	4407      	add	r7, r0
 80102a2:	eba8 0800 	sub.w	r8, r8, r0
 80102a6:	e7e7      	b.n	8010278 <__sflush_r+0xd4>
 80102a8:	dfbffffe 	.word	0xdfbffffe

080102ac <_fflush_r>:
 80102ac:	b538      	push	{r3, r4, r5, lr}
 80102ae:	690b      	ldr	r3, [r1, #16]
 80102b0:	4605      	mov	r5, r0
 80102b2:	460c      	mov	r4, r1
 80102b4:	b913      	cbnz	r3, 80102bc <_fflush_r+0x10>
 80102b6:	2500      	movs	r5, #0
 80102b8:	4628      	mov	r0, r5
 80102ba:	bd38      	pop	{r3, r4, r5, pc}
 80102bc:	b118      	cbz	r0, 80102c6 <_fflush_r+0x1a>
 80102be:	6a03      	ldr	r3, [r0, #32]
 80102c0:	b90b      	cbnz	r3, 80102c6 <_fflush_r+0x1a>
 80102c2:	f7fd f9d1 	bl	800d668 <__sinit>
 80102c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d0f3      	beq.n	80102b6 <_fflush_r+0xa>
 80102ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80102d0:	07d0      	lsls	r0, r2, #31
 80102d2:	d404      	bmi.n	80102de <_fflush_r+0x32>
 80102d4:	0599      	lsls	r1, r3, #22
 80102d6:	d402      	bmi.n	80102de <_fflush_r+0x32>
 80102d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102da:	f7fd fba4 	bl	800da26 <__retarget_lock_acquire_recursive>
 80102de:	4628      	mov	r0, r5
 80102e0:	4621      	mov	r1, r4
 80102e2:	f7ff ff5f 	bl	80101a4 <__sflush_r>
 80102e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80102e8:	07da      	lsls	r2, r3, #31
 80102ea:	4605      	mov	r5, r0
 80102ec:	d4e4      	bmi.n	80102b8 <_fflush_r+0xc>
 80102ee:	89a3      	ldrh	r3, [r4, #12]
 80102f0:	059b      	lsls	r3, r3, #22
 80102f2:	d4e1      	bmi.n	80102b8 <_fflush_r+0xc>
 80102f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102f6:	f7fd fb97 	bl	800da28 <__retarget_lock_release_recursive>
 80102fa:	e7dd      	b.n	80102b8 <_fflush_r+0xc>

080102fc <__swhatbuf_r>:
 80102fc:	b570      	push	{r4, r5, r6, lr}
 80102fe:	460c      	mov	r4, r1
 8010300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010304:	2900      	cmp	r1, #0
 8010306:	b096      	sub	sp, #88	@ 0x58
 8010308:	4615      	mov	r5, r2
 801030a:	461e      	mov	r6, r3
 801030c:	da0d      	bge.n	801032a <__swhatbuf_r+0x2e>
 801030e:	89a3      	ldrh	r3, [r4, #12]
 8010310:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010314:	f04f 0100 	mov.w	r1, #0
 8010318:	bf14      	ite	ne
 801031a:	2340      	movne	r3, #64	@ 0x40
 801031c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010320:	2000      	movs	r0, #0
 8010322:	6031      	str	r1, [r6, #0]
 8010324:	602b      	str	r3, [r5, #0]
 8010326:	b016      	add	sp, #88	@ 0x58
 8010328:	bd70      	pop	{r4, r5, r6, pc}
 801032a:	466a      	mov	r2, sp
 801032c:	f000 f862 	bl	80103f4 <_fstat_r>
 8010330:	2800      	cmp	r0, #0
 8010332:	dbec      	blt.n	801030e <__swhatbuf_r+0x12>
 8010334:	9901      	ldr	r1, [sp, #4]
 8010336:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801033a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801033e:	4259      	negs	r1, r3
 8010340:	4159      	adcs	r1, r3
 8010342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010346:	e7eb      	b.n	8010320 <__swhatbuf_r+0x24>

08010348 <__smakebuf_r>:
 8010348:	898b      	ldrh	r3, [r1, #12]
 801034a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801034c:	079d      	lsls	r5, r3, #30
 801034e:	4606      	mov	r6, r0
 8010350:	460c      	mov	r4, r1
 8010352:	d507      	bpl.n	8010364 <__smakebuf_r+0x1c>
 8010354:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010358:	6023      	str	r3, [r4, #0]
 801035a:	6123      	str	r3, [r4, #16]
 801035c:	2301      	movs	r3, #1
 801035e:	6163      	str	r3, [r4, #20]
 8010360:	b003      	add	sp, #12
 8010362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010364:	ab01      	add	r3, sp, #4
 8010366:	466a      	mov	r2, sp
 8010368:	f7ff ffc8 	bl	80102fc <__swhatbuf_r>
 801036c:	9f00      	ldr	r7, [sp, #0]
 801036e:	4605      	mov	r5, r0
 8010370:	4639      	mov	r1, r7
 8010372:	4630      	mov	r0, r6
 8010374:	f7fc fa1c 	bl	800c7b0 <_malloc_r>
 8010378:	b948      	cbnz	r0, 801038e <__smakebuf_r+0x46>
 801037a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801037e:	059a      	lsls	r2, r3, #22
 8010380:	d4ee      	bmi.n	8010360 <__smakebuf_r+0x18>
 8010382:	f023 0303 	bic.w	r3, r3, #3
 8010386:	f043 0302 	orr.w	r3, r3, #2
 801038a:	81a3      	strh	r3, [r4, #12]
 801038c:	e7e2      	b.n	8010354 <__smakebuf_r+0xc>
 801038e:	89a3      	ldrh	r3, [r4, #12]
 8010390:	6020      	str	r0, [r4, #0]
 8010392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010396:	81a3      	strh	r3, [r4, #12]
 8010398:	9b01      	ldr	r3, [sp, #4]
 801039a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801039e:	b15b      	cbz	r3, 80103b8 <__smakebuf_r+0x70>
 80103a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103a4:	4630      	mov	r0, r6
 80103a6:	f000 f837 	bl	8010418 <_isatty_r>
 80103aa:	b128      	cbz	r0, 80103b8 <__smakebuf_r+0x70>
 80103ac:	89a3      	ldrh	r3, [r4, #12]
 80103ae:	f023 0303 	bic.w	r3, r3, #3
 80103b2:	f043 0301 	orr.w	r3, r3, #1
 80103b6:	81a3      	strh	r3, [r4, #12]
 80103b8:	89a3      	ldrh	r3, [r4, #12]
 80103ba:	431d      	orrs	r5, r3
 80103bc:	81a5      	strh	r5, [r4, #12]
 80103be:	e7cf      	b.n	8010360 <__smakebuf_r+0x18>

080103c0 <memmove>:
 80103c0:	4288      	cmp	r0, r1
 80103c2:	b510      	push	{r4, lr}
 80103c4:	eb01 0402 	add.w	r4, r1, r2
 80103c8:	d902      	bls.n	80103d0 <memmove+0x10>
 80103ca:	4284      	cmp	r4, r0
 80103cc:	4623      	mov	r3, r4
 80103ce:	d807      	bhi.n	80103e0 <memmove+0x20>
 80103d0:	1e43      	subs	r3, r0, #1
 80103d2:	42a1      	cmp	r1, r4
 80103d4:	d008      	beq.n	80103e8 <memmove+0x28>
 80103d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103de:	e7f8      	b.n	80103d2 <memmove+0x12>
 80103e0:	4402      	add	r2, r0
 80103e2:	4601      	mov	r1, r0
 80103e4:	428a      	cmp	r2, r1
 80103e6:	d100      	bne.n	80103ea <memmove+0x2a>
 80103e8:	bd10      	pop	{r4, pc}
 80103ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103f2:	e7f7      	b.n	80103e4 <memmove+0x24>

080103f4 <_fstat_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4d07      	ldr	r5, [pc, #28]	@ (8010414 <_fstat_r+0x20>)
 80103f8:	2300      	movs	r3, #0
 80103fa:	4604      	mov	r4, r0
 80103fc:	4608      	mov	r0, r1
 80103fe:	4611      	mov	r1, r2
 8010400:	602b      	str	r3, [r5, #0]
 8010402:	f7f1 fe67 	bl	80020d4 <_fstat>
 8010406:	1c43      	adds	r3, r0, #1
 8010408:	d102      	bne.n	8010410 <_fstat_r+0x1c>
 801040a:	682b      	ldr	r3, [r5, #0]
 801040c:	b103      	cbz	r3, 8010410 <_fstat_r+0x1c>
 801040e:	6023      	str	r3, [r4, #0]
 8010410:	bd38      	pop	{r3, r4, r5, pc}
 8010412:	bf00      	nop
 8010414:	2400095c 	.word	0x2400095c

08010418 <_isatty_r>:
 8010418:	b538      	push	{r3, r4, r5, lr}
 801041a:	4d06      	ldr	r5, [pc, #24]	@ (8010434 <_isatty_r+0x1c>)
 801041c:	2300      	movs	r3, #0
 801041e:	4604      	mov	r4, r0
 8010420:	4608      	mov	r0, r1
 8010422:	602b      	str	r3, [r5, #0]
 8010424:	f7f1 fe66 	bl	80020f4 <_isatty>
 8010428:	1c43      	adds	r3, r0, #1
 801042a:	d102      	bne.n	8010432 <_isatty_r+0x1a>
 801042c:	682b      	ldr	r3, [r5, #0]
 801042e:	b103      	cbz	r3, 8010432 <_isatty_r+0x1a>
 8010430:	6023      	str	r3, [r4, #0]
 8010432:	bd38      	pop	{r3, r4, r5, pc}
 8010434:	2400095c 	.word	0x2400095c

08010438 <nan>:
 8010438:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010440 <nan+0x8>
 801043c:	4770      	bx	lr
 801043e:	bf00      	nop
 8010440:	00000000 	.word	0x00000000
 8010444:	7ff80000 	.word	0x7ff80000

08010448 <__assert_func>:
 8010448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801044a:	4614      	mov	r4, r2
 801044c:	461a      	mov	r2, r3
 801044e:	4b09      	ldr	r3, [pc, #36]	@ (8010474 <__assert_func+0x2c>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	4605      	mov	r5, r0
 8010454:	68d8      	ldr	r0, [r3, #12]
 8010456:	b954      	cbnz	r4, 801046e <__assert_func+0x26>
 8010458:	4b07      	ldr	r3, [pc, #28]	@ (8010478 <__assert_func+0x30>)
 801045a:	461c      	mov	r4, r3
 801045c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010460:	9100      	str	r1, [sp, #0]
 8010462:	462b      	mov	r3, r5
 8010464:	4905      	ldr	r1, [pc, #20]	@ (801047c <__assert_func+0x34>)
 8010466:	f000 fba7 	bl	8010bb8 <fiprintf>
 801046a:	f000 fbb7 	bl	8010bdc <abort>
 801046e:	4b04      	ldr	r3, [pc, #16]	@ (8010480 <__assert_func+0x38>)
 8010470:	e7f4      	b.n	801045c <__assert_func+0x14>
 8010472:	bf00      	nop
 8010474:	2400001c 	.word	0x2400001c
 8010478:	0801113d 	.word	0x0801113d
 801047c:	0801110f 	.word	0x0801110f
 8010480:	08011102 	.word	0x08011102

08010484 <_calloc_r>:
 8010484:	b570      	push	{r4, r5, r6, lr}
 8010486:	fba1 5402 	umull	r5, r4, r1, r2
 801048a:	b93c      	cbnz	r4, 801049c <_calloc_r+0x18>
 801048c:	4629      	mov	r1, r5
 801048e:	f7fc f98f 	bl	800c7b0 <_malloc_r>
 8010492:	4606      	mov	r6, r0
 8010494:	b928      	cbnz	r0, 80104a2 <_calloc_r+0x1e>
 8010496:	2600      	movs	r6, #0
 8010498:	4630      	mov	r0, r6
 801049a:	bd70      	pop	{r4, r5, r6, pc}
 801049c:	220c      	movs	r2, #12
 801049e:	6002      	str	r2, [r0, #0]
 80104a0:	e7f9      	b.n	8010496 <_calloc_r+0x12>
 80104a2:	462a      	mov	r2, r5
 80104a4:	4621      	mov	r1, r4
 80104a6:	f7fd fa1f 	bl	800d8e8 <memset>
 80104aa:	e7f5      	b.n	8010498 <_calloc_r+0x14>

080104ac <rshift>:
 80104ac:	6903      	ldr	r3, [r0, #16]
 80104ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80104b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80104ba:	f100 0414 	add.w	r4, r0, #20
 80104be:	dd45      	ble.n	801054c <rshift+0xa0>
 80104c0:	f011 011f 	ands.w	r1, r1, #31
 80104c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80104c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80104cc:	d10c      	bne.n	80104e8 <rshift+0x3c>
 80104ce:	f100 0710 	add.w	r7, r0, #16
 80104d2:	4629      	mov	r1, r5
 80104d4:	42b1      	cmp	r1, r6
 80104d6:	d334      	bcc.n	8010542 <rshift+0x96>
 80104d8:	1a9b      	subs	r3, r3, r2
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	1eea      	subs	r2, r5, #3
 80104de:	4296      	cmp	r6, r2
 80104e0:	bf38      	it	cc
 80104e2:	2300      	movcc	r3, #0
 80104e4:	4423      	add	r3, r4
 80104e6:	e015      	b.n	8010514 <rshift+0x68>
 80104e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80104ec:	f1c1 0820 	rsb	r8, r1, #32
 80104f0:	40cf      	lsrs	r7, r1
 80104f2:	f105 0e04 	add.w	lr, r5, #4
 80104f6:	46a1      	mov	r9, r4
 80104f8:	4576      	cmp	r6, lr
 80104fa:	46f4      	mov	ip, lr
 80104fc:	d815      	bhi.n	801052a <rshift+0x7e>
 80104fe:	1a9a      	subs	r2, r3, r2
 8010500:	0092      	lsls	r2, r2, #2
 8010502:	3a04      	subs	r2, #4
 8010504:	3501      	adds	r5, #1
 8010506:	42ae      	cmp	r6, r5
 8010508:	bf38      	it	cc
 801050a:	2200      	movcc	r2, #0
 801050c:	18a3      	adds	r3, r4, r2
 801050e:	50a7      	str	r7, [r4, r2]
 8010510:	b107      	cbz	r7, 8010514 <rshift+0x68>
 8010512:	3304      	adds	r3, #4
 8010514:	1b1a      	subs	r2, r3, r4
 8010516:	42a3      	cmp	r3, r4
 8010518:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801051c:	bf08      	it	eq
 801051e:	2300      	moveq	r3, #0
 8010520:	6102      	str	r2, [r0, #16]
 8010522:	bf08      	it	eq
 8010524:	6143      	streq	r3, [r0, #20]
 8010526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801052a:	f8dc c000 	ldr.w	ip, [ip]
 801052e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010532:	ea4c 0707 	orr.w	r7, ip, r7
 8010536:	f849 7b04 	str.w	r7, [r9], #4
 801053a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801053e:	40cf      	lsrs	r7, r1
 8010540:	e7da      	b.n	80104f8 <rshift+0x4c>
 8010542:	f851 cb04 	ldr.w	ip, [r1], #4
 8010546:	f847 cf04 	str.w	ip, [r7, #4]!
 801054a:	e7c3      	b.n	80104d4 <rshift+0x28>
 801054c:	4623      	mov	r3, r4
 801054e:	e7e1      	b.n	8010514 <rshift+0x68>

08010550 <__hexdig_fun>:
 8010550:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010554:	2b09      	cmp	r3, #9
 8010556:	d802      	bhi.n	801055e <__hexdig_fun+0xe>
 8010558:	3820      	subs	r0, #32
 801055a:	b2c0      	uxtb	r0, r0
 801055c:	4770      	bx	lr
 801055e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010562:	2b05      	cmp	r3, #5
 8010564:	d801      	bhi.n	801056a <__hexdig_fun+0x1a>
 8010566:	3847      	subs	r0, #71	@ 0x47
 8010568:	e7f7      	b.n	801055a <__hexdig_fun+0xa>
 801056a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801056e:	2b05      	cmp	r3, #5
 8010570:	d801      	bhi.n	8010576 <__hexdig_fun+0x26>
 8010572:	3827      	subs	r0, #39	@ 0x27
 8010574:	e7f1      	b.n	801055a <__hexdig_fun+0xa>
 8010576:	2000      	movs	r0, #0
 8010578:	4770      	bx	lr
	...

0801057c <__gethex>:
 801057c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010580:	b085      	sub	sp, #20
 8010582:	468a      	mov	sl, r1
 8010584:	9302      	str	r3, [sp, #8]
 8010586:	680b      	ldr	r3, [r1, #0]
 8010588:	9001      	str	r0, [sp, #4]
 801058a:	4690      	mov	r8, r2
 801058c:	1c9c      	adds	r4, r3, #2
 801058e:	46a1      	mov	r9, r4
 8010590:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010594:	2830      	cmp	r0, #48	@ 0x30
 8010596:	d0fa      	beq.n	801058e <__gethex+0x12>
 8010598:	eba9 0303 	sub.w	r3, r9, r3
 801059c:	f1a3 0b02 	sub.w	fp, r3, #2
 80105a0:	f7ff ffd6 	bl	8010550 <__hexdig_fun>
 80105a4:	4605      	mov	r5, r0
 80105a6:	2800      	cmp	r0, #0
 80105a8:	d168      	bne.n	801067c <__gethex+0x100>
 80105aa:	49a0      	ldr	r1, [pc, #640]	@ (801082c <__gethex+0x2b0>)
 80105ac:	2201      	movs	r2, #1
 80105ae:	4648      	mov	r0, r9
 80105b0:	f7fd f9a2 	bl	800d8f8 <strncmp>
 80105b4:	4607      	mov	r7, r0
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d167      	bne.n	801068a <__gethex+0x10e>
 80105ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80105be:	4626      	mov	r6, r4
 80105c0:	f7ff ffc6 	bl	8010550 <__hexdig_fun>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d062      	beq.n	801068e <__gethex+0x112>
 80105c8:	4623      	mov	r3, r4
 80105ca:	7818      	ldrb	r0, [r3, #0]
 80105cc:	2830      	cmp	r0, #48	@ 0x30
 80105ce:	4699      	mov	r9, r3
 80105d0:	f103 0301 	add.w	r3, r3, #1
 80105d4:	d0f9      	beq.n	80105ca <__gethex+0x4e>
 80105d6:	f7ff ffbb 	bl	8010550 <__hexdig_fun>
 80105da:	fab0 f580 	clz	r5, r0
 80105de:	096d      	lsrs	r5, r5, #5
 80105e0:	f04f 0b01 	mov.w	fp, #1
 80105e4:	464a      	mov	r2, r9
 80105e6:	4616      	mov	r6, r2
 80105e8:	3201      	adds	r2, #1
 80105ea:	7830      	ldrb	r0, [r6, #0]
 80105ec:	f7ff ffb0 	bl	8010550 <__hexdig_fun>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d1f8      	bne.n	80105e6 <__gethex+0x6a>
 80105f4:	498d      	ldr	r1, [pc, #564]	@ (801082c <__gethex+0x2b0>)
 80105f6:	2201      	movs	r2, #1
 80105f8:	4630      	mov	r0, r6
 80105fa:	f7fd f97d 	bl	800d8f8 <strncmp>
 80105fe:	2800      	cmp	r0, #0
 8010600:	d13f      	bne.n	8010682 <__gethex+0x106>
 8010602:	b944      	cbnz	r4, 8010616 <__gethex+0x9a>
 8010604:	1c74      	adds	r4, r6, #1
 8010606:	4622      	mov	r2, r4
 8010608:	4616      	mov	r6, r2
 801060a:	3201      	adds	r2, #1
 801060c:	7830      	ldrb	r0, [r6, #0]
 801060e:	f7ff ff9f 	bl	8010550 <__hexdig_fun>
 8010612:	2800      	cmp	r0, #0
 8010614:	d1f8      	bne.n	8010608 <__gethex+0x8c>
 8010616:	1ba4      	subs	r4, r4, r6
 8010618:	00a7      	lsls	r7, r4, #2
 801061a:	7833      	ldrb	r3, [r6, #0]
 801061c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010620:	2b50      	cmp	r3, #80	@ 0x50
 8010622:	d13e      	bne.n	80106a2 <__gethex+0x126>
 8010624:	7873      	ldrb	r3, [r6, #1]
 8010626:	2b2b      	cmp	r3, #43	@ 0x2b
 8010628:	d033      	beq.n	8010692 <__gethex+0x116>
 801062a:	2b2d      	cmp	r3, #45	@ 0x2d
 801062c:	d034      	beq.n	8010698 <__gethex+0x11c>
 801062e:	1c71      	adds	r1, r6, #1
 8010630:	2400      	movs	r4, #0
 8010632:	7808      	ldrb	r0, [r1, #0]
 8010634:	f7ff ff8c 	bl	8010550 <__hexdig_fun>
 8010638:	1e43      	subs	r3, r0, #1
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b18      	cmp	r3, #24
 801063e:	d830      	bhi.n	80106a2 <__gethex+0x126>
 8010640:	f1a0 0210 	sub.w	r2, r0, #16
 8010644:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010648:	f7ff ff82 	bl	8010550 <__hexdig_fun>
 801064c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010650:	fa5f fc8c 	uxtb.w	ip, ip
 8010654:	f1bc 0f18 	cmp.w	ip, #24
 8010658:	f04f 030a 	mov.w	r3, #10
 801065c:	d91e      	bls.n	801069c <__gethex+0x120>
 801065e:	b104      	cbz	r4, 8010662 <__gethex+0xe6>
 8010660:	4252      	negs	r2, r2
 8010662:	4417      	add	r7, r2
 8010664:	f8ca 1000 	str.w	r1, [sl]
 8010668:	b1ed      	cbz	r5, 80106a6 <__gethex+0x12a>
 801066a:	f1bb 0f00 	cmp.w	fp, #0
 801066e:	bf0c      	ite	eq
 8010670:	2506      	moveq	r5, #6
 8010672:	2500      	movne	r5, #0
 8010674:	4628      	mov	r0, r5
 8010676:	b005      	add	sp, #20
 8010678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801067c:	2500      	movs	r5, #0
 801067e:	462c      	mov	r4, r5
 8010680:	e7b0      	b.n	80105e4 <__gethex+0x68>
 8010682:	2c00      	cmp	r4, #0
 8010684:	d1c7      	bne.n	8010616 <__gethex+0x9a>
 8010686:	4627      	mov	r7, r4
 8010688:	e7c7      	b.n	801061a <__gethex+0x9e>
 801068a:	464e      	mov	r6, r9
 801068c:	462f      	mov	r7, r5
 801068e:	2501      	movs	r5, #1
 8010690:	e7c3      	b.n	801061a <__gethex+0x9e>
 8010692:	2400      	movs	r4, #0
 8010694:	1cb1      	adds	r1, r6, #2
 8010696:	e7cc      	b.n	8010632 <__gethex+0xb6>
 8010698:	2401      	movs	r4, #1
 801069a:	e7fb      	b.n	8010694 <__gethex+0x118>
 801069c:	fb03 0002 	mla	r0, r3, r2, r0
 80106a0:	e7ce      	b.n	8010640 <__gethex+0xc4>
 80106a2:	4631      	mov	r1, r6
 80106a4:	e7de      	b.n	8010664 <__gethex+0xe8>
 80106a6:	eba6 0309 	sub.w	r3, r6, r9
 80106aa:	3b01      	subs	r3, #1
 80106ac:	4629      	mov	r1, r5
 80106ae:	2b07      	cmp	r3, #7
 80106b0:	dc0a      	bgt.n	80106c8 <__gethex+0x14c>
 80106b2:	9801      	ldr	r0, [sp, #4]
 80106b4:	f7fd fff8 	bl	800e6a8 <_Balloc>
 80106b8:	4604      	mov	r4, r0
 80106ba:	b940      	cbnz	r0, 80106ce <__gethex+0x152>
 80106bc:	4b5c      	ldr	r3, [pc, #368]	@ (8010830 <__gethex+0x2b4>)
 80106be:	4602      	mov	r2, r0
 80106c0:	21e4      	movs	r1, #228	@ 0xe4
 80106c2:	485c      	ldr	r0, [pc, #368]	@ (8010834 <__gethex+0x2b8>)
 80106c4:	f7ff fec0 	bl	8010448 <__assert_func>
 80106c8:	3101      	adds	r1, #1
 80106ca:	105b      	asrs	r3, r3, #1
 80106cc:	e7ef      	b.n	80106ae <__gethex+0x132>
 80106ce:	f100 0a14 	add.w	sl, r0, #20
 80106d2:	2300      	movs	r3, #0
 80106d4:	4655      	mov	r5, sl
 80106d6:	469b      	mov	fp, r3
 80106d8:	45b1      	cmp	r9, r6
 80106da:	d337      	bcc.n	801074c <__gethex+0x1d0>
 80106dc:	f845 bb04 	str.w	fp, [r5], #4
 80106e0:	eba5 050a 	sub.w	r5, r5, sl
 80106e4:	10ad      	asrs	r5, r5, #2
 80106e6:	6125      	str	r5, [r4, #16]
 80106e8:	4658      	mov	r0, fp
 80106ea:	f7fe f8cf 	bl	800e88c <__hi0bits>
 80106ee:	016d      	lsls	r5, r5, #5
 80106f0:	f8d8 6000 	ldr.w	r6, [r8]
 80106f4:	1a2d      	subs	r5, r5, r0
 80106f6:	42b5      	cmp	r5, r6
 80106f8:	dd54      	ble.n	80107a4 <__gethex+0x228>
 80106fa:	1bad      	subs	r5, r5, r6
 80106fc:	4629      	mov	r1, r5
 80106fe:	4620      	mov	r0, r4
 8010700:	f7fe fc60 	bl	800efc4 <__any_on>
 8010704:	4681      	mov	r9, r0
 8010706:	b178      	cbz	r0, 8010728 <__gethex+0x1ac>
 8010708:	1e6b      	subs	r3, r5, #1
 801070a:	1159      	asrs	r1, r3, #5
 801070c:	f003 021f 	and.w	r2, r3, #31
 8010710:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010714:	f04f 0901 	mov.w	r9, #1
 8010718:	fa09 f202 	lsl.w	r2, r9, r2
 801071c:	420a      	tst	r2, r1
 801071e:	d003      	beq.n	8010728 <__gethex+0x1ac>
 8010720:	454b      	cmp	r3, r9
 8010722:	dc36      	bgt.n	8010792 <__gethex+0x216>
 8010724:	f04f 0902 	mov.w	r9, #2
 8010728:	4629      	mov	r1, r5
 801072a:	4620      	mov	r0, r4
 801072c:	f7ff febe 	bl	80104ac <rshift>
 8010730:	442f      	add	r7, r5
 8010732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010736:	42bb      	cmp	r3, r7
 8010738:	da42      	bge.n	80107c0 <__gethex+0x244>
 801073a:	9801      	ldr	r0, [sp, #4]
 801073c:	4621      	mov	r1, r4
 801073e:	f7fd fff3 	bl	800e728 <_Bfree>
 8010742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010744:	2300      	movs	r3, #0
 8010746:	6013      	str	r3, [r2, #0]
 8010748:	25a3      	movs	r5, #163	@ 0xa3
 801074a:	e793      	b.n	8010674 <__gethex+0xf8>
 801074c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010750:	2a2e      	cmp	r2, #46	@ 0x2e
 8010752:	d012      	beq.n	801077a <__gethex+0x1fe>
 8010754:	2b20      	cmp	r3, #32
 8010756:	d104      	bne.n	8010762 <__gethex+0x1e6>
 8010758:	f845 bb04 	str.w	fp, [r5], #4
 801075c:	f04f 0b00 	mov.w	fp, #0
 8010760:	465b      	mov	r3, fp
 8010762:	7830      	ldrb	r0, [r6, #0]
 8010764:	9303      	str	r3, [sp, #12]
 8010766:	f7ff fef3 	bl	8010550 <__hexdig_fun>
 801076a:	9b03      	ldr	r3, [sp, #12]
 801076c:	f000 000f 	and.w	r0, r0, #15
 8010770:	4098      	lsls	r0, r3
 8010772:	ea4b 0b00 	orr.w	fp, fp, r0
 8010776:	3304      	adds	r3, #4
 8010778:	e7ae      	b.n	80106d8 <__gethex+0x15c>
 801077a:	45b1      	cmp	r9, r6
 801077c:	d8ea      	bhi.n	8010754 <__gethex+0x1d8>
 801077e:	492b      	ldr	r1, [pc, #172]	@ (801082c <__gethex+0x2b0>)
 8010780:	9303      	str	r3, [sp, #12]
 8010782:	2201      	movs	r2, #1
 8010784:	4630      	mov	r0, r6
 8010786:	f7fd f8b7 	bl	800d8f8 <strncmp>
 801078a:	9b03      	ldr	r3, [sp, #12]
 801078c:	2800      	cmp	r0, #0
 801078e:	d1e1      	bne.n	8010754 <__gethex+0x1d8>
 8010790:	e7a2      	b.n	80106d8 <__gethex+0x15c>
 8010792:	1ea9      	subs	r1, r5, #2
 8010794:	4620      	mov	r0, r4
 8010796:	f7fe fc15 	bl	800efc4 <__any_on>
 801079a:	2800      	cmp	r0, #0
 801079c:	d0c2      	beq.n	8010724 <__gethex+0x1a8>
 801079e:	f04f 0903 	mov.w	r9, #3
 80107a2:	e7c1      	b.n	8010728 <__gethex+0x1ac>
 80107a4:	da09      	bge.n	80107ba <__gethex+0x23e>
 80107a6:	1b75      	subs	r5, r6, r5
 80107a8:	4621      	mov	r1, r4
 80107aa:	9801      	ldr	r0, [sp, #4]
 80107ac:	462a      	mov	r2, r5
 80107ae:	f7fe f9d3 	bl	800eb58 <__lshift>
 80107b2:	1b7f      	subs	r7, r7, r5
 80107b4:	4604      	mov	r4, r0
 80107b6:	f100 0a14 	add.w	sl, r0, #20
 80107ba:	f04f 0900 	mov.w	r9, #0
 80107be:	e7b8      	b.n	8010732 <__gethex+0x1b6>
 80107c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80107c4:	42bd      	cmp	r5, r7
 80107c6:	dd6f      	ble.n	80108a8 <__gethex+0x32c>
 80107c8:	1bed      	subs	r5, r5, r7
 80107ca:	42ae      	cmp	r6, r5
 80107cc:	dc34      	bgt.n	8010838 <__gethex+0x2bc>
 80107ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107d2:	2b02      	cmp	r3, #2
 80107d4:	d022      	beq.n	801081c <__gethex+0x2a0>
 80107d6:	2b03      	cmp	r3, #3
 80107d8:	d024      	beq.n	8010824 <__gethex+0x2a8>
 80107da:	2b01      	cmp	r3, #1
 80107dc:	d115      	bne.n	801080a <__gethex+0x28e>
 80107de:	42ae      	cmp	r6, r5
 80107e0:	d113      	bne.n	801080a <__gethex+0x28e>
 80107e2:	2e01      	cmp	r6, #1
 80107e4:	d10b      	bne.n	80107fe <__gethex+0x282>
 80107e6:	9a02      	ldr	r2, [sp, #8]
 80107e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80107ec:	6013      	str	r3, [r2, #0]
 80107ee:	2301      	movs	r3, #1
 80107f0:	6123      	str	r3, [r4, #16]
 80107f2:	f8ca 3000 	str.w	r3, [sl]
 80107f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107f8:	2562      	movs	r5, #98	@ 0x62
 80107fa:	601c      	str	r4, [r3, #0]
 80107fc:	e73a      	b.n	8010674 <__gethex+0xf8>
 80107fe:	1e71      	subs	r1, r6, #1
 8010800:	4620      	mov	r0, r4
 8010802:	f7fe fbdf 	bl	800efc4 <__any_on>
 8010806:	2800      	cmp	r0, #0
 8010808:	d1ed      	bne.n	80107e6 <__gethex+0x26a>
 801080a:	9801      	ldr	r0, [sp, #4]
 801080c:	4621      	mov	r1, r4
 801080e:	f7fd ff8b 	bl	800e728 <_Bfree>
 8010812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010814:	2300      	movs	r3, #0
 8010816:	6013      	str	r3, [r2, #0]
 8010818:	2550      	movs	r5, #80	@ 0x50
 801081a:	e72b      	b.n	8010674 <__gethex+0xf8>
 801081c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801081e:	2b00      	cmp	r3, #0
 8010820:	d1f3      	bne.n	801080a <__gethex+0x28e>
 8010822:	e7e0      	b.n	80107e6 <__gethex+0x26a>
 8010824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010826:	2b00      	cmp	r3, #0
 8010828:	d1dd      	bne.n	80107e6 <__gethex+0x26a>
 801082a:	e7ee      	b.n	801080a <__gethex+0x28e>
 801082c:	08010f90 	.word	0x08010f90
 8010830:	08010e25 	.word	0x08010e25
 8010834:	0801113e 	.word	0x0801113e
 8010838:	1e6f      	subs	r7, r5, #1
 801083a:	f1b9 0f00 	cmp.w	r9, #0
 801083e:	d130      	bne.n	80108a2 <__gethex+0x326>
 8010840:	b127      	cbz	r7, 801084c <__gethex+0x2d0>
 8010842:	4639      	mov	r1, r7
 8010844:	4620      	mov	r0, r4
 8010846:	f7fe fbbd 	bl	800efc4 <__any_on>
 801084a:	4681      	mov	r9, r0
 801084c:	117a      	asrs	r2, r7, #5
 801084e:	2301      	movs	r3, #1
 8010850:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010854:	f007 071f 	and.w	r7, r7, #31
 8010858:	40bb      	lsls	r3, r7
 801085a:	4213      	tst	r3, r2
 801085c:	4629      	mov	r1, r5
 801085e:	4620      	mov	r0, r4
 8010860:	bf18      	it	ne
 8010862:	f049 0902 	orrne.w	r9, r9, #2
 8010866:	f7ff fe21 	bl	80104ac <rshift>
 801086a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801086e:	1b76      	subs	r6, r6, r5
 8010870:	2502      	movs	r5, #2
 8010872:	f1b9 0f00 	cmp.w	r9, #0
 8010876:	d047      	beq.n	8010908 <__gethex+0x38c>
 8010878:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801087c:	2b02      	cmp	r3, #2
 801087e:	d015      	beq.n	80108ac <__gethex+0x330>
 8010880:	2b03      	cmp	r3, #3
 8010882:	d017      	beq.n	80108b4 <__gethex+0x338>
 8010884:	2b01      	cmp	r3, #1
 8010886:	d109      	bne.n	801089c <__gethex+0x320>
 8010888:	f019 0f02 	tst.w	r9, #2
 801088c:	d006      	beq.n	801089c <__gethex+0x320>
 801088e:	f8da 3000 	ldr.w	r3, [sl]
 8010892:	ea49 0903 	orr.w	r9, r9, r3
 8010896:	f019 0f01 	tst.w	r9, #1
 801089a:	d10e      	bne.n	80108ba <__gethex+0x33e>
 801089c:	f045 0510 	orr.w	r5, r5, #16
 80108a0:	e032      	b.n	8010908 <__gethex+0x38c>
 80108a2:	f04f 0901 	mov.w	r9, #1
 80108a6:	e7d1      	b.n	801084c <__gethex+0x2d0>
 80108a8:	2501      	movs	r5, #1
 80108aa:	e7e2      	b.n	8010872 <__gethex+0x2f6>
 80108ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108ae:	f1c3 0301 	rsb	r3, r3, #1
 80108b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80108b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d0f0      	beq.n	801089c <__gethex+0x320>
 80108ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80108be:	f104 0314 	add.w	r3, r4, #20
 80108c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80108c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80108ca:	f04f 0c00 	mov.w	ip, #0
 80108ce:	4618      	mov	r0, r3
 80108d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80108d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80108d8:	d01b      	beq.n	8010912 <__gethex+0x396>
 80108da:	3201      	adds	r2, #1
 80108dc:	6002      	str	r2, [r0, #0]
 80108de:	2d02      	cmp	r5, #2
 80108e0:	f104 0314 	add.w	r3, r4, #20
 80108e4:	d13c      	bne.n	8010960 <__gethex+0x3e4>
 80108e6:	f8d8 2000 	ldr.w	r2, [r8]
 80108ea:	3a01      	subs	r2, #1
 80108ec:	42b2      	cmp	r2, r6
 80108ee:	d109      	bne.n	8010904 <__gethex+0x388>
 80108f0:	1171      	asrs	r1, r6, #5
 80108f2:	2201      	movs	r2, #1
 80108f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80108f8:	f006 061f 	and.w	r6, r6, #31
 80108fc:	fa02 f606 	lsl.w	r6, r2, r6
 8010900:	421e      	tst	r6, r3
 8010902:	d13a      	bne.n	801097a <__gethex+0x3fe>
 8010904:	f045 0520 	orr.w	r5, r5, #32
 8010908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801090a:	601c      	str	r4, [r3, #0]
 801090c:	9b02      	ldr	r3, [sp, #8]
 801090e:	601f      	str	r7, [r3, #0]
 8010910:	e6b0      	b.n	8010674 <__gethex+0xf8>
 8010912:	4299      	cmp	r1, r3
 8010914:	f843 cc04 	str.w	ip, [r3, #-4]
 8010918:	d8d9      	bhi.n	80108ce <__gethex+0x352>
 801091a:	68a3      	ldr	r3, [r4, #8]
 801091c:	459b      	cmp	fp, r3
 801091e:	db17      	blt.n	8010950 <__gethex+0x3d4>
 8010920:	6861      	ldr	r1, [r4, #4]
 8010922:	9801      	ldr	r0, [sp, #4]
 8010924:	3101      	adds	r1, #1
 8010926:	f7fd febf 	bl	800e6a8 <_Balloc>
 801092a:	4681      	mov	r9, r0
 801092c:	b918      	cbnz	r0, 8010936 <__gethex+0x3ba>
 801092e:	4b1a      	ldr	r3, [pc, #104]	@ (8010998 <__gethex+0x41c>)
 8010930:	4602      	mov	r2, r0
 8010932:	2184      	movs	r1, #132	@ 0x84
 8010934:	e6c5      	b.n	80106c2 <__gethex+0x146>
 8010936:	6922      	ldr	r2, [r4, #16]
 8010938:	3202      	adds	r2, #2
 801093a:	f104 010c 	add.w	r1, r4, #12
 801093e:	0092      	lsls	r2, r2, #2
 8010940:	300c      	adds	r0, #12
 8010942:	f7fd f872 	bl	800da2a <memcpy>
 8010946:	4621      	mov	r1, r4
 8010948:	9801      	ldr	r0, [sp, #4]
 801094a:	f7fd feed 	bl	800e728 <_Bfree>
 801094e:	464c      	mov	r4, r9
 8010950:	6923      	ldr	r3, [r4, #16]
 8010952:	1c5a      	adds	r2, r3, #1
 8010954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010958:	6122      	str	r2, [r4, #16]
 801095a:	2201      	movs	r2, #1
 801095c:	615a      	str	r2, [r3, #20]
 801095e:	e7be      	b.n	80108de <__gethex+0x362>
 8010960:	6922      	ldr	r2, [r4, #16]
 8010962:	455a      	cmp	r2, fp
 8010964:	dd0b      	ble.n	801097e <__gethex+0x402>
 8010966:	2101      	movs	r1, #1
 8010968:	4620      	mov	r0, r4
 801096a:	f7ff fd9f 	bl	80104ac <rshift>
 801096e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010972:	3701      	adds	r7, #1
 8010974:	42bb      	cmp	r3, r7
 8010976:	f6ff aee0 	blt.w	801073a <__gethex+0x1be>
 801097a:	2501      	movs	r5, #1
 801097c:	e7c2      	b.n	8010904 <__gethex+0x388>
 801097e:	f016 061f 	ands.w	r6, r6, #31
 8010982:	d0fa      	beq.n	801097a <__gethex+0x3fe>
 8010984:	4453      	add	r3, sl
 8010986:	f1c6 0620 	rsb	r6, r6, #32
 801098a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801098e:	f7fd ff7d 	bl	800e88c <__hi0bits>
 8010992:	42b0      	cmp	r0, r6
 8010994:	dbe7      	blt.n	8010966 <__gethex+0x3ea>
 8010996:	e7f0      	b.n	801097a <__gethex+0x3fe>
 8010998:	08010e25 	.word	0x08010e25

0801099c <L_shift>:
 801099c:	f1c2 0208 	rsb	r2, r2, #8
 80109a0:	0092      	lsls	r2, r2, #2
 80109a2:	b570      	push	{r4, r5, r6, lr}
 80109a4:	f1c2 0620 	rsb	r6, r2, #32
 80109a8:	6843      	ldr	r3, [r0, #4]
 80109aa:	6804      	ldr	r4, [r0, #0]
 80109ac:	fa03 f506 	lsl.w	r5, r3, r6
 80109b0:	432c      	orrs	r4, r5
 80109b2:	40d3      	lsrs	r3, r2
 80109b4:	6004      	str	r4, [r0, #0]
 80109b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80109ba:	4288      	cmp	r0, r1
 80109bc:	d3f4      	bcc.n	80109a8 <L_shift+0xc>
 80109be:	bd70      	pop	{r4, r5, r6, pc}

080109c0 <__match>:
 80109c0:	b530      	push	{r4, r5, lr}
 80109c2:	6803      	ldr	r3, [r0, #0]
 80109c4:	3301      	adds	r3, #1
 80109c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109ca:	b914      	cbnz	r4, 80109d2 <__match+0x12>
 80109cc:	6003      	str	r3, [r0, #0]
 80109ce:	2001      	movs	r0, #1
 80109d0:	bd30      	pop	{r4, r5, pc}
 80109d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80109da:	2d19      	cmp	r5, #25
 80109dc:	bf98      	it	ls
 80109de:	3220      	addls	r2, #32
 80109e0:	42a2      	cmp	r2, r4
 80109e2:	d0f0      	beq.n	80109c6 <__match+0x6>
 80109e4:	2000      	movs	r0, #0
 80109e6:	e7f3      	b.n	80109d0 <__match+0x10>

080109e8 <__hexnan>:
 80109e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ec:	680b      	ldr	r3, [r1, #0]
 80109ee:	6801      	ldr	r1, [r0, #0]
 80109f0:	115e      	asrs	r6, r3, #5
 80109f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80109f6:	f013 031f 	ands.w	r3, r3, #31
 80109fa:	b087      	sub	sp, #28
 80109fc:	bf18      	it	ne
 80109fe:	3604      	addne	r6, #4
 8010a00:	2500      	movs	r5, #0
 8010a02:	1f37      	subs	r7, r6, #4
 8010a04:	4682      	mov	sl, r0
 8010a06:	4690      	mov	r8, r2
 8010a08:	9301      	str	r3, [sp, #4]
 8010a0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010a0e:	46b9      	mov	r9, r7
 8010a10:	463c      	mov	r4, r7
 8010a12:	9502      	str	r5, [sp, #8]
 8010a14:	46ab      	mov	fp, r5
 8010a16:	784a      	ldrb	r2, [r1, #1]
 8010a18:	1c4b      	adds	r3, r1, #1
 8010a1a:	9303      	str	r3, [sp, #12]
 8010a1c:	b342      	cbz	r2, 8010a70 <__hexnan+0x88>
 8010a1e:	4610      	mov	r0, r2
 8010a20:	9105      	str	r1, [sp, #20]
 8010a22:	9204      	str	r2, [sp, #16]
 8010a24:	f7ff fd94 	bl	8010550 <__hexdig_fun>
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	d151      	bne.n	8010ad0 <__hexnan+0xe8>
 8010a2c:	9a04      	ldr	r2, [sp, #16]
 8010a2e:	9905      	ldr	r1, [sp, #20]
 8010a30:	2a20      	cmp	r2, #32
 8010a32:	d818      	bhi.n	8010a66 <__hexnan+0x7e>
 8010a34:	9b02      	ldr	r3, [sp, #8]
 8010a36:	459b      	cmp	fp, r3
 8010a38:	dd13      	ble.n	8010a62 <__hexnan+0x7a>
 8010a3a:	454c      	cmp	r4, r9
 8010a3c:	d206      	bcs.n	8010a4c <__hexnan+0x64>
 8010a3e:	2d07      	cmp	r5, #7
 8010a40:	dc04      	bgt.n	8010a4c <__hexnan+0x64>
 8010a42:	462a      	mov	r2, r5
 8010a44:	4649      	mov	r1, r9
 8010a46:	4620      	mov	r0, r4
 8010a48:	f7ff ffa8 	bl	801099c <L_shift>
 8010a4c:	4544      	cmp	r4, r8
 8010a4e:	d952      	bls.n	8010af6 <__hexnan+0x10e>
 8010a50:	2300      	movs	r3, #0
 8010a52:	f1a4 0904 	sub.w	r9, r4, #4
 8010a56:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a5a:	f8cd b008 	str.w	fp, [sp, #8]
 8010a5e:	464c      	mov	r4, r9
 8010a60:	461d      	mov	r5, r3
 8010a62:	9903      	ldr	r1, [sp, #12]
 8010a64:	e7d7      	b.n	8010a16 <__hexnan+0x2e>
 8010a66:	2a29      	cmp	r2, #41	@ 0x29
 8010a68:	d157      	bne.n	8010b1a <__hexnan+0x132>
 8010a6a:	3102      	adds	r1, #2
 8010a6c:	f8ca 1000 	str.w	r1, [sl]
 8010a70:	f1bb 0f00 	cmp.w	fp, #0
 8010a74:	d051      	beq.n	8010b1a <__hexnan+0x132>
 8010a76:	454c      	cmp	r4, r9
 8010a78:	d206      	bcs.n	8010a88 <__hexnan+0xa0>
 8010a7a:	2d07      	cmp	r5, #7
 8010a7c:	dc04      	bgt.n	8010a88 <__hexnan+0xa0>
 8010a7e:	462a      	mov	r2, r5
 8010a80:	4649      	mov	r1, r9
 8010a82:	4620      	mov	r0, r4
 8010a84:	f7ff ff8a 	bl	801099c <L_shift>
 8010a88:	4544      	cmp	r4, r8
 8010a8a:	d936      	bls.n	8010afa <__hexnan+0x112>
 8010a8c:	f1a8 0204 	sub.w	r2, r8, #4
 8010a90:	4623      	mov	r3, r4
 8010a92:	f853 1b04 	ldr.w	r1, [r3], #4
 8010a96:	f842 1f04 	str.w	r1, [r2, #4]!
 8010a9a:	429f      	cmp	r7, r3
 8010a9c:	d2f9      	bcs.n	8010a92 <__hexnan+0xaa>
 8010a9e:	1b3b      	subs	r3, r7, r4
 8010aa0:	f023 0303 	bic.w	r3, r3, #3
 8010aa4:	3304      	adds	r3, #4
 8010aa6:	3401      	adds	r4, #1
 8010aa8:	3e03      	subs	r6, #3
 8010aaa:	42b4      	cmp	r4, r6
 8010aac:	bf88      	it	hi
 8010aae:	2304      	movhi	r3, #4
 8010ab0:	4443      	add	r3, r8
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f843 2b04 	str.w	r2, [r3], #4
 8010ab8:	429f      	cmp	r7, r3
 8010aba:	d2fb      	bcs.n	8010ab4 <__hexnan+0xcc>
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	b91b      	cbnz	r3, 8010ac8 <__hexnan+0xe0>
 8010ac0:	4547      	cmp	r7, r8
 8010ac2:	d128      	bne.n	8010b16 <__hexnan+0x12e>
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	603b      	str	r3, [r7, #0]
 8010ac8:	2005      	movs	r0, #5
 8010aca:	b007      	add	sp, #28
 8010acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad0:	3501      	adds	r5, #1
 8010ad2:	2d08      	cmp	r5, #8
 8010ad4:	f10b 0b01 	add.w	fp, fp, #1
 8010ad8:	dd06      	ble.n	8010ae8 <__hexnan+0x100>
 8010ada:	4544      	cmp	r4, r8
 8010adc:	d9c1      	bls.n	8010a62 <__hexnan+0x7a>
 8010ade:	2300      	movs	r3, #0
 8010ae0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ae4:	2501      	movs	r5, #1
 8010ae6:	3c04      	subs	r4, #4
 8010ae8:	6822      	ldr	r2, [r4, #0]
 8010aea:	f000 000f 	and.w	r0, r0, #15
 8010aee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010af2:	6020      	str	r0, [r4, #0]
 8010af4:	e7b5      	b.n	8010a62 <__hexnan+0x7a>
 8010af6:	2508      	movs	r5, #8
 8010af8:	e7b3      	b.n	8010a62 <__hexnan+0x7a>
 8010afa:	9b01      	ldr	r3, [sp, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d0dd      	beq.n	8010abc <__hexnan+0xd4>
 8010b00:	f1c3 0320 	rsb	r3, r3, #32
 8010b04:	f04f 32ff 	mov.w	r2, #4294967295
 8010b08:	40da      	lsrs	r2, r3
 8010b0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010b0e:	4013      	ands	r3, r2
 8010b10:	f846 3c04 	str.w	r3, [r6, #-4]
 8010b14:	e7d2      	b.n	8010abc <__hexnan+0xd4>
 8010b16:	3f04      	subs	r7, #4
 8010b18:	e7d0      	b.n	8010abc <__hexnan+0xd4>
 8010b1a:	2004      	movs	r0, #4
 8010b1c:	e7d5      	b.n	8010aca <__hexnan+0xe2>

08010b1e <__ascii_mbtowc>:
 8010b1e:	b082      	sub	sp, #8
 8010b20:	b901      	cbnz	r1, 8010b24 <__ascii_mbtowc+0x6>
 8010b22:	a901      	add	r1, sp, #4
 8010b24:	b142      	cbz	r2, 8010b38 <__ascii_mbtowc+0x1a>
 8010b26:	b14b      	cbz	r3, 8010b3c <__ascii_mbtowc+0x1e>
 8010b28:	7813      	ldrb	r3, [r2, #0]
 8010b2a:	600b      	str	r3, [r1, #0]
 8010b2c:	7812      	ldrb	r2, [r2, #0]
 8010b2e:	1e10      	subs	r0, r2, #0
 8010b30:	bf18      	it	ne
 8010b32:	2001      	movne	r0, #1
 8010b34:	b002      	add	sp, #8
 8010b36:	4770      	bx	lr
 8010b38:	4610      	mov	r0, r2
 8010b3a:	e7fb      	b.n	8010b34 <__ascii_mbtowc+0x16>
 8010b3c:	f06f 0001 	mvn.w	r0, #1
 8010b40:	e7f8      	b.n	8010b34 <__ascii_mbtowc+0x16>

08010b42 <_realloc_r>:
 8010b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b46:	4680      	mov	r8, r0
 8010b48:	4615      	mov	r5, r2
 8010b4a:	460c      	mov	r4, r1
 8010b4c:	b921      	cbnz	r1, 8010b58 <_realloc_r+0x16>
 8010b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b52:	4611      	mov	r1, r2
 8010b54:	f7fb be2c 	b.w	800c7b0 <_malloc_r>
 8010b58:	b92a      	cbnz	r2, 8010b66 <_realloc_r+0x24>
 8010b5a:	f7fd fd5b 	bl	800e614 <_free_r>
 8010b5e:	2400      	movs	r4, #0
 8010b60:	4620      	mov	r0, r4
 8010b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b66:	f000 f840 	bl	8010bea <_malloc_usable_size_r>
 8010b6a:	4285      	cmp	r5, r0
 8010b6c:	4606      	mov	r6, r0
 8010b6e:	d802      	bhi.n	8010b76 <_realloc_r+0x34>
 8010b70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010b74:	d8f4      	bhi.n	8010b60 <_realloc_r+0x1e>
 8010b76:	4629      	mov	r1, r5
 8010b78:	4640      	mov	r0, r8
 8010b7a:	f7fb fe19 	bl	800c7b0 <_malloc_r>
 8010b7e:	4607      	mov	r7, r0
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d0ec      	beq.n	8010b5e <_realloc_r+0x1c>
 8010b84:	42b5      	cmp	r5, r6
 8010b86:	462a      	mov	r2, r5
 8010b88:	4621      	mov	r1, r4
 8010b8a:	bf28      	it	cs
 8010b8c:	4632      	movcs	r2, r6
 8010b8e:	f7fc ff4c 	bl	800da2a <memcpy>
 8010b92:	4621      	mov	r1, r4
 8010b94:	4640      	mov	r0, r8
 8010b96:	f7fd fd3d 	bl	800e614 <_free_r>
 8010b9a:	463c      	mov	r4, r7
 8010b9c:	e7e0      	b.n	8010b60 <_realloc_r+0x1e>

08010b9e <__ascii_wctomb>:
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	4608      	mov	r0, r1
 8010ba2:	b141      	cbz	r1, 8010bb6 <__ascii_wctomb+0x18>
 8010ba4:	2aff      	cmp	r2, #255	@ 0xff
 8010ba6:	d904      	bls.n	8010bb2 <__ascii_wctomb+0x14>
 8010ba8:	228a      	movs	r2, #138	@ 0x8a
 8010baa:	601a      	str	r2, [r3, #0]
 8010bac:	f04f 30ff 	mov.w	r0, #4294967295
 8010bb0:	4770      	bx	lr
 8010bb2:	700a      	strb	r2, [r1, #0]
 8010bb4:	2001      	movs	r0, #1
 8010bb6:	4770      	bx	lr

08010bb8 <fiprintf>:
 8010bb8:	b40e      	push	{r1, r2, r3}
 8010bba:	b503      	push	{r0, r1, lr}
 8010bbc:	4601      	mov	r1, r0
 8010bbe:	ab03      	add	r3, sp, #12
 8010bc0:	4805      	ldr	r0, [pc, #20]	@ (8010bd8 <fiprintf+0x20>)
 8010bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bc6:	6800      	ldr	r0, [r0, #0]
 8010bc8:	9301      	str	r3, [sp, #4]
 8010bca:	f7ff f9d3 	bl	800ff74 <_vfiprintf_r>
 8010bce:	b002      	add	sp, #8
 8010bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bd4:	b003      	add	sp, #12
 8010bd6:	4770      	bx	lr
 8010bd8:	2400001c 	.word	0x2400001c

08010bdc <abort>:
 8010bdc:	b508      	push	{r3, lr}
 8010bde:	2006      	movs	r0, #6
 8010be0:	f000 f834 	bl	8010c4c <raise>
 8010be4:	2001      	movs	r0, #1
 8010be6:	f7f1 fa41 	bl	800206c <_exit>

08010bea <_malloc_usable_size_r>:
 8010bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bee:	1f18      	subs	r0, r3, #4
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	bfbc      	itt	lt
 8010bf4:	580b      	ldrlt	r3, [r1, r0]
 8010bf6:	18c0      	addlt	r0, r0, r3
 8010bf8:	4770      	bx	lr

08010bfa <_raise_r>:
 8010bfa:	291f      	cmp	r1, #31
 8010bfc:	b538      	push	{r3, r4, r5, lr}
 8010bfe:	4605      	mov	r5, r0
 8010c00:	460c      	mov	r4, r1
 8010c02:	d904      	bls.n	8010c0e <_raise_r+0x14>
 8010c04:	2316      	movs	r3, #22
 8010c06:	6003      	str	r3, [r0, #0]
 8010c08:	f04f 30ff 	mov.w	r0, #4294967295
 8010c0c:	bd38      	pop	{r3, r4, r5, pc}
 8010c0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010c10:	b112      	cbz	r2, 8010c18 <_raise_r+0x1e>
 8010c12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c16:	b94b      	cbnz	r3, 8010c2c <_raise_r+0x32>
 8010c18:	4628      	mov	r0, r5
 8010c1a:	f000 f831 	bl	8010c80 <_getpid_r>
 8010c1e:	4622      	mov	r2, r4
 8010c20:	4601      	mov	r1, r0
 8010c22:	4628      	mov	r0, r5
 8010c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c28:	f000 b818 	b.w	8010c5c <_kill_r>
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	d00a      	beq.n	8010c46 <_raise_r+0x4c>
 8010c30:	1c59      	adds	r1, r3, #1
 8010c32:	d103      	bne.n	8010c3c <_raise_r+0x42>
 8010c34:	2316      	movs	r3, #22
 8010c36:	6003      	str	r3, [r0, #0]
 8010c38:	2001      	movs	r0, #1
 8010c3a:	e7e7      	b.n	8010c0c <_raise_r+0x12>
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010c42:	4620      	mov	r0, r4
 8010c44:	4798      	blx	r3
 8010c46:	2000      	movs	r0, #0
 8010c48:	e7e0      	b.n	8010c0c <_raise_r+0x12>
	...

08010c4c <raise>:
 8010c4c:	4b02      	ldr	r3, [pc, #8]	@ (8010c58 <raise+0xc>)
 8010c4e:	4601      	mov	r1, r0
 8010c50:	6818      	ldr	r0, [r3, #0]
 8010c52:	f7ff bfd2 	b.w	8010bfa <_raise_r>
 8010c56:	bf00      	nop
 8010c58:	2400001c 	.word	0x2400001c

08010c5c <_kill_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	4d07      	ldr	r5, [pc, #28]	@ (8010c7c <_kill_r+0x20>)
 8010c60:	2300      	movs	r3, #0
 8010c62:	4604      	mov	r4, r0
 8010c64:	4608      	mov	r0, r1
 8010c66:	4611      	mov	r1, r2
 8010c68:	602b      	str	r3, [r5, #0]
 8010c6a:	f7f1 f9ef 	bl	800204c <_kill>
 8010c6e:	1c43      	adds	r3, r0, #1
 8010c70:	d102      	bne.n	8010c78 <_kill_r+0x1c>
 8010c72:	682b      	ldr	r3, [r5, #0]
 8010c74:	b103      	cbz	r3, 8010c78 <_kill_r+0x1c>
 8010c76:	6023      	str	r3, [r4, #0]
 8010c78:	bd38      	pop	{r3, r4, r5, pc}
 8010c7a:	bf00      	nop
 8010c7c:	2400095c 	.word	0x2400095c

08010c80 <_getpid_r>:
 8010c80:	f7f1 b9dc 	b.w	800203c <_getpid>

08010c84 <_init>:
 8010c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c86:	bf00      	nop
 8010c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c8a:	bc08      	pop	{r3}
 8010c8c:	469e      	mov	lr, r3
 8010c8e:	4770      	bx	lr

08010c90 <_fini>:
 8010c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c92:	bf00      	nop
 8010c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c96:	bc08      	pop	{r3}
 8010c98:	469e      	mov	lr, r3
 8010c9a:	4770      	bx	lr
