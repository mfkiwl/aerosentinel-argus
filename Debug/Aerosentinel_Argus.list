
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b74  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08011e48  08011e48  00012e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012408  08012408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012410  08012410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012414  08012414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e4  24000000  08012418  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006dc  240001e8  080125fc  000141e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240008c4  080125fc  000148c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000141e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bf9b  00000000  00000000  00014212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000463a  00000000  00000000  000401ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002560  00000000  00000000  000447e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001dcb  00000000  00000000  00046d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000a54d  00000000  00000000  00048b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f9aa  00000000  00000000  00053060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b311  00000000  00000000  00082a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001edd1b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b74c  00000000  00000000  001edd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001f94ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011e2c 	.word	0x08011e2c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	08011e2c 	.word	0x08011e2c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <bmi3_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x03.
 */
int8_t bmi3_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b0a7      	sub	sp, #156	@ 0x9c
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	81bb      	strh	r3, [r7, #12]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI3_MAX_LEN];

    /* Variable to define loop */
    uint16_t index = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 fb44 	bl	800113e <null_ptr_check>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    if ((rslt == BMI3_OK) && (data != NULL))
 8000abc:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d145      	bne.n	8000b50 <bmi3_get_regs+0xb8>
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d042      	beq.n	8000b50 <bmi3_get_regs+0xb8>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7a5b      	ldrb	r3, [r3, #9]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d103      	bne.n	8000ada <bmi3_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI3_SPI_RD_MASK);
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ad8:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, len + dev->dummy_byte, dev->intf_ptr);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691c      	ldr	r4, [r3, #16]
 8000ade:	89bb      	ldrh	r3, [r7, #12]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	7ad2      	ldrb	r2, [r2, #11]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f107 0114 	add.w	r1, r7, #20
 8000af0:	7bf8      	ldrb	r0, [r7, #15]
 8000af2:	47a0      	blx	r4
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	6852      	ldr	r2, [r2, #4]
 8000b04:	4611      	mov	r1, r2
 8000b06:	2002      	movs	r0, #2
 8000b08:	4798      	blx	r3

        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d119      	bne.n	8000b48 <bmi3_get_regs+0xb0>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8000b14:	e012      	b.n	8000b3c <bmi3_get_regs+0xa4>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8000b16:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	7ad2      	ldrb	r2, [r2, #11]
 8000b1e:	441a      	add	r2, r3
 8000b20:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	440b      	add	r3, r1
 8000b28:	3298      	adds	r2, #152	@ 0x98
 8000b2a:	443a      	add	r2, r7
 8000b2c:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8000b30:	701a      	strb	r2, [r3, #0]
                index++;
 8000b32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000b36:	3301      	adds	r3, #1
 8000b38:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8000b3c:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8000b40:	89bb      	ldrh	r3, [r7, #12]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3e7      	bcc.n	8000b16 <bmi3_get_regs+0x7e>
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8000b46:	e006      	b.n	8000b56 <bmi3_get_regs+0xbe>
            }
        }
        else
        {
            rslt = BMI3_E_COM_FAIL;
 8000b48:	23fe      	movs	r3, #254	@ 0xfe
 8000b4a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8000b4e:	e002      	b.n	8000b56 <bmi3_get_regs+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000b50:	23ff      	movs	r3, #255	@ 0xff
 8000b52:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8000b56:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	379c      	adds	r7, #156	@ 0x9c
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}

08000b62 <bmi3_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi3 sensor.
 */
int8_t bmi3_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8000b62:	b590      	push	{r4, r7, lr}
 8000b64:	b087      	sub	sp, #28
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	4613      	mov	r3, r2
 8000b72:	81bb      	strh	r3, [r7, #12]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 fae2 	bl	800113e <null_ptr_check>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (data != NULL))
 8000b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d125      	bne.n	8000bd2 <bmi3_set_regs+0x70>
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d022      	beq.n	8000bd2 <bmi3_set_regs+0x70>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7a5b      	ldrb	r3, [r3, #9]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d103      	bne.n	8000b9c <bmi3_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI3_SPI_WR_MASK);
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b9a:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695c      	ldr	r4, [r3, #20]
 8000ba0:	89ba      	ldrh	r2, [r7, #12]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	7bf8      	ldrb	r0, [r7, #15]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	47a0      	blx	r4
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	6852      	ldr	r2, [r2, #4]
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	4798      	blx	r3

        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d004      	beq.n	8000bd6 <bmi3_set_regs+0x74>
        {
            rslt = BMI3_E_COM_FAIL;
 8000bcc:	23fe      	movs	r3, #254	@ 0xfe
 8000bce:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8000bd0:	e001      	b.n	8000bd6 <bmi3_set_regs+0x74>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000bd2:	23ff      	movs	r3, #255	@ 0xff
 8000bd4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd90      	pop	{r4, r7, pc}
	...

08000be4 <bmi3_get_sensor_data>:
/*!
 * @brief This API gets the sensor/feature data for accelerometer, gyroscope,
 * step counter, orientation, i3c sync accel, i3c sync gyro and i3c sync temperature.
 */
int8_t bmi3_get_sensor_data(struct bmi3_sensor_data *sensor_data, uint8_t n_sens, struct bmi3_dev *dev)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	460b      	mov	r3, r1
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 faa3 	bl	800113e <null_ptr_check>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 8000bfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f040 80bf 	bne.w	8000d84 <bmi3_get_sensor_data+0x1a0>
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f000 80bb 	beq.w	8000d84 <bmi3_get_sensor_data+0x1a0>
    {
        for (loop = 0; loop < n_sens; loop++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	75bb      	strb	r3, [r7, #22]
 8000c12:	e0af      	b.n	8000d74 <bmi3_get_sensor_data+0x190>
        {
            switch (sensor_data[loop].type)
 8000c14:	7dba      	ldrb	r2, [r7, #22]
 8000c16:	4613      	mov	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	f200 809a 	bhi.w	8000d60 <bmi3_get_sensor_data+0x17c>
 8000c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <bmi3_get_sensor_data+0x50>)
 8000c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000c79 	.word	0x08000c79
 8000c38:	08000c9b 	.word	0x08000c9b
 8000c3c:	08000d61 	.word	0x08000d61
 8000c40:	08000d61 	.word	0x08000d61
 8000c44:	08000d61 	.word	0x08000d61
 8000c48:	08000cbd 	.word	0x08000cbd
 8000c4c:	08000d61 	.word	0x08000d61
 8000c50:	08000cdf 	.word	0x08000cdf
 8000c54:	08000d61 	.word	0x08000d61
 8000c58:	08000d61 	.word	0x08000d61
 8000c5c:	08000d61 	.word	0x08000d61
 8000c60:	08000d61 	.word	0x08000d61
 8000c64:	08000d61 	.word	0x08000d61
 8000c68:	08000d61 	.word	0x08000d61
 8000c6c:	08000d01 	.word	0x08000d01
 8000c70:	08000d21 	.word	0x08000d21
 8000c74:	08000d41 	.word	0x08000d41
            {
                case BMI3_ACCEL:
                    rslt = get_accel_sensor_data(&sensor_data[loop].sens_data.acc, BMI3_REG_ACC_DATA_X, dev);
 8000c78:	7dba      	ldrb	r2, [r7, #22]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	3304      	adds	r3, #4
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	2103      	movs	r1, #3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f880 	bl	8000d94 <get_accel_sensor_data>
 8000c94:	4603      	mov	r3, r0
 8000c96:	75fb      	strb	r3, [r7, #23]
                    break;
 8000c98:	e065      	b.n	8000d66 <bmi3_get_sensor_data+0x182>

                case BMI3_GYRO:
                    rslt = get_gyro_sensor_data(&sensor_data[loop].sens_data.gyr, BMI3_REG_GYR_DATA_X, dev);
 8000c9a:	7dba      	ldrb	r2, [r7, #22]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4413      	add	r3, r2
 8000caa:	3304      	adds	r3, #4
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	2106      	movs	r1, #6
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f8da 	bl	8000e6a <get_gyro_sensor_data>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	75fb      	strb	r3, [r7, #23]
                    break;
 8000cba:	e054      	b.n	8000d66 <bmi3_get_sensor_data+0x182>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_counter_sensor_data(&sensor_data[loop].sens_data.step_counter_output,
 8000cbc:	7dba      	ldrb	r2, [r7, #22]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	3304      	adds	r3, #4
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	2112      	movs	r1, #18
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f933 	bl	8000f3e <get_step_counter_sensor_data>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	75fb      	strb	r3, [r7, #23]
                                                        BMI3_REG_FEATURE_IO2,
                                                        dev);
                    break;
 8000cdc:	e043      	b.n	8000d66 <bmi3_get_sensor_data+0x182>

                case BMI3_ORIENTATION:
                    rslt = get_orient_output_data(&sensor_data[loop].sens_data.orient_output,
 8000cde:	7dba      	ldrb	r2, [r7, #22]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	3304      	adds	r3, #4
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	2147      	movs	r1, #71	@ 0x47
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f95d 	bl	8000fb4 <get_orient_output_data>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	75fb      	strb	r3, [r7, #23]
                                                  BMI3_REG_FEATURE_EVENT_EXT,
                                                  dev);
                    break;
 8000cfe:	e032      	b.n	8000d66 <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_ACCEL:
                    rslt = get_i3c_sync_accel_sensor_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 8000d00:	7dba      	ldrb	r2, [r7, #22]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	3304      	adds	r3, #4
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 fa32 	bl	800117e <get_i3c_sync_accel_sensor_data>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	75fb      	strb	r3, [r7, #23]
                    break;
 8000d1e:	e022      	b.n	8000d66 <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_GYRO:
                    rslt = get_i3c_sync_gyro_sensor_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 8000d20:	7dba      	ldrb	r2, [r7, #22]
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	3304      	adds	r3, #4
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fa7b 	bl	8001230 <get_i3c_sync_gyro_sensor_data>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	75fb      	strb	r3, [r7, #23]
                    break;
 8000d3e:	e012      	b.n	8000d66 <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_TEMP:
                    rslt = get_i3c_sync_temp_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 8000d40:	7dba      	ldrb	r2, [r7, #22]
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	3304      	adds	r3, #4
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fac7 	bl	80012e8 <get_i3c_sync_temp_data>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	75fb      	strb	r3, [r7, #23]
                    break;
 8000d5e:	e002      	b.n	8000d66 <bmi3_get_sensor_data+0x182>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8000d60:	23fa      	movs	r3, #250	@ 0xfa
 8000d62:	75fb      	strb	r3, [r7, #23]
                    break;
 8000d64:	bf00      	nop
            }

            /* Return error if any of the get sensor data fails */
            if (rslt != BMI3_OK)
 8000d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d108      	bne.n	8000d80 <bmi3_get_sensor_data+0x19c>
        for (loop = 0; loop < n_sens; loop++)
 8000d6e:	7dbb      	ldrb	r3, [r7, #22]
 8000d70:	3301      	adds	r3, #1
 8000d72:	75bb      	strb	r3, [r7, #22]
 8000d74:	7dba      	ldrb	r2, [r7, #22]
 8000d76:	7afb      	ldrb	r3, [r7, #11]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f4ff af4b 	bcc.w	8000c14 <bmi3_get_sensor_data+0x30>
    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 8000d7e:	e003      	b.n	8000d88 <bmi3_get_sensor_data+0x1a4>
            {
                break;
 8000d80:	bf00      	nop
    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 8000d82:	e001      	b.n	8000d88 <bmi3_get_sensor_data+0x1a4>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000d84:	23ff      	movs	r3, #255	@ 0xff
 8000d86:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <get_accel_sensor_data>:

/*!
 * @brief This internal API gets the accelerometer data from the register.
 */
int8_t get_accel_sensor_data(struct bmi3_sens_axes_data *data, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	@ 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_ACC_NUM_BYTES] = { 0 };
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
 8000da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]

    /* Stores the accel x, y and z axis data from register */
    uint16_t acc_data[6];

    if (data != NULL)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d04e      	beq.n	8000e58 <get_accel_sensor_data+0xc4>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, BMI3_ACC_NUM_BYTES, dev);
 8000dba:	f107 0120 	add.w	r1, r7, #32
 8000dbe:	7af8      	ldrb	r0, [r7, #11]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2214      	movs	r2, #20
 8000dc4:	f7ff fe68 	bl	8000a98 <bmi3_get_regs>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8000dce:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d143      	bne.n	8000e5e <get_accel_sensor_data+0xca>
        {
            acc_data[0] = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8000dd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dda:	b21a      	sxth	r2, r3
 8000ddc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	82bb      	strh	r3, [r7, #20]
            acc_data[1] = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8000dec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	82fb      	strh	r3, [r7, #22]
            acc_data[2] = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8000e02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	833b      	strh	r3, [r7, #24]
            acc_data[3] = (reg_data[14] | (uint16_t)reg_data[15] << 8);
 8000e18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	837b      	strh	r3, [r7, #26]
            acc_data[4] = (reg_data[16] | (uint16_t)reg_data[17] << 8);
 8000e2e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	83bb      	strh	r3, [r7, #28]
            acc_data[5] = reg_data[18];
 8000e44:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000e48:	83fb      	strh	r3, [r7, #30]

            /* Get accelerometer data from the register */
            get_acc_data(data, acc_data);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f000 f8df 	bl	8001014 <get_acc_data>
 8000e56:	e002      	b.n	8000e5e <get_accel_sensor_data+0xca>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000e58:	23ff      	movs	r3, #255	@ 0xff
 8000e5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8000e5e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3738      	adds	r7, #56	@ 0x38
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <get_gyro_sensor_data>:

/*!
 * @brief This internal API gets the gyroscope data from the register.
 */
int8_t get_gyro_sensor_data(struct bmi3_sens_axes_data *data, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b08c      	sub	sp, #48	@ 0x30
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	460b      	mov	r3, r1
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_GYR_NUM_BYTES] = { 0 };
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
 8000e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	811a      	strh	r2, [r3, #8]

    /* Variable to store x, y and z axis gyro data */
    uint16_t gyr_data[6];

    if (data != NULL)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d04e      	beq.n	8000f2c <get_gyro_sensor_data+0xc2>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, BMI3_GYR_NUM_BYTES, dev);
 8000e8e:	f107 0120 	add.w	r1, r7, #32
 8000e92:	7af8      	ldrb	r0, [r7, #11]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	220e      	movs	r2, #14
 8000e98:	f7ff fdfe 	bl	8000a98 <bmi3_get_regs>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 8000ea2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d143      	bne.n	8000f32 <get_gyro_sensor_data+0xc8>
        {
            gyr_data[0] = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8000eaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	82bb      	strh	r3, [r7, #20]
            gyr_data[1] = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8000ec0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	82fb      	strh	r3, [r7, #22]
            gyr_data[2] = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8000ed6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	833b      	strh	r3, [r7, #24]
            gyr_data[3] = (reg_data[8] | (uint16_t)reg_data[9] << 8);
 8000eec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	837b      	strh	r3, [r7, #26]
            gyr_data[4] = (reg_data[10] | (uint16_t)reg_data[11] << 8);
 8000f02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	83bb      	strh	r3, [r7, #28]
            gyr_data[5] = reg_data[12];
 8000f18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f1c:	83fb      	strh	r3, [r7, #30]

            /* Get gyro data from the register */
            get_gyr_data(data, gyr_data);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f000 f8bf 	bl	80010a8 <get_gyr_data>
 8000f2a:	e002      	b.n	8000f32 <get_gyro_sensor_data+0xc8>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000f2c:	23ff      	movs	r3, #255	@ 0xff
 8000f2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8000f32:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3730      	adds	r7, #48	@ 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <get_step_counter_sensor_data>:

/*!
 * @brief This internal API gets the step counter data from the register.
 */
static int8_t get_step_counter_sensor_data(uint32_t *step_count, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	460b      	mov	r3, r1
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[4] = { 0 };
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]

    if (step_count != NULL)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d026      	beq.n	8000fa4 <get_step_counter_sensor_data+0x66>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, 4, dev);
 8000f56:	f107 0110 	add.w	r1, r7, #16
 8000f5a:	7af8      	ldrb	r0, [r7, #11]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2204      	movs	r2, #4
 8000f60:	f7ff fd9a 	bl	8000a98 <bmi3_get_regs>
 8000f64:	4603      	mov	r3, r0
 8000f66:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8000f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d11b      	bne.n	8000fa8 <get_step_counter_sensor_data+0x6a>
        {
            /* Get the step counter output in 4 bytes */
            *step_count = (uint32_t) reg_data[0];
 8000f70:	7c3b      	ldrb	r3, [r7, #16]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[1] << 8);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	7c7b      	ldrb	r3, [r7, #17]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	431a      	orrs	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[2] << 16);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	7cbb      	ldrb	r3, [r7, #18]
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[3] << 24);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	7cfb      	ldrb	r3, [r7, #19]
 8000f9a:	061b      	lsls	r3, r3, #24
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e001      	b.n	8000fa8 <get_step_counter_sensor_data+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000fa4:	23ff      	movs	r3, #255	@ 0xff
 8000fa6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <get_orient_output_data>:
/*!
 * @brief This internal API gets the output values of orientation: portrait-
 * landscape and face up-down.
 */
static int8_t get_orient_output_data(struct bmi3_orientation_output *orient_out, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[2] = { 0 };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	82bb      	strh	r3, [r7, #20]

    if (orient_out != NULL)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d01b      	beq.n	8001004 <get_orient_output_data+0x50>
    {
        /* Read the data from feature engine status register */
        rslt = bmi3_get_regs(reg_addr, reg_data, 2, dev);
 8000fcc:	f107 0114 	add.w	r1, r7, #20
 8000fd0:	7af8      	ldrb	r0, [r7, #11]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	f7ff fd5f 	bl	8000a98 <bmi3_get_regs>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8000fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d110      	bne.n	8001008 <get_orient_output_data+0x54>
        {
            /* Get the output value of the orientation detection feature */
            orient_out->orientation_portrait_landscape = BMI3_GET_BIT_POS0(reg_data[0],
 8000fe6:	7d3b      	ldrb	r3, [r7, #20]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	701a      	strb	r2, [r3, #0]
                                                                           BMI3_ORIENTATION_PORTRAIT_LANDSCAPE);

            /* Get the output value of the orientation face up-down feature */
            orient_out->orientation_faceup_down = BMI3_GET_BITS(reg_data[0], BMI3_ORIENTATION_FACEUP_DOWN);
 8000ff2:	7d3b      	ldrb	r3, [r7, #20]
 8000ff4:	109b      	asrs	r3, r3, #2
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	705a      	strb	r2, [r3, #1]
 8001002:	e001      	b.n	8001008 <get_orient_output_data+0x54>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001004:	23ff      	movs	r3, #255	@ 0xff
 8001006:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <get_acc_data>:

/*!
 * @brief This internal API gets the accelerometer data.
 */
static void get_acc_data(struct bmi3_sens_axes_data *data, const uint16_t *reg_data)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    /* Stores accel x-axis data */
    data->x = (int16_t)reg_data[0];
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b21a      	sxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	801a      	strh	r2, [r3, #0]

    /* Stores accel y-axis data */
    data->y = (int16_t)reg_data[1];
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3302      	adds	r3, #2
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	b21a      	sxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	805a      	strh	r2, [r3, #2]

    /* Stores accel z-axis data */
    data->z = (int16_t)reg_data[2];
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3304      	adds	r3, #4
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b21a      	sxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	809a      	strh	r2, [r3, #4]

    /* Stores sensor time data */
    data->sens_time = (reg_data[3] | ((uint32_t)reg_data[4] << 16));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3306      	adds	r3, #6
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3308      	adds	r3, #8
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	041b      	lsls	r3, r3, #16
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	609a      	str	r2, [r3, #8]

    /* Stores saturation x-axis data */
    data->sat_x = (reg_data[5] & BMI3_SATF_ACC_X_MASK);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	330a      	adds	r3, #10
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	b2d9      	uxtb	r1, r3
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	7b13      	ldrb	r3, [r2, #12]
 8001066:	f361 0300 	bfi	r3, r1, #0, #1
 800106a:	7313      	strb	r3, [r2, #12]

    /* Stores saturation y-axis data */
    data->sat_y = (reg_data[5] & BMI3_SATF_ACC_Y_MASK) >> BMI3_SATF_ACC_Y_POS;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	330a      	adds	r3, #10
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	105b      	asrs	r3, r3, #1
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	b2d9      	uxtb	r1, r3
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	7b13      	ldrb	r3, [r2, #12]
 800107e:	f361 0341 	bfi	r3, r1, #1, #1
 8001082:	7313      	strb	r3, [r2, #12]

    /* Stores saturation z-axis data */
    data->sat_z = (reg_data[5] & BMI3_SATF_ACC_Z_MASK) >> BMI3_SATF_ACC_Z_POS;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	330a      	adds	r3, #10
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	109b      	asrs	r3, r3, #2
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	b2d9      	uxtb	r1, r3
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	7b13      	ldrb	r3, [r2, #12]
 8001096:	f361 0382 	bfi	r3, r1, #2, #1
 800109a:	7313      	strb	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <get_gyr_data>:

/*!
 * @brief This internal API gets the gyroscope data.
 */
static void get_gyr_data(struct bmi3_sens_axes_data *data, const uint16_t *reg_data)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
    /* Stores accel x-axis data */
    data->x = (int16_t)reg_data[0];
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	801a      	strh	r2, [r3, #0]

    /* Stores accel y-axis data */
    data->y = (int16_t)reg_data[1];
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3302      	adds	r3, #2
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	805a      	strh	r2, [r3, #2]

    /* Stores accel z-axis data */
    data->z = (int16_t)reg_data[2];
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	3304      	adds	r3, #4
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	809a      	strh	r2, [r3, #4]

    /* Stores sensor time data */
    data->sens_time = (reg_data[3] | ((uint32_t)reg_data[4] << 16));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3306      	adds	r3, #6
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	3308      	adds	r3, #8
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	041b      	lsls	r3, r3, #16
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]

    /* Stores saturation x-axis data */
    data->sat_x = (reg_data[5] & BMI3_SATF_GYR_X_MASK) >> BMI3_SATF_GYR_X_POS;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	330a      	adds	r3, #10
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	10db      	asrs	r3, r3, #3
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	b2d9      	uxtb	r1, r3
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	7b13      	ldrb	r3, [r2, #12]
 80010fc:	f361 0300 	bfi	r3, r1, #0, #1
 8001100:	7313      	strb	r3, [r2, #12]

    /* Stores saturation y-axis data */
    data->sat_y = (reg_data[5] & BMI3_SATF_GYR_Y_MASK) >> BMI3_SATF_GYR_Y_POS;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	330a      	adds	r3, #10
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	111b      	asrs	r3, r3, #4
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	b2d9      	uxtb	r1, r3
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	7b13      	ldrb	r3, [r2, #12]
 8001114:	f361 0341 	bfi	r3, r1, #1, #1
 8001118:	7313      	strb	r3, [r2, #12]

    /* Stores saturation z-axis data */
    data->sat_z = (reg_data[5] & BMI3_SATF_GYR_Z_MASK) >> BMI3_SATF_GYR_Z_POS;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	330a      	adds	r3, #10
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	115b      	asrs	r3, r3, #5
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	b2d9      	uxtb	r1, r3
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	7b13      	ldrb	r3, [r2, #12]
 800112c:	f361 0382 	bfi	r3, r1, #2, #1
 8001130:	7313      	strb	r3, [r2, #12]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 800113e:	b480      	push	{r7}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00b      	beq.n	8001164 <null_ptr_check+0x26>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <null_ptr_check+0x26>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <null_ptr_check+0x26>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <null_ptr_check+0x2c>
    {
        rslt = BMI3_E_NULL_PTR;
 8001164:	23ff      	movs	r3, #255	@ 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e001      	b.n	800116e <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI3_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <get_i3c_sync_accel_sensor_data>:

/*!
 * @brief This internal API gets the i3c sync accelerometer data from the register.
 */
static int8_t get_i3c_sync_accel_sensor_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b088      	sub	sp, #32
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_ACC] = { 0 };
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]

    /* Array to set the base address of i3c sync accel data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_ACC, 0 };
 8001198:	2337      	movs	r3, #55	@ 0x37
 800119a:	813b      	strh	r3, [r7, #8]

    if (data != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d03e      	beq.n	8001220 <get_i3c_sync_accel_sensor_data+0xa2>
    {
        /* Set the i3c sync accelerometer base address to feature engine transmission address to start DMA transaction
         * */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80011a2:	f107 0108 	add.w	r1, r7, #8
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2202      	movs	r2, #2
 80011aa:	2041      	movs	r0, #65	@ 0x41
 80011ac:	f7ff fcd9 	bl	8000b62 <bmi3_set_regs>
 80011b0:	4603      	mov	r3, r0
 80011b2:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80011b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d133      	bne.n	8001224 <get_i3c_sync_accel_sensor_data+0xa6>
        {
            /* Get the configuration from the feature engine register where i3c sync accel data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_ACC, dev);
 80011bc:	f107 010c 	add.w	r1, r7, #12
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2210      	movs	r2, #16
 80011c4:	2042      	movs	r0, #66	@ 0x42
 80011c6:	f7ff fc67 	bl	8000a98 <bmi3_get_regs>
 80011ca:	4603      	mov	r3, r0
 80011cc:	77fb      	strb	r3, [r7, #31]

            data->sync_x = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 80011ce:	7b3b      	ldrb	r3, [r7, #12]
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7b7b      	ldrb	r3, [r7, #13]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21b      	sxth	r3, r3
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	801a      	strh	r2, [r3, #0]
            data->sync_y = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	805a      	strh	r2, [r3, #2]
            data->sync_z = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 80011f6:	7c3b      	ldrb	r3, [r7, #16]
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	7c7b      	ldrb	r3, [r7, #17]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21b      	sxth	r3, r3
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	809a      	strh	r2, [r3, #4]
            data->sync_time = (reg_data[14] | (uint16_t)reg_data[15] << 8);
 800120a:	7ebb      	ldrb	r3, [r7, #26]
 800120c:	b21a      	sxth	r2, r3
 800120e:	7efb      	ldrb	r3, [r7, #27]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21b      	sxth	r3, r3
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	811a      	strh	r2, [r3, #8]
 800121e:	e001      	b.n	8001224 <get_i3c_sync_accel_sensor_data+0xa6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001220:	23ff      	movs	r3, #255	@ 0xff
 8001222:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001224:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <get_i3c_sync_gyro_sensor_data>:

/*!
 * @brief This internal API gets the i3c sync gyroscope data from the register.
 */
static int8_t get_i3c_sync_gyro_sensor_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_GYR] = { 0 };
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	809a      	strh	r2, [r3, #4]

    /* Array to set the base address of i3c sync gyro data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_GYR, 0 };
 8001248:	233a      	movs	r3, #58	@ 0x3a
 800124a:	813b      	strh	r3, [r7, #8]

    if (data != NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d042      	beq.n	80012d8 <get_i3c_sync_gyro_sensor_data+0xa8>
    {
        /* Set the i3c sync gyroscope base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8001252:	f107 0108 	add.w	r1, r7, #8
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2202      	movs	r2, #2
 800125a:	2041      	movs	r0, #65	@ 0x41
 800125c:	f7ff fc81 	bl	8000b62 <bmi3_set_regs>
 8001260:	4603      	mov	r3, r0
 8001262:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d137      	bne.n	80012dc <get_i3c_sync_gyro_sensor_data+0xac>
        {
            /* Get the configuration from the feature engine register where i3c sync gyro data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_GYR, dev);
 800126c:	f107 010c 	add.w	r1, r7, #12
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	220a      	movs	r2, #10
 8001274:	2042      	movs	r0, #66	@ 0x42
 8001276:	f7ff fc0f 	bl	8000a98 <bmi3_get_regs>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 800127e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d12a      	bne.n	80012dc <get_i3c_sync_gyro_sensor_data+0xac>
            {
                data->sync_x = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8001286:	7b3b      	ldrb	r3, [r7, #12]
 8001288:	b21a      	sxth	r2, r3
 800128a:	7b7b      	ldrb	r3, [r7, #13]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	801a      	strh	r2, [r3, #0]
                data->sync_y = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	b21a      	sxth	r2, r3
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	805a      	strh	r2, [r3, #2]
                data->sync_z = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 80012ae:	7c3b      	ldrb	r3, [r7, #16]
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	7c7b      	ldrb	r3, [r7, #17]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	b29a      	uxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	809a      	strh	r2, [r3, #4]
                data->sync_time = (reg_data[8] | (uint16_t)reg_data[9] << 8);
 80012c2:	7d3b      	ldrb	r3, [r7, #20]
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	7d7b      	ldrb	r3, [r7, #21]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	811a      	strh	r2, [r3, #8]
 80012d6:	e001      	b.n	80012dc <get_i3c_sync_gyro_sensor_data+0xac>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80012d8:	23ff      	movs	r3, #255	@ 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <get_i3c_sync_temp_data>:

/*!
 * @brief This internal API gets the i3c sync temperature data from the register.
 */
static int8_t get_i3c_sync_temp_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_TEMP] = { 0 };
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of i3c sync temperature data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_TEMP, 0 };
 80012f6:	233d      	movs	r3, #61	@ 0x3d
 80012f8:	81bb      	strh	r3, [r7, #12]

    if (data != NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d02e      	beq.n	800135e <get_i3c_sync_temp_data+0x76>
    {
        /* Set the i3c sync temperature base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8001300:	f107 010c 	add.w	r1, r7, #12
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2202      	movs	r2, #2
 8001308:	2041      	movs	r0, #65	@ 0x41
 800130a:	f7ff fc2a 	bl	8000b62 <bmi3_set_regs>
 800130e:	4603      	mov	r3, r0
 8001310:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d123      	bne.n	8001362 <get_i3c_sync_temp_data+0x7a>
        {
            /* Get the configuration from the feature engine register where i3c sync temperature data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_TEMP, dev);
 800131a:	f107 0110 	add.w	r1, r7, #16
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	2204      	movs	r2, #4
 8001322:	2042      	movs	r0, #66	@ 0x42
 8001324:	f7ff fbb8 	bl	8000a98 <bmi3_get_regs>
 8001328:	4603      	mov	r3, r0
 800132a:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 800132c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d116      	bne.n	8001362 <get_i3c_sync_temp_data+0x7a>
            {
                data->sync_temp = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8001334:	7c3b      	ldrb	r3, [r7, #16]
 8001336:	b21a      	sxth	r2, r3
 8001338:	7c7b      	ldrb	r3, [r7, #17]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21b      	sxth	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b21b      	sxth	r3, r3
 8001342:	b29a      	uxth	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	80da      	strh	r2, [r3, #6]
                data->sync_time = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8001348:	7cbb      	ldrb	r3, [r7, #18]
 800134a:	b21a      	sxth	r2, r3
 800134c:	7cfb      	ldrb	r3, [r7, #19]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21b      	sxth	r3, r3
 8001356:	b29a      	uxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	811a      	strh	r2, [r3, #8]
 800135c:	e001      	b.n	8001362 <get_i3c_sync_temp_data+0x7a>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800135e:	23ff      	movs	r3, #255	@ 0xff
 8001360:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <accel_lsb_to_mps2_4g>:

float accel_lsb_to_mps2_2g(int16_t val) {
    return (val / 16384.0f) * GRAVITY_EARTH;
}

float accel_lsb_to_mps2_4g(int16_t val) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
    return (val / 8192.0f) * GRAVITY_EARTH;
 800137a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001386:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80013a4 <accel_lsb_to_mps2_4g+0x34>
 800138a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80013a8 <accel_lsb_to_mps2_4g+0x38>
 8001392:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001396:	eeb0 0a67 	vmov.f32	s0, s15
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	46000000 	.word	0x46000000
 80013a8:	411ce80a 	.word	0x411ce80a

080013ac <gyro_lsb_to_dps_2000>:

float gyro_lsb_to_dps_1000(int16_t val) {
    return val / 32.8f;
}

float gyro_lsb_to_dps_2000(int16_t val) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
    return val / 16.4f;
 80013b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80013dc <gyro_lsb_to_dps_2000+0x30>
 80013c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013ca:	eef0 7a66 	vmov.f32	s15, s13
}
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	41833333 	.word	0x41833333

080013e0 <bmi323_data_poll>:
	return rslt;
}


// Function to get and return the sensor data
IMU_6_Axis_Data bmi323_data_poll() {
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b094      	sub	sp, #80	@ 0x50
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    IMU_6_Axis_Data imu_data = {0};
 80013e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]
    struct bmi3_sensor_data sensor_data[2];

    // Set the types of data we want to read
    sensor_data[0].type = BMI3_ACCEL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	733b      	strb	r3, [r7, #12]
    sensor_data[1].type = BMI3_GYRO;
 80013fe:	2301      	movs	r3, #1
 8001400:	f887 3020 	strb.w	r3, [r7, #32]

    // Get the sensor data
    int8_t rslt = bmi3_get_sensor_data(sensor_data, 2, dev);
 8001404:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <bmi323_data_poll+0xd8>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2102      	movs	r1, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fbe8 	bl	8000be4 <bmi3_get_sensor_data>
 8001414:	4603      	mov	r3, r0
 8001416:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (rslt == BMI3_OK) {
 800141a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800141e:	2b00      	cmp	r3, #0
 8001420:	d13c      	bne.n	800149c <bmi323_data_poll+0xbc>
        // Use the appropriate conversion functions
        // Replace these with the actual functions based on your configuration

        // Fill accelerometer data
        if (sensor_data[0].type == BMI3_ACCEL) {
 8001422:	7b3b      	ldrb	r3, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d11a      	bne.n	800145e <bmi323_data_poll+0x7e>
            imu_data.acceleration[0] = accel_lsb_to_mps2_4g(sensor_data[0].sens_data.acc.x);  // Assuming ±4g range
 8001428:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff9f 	bl	8001370 <accel_lsb_to_mps2_4g>
 8001432:	eef0 7a40 	vmov.f32	s15, s0
 8001436:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            imu_data.acceleration[1] = accel_lsb_to_mps2_4g(sensor_data[0].sens_data.acc.y);  // Assuming ±4g range
 800143a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff96 	bl	8001370 <accel_lsb_to_mps2_4g>
 8001444:	eef0 7a40 	vmov.f32	s15, s0
 8001448:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            imu_data.acceleration[2] = accel_lsb_to_mps2_4g(sensor_data[0].sens_data.acc.z);  // Assuming ±4g range
 800144c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff8d 	bl	8001370 <accel_lsb_to_mps2_4g>
 8001456:	eef0 7a40 	vmov.f32	s15, s0
 800145a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        }

        // Fill gyroscope data
        if (sensor_data[1].type == BMI3_GYRO) {
 800145e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d11a      	bne.n	800149c <bmi323_data_poll+0xbc>
            imu_data.gyroscope[0] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.x);  // Assuming ±2000°/s range
 8001466:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff9e 	bl	80013ac <gyro_lsb_to_dps_2000>
 8001470:	eef0 7a40 	vmov.f32	s15, s0
 8001474:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            imu_data.gyroscope[1] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.y);  // Assuming ±2000°/s range
 8001478:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff95 	bl	80013ac <gyro_lsb_to_dps_2000>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
 8001486:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            imu_data.gyroscope[2] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.z);  // Assuming ±2000°/s range
 800148a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff8c 	bl	80013ac <gyro_lsb_to_dps_2000>
 8001494:	eef0 7a40 	vmov.f32	s15, s0
 8001498:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        }
    } else {
        //printf("Failed to get sensor data. Error code: %d\n", rslt);
    }

    return imu_data;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	461d      	mov	r5, r3
 80014a0:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ac:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	3750      	adds	r7, #80	@ 0x50
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdb0      	pop	{r4, r5, r7, pc}
 80014b8:	24000000 	.word	0x24000000

080014bc <bno055_write_page_id>:
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	23ff      	movs	r3, #255	@ 0xff
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	2300      	movs	r3, #0
 80014cc:	73bb      	strb	r3, [r7, #14]
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <bno055_write_page_id+0x8c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <bno055_write_page_id+0x20>
 80014d6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80014da:	e030      	b.n	800153e <bno055_write_page_id+0x82>
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <bno055_write_page_id+0x8c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	691c      	ldr	r4, [r3, #16]
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <bno055_write_page_id+0x8c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	7a58      	ldrb	r0, [r3, #9]
 80014e8:	f107 020e 	add.w	r2, r7, #14
 80014ec:	2301      	movs	r3, #1
 80014ee:	2107      	movs	r1, #7
 80014f0:	47a0      	blx	r4
 80014f2:	4603      	mov	r3, r0
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d11b      	bne.n	8001536 <bno055_write_page_id+0x7a>
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	73bb      	strb	r3, [r7, #14]
 8001502:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <bno055_write_page_id+0x8c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68dc      	ldr	r4, [r3, #12]
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <bno055_write_page_id+0x8c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	7a58      	ldrb	r0, [r3, #9]
 800150e:	f107 020e 	add.w	r2, r7, #14
 8001512:	2301      	movs	r3, #1
 8001514:	2107      	movs	r1, #7
 8001516:	47a0      	blx	r4
 8001518:	4603      	mov	r3, r0
 800151a:	b2da      	uxtb	r2, r3
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	4413      	add	r3, r2
 8001520:	b2db      	uxtb	r3, r3
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d106      	bne.n	800153a <bno055_write_page_id+0x7e>
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <bno055_write_page_id+0x8c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	711a      	strb	r2, [r3, #4]
 8001534:	e001      	b.n	800153a <bno055_write_page_id+0x7e>
 8001536:	23ff      	movs	r3, #255	@ 0xff
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	24000224 	.word	0x24000224

0800154c <bno055_read_mag_x>:
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	23ff      	movs	r3, #255	@ 0xff
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	2300      	movs	r3, #0
 800155a:	81bb      	strh	r3, [r7, #12]
 800155c:	23ff      	movs	r3, #255	@ 0xff
 800155e:	73bb      	strb	r3, [r7, #14]
 8001560:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <bno055_read_mag_x+0x90>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <bno055_read_mag_x+0x22>
 8001568:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800156c:	e032      	b.n	80015d4 <bno055_read_mag_x+0x88>
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <bno055_read_mag_x+0x90>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	791b      	ldrb	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <bno055_read_mag_x+0x36>
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ff9f 	bl	80014bc <bno055_write_page_id>
 800157e:	4603      	mov	r3, r0
 8001580:	73bb      	strb	r3, [r7, #14]
 8001582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <bno055_read_mag_x+0x48>
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <bno055_read_mag_x+0x90>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	791b      	ldrb	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11b      	bne.n	80015cc <bno055_read_mag_x+0x80>
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <bno055_read_mag_x+0x90>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	691c      	ldr	r4, [r3, #16]
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <bno055_read_mag_x+0x90>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	7a58      	ldrb	r0, [r3, #9]
 80015a0:	f107 020c 	add.w	r2, r7, #12
 80015a4:	2302      	movs	r3, #2
 80015a6:	210e      	movs	r1, #14
 80015a8:	47a0      	blx	r4
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	7b3b      	ldrb	r3, [r7, #12]
 80015b0:	733b      	strb	r3, [r7, #12]
 80015b2:	7b7b      	ldrb	r3, [r7, #13]
 80015b4:	737b      	strb	r3, [r7, #13]
 80015b6:	7b7b      	ldrb	r3, [r7, #13]
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7b3b      	ldrb	r3, [r7, #12]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	801a      	strh	r2, [r3, #0]
 80015ca:	e001      	b.n	80015d0 <bno055_read_mag_x+0x84>
 80015cc:	23ff      	movs	r3, #255	@ 0xff
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	24000224 	.word	0x24000224

080015e0 <bno055_read_mag_y>:
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	23ff      	movs	r3, #255	@ 0xff
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	2300      	movs	r3, #0
 80015ee:	81bb      	strh	r3, [r7, #12]
 80015f0:	23ff      	movs	r3, #255	@ 0xff
 80015f2:	73bb      	strb	r3, [r7, #14]
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <bno055_read_mag_y+0x90>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <bno055_read_mag_y+0x22>
 80015fc:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001600:	e032      	b.n	8001668 <bno055_read_mag_y+0x88>
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <bno055_read_mag_y+0x90>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	791b      	ldrb	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <bno055_read_mag_y+0x36>
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff55 	bl	80014bc <bno055_write_page_id>
 8001612:	4603      	mov	r3, r0
 8001614:	73bb      	strb	r3, [r7, #14]
 8001616:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <bno055_read_mag_y+0x48>
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <bno055_read_mag_y+0x90>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	791b      	ldrb	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d11b      	bne.n	8001660 <bno055_read_mag_y+0x80>
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <bno055_read_mag_y+0x90>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691c      	ldr	r4, [r3, #16]
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <bno055_read_mag_y+0x90>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	7a58      	ldrb	r0, [r3, #9]
 8001634:	f107 020c 	add.w	r2, r7, #12
 8001638:	2302      	movs	r3, #2
 800163a:	2110      	movs	r1, #16
 800163c:	47a0      	blx	r4
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	7b3b      	ldrb	r3, [r7, #12]
 8001644:	733b      	strb	r3, [r7, #12]
 8001646:	7b7b      	ldrb	r3, [r7, #13]
 8001648:	737b      	strb	r3, [r7, #13]
 800164a:	7b7b      	ldrb	r3, [r7, #13]
 800164c:	b25b      	sxtb	r3, r3
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	7b3b      	ldrb	r3, [r7, #12]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21a      	sxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	801a      	strh	r2, [r3, #0]
 800165e:	e001      	b.n	8001664 <bno055_read_mag_y+0x84>
 8001660:	23ff      	movs	r3, #255	@ 0xff
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	24000224 	.word	0x24000224

08001674 <bno055_read_mag_z>:
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	23ff      	movs	r3, #255	@ 0xff
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	2300      	movs	r3, #0
 8001682:	81bb      	strh	r3, [r7, #12]
 8001684:	23ff      	movs	r3, #255	@ 0xff
 8001686:	73bb      	strb	r3, [r7, #14]
 8001688:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <bno055_read_mag_z+0x90>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <bno055_read_mag_z+0x22>
 8001690:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001694:	e032      	b.n	80016fc <bno055_read_mag_z+0x88>
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <bno055_read_mag_z+0x90>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	791b      	ldrb	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <bno055_read_mag_z+0x36>
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff ff0b 	bl	80014bc <bno055_write_page_id>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73bb      	strb	r3, [r7, #14]
 80016aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <bno055_read_mag_z+0x48>
 80016b2:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <bno055_read_mag_z+0x90>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	791b      	ldrb	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d11b      	bne.n	80016f4 <bno055_read_mag_z+0x80>
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <bno055_read_mag_z+0x90>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691c      	ldr	r4, [r3, #16]
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <bno055_read_mag_z+0x90>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	7a58      	ldrb	r0, [r3, #9]
 80016c8:	f107 020c 	add.w	r2, r7, #12
 80016cc:	2302      	movs	r3, #2
 80016ce:	2112      	movs	r1, #18
 80016d0:	47a0      	blx	r4
 80016d2:	4603      	mov	r3, r0
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	7b3b      	ldrb	r3, [r7, #12]
 80016d8:	733b      	strb	r3, [r7, #12]
 80016da:	7b7b      	ldrb	r3, [r7, #13]
 80016dc:	737b      	strb	r3, [r7, #13]
 80016de:	7b7b      	ldrb	r3, [r7, #13]
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	7b3b      	ldrb	r3, [r7, #12]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	e001      	b.n	80016f8 <bno055_read_mag_z+0x84>
 80016f4:	23ff      	movs	r3, #255	@ 0xff
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	24000224 	.word	0x24000224

08001708 <bno055_read_euler_h>:
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	23ff      	movs	r3, #255	@ 0xff
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	2300      	movs	r3, #0
 8001716:	81bb      	strh	r3, [r7, #12]
 8001718:	23ff      	movs	r3, #255	@ 0xff
 800171a:	73bb      	strb	r3, [r7, #14]
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <bno055_read_euler_h+0x90>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <bno055_read_euler_h+0x22>
 8001724:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001728:	e032      	b.n	8001790 <bno055_read_euler_h+0x88>
 800172a:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <bno055_read_euler_h+0x90>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <bno055_read_euler_h+0x36>
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fec1 	bl	80014bc <bno055_write_page_id>
 800173a:	4603      	mov	r3, r0
 800173c:	73bb      	strb	r3, [r7, #14]
 800173e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <bno055_read_euler_h+0x48>
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <bno055_read_euler_h+0x90>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	791b      	ldrb	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d11b      	bne.n	8001788 <bno055_read_euler_h+0x80>
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <bno055_read_euler_h+0x90>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691c      	ldr	r4, [r3, #16]
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <bno055_read_euler_h+0x90>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	7a58      	ldrb	r0, [r3, #9]
 800175c:	f107 020c 	add.w	r2, r7, #12
 8001760:	2302      	movs	r3, #2
 8001762:	211a      	movs	r1, #26
 8001764:	47a0      	blx	r4
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	7b3b      	ldrb	r3, [r7, #12]
 800176c:	733b      	strb	r3, [r7, #12]
 800176e:	7b7b      	ldrb	r3, [r7, #13]
 8001770:	737b      	strb	r3, [r7, #13]
 8001772:	7b7b      	ldrb	r3, [r7, #13]
 8001774:	b25b      	sxtb	r3, r3
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	b21a      	sxth	r2, r3
 800177a:	7b3b      	ldrb	r3, [r7, #12]
 800177c:	b21b      	sxth	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b21a      	sxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	801a      	strh	r2, [r3, #0]
 8001786:	e001      	b.n	800178c <bno055_read_euler_h+0x84>
 8001788:	23ff      	movs	r3, #255	@ 0xff
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	24000224 	.word	0x24000224

0800179c <bno055_read_euler_r>:
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	23ff      	movs	r3, #255	@ 0xff
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	2300      	movs	r3, #0
 80017aa:	81bb      	strh	r3, [r7, #12]
 80017ac:	23ff      	movs	r3, #255	@ 0xff
 80017ae:	73bb      	strb	r3, [r7, #14]
 80017b0:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <bno055_read_euler_r+0x90>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <bno055_read_euler_r+0x22>
 80017b8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80017bc:	e032      	b.n	8001824 <bno055_read_euler_r+0x88>
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <bno055_read_euler_r+0x90>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <bno055_read_euler_r+0x36>
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff fe77 	bl	80014bc <bno055_write_page_id>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73bb      	strb	r3, [r7, #14]
 80017d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d004      	beq.n	80017e4 <bno055_read_euler_r+0x48>
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <bno055_read_euler_r+0x90>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	791b      	ldrb	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d11b      	bne.n	800181c <bno055_read_euler_r+0x80>
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <bno055_read_euler_r+0x90>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691c      	ldr	r4, [r3, #16]
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <bno055_read_euler_r+0x90>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	7a58      	ldrb	r0, [r3, #9]
 80017f0:	f107 020c 	add.w	r2, r7, #12
 80017f4:	2302      	movs	r3, #2
 80017f6:	211c      	movs	r1, #28
 80017f8:	47a0      	blx	r4
 80017fa:	4603      	mov	r3, r0
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	7b3b      	ldrb	r3, [r7, #12]
 8001800:	733b      	strb	r3, [r7, #12]
 8001802:	7b7b      	ldrb	r3, [r7, #13]
 8001804:	737b      	strb	r3, [r7, #13]
 8001806:	7b7b      	ldrb	r3, [r7, #13]
 8001808:	b25b      	sxtb	r3, r3
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b21a      	sxth	r2, r3
 800180e:	7b3b      	ldrb	r3, [r7, #12]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21a      	sxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	801a      	strh	r2, [r3, #0]
 800181a:	e001      	b.n	8001820 <bno055_read_euler_r+0x84>
 800181c:	23ff      	movs	r3, #255	@ 0xff
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	24000224 	.word	0x24000224

08001830 <bno055_read_euler_p>:
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	23ff      	movs	r3, #255	@ 0xff
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	2300      	movs	r3, #0
 800183e:	81bb      	strh	r3, [r7, #12]
 8001840:	23ff      	movs	r3, #255	@ 0xff
 8001842:	73bb      	strb	r3, [r7, #14]
 8001844:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <bno055_read_euler_p+0x90>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <bno055_read_euler_p+0x22>
 800184c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001850:	e032      	b.n	80018b8 <bno055_read_euler_p+0x88>
 8001852:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <bno055_read_euler_p+0x90>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	791b      	ldrb	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <bno055_read_euler_p+0x36>
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff fe2d 	bl	80014bc <bno055_write_page_id>
 8001862:	4603      	mov	r3, r0
 8001864:	73bb      	strb	r3, [r7, #14]
 8001866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <bno055_read_euler_p+0x48>
 800186e:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <bno055_read_euler_p+0x90>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	791b      	ldrb	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d11b      	bne.n	80018b0 <bno055_read_euler_p+0x80>
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <bno055_read_euler_p+0x90>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691c      	ldr	r4, [r3, #16]
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <bno055_read_euler_p+0x90>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	7a58      	ldrb	r0, [r3, #9]
 8001884:	f107 020c 	add.w	r2, r7, #12
 8001888:	2302      	movs	r3, #2
 800188a:	211e      	movs	r1, #30
 800188c:	47a0      	blx	r4
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	7b3b      	ldrb	r3, [r7, #12]
 8001894:	733b      	strb	r3, [r7, #12]
 8001896:	7b7b      	ldrb	r3, [r7, #13]
 8001898:	737b      	strb	r3, [r7, #13]
 800189a:	7b7b      	ldrb	r3, [r7, #13]
 800189c:	b25b      	sxtb	r3, r3
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	7b3b      	ldrb	r3, [r7, #12]
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	801a      	strh	r2, [r3, #0]
 80018ae:	e001      	b.n	80018b4 <bno055_read_euler_p+0x84>
 80018b0:	23ff      	movs	r3, #255	@ 0xff
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	24000224 	.word	0x24000224

080018c4 <bno055_read_quaternion_w>:
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	23ff      	movs	r3, #255	@ 0xff
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	2300      	movs	r3, #0
 80018d2:	81bb      	strh	r3, [r7, #12]
 80018d4:	23ff      	movs	r3, #255	@ 0xff
 80018d6:	73bb      	strb	r3, [r7, #14]
 80018d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <bno055_read_quaternion_w+0x90>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <bno055_read_quaternion_w+0x22>
 80018e0:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80018e4:	e032      	b.n	800194c <bno055_read_quaternion_w+0x88>
 80018e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <bno055_read_quaternion_w+0x90>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	791b      	ldrb	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <bno055_read_quaternion_w+0x36>
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fde3 	bl	80014bc <bno055_write_page_id>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73bb      	strb	r3, [r7, #14]
 80018fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <bno055_read_quaternion_w+0x48>
 8001902:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <bno055_read_quaternion_w+0x90>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d11b      	bne.n	8001944 <bno055_read_quaternion_w+0x80>
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <bno055_read_quaternion_w+0x90>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691c      	ldr	r4, [r3, #16]
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <bno055_read_quaternion_w+0x90>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	7a58      	ldrb	r0, [r3, #9]
 8001918:	f107 020c 	add.w	r2, r7, #12
 800191c:	2302      	movs	r3, #2
 800191e:	2120      	movs	r1, #32
 8001920:	47a0      	blx	r4
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	7b3b      	ldrb	r3, [r7, #12]
 8001928:	733b      	strb	r3, [r7, #12]
 800192a:	7b7b      	ldrb	r3, [r7, #13]
 800192c:	737b      	strb	r3, [r7, #13]
 800192e:	7b7b      	ldrb	r3, [r7, #13]
 8001930:	b25b      	sxtb	r3, r3
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	b21a      	sxth	r2, r3
 8001936:	7b3b      	ldrb	r3, [r7, #12]
 8001938:	b21b      	sxth	r3, r3
 800193a:	4313      	orrs	r3, r2
 800193c:	b21a      	sxth	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	e001      	b.n	8001948 <bno055_read_quaternion_w+0x84>
 8001944:	23ff      	movs	r3, #255	@ 0xff
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	24000224 	.word	0x24000224

08001958 <bno055_read_quaternion_x>:
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	23ff      	movs	r3, #255	@ 0xff
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	2300      	movs	r3, #0
 8001966:	81bb      	strh	r3, [r7, #12]
 8001968:	23ff      	movs	r3, #255	@ 0xff
 800196a:	73bb      	strb	r3, [r7, #14]
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <bno055_read_quaternion_x+0x90>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <bno055_read_quaternion_x+0x22>
 8001974:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001978:	e032      	b.n	80019e0 <bno055_read_quaternion_x+0x88>
 800197a:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <bno055_read_quaternion_x+0x90>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	791b      	ldrb	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <bno055_read_quaternion_x+0x36>
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fd99 	bl	80014bc <bno055_write_page_id>
 800198a:	4603      	mov	r3, r0
 800198c:	73bb      	strb	r3, [r7, #14]
 800198e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <bno055_read_quaternion_x+0x48>
 8001996:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <bno055_read_quaternion_x+0x90>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	791b      	ldrb	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d11b      	bne.n	80019d8 <bno055_read_quaternion_x+0x80>
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <bno055_read_quaternion_x+0x90>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691c      	ldr	r4, [r3, #16]
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <bno055_read_quaternion_x+0x90>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	7a58      	ldrb	r0, [r3, #9]
 80019ac:	f107 020c 	add.w	r2, r7, #12
 80019b0:	2302      	movs	r3, #2
 80019b2:	2122      	movs	r1, #34	@ 0x22
 80019b4:	47a0      	blx	r4
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	7b3b      	ldrb	r3, [r7, #12]
 80019bc:	733b      	strb	r3, [r7, #12]
 80019be:	7b7b      	ldrb	r3, [r7, #13]
 80019c0:	737b      	strb	r3, [r7, #13]
 80019c2:	7b7b      	ldrb	r3, [r7, #13]
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	7b3b      	ldrb	r3, [r7, #12]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	e001      	b.n	80019dc <bno055_read_quaternion_x+0x84>
 80019d8:	23ff      	movs	r3, #255	@ 0xff
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	24000224 	.word	0x24000224

080019ec <bno055_read_quaternion_y>:
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	23ff      	movs	r3, #255	@ 0xff
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	2300      	movs	r3, #0
 80019fa:	81bb      	strh	r3, [r7, #12]
 80019fc:	23ff      	movs	r3, #255	@ 0xff
 80019fe:	73bb      	strb	r3, [r7, #14]
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <bno055_read_quaternion_y+0x90>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <bno055_read_quaternion_y+0x22>
 8001a08:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001a0c:	e032      	b.n	8001a74 <bno055_read_quaternion_y+0x88>
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <bno055_read_quaternion_y+0x90>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	791b      	ldrb	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <bno055_read_quaternion_y+0x36>
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff fd4f 	bl	80014bc <bno055_write_page_id>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73bb      	strb	r3, [r7, #14]
 8001a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <bno055_read_quaternion_y+0x48>
 8001a2a:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <bno055_read_quaternion_y+0x90>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	791b      	ldrb	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d11b      	bne.n	8001a6c <bno055_read_quaternion_y+0x80>
 8001a34:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <bno055_read_quaternion_y+0x90>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691c      	ldr	r4, [r3, #16]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <bno055_read_quaternion_y+0x90>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	7a58      	ldrb	r0, [r3, #9]
 8001a40:	f107 020c 	add.w	r2, r7, #12
 8001a44:	2302      	movs	r3, #2
 8001a46:	2124      	movs	r1, #36	@ 0x24
 8001a48:	47a0      	blx	r4
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	7b3b      	ldrb	r3, [r7, #12]
 8001a50:	733b      	strb	r3, [r7, #12]
 8001a52:	7b7b      	ldrb	r3, [r7, #13]
 8001a54:	737b      	strb	r3, [r7, #13]
 8001a56:	7b7b      	ldrb	r3, [r7, #13]
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	7b3b      	ldrb	r3, [r7, #12]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	801a      	strh	r2, [r3, #0]
 8001a6a:	e001      	b.n	8001a70 <bno055_read_quaternion_y+0x84>
 8001a6c:	23ff      	movs	r3, #255	@ 0xff
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}
 8001a7c:	24000224 	.word	0x24000224

08001a80 <bno055_read_quaternion_z>:
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	23ff      	movs	r3, #255	@ 0xff
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	81bb      	strh	r3, [r7, #12]
 8001a90:	23ff      	movs	r3, #255	@ 0xff
 8001a92:	73bb      	strb	r3, [r7, #14]
 8001a94:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <bno055_read_quaternion_z+0x90>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <bno055_read_quaternion_z+0x22>
 8001a9c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001aa0:	e032      	b.n	8001b08 <bno055_read_quaternion_z+0x88>
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <bno055_read_quaternion_z+0x90>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	791b      	ldrb	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <bno055_read_quaternion_z+0x36>
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff fd05 	bl	80014bc <bno055_write_page_id>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	73bb      	strb	r3, [r7, #14]
 8001ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <bno055_read_quaternion_z+0x48>
 8001abe:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <bno055_read_quaternion_z+0x90>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	791b      	ldrb	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11b      	bne.n	8001b00 <bno055_read_quaternion_z+0x80>
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <bno055_read_quaternion_z+0x90>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691c      	ldr	r4, [r3, #16]
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <bno055_read_quaternion_z+0x90>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	7a58      	ldrb	r0, [r3, #9]
 8001ad4:	f107 020c 	add.w	r2, r7, #12
 8001ad8:	2302      	movs	r3, #2
 8001ada:	2126      	movs	r1, #38	@ 0x26
 8001adc:	47a0      	blx	r4
 8001ade:	4603      	mov	r3, r0
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	7b3b      	ldrb	r3, [r7, #12]
 8001ae4:	733b      	strb	r3, [r7, #12]
 8001ae6:	7b7b      	ldrb	r3, [r7, #13]
 8001ae8:	737b      	strb	r3, [r7, #13]
 8001aea:	7b7b      	ldrb	r3, [r7, #13]
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	7b3b      	ldrb	r3, [r7, #12]
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	801a      	strh	r2, [r3, #0]
 8001afe:	e001      	b.n	8001b04 <bno055_read_quaternion_z+0x84>
 8001b00:	23ff      	movs	r3, #255	@ 0xff
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}
 8001b10:	24000224 	.word	0x24000224

08001b14 <bno055_read_linear_accel_x>:
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	23ff      	movs	r3, #255	@ 0xff
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	2300      	movs	r3, #0
 8001b22:	81bb      	strh	r3, [r7, #12]
 8001b24:	23ff      	movs	r3, #255	@ 0xff
 8001b26:	73bb      	strb	r3, [r7, #14]
 8001b28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <bno055_read_linear_accel_x+0x90>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <bno055_read_linear_accel_x+0x22>
 8001b30:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001b34:	e032      	b.n	8001b9c <bno055_read_linear_accel_x+0x88>
 8001b36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <bno055_read_linear_accel_x+0x90>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	791b      	ldrb	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <bno055_read_linear_accel_x+0x36>
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff fcbb 	bl	80014bc <bno055_write_page_id>
 8001b46:	4603      	mov	r3, r0
 8001b48:	73bb      	strb	r3, [r7, #14]
 8001b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <bno055_read_linear_accel_x+0x48>
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <bno055_read_linear_accel_x+0x90>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	791b      	ldrb	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d11b      	bne.n	8001b94 <bno055_read_linear_accel_x+0x80>
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <bno055_read_linear_accel_x+0x90>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691c      	ldr	r4, [r3, #16]
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <bno055_read_linear_accel_x+0x90>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	7a58      	ldrb	r0, [r3, #9]
 8001b68:	f107 020c 	add.w	r2, r7, #12
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	2128      	movs	r1, #40	@ 0x28
 8001b70:	47a0      	blx	r4
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	7b3b      	ldrb	r3, [r7, #12]
 8001b78:	733b      	strb	r3, [r7, #12]
 8001b7a:	7b7b      	ldrb	r3, [r7, #13]
 8001b7c:	737b      	strb	r3, [r7, #13]
 8001b7e:	7b7b      	ldrb	r3, [r7, #13]
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	7b3b      	ldrb	r3, [r7, #12]
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	801a      	strh	r2, [r3, #0]
 8001b92:	e001      	b.n	8001b98 <bno055_read_linear_accel_x+0x84>
 8001b94:	23ff      	movs	r3, #255	@ 0xff
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	24000224 	.word	0x24000224

08001ba8 <bno055_read_linear_accel_y>:
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	23ff      	movs	r3, #255	@ 0xff
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	81bb      	strh	r3, [r7, #12]
 8001bb8:	23ff      	movs	r3, #255	@ 0xff
 8001bba:	73bb      	strb	r3, [r7, #14]
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <bno055_read_linear_accel_y+0x90>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <bno055_read_linear_accel_y+0x22>
 8001bc4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001bc8:	e032      	b.n	8001c30 <bno055_read_linear_accel_y+0x88>
 8001bca:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <bno055_read_linear_accel_y+0x90>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	791b      	ldrb	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <bno055_read_linear_accel_y+0x36>
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff fc71 	bl	80014bc <bno055_write_page_id>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73bb      	strb	r3, [r7, #14]
 8001bde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <bno055_read_linear_accel_y+0x48>
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <bno055_read_linear_accel_y+0x90>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	791b      	ldrb	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11b      	bne.n	8001c28 <bno055_read_linear_accel_y+0x80>
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <bno055_read_linear_accel_y+0x90>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691c      	ldr	r4, [r3, #16]
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <bno055_read_linear_accel_y+0x90>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	7a58      	ldrb	r0, [r3, #9]
 8001bfc:	f107 020c 	add.w	r2, r7, #12
 8001c00:	2302      	movs	r3, #2
 8001c02:	212a      	movs	r1, #42	@ 0x2a
 8001c04:	47a0      	blx	r4
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	7b3b      	ldrb	r3, [r7, #12]
 8001c0c:	733b      	strb	r3, [r7, #12]
 8001c0e:	7b7b      	ldrb	r3, [r7, #13]
 8001c10:	737b      	strb	r3, [r7, #13]
 8001c12:	7b7b      	ldrb	r3, [r7, #13]
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	7b3b      	ldrb	r3, [r7, #12]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	801a      	strh	r2, [r3, #0]
 8001c26:	e001      	b.n	8001c2c <bno055_read_linear_accel_y+0x84>
 8001c28:	23ff      	movs	r3, #255	@ 0xff
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd90      	pop	{r4, r7, pc}
 8001c38:	24000224 	.word	0x24000224

08001c3c <bno055_read_linear_accel_z>:
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	23ff      	movs	r3, #255	@ 0xff
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	81bb      	strh	r3, [r7, #12]
 8001c4c:	23ff      	movs	r3, #255	@ 0xff
 8001c4e:	73bb      	strb	r3, [r7, #14]
 8001c50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <bno055_read_linear_accel_z+0x90>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <bno055_read_linear_accel_z+0x22>
 8001c58:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001c5c:	e032      	b.n	8001cc4 <bno055_read_linear_accel_z+0x88>
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <bno055_read_linear_accel_z+0x90>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	791b      	ldrb	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <bno055_read_linear_accel_z+0x36>
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fc27 	bl	80014bc <bno055_write_page_id>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73bb      	strb	r3, [r7, #14]
 8001c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <bno055_read_linear_accel_z+0x48>
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <bno055_read_linear_accel_z+0x90>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	791b      	ldrb	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d11b      	bne.n	8001cbc <bno055_read_linear_accel_z+0x80>
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <bno055_read_linear_accel_z+0x90>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691c      	ldr	r4, [r3, #16]
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <bno055_read_linear_accel_z+0x90>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	7a58      	ldrb	r0, [r3, #9]
 8001c90:	f107 020c 	add.w	r2, r7, #12
 8001c94:	2302      	movs	r3, #2
 8001c96:	212c      	movs	r1, #44	@ 0x2c
 8001c98:	47a0      	blx	r4
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ca0:	733b      	strb	r3, [r7, #12]
 8001ca2:	7b7b      	ldrb	r3, [r7, #13]
 8001ca4:	737b      	strb	r3, [r7, #13]
 8001ca6:	7b7b      	ldrb	r3, [r7, #13]
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	7b3b      	ldrb	r3, [r7, #12]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b21a      	sxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	e001      	b.n	8001cc0 <bno055_read_linear_accel_z+0x84>
 8001cbc:	23ff      	movs	r3, #255	@ 0xff
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd90      	pop	{r4, r7, pc}
 8001ccc:	24000224 	.word	0x24000224

08001cd0 <bno055_read_gravity_x>:
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	23ff      	movs	r3, #255	@ 0xff
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	81bb      	strh	r3, [r7, #12]
 8001ce0:	23ff      	movs	r3, #255	@ 0xff
 8001ce2:	73bb      	strb	r3, [r7, #14]
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <bno055_read_gravity_x+0x90>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <bno055_read_gravity_x+0x22>
 8001cec:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001cf0:	e032      	b.n	8001d58 <bno055_read_gravity_x+0x88>
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <bno055_read_gravity_x+0x90>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <bno055_read_gravity_x+0x36>
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff fbdd 	bl	80014bc <bno055_write_page_id>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73bb      	strb	r3, [r7, #14]
 8001d06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <bno055_read_gravity_x+0x48>
 8001d0e:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <bno055_read_gravity_x+0x90>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	791b      	ldrb	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d11b      	bne.n	8001d50 <bno055_read_gravity_x+0x80>
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <bno055_read_gravity_x+0x90>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691c      	ldr	r4, [r3, #16]
 8001d1e:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <bno055_read_gravity_x+0x90>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	7a58      	ldrb	r0, [r3, #9]
 8001d24:	f107 020c 	add.w	r2, r7, #12
 8001d28:	2302      	movs	r3, #2
 8001d2a:	212e      	movs	r1, #46	@ 0x2e
 8001d2c:	47a0      	blx	r4
 8001d2e:	4603      	mov	r3, r0
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	7b3b      	ldrb	r3, [r7, #12]
 8001d34:	733b      	strb	r3, [r7, #12]
 8001d36:	7b7b      	ldrb	r3, [r7, #13]
 8001d38:	737b      	strb	r3, [r7, #13]
 8001d3a:	7b7b      	ldrb	r3, [r7, #13]
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	7b3b      	ldrb	r3, [r7, #12]
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b21a      	sxth	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	801a      	strh	r2, [r3, #0]
 8001d4e:	e001      	b.n	8001d54 <bno055_read_gravity_x+0x84>
 8001d50:	23ff      	movs	r3, #255	@ 0xff
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	24000224 	.word	0x24000224

08001d64 <bno055_read_gravity_y>:
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	23ff      	movs	r3, #255	@ 0xff
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	2300      	movs	r3, #0
 8001d72:	81bb      	strh	r3, [r7, #12]
 8001d74:	23ff      	movs	r3, #255	@ 0xff
 8001d76:	73bb      	strb	r3, [r7, #14]
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <bno055_read_gravity_y+0x90>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <bno055_read_gravity_y+0x22>
 8001d80:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001d84:	e032      	b.n	8001dec <bno055_read_gravity_y+0x88>
 8001d86:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <bno055_read_gravity_y+0x90>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	791b      	ldrb	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <bno055_read_gravity_y+0x36>
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff fb93 	bl	80014bc <bno055_write_page_id>
 8001d96:	4603      	mov	r3, r0
 8001d98:	73bb      	strb	r3, [r7, #14]
 8001d9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <bno055_read_gravity_y+0x48>
 8001da2:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <bno055_read_gravity_y+0x90>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	791b      	ldrb	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d11b      	bne.n	8001de4 <bno055_read_gravity_y+0x80>
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <bno055_read_gravity_y+0x90>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691c      	ldr	r4, [r3, #16]
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <bno055_read_gravity_y+0x90>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	7a58      	ldrb	r0, [r3, #9]
 8001db8:	f107 020c 	add.w	r2, r7, #12
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	2130      	movs	r1, #48	@ 0x30
 8001dc0:	47a0      	blx	r4
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	7b3b      	ldrb	r3, [r7, #12]
 8001dc8:	733b      	strb	r3, [r7, #12]
 8001dca:	7b7b      	ldrb	r3, [r7, #13]
 8001dcc:	737b      	strb	r3, [r7, #13]
 8001dce:	7b7b      	ldrb	r3, [r7, #13]
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	7b3b      	ldrb	r3, [r7, #12]
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	801a      	strh	r2, [r3, #0]
 8001de2:	e001      	b.n	8001de8 <bno055_read_gravity_y+0x84>
 8001de4:	23ff      	movs	r3, #255	@ 0xff
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}
 8001df4:	24000224 	.word	0x24000224

08001df8 <bno055_read_gravity_z>:
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	23ff      	movs	r3, #255	@ 0xff
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	2300      	movs	r3, #0
 8001e06:	81bb      	strh	r3, [r7, #12]
 8001e08:	23ff      	movs	r3, #255	@ 0xff
 8001e0a:	73bb      	strb	r3, [r7, #14]
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e88 <bno055_read_gravity_z+0x90>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <bno055_read_gravity_z+0x22>
 8001e14:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001e18:	e032      	b.n	8001e80 <bno055_read_gravity_z+0x88>
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <bno055_read_gravity_z+0x90>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	791b      	ldrb	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <bno055_read_gravity_z+0x36>
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff fb49 	bl	80014bc <bno055_write_page_id>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73bb      	strb	r3, [r7, #14]
 8001e2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d004      	beq.n	8001e40 <bno055_read_gravity_z+0x48>
 8001e36:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <bno055_read_gravity_z+0x90>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	791b      	ldrb	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11b      	bne.n	8001e78 <bno055_read_gravity_z+0x80>
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <bno055_read_gravity_z+0x90>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691c      	ldr	r4, [r3, #16]
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <bno055_read_gravity_z+0x90>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	7a58      	ldrb	r0, [r3, #9]
 8001e4c:	f107 020c 	add.w	r2, r7, #12
 8001e50:	2302      	movs	r3, #2
 8001e52:	2132      	movs	r1, #50	@ 0x32
 8001e54:	47a0      	blx	r4
 8001e56:	4603      	mov	r3, r0
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	7b3b      	ldrb	r3, [r7, #12]
 8001e5c:	733b      	strb	r3, [r7, #12]
 8001e5e:	7b7b      	ldrb	r3, [r7, #13]
 8001e60:	737b      	strb	r3, [r7, #13]
 8001e62:	7b7b      	ldrb	r3, [r7, #13]
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	b21a      	sxth	r2, r3
 8001e6a:	7b3b      	ldrb	r3, [r7, #12]
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b21a      	sxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	801a      	strh	r2, [r3, #0]
 8001e76:	e001      	b.n	8001e7c <bno055_read_gravity_z+0x84>
 8001e78:	23ff      	movs	r3, #255	@ 0xff
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	24000224 	.word	0x24000224

08001e8c <bno_read_fusion_data>:


	return (int8_t)comres;
}

AHRS_9_Axis_Data bno_read_fusion_data(){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b09c      	sub	sp, #112	@ 0x70
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

    int8_t comres = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    // Initialize the return structure
    AHRS_9_Axis_Data data = {0};
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	2260      	movs	r2, #96	@ 0x60
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f00c fd3e 	bl	800e924 <memset>

    // Read Euler angles (Orientation)
    comres += bno055_read_euler_h(&euler_data_h);
 8001ea8:	4893      	ldr	r0, [pc, #588]	@ (80020f8 <bno_read_fusion_data+0x26c>)
 8001eaa:	f7ff fc2d 	bl	8001708 <bno055_read_euler_h>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_euler_r(&euler_data_r);
 8001ebe:	488f      	ldr	r0, [pc, #572]	@ (80020fc <bno_read_fusion_data+0x270>)
 8001ec0:	f7ff fc6c 	bl	800179c <bno055_read_euler_r>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ecc:	4413      	add	r3, r2
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_euler_p(&euler_data_p);
 8001ed4:	488a      	ldr	r0, [pc, #552]	@ (8002100 <bno_read_fusion_data+0x274>)
 8001ed6:	f7ff fcab 	bl	8001830 <bno055_read_euler_p>
 8001eda:	4603      	mov	r3, r0
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    data.orientation[0] = euler_data_p;
 8001eea:	4b85      	ldr	r3, [pc, #532]	@ (8002100 <bno_read_fusion_data+0x274>)
 8001eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ef8:	ed87 7b02 	vstr	d7, [r7, #8]
    data.orientation[1] = euler_data_r;
 8001efc:	4b7f      	ldr	r3, [pc, #508]	@ (80020fc <bno_read_fusion_data+0x270>)
 8001efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f0a:	ed87 7b04 	vstr	d7, [r7, #16]
    data.orientation[2] = euler_data_h;
 8001f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80020f8 <bno_read_fusion_data+0x26c>)
 8001f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f1c:	ed87 7b06 	vstr	d7, [r7, #24]

    // Read Quaternion data (Optional, not used in this example)
    comres += bno055_read_quaternion_w(&quaternion_data_w);
 8001f20:	4878      	ldr	r0, [pc, #480]	@ (8002104 <bno_read_fusion_data+0x278>)
 8001f22:	f7ff fccf 	bl	80018c4 <bno055_read_quaternion_w>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f2e:	4413      	add	r3, r2
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_quaternion_x(&quaternion_data_x);
 8001f36:	4874      	ldr	r0, [pc, #464]	@ (8002108 <bno_read_fusion_data+0x27c>)
 8001f38:	f7ff fd0e 	bl	8001958 <bno055_read_quaternion_x>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f44:	4413      	add	r3, r2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_quaternion_y(&quaternion_data_y);
 8001f4c:	486f      	ldr	r0, [pc, #444]	@ (800210c <bno_read_fusion_data+0x280>)
 8001f4e:	f7ff fd4d 	bl	80019ec <bno055_read_quaternion_y>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_quaternion_z(&quaternion_data_z);
 8001f62:	486b      	ldr	r0, [pc, #428]	@ (8002110 <bno_read_fusion_data+0x284>)
 8001f64:	f7ff fd8c 	bl	8001a80 <bno055_read_quaternion_z>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f70:	4413      	add	r3, r2
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    // Read Linear acceleration
    comres += bno055_read_linear_accel_x(&linear_accel_data_x);
 8001f78:	4866      	ldr	r0, [pc, #408]	@ (8002114 <bno_read_fusion_data+0x288>)
 8001f7a:	f7ff fdcb 	bl	8001b14 <bno055_read_linear_accel_x>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f86:	4413      	add	r3, r2
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_linear_accel_y(&linear_accel_data_y);
 8001f8e:	4862      	ldr	r0, [pc, #392]	@ (8002118 <bno_read_fusion_data+0x28c>)
 8001f90:	f7ff fe0a 	bl	8001ba8 <bno055_read_linear_accel_y>
 8001f94:	4603      	mov	r3, r0
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_linear_accel_z(&linear_accel_data_z);
 8001fa4:	485d      	ldr	r0, [pc, #372]	@ (800211c <bno_read_fusion_data+0x290>)
 8001fa6:	f7ff fe49 	bl	8001c3c <bno055_read_linear_accel_z>
 8001faa:	4603      	mov	r3, r0
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    data.acceleration[0] = linear_accel_data_x;
 8001fba:	4b56      	ldr	r3, [pc, #344]	@ (8002114 <bno_read_fusion_data+0x288>)
 8001fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fc8:	ed87 7b08 	vstr	d7, [r7, #32]
    data.acceleration[1] = linear_accel_data_y;
 8001fcc:	4b52      	ldr	r3, [pc, #328]	@ (8002118 <bno_read_fusion_data+0x28c>)
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fda:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    data.acceleration[2] = linear_accel_data_z;
 8001fde:	4b4f      	ldr	r3, [pc, #316]	@ (800211c <bno_read_fusion_data+0x290>)
 8001fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fec:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

    // Read Gravity data
    comres += bno055_read_gravity_x(&gravity_data_x);
 8001ff0:	484b      	ldr	r0, [pc, #300]	@ (8002120 <bno_read_fusion_data+0x294>)
 8001ff2:	f7ff fe6d 	bl	8001cd0 <bno055_read_gravity_x>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ffe:	4413      	add	r3, r2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_gravity_y(&gravity_data_y);
 8002006:	4847      	ldr	r0, [pc, #284]	@ (8002124 <bno_read_fusion_data+0x298>)
 8002008:	f7ff feac 	bl	8001d64 <bno055_read_gravity_y>
 800200c:	4603      	mov	r3, r0
 800200e:	b2da      	uxtb	r2, r3
 8002010:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002014:	4413      	add	r3, r2
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_gravity_z(&gravity_data_z);
 800201c:	4842      	ldr	r0, [pc, #264]	@ (8002128 <bno_read_fusion_data+0x29c>)
 800201e:	f7ff feeb 	bl	8001df8 <bno055_read_gravity_z>
 8002022:	4603      	mov	r3, r0
 8002024:	b2da      	uxtb	r2, r3
 8002026:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800202a:	4413      	add	r3, r2
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    // Gravity data can be used as gyroscope data
    data.gyroscope[0] = gravity_data_x;
 8002032:	4b3b      	ldr	r3, [pc, #236]	@ (8002120 <bno_read_fusion_data+0x294>)
 8002034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002040:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    data.gyroscope[1] = gravity_data_y;
 8002044:	4b37      	ldr	r3, [pc, #220]	@ (8002124 <bno_read_fusion_data+0x298>)
 8002046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002052:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    data.gyroscope[2] = gravity_data_z;
 8002056:	4b34      	ldr	r3, [pc, #208]	@ (8002128 <bno_read_fusion_data+0x29c>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002064:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48

    // Read Magnetometer data
    comres += bno055_read_mag_x(&mag_datax);
 8002068:	4830      	ldr	r0, [pc, #192]	@ (800212c <bno_read_fusion_data+0x2a0>)
 800206a:	f7ff fa6f 	bl	800154c <bno055_read_mag_x>
 800206e:	4603      	mov	r3, r0
 8002070:	b2da      	uxtb	r2, r3
 8002072:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002076:	4413      	add	r3, r2
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_mag_y(&mag_datay);
 800207e:	482c      	ldr	r0, [pc, #176]	@ (8002130 <bno_read_fusion_data+0x2a4>)
 8002080:	f7ff faae 	bl	80015e0 <bno055_read_mag_y>
 8002084:	4603      	mov	r3, r0
 8002086:	b2da      	uxtb	r2, r3
 8002088:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800208c:	4413      	add	r3, r2
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_mag_z(&mag_dataz);
 8002094:	4827      	ldr	r0, [pc, #156]	@ (8002134 <bno_read_fusion_data+0x2a8>)
 8002096:	f7ff faed 	bl	8001674 <bno055_read_mag_z>
 800209a:	4603      	mov	r3, r0
 800209c:	b2da      	uxtb	r2, r3
 800209e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80020a2:	4413      	add	r3, r2
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    data.magnetometer[0] = mag_datax;
 80020aa:	4b20      	ldr	r3, [pc, #128]	@ (800212c <bno_read_fusion_data+0x2a0>)
 80020ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020b8:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    data.magnetometer[1] = mag_datay;
 80020bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <bno_read_fusion_data+0x2a4>)
 80020be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020ca:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    data.magnetometer[2] = mag_dataz;
 80020ce:	4b19      	ldr	r3, [pc, #100]	@ (8002134 <bno_read_fusion_data+0x2a8>)
 80020d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020dc:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    // Check communication results (Optional, for debugging)
    if (comres != 0) {
        //printf("Communication error: %d\n", comres);
    }

    return data;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	2260      	movs	r2, #96	@ 0x60
 80020ea:	4619      	mov	r1, r3
 80020ec:	f00c fc99 	bl	800ea22 <memcpy>
}
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	3770      	adds	r7, #112	@ 0x70
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	2400022e 	.word	0x2400022e
 80020fc:	24000230 	.word	0x24000230
 8002100:	24000232 	.word	0x24000232
 8002104:	24000234 	.word	0x24000234
 8002108:	24000236 	.word	0x24000236
 800210c:	24000238 	.word	0x24000238
 8002110:	2400023a 	.word	0x2400023a
 8002114:	2400023c 	.word	0x2400023c
 8002118:	2400023e 	.word	0x2400023e
 800211c:	24000240 	.word	0x24000240
 8002120:	24000242 	.word	0x24000242
 8002124:	24000244 	.word	0x24000244
 8002128:	24000246 	.word	0x24000246
 800212c:	24000228 	.word	0x24000228
 8002130:	2400022a 	.word	0x2400022a
 8002134:	2400022c 	.word	0x2400022c

08002138 <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0

  enableCSB();
 800213c:	f000 fbf6 	bl	800292c <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <MS5607_Init+0x54>)
 8002142:	221e      	movs	r2, #30
 8002144:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8002146:	230a      	movs	r3, #10
 8002148:	2201      	movs	r2, #1
 800214a:	4910      	ldr	r1, [pc, #64]	@ (800218c <MS5607_Init+0x54>)
 800214c:	4810      	ldr	r0, [pc, #64]	@ (8002190 <MS5607_Init+0x58>)
 800214e:	f007 fc97 	bl	8009a80 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8002152:	bf00      	nop
 8002154:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <MS5607_Init+0x58>)
 8002156:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d0f9      	beq.n	8002154 <MS5607_Init+0x1c>
  HAL_Delay(3);
 8002160:	2003      	movs	r0, #3
 8002162:	f001 ffa3 	bl	80040ac <HAL_Delay>
  disableCSB();
 8002166:	f000 fbed 	bl	8002944 <disableCSB>

  MS5607PromRead(&promData);
 800216a:	480a      	ldr	r0, [pc, #40]	@ (8002194 <MS5607_Init+0x5c>)
 800216c:	f000 f814 	bl	8002198 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <MS5607_Init+0x5c>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <MS5607_Init+0x48>
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <MS5607_Init+0x5c>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	2bff      	cmp	r3, #255	@ 0xff
 800217e:	d101      	bne.n	8002184 <MS5607_Init+0x4c>
	 //printf("MS5607 Init fail! \n");
    return MS5607_STATE_FAILED;
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <MS5607_Init+0x4e>
  } else {
	  //printf("MS5607 Init success! \n");
    return MS5607_STATE_READY;
 8002184:	2300      	movs	r3, #0
  }
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	24000248 	.word	0x24000248
 8002190:	240004f4 	.word	0x240004f4
 8002194:	2400024c 	.word	0x2400024c

08002198 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 80021a4:	2300      	movs	r3, #0
 80021a6:	75fb      	strb	r3, [r7, #23]
 80021a8:	e01e      	b.n	80021e8 <MS5607PromRead+0x50>
    SPITransmitData = PROM_READ(address);
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <MS5607PromRead+0x98>)
 80021ba:	701a      	strb	r2, [r3, #0]
    enableCSB();
 80021bc:	f000 fbb6 	bl	800292c <enableCSB>
    HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 80021c0:	230a      	movs	r3, #10
 80021c2:	2201      	movs	r2, #1
 80021c4:	491a      	ldr	r1, [pc, #104]	@ (8002230 <MS5607PromRead+0x98>)
 80021c6:	481b      	ldr	r0, [pc, #108]	@ (8002234 <MS5607PromRead+0x9c>)
 80021c8:	f007 fc5a 	bl	8009a80 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(&hspi4, structPointer, 2, 10);
 80021cc:	230a      	movs	r3, #10
 80021ce:	2202      	movs	r2, #2
 80021d0:	6939      	ldr	r1, [r7, #16]
 80021d2:	4818      	ldr	r0, [pc, #96]	@ (8002234 <MS5607PromRead+0x9c>)
 80021d4:	f007 fe42 	bl	8009e5c <HAL_SPI_Receive>
    disableCSB();
 80021d8:	f000 fbb4 	bl	8002944 <disableCSB>
    structPointer++;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	3302      	adds	r3, #2
 80021e0:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	3301      	adds	r3, #1
 80021e6:	75fb      	strb	r3, [r7, #23]
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
 80021ea:	2b07      	cmp	r3, #7
 80021ec:	d9dd      	bls.n	80021aa <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	75fb      	strb	r3, [r7, #23]
 80021f6:	e012      	b.n	800221e <MS5607PromRead+0x86>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	785a      	ldrb	r2, [r3, #1]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3301      	adds	r3, #1
 800220e:	7afa      	ldrb	r2, [r7, #11]
 8002210:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	3302      	adds	r3, #2
 8002216:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	3301      	adds	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b07      	cmp	r3, #7
 8002222:	d9e9      	bls.n	80021f8 <MS5607PromRead+0x60>
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	24000248 	.word	0x24000248
 8002234:	240004f4 	.word	0x240004f4

08002238 <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues){
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 8002240:	f000 fb74 	bl	800292c <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 8002244:	4b55      	ldr	r3, [pc, #340]	@ (800239c <MS5607UncompensatedRead+0x164>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b54      	ldr	r3, [pc, #336]	@ (80023a0 <MS5607UncompensatedRead+0x168>)
 8002250:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8002252:	230a      	movs	r3, #10
 8002254:	2201      	movs	r2, #1
 8002256:	4952      	ldr	r1, [pc, #328]	@ (80023a0 <MS5607UncompensatedRead+0x168>)
 8002258:	4852      	ldr	r0, [pc, #328]	@ (80023a4 <MS5607UncompensatedRead+0x16c>)
 800225a:	f007 fc11 	bl	8009a80 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 800225e:	bf00      	nop
 8002260:	4b50      	ldr	r3, [pc, #320]	@ (80023a4 <MS5607UncompensatedRead+0x16c>)
 8002262:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d0f9      	beq.n	8002260 <MS5607UncompensatedRead+0x28>

  if(Pressure_OSR == 0x00)
 800226c:	4b4b      	ldr	r3, [pc, #300]	@ (800239c <MS5607UncompensatedRead+0x164>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <MS5607UncompensatedRead+0x44>
    HAL_Delay(1);
 8002274:	2001      	movs	r0, #1
 8002276:	f001 ff19 	bl	80040ac <HAL_Delay>
 800227a:	e01a      	b.n	80022b2 <MS5607UncompensatedRead+0x7a>
  else if(Pressure_OSR == 0x02)
 800227c:	4b47      	ldr	r3, [pc, #284]	@ (800239c <MS5607UncompensatedRead+0x164>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d103      	bne.n	800228c <MS5607UncompensatedRead+0x54>
    HAL_Delay(2);
 8002284:	2002      	movs	r0, #2
 8002286:	f001 ff11 	bl	80040ac <HAL_Delay>
 800228a:	e012      	b.n	80022b2 <MS5607UncompensatedRead+0x7a>
  else if(Pressure_OSR == 0x04)
 800228c:	4b43      	ldr	r3, [pc, #268]	@ (800239c <MS5607UncompensatedRead+0x164>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d103      	bne.n	800229c <MS5607UncompensatedRead+0x64>
    HAL_Delay(3);
 8002294:	2003      	movs	r0, #3
 8002296:	f001 ff09 	bl	80040ac <HAL_Delay>
 800229a:	e00a      	b.n	80022b2 <MS5607UncompensatedRead+0x7a>
  else if(Pressure_OSR == 0x06)
 800229c:	4b3f      	ldr	r3, [pc, #252]	@ (800239c <MS5607UncompensatedRead+0x164>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b06      	cmp	r3, #6
 80022a2:	d103      	bne.n	80022ac <MS5607UncompensatedRead+0x74>
    HAL_Delay(5);
 80022a4:	2005      	movs	r0, #5
 80022a6:	f001 ff01 	bl	80040ac <HAL_Delay>
 80022aa:	e002      	b.n	80022b2 <MS5607UncompensatedRead+0x7a>
  else
    HAL_Delay(10);
 80022ac:	200a      	movs	r0, #10
 80022ae:	f001 fefd 	bl	80040ac <HAL_Delay>

  disableCSB();
 80022b2:	f000 fb47 	bl	8002944 <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 80022b6:	f000 fb39 	bl	800292c <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 80022ba:	4b39      	ldr	r3, [pc, #228]	@ (80023a0 <MS5607UncompensatedRead+0x168>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 80022c0:	230a      	movs	r3, #10
 80022c2:	2201      	movs	r2, #1
 80022c4:	4936      	ldr	r1, [pc, #216]	@ (80023a0 <MS5607UncompensatedRead+0x168>)
 80022c6:	4837      	ldr	r0, [pc, #220]	@ (80023a4 <MS5607UncompensatedRead+0x16c>)
 80022c8:	f007 fbda 	bl	8009a80 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi4, reply, 3, 10);
 80022cc:	f107 010c 	add.w	r1, r7, #12
 80022d0:	230a      	movs	r3, #10
 80022d2:	2203      	movs	r2, #3
 80022d4:	4833      	ldr	r0, [pc, #204]	@ (80023a4 <MS5607UncompensatedRead+0x16c>)
 80022d6:	f007 fdc1 	bl	8009e5c <HAL_SPI_Receive>

  disableCSB();
 80022da:	f000 fb33 	bl	8002944 <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 80022de:	7b3b      	ldrb	r3, [r7, #12]
 80022e0:	041a      	lsls	r2, r3, #16
 80022e2:	7b7b      	ldrb	r3, [r7, #13]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	4313      	orrs	r3, r2
 80022e8:	7bba      	ldrb	r2, [r7, #14]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	601a      	str	r2, [r3, #0]

  enableCSB();
 80022f0:	f000 fb1c 	bl	800292c <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 80022f4:	4b2c      	ldr	r3, [pc, #176]	@ (80023a8 <MS5607UncompensatedRead+0x170>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <MS5607UncompensatedRead+0x168>)
 8002300:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8002302:	230a      	movs	r3, #10
 8002304:	2201      	movs	r2, #1
 8002306:	4926      	ldr	r1, [pc, #152]	@ (80023a0 <MS5607UncompensatedRead+0x168>)
 8002308:	4826      	ldr	r0, [pc, #152]	@ (80023a4 <MS5607UncompensatedRead+0x16c>)
 800230a:	f007 fbb9 	bl	8009a80 <HAL_SPI_Transmit>

  if(Temperature_OSR == 0x00)
 800230e:	4b26      	ldr	r3, [pc, #152]	@ (80023a8 <MS5607UncompensatedRead+0x170>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <MS5607UncompensatedRead+0xe6>
    HAL_Delay(1);
 8002316:	2001      	movs	r0, #1
 8002318:	f001 fec8 	bl	80040ac <HAL_Delay>
 800231c:	e01a      	b.n	8002354 <MS5607UncompensatedRead+0x11c>
  else if(Temperature_OSR == 0x02)
 800231e:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <MS5607UncompensatedRead+0x170>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d103      	bne.n	800232e <MS5607UncompensatedRead+0xf6>
    HAL_Delay(2);
 8002326:	2002      	movs	r0, #2
 8002328:	f001 fec0 	bl	80040ac <HAL_Delay>
 800232c:	e012      	b.n	8002354 <MS5607UncompensatedRead+0x11c>
  else if(Temperature_OSR == 0x04)
 800232e:	4b1e      	ldr	r3, [pc, #120]	@ (80023a8 <MS5607UncompensatedRead+0x170>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b04      	cmp	r3, #4
 8002334:	d103      	bne.n	800233e <MS5607UncompensatedRead+0x106>
    HAL_Delay(3);
 8002336:	2003      	movs	r0, #3
 8002338:	f001 feb8 	bl	80040ac <HAL_Delay>
 800233c:	e00a      	b.n	8002354 <MS5607UncompensatedRead+0x11c>
  else if(Temperature_OSR == 0x06)
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <MS5607UncompensatedRead+0x170>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d103      	bne.n	800234e <MS5607UncompensatedRead+0x116>
    HAL_Delay(5);
 8002346:	2005      	movs	r0, #5
 8002348:	f001 feb0 	bl	80040ac <HAL_Delay>
 800234c:	e002      	b.n	8002354 <MS5607UncompensatedRead+0x11c>
  else
    HAL_Delay(10);
 800234e:	200a      	movs	r0, #10
 8002350:	f001 feac 	bl	80040ac <HAL_Delay>

  disableCSB();
 8002354:	f000 faf6 	bl	8002944 <disableCSB>


  enableCSB();
 8002358:	f000 fae8 	bl	800292c <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 800235c:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <MS5607UncompensatedRead+0x168>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8002362:	230a      	movs	r3, #10
 8002364:	2201      	movs	r2, #1
 8002366:	490e      	ldr	r1, [pc, #56]	@ (80023a0 <MS5607UncompensatedRead+0x168>)
 8002368:	480e      	ldr	r0, [pc, #56]	@ (80023a4 <MS5607UncompensatedRead+0x16c>)
 800236a:	f007 fb89 	bl	8009a80 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi4, reply, 3, 10);
 800236e:	f107 010c 	add.w	r1, r7, #12
 8002372:	230a      	movs	r3, #10
 8002374:	2203      	movs	r2, #3
 8002376:	480b      	ldr	r0, [pc, #44]	@ (80023a4 <MS5607UncompensatedRead+0x16c>)
 8002378:	f007 fd70 	bl	8009e5c <HAL_SPI_Receive>

  disableCSB();
 800237c:	f000 fae2 	bl	8002944 <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8002380:	7b3b      	ldrb	r3, [r7, #12]
 8002382:	041a      	lsls	r2, r3, #16
 8002384:	7b7b      	ldrb	r3, [r7, #13]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	4313      	orrs	r3, r2
 800238a:	7bba      	ldrb	r2, [r7, #14]
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	605a      	str	r2, [r3, #4]
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	24000249 	.word	0x24000249
 80023a0:	24000248 	.word	0x24000248
 80023a4:	240004f4 	.word	0x240004f4
 80023a8:	2400024a 	.word	0x2400024a

080023ac <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607Readings *value){
 80023ac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80023b0:	b0d7      	sub	sp, #348	@ 0x15c
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80023b8:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t) (promData.tref << 8));
 80023bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4bda      	ldr	r3, [pc, #872]	@ (800272c <MS5607Convert+0x380>)
 80023c4:	895b      	ldrh	r3, [r3, #10]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t) dT * promData.tempsens) >> 23);
 80023ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023d2:	17da      	asrs	r2, r3, #31
 80023d4:	469a      	mov	sl, r3
 80023d6:	4693      	mov	fp, r2
 80023d8:	4bd4      	ldr	r3, [pc, #848]	@ (800272c <MS5607Convert+0x380>)
 80023da:	899b      	ldrh	r3, [r3, #12]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2200      	movs	r2, #0
 80023e0:	4698      	mov	r8, r3
 80023e2:	4691      	mov	r9, r2
 80023e4:	fb08 f20b 	mul.w	r2, r8, fp
 80023e8:	fb0a f309 	mul.w	r3, sl, r9
 80023ec:	4413      	add	r3, r2
 80023ee:	fbaa 4508 	umull	r4, r5, sl, r8
 80023f2:	442b      	add	r3, r5
 80023f4:	461d      	mov	r5, r3
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	0de2      	lsrs	r2, r4, #23
 8002400:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8002404:	15eb      	asrs	r3, r5, #23
 8002406:	4613      	mov	r3, r2
 8002408:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800240c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t) promData.off << 17) + (((int64_t) promData.tco * dT) >> 6);
 8002410:	4bc6      	ldr	r3, [pc, #792]	@ (800272c <MS5607Convert+0x380>)
 8002412:	889b      	ldrh	r3, [r3, #4]
 8002414:	b29b      	uxth	r3, r3
 8002416:	2200      	movs	r2, #0
 8002418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800241c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002420:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002424:	460b      	mov	r3, r1
 8002426:	0bdb      	lsrs	r3, r3, #15
 8002428:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800242c:	460b      	mov	r3, r1
 800242e:	045b      	lsls	r3, r3, #17
 8002430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002434:	4bbd      	ldr	r3, [pc, #756]	@ (800272c <MS5607Convert+0x380>)
 8002436:	891b      	ldrh	r3, [r3, #8]
 8002438:	b29b      	uxth	r3, r3
 800243a:	2200      	movs	r2, #0
 800243c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002440:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002444:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002448:	17da      	asrs	r2, r3, #31
 800244a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800244e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002452:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002456:	462b      	mov	r3, r5
 8002458:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800245c:	4642      	mov	r2, r8
 800245e:	fb02 f203 	mul.w	r2, r2, r3
 8002462:	464b      	mov	r3, r9
 8002464:	4621      	mov	r1, r4
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	4622      	mov	r2, r4
 800246e:	4641      	mov	r1, r8
 8002470:	fba2 1201 	umull	r1, r2, r2, r1
 8002474:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8002478:	460a      	mov	r2, r1
 800247a:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 800247e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002482:	4413      	add	r3, r2
 8002484:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8002494:	4621      	mov	r1, r4
 8002496:	098a      	lsrs	r2, r1, #6
 8002498:	4629      	mov	r1, r5
 800249a:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 800249e:	4629      	mov	r1, r5
 80024a0:	118b      	asrs	r3, r1, #6
 80024a2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80024a6:	4621      	mov	r1, r4
 80024a8:	1889      	adds	r1, r1, r2
 80024aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024ac:	4629      	mov	r1, r5
 80024ae:	eb43 0101 	adc.w	r1, r3, r1
 80024b2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80024b4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80024b8:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t) promData.sens << 16) + (((int64_t) promData.tcs * dT) >> 7);
 80024bc:	4b9b      	ldr	r3, [pc, #620]	@ (800272c <MS5607Convert+0x380>)
 80024be:	885b      	ldrh	r3, [r3, #2]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2200      	movs	r2, #0
 80024c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024cc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80024d0:	460b      	mov	r3, r1
 80024d2:	0c1b      	lsrs	r3, r3, #16
 80024d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024d8:	460b      	mov	r3, r1
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024e0:	4b92      	ldr	r3, [pc, #584]	@ (800272c <MS5607Convert+0x380>)
 80024e2:	88db      	ldrh	r3, [r3, #6]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2200      	movs	r2, #0
 80024e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80024f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024f4:	17da      	asrs	r2, r3, #31
 80024f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80024fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80024fe:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8002502:	462b      	mov	r3, r5
 8002504:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002508:	4642      	mov	r2, r8
 800250a:	fb02 f203 	mul.w	r2, r2, r3
 800250e:	464b      	mov	r3, r9
 8002510:	4621      	mov	r1, r4
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	4622      	mov	r2, r4
 800251a:	4641      	mov	r1, r8
 800251c:	fba2 1201 	umull	r1, r2, r2, r1
 8002520:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8002524:	460a      	mov	r2, r1
 8002526:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 800252a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800252e:	4413      	add	r3, r2
 8002530:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8002540:	4621      	mov	r1, r4
 8002542:	09ca      	lsrs	r2, r1, #7
 8002544:	4629      	mov	r1, r5
 8002546:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 800254a:	4629      	mov	r1, r5
 800254c:	11cb      	asrs	r3, r1, #7
 800254e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8002552:	4621      	mov	r1, r4
 8002554:	1889      	adds	r1, r1, r2
 8002556:	6339      	str	r1, [r7, #48]	@ 0x30
 8002558:	4629      	mov	r1, r5
 800255a:	eb43 0101 	adc.w	r1, r3, r1
 800255e:	6379      	str	r1, [r7, #52]	@ 0x34
 8002560:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002564:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000) {
 8002568:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800256c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002570:	f280 8152 	bge.w	8002818 <MS5607Convert+0x46c>
    int32_t T2 = ((int64_t) dT * (int64_t) dT) >> 31;
 8002574:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002578:	17da      	asrs	r2, r3, #31
 800257a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800257e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002582:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002586:	17da      	asrs	r2, r3, #31
 8002588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800258c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002590:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8002594:	462b      	mov	r3, r5
 8002596:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800259a:	4642      	mov	r2, r8
 800259c:	fb02 f203 	mul.w	r2, r2, r3
 80025a0:	464b      	mov	r3, r9
 80025a2:	4621      	mov	r1, r4
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	4622      	mov	r2, r4
 80025ac:	4641      	mov	r1, r8
 80025ae:	fba2 1201 	umull	r1, r2, r2, r1
 80025b2:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80025b6:	460a      	mov	r2, r1
 80025b8:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80025bc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80025c0:	4413      	add	r3, r2
 80025c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80025d2:	4621      	mov	r1, r4
 80025d4:	0fca      	lsrs	r2, r1, #31
 80025d6:	4629      	mov	r1, r5
 80025d8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80025dc:	4629      	mov	r1, r5
 80025de:	17cb      	asrs	r3, r1, #31
 80025e0:	4613      	mov	r3, r2
 80025e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 80025e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80025ea:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80025ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t) TEMPM * (int64_t) TEMPM) >> 4;
 80025f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80025f6:	17da      	asrs	r2, r3, #31
 80025f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002600:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002604:	17da      	asrs	r2, r3, #31
 8002606:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800260a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800260e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8002612:	462b      	mov	r3, r5
 8002614:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8002618:	4642      	mov	r2, r8
 800261a:	fb02 f203 	mul.w	r2, r2, r3
 800261e:	464b      	mov	r3, r9
 8002620:	4621      	mov	r1, r4
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	4622      	mov	r2, r4
 800262a:	4641      	mov	r1, r8
 800262c:	fba2 1201 	umull	r1, r2, r2, r1
 8002630:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002634:	460a      	mov	r2, r1
 8002636:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800263a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800263e:	4413      	add	r3, r2
 8002640:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002644:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002648:	4622      	mov	r2, r4
 800264a:	462b      	mov	r3, r5
 800264c:	f04f 0000 	mov.w	r0, #0
 8002650:	f04f 0100 	mov.w	r1, #0
 8002654:	0119      	lsls	r1, r3, #4
 8002656:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800265a:	0110      	lsls	r0, r2, #4
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4621      	mov	r1, r4
 8002662:	1a51      	subs	r1, r2, r1
 8002664:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002666:	4629      	mov	r1, r5
 8002668:	eb63 0301 	sbc.w	r3, r3, r1
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800267a:	4649      	mov	r1, r9
 800267c:	008b      	lsls	r3, r1, #2
 800267e:	4641      	mov	r1, r8
 8002680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002684:	4641      	mov	r1, r8
 8002686:	008a      	lsls	r2, r1, #2
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	4603      	mov	r3, r0
 800268e:	4622      	mov	r2, r4
 8002690:	189b      	adds	r3, r3, r2
 8002692:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002694:	462b      	mov	r3, r5
 8002696:	460a      	mov	r2, r1
 8002698:	eb42 0303 	adc.w	r3, r2, r3
 800269c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80026aa:	4621      	mov	r1, r4
 80026ac:	090a      	lsrs	r2, r1, #4
 80026ae:	4629      	mov	r1, r5
 80026b0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80026b4:	4629      	mov	r1, r5
 80026b6:	110b      	asrs	r3, r1, #4
 80026b8:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t) TEMPM * (int64_t) TEMPM;
 80026bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80026c0:	17da      	asrs	r2, r3, #31
 80026c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80026c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80026c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80026ca:	17da      	asrs	r2, r3, #31
 80026cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026d0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80026d4:	462b      	mov	r3, r5
 80026d6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80026da:	4642      	mov	r2, r8
 80026dc:	fb02 f203 	mul.w	r2, r2, r3
 80026e0:	464b      	mov	r3, r9
 80026e2:	4621      	mov	r1, r4
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	4622      	mov	r2, r4
 80026ec:	4641      	mov	r1, r8
 80026ee:	fba2 1201 	umull	r1, r2, r2, r1
 80026f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026f6:	460a      	mov	r2, r1
 80026f8:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80026fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002700:	4413      	add	r3, r2
 8002702:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002706:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800270a:	460b      	mov	r3, r1
 800270c:	18db      	adds	r3, r3, r3
 800270e:	623b      	str	r3, [r7, #32]
 8002710:	4613      	mov	r3, r2
 8002712:	eb42 0303 	adc.w	r3, r2, r3
 8002716:	627b      	str	r3, [r7, #36]	@ 0x24
 8002718:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800271c:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500) {
 8002720:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8002724:	4b02      	ldr	r3, [pc, #8]	@ (8002730 <MS5607Convert+0x384>)
 8002726:	429a      	cmp	r2, r3
 8002728:	da55      	bge.n	80027d6 <MS5607Convert+0x42a>
 800272a:	e003      	b.n	8002734 <MS5607Convert+0x388>
 800272c:	2400024c 	.word	0x2400024c
 8002730:	fffffa24 	.word	0xfffffa24
      int32_t TEMPP = TEMP + 1500;
 8002734:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002738:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800273c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 8002740:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002744:	fb03 f303 	mul.w	r3, r3, r3
 8002748:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t) 15 * TEMPP2;
 800274c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002750:	17da      	asrs	r2, r3, #31
 8002752:	663b      	str	r3, [r7, #96]	@ 0x60
 8002754:	667a      	str	r2, [r7, #100]	@ 0x64
 8002756:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800275a:	4622      	mov	r2, r4
 800275c:	462b      	mov	r3, r5
 800275e:	f04f 0000 	mov.w	r0, #0
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	0119      	lsls	r1, r3, #4
 8002768:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800276c:	0110      	lsls	r0, r2, #4
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4621      	mov	r1, r4
 8002774:	1a51      	subs	r1, r2, r1
 8002776:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002778:	4629      	mov	r1, r5
 800277a:	eb63 0301 	sbc.w	r3, r3, r1
 800277e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002780:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8002784:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8002788:	4621      	mov	r1, r4
 800278a:	1851      	adds	r1, r2, r1
 800278c:	61b9      	str	r1, [r7, #24]
 800278e:	4629      	mov	r1, r5
 8002790:	eb43 0101 	adc.w	r1, r3, r1
 8002794:	61f9      	str	r1, [r7, #28]
 8002796:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800279a:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t) 8 * TEMPP2;
 800279e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027a2:	17da      	asrs	r2, r3, #31
 80027a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80027a6:	657a      	str	r2, [r7, #84]	@ 0x54
 80027a8:	f04f 0000 	mov.w	r0, #0
 80027ac:	f04f 0100 	mov.w	r1, #0
 80027b0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80027b4:	462b      	mov	r3, r5
 80027b6:	00d9      	lsls	r1, r3, #3
 80027b8:	4623      	mov	r3, r4
 80027ba:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80027be:	4623      	mov	r3, r4
 80027c0:	00d8      	lsls	r0, r3, #3
 80027c2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80027c6:	1814      	adds	r4, r2, r0
 80027c8:	613c      	str	r4, [r7, #16]
 80027ca:	414b      	adcs	r3, r1
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80027d2:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 80027d6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80027da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 80027e4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80027e8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80027ec:	1a84      	subs	r4, r0, r2
 80027ee:	60bc      	str	r4, [r7, #8]
 80027f0:	eb61 0303 	sbc.w	r3, r1, r3
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80027fa:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 80027fe:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8002802:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002806:	1a84      	subs	r4, r0, r2
 8002808:	603c      	str	r4, [r7, #0]
 800280a:	eb61 0303 	sbc.w	r3, r1, r3
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002814:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t) sample->pressure * SENS) >> 21) - OFF) >> 15;
 8002818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002822:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002824:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002828:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800282c:	462a      	mov	r2, r5
 800282e:	fb02 f203 	mul.w	r2, r2, r3
 8002832:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002836:	4621      	mov	r1, r4
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8002842:	4621      	mov	r1, r4
 8002844:	fba2 1201 	umull	r1, r2, r2, r1
 8002848:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800284c:	460a      	mov	r2, r1
 800284e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8002852:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002856:	4413      	add	r3, r2
 8002858:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8002868:	4621      	mov	r1, r4
 800286a:	0d4a      	lsrs	r2, r1, #21
 800286c:	4629      	mov	r1, r5
 800286e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8002872:	4629      	mov	r1, r5
 8002874:	154b      	asrs	r3, r1, #21
 8002876:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800287a:	1a14      	subs	r4, r2, r0
 800287c:	643c      	str	r4, [r7, #64]	@ 0x40
 800287e:	eb63 0301 	sbc.w	r3, r3, r1
 8002882:	647b      	str	r3, [r7, #68]	@ 0x44
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002890:	4621      	mov	r1, r4
 8002892:	0bca      	lsrs	r2, r1, #15
 8002894:	4629      	mov	r1, r5
 8002896:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800289a:	4629      	mov	r1, r5
 800289c:	13cb      	asrs	r3, r1, #15
 800289e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80028a2:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 80028a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80028a8:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80028ac:	605a      	str	r2, [r3, #4]
}
 80028ae:	bf00      	nop
 80028b0:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 80028b4:	46bd      	mov	sp, r7
 80028b6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80028ba:	4770      	bx	lr

080028bc <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void){
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 80028c0:	4804      	ldr	r0, [pc, #16]	@ (80028d4 <MS5607Update+0x18>)
 80028c2:	f7ff fcb9 	bl	8002238 <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 80028c6:	4904      	ldr	r1, [pc, #16]	@ (80028d8 <MS5607Update+0x1c>)
 80028c8:	4802      	ldr	r0, [pc, #8]	@ (80028d4 <MS5607Update+0x18>)
 80028ca:	f7ff fd6f 	bl	80023ac <MS5607Convert>
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2400025c 	.word	0x2400025c
 80028d8:	24000264 	.word	0x24000264
 80028dc:	00000000 	.word	0x00000000

080028e0 <MS5607GetTemperatureC>:

/* Gets the temperature from the sensor reading */
double MS5607GetTemperatureC(void){
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return (double)readings.temperature/(double)100.0;
 80028e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <MS5607GetTemperatureC+0x30>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028f0:	ed9f 6b05 	vldr	d6, [pc, #20]	@ 8002908 <MS5607GetTemperatureC+0x28>
 80028f4:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80028f8:	eeb0 7b45 	vmov.f64	d7, d5
}
 80028fc:	eeb0 0b47 	vmov.f64	d0, d7
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	00000000 	.word	0x00000000
 800290c:	40590000 	.word	0x40590000
 8002910:	24000264 	.word	0x24000264

08002914 <MS5607GetPressurePa>:

/* Gets the pressure from the sensor reading */
int32_t MS5607GetPressurePa(void){
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return readings.pressure;
 8002918:	4b03      	ldr	r3, [pc, #12]	@ (8002928 <MS5607GetPressurePa+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	24000264 	.word	0x24000264

0800292c <enableCSB>:

/* Sets the CS pin */
void enableCSB(void){
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8002930:	2200      	movs	r2, #0
 8002932:	2110      	movs	r1, #16
 8002934:	4802      	ldr	r0, [pc, #8]	@ (8002940 <enableCSB+0x14>)
 8002936:	f001 fef9 	bl	800472c <HAL_GPIO_WritePin>
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	58021000 	.word	0x58021000

08002944 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8002948:	2201      	movs	r2, #1
 800294a:	2110      	movs	r1, #16
 800294c:	4802      	ldr	r0, [pc, #8]	@ (8002958 <disableCSB+0x14>)
 800294e:	f001 feed 	bl	800472c <HAL_GPIO_WritePin>
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	58021000 	.word	0x58021000

0800295c <MS5607_ReadData>:
void MS5607SetPressureOSR(MS5607OSRFactors pOSR){
  Pressure_OSR = pOSR;
}


Barometer_2_Axis MS5607_ReadData(){
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	Barometer_2_Axis data = {0};
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
	MS5607UncompensatedRead(&uncompValues);
 8002972:	480f      	ldr	r0, [pc, #60]	@ (80029b0 <MS5607_ReadData+0x54>)
 8002974:	f7ff fc60 	bl	8002238 <MS5607UncompensatedRead>
	MS5607Convert(&uncompValues, &readings);
 8002978:	490e      	ldr	r1, [pc, #56]	@ (80029b4 <MS5607_ReadData+0x58>)
 800297a:	480d      	ldr	r0, [pc, #52]	@ (80029b0 <MS5607_ReadData+0x54>)
 800297c:	f7ff fd16 	bl	80023ac <MS5607Convert>
	data.temperature = MS5607GetTemperatureC();
 8002980:	f7ff ffae 	bl	80028e0 <MS5607GetTemperatureC>
 8002984:	eeb0 7b40 	vmov.f64	d7, d0
 8002988:	ed87 7b04 	vstr	d7, [r7, #16]
	data.pressure = MS5607GetPressurePa();
 800298c:	f7ff ffc2 	bl	8002914 <MS5607GetPressurePa>
 8002990:	4603      	mov	r3, r0
 8002992:	60bb      	str	r3, [r7, #8]
	MS5607Update();
 8002994:	f7ff ff92 	bl	80028bc <MS5607Update>
	return data;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	461c      	mov	r4, r3
 800299c:	f107 0308 	add.w	r3, r7, #8
 80029a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2400025c 	.word	0x2400025c
 80029b4:	24000264 	.word	0x24000264

080029b8 <ms5607_print_barometer_data>:


void ms5607_print_barometer_data(Barometer_2_Axis *data) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	printf("MS5607 Barometer: \n");
 80029c0:	4808      	ldr	r0, [pc, #32]	@ (80029e4 <ms5607_print_barometer_data+0x2c>)
 80029c2:	f00b feaf 	bl	800e724 <puts>
	printf("Pressure: %ld Pa, Temperature: %f °C \n", data->pressure, data->temperature);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029d0:	4805      	ldr	r0, [pc, #20]	@ (80029e8 <ms5607_print_barometer_data+0x30>)
 80029d2:	f00b fe3f 	bl	800e654 <iprintf>
    printf("----- \n");
 80029d6:	4805      	ldr	r0, [pc, #20]	@ (80029ec <ms5607_print_barometer_data+0x34>)
 80029d8:	f00b fea4 	bl	800e724 <puts>
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	08011e48 	.word	0x08011e48
 80029e8:	08011e5c 	.word	0x08011e5c
 80029ec:	08011e84 	.word	0x08011e84

080029f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80029f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80029fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002a08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002a0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002a10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002a18:	e000      	b.n	8002a1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8002a1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002a1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f9      	beq.n	8002a1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002a26:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002a30:	687b      	ldr	r3, [r7, #4]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
	int i=0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e009      	b.n	8002a68 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	60ba      	str	r2, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ffc7 	bl	80029f0 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3301      	adds	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	dbf1      	blt.n	8002a54 <_write+0x16>
	}
	return len;
 8002a70:	687b      	ldr	r3, [r7, #4]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002a7e:	f000 fc2d 	bl	80032dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a82:	f001 fa81 	bl	8003f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a86:	f000 f81d 	bl	8002ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a8a:	f000 fb15 	bl	80030b8 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8002a8e:	f000 f947 	bl	8002d20 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8002a92:	f000 f885 	bl	8002ba0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002a96:	f000 f8c3 	bl	8002c20 <MX_I2C2_Init>
  MX_I2C4_Init();
 8002a9a:	f000 f901 	bl	8002ca0 <MX_I2C4_Init>
  MX_SPI1_Init();
 8002a9e:	f000 f95d 	bl	8002d5c <MX_SPI1_Init>
  MX_SPI2_Init();
 8002aa2:	f000 f9b1 	bl	8002e08 <MX_SPI2_Init>
  MX_UART8_Init();
 8002aa6:	f000 fa5b 	bl	8002f60 <MX_UART8_Init>
  MX_USART1_Init();
 8002aaa:	f000 faa7 	bl	8002ffc <MX_USART1_Init>
  MX_SPI4_Init();
 8002aae:	f000 fa01 	bl	8002eb4 <MX_SPI4_Init>
  MX_FATFS_Init();
 8002ab2:	f00a fccf 	bl	800d454 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
  SensorManager_Init();
 8002ab6:	f001 f995 	bl	8003de4 <SensorManager_Init>

  TestTelemetry();
 8002aba:	f001 fa17 	bl	8003eec <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002abe:	bf00      	nop
 8002ac0:	e7fd      	b.n	8002abe <main+0x44>
	...

08002ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b09c      	sub	sp, #112	@ 0x70
 8002ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ace:	224c      	movs	r2, #76	@ 0x4c
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f00b ff26 	bl	800e924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	2220      	movs	r2, #32
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00b ff20 	bl	800e924 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	f001 ff6f 	bl	80049c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002aea:	2300      	movs	r3, #0
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	4b2b      	ldr	r3, [pc, #172]	@ (8002b9c <SystemClock_Config+0xd8>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b9c <SystemClock_Config+0xd8>)
 8002af4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002af8:	6193      	str	r3, [r2, #24]
 8002afa:	4b28      	ldr	r3, [pc, #160]	@ (8002b9c <SystemClock_Config+0xd8>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002b06:	bf00      	nop
 8002b08:	4b24      	ldr	r3, [pc, #144]	@ (8002b9c <SystemClock_Config+0xd8>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b14:	d1f8      	bne.n	8002b08 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b20:	2302      	movs	r3, #2
 8002b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b24:	2302      	movs	r3, #2
 8002b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8002b2c:	231f      	movs	r3, #31
 8002b2e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002b30:	2301      	movs	r3, #1
 8002b32:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b34:	2302      	movs	r3, #2
 8002b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002b3c:	230c      	movs	r3, #12
 8002b3e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8002b44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 ff74 	bl	8004a3c <HAL_RCC_OscConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002b5a:	f000 fbeb 	bl	8003334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b5e:	233f      	movs	r3, #63	@ 0x3f
 8002b60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b62:	2303      	movs	r3, #3
 8002b64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002b6e:	2340      	movs	r3, #64	@ 0x40
 8002b70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002b72:	2340      	movs	r3, #64	@ 0x40
 8002b74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002b7c:	2340      	movs	r3, #64	@ 0x40
 8002b7e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	2103      	movs	r1, #3
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 fb33 	bl	80051f0 <HAL_RCC_ClockConfig>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002b90:	f000 fbd0 	bl	8003334 <Error_Handler>
  }
}
 8002b94:	bf00      	nop
 8002b96:	3770      	adds	r7, #112	@ 0x70
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	58024800 	.word	0x58024800

08002ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <MX_I2C1_Init+0x78>)
 8002ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bac:	4a1b      	ldr	r2, [pc, #108]	@ (8002c1c <MX_I2C1_Init+0x7c>)
 8002bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bb0:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bc2:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bce:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bda:	480e      	ldr	r0, [pc, #56]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bdc:	f001 fdc0 	bl	8004760 <HAL_I2C_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002be6:	f000 fba5 	bl	8003334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bea:	2100      	movs	r1, #0
 8002bec:	4809      	ldr	r0, [pc, #36]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bee:	f001 fe53 	bl	8004898 <HAL_I2CEx_ConfigAnalogFilter>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bf8:	f000 fb9c 	bl	8003334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4805      	ldr	r0, [pc, #20]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002c00:	f001 fe95 	bl	800492e <HAL_I2CEx_ConfigDigitalFilter>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c0a:	f000 fb93 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	2400026c 	.word	0x2400026c
 8002c18:	40005400 	.word	0x40005400
 8002c1c:	20a0a3f6 	.word	0x20a0a3f6

08002c20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c26:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <MX_I2C2_Init+0x78>)
 8002c28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c9c <MX_I2C2_Init+0x7c>)
 8002c2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c30:	4b18      	ldr	r3, [pc, #96]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c36:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c3c:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c48:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c54:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c5a:	480e      	ldr	r0, [pc, #56]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c5c:	f001 fd80 	bl	8004760 <HAL_I2C_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c66:	f000 fb65 	bl	8003334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4809      	ldr	r0, [pc, #36]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c6e:	f001 fe13 	bl	8004898 <HAL_I2CEx_ConfigAnalogFilter>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c78:	f000 fb5c 	bl	8003334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <MX_I2C2_Init+0x74>)
 8002c80:	f001 fe55 	bl	800492e <HAL_I2CEx_ConfigDigitalFilter>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c8a:	f000 fb53 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	240002c0 	.word	0x240002c0
 8002c98:	40005800 	.word	0x40005800
 8002c9c:	20a0a3f6 	.word	0x20a0a3f6

08002ca0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <MX_I2C4_Init+0x78>)
 8002ca8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8002caa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002cac:	4a1b      	ldr	r2, [pc, #108]	@ (8002d1c <MX_I2C4_Init+0x7c>)
 8002cae:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002cb0:	4b18      	ldr	r3, [pc, #96]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cb6:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cbc:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002cc2:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002cda:	480e      	ldr	r0, [pc, #56]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002cdc:	f001 fd40 	bl	8004760 <HAL_I2C_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002ce6:	f000 fb25 	bl	8003334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002cea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cee:	4809      	ldr	r0, [pc, #36]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002cf0:	f001 fdd2 	bl	8004898 <HAL_I2CEx_ConfigAnalogFilter>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8002cfa:	f000 fb1b 	bl	8003334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4804      	ldr	r0, [pc, #16]	@ (8002d14 <MX_I2C4_Init+0x74>)
 8002d02:	f001 fe14 	bl	800492e <HAL_I2CEx_ConfigDigitalFilter>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8002d0c:	f000 fb12 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	24000314 	.word	0x24000314
 8002d18:	58001c00 	.word	0x58001c00
 8002d1c:	60405858 	.word	0x60405858

08002d20 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <MX_SDMMC1_SD_Init+0x34>)
 8002d26:	4a0c      	ldr	r2, [pc, #48]	@ (8002d58 <MX_SDMMC1_SD_Init+0x38>)
 8002d28:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <MX_SDMMC1_SD_Init+0x34>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <MX_SDMMC1_SD_Init+0x34>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002d36:	4b07      	ldr	r3, [pc, #28]	@ (8002d54 <MX_SDMMC1_SD_Init+0x34>)
 8002d38:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d3c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d3e:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <MX_SDMMC1_SD_Init+0x34>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002d44:	4b03      	ldr	r3, [pc, #12]	@ (8002d54 <MX_SDMMC1_SD_Init+0x34>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	24000368 	.word	0x24000368
 8002d58:	52007000 	.word	0x52007000

08002d5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d60:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002d62:	4a28      	ldr	r2, [pc, #160]	@ (8002e04 <MX_SPI1_Init+0xa8>)
 8002d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d66:	4b26      	ldr	r3, [pc, #152]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002d68:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d6e:	4b24      	ldr	r3, [pc, #144]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d74:	4b22      	ldr	r3, [pc, #136]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002d76:	2207      	movs	r2, #7
 8002d78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d7a:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d80:	4b1f      	ldr	r3, [pc, #124]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d86:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002d88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d94:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d9a:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da0:	4b17      	ldr	r3, [pc, #92]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002da6:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dac:	4b14      	ldr	r3, [pc, #80]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002dae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002db2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002db4:	4b12      	ldr	r3, [pc, #72]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002dba:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dea:	4805      	ldr	r0, [pc, #20]	@ (8002e00 <MX_SPI1_Init+0xa4>)
 8002dec:	f006 fd24 	bl	8009838 <HAL_SPI_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8002df6:	f000 fa9d 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	240003e4 	.word	0x240003e4
 8002e04:	40013000 	.word	0x40013000

08002e08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e0c:	4b27      	ldr	r3, [pc, #156]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e0e:	4a28      	ldr	r2, [pc, #160]	@ (8002eb0 <MX_SPI2_Init+0xa8>)
 8002e10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e12:	4b26      	ldr	r3, [pc, #152]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e14:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e1a:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e20:	4b22      	ldr	r3, [pc, #136]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e22:	2207      	movs	r2, #7
 8002e24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e26:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e32:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e34:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e40:	4b1a      	ldr	r3, [pc, #104]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e46:	4b19      	ldr	r3, [pc, #100]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e4c:	4b17      	ldr	r3, [pc, #92]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002e52:	4b16      	ldr	r3, [pc, #88]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e58:	4b14      	ldr	r3, [pc, #80]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e5e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e60:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002e66:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e72:	4b0e      	ldr	r3, [pc, #56]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e78:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002e84:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002e8a:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e96:	4805      	ldr	r0, [pc, #20]	@ (8002eac <MX_SPI2_Init+0xa4>)
 8002e98:	f006 fcce 	bl	8009838 <HAL_SPI_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8002ea2:	f000 fa47 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	2400046c 	.word	0x2400046c
 8002eb0:	40003800 	.word	0x40003800

08002eb4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002eb8:	4b27      	ldr	r3, [pc, #156]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002eba:	4a28      	ldr	r2, [pc, #160]	@ (8002f5c <MX_SPI4_Init+0xa8>)
 8002ebc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002ec0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002ec4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002ec6:	4b24      	ldr	r3, [pc, #144]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ecc:	4b22      	ldr	r3, [pc, #136]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002ece:	2207      	movs	r2, #7
 8002ed0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed2:	4b21      	ldr	r3, [pc, #132]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002ede:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002ee0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ee4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002ee8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002eec:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ef4:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002efa:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002f00:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f06:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002f0e:	4b12      	ldr	r3, [pc, #72]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002f14:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f20:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f26:	4b0c      	ldr	r3, [pc, #48]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002f38:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002f44:	4804      	ldr	r0, [pc, #16]	@ (8002f58 <MX_SPI4_Init+0xa4>)
 8002f46:	f006 fc77 	bl	8009838 <HAL_SPI_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8002f50:	f000 f9f0 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	240004f4 	.word	0x240004f4
 8002f5c:	40013400 	.word	0x40013400

08002f60 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002f64:	4b23      	ldr	r3, [pc, #140]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002f66:	4a24      	ldr	r2, [pc, #144]	@ (8002ff8 <MX_UART8_Init+0x98>)
 8002f68:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002f6a:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f70:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002f72:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002f78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002f84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002f86:	220c      	movs	r2, #12
 8002f88:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002f8c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002f90:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f92:	4b18      	ldr	r3, [pc, #96]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f98:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fa4:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002faa:	4812      	ldr	r0, [pc, #72]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002fac:	f007 fab1 	bl	800a512 <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8002fb6:	f000 f9bd 	bl	8003334 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fba:	2100      	movs	r1, #0
 8002fbc:	480d      	ldr	r0, [pc, #52]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002fbe:	f008 fbbe 	bl	800b73e <HAL_UARTEx_SetTxFifoThreshold>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8002fc8:	f000 f9b4 	bl	8003334 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4809      	ldr	r0, [pc, #36]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002fd0:	f008 fbf3 	bl	800b7ba <HAL_UARTEx_SetRxFifoThreshold>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8002fda:	f000 f9ab 	bl	8003334 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002fde:	4805      	ldr	r0, [pc, #20]	@ (8002ff4 <MX_UART8_Init+0x94>)
 8002fe0:	f008 fb74 	bl	800b6cc <HAL_UARTEx_DisableFifoMode>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8002fea:	f000 f9a3 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2400057c 	.word	0x2400057c
 8002ff8:	40007c00 	.word	0x40007c00

08002ffc <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8003000:	4b2b      	ldr	r3, [pc, #172]	@ (80030b0 <MX_USART1_Init+0xb4>)
 8003002:	4a2c      	ldr	r2, [pc, #176]	@ (80030b4 <MX_USART1_Init+0xb8>)
 8003004:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8003006:	4b2a      	ldr	r3, [pc, #168]	@ (80030b0 <MX_USART1_Init+0xb4>)
 8003008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800300c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800300e:	4b28      	ldr	r3, [pc, #160]	@ (80030b0 <MX_USART1_Init+0xb4>)
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8003014:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <MX_USART1_Init+0xb4>)
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800301a:	4b25      	ldr	r3, [pc, #148]	@ (80030b0 <MX_USART1_Init+0xb4>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8003020:	4b23      	ldr	r3, [pc, #140]	@ (80030b0 <MX_USART1_Init+0xb4>)
 8003022:	220c      	movs	r2, #12
 8003024:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8003026:	4b22      	ldr	r3, [pc, #136]	@ (80030b0 <MX_USART1_Init+0xb4>)
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800302c:	4b20      	ldr	r3, [pc, #128]	@ (80030b0 <MX_USART1_Init+0xb4>)
 800302e:	2200      	movs	r2, #0
 8003030:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8003032:	4b1f      	ldr	r3, [pc, #124]	@ (80030b0 <MX_USART1_Init+0xb4>)
 8003034:	2200      	movs	r2, #0
 8003036:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8003038:	4b1d      	ldr	r3, [pc, #116]	@ (80030b0 <MX_USART1_Init+0xb4>)
 800303a:	2200      	movs	r2, #0
 800303c:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 800303e:	4b1c      	ldr	r3, [pc, #112]	@ (80030b0 <MX_USART1_Init+0xb4>)
 8003040:	2201      	movs	r2, #1
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8003044:	481a      	ldr	r0, [pc, #104]	@ (80030b0 <MX_USART1_Init+0xb4>)
 8003046:	f008 fc45 	bl	800b8d4 <HAL_USART_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8003050:	f000 f970 	bl	8003334 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003054:	2100      	movs	r1, #0
 8003056:	4816      	ldr	r0, [pc, #88]	@ (80030b0 <MX_USART1_Init+0xb4>)
 8003058:	f009 fb6c 	bl	800c734 <HAL_USARTEx_SetTxFifoThreshold>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8003062:	f000 f967 	bl	8003334 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003066:	2100      	movs	r1, #0
 8003068:	4811      	ldr	r0, [pc, #68]	@ (80030b0 <MX_USART1_Init+0xb4>)
 800306a:	f009 fba1 	bl	800c7b0 <HAL_USARTEx_SetRxFifoThreshold>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8003074:	f000 f95e 	bl	8003334 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8003078:	2100      	movs	r1, #0
 800307a:	480d      	ldr	r0, [pc, #52]	@ (80030b0 <MX_USART1_Init+0xb4>)
 800307c:	f009 fae4 	bl	800c648 <HAL_USARTEx_ConfigNSS>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8003086:	f000 f955 	bl	8003334 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 800308a:	4809      	ldr	r0, [pc, #36]	@ (80030b0 <MX_USART1_Init+0xb4>)
 800308c:	f009 fb19 	bl	800c6c2 <HAL_USARTEx_DisableFifoMode>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 8003096:	f000 f94d 	bl	8003334 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 800309a:	4805      	ldr	r0, [pc, #20]	@ (80030b0 <MX_USART1_Init+0xb4>)
 800309c:	f009 fa7f 	bl	800c59e <HAL_USARTEx_EnableSlaveMode>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_USART1_Init+0xae>
  {
    Error_Handler();
 80030a6:	f000 f945 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	24000610 	.word	0x24000610
 80030b4:	40011000 	.word	0x40011000

080030b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08c      	sub	sp, #48	@ 0x30
 80030bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	4b7d      	ldr	r3, [pc, #500]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 80030d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030d4:	4a7b      	ldr	r2, [pc, #492]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 80030d6:	f043 0304 	orr.w	r3, r3, #4
 80030da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030de:	4b79      	ldr	r3, [pc, #484]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 80030e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030ec:	4b75      	ldr	r3, [pc, #468]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 80030ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030f2:	4a74      	ldr	r2, [pc, #464]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 80030f4:	f043 0310 	orr.w	r3, r3, #16
 80030f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030fc:	4b71      	ldr	r3, [pc, #452]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	4b6e      	ldr	r3, [pc, #440]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 800310c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003110:	4a6c      	ldr	r2, [pc, #432]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 8003112:	f043 0302 	orr.w	r3, r3, #2
 8003116:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800311a:	4b6a      	ldr	r3, [pc, #424]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 800311c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003128:	4b66      	ldr	r3, [pc, #408]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 800312a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800312e:	4a65      	ldr	r2, [pc, #404]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003138:	4b62      	ldr	r3, [pc, #392]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 800313a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003146:	4b5f      	ldr	r3, [pc, #380]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 8003148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800314c:	4a5d      	ldr	r2, [pc, #372]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 800314e:	f043 0308 	orr.w	r3, r3, #8
 8003152:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003156:	4b5b      	ldr	r3, [pc, #364]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 8003158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003164:	4b57      	ldr	r3, [pc, #348]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 8003166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800316a:	4a56      	ldr	r2, [pc, #344]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 800316c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003170:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003174:	4b53      	ldr	r3, [pc, #332]	@ (80032c4 <MX_GPIO_Init+0x20c>)
 8003176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800317a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8003182:	2200      	movs	r2, #0
 8003184:	2110      	movs	r1, #16
 8003186:	4850      	ldr	r0, [pc, #320]	@ (80032c8 <MX_GPIO_Init+0x210>)
 8003188:	f001 fad0 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 800318c:	2200      	movs	r2, #0
 800318e:	2110      	movs	r1, #16
 8003190:	484e      	ldr	r0, [pc, #312]	@ (80032cc <MX_GPIO_Init+0x214>)
 8003192:	f001 facb 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 8003196:	2200      	movs	r2, #0
 8003198:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 800319c:	484c      	ldr	r0, [pc, #304]	@ (80032d0 <MX_GPIO_Init+0x218>)
 800319e:	f001 fac5 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 80031a2:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 80031a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a8:	2300      	movs	r3, #0
 80031aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b0:	f107 031c 	add.w	r3, r7, #28
 80031b4:	4619      	mov	r1, r3
 80031b6:	4847      	ldr	r0, [pc, #284]	@ (80032d4 <MX_GPIO_Init+0x21c>)
 80031b8:	f001 f8f8 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80031bc:	2310      	movs	r3, #16
 80031be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c0:	2301      	movs	r3, #1
 80031c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031c8:	2302      	movs	r3, #2
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80031cc:	f107 031c 	add.w	r3, r7, #28
 80031d0:	4619      	mov	r1, r3
 80031d2:	483d      	ldr	r0, [pc, #244]	@ (80032c8 <MX_GPIO_Init+0x210>)
 80031d4:	f001 f8ea 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031d8:	2302      	movs	r3, #2
 80031da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031dc:	2303      	movs	r3, #3
 80031de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031e4:	f107 031c 	add.w	r3, r7, #28
 80031e8:	4619      	mov	r1, r3
 80031ea:	483b      	ldr	r0, [pc, #236]	@ (80032d8 <MX_GPIO_Init+0x220>)
 80031ec:	f001 f8de 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031f0:	2308      	movs	r3, #8
 80031f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031f4:	2303      	movs	r3, #3
 80031f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	4619      	mov	r1, r3
 8003202:	4834      	ldr	r0, [pc, #208]	@ (80032d4 <MX_GPIO_Init+0x21c>)
 8003204:	f001 f8d2 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8003208:	2310      	movs	r3, #16
 800320a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800320c:	2301      	movs	r3, #1
 800320e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	2300      	movs	r3, #0
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8003218:	f107 031c 	add.w	r3, r7, #28
 800321c:	4619      	mov	r1, r3
 800321e:	482b      	ldr	r0, [pc, #172]	@ (80032cc <MX_GPIO_Init+0x214>)
 8003220:	f001 f8c4 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003224:	2304      	movs	r3, #4
 8003226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003228:	2303      	movs	r3, #3
 800322a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003230:	f107 031c 	add.w	r3, r7, #28
 8003234:	4619      	mov	r1, r3
 8003236:	4826      	ldr	r0, [pc, #152]	@ (80032d0 <MX_GPIO_Init+0x218>)
 8003238:	f001 f8b8 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 800323c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8003240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800324a:	f107 031c 	add.w	r3, r7, #28
 800324e:	4619      	mov	r1, r3
 8003250:	481d      	ldr	r0, [pc, #116]	@ (80032c8 <MX_GPIO_Init+0x210>)
 8003252:	f001 f8ab 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 8003256:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800325a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325c:	2301      	movs	r3, #1
 800325e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003264:	2300      	movs	r3, #0
 8003266:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003268:	f107 031c 	add.w	r3, r7, #28
 800326c:	4619      	mov	r1, r3
 800326e:	4818      	ldr	r0, [pc, #96]	@ (80032d0 <MX_GPIO_Init+0x218>)
 8003270:	f001 f89c 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003274:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800327a:	2303      	movs	r3, #3
 800327c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003282:	f107 031c 	add.w	r3, r7, #28
 8003286:	4619      	mov	r1, r3
 8003288:	480f      	ldr	r0, [pc, #60]	@ (80032c8 <MX_GPIO_Init+0x210>)
 800328a:	f001 f88f 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800328e:	2308      	movs	r3, #8
 8003290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003292:	2303      	movs	r3, #3
 8003294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329a:	f107 031c 	add.w	r3, r7, #28
 800329e:	4619      	mov	r1, r3
 80032a0:	480a      	ldr	r0, [pc, #40]	@ (80032cc <MX_GPIO_Init+0x214>)
 80032a2:	f001 f883 	bl	80043ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 80032a6:	2200      	movs	r2, #0
 80032a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032ac:	4808      	ldr	r0, [pc, #32]	@ (80032d0 <MX_GPIO_Init+0x218>)
 80032ae:	f001 fa3d 	bl	800472c <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2110      	movs	r1, #16
 80032b6:	4805      	ldr	r0, [pc, #20]	@ (80032cc <MX_GPIO_Init+0x214>)
 80032b8:	f001 fa38 	bl	800472c <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80032bc:	bf00      	nop
 80032be:	3730      	adds	r7, #48	@ 0x30
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	58024400 	.word	0x58024400
 80032c8:	58021000 	.word	0x58021000
 80032cc:	58020000 	.word	0x58020000
 80032d0:	58020400 	.word	0x58020400
 80032d4:	58020800 	.word	0x58020800
 80032d8:	58020c00 	.word	0x58020c00

080032dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80032e2:	463b      	mov	r3, r7
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80032ee:	f000 ffe5 	bl	80042bc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80032f2:	2301      	movs	r3, #1
 80032f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80032fe:	231f      	movs	r3, #31
 8003300:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003302:	2387      	movs	r3, #135	@ 0x87
 8003304:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003306:	2300      	movs	r3, #0
 8003308:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800330a:	2300      	movs	r3, #0
 800330c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800330e:	2301      	movs	r3, #1
 8003310:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003312:	2301      	movs	r3, #1
 8003314:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003316:	2300      	movs	r3, #0
 8003318:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800331e:	463b      	mov	r3, r7
 8003320:	4618      	mov	r0, r3
 8003322:	f001 f803 	bl	800432c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003326:	2004      	movs	r0, #4
 8003328:	f000 ffe0 	bl	80042ec <HAL_MPU_Enable>

}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003338:	b672      	cpsid	i
}
 800333a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <Error_Handler+0x8>

08003340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <HAL_MspInit+0x30>)
 8003348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800334c:	4a08      	ldr	r2, [pc, #32]	@ (8003370 <HAL_MspInit+0x30>)
 800334e:	f043 0302 	orr.w	r3, r3, #2
 8003352:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <HAL_MspInit+0x30>)
 8003358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	58024400 	.word	0x58024400

08003374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b0bc      	sub	sp, #240	@ 0xf0
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800338c:	f107 0320 	add.w	r3, r7, #32
 8003390:	22b8      	movs	r2, #184	@ 0xb8
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f00b fac5 	bl	800e924 <memset>
  if(hi2c->Instance==I2C1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a74      	ldr	r2, [pc, #464]	@ (8003570 <HAL_I2C_MspInit+0x1fc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d147      	bne.n	8003434 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033a4:	f04f 0208 	mov.w	r2, #8
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033b6:	f107 0320 	add.w	r3, r7, #32
 80033ba:	4618      	mov	r0, r3
 80033bc:	f002 faa4 	bl	8005908 <HAL_RCCEx_PeriphCLKConfig>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80033c6:	f7ff ffb5 	bl	8003334 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 80033cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033d0:	4a68      	ldr	r2, [pc, #416]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033da:	4b66      	ldr	r3, [pc, #408]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 80033dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80033e8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80033ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033f0:	2312      	movs	r3, #18
 80033f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003402:	2304      	movs	r3, #4
 8003404:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003408:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800340c:	4619      	mov	r1, r3
 800340e:	485a      	ldr	r0, [pc, #360]	@ (8003578 <HAL_I2C_MspInit+0x204>)
 8003410:	f000 ffcc 	bl	80043ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003414:	4b57      	ldr	r3, [pc, #348]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 8003416:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800341a:	4a56      	ldr	r2, [pc, #344]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 800341c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003420:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003424:	4b53      	ldr	r3, [pc, #332]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 8003426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800342a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003432:	e098      	b.n	8003566 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a50      	ldr	r2, [pc, #320]	@ (800357c <HAL_I2C_MspInit+0x208>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d147      	bne.n	80034ce <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800343e:	f04f 0208 	mov.w	r2, #8
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800344a:	2300      	movs	r3, #0
 800344c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003450:	f107 0320 	add.w	r3, r7, #32
 8003454:	4618      	mov	r0, r3
 8003456:	f002 fa57 	bl	8005908 <HAL_RCCEx_PeriphCLKConfig>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8003460:	f7ff ff68 	bl	8003334 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003464:	4b43      	ldr	r3, [pc, #268]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 8003466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800346a:	4a42      	ldr	r2, [pc, #264]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003474:	4b3f      	ldr	r3, [pc, #252]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 8003476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003482:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003486:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800348a:	2312      	movs	r3, #18
 800348c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800349c:	2304      	movs	r3, #4
 800349e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80034a6:	4619      	mov	r1, r3
 80034a8:	4833      	ldr	r0, [pc, #204]	@ (8003578 <HAL_I2C_MspInit+0x204>)
 80034aa:	f000 ff7f 	bl	80043ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80034ae:	4b31      	ldr	r3, [pc, #196]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 80034b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 80034b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80034be:	4b2d      	ldr	r3, [pc, #180]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 80034c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]
}
 80034cc:	e04b      	b.n	8003566 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003580 <HAL_I2C_MspInit+0x20c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d146      	bne.n	8003566 <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80034d8:	f04f 0210 	mov.w	r2, #16
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034ea:	f107 0320 	add.w	r3, r7, #32
 80034ee:	4618      	mov	r0, r3
 80034f0:	f002 fa0a 	bl	8005908 <HAL_RCCEx_PeriphCLKConfig>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 80034fa:	f7ff ff1b 	bl	8003334 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 8003500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003504:	4a1b      	ldr	r2, [pc, #108]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 8003506:	f043 0308 	orr.w	r3, r3, #8
 800350a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800350e:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 8003510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 800351c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003520:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003524:	2312      	movs	r3, #18
 8003526:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003530:	2303      	movs	r3, #3
 8003532:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003536:	2304      	movs	r3, #4
 8003538:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800353c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003540:	4619      	mov	r1, r3
 8003542:	4810      	ldr	r0, [pc, #64]	@ (8003584 <HAL_I2C_MspInit+0x210>)
 8003544:	f000 ff32 	bl	80043ac <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003548:	4b0a      	ldr	r3, [pc, #40]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 800354a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800354e:	4a09      	ldr	r2, [pc, #36]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 8003550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003554:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_I2C_MspInit+0x200>)
 800355a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
}
 8003566:	bf00      	nop
 8003568:	37f0      	adds	r7, #240	@ 0xf0
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40005400 	.word	0x40005400
 8003574:	58024400 	.word	0x58024400
 8003578:	58020400 	.word	0x58020400
 800357c:	40005800 	.word	0x40005800
 8003580:	58001c00 	.word	0x58001c00
 8003584:	58020c00 	.word	0x58020c00

08003588 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b0ba      	sub	sp, #232	@ 0xe8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035a0:	f107 0318 	add.w	r3, r7, #24
 80035a4:	22b8      	movs	r2, #184	@ 0xb8
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f00b f9bb 	bl	800e924 <memset>
  if(hsd->Instance==SDMMC1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a38      	ldr	r2, [pc, #224]	@ (8003694 <HAL_SD_MspInit+0x10c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d169      	bne.n	800368c <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80035b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035c8:	f107 0318 	add.w	r3, r7, #24
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 f99b 	bl	8005908 <HAL_RCCEx_PeriphCLKConfig>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80035d8:	f7ff feac 	bl	8003334 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80035dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003698 <HAL_SD_MspInit+0x110>)
 80035de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80035e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003698 <HAL_SD_MspInit+0x110>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80035ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003698 <HAL_SD_MspInit+0x110>)
 80035ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80035f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035fa:	4b27      	ldr	r3, [pc, #156]	@ (8003698 <HAL_SD_MspInit+0x110>)
 80035fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003600:	4a25      	ldr	r2, [pc, #148]	@ (8003698 <HAL_SD_MspInit+0x110>)
 8003602:	f043 0308 	orr.w	r3, r3, #8
 8003606:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800360a:	4b23      	ldr	r3, [pc, #140]	@ (8003698 <HAL_SD_MspInit+0x110>)
 800360c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003618:	4b1f      	ldr	r3, [pc, #124]	@ (8003698 <HAL_SD_MspInit+0x110>)
 800361a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800361e:	4a1e      	ldr	r2, [pc, #120]	@ (8003698 <HAL_SD_MspInit+0x110>)
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003628:	4b1b      	ldr	r3, [pc, #108]	@ (8003698 <HAL_SD_MspInit+0x110>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003636:	2304      	movs	r3, #4
 8003638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363c:	2302      	movs	r3, #2
 800363e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003648:	2303      	movs	r3, #3
 800364a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800364e:	230c      	movs	r3, #12
 8003650:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003654:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003658:	4619      	mov	r1, r3
 800365a:	4810      	ldr	r0, [pc, #64]	@ (800369c <HAL_SD_MspInit+0x114>)
 800365c:	f000 fea6 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8003660:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003664:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003668:	2302      	movs	r3, #2
 800366a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003674:	2303      	movs	r3, #3
 8003676:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800367a:	230c      	movs	r3, #12
 800367c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003680:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003684:	4619      	mov	r1, r3
 8003686:	4806      	ldr	r0, [pc, #24]	@ (80036a0 <HAL_SD_MspInit+0x118>)
 8003688:	f000 fe90 	bl	80043ac <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800368c:	bf00      	nop
 800368e:	37e8      	adds	r7, #232	@ 0xe8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	52007000 	.word	0x52007000
 8003698:	58024400 	.word	0x58024400
 800369c:	58020c00 	.word	0x58020c00
 80036a0:	58020800 	.word	0x58020800

080036a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b0be      	sub	sp, #248	@ 0xf8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036c0:	22b8      	movs	r2, #184	@ 0xb8
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f00b f92d 	bl	800e924 <memset>
  if(hspi->Instance==SPI1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a97      	ldr	r2, [pc, #604]	@ (800392c <HAL_SPI_MspInit+0x288>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d16a      	bne.n	80037aa <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80036d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036ea:	4618      	mov	r0, r3
 80036ec:	f002 f90c 	bl	8005908 <HAL_RCCEx_PeriphCLKConfig>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80036f6:	f7ff fe1d 	bl	8003334 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80036fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003700:	4a8b      	ldr	r2, [pc, #556]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 8003702:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003706:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800370a:	4b89      	ldr	r3, [pc, #548]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 800370c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003718:	4b85      	ldr	r3, [pc, #532]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 800371a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800371e:	4a84      	ldr	r2, [pc, #528]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003728:	4b81      	ldr	r3, [pc, #516]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 800372a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	623b      	str	r3, [r7, #32]
 8003734:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003736:	4b7e      	ldr	r3, [pc, #504]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 8003738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800373c:	4a7c      	ldr	r2, [pc, #496]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003746:	4b7a      	ldr	r3, [pc, #488]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 8003748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003754:	2310      	movs	r3, #16
 8003756:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375a:	2302      	movs	r3, #2
 800375c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003766:	2300      	movs	r3, #0
 8003768:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800376c:	2305      	movs	r3, #5
 800376e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003772:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003776:	4619      	mov	r1, r3
 8003778:	486e      	ldr	r0, [pc, #440]	@ (8003934 <HAL_SPI_MspInit+0x290>)
 800377a:	f000 fe17 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800377e:	23a0      	movs	r3, #160	@ 0xa0
 8003780:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003784:	2302      	movs	r3, #2
 8003786:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003790:	2300      	movs	r3, #0
 8003792:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003796:	2305      	movs	r3, #5
 8003798:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4865      	ldr	r0, [pc, #404]	@ (8003938 <HAL_SPI_MspInit+0x294>)
 80037a4:	f000 fe02 	bl	80043ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80037a8:	e0bb      	b.n	8003922 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a63      	ldr	r2, [pc, #396]	@ (800393c <HAL_SPI_MspInit+0x298>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d16b      	bne.n	800388c <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80037b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037ca:	4618      	mov	r0, r3
 80037cc:	f002 f89c 	bl	8005908 <HAL_RCCEx_PeriphCLKConfig>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_SPI_MspInit+0x136>
      Error_Handler();
 80037d6:	f7ff fdad 	bl	8003334 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037da:	4b55      	ldr	r3, [pc, #340]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80037dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037e0:	4a53      	ldr	r2, [pc, #332]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80037e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80037ea:	4b51      	ldr	r3, [pc, #324]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80037ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80037fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003808:	4b49      	ldr	r3, [pc, #292]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 800380a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003816:	4b46      	ldr	r3, [pc, #280]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 8003818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800381c:	4a44      	ldr	r2, [pc, #272]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 800381e:	f043 0304 	orr.w	r3, r3, #4
 8003822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003826:	4b42      	ldr	r3, [pc, #264]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 8003828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003838:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383c:	2302      	movs	r3, #2
 800383e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800384e:	2305      	movs	r3, #5
 8003850:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003854:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003858:	4619      	mov	r1, r3
 800385a:	4837      	ldr	r0, [pc, #220]	@ (8003938 <HAL_SPI_MspInit+0x294>)
 800385c:	f000 fda6 	bl	80043ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8003860:	2306      	movs	r3, #6
 8003862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003872:	2300      	movs	r3, #0
 8003874:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003878:	2305      	movs	r3, #5
 800387a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800387e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003882:	4619      	mov	r1, r3
 8003884:	482e      	ldr	r0, [pc, #184]	@ (8003940 <HAL_SPI_MspInit+0x29c>)
 8003886:	f000 fd91 	bl	80043ac <HAL_GPIO_Init>
}
 800388a:	e04a      	b.n	8003922 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2c      	ldr	r2, [pc, #176]	@ (8003944 <HAL_SPI_MspInit+0x2a0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d145      	bne.n	8003922 <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8003896:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038ac:	4618      	mov	r0, r3
 80038ae:	f002 f82b 	bl	8005908 <HAL_RCCEx_PeriphCLKConfig>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_SPI_MspInit+0x218>
      Error_Handler();
 80038b8:	f7ff fd3c 	bl	8003334 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80038bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80038be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80038c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038cc:	4b18      	ldr	r3, [pc, #96]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80038ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038da:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80038dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038e0:	4a13      	ldr	r2, [pc, #76]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80038e2:	f043 0310 	orr.w	r3, r3, #16
 80038e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_SPI_MspInit+0x28c>)
 80038ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80038f8:	2364      	movs	r3, #100	@ 0x64
 80038fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390a:	2300      	movs	r3, #0
 800390c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003910:	2305      	movs	r3, #5
 8003912:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003916:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800391a:	4619      	mov	r1, r3
 800391c:	480a      	ldr	r0, [pc, #40]	@ (8003948 <HAL_SPI_MspInit+0x2a4>)
 800391e:	f000 fd45 	bl	80043ac <HAL_GPIO_Init>
}
 8003922:	bf00      	nop
 8003924:	37f8      	adds	r7, #248	@ 0xf8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40013000 	.word	0x40013000
 8003930:	58024400 	.word	0x58024400
 8003934:	58020400 	.word	0x58020400
 8003938:	58020000 	.word	0x58020000
 800393c:	40003800 	.word	0x40003800
 8003940:	58020800 	.word	0x58020800
 8003944:	40013400 	.word	0x40013400
 8003948:	58021000 	.word	0x58021000

0800394c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b0ba      	sub	sp, #232	@ 0xe8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003954:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003964:	f107 0318 	add.w	r3, r7, #24
 8003968:	22b8      	movs	r2, #184	@ 0xb8
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f00a ffd9 	bl	800e924 <memset>
  if(huart->Instance==UART8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a39      	ldr	r2, [pc, #228]	@ (8003a5c <HAL_UART_MspInit+0x110>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d16a      	bne.n	8003a52 <HAL_UART_MspInit+0x106>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800397c:	f04f 0202 	mov.w	r2, #2
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800398e:	f107 0318 	add.w	r3, r7, #24
 8003992:	4618      	mov	r0, r3
 8003994:	f001 ffb8 	bl	8005908 <HAL_RCCEx_PeriphCLKConfig>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800399e:	f7ff fcc9 	bl	8003334 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80039a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003a60 <HAL_UART_MspInit+0x114>)
 80039a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a60 <HAL_UART_MspInit+0x114>)
 80039aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80039b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a60 <HAL_UART_MspInit+0x114>)
 80039b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039c0:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <HAL_UART_MspInit+0x114>)
 80039c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039c6:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_UART_MspInit+0x114>)
 80039c8:	f043 0310 	orr.w	r3, r3, #16
 80039cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039d0:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <HAL_UART_MspInit+0x114>)
 80039d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039de:	4b20      	ldr	r3, [pc, #128]	@ (8003a60 <HAL_UART_MspInit+0x114>)
 80039e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a60 <HAL_UART_MspInit+0x114>)
 80039e6:	f043 0308 	orr.w	r3, r3, #8
 80039ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003a60 <HAL_UART_MspInit+0x114>)
 80039f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    PD15     ------> UART8_RTS
    PD14     ------> UART8_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80039fc:	2303      	movs	r3, #3
 80039fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a02:	2302      	movs	r3, #2
 8003a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003a14:	2308      	movs	r3, #8
 8003a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4810      	ldr	r0, [pc, #64]	@ (8003a64 <HAL_UART_MspInit+0x118>)
 8003a22:	f000 fcc3 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8003a26:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003a40:	2308      	movs	r3, #8
 8003a42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4806      	ldr	r0, [pc, #24]	@ (8003a68 <HAL_UART_MspInit+0x11c>)
 8003a4e:	f000 fcad 	bl	80043ac <HAL_GPIO_Init>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 8003a52:	bf00      	nop
 8003a54:	37e8      	adds	r7, #232	@ 0xe8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40007c00 	.word	0x40007c00
 8003a60:	58024400 	.word	0x58024400
 8003a64:	58021000 	.word	0x58021000
 8003a68:	58020c00 	.word	0x58020c00

08003a6c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b0b8      	sub	sp, #224	@ 0xe0
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a74:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a84:	f107 0310 	add.w	r3, r7, #16
 8003a88:	22b8      	movs	r2, #184	@ 0xb8
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f00a ff49 	bl	800e924 <memset>
  if(husart->Instance==USART1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a27      	ldr	r2, [pc, #156]	@ (8003b34 <HAL_USART_MspInit+0xc8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d146      	bne.n	8003b2a <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a9c:	f04f 0201 	mov.w	r2, #1
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aae:	f107 0310 	add.w	r3, r7, #16
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 ff28 	bl	8005908 <HAL_RCCEx_PeriphCLKConfig>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8003abe:	f7ff fc39 	bl	8003334 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <HAL_USART_MspInit+0xcc>)
 8003ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <HAL_USART_MspInit+0xcc>)
 8003aca:	f043 0310 	orr.w	r3, r3, #16
 8003ace:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ad2:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <HAL_USART_MspInit+0xcc>)
 8003ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae0:	4b15      	ldr	r3, [pc, #84]	@ (8003b38 <HAL_USART_MspInit+0xcc>)
 8003ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ae6:	4a14      	ldr	r2, [pc, #80]	@ (8003b38 <HAL_USART_MspInit+0xcc>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003af0:	4b11      	ldr	r3, [pc, #68]	@ (8003b38 <HAL_USART_MspInit+0xcc>)
 8003af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 8003afe:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003b02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	2302      	movs	r3, #2
 8003b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b18:	2307      	movs	r3, #7
 8003b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003b22:	4619      	mov	r1, r3
 8003b24:	4805      	ldr	r0, [pc, #20]	@ (8003b3c <HAL_USART_MspInit+0xd0>)
 8003b26:	f000 fc41 	bl	80043ac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003b2a:	bf00      	nop
 8003b2c:	37e0      	adds	r7, #224	@ 0xe0
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40011000 	.word	0x40011000
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	58020000 	.word	0x58020000

08003b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <NMI_Handler+0x4>

08003b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <HardFault_Handler+0x4>

08003b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <MemManage_Handler+0x4>

08003b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <BusFault_Handler+0x4>

08003b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <UsageFault_Handler+0x4>

08003b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b96:	f000 fa69 	bl	800406c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
  return 1;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <_kill>:

int _kill(int pid, int sig)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bb8:	f00a ff06 	bl	800e9c8 <__errno>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2216      	movs	r2, #22
 8003bc0:	601a      	str	r2, [r3, #0]
  return -1;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <_exit>:

void _exit (int status)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bd6:	f04f 31ff 	mov.w	r1, #4294967295
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff ffe7 	bl	8003bae <_kill>
  while (1) {}    /* Make sure we hang here */
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <_exit+0x12>

08003be4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e00a      	b.n	8003c0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bf6:	f3af 8000 	nop.w
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	60ba      	str	r2, [r7, #8]
 8003c02:	b2ca      	uxtb	r2, r1
 8003c04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	dbf0      	blt.n	8003bf6 <_read+0x12>
  }

  return len;
 8003c14:	687b      	ldr	r3, [r7, #4]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_close>:
  }
  return len;
}

int _close(int file)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c46:	605a      	str	r2, [r3, #4]
  return 0;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_isatty>:

int _isatty(int file)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c5e:	2301      	movs	r3, #1
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c90:	4a14      	ldr	r2, [pc, #80]	@ (8003ce4 <_sbrk+0x5c>)
 8003c92:	4b15      	ldr	r3, [pc, #84]	@ (8003ce8 <_sbrk+0x60>)
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c9c:	4b13      	ldr	r3, [pc, #76]	@ (8003cec <_sbrk+0x64>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <_sbrk+0x64>)
 8003ca6:	4a12      	ldr	r2, [pc, #72]	@ (8003cf0 <_sbrk+0x68>)
 8003ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003caa:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <_sbrk+0x64>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d207      	bcs.n	8003cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cb8:	f00a fe86 	bl	800e9c8 <__errno>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	220c      	movs	r2, #12
 8003cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc6:	e009      	b.n	8003cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cc8:	4b08      	ldr	r3, [pc, #32]	@ (8003cec <_sbrk+0x64>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cce:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <_sbrk+0x64>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	4a05      	ldr	r2, [pc, #20]	@ (8003cec <_sbrk+0x64>)
 8003cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	24050000 	.word	0x24050000
 8003ce8:	00000400 	.word	0x00000400
 8003cec:	24000670 	.word	0x24000670
 8003cf0:	240008c8 	.word	0x240008c8

08003cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cf8:	4b32      	ldr	r3, [pc, #200]	@ (8003dc4 <SystemInit+0xd0>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	4a31      	ldr	r2, [pc, #196]	@ (8003dc4 <SystemInit+0xd0>)
 8003d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d08:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc8 <SystemInit+0xd4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	2b06      	cmp	r3, #6
 8003d12:	d807      	bhi.n	8003d24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d14:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc8 <SystemInit+0xd4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f023 030f 	bic.w	r3, r3, #15
 8003d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc8 <SystemInit+0xd4>)
 8003d1e:	f043 0307 	orr.w	r3, r3, #7
 8003d22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d24:	4b29      	ldr	r3, [pc, #164]	@ (8003dcc <SystemInit+0xd8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a28      	ldr	r2, [pc, #160]	@ (8003dcc <SystemInit+0xd8>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d30:	4b26      	ldr	r3, [pc, #152]	@ (8003dcc <SystemInit+0xd8>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d36:	4b25      	ldr	r3, [pc, #148]	@ (8003dcc <SystemInit+0xd8>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4924      	ldr	r1, [pc, #144]	@ (8003dcc <SystemInit+0xd8>)
 8003d3c:	4b24      	ldr	r3, [pc, #144]	@ (8003dd0 <SystemInit+0xdc>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d42:	4b21      	ldr	r3, [pc, #132]	@ (8003dc8 <SystemInit+0xd4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc8 <SystemInit+0xd4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 030f 	bic.w	r3, r3, #15
 8003d56:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc8 <SystemInit+0xd4>)
 8003d58:	f043 0307 	orr.w	r3, r3, #7
 8003d5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <SystemInit+0xd8>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d64:	4b19      	ldr	r3, [pc, #100]	@ (8003dcc <SystemInit+0xd8>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d6a:	4b18      	ldr	r3, [pc, #96]	@ (8003dcc <SystemInit+0xd8>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003d70:	4b16      	ldr	r3, [pc, #88]	@ (8003dcc <SystemInit+0xd8>)
 8003d72:	4a18      	ldr	r2, [pc, #96]	@ (8003dd4 <SystemInit+0xe0>)
 8003d74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d76:	4b15      	ldr	r3, [pc, #84]	@ (8003dcc <SystemInit+0xd8>)
 8003d78:	4a17      	ldr	r2, [pc, #92]	@ (8003dd8 <SystemInit+0xe4>)
 8003d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d7c:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <SystemInit+0xd8>)
 8003d7e:	4a17      	ldr	r2, [pc, #92]	@ (8003ddc <SystemInit+0xe8>)
 8003d80:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d82:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <SystemInit+0xd8>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d88:	4b10      	ldr	r3, [pc, #64]	@ (8003dcc <SystemInit+0xd8>)
 8003d8a:	4a14      	ldr	r2, [pc, #80]	@ (8003ddc <SystemInit+0xe8>)
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003dcc <SystemInit+0xd8>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d94:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <SystemInit+0xd8>)
 8003d96:	4a11      	ldr	r2, [pc, #68]	@ (8003ddc <SystemInit+0xe8>)
 8003d98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <SystemInit+0xd8>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003da0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <SystemInit+0xd8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a09      	ldr	r2, [pc, #36]	@ (8003dcc <SystemInit+0xd8>)
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003daa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <SystemInit+0xd8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003db2:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <SystemInit+0xec>)
 8003db4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003db8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003dba:	bf00      	nop
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000ed00 	.word	0xe000ed00
 8003dc8:	52002000 	.word	0x52002000
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003dd4:	02020200 	.word	0x02020200
 8003dd8:	01ff0000 	.word	0x01ff0000
 8003ddc:	01010280 	.word	0x01010280
 8003de0:	52004000 	.word	0x52004000

08003de4 <SensorManager_Init>:
	//"BNO055",
	//"BME680",
	"MS5607",
};

telemetry_init_status SensorManager_Init(void) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
	printf("Sensors Initialization routine started. \n");
 8003dea:	4821      	ldr	r0, [pc, #132]	@ (8003e70 <SensorManager_Init+0x8c>)
 8003dec:	f00a fc9a 	bl	800e724 <puts>

    size_t num_sensors = sizeof(init_functions) / sizeof(init_functions[0]);
 8003df0:	2301      	movs	r3, #1
 8003df2:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	e01a      	b.n	8003e38 <SensorManager_Init+0x54>
        int8_t status = init_functions[i]();
 8003e02:	4a1c      	ldr	r2, [pc, #112]	@ (8003e74 <SensorManager_Init+0x90>)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0a:	4798      	blx	r3
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 8003e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <SensorManager_Init+0x4a>
            printf("%s initialization failed.\n", sensor_names[i]);
 8003e18:	4a17      	ldr	r2, [pc, #92]	@ (8003e78 <SensorManager_Init+0x94>)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e20:	4619      	mov	r1, r3
 8003e22:	4816      	ldr	r0, [pc, #88]	@ (8003e7c <SensorManager_Init+0x98>)
 8003e24:	f00a fc16 	bl	800e654 <iprintf>
            all_success = false;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	73fb      	strb	r3, [r7, #15]
 8003e2c:	e001      	b.n	8003e32 <SensorManager_Init+0x4e>
        } else {
            any_success = true;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d3e0      	bcc.n	8003e02 <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <SensorManager_Init+0x6c>
        printf("All sensors initialized successfully.\n");
 8003e46:	480e      	ldr	r0, [pc, #56]	@ (8003e80 <SensorManager_Init+0x9c>)
 8003e48:	f00a fc6c 	bl	800e724 <puts>
        return TELEMETRY_INIT_SUCCESS;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e00b      	b.n	8003e68 <SensorManager_Init+0x84>
    } else if (any_success) {
 8003e50:	7bbb      	ldrb	r3, [r7, #14]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <SensorManager_Init+0x7c>
        printf("Partial initialization success.\n");
 8003e56:	480b      	ldr	r0, [pc, #44]	@ (8003e84 <SensorManager_Init+0xa0>)
 8003e58:	f00a fc64 	bl	800e724 <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e003      	b.n	8003e68 <SensorManager_Init+0x84>
    } else {
        printf("All sensors initialization failed.\n");
 8003e60:	4809      	ldr	r0, [pc, #36]	@ (8003e88 <SensorManager_Init+0xa4>)
 8003e62:	f00a fc5f 	bl	800e724 <puts>
        return TELEMETRY_INIT_FAILURE;
 8003e66:	2302      	movs	r3, #2
    }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	08011e94 	.word	0x08011e94
 8003e74:	2400000c 	.word	0x2400000c
 8003e78:	24000010 	.word	0x24000010
 8003e7c:	08011ec0 	.word	0x08011ec0
 8003e80:	08011edc 	.word	0x08011edc
 8003e84:	08011f04 	.word	0x08011f04
 8003e88:	08011f24 	.word	0x08011f24

08003e8c <SensorManager_UpdateData>:

void SensorManager_UpdateData(TelemetryData *data) {
 8003e8c:	b5b0      	push	{r4, r5, r7, lr}
 8003e8e:	b0a0      	sub	sp, #128	@ 0x80
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	67f8      	str	r0, [r7, #124]	@ 0x7c
    // Update data from each sensor
	telemetry.bmi323_data = bmi323_data_poll();
 8003e94:	4c14      	ldr	r4, [pc, #80]	@ (8003ee8 <SensorManager_UpdateData+0x5c>)
 8003e96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd faa0 	bl	80013e0 <bmi323_data_poll>
 8003ea0:	3428      	adds	r4, #40	@ 0x28
 8003ea2:	f107 0560 	add.w	r5, r7, #96	@ 0x60
 8003ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003eaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003eae:	e884 0003 	stmia.w	r4, {r0, r1}
	telemetry.bno055_data = bno_read_fusion_data();
 8003eb2:	4c0d      	ldr	r4, [pc, #52]	@ (8003ee8 <SensorManager_UpdateData+0x5c>)
 8003eb4:	463b      	mov	r3, r7
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd ffe8 	bl	8001e8c <bno_read_fusion_data>
 8003ebc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8003ec0:	4639      	mov	r1, r7
 8003ec2:	2260      	movs	r2, #96	@ 0x60
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f00a fdac 	bl	800ea22 <memcpy>
//    BME680_ReadData(&data->bme680_data);
//    BMI323_ReadData(&data->bmi323_data);
//    BNO055_ReadData(&data->bno055_data);
//    GPS_ReadData(&data->gps_data);
//    LIS2MDLTR_ReadData(&data->lis2mdltr_data);
    telemetry.ms5607_data = MS5607_ReadData();
 8003eca:	4c07      	ldr	r4, [pc, #28]	@ (8003ee8 <SensorManager_UpdateData+0x5c>)
 8003ecc:	463b      	mov	r3, r7
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fd44 	bl	800295c <MS5607_ReadData>
 8003ed4:	34d8      	adds	r4, #216	@ 0xd8
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003eda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003ede:	bf00      	nop
 8003ee0:	3780      	adds	r7, #128	@ 0x80
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	24000678 	.word	0x24000678

08003eec <TestTelemetry>:
			;
		}
	}
}

void TestTelemetry(){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 20 ; i++){
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	e00e      	b.n	8003f16 <TestTelemetry+0x2a>

	// Sensor Data Read
	SensorManager_UpdateData(&telemetry);
 8003ef8:	480b      	ldr	r0, [pc, #44]	@ (8003f28 <TestTelemetry+0x3c>)
 8003efa:	f7ff ffc7 	bl	8003e8c <SensorManager_UpdateData>

	// Sensor Data Print
	//bmi323_print_sensor_data(&telemetry.bmi323_data);
	//bno055_print_fusion_data(&telemetry.bno055_data);
	ms5607_print_barometer_data(&telemetry.ms5607_data);
 8003efe:	480b      	ldr	r0, [pc, #44]	@ (8003f2c <TestTelemetry+0x40>)
 8003f00:	f7fe fd5a 	bl	80029b8 <ms5607_print_barometer_data>

	printf("// --------------------------------------------- // \n");
 8003f04:	480a      	ldr	r0, [pc, #40]	@ (8003f30 <TestTelemetry+0x44>)
 8003f06:	f00a fc0d 	bl	800e724 <puts>

    HAL_Delay(150);
 8003f0a:	2096      	movs	r0, #150	@ 0x96
 8003f0c:	f000 f8ce 	bl	80040ac <HAL_Delay>
	for(int i = 0; i < 20 ; i++){
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3301      	adds	r3, #1
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b13      	cmp	r3, #19
 8003f1a:	dded      	ble.n	8003ef8 <TestTelemetry+0xc>
    	}
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	24000678 	.word	0x24000678
 8003f2c:	24000750 	.word	0x24000750
 8003f30:	08011f48 	.word	0x08011f48

08003f34 <Reset_Handler>:
 8003f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f6c <LoopFillZerobss+0xe>
 8003f38:	f7ff fedc 	bl	8003cf4 <SystemInit>
 8003f3c:	480c      	ldr	r0, [pc, #48]	@ (8003f70 <LoopFillZerobss+0x12>)
 8003f3e:	490d      	ldr	r1, [pc, #52]	@ (8003f74 <LoopFillZerobss+0x16>)
 8003f40:	4a0d      	ldr	r2, [pc, #52]	@ (8003f78 <LoopFillZerobss+0x1a>)
 8003f42:	2300      	movs	r3, #0
 8003f44:	e002      	b.n	8003f4c <LoopCopyDataInit>

08003f46 <CopyDataInit>:
 8003f46:	58d4      	ldr	r4, [r2, r3]
 8003f48:	50c4      	str	r4, [r0, r3]
 8003f4a:	3304      	adds	r3, #4

08003f4c <LoopCopyDataInit>:
 8003f4c:	18c4      	adds	r4, r0, r3
 8003f4e:	428c      	cmp	r4, r1
 8003f50:	d3f9      	bcc.n	8003f46 <CopyDataInit>
 8003f52:	4a0a      	ldr	r2, [pc, #40]	@ (8003f7c <LoopFillZerobss+0x1e>)
 8003f54:	4c0a      	ldr	r4, [pc, #40]	@ (8003f80 <LoopFillZerobss+0x22>)
 8003f56:	2300      	movs	r3, #0
 8003f58:	e001      	b.n	8003f5e <LoopFillZerobss>

08003f5a <FillZerobss>:
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	3204      	adds	r2, #4

08003f5e <LoopFillZerobss>:
 8003f5e:	42a2      	cmp	r2, r4
 8003f60:	d3fb      	bcc.n	8003f5a <FillZerobss>
 8003f62:	f00a fd37 	bl	800e9d4 <__libc_init_array>
 8003f66:	f7fe fd88 	bl	8002a7a <main>
 8003f6a:	4770      	bx	lr
 8003f6c:	24050000 	.word	0x24050000
 8003f70:	24000000 	.word	0x24000000
 8003f74:	240001e4 	.word	0x240001e4
 8003f78:	08012418 	.word	0x08012418
 8003f7c:	240001e8 	.word	0x240001e8
 8003f80:	240008c4 	.word	0x240008c4

08003f84 <ADC3_IRQHandler>:
 8003f84:	e7fe      	b.n	8003f84 <ADC3_IRQHandler>
	...

08003f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f000 f962 	bl	8004258 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f94:	f001 fae2 	bl	800555c <HAL_RCC_GetSysClockFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ff0 <HAL_Init+0x68>)
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	4913      	ldr	r1, [pc, #76]	@ (8003ff4 <HAL_Init+0x6c>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff0 <HAL_Init+0x68>)
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	4a0e      	ldr	r2, [pc, #56]	@ (8003ff4 <HAL_Init+0x6c>)
 8003fbc:	5cd3      	ldrb	r3, [r2, r3]
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ff8 <HAL_Init+0x70>)
 8003fca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8003ffc <HAL_Init+0x74>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f000 f814 	bl	8004000 <HAL_InitTick>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e002      	b.n	8003fe8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fe2:	f7ff f9ad 	bl	8003340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	08011f80 	.word	0x08011f80
 8003ff8:	24000008 	.word	0x24000008
 8003ffc:	24000004 	.word	0x24000004

08004000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004008:	4b15      	ldr	r3, [pc, #84]	@ (8004060 <HAL_InitTick+0x60>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e021      	b.n	8004058 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004014:	4b13      	ldr	r3, [pc, #76]	@ (8004064 <HAL_InitTick+0x64>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <HAL_InitTick+0x60>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	4619      	mov	r1, r3
 800401e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004022:	fbb3 f3f1 	udiv	r3, r3, r1
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f939 	bl	80042a2 <HAL_SYSTICK_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e00e      	b.n	8004058 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b0f      	cmp	r3, #15
 800403e:	d80a      	bhi.n	8004056 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004040:	2200      	movs	r2, #0
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	f000 f911 	bl	800426e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800404c:	4a06      	ldr	r2, [pc, #24]	@ (8004068 <HAL_InitTick+0x68>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	24000018 	.word	0x24000018
 8004064:	24000004 	.word	0x24000004
 8004068:	24000014 	.word	0x24000014

0800406c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004070:	4b06      	ldr	r3, [pc, #24]	@ (800408c <HAL_IncTick+0x20>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <HAL_IncTick+0x24>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4413      	add	r3, r2
 800407c:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <HAL_IncTick+0x24>)
 800407e:	6013      	str	r3, [r2, #0]
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	24000018 	.word	0x24000018
 8004090:	24000760 	.word	0x24000760

08004094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return uwTick;
 8004098:	4b03      	ldr	r3, [pc, #12]	@ (80040a8 <HAL_GetTick+0x14>)
 800409a:	681b      	ldr	r3, [r3, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	24000760 	.word	0x24000760

080040ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff ffee 	bl	8004094 <HAL_GetTick>
 80040b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d005      	beq.n	80040d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040c6:	4b0a      	ldr	r3, [pc, #40]	@ (80040f0 <HAL_Delay+0x44>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040d2:	bf00      	nop
 80040d4:	f7ff ffde 	bl	8004094 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d8f7      	bhi.n	80040d4 <HAL_Delay+0x28>
  {
  }
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	24000018 	.word	0x24000018

080040f4 <__NVIC_SetPriorityGrouping>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004104:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <__NVIC_SetPriorityGrouping+0x40>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004110:	4013      	ands	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800411c:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <__NVIC_SetPriorityGrouping+0x44>)
 800411e:	4313      	orrs	r3, r2
 8004120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004122:	4a04      	ldr	r2, [pc, #16]	@ (8004134 <__NVIC_SetPriorityGrouping+0x40>)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	60d3      	str	r3, [r2, #12]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000ed00 	.word	0xe000ed00
 8004138:	05fa0000 	.word	0x05fa0000

0800413c <__NVIC_GetPriorityGrouping>:
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004140:	4b04      	ldr	r3, [pc, #16]	@ (8004154 <__NVIC_GetPriorityGrouping+0x18>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	f003 0307 	and.w	r3, r3, #7
}
 800414a:	4618      	mov	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <__NVIC_SetPriority>:
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004168:	2b00      	cmp	r3, #0
 800416a:	db0a      	blt.n	8004182 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	490c      	ldr	r1, [pc, #48]	@ (80041a4 <__NVIC_SetPriority+0x4c>)
 8004172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004176:	0112      	lsls	r2, r2, #4
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	440b      	add	r3, r1
 800417c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004180:	e00a      	b.n	8004198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	4908      	ldr	r1, [pc, #32]	@ (80041a8 <__NVIC_SetPriority+0x50>)
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	3b04      	subs	r3, #4
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	440b      	add	r3, r1
 8004196:	761a      	strb	r2, [r3, #24]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000e100 	.word	0xe000e100
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <NVIC_EncodePriority>:
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	@ 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f1c3 0307 	rsb	r3, r3, #7
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	bf28      	it	cs
 80041ca:	2304      	movcs	r3, #4
 80041cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3304      	adds	r3, #4
 80041d2:	2b06      	cmp	r3, #6
 80041d4:	d902      	bls.n	80041dc <NVIC_EncodePriority+0x30>
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3b03      	subs	r3, #3
 80041da:	e000      	b.n	80041de <NVIC_EncodePriority+0x32>
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43da      	mvns	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	401a      	ands	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f4:	f04f 31ff 	mov.w	r1, #4294967295
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	43d9      	mvns	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004204:	4313      	orrs	r3, r2
}
 8004206:	4618      	mov	r0, r3
 8004208:	3724      	adds	r7, #36	@ 0x24
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <SysTick_Config>:
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004224:	d301      	bcc.n	800422a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004226:	2301      	movs	r3, #1
 8004228:	e00f      	b.n	800424a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800422a:	4a0a      	ldr	r2, [pc, #40]	@ (8004254 <SysTick_Config+0x40>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004232:	210f      	movs	r1, #15
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	f7ff ff8e 	bl	8004158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800423c:	4b05      	ldr	r3, [pc, #20]	@ (8004254 <SysTick_Config+0x40>)
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004242:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <SysTick_Config+0x40>)
 8004244:	2207      	movs	r2, #7
 8004246:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	e000e010 	.word	0xe000e010

08004258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ff47 	bl	80040f4 <__NVIC_SetPriorityGrouping>
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b086      	sub	sp, #24
 8004272:	af00      	add	r7, sp, #0
 8004274:	4603      	mov	r3, r0
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800427c:	f7ff ff5e 	bl	800413c <__NVIC_GetPriorityGrouping>
 8004280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	6978      	ldr	r0, [r7, #20]
 8004288:	f7ff ff90 	bl	80041ac <NVIC_EncodePriority>
 800428c:	4602      	mov	r2, r0
 800428e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004292:	4611      	mov	r1, r2
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff5f 	bl	8004158 <__NVIC_SetPriority>
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff ffb2 	bl	8004214 <SysTick_Config>
 80042b0:	4603      	mov	r3, r0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80042c0:	f3bf 8f5f 	dmb	sy
}
 80042c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80042c6:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <HAL_MPU_Disable+0x28>)
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	4a06      	ldr	r2, [pc, #24]	@ (80042e4 <HAL_MPU_Disable+0x28>)
 80042cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80042d2:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <HAL_MPU_Disable+0x2c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	605a      	str	r2, [r3, #4]
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	e000ed00 	.word	0xe000ed00
 80042e8:	e000ed90 	.word	0xe000ed90

080042ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80042f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004324 <HAL_MPU_Enable+0x38>)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <HAL_MPU_Enable+0x3c>)
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <HAL_MPU_Enable+0x3c>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004308:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800430a:	f3bf 8f4f 	dsb	sy
}
 800430e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004310:	f3bf 8f6f 	isb	sy
}
 8004314:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	e000ed90 	.word	0xe000ed90
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	785a      	ldrb	r2, [r3, #1]
 8004338:	4b1b      	ldr	r3, [pc, #108]	@ (80043a8 <HAL_MPU_ConfigRegion+0x7c>)
 800433a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800433c:	4b1a      	ldr	r3, [pc, #104]	@ (80043a8 <HAL_MPU_ConfigRegion+0x7c>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	4a19      	ldr	r2, [pc, #100]	@ (80043a8 <HAL_MPU_ConfigRegion+0x7c>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004348:	4a17      	ldr	r2, [pc, #92]	@ (80043a8 <HAL_MPU_ConfigRegion+0x7c>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7b1b      	ldrb	r3, [r3, #12]
 8004354:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	7adb      	ldrb	r3, [r3, #11]
 800435a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800435c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	7a9b      	ldrb	r3, [r3, #10]
 8004362:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004364:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	7b5b      	ldrb	r3, [r3, #13]
 800436a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800436c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	7b9b      	ldrb	r3, [r3, #14]
 8004372:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004374:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	7bdb      	ldrb	r3, [r3, #15]
 800437a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800437c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	7a5b      	ldrb	r3, [r3, #9]
 8004382:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004384:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7a1b      	ldrb	r3, [r3, #8]
 800438a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800438c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	7812      	ldrb	r2, [r2, #0]
 8004392:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004394:	4a04      	ldr	r2, [pc, #16]	@ (80043a8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004396:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004398:	6113      	str	r3, [r2, #16]
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	e000ed90 	.word	0xe000ed90

080043ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b089      	sub	sp, #36	@ 0x24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80043ba:	4b86      	ldr	r3, [pc, #536]	@ (80045d4 <HAL_GPIO_Init+0x228>)
 80043bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043be:	e18c      	b.n	80046da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	2101      	movs	r1, #1
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 817e 	beq.w	80046d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d005      	beq.n	80043f0 <HAL_GPIO_Init+0x44>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d130      	bne.n	8004452 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	2203      	movs	r2, #3
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4313      	orrs	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004426:	2201      	movs	r2, #1
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0201 	and.w	r2, r3, #1
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b03      	cmp	r3, #3
 800445c:	d017      	beq.n	800448e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	2203      	movs	r2, #3
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d123      	bne.n	80044e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	08da      	lsrs	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3208      	adds	r2, #8
 80044a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	220f      	movs	r2, #15
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	08da      	lsrs	r2, r3, #3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3208      	adds	r2, #8
 80044dc:	69b9      	ldr	r1, [r7, #24]
 80044de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	2203      	movs	r2, #3
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 0203 	and.w	r2, r3, #3
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80d8 	beq.w	80046d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004524:	4b2c      	ldr	r3, [pc, #176]	@ (80045d8 <HAL_GPIO_Init+0x22c>)
 8004526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800452a:	4a2b      	ldr	r2, [pc, #172]	@ (80045d8 <HAL_GPIO_Init+0x22c>)
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004534:	4b28      	ldr	r3, [pc, #160]	@ (80045d8 <HAL_GPIO_Init+0x22c>)
 8004536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004542:	4a26      	ldr	r2, [pc, #152]	@ (80045dc <HAL_GPIO_Init+0x230>)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	3302      	adds	r3, #2
 800454a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	220f      	movs	r2, #15
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1d      	ldr	r2, [pc, #116]	@ (80045e0 <HAL_GPIO_Init+0x234>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d04a      	beq.n	8004604 <HAL_GPIO_Init+0x258>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a1c      	ldr	r2, [pc, #112]	@ (80045e4 <HAL_GPIO_Init+0x238>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d02b      	beq.n	80045ce <HAL_GPIO_Init+0x222>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a1b      	ldr	r2, [pc, #108]	@ (80045e8 <HAL_GPIO_Init+0x23c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d025      	beq.n	80045ca <HAL_GPIO_Init+0x21e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a1a      	ldr	r2, [pc, #104]	@ (80045ec <HAL_GPIO_Init+0x240>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01f      	beq.n	80045c6 <HAL_GPIO_Init+0x21a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a19      	ldr	r2, [pc, #100]	@ (80045f0 <HAL_GPIO_Init+0x244>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d019      	beq.n	80045c2 <HAL_GPIO_Init+0x216>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a18      	ldr	r2, [pc, #96]	@ (80045f4 <HAL_GPIO_Init+0x248>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_GPIO_Init+0x212>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a17      	ldr	r2, [pc, #92]	@ (80045f8 <HAL_GPIO_Init+0x24c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00d      	beq.n	80045ba <HAL_GPIO_Init+0x20e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a16      	ldr	r2, [pc, #88]	@ (80045fc <HAL_GPIO_Init+0x250>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d007      	beq.n	80045b6 <HAL_GPIO_Init+0x20a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a15      	ldr	r2, [pc, #84]	@ (8004600 <HAL_GPIO_Init+0x254>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d101      	bne.n	80045b2 <HAL_GPIO_Init+0x206>
 80045ae:	2309      	movs	r3, #9
 80045b0:	e029      	b.n	8004606 <HAL_GPIO_Init+0x25a>
 80045b2:	230a      	movs	r3, #10
 80045b4:	e027      	b.n	8004606 <HAL_GPIO_Init+0x25a>
 80045b6:	2307      	movs	r3, #7
 80045b8:	e025      	b.n	8004606 <HAL_GPIO_Init+0x25a>
 80045ba:	2306      	movs	r3, #6
 80045bc:	e023      	b.n	8004606 <HAL_GPIO_Init+0x25a>
 80045be:	2305      	movs	r3, #5
 80045c0:	e021      	b.n	8004606 <HAL_GPIO_Init+0x25a>
 80045c2:	2304      	movs	r3, #4
 80045c4:	e01f      	b.n	8004606 <HAL_GPIO_Init+0x25a>
 80045c6:	2303      	movs	r3, #3
 80045c8:	e01d      	b.n	8004606 <HAL_GPIO_Init+0x25a>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e01b      	b.n	8004606 <HAL_GPIO_Init+0x25a>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e019      	b.n	8004606 <HAL_GPIO_Init+0x25a>
 80045d2:	bf00      	nop
 80045d4:	58000080 	.word	0x58000080
 80045d8:	58024400 	.word	0x58024400
 80045dc:	58000400 	.word	0x58000400
 80045e0:	58020000 	.word	0x58020000
 80045e4:	58020400 	.word	0x58020400
 80045e8:	58020800 	.word	0x58020800
 80045ec:	58020c00 	.word	0x58020c00
 80045f0:	58021000 	.word	0x58021000
 80045f4:	58021400 	.word	0x58021400
 80045f8:	58021800 	.word	0x58021800
 80045fc:	58021c00 	.word	0x58021c00
 8004600:	58022400 	.word	0x58022400
 8004604:	2300      	movs	r3, #0
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	f002 0203 	and.w	r2, r2, #3
 800460c:	0092      	lsls	r2, r2, #2
 800460e:	4093      	lsls	r3, r2
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004616:	4938      	ldr	r1, [pc, #224]	@ (80046f8 <HAL_GPIO_Init+0x34c>)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	089b      	lsrs	r3, r3, #2
 800461c:	3302      	adds	r3, #2
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	43db      	mvns	r3, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4013      	ands	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800464a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004678:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	43db      	mvns	r3, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4013      	ands	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	3301      	adds	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f ae6b 	bne.w	80043c0 <HAL_GPIO_Init+0x14>
  }
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	3724      	adds	r7, #36	@ 0x24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	58000400 	.word	0x58000400

080046fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	887b      	ldrh	r3, [r7, #2]
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
 8004718:	e001      	b.n	800471e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800471e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	807b      	strh	r3, [r7, #2]
 8004738:	4613      	mov	r3, r2
 800473a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800473c:	787b      	ldrb	r3, [r7, #1]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004742:	887a      	ldrh	r2, [r7, #2]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004748:	e003      	b.n	8004752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800474a:	887b      	ldrh	r3, [r7, #2]
 800474c:	041a      	lsls	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	619a      	str	r2, [r3, #24]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e08b      	b.n	800488a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fe fdf4 	bl	8003374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	@ 0x24
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d107      	bne.n	80047da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	e006      	b.n	80047e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80047e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d108      	bne.n	8004802 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	e007      	b.n	8004812 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004810:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b1d      	ldr	r3, [pc, #116]	@ (8004894 <HAL_I2C_Init+0x134>)
 800481e:	430b      	orrs	r3, r1
 8004820:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004830:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69d9      	ldr	r1, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1a      	ldr	r2, [r3, #32]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	02008000 	.word	0x02008000

08004898 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d138      	bne.n	8004920 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e032      	b.n	8004922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2224      	movs	r2, #36	@ 0x24
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e000      	b.n	8004922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b20      	cmp	r3, #32
 8004942:	d139      	bne.n	80049b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800494e:	2302      	movs	r3, #2
 8004950:	e033      	b.n	80049ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2224      	movs	r2, #36	@ 0x24
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004980:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80049d0:	4b19      	ldr	r3, [pc, #100]	@ (8004a38 <HAL_PWREx_ConfigSupply+0x70>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d00a      	beq.n	80049f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049dc:	4b16      	ldr	r3, [pc, #88]	@ (8004a38 <HAL_PWREx_ConfigSupply+0x70>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d001      	beq.n	80049ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e01f      	b.n	8004a2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e01d      	b.n	8004a2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049f2:	4b11      	ldr	r3, [pc, #68]	@ (8004a38 <HAL_PWREx_ConfigSupply+0x70>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f023 0207 	bic.w	r2, r3, #7
 80049fa:	490f      	ldr	r1, [pc, #60]	@ (8004a38 <HAL_PWREx_ConfigSupply+0x70>)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a02:	f7ff fb47 	bl	8004094 <HAL_GetTick>
 8004a06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a08:	e009      	b.n	8004a1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a0a:	f7ff fb43 	bl	8004094 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a18:	d901      	bls.n	8004a1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e007      	b.n	8004a2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <HAL_PWREx_ConfigSupply+0x70>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a2a:	d1ee      	bne.n	8004a0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	58024800 	.word	0x58024800

08004a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08c      	sub	sp, #48	@ 0x30
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e3c8      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8087 	beq.w	8004b6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5c:	4b88      	ldr	r3, [pc, #544]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a66:	4b86      	ldr	r3, [pc, #536]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d007      	beq.n	8004a82 <HAL_RCC_OscConfig+0x46>
 8004a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a74:	2b18      	cmp	r3, #24
 8004a76:	d110      	bne.n	8004a9a <HAL_RCC_OscConfig+0x5e>
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d10b      	bne.n	8004a9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a82:	4b7f      	ldr	r3, [pc, #508]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d06c      	beq.n	8004b68 <HAL_RCC_OscConfig+0x12c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d168      	bne.n	8004b68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e3a2      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa2:	d106      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x76>
 8004aa4:	4b76      	ldr	r3, [pc, #472]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a75      	ldr	r2, [pc, #468]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e02e      	b.n	8004b10 <HAL_RCC_OscConfig+0xd4>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x98>
 8004aba:	4b71      	ldr	r3, [pc, #452]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a70      	ldr	r2, [pc, #448]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a6d      	ldr	r2, [pc, #436]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004acc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e01d      	b.n	8004b10 <HAL_RCC_OscConfig+0xd4>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004adc:	d10c      	bne.n	8004af8 <HAL_RCC_OscConfig+0xbc>
 8004ade:	4b68      	ldr	r3, [pc, #416]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a67      	ldr	r2, [pc, #412]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	4b65      	ldr	r3, [pc, #404]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a64      	ldr	r2, [pc, #400]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e00b      	b.n	8004b10 <HAL_RCC_OscConfig+0xd4>
 8004af8:	4b61      	ldr	r3, [pc, #388]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a60      	ldr	r2, [pc, #384]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	4b5e      	ldr	r3, [pc, #376]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a5d      	ldr	r2, [pc, #372]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d013      	beq.n	8004b40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7ff fabc 	bl	8004094 <HAL_GetTick>
 8004b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7ff fab8 	bl	8004094 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	@ 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e356      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b32:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0xe4>
 8004b3e:	e014      	b.n	8004b6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7ff faa8 	bl	8004094 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b48:	f7ff faa4 	bl	8004094 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	@ 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e342      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b5a:	4b49      	ldr	r3, [pc, #292]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x10c>
 8004b66:	e000      	b.n	8004b6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 808c 	beq.w	8004c90 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b78:	4b41      	ldr	r3, [pc, #260]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b82:	4b3f      	ldr	r3, [pc, #252]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <HAL_RCC_OscConfig+0x162>
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2b18      	cmp	r3, #24
 8004b92:	d137      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1c8>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d132      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b9e:	4b38      	ldr	r3, [pc, #224]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x17a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e314      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bb6:	4b32      	ldr	r3, [pc, #200]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 0219 	bic.w	r2, r3, #25
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	492f      	ldr	r1, [pc, #188]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7ff fa64 	bl	8004094 <HAL_GetTick>
 8004bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd0:	f7ff fa60 	bl	8004094 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e2fe      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be2:	4b27      	ldr	r3, [pc, #156]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	4b24      	ldr	r3, [pc, #144]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	061b      	lsls	r3, r3, #24
 8004bfc:	4920      	ldr	r1, [pc, #128]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c02:	e045      	b.n	8004c90 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d026      	beq.n	8004c5a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f023 0219 	bic.w	r2, r3, #25
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4919      	ldr	r1, [pc, #100]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1e:	f7ff fa39 	bl	8004094 <HAL_GetTick>
 8004c22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c26:	f7ff fa35 	bl	8004094 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e2d3      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c38:	4b11      	ldr	r3, [pc, #68]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c44:	4b0e      	ldr	r3, [pc, #56]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	061b      	lsls	r3, r3, #24
 8004c52:	490b      	ldr	r1, [pc, #44]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	604b      	str	r3, [r1, #4]
 8004c58:	e01a      	b.n	8004c90 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c5a:	4b09      	ldr	r3, [pc, #36]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a08      	ldr	r2, [pc, #32]	@ (8004c80 <HAL_RCC_OscConfig+0x244>)
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7ff fa15 	bl	8004094 <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6e:	f7ff fa11 	bl	8004094 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d903      	bls.n	8004c84 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e2af      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
 8004c80:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c84:	4b96      	ldr	r3, [pc, #600]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1ee      	bne.n	8004c6e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d06a      	beq.n	8004d72 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c9c:	4b90      	ldr	r3, [pc, #576]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ca4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ca6:	4b8e      	ldr	r3, [pc, #568]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004caa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d007      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x286>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b18      	cmp	r3, #24
 8004cb6:	d11b      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x2b4>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d116      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cc2:	4b87      	ldr	r3, [pc, #540]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_RCC_OscConfig+0x29e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	2b80      	cmp	r3, #128	@ 0x80
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e282      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cda:	4b81      	ldr	r3, [pc, #516]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	061b      	lsls	r3, r3, #24
 8004ce8:	497d      	ldr	r1, [pc, #500]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cee:	e040      	b.n	8004d72 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d023      	beq.n	8004d40 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cf8:	4b79      	ldr	r3, [pc, #484]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a78      	ldr	r2, [pc, #480]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7ff f9c6 	bl	8004094 <HAL_GetTick>
 8004d08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d0c:	f7ff f9c2 	bl	8004094 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e260      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d1e:	4b70      	ldr	r3, [pc, #448]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	4969      	ldr	r1, [pc, #420]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60cb      	str	r3, [r1, #12]
 8004d3e:	e018      	b.n	8004d72 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d40:	4b67      	ldr	r3, [pc, #412]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a66      	ldr	r2, [pc, #408]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7ff f9a2 	bl	8004094 <HAL_GetTick>
 8004d50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d54:	f7ff f99e 	bl	8004094 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e23c      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d66:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d036      	beq.n	8004dec <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d019      	beq.n	8004dba <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d86:	4b56      	ldr	r3, [pc, #344]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d8a:	4a55      	ldr	r2, [pc, #340]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d92:	f7ff f97f 	bl	8004094 <HAL_GetTick>
 8004d96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9a:	f7ff f97b 	bl	8004094 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e219      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dac:	4b4c      	ldr	r3, [pc, #304]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x35e>
 8004db8:	e018      	b.n	8004dec <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dba:	4b49      	ldr	r3, [pc, #292]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbe:	4a48      	ldr	r2, [pc, #288]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc6:	f7ff f965 	bl	8004094 <HAL_GetTick>
 8004dca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dce:	f7ff f961 	bl	8004094 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e1ff      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004de0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f0      	bne.n	8004dce <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d036      	beq.n	8004e66 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d019      	beq.n	8004e34 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e00:	4b37      	ldr	r3, [pc, #220]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a36      	ldr	r2, [pc, #216]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004e06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e0c:	f7ff f942 	bl	8004094 <HAL_GetTick>
 8004e10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e14:	f7ff f93e 	bl	8004094 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1dc      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e26:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x3d8>
 8004e32:	e018      	b.n	8004e66 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e34:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a29      	ldr	r2, [pc, #164]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004e3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e40:	f7ff f928 	bl	8004094 <HAL_GetTick>
 8004e44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e48:	f7ff f924 	bl	8004094 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e1c2      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e5a:	4b21      	ldr	r3, [pc, #132]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8086 	beq.w	8004f80 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee4 <HAL_RCC_OscConfig+0x4a8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1a      	ldr	r2, [pc, #104]	@ (8004ee4 <HAL_RCC_OscConfig+0x4a8>)
 8004e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e80:	f7ff f908 	bl	8004094 <HAL_GetTick>
 8004e84:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e88:	f7ff f904 	bl	8004094 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	@ 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e1a2      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <HAL_RCC_OscConfig+0x4a8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d106      	bne.n	8004ebc <HAL_RCC_OscConfig+0x480>
 8004eae:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eba:	e032      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d111      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x4ac>
 8004ec4:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec8:	4a05      	ldr	r2, [pc, #20]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed0:	4b03      	ldr	r3, [pc, #12]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed4:	4a02      	ldr	r2, [pc, #8]	@ (8004ee0 <HAL_RCC_OscConfig+0x4a4>)
 8004ed6:	f023 0304 	bic.w	r3, r3, #4
 8004eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004edc:	e021      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e6>
 8004ede:	bf00      	nop
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	58024800 	.word	0x58024800
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b05      	cmp	r3, #5
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCC_OscConfig+0x4ce>
 8004ef0:	4b83      	ldr	r3, [pc, #524]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef4:	4a82      	ldr	r2, [pc, #520]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004ef6:	f043 0304 	orr.w	r3, r3, #4
 8004efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004efc:	4b80      	ldr	r3, [pc, #512]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f00:	4a7f      	ldr	r2, [pc, #508]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f08:	e00b      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e6>
 8004f0a:	4b7d      	ldr	r3, [pc, #500]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	4a7c      	ldr	r2, [pc, #496]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f16:	4b7a      	ldr	r3, [pc, #488]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1a:	4a79      	ldr	r2, [pc, #484]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004f1c:	f023 0304 	bic.w	r3, r3, #4
 8004f20:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d015      	beq.n	8004f56 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7ff f8b3 	bl	8004094 <HAL_GetTick>
 8004f2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f30:	e00a      	b.n	8004f48 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f32:	f7ff f8af 	bl	8004094 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e14b      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f48:	4b6d      	ldr	r3, [pc, #436]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0ee      	beq.n	8004f32 <HAL_RCC_OscConfig+0x4f6>
 8004f54:	e014      	b.n	8004f80 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f56:	f7ff f89d 	bl	8004094 <HAL_GetTick>
 8004f5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f5c:	e00a      	b.n	8004f74 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7ff f899 	bl	8004094 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e135      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f74:	4b62      	ldr	r3, [pc, #392]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1ee      	bne.n	8004f5e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 812a 	beq.w	80051de <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f92:	2b18      	cmp	r3, #24
 8004f94:	f000 80ba 	beq.w	800510c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	f040 8095 	bne.w	80050cc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa2:	4b57      	ldr	r3, [pc, #348]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a56      	ldr	r2, [pc, #344]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004fa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7ff f871 	bl	8004094 <HAL_GetTick>
 8004fb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb6:	f7ff f86d 	bl	8004094 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e10b      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004fd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8005104 <HAL_RCC_OscConfig+0x6c8>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fe4:	0112      	lsls	r2, r2, #4
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	4945      	ldr	r1, [pc, #276]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	025b      	lsls	r3, r3, #9
 8005000:	b29b      	uxth	r3, r3
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	3b01      	subs	r3, #1
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005016:	3b01      	subs	r3, #1
 8005018:	061b      	lsls	r3, r3, #24
 800501a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800501e:	4938      	ldr	r1, [pc, #224]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005020:	4313      	orrs	r3, r2
 8005022:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005024:	4b36      	ldr	r3, [pc, #216]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005028:	4a35      	ldr	r2, [pc, #212]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005030:	4b33      	ldr	r3, [pc, #204]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005034:	4b34      	ldr	r3, [pc, #208]	@ (8005108 <HAL_RCC_OscConfig+0x6cc>)
 8005036:	4013      	ands	r3, r2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800503c:	00d2      	lsls	r2, r2, #3
 800503e:	4930      	ldr	r1, [pc, #192]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005040:	4313      	orrs	r3, r2
 8005042:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005044:	4b2e      	ldr	r3, [pc, #184]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	f023 020c 	bic.w	r2, r3, #12
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	492b      	ldr	r1, [pc, #172]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005052:	4313      	orrs	r3, r2
 8005054:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005056:	4b2a      	ldr	r3, [pc, #168]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	f023 0202 	bic.w	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	4927      	ldr	r1, [pc, #156]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005064:	4313      	orrs	r3, r2
 8005066:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005068:	4b25      	ldr	r3, [pc, #148]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	4a24      	ldr	r2, [pc, #144]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 800506e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005074:	4b22      	ldr	r3, [pc, #136]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	4a21      	ldr	r2, [pc, #132]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 800507a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800507e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005080:	4b1f      	ldr	r3, [pc, #124]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	4a1e      	ldr	r2, [pc, #120]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005086:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800508a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800508c:	4b1c      	ldr	r3, [pc, #112]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 800508e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005090:	4a1b      	ldr	r2, [pc, #108]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005098:	4b19      	ldr	r3, [pc, #100]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a18      	ldr	r2, [pc, #96]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fe fff6 	bl	8004094 <HAL_GetTick>
 80050a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fe fff2 	bl	8004094 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e090      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050be:	4b10      	ldr	r3, [pc, #64]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x670>
 80050ca:	e088      	b.n	80051de <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fe ffdc 	bl	8004094 <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fe ffd8 	bl	8004094 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e076      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050f2:	4b03      	ldr	r3, [pc, #12]	@ (8005100 <HAL_RCC_OscConfig+0x6c4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x6a4>
 80050fe:	e06e      	b.n	80051de <HAL_RCC_OscConfig+0x7a2>
 8005100:	58024400 	.word	0x58024400
 8005104:	fffffc0c 	.word	0xfffffc0c
 8005108:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800510c:	4b36      	ldr	r3, [pc, #216]	@ (80051e8 <HAL_RCC_OscConfig+0x7ac>)
 800510e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005110:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005112:	4b35      	ldr	r3, [pc, #212]	@ (80051e8 <HAL_RCC_OscConfig+0x7ac>)
 8005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005116:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	2b01      	cmp	r3, #1
 800511e:	d031      	beq.n	8005184 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f003 0203 	and.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d12a      	bne.n	8005184 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d122      	bne.n	8005184 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005148:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d11a      	bne.n	8005184 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	0a5b      	lsrs	r3, r3, #9
 8005152:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800515a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d111      	bne.n	8005184 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d108      	bne.n	8005184 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	0e1b      	lsrs	r3, r3, #24
 8005176:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e02b      	b.n	80051e0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005188:	4b17      	ldr	r3, [pc, #92]	@ (80051e8 <HAL_RCC_OscConfig+0x7ac>)
 800518a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518c:	08db      	lsrs	r3, r3, #3
 800518e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005192:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	429a      	cmp	r2, r3
 800519c:	d01f      	beq.n	80051de <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800519e:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <HAL_RCC_OscConfig+0x7ac>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	4a11      	ldr	r2, [pc, #68]	@ (80051e8 <HAL_RCC_OscConfig+0x7ac>)
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051aa:	f7fe ff73 	bl	8004094 <HAL_GetTick>
 80051ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80051b0:	bf00      	nop
 80051b2:	f7fe ff6f 	bl	8004094 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d0f9      	beq.n	80051b2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051be:	4b0a      	ldr	r3, [pc, #40]	@ (80051e8 <HAL_RCC_OscConfig+0x7ac>)
 80051c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c2:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <HAL_RCC_OscConfig+0x7b0>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051ca:	00d2      	lsls	r2, r2, #3
 80051cc:	4906      	ldr	r1, [pc, #24]	@ (80051e8 <HAL_RCC_OscConfig+0x7ac>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80051d2:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <HAL_RCC_OscConfig+0x7ac>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	4a04      	ldr	r2, [pc, #16]	@ (80051e8 <HAL_RCC_OscConfig+0x7ac>)
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3730      	adds	r7, #48	@ 0x30
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	58024400 	.word	0x58024400
 80051ec:	ffff0007 	.word	0xffff0007

080051f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e19c      	b.n	800553e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005204:	4b8a      	ldr	r3, [pc, #552]	@ (8005430 <HAL_RCC_ClockConfig+0x240>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d910      	bls.n	8005234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005212:	4b87      	ldr	r3, [pc, #540]	@ (8005430 <HAL_RCC_ClockConfig+0x240>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 020f 	bic.w	r2, r3, #15
 800521a:	4985      	ldr	r1, [pc, #532]	@ (8005430 <HAL_RCC_ClockConfig+0x240>)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b83      	ldr	r3, [pc, #524]	@ (8005430 <HAL_RCC_ClockConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e184      	b.n	800553e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d010      	beq.n	8005262 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	4b7b      	ldr	r3, [pc, #492]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800524c:	429a      	cmp	r2, r3
 800524e:	d908      	bls.n	8005262 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005250:	4b78      	ldr	r3, [pc, #480]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	4975      	ldr	r1, [pc, #468]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 800525e:	4313      	orrs	r3, r2
 8005260:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d010      	beq.n	8005290 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	4b70      	ldr	r3, [pc, #448]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800527a:	429a      	cmp	r2, r3
 800527c:	d908      	bls.n	8005290 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800527e:	4b6d      	ldr	r3, [pc, #436]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	496a      	ldr	r1, [pc, #424]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 800528c:	4313      	orrs	r3, r2
 800528e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b00      	cmp	r3, #0
 800529a:	d010      	beq.n	80052be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	4b64      	ldr	r3, [pc, #400]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d908      	bls.n	80052be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052ac:	4b61      	ldr	r3, [pc, #388]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	495e      	ldr	r1, [pc, #376]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d010      	beq.n	80052ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	4b59      	ldr	r3, [pc, #356]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d908      	bls.n	80052ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052da:	4b56      	ldr	r3, [pc, #344]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	4953      	ldr	r1, [pc, #332]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d010      	beq.n	800531a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	429a      	cmp	r2, r3
 8005306:	d908      	bls.n	800531a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005308:	4b4a      	ldr	r3, [pc, #296]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f023 020f 	bic.w	r2, r3, #15
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4947      	ldr	r1, [pc, #284]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005316:	4313      	orrs	r3, r2
 8005318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d055      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005326:	4b43      	ldr	r3, [pc, #268]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	4940      	ldr	r1, [pc, #256]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005334:	4313      	orrs	r3, r2
 8005336:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d107      	bne.n	8005350 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005340:	4b3c      	ldr	r3, [pc, #240]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d121      	bne.n	8005390 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0f6      	b.n	800553e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d107      	bne.n	8005368 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005358:	4b36      	ldr	r3, [pc, #216]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d115      	bne.n	8005390 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0ea      	b.n	800553e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d107      	bne.n	8005380 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005370:	4b30      	ldr	r3, [pc, #192]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005378:	2b00      	cmp	r3, #0
 800537a:	d109      	bne.n	8005390 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0de      	b.n	800553e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005380:	4b2c      	ldr	r3, [pc, #176]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0d6      	b.n	800553e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005390:	4b28      	ldr	r3, [pc, #160]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f023 0207 	bic.w	r2, r3, #7
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	4925      	ldr	r1, [pc, #148]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a2:	f7fe fe77 	bl	8004094 <HAL_GetTick>
 80053a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053aa:	f7fe fe73 	bl	8004094 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e0be      	b.n	800553e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d1eb      	bne.n	80053aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d010      	beq.n	8005400 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	4b14      	ldr	r3, [pc, #80]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d208      	bcs.n	8005400 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ee:	4b11      	ldr	r3, [pc, #68]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f023 020f 	bic.w	r2, r3, #15
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	490e      	ldr	r1, [pc, #56]	@ (8005434 <HAL_RCC_ClockConfig+0x244>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005400:	4b0b      	ldr	r3, [pc, #44]	@ (8005430 <HAL_RCC_ClockConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d214      	bcs.n	8005438 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540e:	4b08      	ldr	r3, [pc, #32]	@ (8005430 <HAL_RCC_ClockConfig+0x240>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 020f 	bic.w	r2, r3, #15
 8005416:	4906      	ldr	r1, [pc, #24]	@ (8005430 <HAL_RCC_ClockConfig+0x240>)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800541e:	4b04      	ldr	r3, [pc, #16]	@ (8005430 <HAL_RCC_ClockConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d005      	beq.n	8005438 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e086      	b.n	800553e <HAL_RCC_ClockConfig+0x34e>
 8005430:	52002000 	.word	0x52002000
 8005434:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d010      	beq.n	8005466 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	4b3f      	ldr	r3, [pc, #252]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005450:	429a      	cmp	r2, r3
 8005452:	d208      	bcs.n	8005466 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005454:	4b3c      	ldr	r3, [pc, #240]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	4939      	ldr	r1, [pc, #228]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 8005462:	4313      	orrs	r3, r2
 8005464:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	4b34      	ldr	r3, [pc, #208]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800547e:	429a      	cmp	r2, r3
 8005480:	d208      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005482:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	492e      	ldr	r1, [pc, #184]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 8005490:	4313      	orrs	r3, r2
 8005492:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	4b28      	ldr	r3, [pc, #160]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d208      	bcs.n	80054c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054b0:	4b25      	ldr	r3, [pc, #148]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	4922      	ldr	r1, [pc, #136]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d010      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69da      	ldr	r2, [r3, #28]
 80054d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054da:	429a      	cmp	r2, r3
 80054dc:	d208      	bcs.n	80054f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054de:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	4917      	ldr	r1, [pc, #92]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054f0:	f000 f834 	bl	800555c <HAL_RCC_GetSysClockFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b14      	ldr	r3, [pc, #80]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	4912      	ldr	r1, [pc, #72]	@ (800554c <HAL_RCC_ClockConfig+0x35c>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
 800550c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800550e:	4b0e      	ldr	r3, [pc, #56]	@ (8005548 <HAL_RCC_ClockConfig+0x358>)
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	4a0d      	ldr	r2, [pc, #52]	@ (800554c <HAL_RCC_ClockConfig+0x35c>)
 8005518:	5cd3      	ldrb	r3, [r2, r3]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
 8005524:	4a0a      	ldr	r2, [pc, #40]	@ (8005550 <HAL_RCC_ClockConfig+0x360>)
 8005526:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005528:	4a0a      	ldr	r2, [pc, #40]	@ (8005554 <HAL_RCC_ClockConfig+0x364>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800552e:	4b0a      	ldr	r3, [pc, #40]	@ (8005558 <HAL_RCC_ClockConfig+0x368>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe fd64 	bl	8004000 <HAL_InitTick>
 8005538:	4603      	mov	r3, r0
 800553a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	58024400 	.word	0x58024400
 800554c:	08011f80 	.word	0x08011f80
 8005550:	24000008 	.word	0x24000008
 8005554:	24000004 	.word	0x24000004
 8005558:	24000014 	.word	0x24000014

0800555c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800555c:	b480      	push	{r7}
 800555e:	b089      	sub	sp, #36	@ 0x24
 8005560:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005562:	4bb3      	ldr	r3, [pc, #716]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800556a:	2b18      	cmp	r3, #24
 800556c:	f200 8155 	bhi.w	800581a <HAL_RCC_GetSysClockFreq+0x2be>
 8005570:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055dd 	.word	0x080055dd
 800557c:	0800581b 	.word	0x0800581b
 8005580:	0800581b 	.word	0x0800581b
 8005584:	0800581b 	.word	0x0800581b
 8005588:	0800581b 	.word	0x0800581b
 800558c:	0800581b 	.word	0x0800581b
 8005590:	0800581b 	.word	0x0800581b
 8005594:	0800581b 	.word	0x0800581b
 8005598:	08005603 	.word	0x08005603
 800559c:	0800581b 	.word	0x0800581b
 80055a0:	0800581b 	.word	0x0800581b
 80055a4:	0800581b 	.word	0x0800581b
 80055a8:	0800581b 	.word	0x0800581b
 80055ac:	0800581b 	.word	0x0800581b
 80055b0:	0800581b 	.word	0x0800581b
 80055b4:	0800581b 	.word	0x0800581b
 80055b8:	08005609 	.word	0x08005609
 80055bc:	0800581b 	.word	0x0800581b
 80055c0:	0800581b 	.word	0x0800581b
 80055c4:	0800581b 	.word	0x0800581b
 80055c8:	0800581b 	.word	0x0800581b
 80055cc:	0800581b 	.word	0x0800581b
 80055d0:	0800581b 	.word	0x0800581b
 80055d4:	0800581b 	.word	0x0800581b
 80055d8:	0800560f 	.word	0x0800560f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055dc:	4b94      	ldr	r3, [pc, #592]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d009      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055e8:	4b91      	ldr	r3, [pc, #580]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	08db      	lsrs	r3, r3, #3
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	4a90      	ldr	r2, [pc, #576]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055f4:	fa22 f303 	lsr.w	r3, r2, r3
 80055f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80055fa:	e111      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80055fc:	4b8d      	ldr	r3, [pc, #564]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055fe:	61bb      	str	r3, [r7, #24]
      break;
 8005600:	e10e      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005602:	4b8d      	ldr	r3, [pc, #564]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005604:	61bb      	str	r3, [r7, #24]
      break;
 8005606:	e10b      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005608:	4b8c      	ldr	r3, [pc, #560]	@ (800583c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800560a:	61bb      	str	r3, [r7, #24]
      break;
 800560c:	e108      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800560e:	4b88      	ldr	r3, [pc, #544]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005618:	4b85      	ldr	r3, [pc, #532]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005622:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005624:	4b82      	ldr	r3, [pc, #520]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800562e:	4b80      	ldr	r3, [pc, #512]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005632:	08db      	lsrs	r3, r3, #3
 8005634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	fb02 f303 	mul.w	r3, r2, r3
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80e1 	beq.w	8005814 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b02      	cmp	r3, #2
 8005656:	f000 8083 	beq.w	8005760 <HAL_RCC_GetSysClockFreq+0x204>
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b02      	cmp	r3, #2
 800565e:	f200 80a1 	bhi.w	80057a4 <HAL_RCC_GetSysClockFreq+0x248>
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_RCC_GetSysClockFreq+0x114>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d056      	beq.n	800571c <HAL_RCC_GetSysClockFreq+0x1c0>
 800566e:	e099      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005670:	4b6f      	ldr	r3, [pc, #444]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d02d      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800567c:	4b6c      	ldr	r3, [pc, #432]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	08db      	lsrs	r3, r3, #3
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	4a6b      	ldr	r2, [pc, #428]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
 800568c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a6:	4b62      	ldr	r3, [pc, #392]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005840 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80056d6:	e087      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005844 <HAL_RCC_GetSysClockFreq+0x2e8>
 80056e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ea:	4b51      	ldr	r3, [pc, #324]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80056fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005840 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800570e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005716:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800571a:	e065      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005726:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005848 <HAL_RCC_GetSysClockFreq+0x2ec>
 800572a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572e:	4b40      	ldr	r3, [pc, #256]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005742:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005840 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800574e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800575e:	e043      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800584c <HAL_RCC_GetSysClockFreq+0x2f0>
 800576e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005772:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005782:	ed97 6a02 	vldr	s12, [r7, #8]
 8005786:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005840 <HAL_RCC_GetSysClockFreq+0x2e4>
 800578a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800578e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057a2:	e021      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005848 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005840 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80057e8:	4b11      	ldr	r3, [pc, #68]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	0a5b      	lsrs	r3, r3, #9
 80057ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057f2:	3301      	adds	r3, #1
 80057f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005800:	edd7 6a07 	vldr	s13, [r7, #28]
 8005804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800580c:	ee17 3a90 	vmov	r3, s15
 8005810:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005812:	e005      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	61bb      	str	r3, [r7, #24]
      break;
 8005818:	e002      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800581a:	4b07      	ldr	r3, [pc, #28]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800581c:	61bb      	str	r3, [r7, #24]
      break;
 800581e:	bf00      	nop
  }

  return sysclockfreq;
 8005820:	69bb      	ldr	r3, [r7, #24]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3724      	adds	r7, #36	@ 0x24
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	58024400 	.word	0x58024400
 8005834:	03d09000 	.word	0x03d09000
 8005838:	003d0900 	.word	0x003d0900
 800583c:	02dc6c00 	.word	0x02dc6c00
 8005840:	46000000 	.word	0x46000000
 8005844:	4c742400 	.word	0x4c742400
 8005848:	4a742400 	.word	0x4a742400
 800584c:	4c371b00 	.word	0x4c371b00

08005850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005856:	f7ff fe81 	bl	800555c <HAL_RCC_GetSysClockFreq>
 800585a:	4602      	mov	r2, r0
 800585c:	4b10      	ldr	r3, [pc, #64]	@ (80058a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	0a1b      	lsrs	r3, r3, #8
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	490f      	ldr	r1, [pc, #60]	@ (80058a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005868:	5ccb      	ldrb	r3, [r1, r3]
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	fa22 f303 	lsr.w	r3, r2, r3
 8005872:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005874:	4b0a      	ldr	r3, [pc, #40]	@ (80058a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	4a09      	ldr	r2, [pc, #36]	@ (80058a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800587e:	5cd3      	ldrb	r3, [r2, r3]
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	fa22 f303 	lsr.w	r3, r2, r3
 800588a:	4a07      	ldr	r2, [pc, #28]	@ (80058a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800588c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800588e:	4a07      	ldr	r2, [pc, #28]	@ (80058ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005894:	4b04      	ldr	r3, [pc, #16]	@ (80058a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005896:	681b      	ldr	r3, [r3, #0]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	58024400 	.word	0x58024400
 80058a4:	08011f80 	.word	0x08011f80
 80058a8:	24000008 	.word	0x24000008
 80058ac:	24000004 	.word	0x24000004

080058b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058b4:	f7ff ffcc 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b06      	ldr	r3, [pc, #24]	@ (80058d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	091b      	lsrs	r3, r3, #4
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4904      	ldr	r1, [pc, #16]	@ (80058d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	58024400 	.word	0x58024400
 80058d8:	08011f80 	.word	0x08011f80

080058dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058e0:	f7ff ffb6 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 80058e4:	4602      	mov	r2, r0
 80058e6:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	0a1b      	lsrs	r3, r3, #8
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	4904      	ldr	r1, [pc, #16]	@ (8005904 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058f2:	5ccb      	ldrb	r3, [r1, r3]
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	58024400 	.word	0x58024400
 8005904:	08011f80 	.word	0x08011f80

08005908 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800590c:	b0c6      	sub	sp, #280	@ 0x118
 800590e:	af00      	add	r7, sp, #0
 8005910:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005914:	2300      	movs	r3, #0
 8005916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800591a:	2300      	movs	r3, #0
 800591c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800592c:	2500      	movs	r5, #0
 800592e:	ea54 0305 	orrs.w	r3, r4, r5
 8005932:	d049      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800593a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800593e:	d02f      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005940:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005944:	d828      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005946:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800594a:	d01a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800594c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005950:	d822      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800595a:	d007      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800595c:	e01c      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595e:	4bab      	ldr	r3, [pc, #684]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	4aaa      	ldr	r2, [pc, #680]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005968:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800596a:	e01a      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800596c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005970:	3308      	adds	r3, #8
 8005972:	2102      	movs	r1, #2
 8005974:	4618      	mov	r0, r3
 8005976:	f002 fa49 	bl	8007e0c <RCCEx_PLL2_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005980:	e00f      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005986:	3328      	adds	r3, #40	@ 0x28
 8005988:	2102      	movs	r1, #2
 800598a:	4618      	mov	r0, r3
 800598c:	f002 faf0 	bl	8007f70 <RCCEx_PLL3_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005996:	e004      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800599e:	e000      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80059a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059aa:	4b98      	ldr	r3, [pc, #608]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80059b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b8:	4a94      	ldr	r2, [pc, #592]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059ba:	430b      	orrs	r3, r1
 80059bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80059be:	e003      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80059d4:	f04f 0900 	mov.w	r9, #0
 80059d8:	ea58 0309 	orrs.w	r3, r8, r9
 80059dc:	d047      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80059de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d82a      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80059e8:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a05 	.word	0x08005a05
 80059f4:	08005a13 	.word	0x08005a13
 80059f8:	08005a29 	.word	0x08005a29
 80059fc:	08005a47 	.word	0x08005a47
 8005a00:	08005a47 	.word	0x08005a47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a04:	4b81      	ldr	r3, [pc, #516]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	4a80      	ldr	r2, [pc, #512]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a10:	e01a      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a16:	3308      	adds	r3, #8
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f002 f9f6 	bl	8007e0c <RCCEx_PLL2_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a26:	e00f      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	3328      	adds	r3, #40	@ 0x28
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f002 fa9d 	bl	8007f70 <RCCEx_PLL3_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a3c:	e004      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a50:	4b6e      	ldr	r3, [pc, #440]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a54:	f023 0107 	bic.w	r1, r3, #7
 8005a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5e:	4a6b      	ldr	r2, [pc, #428]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a64:	e003      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005a7a:	f04f 0b00 	mov.w	fp, #0
 8005a7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a82:	d05b      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a8c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005a90:	d03b      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005a92:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005a96:	d834      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a9c:	d037      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005aa2:	d82e      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005aa4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005aa8:	d033      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005aaa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005aae:	d828      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ab4:	d01a      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005ab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aba:	d822      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005ac0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ac4:	d007      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005ac6:	e01c      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac8:	4b50      	ldr	r3, [pc, #320]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005acc:	4a4f      	ldr	r2, [pc, #316]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ad4:	e01e      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ada:	3308      	adds	r3, #8
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f002 f994 	bl	8007e0c <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005aea:	e013      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af0:	3328      	adds	r3, #40	@ 0x28
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f002 fa3b 	bl	8007f70 <RCCEx_PLL3_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b00:	e008      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b08:	e004      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005b0a:	bf00      	nop
 8005b0c:	e002      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005b0e:	bf00      	nop
 8005b10:	e000      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b20:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b2c:	4a37      	ldr	r2, [pc, #220]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b2e:	430b      	orrs	r3, r1
 8005b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b32:	e003      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b52:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b56:	460b      	mov	r3, r1
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	d05d      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b64:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b68:	d03b      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005b6a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b6e:	d834      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b74:	d037      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b7a:	d82e      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b80:	d033      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005b82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b86:	d828      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b8c:	d01a      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b92:	d822      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b9c:	d007      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005b9e:	e01c      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba4:	4a19      	ldr	r2, [pc, #100]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bac:	e01e      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f002 f928 	bl	8007e0c <RCCEx_PLL2_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bc2:	e013      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc8:	3328      	adds	r3, #40	@ 0x28
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f002 f9cf 	bl	8007f70 <RCCEx_PLL3_Config>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bd8:	e008      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005be0:	e004      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005be2:	bf00      	nop
 8005be4:	e002      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10d      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bf4:	4b05      	ldr	r3, [pc, #20]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c04:	4a01      	ldr	r2, [pc, #4]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c06:	430b      	orrs	r3, r1
 8005c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c0a:	e005      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005c0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005c2e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4313      	orrs	r3, r2
 8005c36:	d03a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c3e:	2b30      	cmp	r3, #48	@ 0x30
 8005c40:	d01f      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005c42:	2b30      	cmp	r3, #48	@ 0x30
 8005c44:	d819      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d00c      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d815      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d019      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c52:	2b10      	cmp	r3, #16
 8005c54:	d111      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c56:	4baa      	ldr	r3, [pc, #680]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5a:	4aa9      	ldr	r2, [pc, #676]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005c62:	e011      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c68:	3308      	adds	r3, #8
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f002 f8cd 	bl	8007e0c <RCCEx_PLL2_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005c78:	e006      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c80:	e002      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005c82:	bf00      	nop
 8005c84:	e000      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c90:	4b9b      	ldr	r3, [pc, #620]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c9e:	4a98      	ldr	r2, [pc, #608]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ca4:	e003      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005caa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005cba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005cc4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	d051      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cd8:	d035      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005cda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cde:	d82e      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ce0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ce4:	d031      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005ce6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cea:	d828      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf0:	d01a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf6:	d822      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d00:	d007      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005d02:	e01c      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d04:	4b7e      	ldr	r3, [pc, #504]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	4a7d      	ldr	r2, [pc, #500]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d10:	e01c      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d16:	3308      	adds	r3, #8
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f002 f876 	bl	8007e0c <RCCEx_PLL2_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d26:	e011      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2c:	3328      	adds	r3, #40	@ 0x28
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4618      	mov	r0, r3
 8005d32:	f002 f91d 	bl	8007f70 <RCCEx_PLL3_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d3c:	e006      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d44:	e002      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005d46:	bf00      	nop
 8005d48:	e000      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d54:	4b6a      	ldr	r3, [pc, #424]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d62:	4a67      	ldr	r2, [pc, #412]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d68:	e003      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005d7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d82:	2300      	movs	r3, #0
 8005d84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d88:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	d053      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d9c:	d033      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005d9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005da2:	d82c      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005da4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005da8:	d02f      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005daa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dae:	d826      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005db0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005db4:	d02b      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005db6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dba:	d820      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dc0:	d012      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dc6:	d81a      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d022      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd0:	d115      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f002 f816 	bl	8007e0c <RCCEx_PLL2_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005de6:	e015      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dec:	3328      	adds	r3, #40	@ 0x28
 8005dee:	2101      	movs	r1, #1
 8005df0:	4618      	mov	r0, r3
 8005df2:	f002 f8bd 	bl	8007f70 <RCCEx_PLL3_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005dfc:	e00a      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e04:	e006      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005e06:	bf00      	nop
 8005e08:	e004      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005e0a:	bf00      	nop
 8005e0c:	e002      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e1c:	4b38      	ldr	r3, [pc, #224]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e2a:	4a35      	ldr	r2, [pc, #212]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e30:	e003      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005e46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e50:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e54:	460b      	mov	r3, r1
 8005e56:	4313      	orrs	r3, r2
 8005e58:	d058      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e66:	d033      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e6c:	d82c      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e72:	d02f      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e78:	d826      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e7e:	d02b      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005e80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e84:	d820      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e8a:	d012      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e90:	d81a      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d022      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e9a:	d115      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 ffb1 	bl	8007e0c <RCCEx_PLL2_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005eb0:	e015      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb6:	3328      	adds	r3, #40	@ 0x28
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f002 f858 	bl	8007f70 <RCCEx_PLL3_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ec6:	e00a      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ece:	e006      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ed0:	bf00      	nop
 8005ed2:	e004      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ed4:	bf00      	nop
 8005ed6:	e002      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ed8:	bf00      	nop
 8005eda:	e000      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ede:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10e      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ee6:	4b06      	ldr	r3, [pc, #24]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ef6:	4a02      	ldr	r2, [pc, #8]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005efc:	e006      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005efe:	bf00      	nop
 8005f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005f18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	d037      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f36:	d00e      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f3c:	d816      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d018      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f46:	d111      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f48:	4bc4      	ldr	r3, [pc, #784]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4c:	4ac3      	ldr	r2, [pc, #780]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f54:	e00f      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 ff54 	bl	8007e0c <RCCEx_PLL2_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f6a:	e004      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f72:	e000      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f7e:	4bb7      	ldr	r3, [pc, #732]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f8c:	4ab3      	ldr	r2, [pc, #716]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f92:	e003      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fac:	2300      	movs	r3, #0
 8005fae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d039      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d81c      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08006009 	.word	0x08006009
 8005fd0:	08005fdd 	.word	0x08005fdd
 8005fd4:	08005feb 	.word	0x08005feb
 8005fd8:	08006009 	.word	0x08006009
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fdc:	4b9f      	ldr	r3, [pc, #636]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	4a9e      	ldr	r2, [pc, #632]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fe8:	e00f      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fee:	3308      	adds	r3, #8
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 ff0a 	bl	8007e0c <RCCEx_PLL2_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ffe:	e004      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006006:	e000      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006012:	4b92      	ldr	r3, [pc, #584]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006016:	f023 0103 	bic.w	r1, r3, #3
 800601a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006020:	4a8e      	ldr	r2, [pc, #568]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006022:	430b      	orrs	r3, r1
 8006024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006026:	e003      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800602c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800603c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006046:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800604a:	460b      	mov	r3, r1
 800604c:	4313      	orrs	r3, r2
 800604e:	f000 8099 	beq.w	8006184 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006052:	4b83      	ldr	r3, [pc, #524]	@ (8006260 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a82      	ldr	r2, [pc, #520]	@ (8006260 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800605c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800605e:	f7fe f819 	bl	8004094 <HAL_GetTick>
 8006062:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006066:	e00b      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006068:	f7fe f814 	bl	8004094 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b64      	cmp	r3, #100	@ 0x64
 8006076:	d903      	bls.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800607e:	e005      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006080:	4b77      	ldr	r3, [pc, #476]	@ (8006260 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0ed      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800608c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006090:	2b00      	cmp	r3, #0
 8006092:	d173      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006094:	4b71      	ldr	r3, [pc, #452]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006096:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060a0:	4053      	eors	r3, r2
 80060a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d015      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060aa:	4b6c      	ldr	r3, [pc, #432]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060b6:	4b69      	ldr	r3, [pc, #420]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ba:	4a68      	ldr	r2, [pc, #416]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060c2:	4b66      	ldr	r3, [pc, #408]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c6:	4a65      	ldr	r2, [pc, #404]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060ce:	4a63      	ldr	r2, [pc, #396]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060e2:	d118      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e4:	f7fd ffd6 	bl	8004094 <HAL_GetTick>
 80060e8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ec:	e00d      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ee:	f7fd ffd1 	bl	8004094 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80060f8:	1ad2      	subs	r2, r2, r3
 80060fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80060fe:	429a      	cmp	r2, r3
 8006100:	d903      	bls.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006108:	e005      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800610a:	4b54      	ldr	r3, [pc, #336]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0eb      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800611a:	2b00      	cmp	r3, #0
 800611c:	d129      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800611e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800612a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800612e:	d10e      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006130:	4b4a      	ldr	r3, [pc, #296]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006140:	091a      	lsrs	r2, r3, #4
 8006142:	4b48      	ldr	r3, [pc, #288]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006144:	4013      	ands	r3, r2
 8006146:	4a45      	ldr	r2, [pc, #276]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006148:	430b      	orrs	r3, r1
 800614a:	6113      	str	r3, [r2, #16]
 800614c:	e005      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800614e:	4b43      	ldr	r3, [pc, #268]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	4a42      	ldr	r2, [pc, #264]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006154:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006158:	6113      	str	r3, [r2, #16]
 800615a:	4b40      	ldr	r3, [pc, #256]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800615c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800615e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616a:	4a3c      	ldr	r2, [pc, #240]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800616c:	430b      	orrs	r3, r1
 800616e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006170:	e008      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006172:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006176:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800617a:	e003      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006180:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	f002 0301 	and.w	r3, r2, #1
 8006190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006194:	2300      	movs	r3, #0
 8006196:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800619a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800619e:	460b      	mov	r3, r1
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f000 808f 	beq.w	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061ac:	2b28      	cmp	r3, #40	@ 0x28
 80061ae:	d871      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80061b0:	a201      	add	r2, pc, #4	@ (adr r2, 80061b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80061b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b6:	bf00      	nop
 80061b8:	0800629d 	.word	0x0800629d
 80061bc:	08006295 	.word	0x08006295
 80061c0:	08006295 	.word	0x08006295
 80061c4:	08006295 	.word	0x08006295
 80061c8:	08006295 	.word	0x08006295
 80061cc:	08006295 	.word	0x08006295
 80061d0:	08006295 	.word	0x08006295
 80061d4:	08006295 	.word	0x08006295
 80061d8:	08006269 	.word	0x08006269
 80061dc:	08006295 	.word	0x08006295
 80061e0:	08006295 	.word	0x08006295
 80061e4:	08006295 	.word	0x08006295
 80061e8:	08006295 	.word	0x08006295
 80061ec:	08006295 	.word	0x08006295
 80061f0:	08006295 	.word	0x08006295
 80061f4:	08006295 	.word	0x08006295
 80061f8:	0800627f 	.word	0x0800627f
 80061fc:	08006295 	.word	0x08006295
 8006200:	08006295 	.word	0x08006295
 8006204:	08006295 	.word	0x08006295
 8006208:	08006295 	.word	0x08006295
 800620c:	08006295 	.word	0x08006295
 8006210:	08006295 	.word	0x08006295
 8006214:	08006295 	.word	0x08006295
 8006218:	0800629d 	.word	0x0800629d
 800621c:	08006295 	.word	0x08006295
 8006220:	08006295 	.word	0x08006295
 8006224:	08006295 	.word	0x08006295
 8006228:	08006295 	.word	0x08006295
 800622c:	08006295 	.word	0x08006295
 8006230:	08006295 	.word	0x08006295
 8006234:	08006295 	.word	0x08006295
 8006238:	0800629d 	.word	0x0800629d
 800623c:	08006295 	.word	0x08006295
 8006240:	08006295 	.word	0x08006295
 8006244:	08006295 	.word	0x08006295
 8006248:	08006295 	.word	0x08006295
 800624c:	08006295 	.word	0x08006295
 8006250:	08006295 	.word	0x08006295
 8006254:	08006295 	.word	0x08006295
 8006258:	0800629d 	.word	0x0800629d
 800625c:	58024400 	.word	0x58024400
 8006260:	58024800 	.word	0x58024800
 8006264:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626c:	3308      	adds	r3, #8
 800626e:	2101      	movs	r1, #1
 8006270:	4618      	mov	r0, r3
 8006272:	f001 fdcb 	bl	8007e0c <RCCEx_PLL2_Config>
 8006276:	4603      	mov	r3, r0
 8006278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800627c:	e00f      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800627e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006282:	3328      	adds	r3, #40	@ 0x28
 8006284:	2101      	movs	r1, #1
 8006286:	4618      	mov	r0, r3
 8006288:	f001 fe72 	bl	8007f70 <RCCEx_PLL3_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006292:	e004      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800629c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062a6:	4bbf      	ldr	r3, [pc, #764]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062b4:	4abb      	ldr	r2, [pc, #748]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062b6:	430b      	orrs	r3, r1
 80062b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80062ba:	e003      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f002 0302 	and.w	r3, r2, #2
 80062d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062d4:	2300      	movs	r3, #0
 80062d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80062de:	460b      	mov	r3, r1
 80062e0:	4313      	orrs	r3, r2
 80062e2:	d041      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ea:	2b05      	cmp	r3, #5
 80062ec:	d824      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80062ee:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006341 	.word	0x08006341
 80062f8:	0800630d 	.word	0x0800630d
 80062fc:	08006323 	.word	0x08006323
 8006300:	08006341 	.word	0x08006341
 8006304:	08006341 	.word	0x08006341
 8006308:	08006341 	.word	0x08006341
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800630c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006310:	3308      	adds	r3, #8
 8006312:	2101      	movs	r1, #1
 8006314:	4618      	mov	r0, r3
 8006316:	f001 fd79 	bl	8007e0c <RCCEx_PLL2_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006320:	e00f      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006326:	3328      	adds	r3, #40	@ 0x28
 8006328:	2101      	movs	r1, #1
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fe20 	bl	8007f70 <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006336:	e004      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800633e:	e000      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006342:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10a      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800634a:	4b96      	ldr	r3, [pc, #600]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800634c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634e:	f023 0107 	bic.w	r1, r3, #7
 8006352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006358:	4a92      	ldr	r2, [pc, #584]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800635a:	430b      	orrs	r3, r1
 800635c:	6553      	str	r3, [r2, #84]	@ 0x54
 800635e:	e003      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006364:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f002 0304 	and.w	r3, r2, #4
 8006374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006378:	2300      	movs	r3, #0
 800637a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800637e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006382:	460b      	mov	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	d044      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006390:	2b05      	cmp	r3, #5
 8006392:	d825      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006394:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063e9 	.word	0x080063e9
 80063a0:	080063b5 	.word	0x080063b5
 80063a4:	080063cb 	.word	0x080063cb
 80063a8:	080063e9 	.word	0x080063e9
 80063ac:	080063e9 	.word	0x080063e9
 80063b0:	080063e9 	.word	0x080063e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b8:	3308      	adds	r3, #8
 80063ba:	2101      	movs	r1, #1
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 fd25 	bl	8007e0c <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063c8:	e00f      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ce:	3328      	adds	r3, #40	@ 0x28
 80063d0:	2101      	movs	r1, #1
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 fdcc 	bl	8007f70 <RCCEx_PLL3_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063de:	e004      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063e6:	e000      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80063e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063f2:	4b6c      	ldr	r3, [pc, #432]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80063f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f6:	f023 0107 	bic.w	r1, r3, #7
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006402:	4a68      	ldr	r2, [pc, #416]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006404:	430b      	orrs	r3, r1
 8006406:	6593      	str	r3, [r2, #88]	@ 0x58
 8006408:	e003      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800640e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	f002 0320 	and.w	r3, r2, #32
 800641e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006422:	2300      	movs	r3, #0
 8006424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006428:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800642c:	460b      	mov	r3, r1
 800642e:	4313      	orrs	r3, r2
 8006430:	d055      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006436:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800643a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800643e:	d033      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006440:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006444:	d82c      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800644a:	d02f      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006450:	d826      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006452:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006456:	d02b      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006458:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800645c:	d820      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800645e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006462:	d012      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006468:	d81a      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d022      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800646e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006472:	d115      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	3308      	adds	r3, #8
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f001 fcc5 	bl	8007e0c <RCCEx_PLL2_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006488:	e015      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648e:	3328      	adds	r3, #40	@ 0x28
 8006490:	2102      	movs	r1, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f001 fd6c 	bl	8007f70 <RCCEx_PLL3_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800649e:	e00a      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064a6:	e006      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80064a8:	bf00      	nop
 80064aa:	e004      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80064ac:	bf00      	nop
 80064ae:	e002      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80064b0:	bf00      	nop
 80064b2:	e000      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80064b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10b      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064be:	4b39      	ldr	r3, [pc, #228]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064ce:	4a35      	ldr	r2, [pc, #212]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064d0:	430b      	orrs	r3, r1
 80064d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80064d4:	e003      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80064ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064ee:	2300      	movs	r3, #0
 80064f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064f4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80064f8:	460b      	mov	r3, r1
 80064fa:	4313      	orrs	r3, r2
 80064fc:	d058      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006502:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006506:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800650a:	d033      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800650c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006510:	d82c      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006516:	d02f      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651c:	d826      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800651e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006522:	d02b      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006524:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006528:	d820      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800652a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800652e:	d012      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006534:	d81a      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d022      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800653a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800653e:	d115      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006544:	3308      	adds	r3, #8
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fc5f 	bl	8007e0c <RCCEx_PLL2_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006554:	e015      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655a:	3328      	adds	r3, #40	@ 0x28
 800655c:	2102      	movs	r1, #2
 800655e:	4618      	mov	r0, r3
 8006560:	f001 fd06 	bl	8007f70 <RCCEx_PLL3_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800656a:	e00a      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006572:	e006      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006574:	bf00      	nop
 8006576:	e004      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006578:	bf00      	nop
 800657a:	e002      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800657c:	bf00      	nop
 800657e:	e000      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006582:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10e      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800658a:	4b06      	ldr	r3, [pc, #24]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800658c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006596:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800659a:	4a02      	ldr	r2, [pc, #8]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800659c:	430b      	orrs	r3, r1
 800659e:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a0:	e006      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80065a2:	bf00      	nop
 80065a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80065bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80065ca:	460b      	mov	r3, r1
 80065cc:	4313      	orrs	r3, r2
 80065ce:	d055      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065dc:	d033      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80065de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065e2:	d82c      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065e8:	d02f      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80065ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ee:	d826      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065f4:	d02b      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80065f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065fa:	d820      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006600:	d012      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006606:	d81a      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d022      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006610:	d115      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006616:	3308      	adds	r3, #8
 8006618:	2100      	movs	r1, #0
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fbf6 	bl	8007e0c <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006626:	e015      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662c:	3328      	adds	r3, #40	@ 0x28
 800662e:	2102      	movs	r1, #2
 8006630:	4618      	mov	r0, r3
 8006632:	f001 fc9d 	bl	8007f70 <RCCEx_PLL3_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800663c:	e00a      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006644:	e006      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006646:	bf00      	nop
 8006648:	e004      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800664a:	bf00      	nop
 800664c:	e002      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800664e:	bf00      	nop
 8006650:	e000      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800665c:	4ba0      	ldr	r3, [pc, #640]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800665e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006660:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006668:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800666c:	4a9c      	ldr	r2, [pc, #624]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800666e:	430b      	orrs	r3, r1
 8006670:	6593      	str	r3, [r2, #88]	@ 0x58
 8006672:	e003      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f002 0308 	and.w	r3, r2, #8
 8006688:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800668c:	2300      	movs	r3, #0
 800668e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006692:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006696:	460b      	mov	r3, r1
 8006698:	4313      	orrs	r3, r2
 800669a:	d01e      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ae:	3328      	adds	r3, #40	@ 0x28
 80066b0:	2102      	movs	r1, #2
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 fc5c 	bl	8007f70 <RCCEx_PLL3_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80066c4:	4b86      	ldr	r3, [pc, #536]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d4:	4a82      	ldr	r2, [pc, #520]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066d6:	430b      	orrs	r3, r1
 80066d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f002 0310 	and.w	r3, r2, #16
 80066e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066ea:	2300      	movs	r3, #0
 80066ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d01e      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006706:	d10c      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	3328      	adds	r3, #40	@ 0x28
 800670e:	2102      	movs	r1, #2
 8006710:	4618      	mov	r0, r3
 8006712:	f001 fc2d 	bl	8007f70 <RCCEx_PLL3_Config>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006722:	4b6f      	ldr	r3, [pc, #444]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006726:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006732:	4a6b      	ldr	r2, [pc, #428]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006734:	430b      	orrs	r3, r1
 8006736:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006746:	2300      	movs	r3, #0
 8006748:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800674a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800674e:	460b      	mov	r3, r1
 8006750:	4313      	orrs	r3, r2
 8006752:	d03e      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006758:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800675c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006760:	d022      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006766:	d81b      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800676c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006770:	d00b      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006772:	e015      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006778:	3308      	adds	r3, #8
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fb45 	bl	8007e0c <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006788:	e00f      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678e:	3328      	adds	r3, #40	@ 0x28
 8006790:	2102      	movs	r1, #2
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fbec 	bl	8007f70 <RCCEx_PLL3_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800679e:	e004      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067a6:	e000      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80067a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10b      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067b2:	4b4b      	ldr	r3, [pc, #300]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067c2:	4a47      	ldr	r2, [pc, #284]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80067c8:	e003      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80067de:	673b      	str	r3, [r7, #112]	@ 0x70
 80067e0:	2300      	movs	r3, #0
 80067e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80067e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80067e8:	460b      	mov	r3, r1
 80067ea:	4313      	orrs	r3, r2
 80067ec:	d03b      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067fa:	d01f      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80067fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006800:	d818      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006806:	d003      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006808:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800680c:	d007      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800680e:	e011      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006810:	4b33      	ldr	r3, [pc, #204]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006814:	4a32      	ldr	r2, [pc, #200]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800681a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800681c:	e00f      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006822:	3328      	adds	r3, #40	@ 0x28
 8006824:	2101      	movs	r1, #1
 8006826:	4618      	mov	r0, r3
 8006828:	f001 fba2 	bl	8007f70 <RCCEx_PLL3_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006832:	e004      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800683a:	e000      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800683c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006846:	4b26      	ldr	r3, [pc, #152]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006856:	4a22      	ldr	r2, [pc, #136]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006858:	430b      	orrs	r3, r1
 800685a:	6553      	str	r3, [r2, #84]	@ 0x54
 800685c:	e003      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006862:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006872:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006874:	2300      	movs	r3, #0
 8006876:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006878:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d034      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800688c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006890:	d007      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006892:	e011      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006894:	4b12      	ldr	r3, [pc, #72]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	4a11      	ldr	r2, [pc, #68]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800689a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800689e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068a0:	e00e      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a6:	3308      	adds	r3, #8
 80068a8:	2102      	movs	r1, #2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 faae 	bl	8007e0c <RCCEx_PLL2_Config>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068b6:	e003      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10d      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068c8:	4b05      	ldr	r3, [pc, #20]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d6:	4a02      	ldr	r2, [pc, #8]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068d8:	430b      	orrs	r3, r1
 80068da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068dc:	e006      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80068de:	bf00      	nop
 80068e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80068f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80068fa:	2300      	movs	r3, #0
 80068fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80068fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006902:	460b      	mov	r3, r1
 8006904:	4313      	orrs	r3, r2
 8006906:	d00c      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690c:	3328      	adds	r3, #40	@ 0x28
 800690e:	2102      	movs	r1, #2
 8006910:	4618      	mov	r0, r3
 8006912:	f001 fb2d 	bl	8007f70 <RCCEx_PLL3_Config>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800692e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006930:	2300      	movs	r3, #0
 8006932:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006934:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006938:	460b      	mov	r3, r1
 800693a:	4313      	orrs	r3, r2
 800693c:	d036      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006944:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006948:	d018      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800694a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800694e:	d811      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006954:	d014      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800695a:	d80b      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d011      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006964:	d106      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006966:	4bb7      	ldr	r3, [pc, #732]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	4ab6      	ldr	r2, [pc, #728]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800696c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006972:	e008      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800697a:	e004      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800697c:	bf00      	nop
 800697e:	e002      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006986:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800698e:	4bad      	ldr	r3, [pc, #692]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006992:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800699c:	4aa9      	ldr	r2, [pc, #676]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800699e:	430b      	orrs	r3, r1
 80069a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80069a2:	e003      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80069b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80069ba:	2300      	movs	r3, #0
 80069bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80069be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80069c2:	460b      	mov	r3, r1
 80069c4:	4313      	orrs	r3, r2
 80069c6:	d009      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069c8:	4b9e      	ldr	r3, [pc, #632]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80069d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d6:	4a9b      	ldr	r2, [pc, #620]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069d8:	430b      	orrs	r3, r1
 80069da:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80069e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ea:	2300      	movs	r3, #0
 80069ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80069f2:	460b      	mov	r3, r1
 80069f4:	4313      	orrs	r3, r2
 80069f6:	d009      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069f8:	4b92      	ldr	r3, [pc, #584]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069fc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a06:	4a8f      	ldr	r2, [pc, #572]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a1e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006a22:	460b      	mov	r3, r1
 8006a24:	4313      	orrs	r3, r2
 8006a26:	d00e      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a28:	4b86      	ldr	r3, [pc, #536]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	4a85      	ldr	r2, [pc, #532]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a32:	6113      	str	r3, [r2, #16]
 8006a34:	4b83      	ldr	r3, [pc, #524]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a36:	6919      	ldr	r1, [r3, #16]
 8006a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a40:	4a80      	ldr	r2, [pc, #512]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a42:	430b      	orrs	r3, r1
 8006a44:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a54:	2300      	movs	r3, #0
 8006a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a58:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	d009      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a62:	4b78      	ldr	r3, [pc, #480]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a66:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a70:	4a74      	ldr	r2, [pc, #464]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a72:	430b      	orrs	r3, r1
 8006a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a84:	2300      	movs	r3, #0
 8006a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a88:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	d00a      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a92:	4b6c      	ldr	r3, [pc, #432]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a96:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa2:	4a68      	ldr	r2, [pc, #416]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d011      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac8:	3308      	adds	r3, #8
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f99d 	bl	8007e0c <RCCEx_PLL2_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ae4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	2100      	movs	r1, #0
 8006af2:	6239      	str	r1, [r7, #32]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006afa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d011      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b08:	3308      	adds	r3, #8
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 f97d 	bl	8007e0c <RCCEx_PLL2_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	2100      	movs	r1, #0
 8006b32:	61b9      	str	r1, [r7, #24]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d011      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b48:	3308      	adds	r3, #8
 8006b4a:	2102      	movs	r1, #2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f001 f95d 	bl	8007e0c <RCCEx_PLL2_Config>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	2100      	movs	r1, #0
 8006b72:	6139      	str	r1, [r7, #16]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4313      	orrs	r3, r2
 8006b82:	d011      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b88:	3328      	adds	r3, #40	@ 0x28
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 f9ef 	bl	8007f70 <RCCEx_PLL3_Config>
 8006b92:	4603      	mov	r3, r0
 8006b94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	d011      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc8:	3328      	adds	r3, #40	@ 0x28
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 f9cf 	bl	8007f70 <RCCEx_PLL3_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	6039      	str	r1, [r7, #0]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	607b      	str	r3, [r7, #4]
 8006bfa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4313      	orrs	r3, r2
 8006c02:	d011      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	3328      	adds	r3, #40	@ 0x28
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 f9af 	bl	8007f70 <RCCEx_PLL3_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006c28:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c42:	bf00      	nop
 8006c44:	58024400 	.word	0x58024400

08006c48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b090      	sub	sp, #64	@ 0x40
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c56:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	f040 8094 	bne.w	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006c60:	4b9b      	ldr	r3, [pc, #620]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	f200 8087 	bhi.w	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006c72:	a201      	add	r2, pc, #4	@ (adr r2, 8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006c8d 	.word	0x08006c8d
 8006c7c:	08006cb5 	.word	0x08006cb5
 8006c80:	08006cdd 	.word	0x08006cdd
 8006c84:	08006d79 	.word	0x08006d79
 8006c88:	08006d05 	.word	0x08006d05
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c8c:	4b90      	ldr	r3, [pc, #576]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c98:	d108      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 ff62 	bl	8007b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ca8:	f000 bc93 	b.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cb0:	f000 bc8f 	b.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cb4:	4b86      	ldr	r3, [pc, #536]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cc0:	d108      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cc2:	f107 0318 	add.w	r3, r7, #24
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fca6 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cd0:	f000 bc7f 	b.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd8:	f000 bc7b 	b.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ce8:	d108      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cea:	f107 030c 	add.w	r3, r7, #12
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fde6 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cf8:	f000 bc6b 	b.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d00:	f000 bc67 	b.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d04:	4b72      	ldr	r3, [pc, #456]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d0c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d0e:	4b70      	ldr	r3, [pc, #448]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d10c      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d20:	4b6b      	ldr	r3, [pc, #428]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	08db      	lsrs	r3, r3, #3
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	4a6a      	ldr	r2, [pc, #424]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d32:	e01f      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d34:	4b66      	ldr	r3, [pc, #408]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d40:	d106      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d48:	d102      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d4a:	4b63      	ldr	r3, [pc, #396]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d4e:	e011      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d50:	4b5f      	ldr	r3, [pc, #380]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d5c:	d106      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d64:	d102      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d66:	4b5d      	ldr	r3, [pc, #372]	@ (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d6a:	e003      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d70:	f000 bc2f 	b.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d74:	f000 bc2d 	b.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d78:	4b59      	ldr	r3, [pc, #356]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d7c:	f000 bc29 	b.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d84:	f000 bc25 	b.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d8c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006d90:	430b      	orrs	r3, r1
 8006d92:	f040 80a7 	bne.w	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006d96:	4b4e      	ldr	r3, [pc, #312]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006d9e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006da6:	d054      	beq.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dae:	f200 808b 	bhi.w	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006db8:	f000 8083 	beq.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006dc2:	f200 8081 	bhi.w	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dcc:	d02f      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dd4:	d878      	bhi.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006de2:	d012      	beq.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006de4:	e070      	b.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006de6:	4b3a      	ldr	r3, [pc, #232]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006df2:	d107      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 feb5 	bl	8007b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e02:	e3e6      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e08:	e3e3      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e0a:	4b31      	ldr	r3, [pc, #196]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e16:	d107      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e18:	f107 0318 	add.w	r3, r7, #24
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fbfb 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e26:	e3d4      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e2c:	e3d1      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e2e:	4b28      	ldr	r3, [pc, #160]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e3a:	d107      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e3c:	f107 030c 	add.w	r3, r7, #12
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fd3d 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e4a:	e3c2      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e50:	e3bf      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e52:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d10c      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e6e:	4b18      	ldr	r3, [pc, #96]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	4a16      	ldr	r2, [pc, #88]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e80:	e01e      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e82:	4b13      	ldr	r3, [pc, #76]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8e:	d106      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e96:	d102      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e98:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e9c:	e010      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eaa:	d106      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eb2:	d102      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006eb4:	4b09      	ldr	r3, [pc, #36]	@ (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb8:	e002      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ebe:	e388      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006ec0:	e387      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ec2:	4b07      	ldr	r3, [pc, #28]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec6:	e384      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ecc:	e381      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006ece:	bf00      	nop
 8006ed0:	58024400 	.word	0x58024400
 8006ed4:	03d09000 	.word	0x03d09000
 8006ed8:	003d0900 	.word	0x003d0900
 8006edc:	02dc6c00 	.word	0x02dc6c00
 8006ee0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006eec:	430b      	orrs	r3, r1
 8006eee:	f040 809c 	bne.w	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006ef2:	4b9e      	ldr	r3, [pc, #632]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006efa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f02:	d054      	beq.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f0a:	f200 808b 	bhi.w	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f14:	f000 8083 	beq.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f1e:	f200 8081 	bhi.w	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f28:	d02f      	beq.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f30:	d878      	bhi.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f3e:	d012      	beq.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006f40:	e070      	b.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f42:	4b8a      	ldr	r3, [pc, #552]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f4e:	d107      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fe07 	bl	8007b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f5e:	e338      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f64:	e335      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f66:	4b81      	ldr	r3, [pc, #516]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f72:	d107      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f74:	f107 0318 	add.w	r3, r7, #24
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fb4d 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f82:	e326      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f88:	e323      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f8a:	4b78      	ldr	r3, [pc, #480]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f96:	d107      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f98:	f107 030c 	add.w	r3, r7, #12
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fc8f 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa6:	e314      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fac:	e311      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fae:	4b6f      	ldr	r3, [pc, #444]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fb8:	4b6c      	ldr	r3, [pc, #432]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d10c      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fca:	4b68      	ldr	r3, [pc, #416]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	08db      	lsrs	r3, r3, #3
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	4a66      	ldr	r2, [pc, #408]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fdc:	e01e      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fde:	4b63      	ldr	r3, [pc, #396]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fea:	d106      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ff2:	d102      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ff4:	4b5f      	ldr	r3, [pc, #380]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ff8:	e010      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007002:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007006:	d106      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800700e:	d102      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007010:	4b59      	ldr	r3, [pc, #356]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007014:	e002      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800701a:	e2da      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800701c:	e2d9      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800701e:	4b57      	ldr	r3, [pc, #348]	@ (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007022:	e2d6      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007028:	e2d3      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800702a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800702e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007032:	430b      	orrs	r3, r1
 8007034:	f040 80a7 	bne.w	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007038:	4b4c      	ldr	r3, [pc, #304]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800703a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800703c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007040:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007048:	d055      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800704a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007050:	f200 8096 	bhi.w	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007056:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800705a:	f000 8084 	beq.w	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800705e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007064:	f200 808c 	bhi.w	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706e:	d030      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007076:	f200 8083 	bhi.w	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800707a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007086:	d012      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007088:	e07a      	b.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800708a:	4b38      	ldr	r3, [pc, #224]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007096:	d107      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fd63 	bl	8007b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070a6:	e294      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ac:	e291      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ae:	4b2f      	ldr	r3, [pc, #188]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ba:	d107      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070bc:	f107 0318 	add.w	r3, r7, #24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 faa9 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ca:	e282      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d0:	e27f      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070d2:	4b26      	ldr	r3, [pc, #152]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070de:	d107      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e0:	f107 030c 	add.w	r3, r7, #12
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fbeb 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ee:	e270      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f4:	e26d      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070f6:	4b1d      	ldr	r3, [pc, #116]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80070f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007100:	4b1a      	ldr	r3, [pc, #104]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b04      	cmp	r3, #4
 800710a:	d10c      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800710c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710e:	2b00      	cmp	r3, #0
 8007110:	d109      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007112:	4b16      	ldr	r3, [pc, #88]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	4a14      	ldr	r2, [pc, #80]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800711e:	fa22 f303 	lsr.w	r3, r2, r3
 8007122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007124:	e01e      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007126:	4b11      	ldr	r3, [pc, #68]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800712e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007132:	d106      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800713a:	d102      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800713c:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007140:	e010      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007142:	4b0a      	ldr	r3, [pc, #40]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800714a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800714e:	d106      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007156:	d102      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007158:	4b07      	ldr	r3, [pc, #28]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800715c:	e002      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007162:	e236      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007164:	e235      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007166:	4b05      	ldr	r3, [pc, #20]	@ (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800716a:	e232      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800716c:	58024400 	.word	0x58024400
 8007170:	03d09000 	.word	0x03d09000
 8007174:	003d0900 	.word	0x003d0900
 8007178:	02dc6c00 	.word	0x02dc6c00
 800717c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007184:	e225      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800718a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800718e:	430b      	orrs	r3, r1
 8007190:	f040 8085 	bne.w	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007194:	4b9c      	ldr	r3, [pc, #624]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007198:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800719c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800719e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071a4:	d06b      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80071a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071ac:	d874      	bhi.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80071ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071b4:	d056      	beq.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80071b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071bc:	d86c      	bhi.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071c4:	d03b      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071cc:	d864      	bhi.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80071ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071d4:	d021      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80071d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071dc:	d85c      	bhi.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80071de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80071e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ea:	d004      	beq.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80071ec:	e054      	b.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80071ee:	f7fe fb5f 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 80071f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f4:	e1ed      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071f6:	4b84      	ldr	r3, [pc, #528]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007202:	d107      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007204:	f107 0318 	add.w	r3, r7, #24
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fa05 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007212:	e1de      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007218:	e1db      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800721a:	4b7b      	ldr	r3, [pc, #492]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007226:	d107      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007228:	f107 030c 	add.w	r3, r7, #12
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fb47 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007236:	e1cc      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800723c:	e1c9      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800723e:	4b72      	ldr	r3, [pc, #456]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b04      	cmp	r3, #4
 8007248:	d109      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800724a:	4b6f      	ldr	r3, [pc, #444]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	08db      	lsrs	r3, r3, #3
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	4a6d      	ldr	r2, [pc, #436]	@ (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007256:	fa22 f303 	lsr.w	r3, r2, r3
 800725a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800725c:	e1b9      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007262:	e1b6      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007264:	4b68      	ldr	r3, [pc, #416]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007270:	d102      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007272:	4b67      	ldr	r3, [pc, #412]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007276:	e1ac      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800727c:	e1a9      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800727e:	4b62      	ldr	r3, [pc, #392]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007286:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800728a:	d102      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800728c:	4b61      	ldr	r3, [pc, #388]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007290:	e19f      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007296:	e19c      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800729c:	e199      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800729e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80072a6:	430b      	orrs	r3, r1
 80072a8:	d173      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80072aa:	4b57      	ldr	r3, [pc, #348]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80072ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80072b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80072b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072ba:	d02f      	beq.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80072bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072c2:	d863      	bhi.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80072c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d004      	beq.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80072ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072d0:	d012      	beq.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80072d2:	e05b      	b.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072d4:	4b4c      	ldr	r3, [pc, #304]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072e0:	d107      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072e2:	f107 0318 	add.w	r3, r7, #24
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 f996 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072f0:	e16f      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072f6:	e16c      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072f8:	4b43      	ldr	r3, [pc, #268]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007304:	d107      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007306:	f107 030c 	add.w	r3, r7, #12
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fad8 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007314:	e15d      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800731a:	e15a      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800731c:	4b3a      	ldr	r3, [pc, #232]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800731e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007320:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007324:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007326:	4b38      	ldr	r3, [pc, #224]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b04      	cmp	r3, #4
 8007330:	d10c      	bne.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007334:	2b00      	cmp	r3, #0
 8007336:	d109      	bne.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007338:	4b33      	ldr	r3, [pc, #204]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	08db      	lsrs	r3, r3, #3
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	4a32      	ldr	r2, [pc, #200]	@ (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
 8007348:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800734a:	e01e      	b.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800734c:	4b2e      	ldr	r3, [pc, #184]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007358:	d106      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800735a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007360:	d102      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007362:	4b2b      	ldr	r3, [pc, #172]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007366:	e010      	b.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007368:	4b27      	ldr	r3, [pc, #156]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007374:	d106      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800737c:	d102      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800737e:	4b25      	ldr	r3, [pc, #148]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007382:	e002      	b.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007388:	e123      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800738a:	e122      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007390:	e11f      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007396:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800739a:	430b      	orrs	r3, r1
 800739c:	d13c      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800739e:	4b1a      	ldr	r3, [pc, #104]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80073a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80073a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d004      	beq.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80073ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b4:	d012      	beq.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80073b6:	e023      	b.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073b8:	4b13      	ldr	r3, [pc, #76]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073c4:	d107      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fbcc 	bl	8007b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073d4:	e0fd      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073da:	e0fa      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073e8:	d107      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ea:	f107 0318 	add.w	r3, r7, #24
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 f912 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073f8:	e0eb      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073fe:	e0e8      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007404:	e0e5      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007406:	bf00      	nop
 8007408:	58024400 	.word	0x58024400
 800740c:	03d09000 	.word	0x03d09000
 8007410:	003d0900 	.word	0x003d0900
 8007414:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800741c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007420:	430b      	orrs	r3, r1
 8007422:	f040 8085 	bne.w	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007426:	4b6d      	ldr	r3, [pc, #436]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800742e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007432:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007436:	d06b      	beq.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8007438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800743e:	d874      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007446:	d056      	beq.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744e:	d86c      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007456:	d03b      	beq.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8007458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800745e:	d864      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007466:	d021      	beq.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8007468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800746e:	d85c      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007472:	2b00      	cmp	r3, #0
 8007474:	d004      	beq.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8007476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800747c:	d004      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800747e:	e054      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007480:	f000 f8b4 	bl	80075ec <HAL_RCCEx_GetD3PCLK1Freq>
 8007484:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007486:	e0a4      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007488:	4b54      	ldr	r3, [pc, #336]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007490:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007494:	d107      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007496:	f107 0318 	add.w	r3, r7, #24
 800749a:	4618      	mov	r0, r3
 800749c:	f000 f8bc 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074a4:	e095      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074aa:	e092      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074ac:	4b4b      	ldr	r3, [pc, #300]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b8:	d107      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ba:	f107 030c 	add.w	r3, r7, #12
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f9fe 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074c8:	e083      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ce:	e080      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074d0:	4b42      	ldr	r3, [pc, #264]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d109      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074dc:	4b3f      	ldr	r3, [pc, #252]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	08db      	lsrs	r3, r3, #3
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	4a3e      	ldr	r2, [pc, #248]	@ (80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80074e8:	fa22 f303 	lsr.w	r3, r2, r3
 80074ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ee:	e070      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f4:	e06d      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80074f6:	4b39      	ldr	r3, [pc, #228]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007502:	d102      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8007504:	4b37      	ldr	r3, [pc, #220]	@ (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007508:	e063      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800750e:	e060      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007510:	4b32      	ldr	r3, [pc, #200]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800751c:	d102      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800751e:	4b32      	ldr	r3, [pc, #200]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007522:	e056      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007528:	e053      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752e:	e050      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007534:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007538:	430b      	orrs	r3, r1
 800753a:	d148      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800753c:	4b27      	ldr	r3, [pc, #156]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800753e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007540:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007544:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800754c:	d02a      	beq.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800754e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007554:	d838      	bhi.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800755c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007562:	d00d      	beq.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007564:	e030      	b.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007566:	4b1d      	ldr	r3, [pc, #116]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800756e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007572:	d102      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8007574:	4b1c      	ldr	r3, [pc, #112]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007578:	e02b      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800757e:	e028      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007580:	4b16      	ldr	r3, [pc, #88]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800758c:	d107      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800758e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fae8 	bl	8007b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800759c:	e019      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a2:	e016      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075a4:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075b0:	d107      	bne.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075b2:	f107 0318 	add.w	r3, r7, #24
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f82e 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c0:	e007      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c6:	e004      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075cc:	e001      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80075d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3740      	adds	r7, #64	@ 0x40
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	58024400 	.word	0x58024400
 80075e0:	03d09000 	.word	0x03d09000
 80075e4:	003d0900 	.word	0x003d0900
 80075e8:	02dc6c00 	.word	0x02dc6c00

080075ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075f0:	f7fe f92e 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 80075f4:	4602      	mov	r2, r0
 80075f6:	4b06      	ldr	r3, [pc, #24]	@ (8007610 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	091b      	lsrs	r3, r3, #4
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	4904      	ldr	r1, [pc, #16]	@ (8007614 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007602:	5ccb      	ldrb	r3, [r1, r3]
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800760c:	4618      	mov	r0, r3
 800760e:	bd80      	pop	{r7, pc}
 8007610:	58024400 	.word	0x58024400
 8007614:	08011f80 	.word	0x08011f80

08007618 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007618:	b480      	push	{r7}
 800761a:	b089      	sub	sp, #36	@ 0x24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007620:	4ba1      	ldr	r3, [pc, #644]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800762a:	4b9f      	ldr	r3, [pc, #636]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800762c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762e:	0b1b      	lsrs	r3, r3, #12
 8007630:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007634:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007636:	4b9c      	ldr	r3, [pc, #624]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	091b      	lsrs	r3, r3, #4
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007642:	4b99      	ldr	r3, [pc, #612]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007646:	08db      	lsrs	r3, r3, #3
 8007648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	fb02 f303 	mul.w	r3, r2, r3
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8111 	beq.w	8007888 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b02      	cmp	r3, #2
 800766a:	f000 8083 	beq.w	8007774 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b02      	cmp	r3, #2
 8007672:	f200 80a1 	bhi.w	80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d056      	beq.n	8007730 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007682:	e099      	b.n	80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007684:	4b88      	ldr	r3, [pc, #544]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d02d      	beq.n	80076ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007690:	4b85      	ldr	r3, [pc, #532]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	08db      	lsrs	r3, r3, #3
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	4a84      	ldr	r2, [pc, #528]	@ (80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
 80076a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ba:	4b7b      	ldr	r3, [pc, #492]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076ea:	e087      	b.n	80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80076fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fe:	4b6a      	ldr	r3, [pc, #424]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007712:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800772e:	e065      	b.n	80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800773e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007742:	4b59      	ldr	r3, [pc, #356]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007752:	ed97 6a03 	vldr	s12, [r7, #12]
 8007756:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800775a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007772:	e043      	b.n	80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007786:	4b48      	ldr	r3, [pc, #288]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007796:	ed97 6a03 	vldr	s12, [r7, #12]
 800779a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800779e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077b6:	e021      	b.n	80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ca:	4b37      	ldr	r3, [pc, #220]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077da:	ed97 6a03 	vldr	s12, [r7, #12]
 80077de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80077fc:	4b2a      	ldr	r3, [pc, #168]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007800:	0a5b      	lsrs	r3, r3, #9
 8007802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007816:	edd7 6a07 	vldr	s13, [r7, #28]
 800781a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800781e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007822:	ee17 2a90 	vmov	r2, s15
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800782a:	4b1f      	ldr	r3, [pc, #124]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800782c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782e:	0c1b      	lsrs	r3, r3, #16
 8007830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007844:	edd7 6a07 	vldr	s13, [r7, #28]
 8007848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007850:	ee17 2a90 	vmov	r2, s15
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007858:	4b13      	ldr	r3, [pc, #76]	@ (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800785a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785c:	0e1b      	lsrs	r3, r3, #24
 800785e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800786e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007872:	edd7 6a07 	vldr	s13, [r7, #28]
 8007876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800787a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787e:	ee17 2a90 	vmov	r2, s15
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007886:	e008      	b.n	800789a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	609a      	str	r2, [r3, #8]
}
 800789a:	bf00      	nop
 800789c:	3724      	adds	r7, #36	@ 0x24
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	58024400 	.word	0x58024400
 80078ac:	03d09000 	.word	0x03d09000
 80078b0:	46000000 	.word	0x46000000
 80078b4:	4c742400 	.word	0x4c742400
 80078b8:	4a742400 	.word	0x4a742400
 80078bc:	4c371b00 	.word	0x4c371b00

080078c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b089      	sub	sp, #36	@ 0x24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078c8:	4ba1      	ldr	r3, [pc, #644]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078cc:	f003 0303 	and.w	r3, r3, #3
 80078d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80078d2:	4b9f      	ldr	r3, [pc, #636]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d6:	0d1b      	lsrs	r3, r3, #20
 80078d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078de:	4b9c      	ldr	r3, [pc, #624]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e2:	0a1b      	lsrs	r3, r3, #8
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80078ea:	4b99      	ldr	r3, [pc, #612]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ee:	08db      	lsrs	r3, r3, #3
 80078f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	fb02 f303 	mul.w	r3, r2, r3
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007902:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8111 	beq.w	8007b30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b02      	cmp	r3, #2
 8007912:	f000 8083 	beq.w	8007a1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	2b02      	cmp	r3, #2
 800791a:	f200 80a1 	bhi.w	8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d056      	beq.n	80079d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800792a:	e099      	b.n	8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800792c:	4b88      	ldr	r3, [pc, #544]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b00      	cmp	r3, #0
 8007936:	d02d      	beq.n	8007994 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007938:	4b85      	ldr	r3, [pc, #532]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	08db      	lsrs	r3, r3, #3
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	4a84      	ldr	r2, [pc, #528]	@ (8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007944:	fa22 f303 	lsr.w	r3, r2, r3
 8007948:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007962:	4b7b      	ldr	r3, [pc, #492]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007972:	ed97 6a03 	vldr	s12, [r7, #12]
 8007976:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800797a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007992:	e087      	b.n	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80079a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079d6:	e065      	b.n	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ea:	4b59      	ldr	r3, [pc, #356]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a1a:	e043      	b.n	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2e:	4b48      	ldr	r3, [pc, #288]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a5e:	e021      	b.n	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a72:	4b37      	ldr	r3, [pc, #220]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aa2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa8:	0a5b      	lsrs	r3, r3, #9
 8007aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aca:	ee17 2a90 	vmov	r2, s15
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad6:	0c1b      	lsrs	r3, r3, #16
 8007ad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af8:	ee17 2a90 	vmov	r2, s15
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007b00:	4b13      	ldr	r3, [pc, #76]	@ (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b04:	0e1b      	lsrs	r3, r3, #24
 8007b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b26:	ee17 2a90 	vmov	r2, s15
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007b2e:	e008      	b.n	8007b42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	609a      	str	r2, [r3, #8]
}
 8007b42:	bf00      	nop
 8007b44:	3724      	adds	r7, #36	@ 0x24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	58024400 	.word	0x58024400
 8007b54:	03d09000 	.word	0x03d09000
 8007b58:	46000000 	.word	0x46000000
 8007b5c:	4c742400 	.word	0x4c742400
 8007b60:	4a742400 	.word	0x4a742400
 8007b64:	4c371b00 	.word	0x4c371b00

08007b68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b089      	sub	sp, #36	@ 0x24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b70:	4ba0      	ldr	r3, [pc, #640]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b74:	f003 0303 	and.w	r3, r3, #3
 8007b78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007b7a:	4b9e      	ldr	r3, [pc, #632]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7e:	091b      	lsrs	r3, r3, #4
 8007b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b86:	4b9b      	ldr	r3, [pc, #620]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b90:	4b98      	ldr	r3, [pc, #608]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b94:	08db      	lsrs	r3, r3, #3
 8007b96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	fb02 f303 	mul.w	r3, r2, r3
 8007ba0:	ee07 3a90 	vmov	s15, r3
 8007ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8111 	beq.w	8007dd6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	f000 8083 	beq.w	8007cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	f200 80a1 	bhi.w	8007d06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d056      	beq.n	8007c7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007bd0:	e099      	b.n	8007d06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bd2:	4b88      	ldr	r3, [pc, #544]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d02d      	beq.n	8007c3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bde:	4b85      	ldr	r3, [pc, #532]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	08db      	lsrs	r3, r3, #3
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	4a83      	ldr	r2, [pc, #524]	@ (8007df8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007bea:	fa22 f303 	lsr.w	r3, r2, r3
 8007bee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	ee07 3a90 	vmov	s15, r3
 8007c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c08:	4b7a      	ldr	r3, [pc, #488]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c10:	ee07 3a90 	vmov	s15, r3
 8007c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c18:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c1c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007dfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c34:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c38:	e087      	b.n	8007d4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	ee07 3a90 	vmov	s15, r3
 8007c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c44:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4c:	4b69      	ldr	r3, [pc, #420]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c54:	ee07 3a90 	vmov	s15, r3
 8007c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c60:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007dfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c7c:	e065      	b.n	8007d4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	ee07 3a90 	vmov	s15, r3
 8007c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c88:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c90:	4b58      	ldr	r3, [pc, #352]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c98:	ee07 3a90 	vmov	s15, r3
 8007c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007dfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cc0:	e043      	b.n	8007d4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ccc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd4:	4b47      	ldr	r3, [pc, #284]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007dfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d04:	e021      	b.n	8007d4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	ee07 3a90 	vmov	s15, r3
 8007d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d10:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d18:	4b36      	ldr	r3, [pc, #216]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d20:	ee07 3a90 	vmov	s15, r3
 8007d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d28:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d2c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007dfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d48:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4e:	0a5b      	lsrs	r3, r3, #9
 8007d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d54:	ee07 3a90 	vmov	s15, r3
 8007d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d70:	ee17 2a90 	vmov	r2, s15
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007d78:	4b1e      	ldr	r3, [pc, #120]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7c:	0c1b      	lsrs	r3, r3, #16
 8007d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d9e:	ee17 2a90 	vmov	r2, s15
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007da6:	4b13      	ldr	r3, [pc, #76]	@ (8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007daa:	0e1b      	lsrs	r3, r3, #24
 8007dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007db0:	ee07 3a90 	vmov	s15, r3
 8007db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dcc:	ee17 2a90 	vmov	r2, s15
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007dd4:	e008      	b.n	8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	609a      	str	r2, [r3, #8]
}
 8007de8:	bf00      	nop
 8007dea:	3724      	adds	r7, #36	@ 0x24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	58024400 	.word	0x58024400
 8007df8:	03d09000 	.word	0x03d09000
 8007dfc:	46000000 	.word	0x46000000
 8007e00:	4c742400 	.word	0x4c742400
 8007e04:	4a742400 	.word	0x4a742400
 8007e08:	4c371b00 	.word	0x4c371b00

08007e0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e1a:	4b53      	ldr	r3, [pc, #332]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d101      	bne.n	8007e2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e099      	b.n	8007f5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a4e      	ldr	r2, [pc, #312]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007e30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e36:	f7fc f92d 	bl	8004094 <HAL_GetTick>
 8007e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e3c:	e008      	b.n	8007e50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e3e:	f7fc f929 	bl	8004094 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d901      	bls.n	8007e50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e086      	b.n	8007f5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e50:	4b45      	ldr	r3, [pc, #276]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1f0      	bne.n	8007e3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e5c:	4b42      	ldr	r3, [pc, #264]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	031b      	lsls	r3, r3, #12
 8007e6a:	493f      	ldr	r1, [pc, #252]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	025b      	lsls	r3, r3, #9
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	041b      	lsls	r3, r3, #16
 8007e8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	061b      	lsls	r3, r3, #24
 8007e9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ea0:	4931      	ldr	r1, [pc, #196]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ea6:	4b30      	ldr	r3, [pc, #192]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	492d      	ldr	r1, [pc, #180]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebc:	f023 0220 	bic.w	r2, r3, #32
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	4928      	ldr	r1, [pc, #160]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007eca:	4b27      	ldr	r3, [pc, #156]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ece:	4a26      	ldr	r2, [pc, #152]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007ed0:	f023 0310 	bic.w	r3, r3, #16
 8007ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ed6:	4b24      	ldr	r3, [pc, #144]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007ed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eda:	4b24      	ldr	r3, [pc, #144]	@ (8007f6c <RCCEx_PLL2_Config+0x160>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	69d2      	ldr	r2, [r2, #28]
 8007ee2:	00d2      	lsls	r2, r2, #3
 8007ee4:	4920      	ldr	r1, [pc, #128]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007eea:	4b1f      	ldr	r3, [pc, #124]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eee:	4a1e      	ldr	r2, [pc, #120]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007ef0:	f043 0310 	orr.w	r3, r3, #16
 8007ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d106      	bne.n	8007f0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007efc:	4b1a      	ldr	r3, [pc, #104]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f00:	4a19      	ldr	r2, [pc, #100]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007f02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f08:	e00f      	b.n	8007f2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d106      	bne.n	8007f1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f10:	4b15      	ldr	r3, [pc, #84]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f14:	4a14      	ldr	r2, [pc, #80]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f1c:	e005      	b.n	8007f2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f1e:	4b12      	ldr	r3, [pc, #72]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f22:	4a11      	ldr	r2, [pc, #68]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007f24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007f30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f36:	f7fc f8ad 	bl	8004094 <HAL_GetTick>
 8007f3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f3c:	e008      	b.n	8007f50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f3e:	f7fc f8a9 	bl	8004094 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d901      	bls.n	8007f50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e006      	b.n	8007f5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f50:	4b05      	ldr	r3, [pc, #20]	@ (8007f68 <RCCEx_PLL2_Config+0x15c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0f0      	beq.n	8007f3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	58024400 	.word	0x58024400
 8007f6c:	ffff0007 	.word	0xffff0007

08007f70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f7e:	4b53      	ldr	r3, [pc, #332]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8007f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d101      	bne.n	8007f8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e099      	b.n	80080c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a4e      	ldr	r2, [pc, #312]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8007f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f9a:	f7fc f87b 	bl	8004094 <HAL_GetTick>
 8007f9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fa0:	e008      	b.n	8007fb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007fa2:	f7fc f877 	bl	8004094 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e086      	b.n	80080c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fb4:	4b45      	ldr	r3, [pc, #276]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1f0      	bne.n	8007fa2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007fc0:	4b42      	ldr	r3, [pc, #264]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	051b      	lsls	r3, r3, #20
 8007fce:	493f      	ldr	r1, [pc, #252]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	025b      	lsls	r3, r3, #9
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	041b      	lsls	r3, r3, #16
 8007ff2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	061b      	lsls	r3, r3, #24
 8008000:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008004:	4931      	ldr	r1, [pc, #196]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008006:	4313      	orrs	r3, r2
 8008008:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800800a:	4b30      	ldr	r3, [pc, #192]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 800800c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	492d      	ldr	r1, [pc, #180]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008018:	4313      	orrs	r3, r2
 800801a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800801c:	4b2b      	ldr	r3, [pc, #172]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	4928      	ldr	r1, [pc, #160]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 800802a:	4313      	orrs	r3, r2
 800802c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800802e:	4b27      	ldr	r3, [pc, #156]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	4a26      	ldr	r2, [pc, #152]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008038:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800803a:	4b24      	ldr	r3, [pc, #144]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 800803c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800803e:	4b24      	ldr	r3, [pc, #144]	@ (80080d0 <RCCEx_PLL3_Config+0x160>)
 8008040:	4013      	ands	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	69d2      	ldr	r2, [r2, #28]
 8008046:	00d2      	lsls	r2, r2, #3
 8008048:	4920      	ldr	r1, [pc, #128]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 800804a:	4313      	orrs	r3, r2
 800804c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800804e:	4b1f      	ldr	r3, [pc, #124]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008052:	4a1e      	ldr	r2, [pc, #120]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008058:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d106      	bne.n	800806e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008060:	4b1a      	ldr	r3, [pc, #104]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	4a19      	ldr	r2, [pc, #100]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008066:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800806a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800806c:	e00f      	b.n	800808e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d106      	bne.n	8008082 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008074:	4b15      	ldr	r3, [pc, #84]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008078:	4a14      	ldr	r2, [pc, #80]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 800807a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800807e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008080:	e005      	b.n	800808e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008082:	4b12      	ldr	r3, [pc, #72]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008086:	4a11      	ldr	r2, [pc, #68]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008088:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800808c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800808e:	4b0f      	ldr	r3, [pc, #60]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a0e      	ldr	r2, [pc, #56]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 8008094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809a:	f7fb fffb 	bl	8004094 <HAL_GetTick>
 800809e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080a0:	e008      	b.n	80080b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080a2:	f7fb fff7 	bl	8004094 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d901      	bls.n	80080b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e006      	b.n	80080c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080b4:	4b05      	ldr	r3, [pc, #20]	@ (80080cc <RCCEx_PLL3_Config+0x15c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0f0      	beq.n	80080a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	58024400 	.word	0x58024400
 80080d0:	ffff0007 	.word	0xffff0007

080080d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08a      	sub	sp, #40	@ 0x28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e075      	b.n	80081d2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d105      	bne.n	80080fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7fb fa45 	bl	8003588 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2204      	movs	r2, #4
 8008102:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f868 	bl	80081dc <HAL_SD_InitCard>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e05d      	b.n	80081d2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fdb5 	bl	8008c8c <HAL_SD_GetCardStatus>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e052      	b.n	80081d2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800812c:	7e3b      	ldrb	r3, [r7, #24]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008132:	7e7b      	ldrb	r3, [r7, #25]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813c:	2b01      	cmp	r3, #1
 800813e:	d10a      	bne.n	8008156 <HAL_SD_Init+0x82>
 8008140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008142:	2b00      	cmp	r3, #0
 8008144:	d102      	bne.n	800814c <HAL_SD_Init+0x78>
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d004      	beq.n	8008156 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008152:	659a      	str	r2, [r3, #88]	@ 0x58
 8008154:	e00b      	b.n	800816e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815a:	2b01      	cmp	r3, #1
 800815c:	d104      	bne.n	8008168 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008164:	659a      	str	r2, [r3, #88]	@ 0x58
 8008166:	e002      	b.n	800816e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fe73 	bl	8008e60 <HAL_SD_ConfigWideBusOperation>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e026      	b.n	80081d2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008184:	f7fb ff86 	bl	8004094 <HAL_GetTick>
 8008188:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800818a:	e011      	b.n	80081b0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800818c:	f7fb ff82 	bl	8004094 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819a:	d109      	bne.n	80081b0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e010      	b.n	80081d2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 ff67 	bl	8009084 <HAL_SD_GetCardState>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d1e7      	bne.n	800818c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3728      	adds	r7, #40	@ 0x28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80081dc:	b590      	push	{r4, r7, lr}
 80081de:	b08d      	sub	sp, #52	@ 0x34
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80081ec:	2300      	movs	r3, #0
 80081ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80081f4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80081f8:	f04f 0100 	mov.w	r1, #0
 80081fc:	f7fe fd24 	bl	8006c48 <HAL_RCCEx_GetPeriphCLKFreq>
 8008200:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	d109      	bne.n	800821c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008216:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e070      	b.n	80082fe <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800821c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821e:	0a1b      	lsrs	r3, r3, #8
 8008220:	4a39      	ldr	r2, [pc, #228]	@ (8008308 <HAL_SD_InitCard+0x12c>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	091b      	lsrs	r3, r3, #4
 8008228:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681c      	ldr	r4, [r3, #0]
 800822e:	466a      	mov	r2, sp
 8008230:	f107 0318 	add.w	r3, r7, #24
 8008234:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008238:	e882 0003 	stmia.w	r2, {r0, r1}
 800823c:	f107 030c 	add.w	r3, r7, #12
 8008240:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008242:	4620      	mov	r0, r4
 8008244:	f004 fb3c 	bl	800c8c0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f004 fb7f 	bl	800c950 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800825e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800826a:	4a28      	ldr	r2, [pc, #160]	@ (800830c <HAL_SD_InitCard+0x130>)
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008272:	3301      	adds	r3, #1
 8008274:	4618      	mov	r0, r3
 8008276:	f7fb ff19 	bl	80040ac <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fff0 	bl	8009260 <SD_PowerON>
 8008280:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	431a      	orrs	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e02e      	b.n	80082fe <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 ff0f 	bl	80090c4 <SD_InitCard>
 80082a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	431a      	orrs	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e01b      	b.n	80082fe <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80082ce:	4618      	mov	r0, r3
 80082d0:	f004 fbd4 	bl	800ca7c <SDMMC_CmdBlockLength>
 80082d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00f      	beq.n	80082fc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a0b      	ldr	r2, [pc, #44]	@ (8008310 <HAL_SD_InitCard+0x134>)
 80082e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e000      	b.n	80082fe <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	372c      	adds	r7, #44	@ 0x2c
 8008302:	46bd      	mov	sp, r7
 8008304:	bd90      	pop	{r4, r7, pc}
 8008306:	bf00      	nop
 8008308:	014f8b59 	.word	0x014f8b59
 800830c:	00012110 	.word	0x00012110
 8008310:	1fe00fff 	.word	0x1fe00fff

08008314 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b092      	sub	sp, #72	@ 0x48
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008322:	f7fb feb7 	bl	8004094 <HAL_GetTick>
 8008326:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d107      	bne.n	8008346 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800833a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e167      	b.n	8008616 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b01      	cmp	r3, #1
 8008350:	f040 815a 	bne.w	8008608 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800835a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	441a      	add	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008364:	429a      	cmp	r2, r3
 8008366:	d907      	bls.n	8008378 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800836c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e14e      	b.n	8008616 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2203      	movs	r2, #3
 800837c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2200      	movs	r2, #0
 8008386:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838c:	2b01      	cmp	r3, #1
 800838e:	d002      	beq.n	8008396 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008392:	025b      	lsls	r3, r3, #9
 8008394:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	025b      	lsls	r3, r3, #9
 80083a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80083a2:	2390      	movs	r3, #144	@ 0x90
 80083a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80083a6:	2302      	movs	r3, #2
 80083a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80083ae:	2300      	movs	r3, #0
 80083b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f107 0214 	add.w	r2, r7, #20
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f004 fb31 	bl	800ca24 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083d0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d90a      	bls.n	80083ee <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2202      	movs	r2, #2
 80083dc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083e4:	4618      	mov	r0, r3
 80083e6:	f004 fb8f 	bl	800cb08 <SDMMC_CmdReadMultiBlock>
 80083ea:	6478      	str	r0, [r7, #68]	@ 0x44
 80083ec:	e009      	b.n	8008402 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2201      	movs	r2, #1
 80083f2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083fa:	4618      	mov	r0, r3
 80083fc:	f004 fb61 	bl	800cac2 <SDMMC_CmdReadSingleBlock>
 8008400:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008404:	2b00      	cmp	r3, #0
 8008406:	d012      	beq.n	800842e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a84      	ldr	r2, [pc, #528]	@ (8008620 <HAL_SD_ReadBlocks+0x30c>)
 800840e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008416:	431a      	orrs	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e0f3      	b.n	8008616 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008432:	e058      	b.n	80084e6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800843a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d033      	beq.n	80084aa <HAL_SD_ReadBlocks+0x196>
 8008442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008444:	2b1f      	cmp	r3, #31
 8008446:	d930      	bls.n	80084aa <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008448:	2300      	movs	r3, #0
 800844a:	643b      	str	r3, [r7, #64]	@ 0x40
 800844c:	e027      	b.n	800849e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f004 fa5e 	bl	800c914 <SDMMC_ReadFIFO>
 8008458:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800845a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845c:	b2da      	uxtb	r2, r3
 800845e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008460:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008464:	3301      	adds	r3, #1
 8008466:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846a:	0a1b      	lsrs	r3, r3, #8
 800846c:	b2da      	uxtb	r2, r3
 800846e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008470:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008474:	3301      	adds	r3, #1
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847a:	0c1b      	lsrs	r3, r3, #16
 800847c:	b2da      	uxtb	r2, r3
 800847e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008480:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008484:	3301      	adds	r3, #1
 8008486:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848a:	0e1b      	lsrs	r3, r3, #24
 800848c:	b2da      	uxtb	r2, r3
 800848e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008490:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008494:	3301      	adds	r3, #1
 8008496:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8008498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800849a:	3301      	adds	r3, #1
 800849c:	643b      	str	r3, [r7, #64]	@ 0x40
 800849e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084a0:	2b07      	cmp	r3, #7
 80084a2:	d9d4      	bls.n	800844e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80084a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a6:	3b20      	subs	r3, #32
 80084a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80084aa:	f7fb fdf3 	bl	8004094 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d902      	bls.n	80084c0 <HAL_SD_ReadBlocks+0x1ac>
 80084ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d112      	bne.n	80084e6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a56      	ldr	r2, [pc, #344]	@ (8008620 <HAL_SD_ReadBlocks+0x30c>)
 80084c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e097      	b.n	8008616 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ec:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d09f      	beq.n	8008434 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008502:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800850a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800850e:	2b00      	cmp	r3, #0
 8008510:	d022      	beq.n	8008558 <HAL_SD_ReadBlocks+0x244>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d91f      	bls.n	8008558 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851c:	2b03      	cmp	r3, #3
 800851e:	d01b      	beq.n	8008558 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4618      	mov	r0, r3
 8008526:	f004 fb59 	bl	800cbdc <SDMMC_CmdStopTransfer>
 800852a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800852c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800852e:	2b00      	cmp	r3, #0
 8008530:	d012      	beq.n	8008558 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a3a      	ldr	r2, [pc, #232]	@ (8008620 <HAL_SD_ReadBlocks+0x30c>)
 8008538:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800853e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008540:	431a      	orrs	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e05e      	b.n	8008616 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d012      	beq.n	800858c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a2d      	ldr	r2, [pc, #180]	@ (8008620 <HAL_SD_ReadBlocks+0x30c>)
 800856c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008572:	f043 0208 	orr.w	r2, r3, #8
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e044      	b.n	8008616 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d012      	beq.n	80085c0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a20      	ldr	r2, [pc, #128]	@ (8008620 <HAL_SD_ReadBlocks+0x30c>)
 80085a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a6:	f043 0202 	orr.w	r2, r3, #2
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e02a      	b.n	8008616 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c6:	f003 0320 	and.w	r3, r3, #32
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d012      	beq.n	80085f4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a13      	ldr	r2, [pc, #76]	@ (8008620 <HAL_SD_ReadBlocks+0x30c>)
 80085d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085da:	f043 0220 	orr.w	r2, r3, #32
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e010      	b.n	8008616 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008624 <HAL_SD_ReadBlocks+0x310>)
 80085fa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	e006      	b.n	8008616 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800860c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
  }
}
 8008616:	4618      	mov	r0, r3
 8008618:	3748      	adds	r7, #72	@ 0x48
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	1fe00fff 	.word	0x1fe00fff
 8008624:	18000f3a 	.word	0x18000f3a

08008628 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b092      	sub	sp, #72	@ 0x48
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008636:	f7fb fd2d 	bl	8004094 <HAL_GetTick>
 800863a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d107      	bne.n	800865a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800864e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e16b      	b.n	8008932 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b01      	cmp	r3, #1
 8008664:	f040 815e 	bne.w	8008924 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800866e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	441a      	add	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008678:	429a      	cmp	r2, r3
 800867a:	d907      	bls.n	800868c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008680:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e152      	b.n	8008932 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2203      	movs	r2, #3
 8008690:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2200      	movs	r2, #0
 800869a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d002      	beq.n	80086aa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80086a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a6:	025b      	lsls	r3, r3, #9
 80086a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086aa:	f04f 33ff 	mov.w	r3, #4294967295
 80086ae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	025b      	lsls	r3, r3, #9
 80086b4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80086b6:	2390      	movs	r3, #144	@ 0x90
 80086b8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80086ba:	2300      	movs	r3, #0
 80086bc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80086be:	2300      	movs	r3, #0
 80086c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f107 0218 	add.w	r2, r7, #24
 80086ce:	4611      	mov	r1, r2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f004 f9a7 	bl	800ca24 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086e4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d90a      	bls.n	8008702 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2220      	movs	r2, #32
 80086f0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086f8:	4618      	mov	r0, r3
 80086fa:	f004 fa4b 	bl	800cb94 <SDMMC_CmdWriteMultiBlock>
 80086fe:	6478      	str	r0, [r7, #68]	@ 0x44
 8008700:	e009      	b.n	8008716 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2210      	movs	r2, #16
 8008706:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800870e:	4618      	mov	r0, r3
 8008710:	f004 fa1d 	bl	800cb4e <SDMMC_CmdWriteSingleBlock>
 8008714:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008718:	2b00      	cmp	r3, #0
 800871a:	d012      	beq.n	8008742 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a86      	ldr	r2, [pc, #536]	@ (800893c <HAL_SD_WriteBlocks+0x314>)
 8008722:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800872a:	431a      	orrs	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e0f7      	b.n	8008932 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008746:	e05c      	b.n	8008802 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800874e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d037      	beq.n	80087c6 <HAL_SD_WriteBlocks+0x19e>
 8008756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008758:	2b1f      	cmp	r3, #31
 800875a:	d934      	bls.n	80087c6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800875c:	2300      	movs	r3, #0
 800875e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008760:	e02b      	b.n	80087ba <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800876a:	3301      	adds	r3, #1
 800876c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800876e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	021a      	lsls	r2, r3, #8
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	4313      	orrs	r3, r2
 8008778:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800877a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877c:	3301      	adds	r3, #1
 800877e:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	041a      	lsls	r2, r3, #16
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	4313      	orrs	r3, r2
 800878a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800878c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800878e:	3301      	adds	r3, #1
 8008790:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	061a      	lsls	r2, r3, #24
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	4313      	orrs	r3, r2
 800879c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800879e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a0:	3301      	adds	r3, #1
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f107 0214 	add.w	r2, r7, #20
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f004 f8bd 	bl	800c92e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80087b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087b6:	3301      	adds	r3, #1
 80087b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80087ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087bc:	2b07      	cmp	r3, #7
 80087be:	d9d0      	bls.n	8008762 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80087c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c2:	3b20      	subs	r3, #32
 80087c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80087c6:	f7fb fc65 	bl	8004094 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d902      	bls.n	80087dc <HAL_SD_WriteBlocks+0x1b4>
 80087d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d112      	bne.n	8008802 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a56      	ldr	r2, [pc, #344]	@ (800893c <HAL_SD_WriteBlocks+0x314>)
 80087e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087ea:	431a      	orrs	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e097      	b.n	8008932 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008808:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800880c:	2b00      	cmp	r3, #0
 800880e:	d09b      	beq.n	8008748 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800881e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800882a:	2b00      	cmp	r3, #0
 800882c:	d022      	beq.n	8008874 <HAL_SD_WriteBlocks+0x24c>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d91f      	bls.n	8008874 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008838:	2b03      	cmp	r3, #3
 800883a:	d01b      	beq.n	8008874 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f004 f9cb 	bl	800cbdc <SDMMC_CmdStopTransfer>
 8008846:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800884a:	2b00      	cmp	r3, #0
 800884c:	d012      	beq.n	8008874 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a3a      	ldr	r2, [pc, #232]	@ (800893c <HAL_SD_WriteBlocks+0x314>)
 8008854:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800885a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800885c:	431a      	orrs	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e05e      	b.n	8008932 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800887a:	f003 0308 	and.w	r3, r3, #8
 800887e:	2b00      	cmp	r3, #0
 8008880:	d012      	beq.n	80088a8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a2d      	ldr	r2, [pc, #180]	@ (800893c <HAL_SD_WriteBlocks+0x314>)
 8008888:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800888e:	f043 0208 	orr.w	r2, r3, #8
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e044      	b.n	8008932 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d012      	beq.n	80088dc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a20      	ldr	r2, [pc, #128]	@ (800893c <HAL_SD_WriteBlocks+0x314>)
 80088bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c2:	f043 0202 	orr.w	r2, r3, #2
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e02a      	b.n	8008932 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e2:	f003 0310 	and.w	r3, r3, #16
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d012      	beq.n	8008910 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a13      	ldr	r2, [pc, #76]	@ (800893c <HAL_SD_WriteBlocks+0x314>)
 80088f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f6:	f043 0210 	orr.w	r2, r3, #16
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e010      	b.n	8008932 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a0a      	ldr	r2, [pc, #40]	@ (8008940 <HAL_SD_WriteBlocks+0x318>)
 8008916:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	e006      	b.n	8008932 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008928:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
  }
}
 8008932:	4618      	mov	r0, r3
 8008934:	3748      	adds	r7, #72	@ 0x48
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	1fe00fff 	.word	0x1fe00fff
 8008940:	18000f3a 	.word	0x18000f3a

08008944 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008952:	0f9b      	lsrs	r3, r3, #30
 8008954:	b2da      	uxtb	r2, r3
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800895e:	0e9b      	lsrs	r3, r3, #26
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	b2da      	uxtb	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008970:	0e1b      	lsrs	r3, r3, #24
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f003 0303 	and.w	r3, r3, #3
 8008978:	b2da      	uxtb	r2, r3
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008982:	0c1b      	lsrs	r3, r3, #16
 8008984:	b2da      	uxtb	r2, r3
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800898e:	0a1b      	lsrs	r3, r3, #8
 8008990:	b2da      	uxtb	r2, r3
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800899a:	b2da      	uxtb	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089a4:	0d1b      	lsrs	r3, r3, #20
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089b0:	0c1b      	lsrs	r3, r3, #16
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089c2:	0bdb      	lsrs	r3, r3, #15
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089d4:	0b9b      	lsrs	r3, r3, #14
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089e6:	0b5b      	lsrs	r3, r3, #13
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089f8:	0b1b      	lsrs	r3, r3, #12
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d163      	bne.n	8008adc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a18:	009a      	lsls	r2, r3, #2
 8008a1a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008a1e:	4013      	ands	r3, r2
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008a24:	0f92      	lsrs	r2, r2, #30
 8008a26:	431a      	orrs	r2, r3
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a30:	0edb      	lsrs	r3, r3, #27
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 0307 	and.w	r3, r3, #7
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a42:	0e1b      	lsrs	r3, r3, #24
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a54:	0d5b      	lsrs	r3, r3, #21
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a66:	0c9b      	lsrs	r3, r3, #18
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a78:	0bdb      	lsrs	r3, r3, #15
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	7e1b      	ldrb	r3, [r3, #24]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	3302      	adds	r3, #2
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008aa6:	fb03 f202 	mul.w	r2, r3, r2
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	7a1b      	ldrb	r3, [r3, #8]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 030f 	and.w	r3, r3, #15
 8008ab8:	2201      	movs	r2, #1
 8008aba:	409a      	lsls	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008ac8:	0a52      	lsrs	r2, r2, #9
 8008aca:	fb03 f202 	mul.w	r2, r3, r2
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ad8:	655a      	str	r2, [r3, #84]	@ 0x54
 8008ada:	e031      	b.n	8008b40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d11d      	bne.n	8008b20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ae8:	041b      	lsls	r3, r3, #16
 8008aea:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008af2:	0c1b      	lsrs	r3, r3, #16
 8008af4:	431a      	orrs	r2, r3
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	3301      	adds	r3, #1
 8008b00:	029a      	lsls	r2, r3, #10
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b14:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8008b1e:	e00f      	b.n	8008b40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a58      	ldr	r2, [pc, #352]	@ (8008c88 <HAL_SD_GetCardCSD+0x344>)
 8008b26:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e09d      	b.n	8008c7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b44:	0b9b      	lsrs	r3, r3, #14
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b56:	09db      	lsrs	r3, r3, #7
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b78:	0fdb      	lsrs	r3, r3, #31
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b84:	0f5b      	lsrs	r3, r3, #29
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 0303 	and.w	r3, r3, #3
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b96:	0e9b      	lsrs	r3, r3, #26
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ba8:	0d9b      	lsrs	r3, r3, #22
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 030f 	and.w	r3, r3, #15
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bba:	0d5b      	lsrs	r3, r3, #21
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bd6:	0c1b      	lsrs	r3, r3, #16
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bea:	0bdb      	lsrs	r3, r3, #15
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bfe:	0b9b      	lsrs	r3, r3, #14
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c12:	0b5b      	lsrs	r3, r3, #13
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c26:	0b1b      	lsrs	r3, r3, #12
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c3a:	0a9b      	lsrs	r3, r3, #10
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	1fe00fff 	.word	0x1fe00fff

08008c8c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b094      	sub	sp, #80	@ 0x50
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d101      	bne.n	8008cac <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e0a7      	b.n	8008dfc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008cac:	f107 0308 	add.w	r3, r7, #8
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fb62 	bl	800937c <SD_SendSDStatus>
 8008cb8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d011      	beq.n	8008ce4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a4f      	ldr	r2, [pc, #316]	@ (8008e04 <HAL_SD_GetCardStatus+0x178>)
 8008cc6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008ce2:	e070      	b.n	8008dc6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	099b      	lsrs	r3, r3, #6
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	0e1b      	lsrs	r3, r3, #24
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	4313      	orrs	r3, r2
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	061a      	lsls	r2, r3, #24
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	021b      	lsls	r3, r3, #8
 8008d26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d2a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	0a1b      	lsrs	r3, r3, #8
 8008d30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008d34:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	0e1b      	lsrs	r3, r3, #24
 8008d3a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	0a1b      	lsrs	r3, r3, #8
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	0d1b      	lsrs	r3, r3, #20
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	f003 030f 	and.w	r3, r3, #15
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	0c1b      	lsrs	r3, r3, #16
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	4313      	orrs	r3, r2
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	0a9b      	lsrs	r3, r3, #10
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	0a1b      	lsrs	r3, r3, #8
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	f003 0303 	and.w	r3, r3, #3
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	091b      	lsrs	r3, r3, #4
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	f003 030f 	and.w	r3, r3, #15
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	0e1b      	lsrs	r3, r3, #24
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f003 fe54 	bl	800ca7c <SDMMC_CmdBlockLength>
 8008dd4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00d      	beq.n	8008df8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a08      	ldr	r2, [pc, #32]	@ (8008e04 <HAL_SD_GetCardStatus+0x178>)
 8008de2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008de8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008df8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3750      	adds	r7, #80	@ 0x50
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	1fe00fff 	.word	0x1fe00fff

08008e08 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008e60:	b590      	push	{r4, r7, lr}
 8008e62:	b08d      	sub	sp, #52	@ 0x34
 8008e64:	af02      	add	r7, sp, #8
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2203      	movs	r2, #3
 8008e74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d02e      	beq.n	8008ede <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e86:	d106      	bne.n	8008e96 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	635a      	str	r2, [r3, #52]	@ 0x34
 8008e94:	e029      	b.n	8008eea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e9c:	d10a      	bne.n	8008eb4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fb64 	bl	800956c <SD_WideBus_Enable>
 8008ea4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	431a      	orrs	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8008eb2:	e01a      	b.n	8008eea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fba1 	bl	8009602 <SD_WideBus_Disable>
 8008ec0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	431a      	orrs	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ece:	e00c      	b.n	8008eea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ed4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	635a      	str	r2, [r3, #52]	@ 0x34
 8008edc:	e005      	b.n	8008eea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ee2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a5f      	ldr	r2, [pc, #380]	@ (8009074 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008f00:	e096      	b.n	8009030 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008f02:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008f06:	f04f 0100 	mov.w	r1, #0
 8008f0a:	f7fd fe9d 	bl	8006c48 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f0e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8083 	beq.w	800901e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	4950      	ldr	r1, [pc, #320]	@ (8009078 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008f36:	fba1 1303 	umull	r1, r3, r1, r3
 8008f3a:	0e1b      	lsrs	r3, r3, #24
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d303      	bcc.n	8008f48 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	61bb      	str	r3, [r7, #24]
 8008f46:	e05a      	b.n	8008ffe <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f50:	d103      	bne.n	8008f5a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	61bb      	str	r3, [r7, #24]
 8008f58:	e051      	b.n	8008ffe <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f62:	d126      	bne.n	8008fb2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10e      	bne.n	8008f8a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	4a43      	ldr	r2, [pc, #268]	@ (800907c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d906      	bls.n	8008f82 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	4a40      	ldr	r2, [pc, #256]	@ (8009078 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008f78:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7c:	0e5b      	lsrs	r3, r3, #25
 8008f7e:	61bb      	str	r3, [r7, #24]
 8008f80:	e03d      	b.n	8008ffe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	61bb      	str	r3, [r7, #24]
 8008f88:	e039      	b.n	8008ffe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	69fa      	ldr	r2, [r7, #28]
 8008f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f96:	4a39      	ldr	r2, [pc, #228]	@ (800907c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d906      	bls.n	8008faa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	4a36      	ldr	r2, [pc, #216]	@ (8009078 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa4:	0e5b      	lsrs	r3, r3, #25
 8008fa6:	61bb      	str	r3, [r7, #24]
 8008fa8:	e029      	b.n	8008ffe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	61bb      	str	r3, [r7, #24]
 8008fb0:	e025      	b.n	8008ffe <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10e      	bne.n	8008fd8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	4a30      	ldr	r2, [pc, #192]	@ (8009080 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d906      	bls.n	8008fd0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8009078 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fca:	0e1b      	lsrs	r3, r3, #24
 8008fcc:	61bb      	str	r3, [r7, #24]
 8008fce:	e016      	b.n	8008ffe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	e012      	b.n	8008ffe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	005b      	lsls	r3, r3, #1
 8008fde:	69fa      	ldr	r2, [r7, #28]
 8008fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe4:	4a26      	ldr	r2, [pc, #152]	@ (8009080 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d906      	bls.n	8008ff8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	4a22      	ldr	r2, [pc, #136]	@ (8009078 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008fee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff2:	0e1b      	lsrs	r3, r3, #24
 8008ff4:	61bb      	str	r3, [r7, #24]
 8008ff6:	e002      	b.n	8008ffe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681c      	ldr	r4, [r3, #0]
 8009002:	466a      	mov	r2, sp
 8009004:	f107 0314 	add.w	r3, r7, #20
 8009008:	e893 0003 	ldmia.w	r3, {r0, r1}
 800900c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009010:	f107 0308 	add.w	r3, r7, #8
 8009014:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009016:	4620      	mov	r0, r4
 8009018:	f003 fc52 	bl	800c8c0 <SDMMC_Init>
 800901c:	e008      	b.n	8009030 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009022:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009038:	4618      	mov	r0, r3
 800903a:	f003 fd1f 	bl	800ca7c <SDMMC_CmdBlockLength>
 800903e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00c      	beq.n	8009060 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a0a      	ldr	r2, [pc, #40]	@ (8009074 <HAL_SD_ConfigWideBusOperation+0x214>)
 800904c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	431a      	orrs	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800906c:	4618      	mov	r0, r3
 800906e:	372c      	adds	r7, #44	@ 0x2c
 8009070:	46bd      	mov	sp, r7
 8009072:	bd90      	pop	{r4, r7, pc}
 8009074:	1fe00fff 	.word	0x1fe00fff
 8009078:	55e63b89 	.word	0x55e63b89
 800907c:	02faf080 	.word	0x02faf080
 8009080:	017d7840 	.word	0x017d7840

08009084 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009090:	f107 030c 	add.w	r3, r7, #12
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa40 	bl	800951c <SD_SendStatus>
 800909c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	431a      	orrs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	0a5b      	lsrs	r3, r3, #9
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80090ba:	693b      	ldr	r3, [r7, #16]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b090      	sub	sp, #64	@ 0x40
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80090d0:	f7fa ffe0 	bl	8004094 <HAL_GetTick>
 80090d4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	f003 fc49 	bl	800c972 <SDMMC_GetPowerState>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d102      	bne.n	80090ec <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80090ea:	e0b5      	b.n	8009258 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d02e      	beq.n	8009152 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f003 fe94 	bl	800ce26 <SDMMC_CmdSendCID>
 80090fe:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <SD_InitCard+0x46>
    {
      return errorstate;
 8009106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009108:	e0a6      	b.n	8009258 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2100      	movs	r1, #0
 8009110:	4618      	mov	r0, r3
 8009112:	f003 fc74 	bl	800c9fe <SDMMC_GetResponse>
 8009116:	4602      	mov	r2, r0
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2104      	movs	r1, #4
 8009122:	4618      	mov	r0, r3
 8009124:	f003 fc6b 	bl	800c9fe <SDMMC_GetResponse>
 8009128:	4602      	mov	r2, r0
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2108      	movs	r1, #8
 8009134:	4618      	mov	r0, r3
 8009136:	f003 fc62 	bl	800c9fe <SDMMC_GetResponse>
 800913a:	4602      	mov	r2, r0
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	210c      	movs	r1, #12
 8009146:	4618      	mov	r0, r3
 8009148:	f003 fc59 	bl	800c9fe <SDMMC_GetResponse>
 800914c:	4602      	mov	r2, r0
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009156:	2b03      	cmp	r3, #3
 8009158:	d01d      	beq.n	8009196 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800915a:	e019      	b.n	8009190 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f107 020a 	add.w	r2, r7, #10
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f003 fe9c 	bl	800cea4 <SDMMC_CmdSetRelAdd>
 800916c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800916e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009176:	e06f      	b.n	8009258 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009178:	f7fa ff8c 	bl	8004094 <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009186:	4293      	cmp	r3, r2
 8009188:	d902      	bls.n	8009190 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800918a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800918e:	e063      	b.n	8009258 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009190:	897b      	ldrh	r3, [r7, #10]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0e2      	beq.n	800915c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919a:	2b03      	cmp	r3, #3
 800919c:	d036      	beq.n	800920c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800919e:	897b      	ldrh	r3, [r7, #10]
 80091a0:	461a      	mov	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ae:	041b      	lsls	r3, r3, #16
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f003 fe56 	bl	800ce64 <SDMMC_CmdSendCSD>
 80091b8:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <SD_InitCard+0x100>
    {
      return errorstate;
 80091c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c2:	e049      	b.n	8009258 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f003 fc17 	bl	800c9fe <SDMMC_GetResponse>
 80091d0:	4602      	mov	r2, r0
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2104      	movs	r1, #4
 80091dc:	4618      	mov	r0, r3
 80091de:	f003 fc0e 	bl	800c9fe <SDMMC_GetResponse>
 80091e2:	4602      	mov	r2, r0
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2108      	movs	r1, #8
 80091ee:	4618      	mov	r0, r3
 80091f0:	f003 fc05 	bl	800c9fe <SDMMC_GetResponse>
 80091f4:	4602      	mov	r2, r0
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	210c      	movs	r1, #12
 8009200:	4618      	mov	r0, r3
 8009202:	f003 fbfc 	bl	800c9fe <SDMMC_GetResponse>
 8009206:	4602      	mov	r2, r0
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2104      	movs	r1, #4
 8009212:	4618      	mov	r0, r3
 8009214:	f003 fbf3 	bl	800c9fe <SDMMC_GetResponse>
 8009218:	4603      	mov	r3, r0
 800921a:	0d1a      	lsrs	r2, r3, #20
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009220:	f107 030c 	add.w	r3, r7, #12
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff fb8c 	bl	8008944 <HAL_SD_GetCardCSD>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009232:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009236:	e00f      	b.n	8009258 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009240:	041b      	lsls	r3, r3, #16
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f003 fd05 	bl	800cc54 <SDMMC_CmdSelDesel>
 800924a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800924c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <SD_InitCard+0x192>
  {
    return errorstate;
 8009252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009254:	e000      	b.n	8009258 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3740      	adds	r7, #64	@ 0x40
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4618      	mov	r0, r3
 800927a:	f003 fd0e 	bl	800cc9a <SDMMC_CmdGoIdleState>
 800927e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	e072      	b.n	8009370 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4618      	mov	r0, r3
 8009290:	f003 fd21 	bl	800ccd6 <SDMMC_CmdOperCond>
 8009294:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800929c:	d10d      	bne.n	80092ba <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f003 fcf6 	bl	800cc9a <SDMMC_CmdGoIdleState>
 80092ae:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d004      	beq.n	80092c0 <SD_PowerON+0x60>
    {
      return errorstate;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	e05a      	b.n	8009370 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d137      	bne.n	8009338 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2100      	movs	r1, #0
 80092ce:	4618      	mov	r0, r3
 80092d0:	f003 fd21 	bl	800cd16 <SDMMC_CmdAppCommand>
 80092d4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d02d      	beq.n	8009338 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80092e0:	e046      	b.n	8009370 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2100      	movs	r1, #0
 80092e8:	4618      	mov	r0, r3
 80092ea:	f003 fd14 	bl	800cd16 <SDMMC_CmdAppCommand>
 80092ee:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <SD_PowerON+0x9a>
    {
      return errorstate;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	e03a      	b.n	8009370 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	491e      	ldr	r1, [pc, #120]	@ (8009378 <SD_PowerON+0x118>)
 8009300:	4618      	mov	r0, r3
 8009302:	f003 fd2b 	bl	800cd5c <SDMMC_CmdAppOperCommand>
 8009306:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800930e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009312:	e02d      	b.n	8009370 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2100      	movs	r1, #0
 800931a:	4618      	mov	r0, r3
 800931c:	f003 fb6f 	bl	800c9fe <SDMMC_GetResponse>
 8009320:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	0fdb      	lsrs	r3, r3, #31
 8009326:	2b01      	cmp	r3, #1
 8009328:	d101      	bne.n	800932e <SD_PowerON+0xce>
 800932a:	2301      	movs	r3, #1
 800932c:	e000      	b.n	8009330 <SD_PowerON+0xd0>
 800932e:	2300      	movs	r3, #0
 8009330:	613b      	str	r3, [r7, #16]

    count++;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	3301      	adds	r3, #1
 8009336:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800933e:	4293      	cmp	r3, r2
 8009340:	d802      	bhi.n	8009348 <SD_PowerON+0xe8>
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0cc      	beq.n	80092e2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800934e:	4293      	cmp	r3, r2
 8009350:	d902      	bls.n	8009358 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009352:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009356:	e00b      	b.n	8009370 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	c1100000 	.word	0xc1100000

0800937c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08c      	sub	sp, #48	@ 0x30
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009386:	f7fa fe85 	bl	8004094 <HAL_GetTick>
 800938a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2100      	movs	r1, #0
 8009396:	4618      	mov	r0, r3
 8009398:	f003 fb31 	bl	800c9fe <SDMMC_GetResponse>
 800939c:	4603      	mov	r3, r0
 800939e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093a6:	d102      	bne.n	80093ae <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093ac:	e0b0      	b.n	8009510 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2140      	movs	r1, #64	@ 0x40
 80093b4:	4618      	mov	r0, r3
 80093b6:	f003 fb61 	bl	800ca7c <SDMMC_CmdBlockLength>
 80093ba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	e0a0      	b.n	8009510 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f003 fc9b 	bl	800cd16 <SDMMC_CmdAppCommand>
 80093e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	e08d      	b.n	8009510 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093f4:	f04f 33ff 	mov.w	r3, #4294967295
 80093f8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80093fa:	2340      	movs	r3, #64	@ 0x40
 80093fc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80093fe:	2360      	movs	r3, #96	@ 0x60
 8009400:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009402:	2302      	movs	r3, #2
 8009404:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009406:	2300      	movs	r3, #0
 8009408:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800940a:	2301      	movs	r3, #1
 800940c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f107 0208 	add.w	r2, r7, #8
 8009416:	4611      	mov	r1, r2
 8009418:	4618      	mov	r0, r3
 800941a:	f003 fb03 	bl	800ca24 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f003 fd83 	bl	800cf2e <SDMMC_CmdStatusRegister>
 8009428:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d02b      	beq.n	8009488 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	e069      	b.n	8009510 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009442:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d013      	beq.n	8009472 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800944a:	2300      	movs	r3, #0
 800944c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800944e:	e00d      	b.n	800946c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4618      	mov	r0, r3
 8009456:	f003 fa5d 	bl	800c914 <SDMMC_ReadFIFO>
 800945a:	4602      	mov	r2, r0
 800945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945e:	601a      	str	r2, [r3, #0]
        pData++;
 8009460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009462:	3304      	adds	r3, #4
 8009464:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009468:	3301      	adds	r3, #1
 800946a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800946c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946e:	2b07      	cmp	r3, #7
 8009470:	d9ee      	bls.n	8009450 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009472:	f7fa fe0f 	bl	8004094 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009480:	d102      	bne.n	8009488 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009482:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009486:	e043      	b.n	8009510 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800948e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0d2      	beq.n	800943c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800949c:	f003 0308 	and.w	r3, r3, #8
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094a4:	2308      	movs	r3, #8
 80094a6:	e033      	b.n	8009510 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094b6:	2302      	movs	r3, #2
 80094b8:	e02a      	b.n	8009510 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d017      	beq.n	80094f8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80094c8:	2320      	movs	r3, #32
 80094ca:	e021      	b.n	8009510 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f003 fa1f 	bl	800c914 <SDMMC_ReadFIFO>
 80094d6:	4602      	mov	r2, r0
 80094d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094da:	601a      	str	r2, [r3, #0]
    pData++;
 80094dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094de:	3304      	adds	r3, #4
 80094e0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80094e2:	f7fa fdd7 	bl	8004094 <HAL_GetTick>
 80094e6:	4602      	mov	r2, r0
 80094e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d102      	bne.n	80094f8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80094f6:	e00b      	b.n	8009510 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1e2      	bne.n	80094cc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a03      	ldr	r2, [pc, #12]	@ (8009518 <SD_SendSDStatus+0x19c>)
 800950c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3730      	adds	r7, #48	@ 0x30
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	18000f3a 	.word	0x18000f3a

0800951c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d102      	bne.n	8009532 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800952c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009530:	e018      	b.n	8009564 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800953a:	041b      	lsls	r3, r3, #16
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f003 fcd2 	bl	800cee8 <SDMMC_CmdSendStatus>
 8009544:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <SD_SendStatus+0x34>
  {
    return errorstate;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	e009      	b.n	8009564 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2100      	movs	r1, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f003 fa51 	bl	800c9fe <SDMMC_GetResponse>
 800955c:	4602      	mov	r2, r0
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009574:	2300      	movs	r3, #0
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	2300      	movs	r3, #0
 800957a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2100      	movs	r1, #0
 8009582:	4618      	mov	r0, r3
 8009584:	f003 fa3b 	bl	800c9fe <SDMMC_GetResponse>
 8009588:	4603      	mov	r3, r0
 800958a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800958e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009592:	d102      	bne.n	800959a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009594:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009598:	e02f      	b.n	80095fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800959a:	f107 030c 	add.w	r3, r7, #12
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f879 	bl	8009698 <SD_FindSCR>
 80095a6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	e023      	b.n	80095fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d01c      	beq.n	80095f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095c4:	041b      	lsls	r3, r3, #16
 80095c6:	4619      	mov	r1, r3
 80095c8:	4610      	mov	r0, r2
 80095ca:	f003 fba4 	bl	800cd16 <SDMMC_CmdAppCommand>
 80095ce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	e00f      	b.n	80095fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2102      	movs	r1, #2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f003 fbdb 	bl	800cd9c <SDMMC_CmdBusWidth>
 80095e6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	e003      	b.n	80095fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095f2:	2300      	movs	r3, #0
 80095f4:	e001      	b.n	80095fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b086      	sub	sp, #24
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800960a:	2300      	movs	r3, #0
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	2300      	movs	r3, #0
 8009610:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f003 f9f0 	bl	800c9fe <SDMMC_GetResponse>
 800961e:	4603      	mov	r3, r0
 8009620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009628:	d102      	bne.n	8009630 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800962a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800962e:	e02f      	b.n	8009690 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009630:	f107 030c 	add.w	r3, r7, #12
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f82e 	bl	8009698 <SD_FindSCR>
 800963c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	e023      	b.n	8009690 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d01c      	beq.n	800968c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800965a:	041b      	lsls	r3, r3, #16
 800965c:	4619      	mov	r1, r3
 800965e:	4610      	mov	r0, r2
 8009660:	f003 fb59 	bl	800cd16 <SDMMC_CmdAppCommand>
 8009664:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	e00f      	b.n	8009690 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2100      	movs	r1, #0
 8009676:	4618      	mov	r0, r3
 8009678:	f003 fb90 	bl	800cd9c <SDMMC_CmdBusWidth>
 800967c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	e003      	b.n	8009690 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009688:	2300      	movs	r3, #0
 800968a:	e001      	b.n	8009690 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800968c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009690:	4618      	mov	r0, r3
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08e      	sub	sp, #56	@ 0x38
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80096a2:	f7fa fcf7 	bl	8004094 <HAL_GetTick>
 80096a6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80096a8:	2300      	movs	r3, #0
 80096aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80096ac:	2300      	movs	r3, #0
 80096ae:	60bb      	str	r3, [r7, #8]
 80096b0:	2300      	movs	r3, #0
 80096b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2108      	movs	r1, #8
 80096be:	4618      	mov	r0, r3
 80096c0:	f003 f9dc 	bl	800ca7c <SDMMC_CmdBlockLength>
 80096c4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80096c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80096cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ce:	e0ad      	b.n	800982c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d8:	041b      	lsls	r3, r3, #16
 80096da:	4619      	mov	r1, r3
 80096dc:	4610      	mov	r0, r2
 80096de:	f003 fb1a 	bl	800cd16 <SDMMC_CmdAppCommand>
 80096e2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80096e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80096ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ec:	e09e      	b.n	800982c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096ee:	f04f 33ff 	mov.w	r3, #4294967295
 80096f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80096f4:	2308      	movs	r3, #8
 80096f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80096f8:	2330      	movs	r3, #48	@ 0x30
 80096fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096fc:	2302      	movs	r3, #2
 80096fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009700:	2300      	movs	r3, #0
 8009702:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009704:	2301      	movs	r3, #1
 8009706:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f107 0210 	add.w	r2, r7, #16
 8009710:	4611      	mov	r1, r2
 8009712:	4618      	mov	r0, r3
 8009714:	f003 f986 	bl	800ca24 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4618      	mov	r0, r3
 800971e:	f003 fb60 	bl	800cde2 <SDMMC_CmdSendSCR>
 8009722:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009726:	2b00      	cmp	r3, #0
 8009728:	d027      	beq.n	800977a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800972a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800972c:	e07e      	b.n	800982c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009734:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d113      	bne.n	8009764 <SD_FindSCR+0xcc>
 800973c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973e:	2b00      	cmp	r3, #0
 8009740:	d110      	bne.n	8009764 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4618      	mov	r0, r3
 8009748:	f003 f8e4 	bl	800c914 <SDMMC_ReadFIFO>
 800974c:	4603      	mov	r3, r0
 800974e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4618      	mov	r0, r3
 8009756:	f003 f8dd 	bl	800c914 <SDMMC_ReadFIFO>
 800975a:	4603      	mov	r3, r0
 800975c:	60fb      	str	r3, [r7, #12]
      index++;
 800975e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009760:	3301      	adds	r3, #1
 8009762:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009764:	f7fa fc96 	bl	8004094 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009772:	d102      	bne.n	800977a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009774:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009778:	e058      	b.n	800982c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009780:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009784:	4013      	ands	r3, r2
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0d1      	beq.n	800972e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009790:	f003 0308 	and.w	r3, r3, #8
 8009794:	2b00      	cmp	r3, #0
 8009796:	d005      	beq.n	80097a4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2208      	movs	r2, #8
 800979e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80097a0:	2308      	movs	r3, #8
 80097a2:	e043      	b.n	800982c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2202      	movs	r2, #2
 80097b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80097ba:	2302      	movs	r3, #2
 80097bc:	e036      	b.n	800982c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c4:	f003 0320 	and.w	r3, r3, #32
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d005      	beq.n	80097d8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2220      	movs	r2, #32
 80097d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80097d4:	2320      	movs	r3, #32
 80097d6:	e029      	b.n	800982c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a15      	ldr	r2, [pc, #84]	@ (8009834 <SD_FindSCR+0x19c>)
 80097de:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	061a      	lsls	r2, r3, #24
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	021b      	lsls	r3, r3, #8
 80097e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	0a1b      	lsrs	r3, r3, #8
 80097f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80097f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	0e1b      	lsrs	r3, r3, #24
 80097fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80097fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009800:	601a      	str	r2, [r3, #0]
    scr++;
 8009802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009804:	3304      	adds	r3, #4
 8009806:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	061a      	lsls	r2, r3, #24
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009814:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	0a1b      	lsrs	r3, r3, #8
 800981a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800981e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	0e1b      	lsrs	r3, r3, #24
 8009824:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009828:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3738      	adds	r7, #56	@ 0x38
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	18000f3a 	.word	0x18000f3a

08009838 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e10f      	b.n	8009a6a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a87      	ldr	r2, [pc, #540]	@ (8009a74 <HAL_SPI_Init+0x23c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d00f      	beq.n	800987a <HAL_SPI_Init+0x42>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a86      	ldr	r2, [pc, #536]	@ (8009a78 <HAL_SPI_Init+0x240>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d00a      	beq.n	800987a <HAL_SPI_Init+0x42>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a84      	ldr	r2, [pc, #528]	@ (8009a7c <HAL_SPI_Init+0x244>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d005      	beq.n	800987a <HAL_SPI_Init+0x42>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	2b0f      	cmp	r3, #15
 8009874:	d901      	bls.n	800987a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e0f7      	b.n	8009a6a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fe2e 	bl	800a4dc <SPI_GetPacketSize>
 8009880:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a7b      	ldr	r2, [pc, #492]	@ (8009a74 <HAL_SPI_Init+0x23c>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d00c      	beq.n	80098a6 <HAL_SPI_Init+0x6e>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a79      	ldr	r2, [pc, #484]	@ (8009a78 <HAL_SPI_Init+0x240>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d007      	beq.n	80098a6 <HAL_SPI_Init+0x6e>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a78      	ldr	r2, [pc, #480]	@ (8009a7c <HAL_SPI_Init+0x244>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d002      	beq.n	80098a6 <HAL_SPI_Init+0x6e>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b08      	cmp	r3, #8
 80098a4:	d811      	bhi.n	80098ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098aa:	4a72      	ldr	r2, [pc, #456]	@ (8009a74 <HAL_SPI_Init+0x23c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d009      	beq.n	80098c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a70      	ldr	r2, [pc, #448]	@ (8009a78 <HAL_SPI_Init+0x240>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d004      	beq.n	80098c4 <HAL_SPI_Init+0x8c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a6f      	ldr	r2, [pc, #444]	@ (8009a7c <HAL_SPI_Init+0x244>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d104      	bne.n	80098ce <HAL_SPI_Init+0x96>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b10      	cmp	r3, #16
 80098c8:	d901      	bls.n	80098ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e0cd      	b.n	8009a6a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7f9 fede 	bl	80036a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 0201 	bic.w	r2, r2, #1
 80098fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800990a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009914:	d119      	bne.n	800994a <HAL_SPI_Init+0x112>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800991e:	d103      	bne.n	8009928 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009924:	2b00      	cmp	r3, #0
 8009926:	d008      	beq.n	800993a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10c      	bne.n	800994a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009938:	d107      	bne.n	800994a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009948:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00f      	beq.n	8009976 <HAL_SPI_Init+0x13e>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	2b06      	cmp	r3, #6
 800995c:	d90b      	bls.n	8009976 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	e007      	b.n	8009986 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009984:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	69da      	ldr	r2, [r3, #28]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800998e:	431a      	orrs	r2, r3
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	431a      	orrs	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009998:	ea42 0103 	orr.w	r1, r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68da      	ldr	r2, [r3, #12]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	430a      	orrs	r2, r1
 80099a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b0:	431a      	orrs	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b6:	431a      	orrs	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	431a      	orrs	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	431a      	orrs	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	431a      	orrs	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099e6:	ea42 0103 	orr.w	r1, r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d113      	bne.n	8009a26 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a10:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009a24:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 0201 	bic.w	r2, r2, #1
 8009a34:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	40013000 	.word	0x40013000
 8009a78:	40003800 	.word	0x40003800
 8009a7c:	40003c00 	.word	0x40003c00

08009a80 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af02      	add	r7, sp, #8
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3320      	adds	r3, #32
 8009a96:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a98:	f7fa fafc 	bl	8004094 <HAL_GetTick>
 8009a9c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d001      	beq.n	8009aae <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009aaa:	2302      	movs	r3, #2
 8009aac:	e1d1      	b.n	8009e52 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <HAL_SPI_Transmit+0x3a>
 8009ab4:	88fb      	ldrh	r3, [r7, #6]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e1c9      	b.n	8009e52 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d101      	bne.n	8009acc <HAL_SPI_Transmit+0x4c>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	e1c2      	b.n	8009e52 <HAL_SPI_Transmit+0x3d2>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2203      	movs	r2, #3
 8009ad8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	88fa      	ldrh	r2, [r7, #6]
 8009aee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	88fa      	ldrh	r2, [r7, #6]
 8009af6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009b24:	d108      	bne.n	8009b38 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	e009      	b.n	8009b4c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009b4a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685a      	ldr	r2, [r3, #4]
 8009b52:	4b96      	ldr	r3, [pc, #600]	@ (8009dac <HAL_SPI_Transmit+0x32c>)
 8009b54:	4013      	ands	r3, r2
 8009b56:	88f9      	ldrh	r1, [r7, #6]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	6812      	ldr	r2, [r2, #0]
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f042 0201 	orr.w	r2, r2, #1
 8009b6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b78:	d107      	bne.n	8009b8a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	2b0f      	cmp	r3, #15
 8009b90:	d947      	bls.n	8009c22 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009b92:	e03f      	b.n	8009c14 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	f003 0302 	and.w	r3, r3, #2
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d114      	bne.n	8009bcc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6812      	ldr	r2, [r2, #0]
 8009bac:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bb2:	1d1a      	adds	r2, r3, #4
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009bca:	e023      	b.n	8009c14 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bcc:	f7fa fa62 	bl	8004094 <HAL_GetTick>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d803      	bhi.n	8009be4 <HAL_SPI_Transmit+0x164>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d102      	bne.n	8009bea <HAL_SPI_Transmit+0x16a>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d114      	bne.n	8009c14 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 fba8 	bl	800a340 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bf6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009c10:	2303      	movs	r3, #3
 8009c12:	e11e      	b.n	8009e52 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1b9      	bne.n	8009b94 <HAL_SPI_Transmit+0x114>
 8009c20:	e0f1      	b.n	8009e06 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	2b07      	cmp	r3, #7
 8009c28:	f240 80e6 	bls.w	8009df8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009c2c:	e05d      	b.n	8009cea <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d132      	bne.n	8009ca2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d918      	bls.n	8009c7a <HAL_SPI_Transmit+0x1fa>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d014      	beq.n	8009c7a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6812      	ldr	r2, [r2, #0]
 8009c5a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c60:	1d1a      	adds	r2, r3, #4
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	3b02      	subs	r3, #2
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c78:	e037      	b.n	8009cea <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c7e:	881a      	ldrh	r2, [r3, #0]
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c88:	1c9a      	adds	r2, r3, #2
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	3b01      	subs	r3, #1
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ca0:	e023      	b.n	8009cea <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ca2:	f7fa f9f7 	bl	8004094 <HAL_GetTick>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d803      	bhi.n	8009cba <HAL_SPI_Transmit+0x23a>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb8:	d102      	bne.n	8009cc0 <HAL_SPI_Transmit+0x240>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d114      	bne.n	8009cea <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 fb3d 	bl	800a340 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ccc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e0b3      	b.n	8009e52 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d19b      	bne.n	8009c2e <HAL_SPI_Transmit+0x1ae>
 8009cf6:	e086      	b.n	8009e06 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	f003 0302 	and.w	r3, r3, #2
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d154      	bne.n	8009db0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d918      	bls.n	8009d44 <HAL_SPI_Transmit+0x2c4>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d16:	2b40      	cmp	r3, #64	@ 0x40
 8009d18:	d914      	bls.n	8009d44 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6812      	ldr	r2, [r2, #0]
 8009d24:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d2a:	1d1a      	adds	r2, r3, #4
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	3b04      	subs	r3, #4
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009d42:	e059      	b.n	8009df8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d917      	bls.n	8009d80 <HAL_SPI_Transmit+0x300>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d013      	beq.n	8009d80 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d5c:	881a      	ldrh	r2, [r3, #0]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d66:	1c9a      	adds	r2, r3, #2
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	3b02      	subs	r3, #2
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009d7e:	e03b      	b.n	8009df8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3320      	adds	r3, #32
 8009d8a:	7812      	ldrb	r2, [r2, #0]
 8009d8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	3b01      	subs	r3, #1
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009daa:	e025      	b.n	8009df8 <HAL_SPI_Transmit+0x378>
 8009dac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009db0:	f7fa f970 	bl	8004094 <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d803      	bhi.n	8009dc8 <HAL_SPI_Transmit+0x348>
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc6:	d102      	bne.n	8009dce <HAL_SPI_Transmit+0x34e>
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d114      	bne.n	8009df8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 fab6 	bl	800a340 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e02c      	b.n	8009e52 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f47f af79 	bne.w	8009cf8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2108      	movs	r1, #8
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 fb35 	bl	800a480 <SPI_WaitOnFlagUntilTimeout>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d007      	beq.n	8009e2c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e22:	f043 0220 	orr.w	r2, r3, #32
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 fa87 	bl	800a340 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e000      	b.n	8009e52 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009e50:	2300      	movs	r3, #0
  }
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop

08009e5c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	603b      	str	r3, [r7, #0]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e70:	095b      	lsrs	r3, r3, #5
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	3301      	adds	r3, #1
 8009e76:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3330      	adds	r3, #48	@ 0x30
 8009e7e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e80:	f7fa f908 	bl	8004094 <HAL_GetTick>
 8009e84:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d001      	beq.n	8009e96 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8009e92:	2302      	movs	r3, #2
 8009e94:	e250      	b.n	800a338 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <HAL_SPI_Receive+0x46>
 8009e9c:	88fb      	ldrh	r3, [r7, #6]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e248      	b.n	800a338 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d101      	bne.n	8009eb4 <HAL_SPI_Receive+0x58>
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	e241      	b.n	800a338 <HAL_SPI_Receive+0x4dc>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	88fa      	ldrh	r2, [r7, #6]
 8009ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	88fa      	ldrh	r2, [r7, #6]
 8009ede:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009f0c:	d108      	bne.n	8009f20 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e009      	b.n	8009f34 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009f32:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	4b95      	ldr	r3, [pc, #596]	@ (800a190 <HAL_SPI_Receive+0x334>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	88f9      	ldrh	r1, [r7, #6]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	6812      	ldr	r2, [r2, #0]
 8009f44:	430b      	orrs	r3, r1
 8009f46:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 0201 	orr.w	r2, r2, #1
 8009f56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f60:	d107      	bne.n	8009f72 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	2b0f      	cmp	r3, #15
 8009f78:	d96c      	bls.n	800a054 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009f7a:	e064      	b.n	800a046 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d114      	bne.n	8009fbc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009f9c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fa2:	1d1a      	adds	r2, r3, #4
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009fba:	e044      	b.n	800a046 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	8bfa      	ldrh	r2, [r7, #30]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d919      	bls.n	8009ffe <HAL_SPI_Receive+0x1a2>
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d014      	beq.n	8009ffe <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009fde:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fe4:	1d1a      	adds	r2, r3, #4
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009ffc:	e023      	b.n	800a046 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ffe:	f7fa f849 	bl	8004094 <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d803      	bhi.n	800a016 <HAL_SPI_Receive+0x1ba>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a014:	d102      	bne.n	800a01c <HAL_SPI_Receive+0x1c0>
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d114      	bne.n	800a046 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 f98f 	bl	800a340 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a028:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e178      	b.n	800a338 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d194      	bne.n	8009f7c <HAL_SPI_Receive+0x120>
 800a052:	e15e      	b.n	800a312 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	2b07      	cmp	r3, #7
 800a05a:	f240 8153 	bls.w	800a304 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a05e:	e08f      	b.n	800a180 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b01      	cmp	r3, #1
 800a074:	d114      	bne.n	800a0a0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	8812      	ldrh	r2, [r2, #0]
 800a07e:	b292      	uxth	r2, r2
 800a080:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a086:	1c9a      	adds	r2, r3, #2
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a092:	b29b      	uxth	r3, r3
 800a094:	3b01      	subs	r3, #1
 800a096:	b29a      	uxth	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a09e:	e06f      	b.n	800a180 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	8bfa      	ldrh	r2, [r7, #30]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d924      	bls.n	800a0f8 <HAL_SPI_Receive+0x29c>
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01f      	beq.n	800a0f8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	8812      	ldrh	r2, [r2, #0]
 800a0c0:	b292      	uxth	r2, r2
 800a0c2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0c8:	1c9a      	adds	r2, r3, #2
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	8812      	ldrh	r2, [r2, #0]
 800a0d6:	b292      	uxth	r2, r2
 800a0d8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0de:	1c9a      	adds	r2, r3, #2
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	3b02      	subs	r3, #2
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a0f6:	e043      	b.n	800a180 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	2b01      	cmp	r3, #1
 800a102:	d119      	bne.n	800a138 <HAL_SPI_Receive+0x2dc>
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d014      	beq.n	800a138 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	8812      	ldrh	r2, [r2, #0]
 800a116:	b292      	uxth	r2, r2
 800a118:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a11e:	1c9a      	adds	r2, r3, #2
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b29a      	uxth	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a136:	e023      	b.n	800a180 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a138:	f7f9 ffac 	bl	8004094 <HAL_GetTick>
 800a13c:	4602      	mov	r2, r0
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	d803      	bhi.n	800a150 <HAL_SPI_Receive+0x2f4>
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14e:	d102      	bne.n	800a156 <HAL_SPI_Receive+0x2fa>
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d114      	bne.n	800a180 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 f8f2 	bl	800a340 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a162:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e0db      	b.n	800a338 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a186:	b29b      	uxth	r3, r3
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f47f af69 	bne.w	800a060 <HAL_SPI_Receive+0x204>
 800a18e:	e0c0      	b.n	800a312 <HAL_SPI_Receive+0x4b6>
 800a190:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d117      	bne.n	800a1da <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1b6:	7812      	ldrb	r2, [r2, #0]
 800a1b8:	b2d2      	uxtb	r2, r2
 800a1ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1c0:	1c5a      	adds	r2, r3, #1
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a1d8:	e094      	b.n	800a304 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	8bfa      	ldrh	r2, [r7, #30]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d946      	bls.n	800a276 <HAL_SPI_Receive+0x41a>
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d041      	beq.n	800a276 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1fe:	7812      	ldrb	r2, [r2, #0]
 800a200:	b2d2      	uxtb	r2, r2
 800a202:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a21a:	7812      	ldrb	r2, [r2, #0]
 800a21c:	b2d2      	uxtb	r2, r2
 800a21e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a236:	7812      	ldrb	r2, [r2, #0]
 800a238:	b2d2      	uxtb	r2, r2
 800a23a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a252:	7812      	ldrb	r2, [r2, #0]
 800a254:	b2d2      	uxtb	r2, r2
 800a256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a268:	b29b      	uxth	r3, r3
 800a26a:	3b04      	subs	r3, #4
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a274:	e046      	b.n	800a304 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d81c      	bhi.n	800a2bc <HAL_SPI_Receive+0x460>
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d017      	beq.n	800a2bc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a298:	7812      	ldrb	r2, [r2, #0]
 800a29a:	b2d2      	uxtb	r2, r2
 800a29c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a2:	1c5a      	adds	r2, r3, #1
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a2ba:	e023      	b.n	800a304 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2bc:	f7f9 feea 	bl	8004094 <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d803      	bhi.n	800a2d4 <HAL_SPI_Receive+0x478>
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d2:	d102      	bne.n	800a2da <HAL_SPI_Receive+0x47e>
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d114      	bne.n	800a304 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 f830 	bl	800a340 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e019      	b.n	800a338 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f47f af41 	bne.w	800a194 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 f814 	bl	800a340 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e000      	b.n	800a338 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a336:	2300      	movs	r3, #0
  }
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3720      	adds	r7, #32
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699a      	ldr	r2, [r3, #24]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f042 0208 	orr.w	r2, r2, #8
 800a35e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	699a      	ldr	r2, [r3, #24]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f042 0210 	orr.w	r2, r2, #16
 800a36e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0201 	bic.w	r2, r2, #1
 800a37e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6919      	ldr	r1, [r3, #16]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	4b3c      	ldr	r3, [pc, #240]	@ (800a47c <SPI_CloseTransfer+0x13c>)
 800a38c:	400b      	ands	r3, r1
 800a38e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	689a      	ldr	r2, [r3, #8]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a39e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d014      	beq.n	800a3d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f003 0320 	and.w	r3, r3, #32
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00f      	beq.n	800a3d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	699a      	ldr	r2, [r3, #24]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f042 0220 	orr.w	r2, r2, #32
 800a3d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d014      	beq.n	800a40c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00f      	beq.n	800a40c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3f2:	f043 0204 	orr.w	r2, r3, #4
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699a      	ldr	r2, [r3, #24]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a40a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00f      	beq.n	800a436 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a41c:	f043 0201 	orr.w	r2, r3, #1
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	699a      	ldr	r2, [r3, #24]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a434:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00f      	beq.n	800a460 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a446:	f043 0208 	orr.w	r2, r3, #8
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	699a      	ldr	r2, [r3, #24]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a45e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a470:	bf00      	nop
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	fffffc90 	.word	0xfffffc90

0800a480 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	4613      	mov	r3, r2
 800a48e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a490:	e010      	b.n	800a4b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a492:	f7f9 fdff 	bl	8004094 <HAL_GetTick>
 800a496:	4602      	mov	r2, r0
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d803      	bhi.n	800a4aa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a8:	d102      	bne.n	800a4b0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e00f      	b.n	800a4d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	695a      	ldr	r2, [r3, #20]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	4013      	ands	r3, r2
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	bf0c      	ite	eq
 800a4c4:	2301      	moveq	r3, #1
 800a4c6:	2300      	movne	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	79fb      	ldrb	r3, [r7, #7]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d0df      	beq.n	800a492 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4e8:	095b      	lsrs	r3, r3, #5
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	3307      	adds	r3, #7
 800a4fa:	08db      	lsrs	r3, r3, #3
 800a4fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	fb02 f303 	mul.w	r3, r2, r3
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e042      	b.n	800a5aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7f9 fa08 	bl	800394c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2224      	movs	r2, #36	@ 0x24
 800a540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f022 0201 	bic.w	r2, r2, #1
 800a552:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fe95 	bl	800b28c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f826 	bl	800a5b4 <UART_SetConfig>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d101      	bne.n	800a572 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e01b      	b.n	800a5aa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a580:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a590:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f042 0201 	orr.w	r2, r2, #1
 800a5a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 ff14 	bl	800b3d0 <UART_CheckIdleState>
 800a5a8:	4603      	mov	r3, r0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
	...

0800a5b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5b8:	b092      	sub	sp, #72	@ 0x48
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	431a      	orrs	r2, r3
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	4bbe      	ldr	r3, [pc, #760]	@ (800a8dc <UART_SetConfig+0x328>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	6812      	ldr	r2, [r2, #0]
 800a5ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5ec:	430b      	orrs	r3, r1
 800a5ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	68da      	ldr	r2, [r3, #12]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4ab3      	ldr	r2, [pc, #716]	@ (800a8e0 <UART_SetConfig+0x32c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d004      	beq.n	800a620 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	6a1b      	ldr	r3, [r3, #32]
 800a61a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a61c:	4313      	orrs	r3, r2
 800a61e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689a      	ldr	r2, [r3, #8]
 800a626:	4baf      	ldr	r3, [pc, #700]	@ (800a8e4 <UART_SetConfig+0x330>)
 800a628:	4013      	ands	r3, r2
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	6812      	ldr	r2, [r2, #0]
 800a62e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a630:	430b      	orrs	r3, r1
 800a632:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63a:	f023 010f 	bic.w	r1, r3, #15
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4aa6      	ldr	r2, [pc, #664]	@ (800a8e8 <UART_SetConfig+0x334>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d177      	bne.n	800a744 <UART_SetConfig+0x190>
 800a654:	4ba5      	ldr	r3, [pc, #660]	@ (800a8ec <UART_SetConfig+0x338>)
 800a656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a658:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a65c:	2b28      	cmp	r3, #40	@ 0x28
 800a65e:	d86d      	bhi.n	800a73c <UART_SetConfig+0x188>
 800a660:	a201      	add	r2, pc, #4	@ (adr r2, 800a668 <UART_SetConfig+0xb4>)
 800a662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a666:	bf00      	nop
 800a668:	0800a70d 	.word	0x0800a70d
 800a66c:	0800a73d 	.word	0x0800a73d
 800a670:	0800a73d 	.word	0x0800a73d
 800a674:	0800a73d 	.word	0x0800a73d
 800a678:	0800a73d 	.word	0x0800a73d
 800a67c:	0800a73d 	.word	0x0800a73d
 800a680:	0800a73d 	.word	0x0800a73d
 800a684:	0800a73d 	.word	0x0800a73d
 800a688:	0800a715 	.word	0x0800a715
 800a68c:	0800a73d 	.word	0x0800a73d
 800a690:	0800a73d 	.word	0x0800a73d
 800a694:	0800a73d 	.word	0x0800a73d
 800a698:	0800a73d 	.word	0x0800a73d
 800a69c:	0800a73d 	.word	0x0800a73d
 800a6a0:	0800a73d 	.word	0x0800a73d
 800a6a4:	0800a73d 	.word	0x0800a73d
 800a6a8:	0800a71d 	.word	0x0800a71d
 800a6ac:	0800a73d 	.word	0x0800a73d
 800a6b0:	0800a73d 	.word	0x0800a73d
 800a6b4:	0800a73d 	.word	0x0800a73d
 800a6b8:	0800a73d 	.word	0x0800a73d
 800a6bc:	0800a73d 	.word	0x0800a73d
 800a6c0:	0800a73d 	.word	0x0800a73d
 800a6c4:	0800a73d 	.word	0x0800a73d
 800a6c8:	0800a725 	.word	0x0800a725
 800a6cc:	0800a73d 	.word	0x0800a73d
 800a6d0:	0800a73d 	.word	0x0800a73d
 800a6d4:	0800a73d 	.word	0x0800a73d
 800a6d8:	0800a73d 	.word	0x0800a73d
 800a6dc:	0800a73d 	.word	0x0800a73d
 800a6e0:	0800a73d 	.word	0x0800a73d
 800a6e4:	0800a73d 	.word	0x0800a73d
 800a6e8:	0800a72d 	.word	0x0800a72d
 800a6ec:	0800a73d 	.word	0x0800a73d
 800a6f0:	0800a73d 	.word	0x0800a73d
 800a6f4:	0800a73d 	.word	0x0800a73d
 800a6f8:	0800a73d 	.word	0x0800a73d
 800a6fc:	0800a73d 	.word	0x0800a73d
 800a700:	0800a73d 	.word	0x0800a73d
 800a704:	0800a73d 	.word	0x0800a73d
 800a708:	0800a735 	.word	0x0800a735
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a712:	e326      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a714:	2304      	movs	r3, #4
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71a:	e322      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a71c:	2308      	movs	r3, #8
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a722:	e31e      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a724:	2310      	movs	r3, #16
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72a:	e31a      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a72c:	2320      	movs	r3, #32
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a732:	e316      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a734:	2340      	movs	r3, #64	@ 0x40
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73a:	e312      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a73c:	2380      	movs	r3, #128	@ 0x80
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e30e      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a69      	ldr	r2, [pc, #420]	@ (800a8f0 <UART_SetConfig+0x33c>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d130      	bne.n	800a7b0 <UART_SetConfig+0x1fc>
 800a74e:	4b67      	ldr	r3, [pc, #412]	@ (800a8ec <UART_SetConfig+0x338>)
 800a750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	2b05      	cmp	r3, #5
 800a758:	d826      	bhi.n	800a7a8 <UART_SetConfig+0x1f4>
 800a75a:	a201      	add	r2, pc, #4	@ (adr r2, 800a760 <UART_SetConfig+0x1ac>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a779 	.word	0x0800a779
 800a764:	0800a781 	.word	0x0800a781
 800a768:	0800a789 	.word	0x0800a789
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a799 	.word	0x0800a799
 800a774:	0800a7a1 	.word	0x0800a7a1
 800a778:	2300      	movs	r3, #0
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77e:	e2f0      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a780:	2304      	movs	r3, #4
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a786:	e2ec      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a788:	2308      	movs	r3, #8
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78e:	e2e8      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a790:	2310      	movs	r3, #16
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a796:	e2e4      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a798:	2320      	movs	r3, #32
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79e:	e2e0      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a7a0:	2340      	movs	r3, #64	@ 0x40
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a6:	e2dc      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a7a8:	2380      	movs	r3, #128	@ 0x80
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ae:	e2d8      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a4f      	ldr	r2, [pc, #316]	@ (800a8f4 <UART_SetConfig+0x340>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d130      	bne.n	800a81c <UART_SetConfig+0x268>
 800a7ba:	4b4c      	ldr	r3, [pc, #304]	@ (800a8ec <UART_SetConfig+0x338>)
 800a7bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7be:	f003 0307 	and.w	r3, r3, #7
 800a7c2:	2b05      	cmp	r3, #5
 800a7c4:	d826      	bhi.n	800a814 <UART_SetConfig+0x260>
 800a7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7cc <UART_SetConfig+0x218>)
 800a7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7cc:	0800a7e5 	.word	0x0800a7e5
 800a7d0:	0800a7ed 	.word	0x0800a7ed
 800a7d4:	0800a7f5 	.word	0x0800a7f5
 800a7d8:	0800a7fd 	.word	0x0800a7fd
 800a7dc:	0800a805 	.word	0x0800a805
 800a7e0:	0800a80d 	.word	0x0800a80d
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ea:	e2ba      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a7ec:	2304      	movs	r3, #4
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f2:	e2b6      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a7f4:	2308      	movs	r3, #8
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fa:	e2b2      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a802:	e2ae      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a804:	2320      	movs	r3, #32
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80a:	e2aa      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a80c:	2340      	movs	r3, #64	@ 0x40
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a812:	e2a6      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a814:	2380      	movs	r3, #128	@ 0x80
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81a:	e2a2      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a35      	ldr	r2, [pc, #212]	@ (800a8f8 <UART_SetConfig+0x344>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d130      	bne.n	800a888 <UART_SetConfig+0x2d4>
 800a826:	4b31      	ldr	r3, [pc, #196]	@ (800a8ec <UART_SetConfig+0x338>)
 800a828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a82a:	f003 0307 	and.w	r3, r3, #7
 800a82e:	2b05      	cmp	r3, #5
 800a830:	d826      	bhi.n	800a880 <UART_SetConfig+0x2cc>
 800a832:	a201      	add	r2, pc, #4	@ (adr r2, 800a838 <UART_SetConfig+0x284>)
 800a834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a838:	0800a851 	.word	0x0800a851
 800a83c:	0800a859 	.word	0x0800a859
 800a840:	0800a861 	.word	0x0800a861
 800a844:	0800a869 	.word	0x0800a869
 800a848:	0800a871 	.word	0x0800a871
 800a84c:	0800a879 	.word	0x0800a879
 800a850:	2300      	movs	r3, #0
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a856:	e284      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a858:	2304      	movs	r3, #4
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85e:	e280      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a860:	2308      	movs	r3, #8
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a866:	e27c      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a868:	2310      	movs	r3, #16
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86e:	e278      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a870:	2320      	movs	r3, #32
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a876:	e274      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a878:	2340      	movs	r3, #64	@ 0x40
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87e:	e270      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a880:	2380      	movs	r3, #128	@ 0x80
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a886:	e26c      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a1b      	ldr	r2, [pc, #108]	@ (800a8fc <UART_SetConfig+0x348>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d142      	bne.n	800a918 <UART_SetConfig+0x364>
 800a892:	4b16      	ldr	r3, [pc, #88]	@ (800a8ec <UART_SetConfig+0x338>)
 800a894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a896:	f003 0307 	and.w	r3, r3, #7
 800a89a:	2b05      	cmp	r3, #5
 800a89c:	d838      	bhi.n	800a910 <UART_SetConfig+0x35c>
 800a89e:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a4 <UART_SetConfig+0x2f0>)
 800a8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a4:	0800a8bd 	.word	0x0800a8bd
 800a8a8:	0800a8c5 	.word	0x0800a8c5
 800a8ac:	0800a8cd 	.word	0x0800a8cd
 800a8b0:	0800a8d5 	.word	0x0800a8d5
 800a8b4:	0800a901 	.word	0x0800a901
 800a8b8:	0800a909 	.word	0x0800a909
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c2:	e24e      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a8c4:	2304      	movs	r3, #4
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ca:	e24a      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d2:	e246      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a8d4:	2310      	movs	r3, #16
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8da:	e242      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a8dc:	cfff69f3 	.word	0xcfff69f3
 800a8e0:	58000c00 	.word	0x58000c00
 800a8e4:	11fff4ff 	.word	0x11fff4ff
 800a8e8:	40011000 	.word	0x40011000
 800a8ec:	58024400 	.word	0x58024400
 800a8f0:	40004400 	.word	0x40004400
 800a8f4:	40004800 	.word	0x40004800
 800a8f8:	40004c00 	.word	0x40004c00
 800a8fc:	40005000 	.word	0x40005000
 800a900:	2320      	movs	r3, #32
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a906:	e22c      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a908:	2340      	movs	r3, #64	@ 0x40
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90e:	e228      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a910:	2380      	movs	r3, #128	@ 0x80
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a916:	e224      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4ab1      	ldr	r2, [pc, #708]	@ (800abe4 <UART_SetConfig+0x630>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d176      	bne.n	800aa10 <UART_SetConfig+0x45c>
 800a922:	4bb1      	ldr	r3, [pc, #708]	@ (800abe8 <UART_SetConfig+0x634>)
 800a924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a926:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a92a:	2b28      	cmp	r3, #40	@ 0x28
 800a92c:	d86c      	bhi.n	800aa08 <UART_SetConfig+0x454>
 800a92e:	a201      	add	r2, pc, #4	@ (adr r2, 800a934 <UART_SetConfig+0x380>)
 800a930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a934:	0800a9d9 	.word	0x0800a9d9
 800a938:	0800aa09 	.word	0x0800aa09
 800a93c:	0800aa09 	.word	0x0800aa09
 800a940:	0800aa09 	.word	0x0800aa09
 800a944:	0800aa09 	.word	0x0800aa09
 800a948:	0800aa09 	.word	0x0800aa09
 800a94c:	0800aa09 	.word	0x0800aa09
 800a950:	0800aa09 	.word	0x0800aa09
 800a954:	0800a9e1 	.word	0x0800a9e1
 800a958:	0800aa09 	.word	0x0800aa09
 800a95c:	0800aa09 	.word	0x0800aa09
 800a960:	0800aa09 	.word	0x0800aa09
 800a964:	0800aa09 	.word	0x0800aa09
 800a968:	0800aa09 	.word	0x0800aa09
 800a96c:	0800aa09 	.word	0x0800aa09
 800a970:	0800aa09 	.word	0x0800aa09
 800a974:	0800a9e9 	.word	0x0800a9e9
 800a978:	0800aa09 	.word	0x0800aa09
 800a97c:	0800aa09 	.word	0x0800aa09
 800a980:	0800aa09 	.word	0x0800aa09
 800a984:	0800aa09 	.word	0x0800aa09
 800a988:	0800aa09 	.word	0x0800aa09
 800a98c:	0800aa09 	.word	0x0800aa09
 800a990:	0800aa09 	.word	0x0800aa09
 800a994:	0800a9f1 	.word	0x0800a9f1
 800a998:	0800aa09 	.word	0x0800aa09
 800a99c:	0800aa09 	.word	0x0800aa09
 800a9a0:	0800aa09 	.word	0x0800aa09
 800a9a4:	0800aa09 	.word	0x0800aa09
 800a9a8:	0800aa09 	.word	0x0800aa09
 800a9ac:	0800aa09 	.word	0x0800aa09
 800a9b0:	0800aa09 	.word	0x0800aa09
 800a9b4:	0800a9f9 	.word	0x0800a9f9
 800a9b8:	0800aa09 	.word	0x0800aa09
 800a9bc:	0800aa09 	.word	0x0800aa09
 800a9c0:	0800aa09 	.word	0x0800aa09
 800a9c4:	0800aa09 	.word	0x0800aa09
 800a9c8:	0800aa09 	.word	0x0800aa09
 800a9cc:	0800aa09 	.word	0x0800aa09
 800a9d0:	0800aa09 	.word	0x0800aa09
 800a9d4:	0800aa01 	.word	0x0800aa01
 800a9d8:	2301      	movs	r3, #1
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9de:	e1c0      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a9e0:	2304      	movs	r3, #4
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e6:	e1bc      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a9e8:	2308      	movs	r3, #8
 800a9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ee:	e1b8      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a9f0:	2310      	movs	r3, #16
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f6:	e1b4      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800a9f8:	2320      	movs	r3, #32
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fe:	e1b0      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aa00:	2340      	movs	r3, #64	@ 0x40
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa06:	e1ac      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aa08:	2380      	movs	r3, #128	@ 0x80
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa0e:	e1a8      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a75      	ldr	r2, [pc, #468]	@ (800abec <UART_SetConfig+0x638>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d130      	bne.n	800aa7c <UART_SetConfig+0x4c8>
 800aa1a:	4b73      	ldr	r3, [pc, #460]	@ (800abe8 <UART_SetConfig+0x634>)
 800aa1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa1e:	f003 0307 	and.w	r3, r3, #7
 800aa22:	2b05      	cmp	r3, #5
 800aa24:	d826      	bhi.n	800aa74 <UART_SetConfig+0x4c0>
 800aa26:	a201      	add	r2, pc, #4	@ (adr r2, 800aa2c <UART_SetConfig+0x478>)
 800aa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2c:	0800aa45 	.word	0x0800aa45
 800aa30:	0800aa4d 	.word	0x0800aa4d
 800aa34:	0800aa55 	.word	0x0800aa55
 800aa38:	0800aa5d 	.word	0x0800aa5d
 800aa3c:	0800aa65 	.word	0x0800aa65
 800aa40:	0800aa6d 	.word	0x0800aa6d
 800aa44:	2300      	movs	r3, #0
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4a:	e18a      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aa4c:	2304      	movs	r3, #4
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa52:	e186      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aa54:	2308      	movs	r3, #8
 800aa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5a:	e182      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aa5c:	2310      	movs	r3, #16
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa62:	e17e      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aa64:	2320      	movs	r3, #32
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6a:	e17a      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aa6c:	2340      	movs	r3, #64	@ 0x40
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa72:	e176      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aa74:	2380      	movs	r3, #128	@ 0x80
 800aa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa7a:	e172      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a5b      	ldr	r2, [pc, #364]	@ (800abf0 <UART_SetConfig+0x63c>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d130      	bne.n	800aae8 <UART_SetConfig+0x534>
 800aa86:	4b58      	ldr	r3, [pc, #352]	@ (800abe8 <UART_SetConfig+0x634>)
 800aa88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa8a:	f003 0307 	and.w	r3, r3, #7
 800aa8e:	2b05      	cmp	r3, #5
 800aa90:	d826      	bhi.n	800aae0 <UART_SetConfig+0x52c>
 800aa92:	a201      	add	r2, pc, #4	@ (adr r2, 800aa98 <UART_SetConfig+0x4e4>)
 800aa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa98:	0800aab1 	.word	0x0800aab1
 800aa9c:	0800aab9 	.word	0x0800aab9
 800aaa0:	0800aac1 	.word	0x0800aac1
 800aaa4:	0800aac9 	.word	0x0800aac9
 800aaa8:	0800aad1 	.word	0x0800aad1
 800aaac:	0800aad9 	.word	0x0800aad9
 800aab0:	2300      	movs	r3, #0
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab6:	e154      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aab8:	2304      	movs	r3, #4
 800aaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aabe:	e150      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aac0:	2308      	movs	r3, #8
 800aac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac6:	e14c      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aac8:	2310      	movs	r3, #16
 800aaca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aace:	e148      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aad0:	2320      	movs	r3, #32
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad6:	e144      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aad8:	2340      	movs	r3, #64	@ 0x40
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aade:	e140      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aae0:	2380      	movs	r3, #128	@ 0x80
 800aae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae6:	e13c      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a41      	ldr	r2, [pc, #260]	@ (800abf4 <UART_SetConfig+0x640>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	f040 8082 	bne.w	800abf8 <UART_SetConfig+0x644>
 800aaf4:	4b3c      	ldr	r3, [pc, #240]	@ (800abe8 <UART_SetConfig+0x634>)
 800aaf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aafc:	2b28      	cmp	r3, #40	@ 0x28
 800aafe:	d86d      	bhi.n	800abdc <UART_SetConfig+0x628>
 800ab00:	a201      	add	r2, pc, #4	@ (adr r2, 800ab08 <UART_SetConfig+0x554>)
 800ab02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab06:	bf00      	nop
 800ab08:	0800abad 	.word	0x0800abad
 800ab0c:	0800abdd 	.word	0x0800abdd
 800ab10:	0800abdd 	.word	0x0800abdd
 800ab14:	0800abdd 	.word	0x0800abdd
 800ab18:	0800abdd 	.word	0x0800abdd
 800ab1c:	0800abdd 	.word	0x0800abdd
 800ab20:	0800abdd 	.word	0x0800abdd
 800ab24:	0800abdd 	.word	0x0800abdd
 800ab28:	0800abb5 	.word	0x0800abb5
 800ab2c:	0800abdd 	.word	0x0800abdd
 800ab30:	0800abdd 	.word	0x0800abdd
 800ab34:	0800abdd 	.word	0x0800abdd
 800ab38:	0800abdd 	.word	0x0800abdd
 800ab3c:	0800abdd 	.word	0x0800abdd
 800ab40:	0800abdd 	.word	0x0800abdd
 800ab44:	0800abdd 	.word	0x0800abdd
 800ab48:	0800abbd 	.word	0x0800abbd
 800ab4c:	0800abdd 	.word	0x0800abdd
 800ab50:	0800abdd 	.word	0x0800abdd
 800ab54:	0800abdd 	.word	0x0800abdd
 800ab58:	0800abdd 	.word	0x0800abdd
 800ab5c:	0800abdd 	.word	0x0800abdd
 800ab60:	0800abdd 	.word	0x0800abdd
 800ab64:	0800abdd 	.word	0x0800abdd
 800ab68:	0800abc5 	.word	0x0800abc5
 800ab6c:	0800abdd 	.word	0x0800abdd
 800ab70:	0800abdd 	.word	0x0800abdd
 800ab74:	0800abdd 	.word	0x0800abdd
 800ab78:	0800abdd 	.word	0x0800abdd
 800ab7c:	0800abdd 	.word	0x0800abdd
 800ab80:	0800abdd 	.word	0x0800abdd
 800ab84:	0800abdd 	.word	0x0800abdd
 800ab88:	0800abcd 	.word	0x0800abcd
 800ab8c:	0800abdd 	.word	0x0800abdd
 800ab90:	0800abdd 	.word	0x0800abdd
 800ab94:	0800abdd 	.word	0x0800abdd
 800ab98:	0800abdd 	.word	0x0800abdd
 800ab9c:	0800abdd 	.word	0x0800abdd
 800aba0:	0800abdd 	.word	0x0800abdd
 800aba4:	0800abdd 	.word	0x0800abdd
 800aba8:	0800abd5 	.word	0x0800abd5
 800abac:	2301      	movs	r3, #1
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb2:	e0d6      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800abb4:	2304      	movs	r3, #4
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abba:	e0d2      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800abbc:	2308      	movs	r3, #8
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc2:	e0ce      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800abc4:	2310      	movs	r3, #16
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abca:	e0ca      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800abcc:	2320      	movs	r3, #32
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd2:	e0c6      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800abd4:	2340      	movs	r3, #64	@ 0x40
 800abd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abda:	e0c2      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800abdc:	2380      	movs	r3, #128	@ 0x80
 800abde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abe2:	e0be      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800abe4:	40011400 	.word	0x40011400
 800abe8:	58024400 	.word	0x58024400
 800abec:	40007800 	.word	0x40007800
 800abf0:	40007c00 	.word	0x40007c00
 800abf4:	40011800 	.word	0x40011800
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4aad      	ldr	r2, [pc, #692]	@ (800aeb4 <UART_SetConfig+0x900>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d176      	bne.n	800acf0 <UART_SetConfig+0x73c>
 800ac02:	4bad      	ldr	r3, [pc, #692]	@ (800aeb8 <UART_SetConfig+0x904>)
 800ac04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac0a:	2b28      	cmp	r3, #40	@ 0x28
 800ac0c:	d86c      	bhi.n	800ace8 <UART_SetConfig+0x734>
 800ac0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac14 <UART_SetConfig+0x660>)
 800ac10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac14:	0800acb9 	.word	0x0800acb9
 800ac18:	0800ace9 	.word	0x0800ace9
 800ac1c:	0800ace9 	.word	0x0800ace9
 800ac20:	0800ace9 	.word	0x0800ace9
 800ac24:	0800ace9 	.word	0x0800ace9
 800ac28:	0800ace9 	.word	0x0800ace9
 800ac2c:	0800ace9 	.word	0x0800ace9
 800ac30:	0800ace9 	.word	0x0800ace9
 800ac34:	0800acc1 	.word	0x0800acc1
 800ac38:	0800ace9 	.word	0x0800ace9
 800ac3c:	0800ace9 	.word	0x0800ace9
 800ac40:	0800ace9 	.word	0x0800ace9
 800ac44:	0800ace9 	.word	0x0800ace9
 800ac48:	0800ace9 	.word	0x0800ace9
 800ac4c:	0800ace9 	.word	0x0800ace9
 800ac50:	0800ace9 	.word	0x0800ace9
 800ac54:	0800acc9 	.word	0x0800acc9
 800ac58:	0800ace9 	.word	0x0800ace9
 800ac5c:	0800ace9 	.word	0x0800ace9
 800ac60:	0800ace9 	.word	0x0800ace9
 800ac64:	0800ace9 	.word	0x0800ace9
 800ac68:	0800ace9 	.word	0x0800ace9
 800ac6c:	0800ace9 	.word	0x0800ace9
 800ac70:	0800ace9 	.word	0x0800ace9
 800ac74:	0800acd1 	.word	0x0800acd1
 800ac78:	0800ace9 	.word	0x0800ace9
 800ac7c:	0800ace9 	.word	0x0800ace9
 800ac80:	0800ace9 	.word	0x0800ace9
 800ac84:	0800ace9 	.word	0x0800ace9
 800ac88:	0800ace9 	.word	0x0800ace9
 800ac8c:	0800ace9 	.word	0x0800ace9
 800ac90:	0800ace9 	.word	0x0800ace9
 800ac94:	0800acd9 	.word	0x0800acd9
 800ac98:	0800ace9 	.word	0x0800ace9
 800ac9c:	0800ace9 	.word	0x0800ace9
 800aca0:	0800ace9 	.word	0x0800ace9
 800aca4:	0800ace9 	.word	0x0800ace9
 800aca8:	0800ace9 	.word	0x0800ace9
 800acac:	0800ace9 	.word	0x0800ace9
 800acb0:	0800ace9 	.word	0x0800ace9
 800acb4:	0800ace1 	.word	0x0800ace1
 800acb8:	2301      	movs	r3, #1
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acbe:	e050      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800acc0:	2304      	movs	r3, #4
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc6:	e04c      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800acc8:	2308      	movs	r3, #8
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acce:	e048      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800acd0:	2310      	movs	r3, #16
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd6:	e044      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800acd8:	2320      	movs	r3, #32
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acde:	e040      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800ace0:	2340      	movs	r3, #64	@ 0x40
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace6:	e03c      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800ace8:	2380      	movs	r3, #128	@ 0x80
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acee:	e038      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a71      	ldr	r2, [pc, #452]	@ (800aebc <UART_SetConfig+0x908>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d130      	bne.n	800ad5c <UART_SetConfig+0x7a8>
 800acfa:	4b6f      	ldr	r3, [pc, #444]	@ (800aeb8 <UART_SetConfig+0x904>)
 800acfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acfe:	f003 0307 	and.w	r3, r3, #7
 800ad02:	2b05      	cmp	r3, #5
 800ad04:	d826      	bhi.n	800ad54 <UART_SetConfig+0x7a0>
 800ad06:	a201      	add	r2, pc, #4	@ (adr r2, 800ad0c <UART_SetConfig+0x758>)
 800ad08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0c:	0800ad25 	.word	0x0800ad25
 800ad10:	0800ad2d 	.word	0x0800ad2d
 800ad14:	0800ad35 	.word	0x0800ad35
 800ad18:	0800ad3d 	.word	0x0800ad3d
 800ad1c:	0800ad45 	.word	0x0800ad45
 800ad20:	0800ad4d 	.word	0x0800ad4d
 800ad24:	2302      	movs	r3, #2
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e01a      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800ad2c:	2304      	movs	r3, #4
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e016      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800ad34:	2308      	movs	r3, #8
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e012      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800ad3c:	2310      	movs	r3, #16
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e00e      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800ad44:	2320      	movs	r3, #32
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4a:	e00a      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800ad4c:	2340      	movs	r3, #64	@ 0x40
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad52:	e006      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800ad54:	2380      	movs	r3, #128	@ 0x80
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad5a:	e002      	b.n	800ad62 <UART_SetConfig+0x7ae>
 800ad5c:	2380      	movs	r3, #128	@ 0x80
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a55      	ldr	r2, [pc, #340]	@ (800aebc <UART_SetConfig+0x908>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	f040 80f8 	bne.w	800af5e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad72:	2b20      	cmp	r3, #32
 800ad74:	dc46      	bgt.n	800ae04 <UART_SetConfig+0x850>
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	db75      	blt.n	800ae66 <UART_SetConfig+0x8b2>
 800ad7a:	3b02      	subs	r3, #2
 800ad7c:	2b1e      	cmp	r3, #30
 800ad7e:	d872      	bhi.n	800ae66 <UART_SetConfig+0x8b2>
 800ad80:	a201      	add	r2, pc, #4	@ (adr r2, 800ad88 <UART_SetConfig+0x7d4>)
 800ad82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad86:	bf00      	nop
 800ad88:	0800ae0b 	.word	0x0800ae0b
 800ad8c:	0800ae67 	.word	0x0800ae67
 800ad90:	0800ae13 	.word	0x0800ae13
 800ad94:	0800ae67 	.word	0x0800ae67
 800ad98:	0800ae67 	.word	0x0800ae67
 800ad9c:	0800ae67 	.word	0x0800ae67
 800ada0:	0800ae23 	.word	0x0800ae23
 800ada4:	0800ae67 	.word	0x0800ae67
 800ada8:	0800ae67 	.word	0x0800ae67
 800adac:	0800ae67 	.word	0x0800ae67
 800adb0:	0800ae67 	.word	0x0800ae67
 800adb4:	0800ae67 	.word	0x0800ae67
 800adb8:	0800ae67 	.word	0x0800ae67
 800adbc:	0800ae67 	.word	0x0800ae67
 800adc0:	0800ae33 	.word	0x0800ae33
 800adc4:	0800ae67 	.word	0x0800ae67
 800adc8:	0800ae67 	.word	0x0800ae67
 800adcc:	0800ae67 	.word	0x0800ae67
 800add0:	0800ae67 	.word	0x0800ae67
 800add4:	0800ae67 	.word	0x0800ae67
 800add8:	0800ae67 	.word	0x0800ae67
 800addc:	0800ae67 	.word	0x0800ae67
 800ade0:	0800ae67 	.word	0x0800ae67
 800ade4:	0800ae67 	.word	0x0800ae67
 800ade8:	0800ae67 	.word	0x0800ae67
 800adec:	0800ae67 	.word	0x0800ae67
 800adf0:	0800ae67 	.word	0x0800ae67
 800adf4:	0800ae67 	.word	0x0800ae67
 800adf8:	0800ae67 	.word	0x0800ae67
 800adfc:	0800ae67 	.word	0x0800ae67
 800ae00:	0800ae59 	.word	0x0800ae59
 800ae04:	2b40      	cmp	r3, #64	@ 0x40
 800ae06:	d02a      	beq.n	800ae5e <UART_SetConfig+0x8aa>
 800ae08:	e02d      	b.n	800ae66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae0a:	f7fc fbef 	bl	80075ec <HAL_RCCEx_GetD3PCLK1Freq>
 800ae0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae10:	e02f      	b.n	800ae72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fc fbfe 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae20:	e027      	b.n	800ae72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae22:	f107 0318 	add.w	r3, r7, #24
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fc fd4a 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae30:	e01f      	b.n	800ae72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae32:	4b21      	ldr	r3, [pc, #132]	@ (800aeb8 <UART_SetConfig+0x904>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 0320 	and.w	r3, r3, #32
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d009      	beq.n	800ae52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae3e:	4b1e      	ldr	r3, [pc, #120]	@ (800aeb8 <UART_SetConfig+0x904>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	08db      	lsrs	r3, r3, #3
 800ae44:	f003 0303 	and.w	r3, r3, #3
 800ae48:	4a1d      	ldr	r2, [pc, #116]	@ (800aec0 <UART_SetConfig+0x90c>)
 800ae4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae50:	e00f      	b.n	800ae72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ae52:	4b1b      	ldr	r3, [pc, #108]	@ (800aec0 <UART_SetConfig+0x90c>)
 800ae54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae56:	e00c      	b.n	800ae72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae58:	4b1a      	ldr	r3, [pc, #104]	@ (800aec4 <UART_SetConfig+0x910>)
 800ae5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae5c:	e009      	b.n	800ae72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae64:	e005      	b.n	800ae72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ae66:	2300      	movs	r3, #0
 800ae68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ae70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f000 81ee 	beq.w	800b256 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae7e:	4a12      	ldr	r2, [pc, #72]	@ (800aec8 <UART_SetConfig+0x914>)
 800ae80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae84:	461a      	mov	r2, r3
 800ae86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae8c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	4613      	mov	r3, r2
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	4413      	add	r3, r2
 800ae98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d305      	bcc.n	800aeaa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d910      	bls.n	800aecc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aeb0:	e1d1      	b.n	800b256 <UART_SetConfig+0xca2>
 800aeb2:	bf00      	nop
 800aeb4:	40011c00 	.word	0x40011c00
 800aeb8:	58024400 	.word	0x58024400
 800aebc:	58000c00 	.word	0x58000c00
 800aec0:	03d09000 	.word	0x03d09000
 800aec4:	003d0900 	.word	0x003d0900
 800aec8:	08011f90 	.word	0x08011f90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aece:	2200      	movs	r2, #0
 800aed0:	60bb      	str	r3, [r7, #8]
 800aed2:	60fa      	str	r2, [r7, #12]
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aed8:	4ac0      	ldr	r2, [pc, #768]	@ (800b1dc <UART_SetConfig+0xc28>)
 800aeda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aede:	b29b      	uxth	r3, r3
 800aee0:	2200      	movs	r2, #0
 800aee2:	603b      	str	r3, [r7, #0]
 800aee4:	607a      	str	r2, [r7, #4]
 800aee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aeee:	f7f5 fc23 	bl	8000738 <__aeabi_uldivmod>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4610      	mov	r0, r2
 800aef8:	4619      	mov	r1, r3
 800aefa:	f04f 0200 	mov.w	r2, #0
 800aefe:	f04f 0300 	mov.w	r3, #0
 800af02:	020b      	lsls	r3, r1, #8
 800af04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af08:	0202      	lsls	r2, r0, #8
 800af0a:	6979      	ldr	r1, [r7, #20]
 800af0c:	6849      	ldr	r1, [r1, #4]
 800af0e:	0849      	lsrs	r1, r1, #1
 800af10:	2000      	movs	r0, #0
 800af12:	460c      	mov	r4, r1
 800af14:	4605      	mov	r5, r0
 800af16:	eb12 0804 	adds.w	r8, r2, r4
 800af1a:	eb43 0905 	adc.w	r9, r3, r5
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	469a      	mov	sl, r3
 800af26:	4693      	mov	fp, r2
 800af28:	4652      	mov	r2, sl
 800af2a:	465b      	mov	r3, fp
 800af2c:	4640      	mov	r0, r8
 800af2e:	4649      	mov	r1, r9
 800af30:	f7f5 fc02 	bl	8000738 <__aeabi_uldivmod>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4613      	mov	r3, r2
 800af3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af42:	d308      	bcc.n	800af56 <UART_SetConfig+0x9a2>
 800af44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af4a:	d204      	bcs.n	800af56 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af52:	60da      	str	r2, [r3, #12]
 800af54:	e17f      	b.n	800b256 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af5c:	e17b      	b.n	800b256 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af66:	f040 80bd 	bne.w	800b0e4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800af6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800af6e:	2b20      	cmp	r3, #32
 800af70:	dc48      	bgt.n	800b004 <UART_SetConfig+0xa50>
 800af72:	2b00      	cmp	r3, #0
 800af74:	db7b      	blt.n	800b06e <UART_SetConfig+0xaba>
 800af76:	2b20      	cmp	r3, #32
 800af78:	d879      	bhi.n	800b06e <UART_SetConfig+0xaba>
 800af7a:	a201      	add	r2, pc, #4	@ (adr r2, 800af80 <UART_SetConfig+0x9cc>)
 800af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af80:	0800b00b 	.word	0x0800b00b
 800af84:	0800b013 	.word	0x0800b013
 800af88:	0800b06f 	.word	0x0800b06f
 800af8c:	0800b06f 	.word	0x0800b06f
 800af90:	0800b01b 	.word	0x0800b01b
 800af94:	0800b06f 	.word	0x0800b06f
 800af98:	0800b06f 	.word	0x0800b06f
 800af9c:	0800b06f 	.word	0x0800b06f
 800afa0:	0800b02b 	.word	0x0800b02b
 800afa4:	0800b06f 	.word	0x0800b06f
 800afa8:	0800b06f 	.word	0x0800b06f
 800afac:	0800b06f 	.word	0x0800b06f
 800afb0:	0800b06f 	.word	0x0800b06f
 800afb4:	0800b06f 	.word	0x0800b06f
 800afb8:	0800b06f 	.word	0x0800b06f
 800afbc:	0800b06f 	.word	0x0800b06f
 800afc0:	0800b03b 	.word	0x0800b03b
 800afc4:	0800b06f 	.word	0x0800b06f
 800afc8:	0800b06f 	.word	0x0800b06f
 800afcc:	0800b06f 	.word	0x0800b06f
 800afd0:	0800b06f 	.word	0x0800b06f
 800afd4:	0800b06f 	.word	0x0800b06f
 800afd8:	0800b06f 	.word	0x0800b06f
 800afdc:	0800b06f 	.word	0x0800b06f
 800afe0:	0800b06f 	.word	0x0800b06f
 800afe4:	0800b06f 	.word	0x0800b06f
 800afe8:	0800b06f 	.word	0x0800b06f
 800afec:	0800b06f 	.word	0x0800b06f
 800aff0:	0800b06f 	.word	0x0800b06f
 800aff4:	0800b06f 	.word	0x0800b06f
 800aff8:	0800b06f 	.word	0x0800b06f
 800affc:	0800b06f 	.word	0x0800b06f
 800b000:	0800b061 	.word	0x0800b061
 800b004:	2b40      	cmp	r3, #64	@ 0x40
 800b006:	d02e      	beq.n	800b066 <UART_SetConfig+0xab2>
 800b008:	e031      	b.n	800b06e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b00a:	f7fa fc51 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 800b00e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b010:	e033      	b.n	800b07a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b012:	f7fa fc63 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 800b016:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b018:	e02f      	b.n	800b07a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b01a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fc fafa 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b028:	e027      	b.n	800b07a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b02a:	f107 0318 	add.w	r3, r7, #24
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fc fc46 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b038:	e01f      	b.n	800b07a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b03a:	4b69      	ldr	r3, [pc, #420]	@ (800b1e0 <UART_SetConfig+0xc2c>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0320 	and.w	r3, r3, #32
 800b042:	2b00      	cmp	r3, #0
 800b044:	d009      	beq.n	800b05a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b046:	4b66      	ldr	r3, [pc, #408]	@ (800b1e0 <UART_SetConfig+0xc2c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	08db      	lsrs	r3, r3, #3
 800b04c:	f003 0303 	and.w	r3, r3, #3
 800b050:	4a64      	ldr	r2, [pc, #400]	@ (800b1e4 <UART_SetConfig+0xc30>)
 800b052:	fa22 f303 	lsr.w	r3, r2, r3
 800b056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b058:	e00f      	b.n	800b07a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b05a:	4b62      	ldr	r3, [pc, #392]	@ (800b1e4 <UART_SetConfig+0xc30>)
 800b05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b05e:	e00c      	b.n	800b07a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b060:	4b61      	ldr	r3, [pc, #388]	@ (800b1e8 <UART_SetConfig+0xc34>)
 800b062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b064:	e009      	b.n	800b07a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b06c:	e005      	b.n	800b07a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 80ea 	beq.w	800b256 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b086:	4a55      	ldr	r2, [pc, #340]	@ (800b1dc <UART_SetConfig+0xc28>)
 800b088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b08c:	461a      	mov	r2, r3
 800b08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b090:	fbb3 f3f2 	udiv	r3, r3, r2
 800b094:	005a      	lsls	r2, r3, #1
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	085b      	lsrs	r3, r3, #1
 800b09c:	441a      	add	r2, r3
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0aa:	2b0f      	cmp	r3, #15
 800b0ac:	d916      	bls.n	800b0dc <UART_SetConfig+0xb28>
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0b4:	d212      	bcs.n	800b0dc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	f023 030f 	bic.w	r3, r3, #15
 800b0be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c2:	085b      	lsrs	r3, r3, #1
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	f003 0307 	and.w	r3, r3, #7
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b0d8:	60da      	str	r2, [r3, #12]
 800b0da:	e0bc      	b.n	800b256 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b0e2:	e0b8      	b.n	800b256 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b0e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b0e8:	2b20      	cmp	r3, #32
 800b0ea:	dc4b      	bgt.n	800b184 <UART_SetConfig+0xbd0>
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f2c0 8087 	blt.w	800b200 <UART_SetConfig+0xc4c>
 800b0f2:	2b20      	cmp	r3, #32
 800b0f4:	f200 8084 	bhi.w	800b200 <UART_SetConfig+0xc4c>
 800b0f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b100 <UART_SetConfig+0xb4c>)
 800b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b18b 	.word	0x0800b18b
 800b104:	0800b193 	.word	0x0800b193
 800b108:	0800b201 	.word	0x0800b201
 800b10c:	0800b201 	.word	0x0800b201
 800b110:	0800b19b 	.word	0x0800b19b
 800b114:	0800b201 	.word	0x0800b201
 800b118:	0800b201 	.word	0x0800b201
 800b11c:	0800b201 	.word	0x0800b201
 800b120:	0800b1ab 	.word	0x0800b1ab
 800b124:	0800b201 	.word	0x0800b201
 800b128:	0800b201 	.word	0x0800b201
 800b12c:	0800b201 	.word	0x0800b201
 800b130:	0800b201 	.word	0x0800b201
 800b134:	0800b201 	.word	0x0800b201
 800b138:	0800b201 	.word	0x0800b201
 800b13c:	0800b201 	.word	0x0800b201
 800b140:	0800b1bb 	.word	0x0800b1bb
 800b144:	0800b201 	.word	0x0800b201
 800b148:	0800b201 	.word	0x0800b201
 800b14c:	0800b201 	.word	0x0800b201
 800b150:	0800b201 	.word	0x0800b201
 800b154:	0800b201 	.word	0x0800b201
 800b158:	0800b201 	.word	0x0800b201
 800b15c:	0800b201 	.word	0x0800b201
 800b160:	0800b201 	.word	0x0800b201
 800b164:	0800b201 	.word	0x0800b201
 800b168:	0800b201 	.word	0x0800b201
 800b16c:	0800b201 	.word	0x0800b201
 800b170:	0800b201 	.word	0x0800b201
 800b174:	0800b201 	.word	0x0800b201
 800b178:	0800b201 	.word	0x0800b201
 800b17c:	0800b201 	.word	0x0800b201
 800b180:	0800b1f3 	.word	0x0800b1f3
 800b184:	2b40      	cmp	r3, #64	@ 0x40
 800b186:	d037      	beq.n	800b1f8 <UART_SetConfig+0xc44>
 800b188:	e03a      	b.n	800b200 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b18a:	f7fa fb91 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 800b18e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b190:	e03c      	b.n	800b20c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b192:	f7fa fba3 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 800b196:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b198:	e038      	b.n	800b20c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fc fa3a 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1a8:	e030      	b.n	800b20c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1aa:	f107 0318 	add.w	r3, r7, #24
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fc fb86 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b8:	e028      	b.n	800b20c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1ba:	4b09      	ldr	r3, [pc, #36]	@ (800b1e0 <UART_SetConfig+0xc2c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 0320 	and.w	r3, r3, #32
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d012      	beq.n	800b1ec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1c6:	4b06      	ldr	r3, [pc, #24]	@ (800b1e0 <UART_SetConfig+0xc2c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	08db      	lsrs	r3, r3, #3
 800b1cc:	f003 0303 	and.w	r3, r3, #3
 800b1d0:	4a04      	ldr	r2, [pc, #16]	@ (800b1e4 <UART_SetConfig+0xc30>)
 800b1d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1d8:	e018      	b.n	800b20c <UART_SetConfig+0xc58>
 800b1da:	bf00      	nop
 800b1dc:	08011f90 	.word	0x08011f90
 800b1e0:	58024400 	.word	0x58024400
 800b1e4:	03d09000 	.word	0x03d09000
 800b1e8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b1ec:	4b24      	ldr	r3, [pc, #144]	@ (800b280 <UART_SetConfig+0xccc>)
 800b1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1f0:	e00c      	b.n	800b20c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1f2:	4b24      	ldr	r3, [pc, #144]	@ (800b284 <UART_SetConfig+0xcd0>)
 800b1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1f6:	e009      	b.n	800b20c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1fe:	e005      	b.n	800b20c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b200:	2300      	movs	r3, #0
 800b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b20a:	bf00      	nop
    }

    if (pclk != 0U)
 800b20c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d021      	beq.n	800b256 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b216:	4a1c      	ldr	r2, [pc, #112]	@ (800b288 <UART_SetConfig+0xcd4>)
 800b218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b21c:	461a      	mov	r2, r3
 800b21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b220:	fbb3 f2f2 	udiv	r2, r3, r2
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	085b      	lsrs	r3, r3, #1
 800b22a:	441a      	add	r2, r3
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	fbb2 f3f3 	udiv	r3, r2, r3
 800b234:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b238:	2b0f      	cmp	r3, #15
 800b23a:	d909      	bls.n	800b250 <UART_SetConfig+0xc9c>
 800b23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b242:	d205      	bcs.n	800b250 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b246:	b29a      	uxth	r2, r3
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	60da      	str	r2, [r3, #12]
 800b24e:	e002      	b.n	800b256 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2201      	movs	r2, #1
 800b25a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2201      	movs	r2, #1
 800b262:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2200      	movs	r2, #0
 800b26a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	2200      	movs	r2, #0
 800b270:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b272:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b276:	4618      	mov	r0, r3
 800b278:	3748      	adds	r7, #72	@ 0x48
 800b27a:	46bd      	mov	sp, r7
 800b27c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b280:	03d09000 	.word	0x03d09000
 800b284:	003d0900 	.word	0x003d0900
 800b288:	08011f90 	.word	0x08011f90

0800b28c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b298:	f003 0308 	and.w	r3, r3, #8
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00a      	beq.n	800b2b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00a      	beq.n	800b2d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	430a      	orrs	r2, r1
 800b2d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00a      	beq.n	800b2fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fe:	f003 0304 	and.w	r3, r3, #4
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00a      	beq.n	800b31c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	430a      	orrs	r2, r1
 800b31a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b320:	f003 0310 	and.w	r3, r3, #16
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00a      	beq.n	800b33e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	430a      	orrs	r2, r1
 800b33c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b342:	f003 0320 	and.w	r3, r3, #32
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00a      	beq.n	800b360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	430a      	orrs	r2, r1
 800b35e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d01a      	beq.n	800b3a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	430a      	orrs	r2, r1
 800b380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b38a:	d10a      	bne.n	800b3a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	430a      	orrs	r2, r1
 800b3a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00a      	beq.n	800b3c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	605a      	str	r2, [r3, #4]
  }
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b098      	sub	sp, #96	@ 0x60
 800b3d4:	af02      	add	r7, sp, #8
 800b3d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b3e0:	f7f8 fe58 	bl	8004094 <HAL_GetTick>
 800b3e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0308 	and.w	r3, r3, #8
 800b3f0:	2b08      	cmp	r3, #8
 800b3f2:	d12f      	bne.n	800b454 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f88e 	bl	800b524 <UART_WaitOnFlagUntilTimeout>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d022      	beq.n	800b454 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b416:	e853 3f00 	ldrex	r3, [r3]
 800b41a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b41c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b41e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b422:	653b      	str	r3, [r7, #80]	@ 0x50
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	461a      	mov	r2, r3
 800b42a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b42c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b42e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b434:	e841 2300 	strex	r3, r2, [r1]
 800b438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1e6      	bne.n	800b40e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2220      	movs	r2, #32
 800b444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	e063      	b.n	800b51c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 0304 	and.w	r3, r3, #4
 800b45e:	2b04      	cmp	r3, #4
 800b460:	d149      	bne.n	800b4f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b462:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b46a:	2200      	movs	r2, #0
 800b46c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f857 	bl	800b524 <UART_WaitOnFlagUntilTimeout>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d03c      	beq.n	800b4f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	623b      	str	r3, [r7, #32]
   return(result);
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b49a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b49c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4a2:	e841 2300 	strex	r3, r2, [r1]
 800b4a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1e6      	bne.n	800b47c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	e853 3f00 	ldrex	r3, [r3]
 800b4bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f023 0301 	bic.w	r3, r3, #1
 800b4c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3308      	adds	r3, #8
 800b4cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4ce:	61fa      	str	r2, [r7, #28]
 800b4d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d2:	69b9      	ldr	r1, [r7, #24]
 800b4d4:	69fa      	ldr	r2, [r7, #28]
 800b4d6:	e841 2300 	strex	r3, r2, [r1]
 800b4da:	617b      	str	r3, [r7, #20]
   return(result);
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1e5      	bne.n	800b4ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2220      	movs	r2, #32
 800b4e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e012      	b.n	800b51c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2220      	movs	r2, #32
 800b4fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2220      	movs	r2, #32
 800b502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3758      	adds	r7, #88	@ 0x58
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	4613      	mov	r3, r2
 800b532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b534:	e04f      	b.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53c:	d04b      	beq.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b53e:	f7f8 fda9 	bl	8004094 <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	69ba      	ldr	r2, [r7, #24]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d302      	bcc.n	800b554 <UART_WaitOnFlagUntilTimeout+0x30>
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b554:	2303      	movs	r3, #3
 800b556:	e04e      	b.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0304 	and.w	r3, r3, #4
 800b562:	2b00      	cmp	r3, #0
 800b564:	d037      	beq.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b80      	cmp	r3, #128	@ 0x80
 800b56a:	d034      	beq.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2b40      	cmp	r3, #64	@ 0x40
 800b570:	d031      	beq.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	69db      	ldr	r3, [r3, #28]
 800b578:	f003 0308 	and.w	r3, r3, #8
 800b57c:	2b08      	cmp	r3, #8
 800b57e:	d110      	bne.n	800b5a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2208      	movs	r2, #8
 800b586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f839 	bl	800b600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2208      	movs	r2, #8
 800b592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e029      	b.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5b0:	d111      	bne.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f000 f81f 	bl	800b600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	e00f      	b.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	69da      	ldr	r2, [r3, #28]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	4013      	ands	r3, r2
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	bf0c      	ite	eq
 800b5e6:	2301      	moveq	r3, #1
 800b5e8:	2300      	movne	r3, #0
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d0a0      	beq.n	800b536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
	...

0800b600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b600:	b480      	push	{r7}
 800b602:	b095      	sub	sp, #84	@ 0x54
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b61c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b626:	643b      	str	r3, [r7, #64]	@ 0x40
 800b628:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b62c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b62e:	e841 2300 	strex	r3, r2, [r1]
 800b632:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1e6      	bne.n	800b608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	3308      	adds	r3, #8
 800b640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	e853 3f00 	ldrex	r3, [r3]
 800b648:	61fb      	str	r3, [r7, #28]
   return(result);
 800b64a:	69fa      	ldr	r2, [r7, #28]
 800b64c:	4b1e      	ldr	r3, [pc, #120]	@ (800b6c8 <UART_EndRxTransfer+0xc8>)
 800b64e:	4013      	ands	r3, r2
 800b650:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	3308      	adds	r3, #8
 800b658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b65a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b65c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b662:	e841 2300 	strex	r3, r2, [r1]
 800b666:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1e5      	bne.n	800b63a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b672:	2b01      	cmp	r3, #1
 800b674:	d118      	bne.n	800b6a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	e853 3f00 	ldrex	r3, [r3]
 800b682:	60bb      	str	r3, [r7, #8]
   return(result);
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	f023 0310 	bic.w	r3, r3, #16
 800b68a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b694:	61bb      	str	r3, [r7, #24]
 800b696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b698:	6979      	ldr	r1, [r7, #20]
 800b69a:	69ba      	ldr	r2, [r7, #24]
 800b69c:	e841 2300 	strex	r3, r2, [r1]
 800b6a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1e6      	bne.n	800b676 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2220      	movs	r2, #32
 800b6ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b6bc:	bf00      	nop
 800b6be:	3754      	adds	r7, #84	@ 0x54
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	effffffe 	.word	0xeffffffe

0800b6cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d101      	bne.n	800b6e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b6de:	2302      	movs	r3, #2
 800b6e0:	e027      	b.n	800b732 <HAL_UARTEx_DisableFifoMode+0x66>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2224      	movs	r2, #36	@ 0x24
 800b6ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f022 0201 	bic.w	r2, r2, #1
 800b708:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b710:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2220      	movs	r2, #32
 800b724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d101      	bne.n	800b756 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b752:	2302      	movs	r3, #2
 800b754:	e02d      	b.n	800b7b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2224      	movs	r2, #36	@ 0x24
 800b762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f022 0201 	bic.w	r2, r2, #1
 800b77c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	430a      	orrs	r2, r1
 800b790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f850 	bl	800b838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d101      	bne.n	800b7d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	e02d      	b.n	800b82e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2224      	movs	r2, #36	@ 0x24
 800b7de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f022 0201 	bic.w	r2, r2, #1
 800b7f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	430a      	orrs	r2, r1
 800b80c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f812 	bl	800b838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2220      	movs	r2, #32
 800b820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
	...

0800b838 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b844:	2b00      	cmp	r3, #0
 800b846:	d108      	bne.n	800b85a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b858:	e031      	b.n	800b8be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b85a:	2310      	movs	r3, #16
 800b85c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b85e:	2310      	movs	r3, #16
 800b860:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	0e5b      	lsrs	r3, r3, #25
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	f003 0307 	and.w	r3, r3, #7
 800b870:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	0f5b      	lsrs	r3, r3, #29
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	f003 0307 	and.w	r3, r3, #7
 800b880:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b882:	7bbb      	ldrb	r3, [r7, #14]
 800b884:	7b3a      	ldrb	r2, [r7, #12]
 800b886:	4911      	ldr	r1, [pc, #68]	@ (800b8cc <UARTEx_SetNbDataToProcess+0x94>)
 800b888:	5c8a      	ldrb	r2, [r1, r2]
 800b88a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b88e:	7b3a      	ldrb	r2, [r7, #12]
 800b890:	490f      	ldr	r1, [pc, #60]	@ (800b8d0 <UARTEx_SetNbDataToProcess+0x98>)
 800b892:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b894:	fb93 f3f2 	sdiv	r3, r3, r2
 800b898:	b29a      	uxth	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
 800b8a2:	7b7a      	ldrb	r2, [r7, #13]
 800b8a4:	4909      	ldr	r1, [pc, #36]	@ (800b8cc <UARTEx_SetNbDataToProcess+0x94>)
 800b8a6:	5c8a      	ldrb	r2, [r1, r2]
 800b8a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8ac:	7b7a      	ldrb	r2, [r7, #13]
 800b8ae:	4908      	ldr	r1, [pc, #32]	@ (800b8d0 <UARTEx_SetNbDataToProcess+0x98>)
 800b8b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b8be:	bf00      	nop
 800b8c0:	3714      	adds	r7, #20
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	08011fa8 	.word	0x08011fa8
 800b8d0:	08011fb0 	.word	0x08011fb0

0800b8d4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e03c      	b.n	800b960 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d106      	bne.n	800b900 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7f8 f8b6 	bl	8003a6c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2202      	movs	r2, #2
 800b904:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f022 0201 	bic.w	r2, r2, #1
 800b916:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 f85b 	bl	800b9d4 <USART_SetConfig>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b01      	cmp	r3, #1
 800b922:	d101      	bne.n	800b928 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	e01b      	b.n	800b960 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b936:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	689a      	ldr	r2, [r3, #8]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b946:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f042 0201 	orr.w	r2, r2, #1
 800b956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fddd 	bl	800c518 <USART_CheckIdleState>
 800b95e:	4603      	mov	r3, r0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	603b      	str	r3, [r7, #0]
 800b974:	4613      	mov	r3, r2
 800b976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800b978:	e018      	b.n	800b9ac <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b980:	d014      	beq.n	800b9ac <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b982:	f7f8 fb87 	bl	8004094 <HAL_GetTick>
 800b986:	4602      	mov	r2, r0
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	69ba      	ldr	r2, [r7, #24]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d302      	bcc.n	800b998 <USART_WaitOnFlagUntilTimeout+0x30>
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d109      	bne.n	800b9ac <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	e00f      	b.n	800b9cc <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	69da      	ldr	r2, [r3, #28]
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	bf0c      	ite	eq
 800b9bc:	2301      	moveq	r3, #1
 800b9be:	2300      	movne	r3, #0
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	79fb      	ldrb	r3, [r7, #7]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d0d7      	beq.n	800b97a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b08e      	sub	sp, #56	@ 0x38
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	689a      	ldr	r2, [r3, #8]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	431a      	orrs	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	695b      	ldr	r3, [r3, #20]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	4bc9      	ldr	r3, [pc, #804]	@ (800bd28 <USART_SetConfig+0x354>)
 800ba04:	4013      	ands	r3, r2
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	6812      	ldr	r2, [r2, #0]
 800ba0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800ba10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ba14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	699a      	ldr	r2, [r3, #24]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba36:	4313      	orrs	r3, r2
 800ba38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	4bba      	ldr	r3, [pc, #744]	@ (800bd2c <USART_SetConfig+0x358>)
 800ba42:	4013      	ands	r3, r2
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	6812      	ldr	r2, [r2, #0]
 800ba48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba4a:	430b      	orrs	r3, r1
 800ba4c:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba54:	f023 010f 	bic.w	r1, r3, #15
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	430a      	orrs	r2, r1
 800ba62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4ab1      	ldr	r2, [pc, #708]	@ (800bd30 <USART_SetConfig+0x35c>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d176      	bne.n	800bb5c <USART_SetConfig+0x188>
 800ba6e:	4bb1      	ldr	r3, [pc, #708]	@ (800bd34 <USART_SetConfig+0x360>)
 800ba70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba76:	2b28      	cmp	r3, #40	@ 0x28
 800ba78:	d86c      	bhi.n	800bb54 <USART_SetConfig+0x180>
 800ba7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba80 <USART_SetConfig+0xac>)
 800ba7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba80:	0800bb25 	.word	0x0800bb25
 800ba84:	0800bb55 	.word	0x0800bb55
 800ba88:	0800bb55 	.word	0x0800bb55
 800ba8c:	0800bb55 	.word	0x0800bb55
 800ba90:	0800bb55 	.word	0x0800bb55
 800ba94:	0800bb55 	.word	0x0800bb55
 800ba98:	0800bb55 	.word	0x0800bb55
 800ba9c:	0800bb55 	.word	0x0800bb55
 800baa0:	0800bb2d 	.word	0x0800bb2d
 800baa4:	0800bb55 	.word	0x0800bb55
 800baa8:	0800bb55 	.word	0x0800bb55
 800baac:	0800bb55 	.word	0x0800bb55
 800bab0:	0800bb55 	.word	0x0800bb55
 800bab4:	0800bb55 	.word	0x0800bb55
 800bab8:	0800bb55 	.word	0x0800bb55
 800babc:	0800bb55 	.word	0x0800bb55
 800bac0:	0800bb35 	.word	0x0800bb35
 800bac4:	0800bb55 	.word	0x0800bb55
 800bac8:	0800bb55 	.word	0x0800bb55
 800bacc:	0800bb55 	.word	0x0800bb55
 800bad0:	0800bb55 	.word	0x0800bb55
 800bad4:	0800bb55 	.word	0x0800bb55
 800bad8:	0800bb55 	.word	0x0800bb55
 800badc:	0800bb55 	.word	0x0800bb55
 800bae0:	0800bb3d 	.word	0x0800bb3d
 800bae4:	0800bb55 	.word	0x0800bb55
 800bae8:	0800bb55 	.word	0x0800bb55
 800baec:	0800bb55 	.word	0x0800bb55
 800baf0:	0800bb55 	.word	0x0800bb55
 800baf4:	0800bb55 	.word	0x0800bb55
 800baf8:	0800bb55 	.word	0x0800bb55
 800bafc:	0800bb55 	.word	0x0800bb55
 800bb00:	0800bb45 	.word	0x0800bb45
 800bb04:	0800bb55 	.word	0x0800bb55
 800bb08:	0800bb55 	.word	0x0800bb55
 800bb0c:	0800bb55 	.word	0x0800bb55
 800bb10:	0800bb55 	.word	0x0800bb55
 800bb14:	0800bb55 	.word	0x0800bb55
 800bb18:	0800bb55 	.word	0x0800bb55
 800bb1c:	0800bb55 	.word	0x0800bb55
 800bb20:	0800bb4d 	.word	0x0800bb4d
 800bb24:	2301      	movs	r3, #1
 800bb26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb2a:	e18e      	b.n	800be4a <USART_SetConfig+0x476>
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb32:	e18a      	b.n	800be4a <USART_SetConfig+0x476>
 800bb34:	2304      	movs	r3, #4
 800bb36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb3a:	e186      	b.n	800be4a <USART_SetConfig+0x476>
 800bb3c:	2308      	movs	r3, #8
 800bb3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb42:	e182      	b.n	800be4a <USART_SetConfig+0x476>
 800bb44:	2310      	movs	r3, #16
 800bb46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb4a:	e17e      	b.n	800be4a <USART_SetConfig+0x476>
 800bb4c:	2320      	movs	r3, #32
 800bb4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb52:	e17a      	b.n	800be4a <USART_SetConfig+0x476>
 800bb54:	2340      	movs	r3, #64	@ 0x40
 800bb56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb5a:	e176      	b.n	800be4a <USART_SetConfig+0x476>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a75      	ldr	r2, [pc, #468]	@ (800bd38 <USART_SetConfig+0x364>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d130      	bne.n	800bbc8 <USART_SetConfig+0x1f4>
 800bb66:	4b73      	ldr	r3, [pc, #460]	@ (800bd34 <USART_SetConfig+0x360>)
 800bb68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb6a:	f003 0307 	and.w	r3, r3, #7
 800bb6e:	2b05      	cmp	r3, #5
 800bb70:	d826      	bhi.n	800bbc0 <USART_SetConfig+0x1ec>
 800bb72:	a201      	add	r2, pc, #4	@ (adr r2, 800bb78 <USART_SetConfig+0x1a4>)
 800bb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb78:	0800bb91 	.word	0x0800bb91
 800bb7c:	0800bb99 	.word	0x0800bb99
 800bb80:	0800bba1 	.word	0x0800bba1
 800bb84:	0800bba9 	.word	0x0800bba9
 800bb88:	0800bbb1 	.word	0x0800bbb1
 800bb8c:	0800bbb9 	.word	0x0800bbb9
 800bb90:	2300      	movs	r3, #0
 800bb92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb96:	e158      	b.n	800be4a <USART_SetConfig+0x476>
 800bb98:	2302      	movs	r3, #2
 800bb9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb9e:	e154      	b.n	800be4a <USART_SetConfig+0x476>
 800bba0:	2304      	movs	r3, #4
 800bba2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bba6:	e150      	b.n	800be4a <USART_SetConfig+0x476>
 800bba8:	2308      	movs	r3, #8
 800bbaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bbae:	e14c      	b.n	800be4a <USART_SetConfig+0x476>
 800bbb0:	2310      	movs	r3, #16
 800bbb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bbb6:	e148      	b.n	800be4a <USART_SetConfig+0x476>
 800bbb8:	2320      	movs	r3, #32
 800bbba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bbbe:	e144      	b.n	800be4a <USART_SetConfig+0x476>
 800bbc0:	2340      	movs	r3, #64	@ 0x40
 800bbc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bbc6:	e140      	b.n	800be4a <USART_SetConfig+0x476>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a5b      	ldr	r2, [pc, #364]	@ (800bd3c <USART_SetConfig+0x368>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d130      	bne.n	800bc34 <USART_SetConfig+0x260>
 800bbd2:	4b58      	ldr	r3, [pc, #352]	@ (800bd34 <USART_SetConfig+0x360>)
 800bbd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbd6:	f003 0307 	and.w	r3, r3, #7
 800bbda:	2b05      	cmp	r3, #5
 800bbdc:	d826      	bhi.n	800bc2c <USART_SetConfig+0x258>
 800bbde:	a201      	add	r2, pc, #4	@ (adr r2, 800bbe4 <USART_SetConfig+0x210>)
 800bbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe4:	0800bbfd 	.word	0x0800bbfd
 800bbe8:	0800bc05 	.word	0x0800bc05
 800bbec:	0800bc0d 	.word	0x0800bc0d
 800bbf0:	0800bc15 	.word	0x0800bc15
 800bbf4:	0800bc1d 	.word	0x0800bc1d
 800bbf8:	0800bc25 	.word	0x0800bc25
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc02:	e122      	b.n	800be4a <USART_SetConfig+0x476>
 800bc04:	2302      	movs	r3, #2
 800bc06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc0a:	e11e      	b.n	800be4a <USART_SetConfig+0x476>
 800bc0c:	2304      	movs	r3, #4
 800bc0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc12:	e11a      	b.n	800be4a <USART_SetConfig+0x476>
 800bc14:	2308      	movs	r3, #8
 800bc16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc1a:	e116      	b.n	800be4a <USART_SetConfig+0x476>
 800bc1c:	2310      	movs	r3, #16
 800bc1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc22:	e112      	b.n	800be4a <USART_SetConfig+0x476>
 800bc24:	2320      	movs	r3, #32
 800bc26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc2a:	e10e      	b.n	800be4a <USART_SetConfig+0x476>
 800bc2c:	2340      	movs	r3, #64	@ 0x40
 800bc2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc32:	e10a      	b.n	800be4a <USART_SetConfig+0x476>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a41      	ldr	r2, [pc, #260]	@ (800bd40 <USART_SetConfig+0x36c>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	f040 8086 	bne.w	800bd4c <USART_SetConfig+0x378>
 800bc40:	4b3c      	ldr	r3, [pc, #240]	@ (800bd34 <USART_SetConfig+0x360>)
 800bc42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc48:	2b28      	cmp	r3, #40	@ 0x28
 800bc4a:	d87b      	bhi.n	800bd44 <USART_SetConfig+0x370>
 800bc4c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc54 <USART_SetConfig+0x280>)
 800bc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc52:	bf00      	nop
 800bc54:	0800bcf9 	.word	0x0800bcf9
 800bc58:	0800bd45 	.word	0x0800bd45
 800bc5c:	0800bd45 	.word	0x0800bd45
 800bc60:	0800bd45 	.word	0x0800bd45
 800bc64:	0800bd45 	.word	0x0800bd45
 800bc68:	0800bd45 	.word	0x0800bd45
 800bc6c:	0800bd45 	.word	0x0800bd45
 800bc70:	0800bd45 	.word	0x0800bd45
 800bc74:	0800bd01 	.word	0x0800bd01
 800bc78:	0800bd45 	.word	0x0800bd45
 800bc7c:	0800bd45 	.word	0x0800bd45
 800bc80:	0800bd45 	.word	0x0800bd45
 800bc84:	0800bd45 	.word	0x0800bd45
 800bc88:	0800bd45 	.word	0x0800bd45
 800bc8c:	0800bd45 	.word	0x0800bd45
 800bc90:	0800bd45 	.word	0x0800bd45
 800bc94:	0800bd09 	.word	0x0800bd09
 800bc98:	0800bd45 	.word	0x0800bd45
 800bc9c:	0800bd45 	.word	0x0800bd45
 800bca0:	0800bd45 	.word	0x0800bd45
 800bca4:	0800bd45 	.word	0x0800bd45
 800bca8:	0800bd45 	.word	0x0800bd45
 800bcac:	0800bd45 	.word	0x0800bd45
 800bcb0:	0800bd45 	.word	0x0800bd45
 800bcb4:	0800bd11 	.word	0x0800bd11
 800bcb8:	0800bd45 	.word	0x0800bd45
 800bcbc:	0800bd45 	.word	0x0800bd45
 800bcc0:	0800bd45 	.word	0x0800bd45
 800bcc4:	0800bd45 	.word	0x0800bd45
 800bcc8:	0800bd45 	.word	0x0800bd45
 800bccc:	0800bd45 	.word	0x0800bd45
 800bcd0:	0800bd45 	.word	0x0800bd45
 800bcd4:	0800bd19 	.word	0x0800bd19
 800bcd8:	0800bd45 	.word	0x0800bd45
 800bcdc:	0800bd45 	.word	0x0800bd45
 800bce0:	0800bd45 	.word	0x0800bd45
 800bce4:	0800bd45 	.word	0x0800bd45
 800bce8:	0800bd45 	.word	0x0800bd45
 800bcec:	0800bd45 	.word	0x0800bd45
 800bcf0:	0800bd45 	.word	0x0800bd45
 800bcf4:	0800bd21 	.word	0x0800bd21
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bcfe:	e0a4      	b.n	800be4a <USART_SetConfig+0x476>
 800bd00:	2302      	movs	r3, #2
 800bd02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bd06:	e0a0      	b.n	800be4a <USART_SetConfig+0x476>
 800bd08:	2304      	movs	r3, #4
 800bd0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bd0e:	e09c      	b.n	800be4a <USART_SetConfig+0x476>
 800bd10:	2308      	movs	r3, #8
 800bd12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bd16:	e098      	b.n	800be4a <USART_SetConfig+0x476>
 800bd18:	2310      	movs	r3, #16
 800bd1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bd1e:	e094      	b.n	800be4a <USART_SetConfig+0x476>
 800bd20:	2320      	movs	r3, #32
 800bd22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bd26:	e090      	b.n	800be4a <USART_SetConfig+0x476>
 800bd28:	cfff69f3 	.word	0xcfff69f3
 800bd2c:	ffffc0f6 	.word	0xffffc0f6
 800bd30:	40011000 	.word	0x40011000
 800bd34:	58024400 	.word	0x58024400
 800bd38:	40004400 	.word	0x40004400
 800bd3c:	40004800 	.word	0x40004800
 800bd40:	40011400 	.word	0x40011400
 800bd44:	2340      	movs	r3, #64	@ 0x40
 800bd46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bd4a:	e07e      	b.n	800be4a <USART_SetConfig+0x476>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4ab5      	ldr	r2, [pc, #724]	@ (800c028 <USART_SetConfig+0x654>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d176      	bne.n	800be44 <USART_SetConfig+0x470>
 800bd56:	4bb5      	ldr	r3, [pc, #724]	@ (800c02c <USART_SetConfig+0x658>)
 800bd58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd5e:	2b28      	cmp	r3, #40	@ 0x28
 800bd60:	d86c      	bhi.n	800be3c <USART_SetConfig+0x468>
 800bd62:	a201      	add	r2, pc, #4	@ (adr r2, 800bd68 <USART_SetConfig+0x394>)
 800bd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd68:	0800be0d 	.word	0x0800be0d
 800bd6c:	0800be3d 	.word	0x0800be3d
 800bd70:	0800be3d 	.word	0x0800be3d
 800bd74:	0800be3d 	.word	0x0800be3d
 800bd78:	0800be3d 	.word	0x0800be3d
 800bd7c:	0800be3d 	.word	0x0800be3d
 800bd80:	0800be3d 	.word	0x0800be3d
 800bd84:	0800be3d 	.word	0x0800be3d
 800bd88:	0800be15 	.word	0x0800be15
 800bd8c:	0800be3d 	.word	0x0800be3d
 800bd90:	0800be3d 	.word	0x0800be3d
 800bd94:	0800be3d 	.word	0x0800be3d
 800bd98:	0800be3d 	.word	0x0800be3d
 800bd9c:	0800be3d 	.word	0x0800be3d
 800bda0:	0800be3d 	.word	0x0800be3d
 800bda4:	0800be3d 	.word	0x0800be3d
 800bda8:	0800be1d 	.word	0x0800be1d
 800bdac:	0800be3d 	.word	0x0800be3d
 800bdb0:	0800be3d 	.word	0x0800be3d
 800bdb4:	0800be3d 	.word	0x0800be3d
 800bdb8:	0800be3d 	.word	0x0800be3d
 800bdbc:	0800be3d 	.word	0x0800be3d
 800bdc0:	0800be3d 	.word	0x0800be3d
 800bdc4:	0800be3d 	.word	0x0800be3d
 800bdc8:	0800be25 	.word	0x0800be25
 800bdcc:	0800be3d 	.word	0x0800be3d
 800bdd0:	0800be3d 	.word	0x0800be3d
 800bdd4:	0800be3d 	.word	0x0800be3d
 800bdd8:	0800be3d 	.word	0x0800be3d
 800bddc:	0800be3d 	.word	0x0800be3d
 800bde0:	0800be3d 	.word	0x0800be3d
 800bde4:	0800be3d 	.word	0x0800be3d
 800bde8:	0800be2d 	.word	0x0800be2d
 800bdec:	0800be3d 	.word	0x0800be3d
 800bdf0:	0800be3d 	.word	0x0800be3d
 800bdf4:	0800be3d 	.word	0x0800be3d
 800bdf8:	0800be3d 	.word	0x0800be3d
 800bdfc:	0800be3d 	.word	0x0800be3d
 800be00:	0800be3d 	.word	0x0800be3d
 800be04:	0800be3d 	.word	0x0800be3d
 800be08:	0800be35 	.word	0x0800be35
 800be0c:	2301      	movs	r3, #1
 800be0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be12:	e01a      	b.n	800be4a <USART_SetConfig+0x476>
 800be14:	2302      	movs	r3, #2
 800be16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be1a:	e016      	b.n	800be4a <USART_SetConfig+0x476>
 800be1c:	2304      	movs	r3, #4
 800be1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be22:	e012      	b.n	800be4a <USART_SetConfig+0x476>
 800be24:	2308      	movs	r3, #8
 800be26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be2a:	e00e      	b.n	800be4a <USART_SetConfig+0x476>
 800be2c:	2310      	movs	r3, #16
 800be2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be32:	e00a      	b.n	800be4a <USART_SetConfig+0x476>
 800be34:	2320      	movs	r3, #32
 800be36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be3a:	e006      	b.n	800be4a <USART_SetConfig+0x476>
 800be3c:	2340      	movs	r3, #64	@ 0x40
 800be3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be42:	e002      	b.n	800be4a <USART_SetConfig+0x476>
 800be44:	2340      	movs	r3, #64	@ 0x40
 800be46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800be4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be4e:	2b20      	cmp	r3, #32
 800be50:	f200 832f 	bhi.w	800c4b2 <USART_SetConfig+0xade>
 800be54:	a201      	add	r2, pc, #4	@ (adr r2, 800be5c <USART_SetConfig+0x488>)
 800be56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5a:	bf00      	nop
 800be5c:	0800bee1 	.word	0x0800bee1
 800be60:	0800bf97 	.word	0x0800bf97
 800be64:	0800c057 	.word	0x0800c057
 800be68:	0800c4b3 	.word	0x0800c4b3
 800be6c:	0800c111 	.word	0x0800c111
 800be70:	0800c4b3 	.word	0x0800c4b3
 800be74:	0800c4b3 	.word	0x0800c4b3
 800be78:	0800c4b3 	.word	0x0800c4b3
 800be7c:	0800c1cb 	.word	0x0800c1cb
 800be80:	0800c4b3 	.word	0x0800c4b3
 800be84:	0800c4b3 	.word	0x0800c4b3
 800be88:	0800c4b3 	.word	0x0800c4b3
 800be8c:	0800c4b3 	.word	0x0800c4b3
 800be90:	0800c4b3 	.word	0x0800c4b3
 800be94:	0800c4b3 	.word	0x0800c4b3
 800be98:	0800c4b3 	.word	0x0800c4b3
 800be9c:	0800c343 	.word	0x0800c343
 800bea0:	0800c4b3 	.word	0x0800c4b3
 800bea4:	0800c4b3 	.word	0x0800c4b3
 800bea8:	0800c4b3 	.word	0x0800c4b3
 800beac:	0800c4b3 	.word	0x0800c4b3
 800beb0:	0800c4b3 	.word	0x0800c4b3
 800beb4:	0800c4b3 	.word	0x0800c4b3
 800beb8:	0800c4b3 	.word	0x0800c4b3
 800bebc:	0800c4b3 	.word	0x0800c4b3
 800bec0:	0800c4b3 	.word	0x0800c4b3
 800bec4:	0800c4b3 	.word	0x0800c4b3
 800bec8:	0800c4b3 	.word	0x0800c4b3
 800becc:	0800c4b3 	.word	0x0800c4b3
 800bed0:	0800c4b3 	.word	0x0800c4b3
 800bed4:	0800c4b3 	.word	0x0800c4b3
 800bed8:	0800c4b3 	.word	0x0800c4b3
 800bedc:	0800c401 	.word	0x0800c401
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bee0:	f7f9 fce6 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 800bee4:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beea:	2b00      	cmp	r3, #0
 800beec:	d044      	beq.n	800bf78 <USART_SetConfig+0x5a4>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d03e      	beq.n	800bf74 <USART_SetConfig+0x5a0>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800befa:	2b02      	cmp	r3, #2
 800befc:	d038      	beq.n	800bf70 <USART_SetConfig+0x59c>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d032      	beq.n	800bf6c <USART_SetConfig+0x598>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf0a:	2b04      	cmp	r3, #4
 800bf0c:	d02c      	beq.n	800bf68 <USART_SetConfig+0x594>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf12:	2b05      	cmp	r3, #5
 800bf14:	d026      	beq.n	800bf64 <USART_SetConfig+0x590>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf1a:	2b06      	cmp	r3, #6
 800bf1c:	d020      	beq.n	800bf60 <USART_SetConfig+0x58c>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf22:	2b07      	cmp	r3, #7
 800bf24:	d01a      	beq.n	800bf5c <USART_SetConfig+0x588>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf2a:	2b08      	cmp	r3, #8
 800bf2c:	d014      	beq.n	800bf58 <USART_SetConfig+0x584>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf32:	2b09      	cmp	r3, #9
 800bf34:	d00e      	beq.n	800bf54 <USART_SetConfig+0x580>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3a:	2b0a      	cmp	r3, #10
 800bf3c:	d008      	beq.n	800bf50 <USART_SetConfig+0x57c>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf42:	2b0b      	cmp	r3, #11
 800bf44:	d102      	bne.n	800bf4c <USART_SetConfig+0x578>
 800bf46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf4a:	e016      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e014      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf50:	2380      	movs	r3, #128	@ 0x80
 800bf52:	e012      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf54:	2340      	movs	r3, #64	@ 0x40
 800bf56:	e010      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf58:	2320      	movs	r3, #32
 800bf5a:	e00e      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf5c:	2310      	movs	r3, #16
 800bf5e:	e00c      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf60:	230c      	movs	r3, #12
 800bf62:	e00a      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf64:	230a      	movs	r3, #10
 800bf66:	e008      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf68:	2308      	movs	r3, #8
 800bf6a:	e006      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf6c:	2306      	movs	r3, #6
 800bf6e:	e004      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf70:	2304      	movs	r3, #4
 800bf72:	e002      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf74:	2302      	movs	r3, #2
 800bf76:	e000      	b.n	800bf7a <USART_SetConfig+0x5a6>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf80:	005a      	lsls	r2, r3, #1
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	085b      	lsrs	r3, r3, #1
 800bf88:	441a      	add	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf92:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800bf94:	e291      	b.n	800c4ba <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800bf96:	f7f9 fca1 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 800bf9a:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d049      	beq.n	800c038 <USART_SetConfig+0x664>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d043      	beq.n	800c034 <USART_SetConfig+0x660>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d03d      	beq.n	800c030 <USART_SetConfig+0x65c>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d032      	beq.n	800c022 <USART_SetConfig+0x64e>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfc0:	2b04      	cmp	r3, #4
 800bfc2:	d02c      	beq.n	800c01e <USART_SetConfig+0x64a>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfc8:	2b05      	cmp	r3, #5
 800bfca:	d026      	beq.n	800c01a <USART_SetConfig+0x646>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd0:	2b06      	cmp	r3, #6
 800bfd2:	d020      	beq.n	800c016 <USART_SetConfig+0x642>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd8:	2b07      	cmp	r3, #7
 800bfda:	d01a      	beq.n	800c012 <USART_SetConfig+0x63e>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe0:	2b08      	cmp	r3, #8
 800bfe2:	d014      	beq.n	800c00e <USART_SetConfig+0x63a>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe8:	2b09      	cmp	r3, #9
 800bfea:	d00e      	beq.n	800c00a <USART_SetConfig+0x636>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff0:	2b0a      	cmp	r3, #10
 800bff2:	d008      	beq.n	800c006 <USART_SetConfig+0x632>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff8:	2b0b      	cmp	r3, #11
 800bffa:	d102      	bne.n	800c002 <USART_SetConfig+0x62e>
 800bffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c000:	e01b      	b.n	800c03a <USART_SetConfig+0x666>
 800c002:	2301      	movs	r3, #1
 800c004:	e019      	b.n	800c03a <USART_SetConfig+0x666>
 800c006:	2380      	movs	r3, #128	@ 0x80
 800c008:	e017      	b.n	800c03a <USART_SetConfig+0x666>
 800c00a:	2340      	movs	r3, #64	@ 0x40
 800c00c:	e015      	b.n	800c03a <USART_SetConfig+0x666>
 800c00e:	2320      	movs	r3, #32
 800c010:	e013      	b.n	800c03a <USART_SetConfig+0x666>
 800c012:	2310      	movs	r3, #16
 800c014:	e011      	b.n	800c03a <USART_SetConfig+0x666>
 800c016:	230c      	movs	r3, #12
 800c018:	e00f      	b.n	800c03a <USART_SetConfig+0x666>
 800c01a:	230a      	movs	r3, #10
 800c01c:	e00d      	b.n	800c03a <USART_SetConfig+0x666>
 800c01e:	2308      	movs	r3, #8
 800c020:	e00b      	b.n	800c03a <USART_SetConfig+0x666>
 800c022:	2306      	movs	r3, #6
 800c024:	e009      	b.n	800c03a <USART_SetConfig+0x666>
 800c026:	bf00      	nop
 800c028:	40011c00 	.word	0x40011c00
 800c02c:	58024400 	.word	0x58024400
 800c030:	2304      	movs	r3, #4
 800c032:	e002      	b.n	800c03a <USART_SetConfig+0x666>
 800c034:	2302      	movs	r3, #2
 800c036:	e000      	b.n	800c03a <USART_SetConfig+0x666>
 800c038:	2301      	movs	r3, #1
 800c03a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c03c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c040:	005a      	lsls	r2, r3, #1
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	085b      	lsrs	r3, r3, #1
 800c048:	441a      	add	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c052:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c054:	e231      	b.n	800c4ba <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c056:	f107 0318 	add.w	r3, r7, #24
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fb fadc 	bl	8007618 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800c060:	69fa      	ldr	r2, [r7, #28]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c066:	2b00      	cmp	r3, #0
 800c068:	d044      	beq.n	800c0f4 <USART_SetConfig+0x720>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d03e      	beq.n	800c0f0 <USART_SetConfig+0x71c>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c076:	2b02      	cmp	r3, #2
 800c078:	d038      	beq.n	800c0ec <USART_SetConfig+0x718>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d032      	beq.n	800c0e8 <USART_SetConfig+0x714>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c086:	2b04      	cmp	r3, #4
 800c088:	d02c      	beq.n	800c0e4 <USART_SetConfig+0x710>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08e:	2b05      	cmp	r3, #5
 800c090:	d026      	beq.n	800c0e0 <USART_SetConfig+0x70c>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c096:	2b06      	cmp	r3, #6
 800c098:	d020      	beq.n	800c0dc <USART_SetConfig+0x708>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c09e:	2b07      	cmp	r3, #7
 800c0a0:	d01a      	beq.n	800c0d8 <USART_SetConfig+0x704>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a6:	2b08      	cmp	r3, #8
 800c0a8:	d014      	beq.n	800c0d4 <USART_SetConfig+0x700>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ae:	2b09      	cmp	r3, #9
 800c0b0:	d00e      	beq.n	800c0d0 <USART_SetConfig+0x6fc>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b6:	2b0a      	cmp	r3, #10
 800c0b8:	d008      	beq.n	800c0cc <USART_SetConfig+0x6f8>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0be:	2b0b      	cmp	r3, #11
 800c0c0:	d102      	bne.n	800c0c8 <USART_SetConfig+0x6f4>
 800c0c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0c6:	e016      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e014      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0cc:	2380      	movs	r3, #128	@ 0x80
 800c0ce:	e012      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0d0:	2340      	movs	r3, #64	@ 0x40
 800c0d2:	e010      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0d4:	2320      	movs	r3, #32
 800c0d6:	e00e      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0d8:	2310      	movs	r3, #16
 800c0da:	e00c      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0dc:	230c      	movs	r3, #12
 800c0de:	e00a      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0e0:	230a      	movs	r3, #10
 800c0e2:	e008      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0e4:	2308      	movs	r3, #8
 800c0e6:	e006      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0e8:	2306      	movs	r3, #6
 800c0ea:	e004      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0ec:	2304      	movs	r3, #4
 800c0ee:	e002      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	e000      	b.n	800c0f6 <USART_SetConfig+0x722>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0fa:	005a      	lsls	r2, r3, #1
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	085b      	lsrs	r3, r3, #1
 800c102:	441a      	add	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	fbb2 f3f3 	udiv	r3, r2, r3
 800c10c:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800c10e:	e1d4      	b.n	800c4ba <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c110:	f107 030c 	add.w	r3, r7, #12
 800c114:	4618      	mov	r0, r3
 800c116:	f7fb fbd3 	bl	80078c0 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800c11a:	693a      	ldr	r2, [r7, #16]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c120:	2b00      	cmp	r3, #0
 800c122:	d044      	beq.n	800c1ae <USART_SetConfig+0x7da>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d03e      	beq.n	800c1aa <USART_SetConfig+0x7d6>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c130:	2b02      	cmp	r3, #2
 800c132:	d038      	beq.n	800c1a6 <USART_SetConfig+0x7d2>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d032      	beq.n	800c1a2 <USART_SetConfig+0x7ce>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c140:	2b04      	cmp	r3, #4
 800c142:	d02c      	beq.n	800c19e <USART_SetConfig+0x7ca>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c148:	2b05      	cmp	r3, #5
 800c14a:	d026      	beq.n	800c19a <USART_SetConfig+0x7c6>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c150:	2b06      	cmp	r3, #6
 800c152:	d020      	beq.n	800c196 <USART_SetConfig+0x7c2>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c158:	2b07      	cmp	r3, #7
 800c15a:	d01a      	beq.n	800c192 <USART_SetConfig+0x7be>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c160:	2b08      	cmp	r3, #8
 800c162:	d014      	beq.n	800c18e <USART_SetConfig+0x7ba>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c168:	2b09      	cmp	r3, #9
 800c16a:	d00e      	beq.n	800c18a <USART_SetConfig+0x7b6>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c170:	2b0a      	cmp	r3, #10
 800c172:	d008      	beq.n	800c186 <USART_SetConfig+0x7b2>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c178:	2b0b      	cmp	r3, #11
 800c17a:	d102      	bne.n	800c182 <USART_SetConfig+0x7ae>
 800c17c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c180:	e016      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c182:	2301      	movs	r3, #1
 800c184:	e014      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c186:	2380      	movs	r3, #128	@ 0x80
 800c188:	e012      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c18a:	2340      	movs	r3, #64	@ 0x40
 800c18c:	e010      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c18e:	2320      	movs	r3, #32
 800c190:	e00e      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c192:	2310      	movs	r3, #16
 800c194:	e00c      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c196:	230c      	movs	r3, #12
 800c198:	e00a      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c19a:	230a      	movs	r3, #10
 800c19c:	e008      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c19e:	2308      	movs	r3, #8
 800c1a0:	e006      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c1a2:	2306      	movs	r3, #6
 800c1a4:	e004      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c1a6:	2304      	movs	r3, #4
 800c1a8:	e002      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	e000      	b.n	800c1b0 <USART_SetConfig+0x7dc>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1b4:	005a      	lsls	r2, r3, #1
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	085b      	lsrs	r3, r3, #1
 800c1bc:	441a      	add	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1c6:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800c1c8:	e177      	b.n	800c4ba <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1ca:	4b8a      	ldr	r3, [pc, #552]	@ (800c3f4 <USART_SetConfig+0xa20>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 0320 	and.w	r3, r3, #32
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d05d      	beq.n	800c292 <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800c1d6:	4b87      	ldr	r3, [pc, #540]	@ (800c3f4 <USART_SetConfig+0xa20>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	08db      	lsrs	r3, r3, #3
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	4a85      	ldr	r2, [pc, #532]	@ (800c3f8 <USART_SetConfig+0xa24>)
 800c1e2:	40da      	lsrs	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d044      	beq.n	800c276 <USART_SetConfig+0x8a2>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d03e      	beq.n	800c272 <USART_SetConfig+0x89e>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d038      	beq.n	800c26e <USART_SetConfig+0x89a>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c200:	2b03      	cmp	r3, #3
 800c202:	d032      	beq.n	800c26a <USART_SetConfig+0x896>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c208:	2b04      	cmp	r3, #4
 800c20a:	d02c      	beq.n	800c266 <USART_SetConfig+0x892>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c210:	2b05      	cmp	r3, #5
 800c212:	d026      	beq.n	800c262 <USART_SetConfig+0x88e>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c218:	2b06      	cmp	r3, #6
 800c21a:	d020      	beq.n	800c25e <USART_SetConfig+0x88a>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c220:	2b07      	cmp	r3, #7
 800c222:	d01a      	beq.n	800c25a <USART_SetConfig+0x886>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c228:	2b08      	cmp	r3, #8
 800c22a:	d014      	beq.n	800c256 <USART_SetConfig+0x882>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c230:	2b09      	cmp	r3, #9
 800c232:	d00e      	beq.n	800c252 <USART_SetConfig+0x87e>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c238:	2b0a      	cmp	r3, #10
 800c23a:	d008      	beq.n	800c24e <USART_SetConfig+0x87a>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c240:	2b0b      	cmp	r3, #11
 800c242:	d102      	bne.n	800c24a <USART_SetConfig+0x876>
 800c244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c248:	e016      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c24a:	2301      	movs	r3, #1
 800c24c:	e014      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c24e:	2380      	movs	r3, #128	@ 0x80
 800c250:	e012      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c252:	2340      	movs	r3, #64	@ 0x40
 800c254:	e010      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c256:	2320      	movs	r3, #32
 800c258:	e00e      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c25a:	2310      	movs	r3, #16
 800c25c:	e00c      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c25e:	230c      	movs	r3, #12
 800c260:	e00a      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c262:	230a      	movs	r3, #10
 800c264:	e008      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c266:	2308      	movs	r3, #8
 800c268:	e006      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c26a:	2306      	movs	r3, #6
 800c26c:	e004      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c26e:	2304      	movs	r3, #4
 800c270:	e002      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c272:	2302      	movs	r3, #2
 800c274:	e000      	b.n	800c278 <USART_SetConfig+0x8a4>
 800c276:	2301      	movs	r3, #1
 800c278:	fbb2 f3f3 	udiv	r3, r2, r3
 800c27c:	005a      	lsls	r2, r3, #1
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	085b      	lsrs	r3, r3, #1
 800c284:	441a      	add	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28e:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800c290:	e113      	b.n	800c4ba <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c296:	2b00      	cmp	r3, #0
 800c298:	d044      	beq.n	800c324 <USART_SetConfig+0x950>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d03e      	beq.n	800c320 <USART_SetConfig+0x94c>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d038      	beq.n	800c31c <USART_SetConfig+0x948>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d032      	beq.n	800c318 <USART_SetConfig+0x944>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	d02c      	beq.n	800c314 <USART_SetConfig+0x940>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2be:	2b05      	cmp	r3, #5
 800c2c0:	d026      	beq.n	800c310 <USART_SetConfig+0x93c>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2c6:	2b06      	cmp	r3, #6
 800c2c8:	d020      	beq.n	800c30c <USART_SetConfig+0x938>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ce:	2b07      	cmp	r3, #7
 800c2d0:	d01a      	beq.n	800c308 <USART_SetConfig+0x934>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d6:	2b08      	cmp	r3, #8
 800c2d8:	d014      	beq.n	800c304 <USART_SetConfig+0x930>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2de:	2b09      	cmp	r3, #9
 800c2e0:	d00e      	beq.n	800c300 <USART_SetConfig+0x92c>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e6:	2b0a      	cmp	r3, #10
 800c2e8:	d008      	beq.n	800c2fc <USART_SetConfig+0x928>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ee:	2b0b      	cmp	r3, #11
 800c2f0:	d102      	bne.n	800c2f8 <USART_SetConfig+0x924>
 800c2f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2f6:	e016      	b.n	800c326 <USART_SetConfig+0x952>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e014      	b.n	800c326 <USART_SetConfig+0x952>
 800c2fc:	2380      	movs	r3, #128	@ 0x80
 800c2fe:	e012      	b.n	800c326 <USART_SetConfig+0x952>
 800c300:	2340      	movs	r3, #64	@ 0x40
 800c302:	e010      	b.n	800c326 <USART_SetConfig+0x952>
 800c304:	2320      	movs	r3, #32
 800c306:	e00e      	b.n	800c326 <USART_SetConfig+0x952>
 800c308:	2310      	movs	r3, #16
 800c30a:	e00c      	b.n	800c326 <USART_SetConfig+0x952>
 800c30c:	230c      	movs	r3, #12
 800c30e:	e00a      	b.n	800c326 <USART_SetConfig+0x952>
 800c310:	230a      	movs	r3, #10
 800c312:	e008      	b.n	800c326 <USART_SetConfig+0x952>
 800c314:	2308      	movs	r3, #8
 800c316:	e006      	b.n	800c326 <USART_SetConfig+0x952>
 800c318:	2306      	movs	r3, #6
 800c31a:	e004      	b.n	800c326 <USART_SetConfig+0x952>
 800c31c:	2304      	movs	r3, #4
 800c31e:	e002      	b.n	800c326 <USART_SetConfig+0x952>
 800c320:	2302      	movs	r3, #2
 800c322:	e000      	b.n	800c326 <USART_SetConfig+0x952>
 800c324:	2301      	movs	r3, #1
 800c326:	4a34      	ldr	r2, [pc, #208]	@ (800c3f8 <USART_SetConfig+0xa24>)
 800c328:	fbb2 f3f3 	udiv	r3, r2, r3
 800c32c:	005a      	lsls	r2, r3, #1
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	085b      	lsrs	r3, r3, #1
 800c334:	441a      	add	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c33e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c340:	e0bb      	b.n	800c4ba <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c346:	2b00      	cmp	r3, #0
 800c348:	d044      	beq.n	800c3d4 <USART_SetConfig+0xa00>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d03e      	beq.n	800c3d0 <USART_SetConfig+0x9fc>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c356:	2b02      	cmp	r3, #2
 800c358:	d038      	beq.n	800c3cc <USART_SetConfig+0x9f8>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d032      	beq.n	800c3c8 <USART_SetConfig+0x9f4>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c366:	2b04      	cmp	r3, #4
 800c368:	d02c      	beq.n	800c3c4 <USART_SetConfig+0x9f0>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c36e:	2b05      	cmp	r3, #5
 800c370:	d026      	beq.n	800c3c0 <USART_SetConfig+0x9ec>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c376:	2b06      	cmp	r3, #6
 800c378:	d020      	beq.n	800c3bc <USART_SetConfig+0x9e8>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c37e:	2b07      	cmp	r3, #7
 800c380:	d01a      	beq.n	800c3b8 <USART_SetConfig+0x9e4>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c386:	2b08      	cmp	r3, #8
 800c388:	d014      	beq.n	800c3b4 <USART_SetConfig+0x9e0>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c38e:	2b09      	cmp	r3, #9
 800c390:	d00e      	beq.n	800c3b0 <USART_SetConfig+0x9dc>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c396:	2b0a      	cmp	r3, #10
 800c398:	d008      	beq.n	800c3ac <USART_SetConfig+0x9d8>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c39e:	2b0b      	cmp	r3, #11
 800c3a0:	d102      	bne.n	800c3a8 <USART_SetConfig+0x9d4>
 800c3a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c3a6:	e016      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e014      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3ac:	2380      	movs	r3, #128	@ 0x80
 800c3ae:	e012      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3b0:	2340      	movs	r3, #64	@ 0x40
 800c3b2:	e010      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3b4:	2320      	movs	r3, #32
 800c3b6:	e00e      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3b8:	2310      	movs	r3, #16
 800c3ba:	e00c      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3bc:	230c      	movs	r3, #12
 800c3be:	e00a      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3c0:	230a      	movs	r3, #10
 800c3c2:	e008      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3c4:	2308      	movs	r3, #8
 800c3c6:	e006      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3c8:	2306      	movs	r3, #6
 800c3ca:	e004      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3cc:	2304      	movs	r3, #4
 800c3ce:	e002      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e000      	b.n	800c3d6 <USART_SetConfig+0xa02>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	4a09      	ldr	r2, [pc, #36]	@ (800c3fc <USART_SetConfig+0xa28>)
 800c3d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3dc:	005a      	lsls	r2, r3, #1
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	085b      	lsrs	r3, r3, #1
 800c3e4:	441a      	add	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c3f0:	e063      	b.n	800c4ba <USART_SetConfig+0xae6>
 800c3f2:	bf00      	nop
 800c3f4:	58024400 	.word	0x58024400
 800c3f8:	03d09000 	.word	0x03d09000
 800c3fc:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c404:	2b00      	cmp	r3, #0
 800c406:	d044      	beq.n	800c492 <USART_SetConfig+0xabe>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d03e      	beq.n	800c48e <USART_SetConfig+0xaba>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c414:	2b02      	cmp	r3, #2
 800c416:	d038      	beq.n	800c48a <USART_SetConfig+0xab6>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c41c:	2b03      	cmp	r3, #3
 800c41e:	d032      	beq.n	800c486 <USART_SetConfig+0xab2>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c424:	2b04      	cmp	r3, #4
 800c426:	d02c      	beq.n	800c482 <USART_SetConfig+0xaae>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c42c:	2b05      	cmp	r3, #5
 800c42e:	d026      	beq.n	800c47e <USART_SetConfig+0xaaa>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c434:	2b06      	cmp	r3, #6
 800c436:	d020      	beq.n	800c47a <USART_SetConfig+0xaa6>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c43c:	2b07      	cmp	r3, #7
 800c43e:	d01a      	beq.n	800c476 <USART_SetConfig+0xaa2>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c444:	2b08      	cmp	r3, #8
 800c446:	d014      	beq.n	800c472 <USART_SetConfig+0xa9e>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c44c:	2b09      	cmp	r3, #9
 800c44e:	d00e      	beq.n	800c46e <USART_SetConfig+0xa9a>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c454:	2b0a      	cmp	r3, #10
 800c456:	d008      	beq.n	800c46a <USART_SetConfig+0xa96>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45c:	2b0b      	cmp	r3, #11
 800c45e:	d102      	bne.n	800c466 <USART_SetConfig+0xa92>
 800c460:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c464:	e016      	b.n	800c494 <USART_SetConfig+0xac0>
 800c466:	2301      	movs	r3, #1
 800c468:	e014      	b.n	800c494 <USART_SetConfig+0xac0>
 800c46a:	2380      	movs	r3, #128	@ 0x80
 800c46c:	e012      	b.n	800c494 <USART_SetConfig+0xac0>
 800c46e:	2340      	movs	r3, #64	@ 0x40
 800c470:	e010      	b.n	800c494 <USART_SetConfig+0xac0>
 800c472:	2320      	movs	r3, #32
 800c474:	e00e      	b.n	800c494 <USART_SetConfig+0xac0>
 800c476:	2310      	movs	r3, #16
 800c478:	e00c      	b.n	800c494 <USART_SetConfig+0xac0>
 800c47a:	230c      	movs	r3, #12
 800c47c:	e00a      	b.n	800c494 <USART_SetConfig+0xac0>
 800c47e:	230a      	movs	r3, #10
 800c480:	e008      	b.n	800c494 <USART_SetConfig+0xac0>
 800c482:	2308      	movs	r3, #8
 800c484:	e006      	b.n	800c494 <USART_SetConfig+0xac0>
 800c486:	2306      	movs	r3, #6
 800c488:	e004      	b.n	800c494 <USART_SetConfig+0xac0>
 800c48a:	2304      	movs	r3, #4
 800c48c:	e002      	b.n	800c494 <USART_SetConfig+0xac0>
 800c48e:	2302      	movs	r3, #2
 800c490:	e000      	b.n	800c494 <USART_SetConfig+0xac0>
 800c492:	2301      	movs	r3, #1
 800c494:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800c498:	fbb2 f3f3 	udiv	r3, r2, r3
 800c49c:	005a      	lsls	r2, r3, #1
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	085b      	lsrs	r3, r3, #1
 800c4a4:	441a      	add	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c4b0:	e003      	b.n	800c4ba <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800c4b8:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4bc:	2b0f      	cmp	r3, #15
 800c4be:	d916      	bls.n	800c4ee <USART_SetConfig+0xb1a>
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4c6:	d212      	bcs.n	800c4ee <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	f023 030f 	bic.w	r3, r3, #15
 800c4d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d4:	085b      	lsrs	r3, r3, #1
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	f003 0307 	and.w	r3, r3, #7
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c4ea:	60da      	str	r2, [r3, #12]
 800c4ec:	e002      	b.n	800c4f4 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800c50c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800c510:	4618      	mov	r0, r3
 800c512:	3738      	adds	r7, #56	@ 0x38
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af02      	add	r7, sp, #8
 800c51e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c526:	f7f7 fdb5 	bl	8004094 <HAL_GetTick>
 800c52a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f003 0308 	and.w	r3, r3, #8
 800c536:	2b08      	cmp	r3, #8
 800c538:	d10e      	bne.n	800c558 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c53a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7ff fa0d 	bl	800b968 <USART_WaitOnFlagUntilTimeout>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d001      	beq.n	800c558 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c554:	2303      	movs	r3, #3
 800c556:	e01e      	b.n	800c596 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 0304 	and.w	r3, r3, #4
 800c562:	2b04      	cmp	r3, #4
 800c564:	d10e      	bne.n	800c584 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff f9f7 	bl	800b968 <USART_WaitOnFlagUntilTimeout>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d001      	beq.n	800c584 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c580:	2303      	movs	r3, #3
 800c582:	e008      	b.n	800c596 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b085      	sub	sp, #20
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d101      	bne.n	800c5b4 <HAL_USARTEx_EnableSlaveMode+0x16>
 800c5b0:	2302      	movs	r3, #2
 800c5b2:	e043      	b.n	800c63c <HAL_USARTEx_EnableSlaveMode+0x9e>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2202      	movs	r2, #2
 800c5c0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f022 0201 	bic.w	r2, r2, #1
 800c5da:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	685a      	ldr	r2, [r3, #4]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c5ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	689a      	ldr	r2, [r3, #8]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c5fa:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	685a      	ldr	r2, [r3, #4]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f042 0201 	orr.w	r2, r2, #1
 800c60a:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f042 0201 	orr.w	r2, r2, #1
 800c630:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d101      	bne.n	800c660 <HAL_USARTEx_ConfigNSS+0x18>
 800c65c:	2302      	movs	r3, #2
 800c65e:	e02a      	b.n	800c6b6 <HAL_USARTEx_ConfigNSS+0x6e>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2202      	movs	r2, #2
 800c66c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f022 0201 	bic.w	r2, r2, #1
 800c686:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	f023 0108 	bic.w	r1, r3, #8
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	430a      	orrs	r2, r1
 800c69a:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b085      	sub	sp, #20
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d101      	bne.n	800c6d8 <HAL_USARTEx_DisableFifoMode+0x16>
 800c6d4:	2302      	movs	r3, #2
 800c6d6:	e027      	b.n	800c728 <HAL_USARTEx_DisableFifoMode+0x66>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f022 0201 	bic.w	r2, r2, #1
 800c6fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c706:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2201      	movs	r2, #1
 800c71a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c744:	2b01      	cmp	r3, #1
 800c746:	d101      	bne.n	800c74c <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800c748:	2302      	movs	r3, #2
 800c74a:	e02d      	b.n	800c7a8 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2202      	movs	r2, #2
 800c758:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 0201 	bic.w	r2, r2, #1
 800c772:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	430a      	orrs	r2, r1
 800c786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f84f 	bl	800c82c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d101      	bne.n	800c7c8 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	e02d      	b.n	800c824 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2202      	movs	r2, #2
 800c7d4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f022 0201 	bic.w	r2, r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	430a      	orrs	r2, r1
 800c802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 f811 	bl	800c82c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2201      	movs	r2, #1
 800c816:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d106      	bne.n	800c84a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c848:	e02f      	b.n	800c8aa <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c84a:	2310      	movs	r3, #16
 800c84c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c84e:	2310      	movs	r3, #16
 800c850:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800c858:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	f003 0307 	and.w	r3, r3, #7
 800c860:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800c868:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	f003 0307 	and.w	r3, r3, #7
 800c870:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c872:	7bbb      	ldrb	r3, [r7, #14]
 800c874:	7b3a      	ldrb	r2, [r7, #12]
 800c876:	4910      	ldr	r1, [pc, #64]	@ (800c8b8 <USARTEx_SetNbDataToProcess+0x8c>)
 800c878:	5c8a      	ldrb	r2, [r1, r2]
 800c87a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800c87e:	7b3a      	ldrb	r2, [r7, #12]
 800c880:	490e      	ldr	r1, [pc, #56]	@ (800c8bc <USARTEx_SetNbDataToProcess+0x90>)
 800c882:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c884:	fb93 f3f2 	sdiv	r3, r3, r2
 800c888:	b29a      	uxth	r2, r3
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
 800c890:	7b7a      	ldrb	r2, [r7, #13]
 800c892:	4909      	ldr	r1, [pc, #36]	@ (800c8b8 <USARTEx_SetNbDataToProcess+0x8c>)
 800c894:	5c8a      	ldrb	r2, [r1, r2]
 800c896:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800c89a:	7b7a      	ldrb	r2, [r7, #13]
 800c89c:	4907      	ldr	r1, [pc, #28]	@ (800c8bc <USARTEx_SetNbDataToProcess+0x90>)
 800c89e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800c8aa:	bf00      	nop
 800c8ac:	3714      	adds	r7, #20
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	08011fb8 	.word	0x08011fb8
 800c8bc:	08011fc0 	.word	0x08011fc0

0800c8c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c8c0:	b084      	sub	sp, #16
 800c8c2:	b480      	push	{r7}
 800c8c4:	b085      	sub	sp, #20
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	f107 001c 	add.w	r0, r7, #28
 800c8ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c8d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c8da:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800c8de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800c8e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800c8e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	4b07      	ldr	r3, [pc, #28]	@ (800c910 <SDMMC_Init+0x50>)
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	b004      	add	sp, #16
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	ffc02c00 	.word	0xffc02c00

0800c914 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c922:	4618      	mov	r0, r3
 800c924:	370c      	adds	r7, #12
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c92e:	b480      	push	{r7}
 800c930:	b083      	sub	sp, #12
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f043 0203 	orr.w	r2, r3, #3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	370c      	adds	r7, #12
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c972:	b480      	push	{r7}
 800c974:	b083      	sub	sp, #12
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 0303 	and.w	r3, r3, #3
}
 800c982:	4618      	mov	r0, r3
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
	...

0800c990 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c9ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c9b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c9ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68da      	ldr	r2, [r3, #12]
 800c9c6:	4b06      	ldr	r3, [pc, #24]	@ (800c9e0 <SDMMC_SendCommand+0x50>)
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	431a      	orrs	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	fffee0c0 	.word	0xfffee0c0

0800c9e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	b2db      	uxtb	r3, r3
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c9fe:	b480      	push	{r7}
 800ca00:	b085      	sub	sp, #20
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	3314      	adds	r3, #20
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	4413      	add	r3, r2
 800ca12:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	685a      	ldr	r2, [r3, #4]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ca4a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ca50:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ca56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	431a      	orrs	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0

}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b088      	sub	sp, #32
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ca8a:	2310      	movs	r3, #16
 800ca8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca94:	2300      	movs	r3, #0
 800ca96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca9e:	f107 0308 	add.w	r3, r7, #8
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff ff73 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800caaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800caae:	2110      	movs	r1, #16
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fa5f 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cab8:	69fb      	ldr	r3, [r7, #28]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3720      	adds	r7, #32
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b088      	sub	sp, #32
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cad0:	2311      	movs	r3, #17
 800cad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cad4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cada:	2300      	movs	r3, #0
 800cadc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cae2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cae4:	f107 0308 	add.w	r3, r7, #8
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7ff ff50 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800caf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800caf4:	2111      	movs	r1, #17
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 fa3c 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cafc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cafe:	69fb      	ldr	r3, [r7, #28]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3720      	adds	r7, #32
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b088      	sub	sp, #32
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cb16:	2312      	movs	r3, #18
 800cb18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb20:	2300      	movs	r3, #0
 800cb22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb2a:	f107 0308 	add.w	r3, r7, #8
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f7ff ff2d 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cb36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb3a:	2112      	movs	r1, #18
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fa19 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cb42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb44:	69fb      	ldr	r3, [r7, #28]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3720      	adds	r7, #32
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b088      	sub	sp, #32
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cb5c:	2318      	movs	r3, #24
 800cb5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb66:	2300      	movs	r3, #0
 800cb68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb70:	f107 0308 	add.w	r3, r7, #8
 800cb74:	4619      	mov	r1, r3
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff ff0a 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cb7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb80:	2118      	movs	r1, #24
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f9f6 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cb88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb8a:	69fb      	ldr	r3, [r7, #28]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3720      	adds	r7, #32
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cba2:	2319      	movs	r3, #25
 800cba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cba6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbac:	2300      	movs	r3, #0
 800cbae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbb6:	f107 0308 	add.w	r3, r7, #8
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff fee7 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cbc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbc6:	2119      	movs	r1, #25
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f9d3 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cbce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbd0:	69fb      	ldr	r3, [r7, #28]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3720      	adds	r7, #32
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
	...

0800cbdc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b088      	sub	sp, #32
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cbe8:	230c      	movs	r3, #12
 800cbea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbfa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc14:	f107 0308 	add.w	r3, r7, #8
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff feb8 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cc20:	4a0b      	ldr	r2, [pc, #44]	@ (800cc50 <SDMMC_CmdStopTransfer+0x74>)
 800cc22:	210c      	movs	r1, #12
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 f9a5 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cc2a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc3e:	d101      	bne.n	800cc44 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800cc40:	2300      	movs	r3, #0
 800cc42:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800cc44:	69fb      	ldr	r3, [r7, #28]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3720      	adds	r7, #32
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	05f5e100 	.word	0x05f5e100

0800cc54 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cc62:	2307      	movs	r3, #7
 800cc64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc76:	f107 0308 	add.w	r3, r7, #8
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff fe87 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cc82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc86:	2107      	movs	r1, #7
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 f973 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cc8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc90:	69fb      	ldr	r3, [r7, #28]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3720      	adds	r7, #32
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b088      	sub	sp, #32
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cca2:	2300      	movs	r3, #0
 800cca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cca6:	2300      	movs	r3, #0
 800cca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ccb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccb8:	f107 0308 	add.w	r3, r7, #8
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff fe66 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fb97 	bl	800d3f8 <SDMMC_GetCmdError>
 800ccca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cccc:	69fb      	ldr	r3, [r7, #28]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3720      	adds	r7, #32
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b088      	sub	sp, #32
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ccde:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cce4:	2308      	movs	r3, #8
 800cce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cce8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ccec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ccf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccf8:	f107 0308 	add.w	r3, r7, #8
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f7ff fe46 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fb29 	bl	800d35c <SDMMC_GetCmdResp7>
 800cd0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd0c:	69fb      	ldr	r3, [r7, #28]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3720      	adds	r7, #32
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b088      	sub	sp, #32
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cd24:	2337      	movs	r3, #55	@ 0x37
 800cd26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd38:	f107 0308 	add.w	r3, r7, #8
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7ff fe26 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cd44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd48:	2137      	movs	r1, #55	@ 0x37
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f912 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cd50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd52:	69fb      	ldr	r3, [r7, #28]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3720      	adds	r7, #32
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cd6a:	2329      	movs	r3, #41	@ 0x29
 800cd6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd74:	2300      	movs	r3, #0
 800cd76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd7e:	f107 0308 	add.w	r3, r7, #8
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f7ff fe03 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fa2e 	bl	800d1ec <SDMMC_GetCmdResp3>
 800cd90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd92:	69fb      	ldr	r3, [r7, #28]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3720      	adds	r7, #32
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b088      	sub	sp, #32
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cdaa:	2306      	movs	r3, #6
 800cdac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cdb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cdbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdbe:	f107 0308 	add.w	r3, r7, #8
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7ff fde3 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cdca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdce:	2106      	movs	r1, #6
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 f8cf 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cdd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdd8:	69fb      	ldr	r3, [r7, #28]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3720      	adds	r7, #32
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b088      	sub	sp, #32
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cdea:	2300      	movs	r3, #0
 800cdec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cdee:	2333      	movs	r3, #51	@ 0x33
 800cdf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cdf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce02:	f107 0308 	add.w	r3, r7, #8
 800ce06:	4619      	mov	r1, r3
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff fdc1 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ce0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce12:	2133      	movs	r1, #51	@ 0x33
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 f8ad 	bl	800cf74 <SDMMC_GetCmdResp1>
 800ce1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce1c:	69fb      	ldr	r3, [r7, #28]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3720      	adds	r7, #32
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b088      	sub	sp, #32
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ce32:	2302      	movs	r3, #2
 800ce34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ce36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ce3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce46:	f107 0308 	add.w	r3, r7, #8
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7ff fd9f 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 f980 	bl	800d158 <SDMMC_GetCmdResp2>
 800ce58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce5a:	69fb      	ldr	r3, [r7, #28]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3720      	adds	r7, #32
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b088      	sub	sp, #32
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ce72:	2309      	movs	r3, #9
 800ce74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ce76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ce7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce86:	f107 0308 	add.w	r3, r7, #8
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f7ff fd7f 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 f960 	bl	800d158 <SDMMC_GetCmdResp2>
 800ce98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce9a:	69fb      	ldr	r3, [r7, #28]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3720      	adds	r7, #32
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b088      	sub	sp, #32
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ceb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ceba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cebc:	2300      	movs	r3, #0
 800cebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cec4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cec6:	f107 0308 	add.w	r3, r7, #8
 800ceca:	4619      	mov	r1, r3
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff fd5f 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	2103      	movs	r1, #3
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f9c8 	bl	800d26c <SDMMC_GetCmdResp6>
 800cedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cede:	69fb      	ldr	r3, [r7, #28]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3720      	adds	r7, #32
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b088      	sub	sp, #32
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cef6:	230d      	movs	r3, #13
 800cef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cefa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cefe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf00:	2300      	movs	r3, #0
 800cf02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf0a:	f107 0308 	add.w	r3, r7, #8
 800cf0e:	4619      	mov	r1, r3
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7ff fd3d 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cf16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf1a:	210d      	movs	r1, #13
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f000 f829 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cf22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf24:	69fb      	ldr	r3, [r7, #28]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3720      	adds	r7, #32
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b088      	sub	sp, #32
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cf36:	2300      	movs	r3, #0
 800cf38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cf3a:	230d      	movs	r3, #13
 800cf3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf44:	2300      	movs	r3, #0
 800cf46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf4e:	f107 0308 	add.w	r3, r7, #8
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7ff fd1b 	bl	800c990 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800cf5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf5e:	210d      	movs	r1, #13
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 f807 	bl	800cf74 <SDMMC_GetCmdResp1>
 800cf66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf68:	69fb      	ldr	r3, [r7, #28]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3720      	adds	r7, #32
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
	...

0800cf74 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b088      	sub	sp, #32
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	607a      	str	r2, [r7, #4]
 800cf80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cf82:	4b70      	ldr	r3, [pc, #448]	@ (800d144 <SDMMC_GetCmdResp1+0x1d0>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a70      	ldr	r2, [pc, #448]	@ (800d148 <SDMMC_GetCmdResp1+0x1d4>)
 800cf88:	fba2 2303 	umull	r2, r3, r2, r3
 800cf8c:	0a5a      	lsrs	r2, r3, #9
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	fb02 f303 	mul.w	r3, r2, r3
 800cf94:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	1e5a      	subs	r2, r3, #1
 800cf9a:	61fa      	str	r2, [r7, #28]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d102      	bne.n	800cfa6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfa0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cfa4:	e0c9      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfaa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	4b67      	ldr	r3, [pc, #412]	@ (800d14c <SDMMC_GetCmdResp1+0x1d8>)
 800cfb0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d0ef      	beq.n	800cf96 <SDMMC_GetCmdResp1+0x22>
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1ea      	bne.n	800cf96 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d004      	beq.n	800cfd6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2204      	movs	r2, #4
 800cfd0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cfd2:	2304      	movs	r3, #4
 800cfd4:	e0b1      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfda:	f003 0301 	and.w	r3, r3, #1
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d004      	beq.n	800cfec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e0a6      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	4a58      	ldr	r2, [pc, #352]	@ (800d150 <SDMMC_GetCmdResp1+0x1dc>)
 800cff0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f7ff fcf6 	bl	800c9e4 <SDMMC_GetCommandResponse>
 800cff8:	4603      	mov	r3, r0
 800cffa:	461a      	mov	r2, r3
 800cffc:	7afb      	ldrb	r3, [r7, #11]
 800cffe:	4293      	cmp	r3, r2
 800d000:	d001      	beq.n	800d006 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d002:	2301      	movs	r3, #1
 800d004:	e099      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d006:	2100      	movs	r1, #0
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f7ff fcf8 	bl	800c9fe <SDMMC_GetResponse>
 800d00e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d010:	697a      	ldr	r2, [r7, #20]
 800d012:	4b50      	ldr	r3, [pc, #320]	@ (800d154 <SDMMC_GetCmdResp1+0x1e0>)
 800d014:	4013      	ands	r3, r2
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d01a:	2300      	movs	r3, #0
 800d01c:	e08d      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	2b00      	cmp	r3, #0
 800d022:	da02      	bge.n	800d02a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d024:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d028:	e087      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d001      	beq.n	800d038 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d034:	2340      	movs	r3, #64	@ 0x40
 800d036:	e080      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d042:	2380      	movs	r3, #128	@ 0x80
 800d044:	e079      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d002      	beq.n	800d056 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d050:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d054:	e071      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d064:	e069      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d070:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d074:	e061      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d002      	beq.n	800d086 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d080:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d084:	e059      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d094:	e051      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d0a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d0a4:	e049      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d0b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d0b4:	e041      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d002      	beq.n	800d0c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d0c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0c4:	e039      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d002      	beq.n	800d0d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d0d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d0d4:	e031      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d0e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d0e4:	e029      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d0f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d0f4:	e021      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d100:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d104:	e019      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d110:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d114:	e011      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d120:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d124:	e009      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f003 0308 	and.w	r3, r3, #8
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d130:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d134:	e001      	b.n	800d13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d136:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3720      	adds	r7, #32
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	24000004 	.word	0x24000004
 800d148:	10624dd3 	.word	0x10624dd3
 800d14c:	00200045 	.word	0x00200045
 800d150:	002000c5 	.word	0x002000c5
 800d154:	fdffe008 	.word	0xfdffe008

0800d158 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d160:	4b1f      	ldr	r3, [pc, #124]	@ (800d1e0 <SDMMC_GetCmdResp2+0x88>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a1f      	ldr	r2, [pc, #124]	@ (800d1e4 <SDMMC_GetCmdResp2+0x8c>)
 800d166:	fba2 2303 	umull	r2, r3, r2, r3
 800d16a:	0a5b      	lsrs	r3, r3, #9
 800d16c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d170:	fb02 f303 	mul.w	r3, r2, r3
 800d174:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	1e5a      	subs	r2, r3, #1
 800d17a:	60fa      	str	r2, [r7, #12]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d102      	bne.n	800d186 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d180:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d184:	e026      	b.n	800d1d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d18a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d192:	2b00      	cmp	r3, #0
 800d194:	d0ef      	beq.n	800d176 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1ea      	bne.n	800d176 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d004      	beq.n	800d1b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2204      	movs	r2, #4
 800d1b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1b2:	2304      	movs	r3, #4
 800d1b4:	e00e      	b.n	800d1d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ba:	f003 0301 	and.w	r3, r3, #1
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d004      	beq.n	800d1cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e003      	b.n	800d1d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a06      	ldr	r2, [pc, #24]	@ (800d1e8 <SDMMC_GetCmdResp2+0x90>)
 800d1d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr
 800d1e0:	24000004 	.word	0x24000004
 800d1e4:	10624dd3 	.word	0x10624dd3
 800d1e8:	002000c5 	.word	0x002000c5

0800d1ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d1f4:	4b1a      	ldr	r3, [pc, #104]	@ (800d260 <SDMMC_GetCmdResp3+0x74>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a1a      	ldr	r2, [pc, #104]	@ (800d264 <SDMMC_GetCmdResp3+0x78>)
 800d1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d1fe:	0a5b      	lsrs	r3, r3, #9
 800d200:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d204:	fb02 f303 	mul.w	r3, r2, r3
 800d208:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	1e5a      	subs	r2, r3, #1
 800d20e:	60fa      	str	r2, [r7, #12]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d102      	bne.n	800d21a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d214:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d218:	e01b      	b.n	800d252 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d21e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d226:	2b00      	cmp	r3, #0
 800d228:	d0ef      	beq.n	800d20a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1ea      	bne.n	800d20a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d238:	f003 0304 	and.w	r3, r3, #4
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d004      	beq.n	800d24a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2204      	movs	r2, #4
 800d244:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d246:	2304      	movs	r3, #4
 800d248:	e003      	b.n	800d252 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a06      	ldr	r2, [pc, #24]	@ (800d268 <SDMMC_GetCmdResp3+0x7c>)
 800d24e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3714      	adds	r7, #20
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	24000004 	.word	0x24000004
 800d264:	10624dd3 	.word	0x10624dd3
 800d268:	002000c5 	.word	0x002000c5

0800d26c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b088      	sub	sp, #32
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	460b      	mov	r3, r1
 800d276:	607a      	str	r2, [r7, #4]
 800d278:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d27a:	4b35      	ldr	r3, [pc, #212]	@ (800d350 <SDMMC_GetCmdResp6+0xe4>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a35      	ldr	r2, [pc, #212]	@ (800d354 <SDMMC_GetCmdResp6+0xe8>)
 800d280:	fba2 2303 	umull	r2, r3, r2, r3
 800d284:	0a5b      	lsrs	r3, r3, #9
 800d286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d28a:	fb02 f303 	mul.w	r3, r2, r3
 800d28e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	1e5a      	subs	r2, r3, #1
 800d294:	61fa      	str	r2, [r7, #28]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d102      	bne.n	800d2a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d29a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d29e:	e052      	b.n	800d346 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2a4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d0ef      	beq.n	800d290 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1ea      	bne.n	800d290 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2be:	f003 0304 	and.w	r3, r3, #4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d004      	beq.n	800d2d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2204      	movs	r2, #4
 800d2ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2cc:	2304      	movs	r3, #4
 800d2ce:	e03a      	b.n	800d346 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2d4:	f003 0301 	and.w	r3, r3, #1
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d004      	beq.n	800d2e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e02f      	b.n	800d346 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f7ff fb7c 	bl	800c9e4 <SDMMC_GetCommandResponse>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	7afb      	ldrb	r3, [r7, #11]
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d001      	beq.n	800d2fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e025      	b.n	800d346 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	4a16      	ldr	r2, [pc, #88]	@ (800d358 <SDMMC_GetCmdResp6+0xec>)
 800d2fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d300:	2100      	movs	r1, #0
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f7ff fb7b 	bl	800c9fe <SDMMC_GetResponse>
 800d308:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d310:	2b00      	cmp	r3, #0
 800d312:	d106      	bne.n	800d322 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	0c1b      	lsrs	r3, r3, #16
 800d318:	b29a      	uxth	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d31e:	2300      	movs	r3, #0
 800d320:	e011      	b.n	800d346 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d002      	beq.n	800d332 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d32c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d330:	e009      	b.n	800d346 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d002      	beq.n	800d342 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d33c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d340:	e001      	b.n	800d346 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d346:	4618      	mov	r0, r3
 800d348:	3720      	adds	r7, #32
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	24000004 	.word	0x24000004
 800d354:	10624dd3 	.word	0x10624dd3
 800d358:	002000c5 	.word	0x002000c5

0800d35c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d364:	4b22      	ldr	r3, [pc, #136]	@ (800d3f0 <SDMMC_GetCmdResp7+0x94>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a22      	ldr	r2, [pc, #136]	@ (800d3f4 <SDMMC_GetCmdResp7+0x98>)
 800d36a:	fba2 2303 	umull	r2, r3, r2, r3
 800d36e:	0a5b      	lsrs	r3, r3, #9
 800d370:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d374:	fb02 f303 	mul.w	r3, r2, r3
 800d378:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	1e5a      	subs	r2, r3, #1
 800d37e:	60fa      	str	r2, [r7, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d102      	bne.n	800d38a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d384:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d388:	e02c      	b.n	800d3e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d38e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d396:	2b00      	cmp	r3, #0
 800d398:	d0ef      	beq.n	800d37a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1ea      	bne.n	800d37a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3a8:	f003 0304 	and.w	r3, r3, #4
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d004      	beq.n	800d3ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2204      	movs	r2, #4
 800d3b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3b6:	2304      	movs	r3, #4
 800d3b8:	e014      	b.n	800d3e4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3be:	f003 0301 	and.w	r3, r3, #1
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d004      	beq.n	800d3d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e009      	b.n	800d3e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2240      	movs	r2, #64	@ 0x40
 800d3e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d3e2:	2300      	movs	r3, #0

}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3714      	adds	r7, #20
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	24000004 	.word	0x24000004
 800d3f4:	10624dd3 	.word	0x10624dd3

0800d3f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d400:	4b11      	ldr	r3, [pc, #68]	@ (800d448 <SDMMC_GetCmdError+0x50>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a11      	ldr	r2, [pc, #68]	@ (800d44c <SDMMC_GetCmdError+0x54>)
 800d406:	fba2 2303 	umull	r2, r3, r2, r3
 800d40a:	0a5b      	lsrs	r3, r3, #9
 800d40c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d410:	fb02 f303 	mul.w	r3, r2, r3
 800d414:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	1e5a      	subs	r2, r3, #1
 800d41a:	60fa      	str	r2, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d102      	bne.n	800d426 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d420:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d424:	e009      	b.n	800d43a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d0f1      	beq.n	800d416 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a06      	ldr	r2, [pc, #24]	@ (800d450 <SDMMC_GetCmdError+0x58>)
 800d436:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800d438:	2300      	movs	r3, #0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3714      	adds	r7, #20
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	24000004 	.word	0x24000004
 800d44c:	10624dd3 	.word	0x10624dd3
 800d450:	002000c5 	.word	0x002000c5

0800d454 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d458:	4904      	ldr	r1, [pc, #16]	@ (800d46c <MX_FATFS_Init+0x18>)
 800d45a:	4805      	ldr	r0, [pc, #20]	@ (800d470 <MX_FATFS_Init+0x1c>)
 800d45c:	f000 f9e4 	bl	800d828 <FATFS_LinkDriver>
 800d460:	4603      	mov	r3, r0
 800d462:	461a      	mov	r2, r3
 800d464:	4b03      	ldr	r3, [pc, #12]	@ (800d474 <MX_FATFS_Init+0x20>)
 800d466:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d468:	bf00      	nop
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	24000768 	.word	0x24000768
 800d470:	08011fc8 	.word	0x08011fc8
 800d474:	24000764 	.word	0x24000764

0800d478 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d47e:	2300      	movs	r3, #0
 800d480:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d482:	f000 f879 	bl	800d578 <BSP_SD_IsDetected>
 800d486:	4603      	mov	r3, r0
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d001      	beq.n	800d490 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d48c:	2302      	movs	r3, #2
 800d48e:	e012      	b.n	800d4b6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d490:	480b      	ldr	r0, [pc, #44]	@ (800d4c0 <BSP_SD_Init+0x48>)
 800d492:	f7fa fe1f 	bl	80080d4 <HAL_SD_Init>
 800d496:	4603      	mov	r3, r0
 800d498:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d49a:	79fb      	ldrb	r3, [r7, #7]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d109      	bne.n	800d4b4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d4a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d4a4:	4806      	ldr	r0, [pc, #24]	@ (800d4c0 <BSP_SD_Init+0x48>)
 800d4a6:	f7fb fcdb 	bl	8008e60 <HAL_SD_ConfigWideBusOperation>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d001      	beq.n	800d4b4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d4b4:	79fb      	ldrb	r3, [r7, #7]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	24000368 	.word	0x24000368

0800d4c4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b088      	sub	sp, #32
 800d4c8:	af02      	add	r7, sp, #8
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	9300      	str	r3, [sp, #0]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	68f9      	ldr	r1, [r7, #12]
 800d4e0:	4806      	ldr	r0, [pc, #24]	@ (800d4fc <BSP_SD_ReadBlocks+0x38>)
 800d4e2:	f7fa ff17 	bl	8008314 <HAL_SD_ReadBlocks>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d001      	beq.n	800d4f0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3718      	adds	r7, #24
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	24000368 	.word	0x24000368

0800d500 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b088      	sub	sp, #32
 800d504:	af02      	add	r7, sp, #8
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
 800d50c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d50e:	2300      	movs	r3, #0
 800d510:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	9300      	str	r3, [sp, #0]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	68f9      	ldr	r1, [r7, #12]
 800d51c:	4806      	ldr	r0, [pc, #24]	@ (800d538 <BSP_SD_WriteBlocks+0x38>)
 800d51e:	f7fb f883 	bl	8008628 <HAL_SD_WriteBlocks>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d001      	beq.n	800d52c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d528:	2301      	movs	r3, #1
 800d52a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3718      	adds	r7, #24
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	24000368 	.word	0x24000368

0800d53c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d540:	4805      	ldr	r0, [pc, #20]	@ (800d558 <BSP_SD_GetCardState+0x1c>)
 800d542:	f7fb fd9f 	bl	8009084 <HAL_SD_GetCardState>
 800d546:	4603      	mov	r3, r0
 800d548:	2b04      	cmp	r3, #4
 800d54a:	bf14      	ite	ne
 800d54c:	2301      	movne	r3, #1
 800d54e:	2300      	moveq	r3, #0
 800d550:	b2db      	uxtb	r3, r3
}
 800d552:	4618      	mov	r0, r3
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	24000368 	.word	0x24000368

0800d55c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d564:	6879      	ldr	r1, [r7, #4]
 800d566:	4803      	ldr	r0, [pc, #12]	@ (800d574 <BSP_SD_GetCardInfo+0x18>)
 800d568:	f7fb fc4e 	bl	8008e08 <HAL_SD_GetCardInfo>
}
 800d56c:	bf00      	nop
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	24000368 	.word	0x24000368

0800d578 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d57e:	2301      	movs	r3, #1
 800d580:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d582:	f000 f80b 	bl	800d59c <BSP_PlatformIsDetected>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d58c:	2300      	movs	r3, #0
 800d58e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d590:	79fb      	ldrb	r3, [r7, #7]
 800d592:	b2db      	uxtb	r3, r3
}
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d5a6:	2180      	movs	r1, #128	@ 0x80
 800d5a8:	4806      	ldr	r0, [pc, #24]	@ (800d5c4 <BSP_PlatformIsDetected+0x28>)
 800d5aa:	f7f7 f8a7 	bl	80046fc <HAL_GPIO_ReadPin>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d001      	beq.n	800d5b8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d5b8:	79fb      	ldrb	r3, [r7, #7]
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	58020800 	.word	0x58020800

0800d5c8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d600 <SD_CheckStatus+0x38>)
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d5d8:	f7ff ffb0 	bl	800d53c <BSP_SD_GetCardState>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d107      	bne.n	800d5f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d5e2:	4b07      	ldr	r3, [pc, #28]	@ (800d600 <SD_CheckStatus+0x38>)
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	f023 0301 	bic.w	r3, r3, #1
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	4b04      	ldr	r3, [pc, #16]	@ (800d600 <SD_CheckStatus+0x38>)
 800d5f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d5f2:	4b03      	ldr	r3, [pc, #12]	@ (800d600 <SD_CheckStatus+0x38>)
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	b2db      	uxtb	r3, r3
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	24000019 	.word	0x24000019

0800d604 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	4603      	mov	r3, r0
 800d60c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d60e:	4b0b      	ldr	r3, [pc, #44]	@ (800d63c <SD_initialize+0x38>)
 800d610:	2201      	movs	r2, #1
 800d612:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d614:	f7ff ff30 	bl	800d478 <BSP_SD_Init>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d107      	bne.n	800d62e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d61e:	79fb      	ldrb	r3, [r7, #7]
 800d620:	4618      	mov	r0, r3
 800d622:	f7ff ffd1 	bl	800d5c8 <SD_CheckStatus>
 800d626:	4603      	mov	r3, r0
 800d628:	461a      	mov	r2, r3
 800d62a:	4b04      	ldr	r3, [pc, #16]	@ (800d63c <SD_initialize+0x38>)
 800d62c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d62e:	4b03      	ldr	r3, [pc, #12]	@ (800d63c <SD_initialize+0x38>)
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	b2db      	uxtb	r3, r3
}
 800d634:	4618      	mov	r0, r3
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	24000019 	.word	0x24000019

0800d640 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	4603      	mov	r3, r0
 800d648:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d64a:	79fb      	ldrb	r3, [r7, #7]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7ff ffbb 	bl	800d5c8 <SD_CheckStatus>
 800d652:	4603      	mov	r3, r0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af00      	add	r7, sp, #0
 800d662:	60b9      	str	r1, [r7, #8]
 800d664:	607a      	str	r2, [r7, #4]
 800d666:	603b      	str	r3, [r7, #0]
 800d668:	4603      	mov	r3, r0
 800d66a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d670:	f04f 33ff 	mov.w	r3, #4294967295
 800d674:	683a      	ldr	r2, [r7, #0]
 800d676:	6879      	ldr	r1, [r7, #4]
 800d678:	68b8      	ldr	r0, [r7, #8]
 800d67a:	f7ff ff23 	bl	800d4c4 <BSP_SD_ReadBlocks>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d107      	bne.n	800d694 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d684:	bf00      	nop
 800d686:	f7ff ff59 	bl	800d53c <BSP_SD_GetCardState>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1fa      	bne.n	800d686 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d690:	2300      	movs	r3, #0
 800d692:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d694:	7dfb      	ldrb	r3, [r7, #23]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3718      	adds	r7, #24
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b086      	sub	sp, #24
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
 800d6a8:	603b      	str	r3, [r7, #0]
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	6879      	ldr	r1, [r7, #4]
 800d6ba:	68b8      	ldr	r0, [r7, #8]
 800d6bc:	f7ff ff20 	bl	800d500 <BSP_SD_WriteBlocks>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d107      	bne.n	800d6d6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d6c6:	bf00      	nop
 800d6c8:	f7ff ff38 	bl	800d53c <BSP_SD_GetCardState>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1fa      	bne.n	800d6c8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3718      	adds	r7, #24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b08c      	sub	sp, #48	@ 0x30
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	603a      	str	r2, [r7, #0]
 800d6ea:	71fb      	strb	r3, [r7, #7]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d6f6:	4b25      	ldr	r3, [pc, #148]	@ (800d78c <SD_ioctl+0xac>)
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	f003 0301 	and.w	r3, r3, #1
 800d700:	2b00      	cmp	r3, #0
 800d702:	d001      	beq.n	800d708 <SD_ioctl+0x28>
 800d704:	2303      	movs	r3, #3
 800d706:	e03c      	b.n	800d782 <SD_ioctl+0xa2>

  switch (cmd)
 800d708:	79bb      	ldrb	r3, [r7, #6]
 800d70a:	2b03      	cmp	r3, #3
 800d70c:	d834      	bhi.n	800d778 <SD_ioctl+0x98>
 800d70e:	a201      	add	r2, pc, #4	@ (adr r2, 800d714 <SD_ioctl+0x34>)
 800d710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d714:	0800d725 	.word	0x0800d725
 800d718:	0800d72d 	.word	0x0800d72d
 800d71c:	0800d745 	.word	0x0800d745
 800d720:	0800d75f 	.word	0x0800d75f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d72a:	e028      	b.n	800d77e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d72c:	f107 0308 	add.w	r3, r7, #8
 800d730:	4618      	mov	r0, r3
 800d732:	f7ff ff13 	bl	800d55c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d736:	6a3a      	ldr	r2, [r7, #32]
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d73c:	2300      	movs	r3, #0
 800d73e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d742:	e01c      	b.n	800d77e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d744:	f107 0308 	add.w	r3, r7, #8
 800d748:	4618      	mov	r0, r3
 800d74a:	f7ff ff07 	bl	800d55c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d750:	b29a      	uxth	r2, r3
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d756:	2300      	movs	r3, #0
 800d758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d75c:	e00f      	b.n	800d77e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d75e:	f107 0308 	add.w	r3, r7, #8
 800d762:	4618      	mov	r0, r3
 800d764:	f7ff fefa 	bl	800d55c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76a:	0a5a      	lsrs	r2, r3, #9
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d770:	2300      	movs	r3, #0
 800d772:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d776:	e002      	b.n	800d77e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d778:	2304      	movs	r3, #4
 800d77a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d77e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d782:	4618      	mov	r0, r3
 800d784:	3730      	adds	r7, #48	@ 0x30
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	24000019 	.word	0x24000019

0800d790 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d790:	b480      	push	{r7}
 800d792:	b087      	sub	sp, #28
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	4613      	mov	r3, r2
 800d79c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d7a6:	4b1f      	ldr	r3, [pc, #124]	@ (800d824 <FATFS_LinkDriverEx+0x94>)
 800d7a8:	7a5b      	ldrb	r3, [r3, #9]
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d131      	bne.n	800d814 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d7b0:	4b1c      	ldr	r3, [pc, #112]	@ (800d824 <FATFS_LinkDriverEx+0x94>)
 800d7b2:	7a5b      	ldrb	r3, [r3, #9]
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d824 <FATFS_LinkDriverEx+0x94>)
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d7be:	4b19      	ldr	r3, [pc, #100]	@ (800d824 <FATFS_LinkDriverEx+0x94>)
 800d7c0:	7a5b      	ldrb	r3, [r3, #9]
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	4a17      	ldr	r2, [pc, #92]	@ (800d824 <FATFS_LinkDriverEx+0x94>)
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4413      	add	r3, r2
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d7ce:	4b15      	ldr	r3, [pc, #84]	@ (800d824 <FATFS_LinkDriverEx+0x94>)
 800d7d0:	7a5b      	ldrb	r3, [r3, #9]
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	4b13      	ldr	r3, [pc, #76]	@ (800d824 <FATFS_LinkDriverEx+0x94>)
 800d7d8:	4413      	add	r3, r2
 800d7da:	79fa      	ldrb	r2, [r7, #7]
 800d7dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d7de:	4b11      	ldr	r3, [pc, #68]	@ (800d824 <FATFS_LinkDriverEx+0x94>)
 800d7e0:	7a5b      	ldrb	r3, [r3, #9]
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	1c5a      	adds	r2, r3, #1
 800d7e6:	b2d1      	uxtb	r1, r2
 800d7e8:	4a0e      	ldr	r2, [pc, #56]	@ (800d824 <FATFS_LinkDriverEx+0x94>)
 800d7ea:	7251      	strb	r1, [r2, #9]
 800d7ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d7ee:	7dbb      	ldrb	r3, [r7, #22]
 800d7f0:	3330      	adds	r3, #48	@ 0x30
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	223a      	movs	r2, #58	@ 0x3a
 800d7fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	3302      	adds	r3, #2
 800d804:	222f      	movs	r2, #47	@ 0x2f
 800d806:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	3303      	adds	r3, #3
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d810:	2300      	movs	r3, #0
 800d812:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d814:	7dfb      	ldrb	r3, [r7, #23]
}
 800d816:	4618      	mov	r0, r3
 800d818:	371c      	adds	r7, #28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	2400076c 	.word	0x2400076c

0800d828 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d832:	2200      	movs	r2, #0
 800d834:	6839      	ldr	r1, [r7, #0]
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f7ff ffaa 	bl	800d790 <FATFS_LinkDriverEx>
 800d83c:	4603      	mov	r3, r0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <__cvt>:
 800d846:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d848:	ed2d 8b02 	vpush	{d8}
 800d84c:	eeb0 8b40 	vmov.f64	d8, d0
 800d850:	b085      	sub	sp, #20
 800d852:	4617      	mov	r7, r2
 800d854:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d858:	ee18 2a90 	vmov	r2, s17
 800d85c:	f025 0520 	bic.w	r5, r5, #32
 800d860:	2a00      	cmp	r2, #0
 800d862:	bfb6      	itet	lt
 800d864:	222d      	movlt	r2, #45	@ 0x2d
 800d866:	2200      	movge	r2, #0
 800d868:	eeb1 8b40 	vneglt.f64	d8, d0
 800d86c:	2d46      	cmp	r5, #70	@ 0x46
 800d86e:	460c      	mov	r4, r1
 800d870:	701a      	strb	r2, [r3, #0]
 800d872:	d004      	beq.n	800d87e <__cvt+0x38>
 800d874:	2d45      	cmp	r5, #69	@ 0x45
 800d876:	d100      	bne.n	800d87a <__cvt+0x34>
 800d878:	3401      	adds	r4, #1
 800d87a:	2102      	movs	r1, #2
 800d87c:	e000      	b.n	800d880 <__cvt+0x3a>
 800d87e:	2103      	movs	r1, #3
 800d880:	ab03      	add	r3, sp, #12
 800d882:	9301      	str	r3, [sp, #4]
 800d884:	ab02      	add	r3, sp, #8
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	4622      	mov	r2, r4
 800d88a:	4633      	mov	r3, r6
 800d88c:	eeb0 0b48 	vmov.f64	d0, d8
 800d890:	f001 f966 	bl	800eb60 <_dtoa_r>
 800d894:	2d47      	cmp	r5, #71	@ 0x47
 800d896:	d114      	bne.n	800d8c2 <__cvt+0x7c>
 800d898:	07fb      	lsls	r3, r7, #31
 800d89a:	d50a      	bpl.n	800d8b2 <__cvt+0x6c>
 800d89c:	1902      	adds	r2, r0, r4
 800d89e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a6:	bf08      	it	eq
 800d8a8:	9203      	streq	r2, [sp, #12]
 800d8aa:	2130      	movs	r1, #48	@ 0x30
 800d8ac:	9b03      	ldr	r3, [sp, #12]
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d319      	bcc.n	800d8e6 <__cvt+0xa0>
 800d8b2:	9b03      	ldr	r3, [sp, #12]
 800d8b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8b6:	1a1b      	subs	r3, r3, r0
 800d8b8:	6013      	str	r3, [r2, #0]
 800d8ba:	b005      	add	sp, #20
 800d8bc:	ecbd 8b02 	vpop	{d8}
 800d8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8c2:	2d46      	cmp	r5, #70	@ 0x46
 800d8c4:	eb00 0204 	add.w	r2, r0, r4
 800d8c8:	d1e9      	bne.n	800d89e <__cvt+0x58>
 800d8ca:	7803      	ldrb	r3, [r0, #0]
 800d8cc:	2b30      	cmp	r3, #48	@ 0x30
 800d8ce:	d107      	bne.n	800d8e0 <__cvt+0x9a>
 800d8d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d8:	bf1c      	itt	ne
 800d8da:	f1c4 0401 	rsbne	r4, r4, #1
 800d8de:	6034      	strne	r4, [r6, #0]
 800d8e0:	6833      	ldr	r3, [r6, #0]
 800d8e2:	441a      	add	r2, r3
 800d8e4:	e7db      	b.n	800d89e <__cvt+0x58>
 800d8e6:	1c5c      	adds	r4, r3, #1
 800d8e8:	9403      	str	r4, [sp, #12]
 800d8ea:	7019      	strb	r1, [r3, #0]
 800d8ec:	e7de      	b.n	800d8ac <__cvt+0x66>

0800d8ee <__exponent>:
 800d8ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8f0:	2900      	cmp	r1, #0
 800d8f2:	bfba      	itte	lt
 800d8f4:	4249      	neglt	r1, r1
 800d8f6:	232d      	movlt	r3, #45	@ 0x2d
 800d8f8:	232b      	movge	r3, #43	@ 0x2b
 800d8fa:	2909      	cmp	r1, #9
 800d8fc:	7002      	strb	r2, [r0, #0]
 800d8fe:	7043      	strb	r3, [r0, #1]
 800d900:	dd29      	ble.n	800d956 <__exponent+0x68>
 800d902:	f10d 0307 	add.w	r3, sp, #7
 800d906:	461d      	mov	r5, r3
 800d908:	270a      	movs	r7, #10
 800d90a:	461a      	mov	r2, r3
 800d90c:	fbb1 f6f7 	udiv	r6, r1, r7
 800d910:	fb07 1416 	mls	r4, r7, r6, r1
 800d914:	3430      	adds	r4, #48	@ 0x30
 800d916:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d91a:	460c      	mov	r4, r1
 800d91c:	2c63      	cmp	r4, #99	@ 0x63
 800d91e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d922:	4631      	mov	r1, r6
 800d924:	dcf1      	bgt.n	800d90a <__exponent+0x1c>
 800d926:	3130      	adds	r1, #48	@ 0x30
 800d928:	1e94      	subs	r4, r2, #2
 800d92a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d92e:	1c41      	adds	r1, r0, #1
 800d930:	4623      	mov	r3, r4
 800d932:	42ab      	cmp	r3, r5
 800d934:	d30a      	bcc.n	800d94c <__exponent+0x5e>
 800d936:	f10d 0309 	add.w	r3, sp, #9
 800d93a:	1a9b      	subs	r3, r3, r2
 800d93c:	42ac      	cmp	r4, r5
 800d93e:	bf88      	it	hi
 800d940:	2300      	movhi	r3, #0
 800d942:	3302      	adds	r3, #2
 800d944:	4403      	add	r3, r0
 800d946:	1a18      	subs	r0, r3, r0
 800d948:	b003      	add	sp, #12
 800d94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d94c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d950:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d954:	e7ed      	b.n	800d932 <__exponent+0x44>
 800d956:	2330      	movs	r3, #48	@ 0x30
 800d958:	3130      	adds	r1, #48	@ 0x30
 800d95a:	7083      	strb	r3, [r0, #2]
 800d95c:	70c1      	strb	r1, [r0, #3]
 800d95e:	1d03      	adds	r3, r0, #4
 800d960:	e7f1      	b.n	800d946 <__exponent+0x58>
 800d962:	0000      	movs	r0, r0
 800d964:	0000      	movs	r0, r0
	...

0800d968 <_printf_float>:
 800d968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96c:	b08d      	sub	sp, #52	@ 0x34
 800d96e:	460c      	mov	r4, r1
 800d970:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d974:	4616      	mov	r6, r2
 800d976:	461f      	mov	r7, r3
 800d978:	4605      	mov	r5, r0
 800d97a:	f000 ffdb 	bl	800e934 <_localeconv_r>
 800d97e:	f8d0 b000 	ldr.w	fp, [r0]
 800d982:	4658      	mov	r0, fp
 800d984:	f7f2 fd14 	bl	80003b0 <strlen>
 800d988:	2300      	movs	r3, #0
 800d98a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d98c:	f8d8 3000 	ldr.w	r3, [r8]
 800d990:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d994:	6822      	ldr	r2, [r4, #0]
 800d996:	9005      	str	r0, [sp, #20]
 800d998:	3307      	adds	r3, #7
 800d99a:	f023 0307 	bic.w	r3, r3, #7
 800d99e:	f103 0108 	add.w	r1, r3, #8
 800d9a2:	f8c8 1000 	str.w	r1, [r8]
 800d9a6:	ed93 0b00 	vldr	d0, [r3]
 800d9aa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800dc08 <_printf_float+0x2a0>
 800d9ae:	eeb0 7bc0 	vabs.f64	d7, d0
 800d9b2:	eeb4 7b46 	vcmp.f64	d7, d6
 800d9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800d9be:	dd24      	ble.n	800da0a <_printf_float+0xa2>
 800d9c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c8:	d502      	bpl.n	800d9d0 <_printf_float+0x68>
 800d9ca:	232d      	movs	r3, #45	@ 0x2d
 800d9cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9d0:	498f      	ldr	r1, [pc, #572]	@ (800dc10 <_printf_float+0x2a8>)
 800d9d2:	4b90      	ldr	r3, [pc, #576]	@ (800dc14 <_printf_float+0x2ac>)
 800d9d4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800d9d8:	bf94      	ite	ls
 800d9da:	4688      	movls	r8, r1
 800d9dc:	4698      	movhi	r8, r3
 800d9de:	f022 0204 	bic.w	r2, r2, #4
 800d9e2:	2303      	movs	r3, #3
 800d9e4:	6123      	str	r3, [r4, #16]
 800d9e6:	6022      	str	r2, [r4, #0]
 800d9e8:	f04f 0a00 	mov.w	sl, #0
 800d9ec:	9700      	str	r7, [sp, #0]
 800d9ee:	4633      	mov	r3, r6
 800d9f0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f000 f9d1 	bl	800dd9c <_printf_common>
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	f040 8089 	bne.w	800db12 <_printf_float+0x1aa>
 800da00:	f04f 30ff 	mov.w	r0, #4294967295
 800da04:	b00d      	add	sp, #52	@ 0x34
 800da06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da0a:	eeb4 0b40 	vcmp.f64	d0, d0
 800da0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da12:	d709      	bvc.n	800da28 <_printf_float+0xc0>
 800da14:	ee10 3a90 	vmov	r3, s1
 800da18:	2b00      	cmp	r3, #0
 800da1a:	bfbc      	itt	lt
 800da1c:	232d      	movlt	r3, #45	@ 0x2d
 800da1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800da22:	497d      	ldr	r1, [pc, #500]	@ (800dc18 <_printf_float+0x2b0>)
 800da24:	4b7d      	ldr	r3, [pc, #500]	@ (800dc1c <_printf_float+0x2b4>)
 800da26:	e7d5      	b.n	800d9d4 <_printf_float+0x6c>
 800da28:	6863      	ldr	r3, [r4, #4]
 800da2a:	1c59      	adds	r1, r3, #1
 800da2c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800da30:	d139      	bne.n	800daa6 <_printf_float+0x13e>
 800da32:	2306      	movs	r3, #6
 800da34:	6063      	str	r3, [r4, #4]
 800da36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800da3a:	2300      	movs	r3, #0
 800da3c:	6022      	str	r2, [r4, #0]
 800da3e:	9303      	str	r3, [sp, #12]
 800da40:	ab0a      	add	r3, sp, #40	@ 0x28
 800da42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800da46:	ab09      	add	r3, sp, #36	@ 0x24
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	6861      	ldr	r1, [r4, #4]
 800da4c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800da50:	4628      	mov	r0, r5
 800da52:	f7ff fef8 	bl	800d846 <__cvt>
 800da56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800da5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da5c:	4680      	mov	r8, r0
 800da5e:	d129      	bne.n	800dab4 <_printf_float+0x14c>
 800da60:	1cc8      	adds	r0, r1, #3
 800da62:	db02      	blt.n	800da6a <_printf_float+0x102>
 800da64:	6863      	ldr	r3, [r4, #4]
 800da66:	4299      	cmp	r1, r3
 800da68:	dd41      	ble.n	800daee <_printf_float+0x186>
 800da6a:	f1a9 0902 	sub.w	r9, r9, #2
 800da6e:	fa5f f989 	uxtb.w	r9, r9
 800da72:	3901      	subs	r1, #1
 800da74:	464a      	mov	r2, r9
 800da76:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800da7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800da7c:	f7ff ff37 	bl	800d8ee <__exponent>
 800da80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da82:	1813      	adds	r3, r2, r0
 800da84:	2a01      	cmp	r2, #1
 800da86:	4682      	mov	sl, r0
 800da88:	6123      	str	r3, [r4, #16]
 800da8a:	dc02      	bgt.n	800da92 <_printf_float+0x12a>
 800da8c:	6822      	ldr	r2, [r4, #0]
 800da8e:	07d2      	lsls	r2, r2, #31
 800da90:	d501      	bpl.n	800da96 <_printf_float+0x12e>
 800da92:	3301      	adds	r3, #1
 800da94:	6123      	str	r3, [r4, #16]
 800da96:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d0a6      	beq.n	800d9ec <_printf_float+0x84>
 800da9e:	232d      	movs	r3, #45	@ 0x2d
 800daa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daa4:	e7a2      	b.n	800d9ec <_printf_float+0x84>
 800daa6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800daaa:	d1c4      	bne.n	800da36 <_printf_float+0xce>
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1c2      	bne.n	800da36 <_printf_float+0xce>
 800dab0:	2301      	movs	r3, #1
 800dab2:	e7bf      	b.n	800da34 <_printf_float+0xcc>
 800dab4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800dab8:	d9db      	bls.n	800da72 <_printf_float+0x10a>
 800daba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800dabe:	d118      	bne.n	800daf2 <_printf_float+0x18a>
 800dac0:	2900      	cmp	r1, #0
 800dac2:	6863      	ldr	r3, [r4, #4]
 800dac4:	dd0b      	ble.n	800dade <_printf_float+0x176>
 800dac6:	6121      	str	r1, [r4, #16]
 800dac8:	b913      	cbnz	r3, 800dad0 <_printf_float+0x168>
 800daca:	6822      	ldr	r2, [r4, #0]
 800dacc:	07d0      	lsls	r0, r2, #31
 800dace:	d502      	bpl.n	800dad6 <_printf_float+0x16e>
 800dad0:	3301      	adds	r3, #1
 800dad2:	440b      	add	r3, r1
 800dad4:	6123      	str	r3, [r4, #16]
 800dad6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dad8:	f04f 0a00 	mov.w	sl, #0
 800dadc:	e7db      	b.n	800da96 <_printf_float+0x12e>
 800dade:	b913      	cbnz	r3, 800dae6 <_printf_float+0x17e>
 800dae0:	6822      	ldr	r2, [r4, #0]
 800dae2:	07d2      	lsls	r2, r2, #31
 800dae4:	d501      	bpl.n	800daea <_printf_float+0x182>
 800dae6:	3302      	adds	r3, #2
 800dae8:	e7f4      	b.n	800dad4 <_printf_float+0x16c>
 800daea:	2301      	movs	r3, #1
 800daec:	e7f2      	b.n	800dad4 <_printf_float+0x16c>
 800daee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800daf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daf4:	4299      	cmp	r1, r3
 800daf6:	db05      	blt.n	800db04 <_printf_float+0x19c>
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	6121      	str	r1, [r4, #16]
 800dafc:	07d8      	lsls	r0, r3, #31
 800dafe:	d5ea      	bpl.n	800dad6 <_printf_float+0x16e>
 800db00:	1c4b      	adds	r3, r1, #1
 800db02:	e7e7      	b.n	800dad4 <_printf_float+0x16c>
 800db04:	2900      	cmp	r1, #0
 800db06:	bfd4      	ite	le
 800db08:	f1c1 0202 	rsble	r2, r1, #2
 800db0c:	2201      	movgt	r2, #1
 800db0e:	4413      	add	r3, r2
 800db10:	e7e0      	b.n	800dad4 <_printf_float+0x16c>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	055a      	lsls	r2, r3, #21
 800db16:	d407      	bmi.n	800db28 <_printf_float+0x1c0>
 800db18:	6923      	ldr	r3, [r4, #16]
 800db1a:	4642      	mov	r2, r8
 800db1c:	4631      	mov	r1, r6
 800db1e:	4628      	mov	r0, r5
 800db20:	47b8      	blx	r7
 800db22:	3001      	adds	r0, #1
 800db24:	d12a      	bne.n	800db7c <_printf_float+0x214>
 800db26:	e76b      	b.n	800da00 <_printf_float+0x98>
 800db28:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800db2c:	f240 80e0 	bls.w	800dcf0 <_printf_float+0x388>
 800db30:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800db34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3c:	d133      	bne.n	800dba6 <_printf_float+0x23e>
 800db3e:	4a38      	ldr	r2, [pc, #224]	@ (800dc20 <_printf_float+0x2b8>)
 800db40:	2301      	movs	r3, #1
 800db42:	4631      	mov	r1, r6
 800db44:	4628      	mov	r0, r5
 800db46:	47b8      	blx	r7
 800db48:	3001      	adds	r0, #1
 800db4a:	f43f af59 	beq.w	800da00 <_printf_float+0x98>
 800db4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800db52:	4543      	cmp	r3, r8
 800db54:	db02      	blt.n	800db5c <_printf_float+0x1f4>
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	07d8      	lsls	r0, r3, #31
 800db5a:	d50f      	bpl.n	800db7c <_printf_float+0x214>
 800db5c:	9b05      	ldr	r3, [sp, #20]
 800db5e:	465a      	mov	r2, fp
 800db60:	4631      	mov	r1, r6
 800db62:	4628      	mov	r0, r5
 800db64:	47b8      	blx	r7
 800db66:	3001      	adds	r0, #1
 800db68:	f43f af4a 	beq.w	800da00 <_printf_float+0x98>
 800db6c:	f04f 0900 	mov.w	r9, #0
 800db70:	f108 38ff 	add.w	r8, r8, #4294967295
 800db74:	f104 0a1a 	add.w	sl, r4, #26
 800db78:	45c8      	cmp	r8, r9
 800db7a:	dc09      	bgt.n	800db90 <_printf_float+0x228>
 800db7c:	6823      	ldr	r3, [r4, #0]
 800db7e:	079b      	lsls	r3, r3, #30
 800db80:	f100 8107 	bmi.w	800dd92 <_printf_float+0x42a>
 800db84:	68e0      	ldr	r0, [r4, #12]
 800db86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db88:	4298      	cmp	r0, r3
 800db8a:	bfb8      	it	lt
 800db8c:	4618      	movlt	r0, r3
 800db8e:	e739      	b.n	800da04 <_printf_float+0x9c>
 800db90:	2301      	movs	r3, #1
 800db92:	4652      	mov	r2, sl
 800db94:	4631      	mov	r1, r6
 800db96:	4628      	mov	r0, r5
 800db98:	47b8      	blx	r7
 800db9a:	3001      	adds	r0, #1
 800db9c:	f43f af30 	beq.w	800da00 <_printf_float+0x98>
 800dba0:	f109 0901 	add.w	r9, r9, #1
 800dba4:	e7e8      	b.n	800db78 <_printf_float+0x210>
 800dba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	dc3b      	bgt.n	800dc24 <_printf_float+0x2bc>
 800dbac:	4a1c      	ldr	r2, [pc, #112]	@ (800dc20 <_printf_float+0x2b8>)
 800dbae:	2301      	movs	r3, #1
 800dbb0:	4631      	mov	r1, r6
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	47b8      	blx	r7
 800dbb6:	3001      	adds	r0, #1
 800dbb8:	f43f af22 	beq.w	800da00 <_printf_float+0x98>
 800dbbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dbc0:	ea59 0303 	orrs.w	r3, r9, r3
 800dbc4:	d102      	bne.n	800dbcc <_printf_float+0x264>
 800dbc6:	6823      	ldr	r3, [r4, #0]
 800dbc8:	07d9      	lsls	r1, r3, #31
 800dbca:	d5d7      	bpl.n	800db7c <_printf_float+0x214>
 800dbcc:	9b05      	ldr	r3, [sp, #20]
 800dbce:	465a      	mov	r2, fp
 800dbd0:	4631      	mov	r1, r6
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	47b8      	blx	r7
 800dbd6:	3001      	adds	r0, #1
 800dbd8:	f43f af12 	beq.w	800da00 <_printf_float+0x98>
 800dbdc:	f04f 0a00 	mov.w	sl, #0
 800dbe0:	f104 0b1a 	add.w	fp, r4, #26
 800dbe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbe6:	425b      	negs	r3, r3
 800dbe8:	4553      	cmp	r3, sl
 800dbea:	dc01      	bgt.n	800dbf0 <_printf_float+0x288>
 800dbec:	464b      	mov	r3, r9
 800dbee:	e794      	b.n	800db1a <_printf_float+0x1b2>
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	465a      	mov	r2, fp
 800dbf4:	4631      	mov	r1, r6
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	47b8      	blx	r7
 800dbfa:	3001      	adds	r0, #1
 800dbfc:	f43f af00 	beq.w	800da00 <_printf_float+0x98>
 800dc00:	f10a 0a01 	add.w	sl, sl, #1
 800dc04:	e7ee      	b.n	800dbe4 <_printf_float+0x27c>
 800dc06:	bf00      	nop
 800dc08:	ffffffff 	.word	0xffffffff
 800dc0c:	7fefffff 	.word	0x7fefffff
 800dc10:	08011fdc 	.word	0x08011fdc
 800dc14:	08011fe0 	.word	0x08011fe0
 800dc18:	08011fe4 	.word	0x08011fe4
 800dc1c:	08011fe8 	.word	0x08011fe8
 800dc20:	08011fec 	.word	0x08011fec
 800dc24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dc2a:	4553      	cmp	r3, sl
 800dc2c:	bfa8      	it	ge
 800dc2e:	4653      	movge	r3, sl
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	4699      	mov	r9, r3
 800dc34:	dc37      	bgt.n	800dca6 <_printf_float+0x33e>
 800dc36:	2300      	movs	r3, #0
 800dc38:	9307      	str	r3, [sp, #28]
 800dc3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc3e:	f104 021a 	add.w	r2, r4, #26
 800dc42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc44:	9907      	ldr	r1, [sp, #28]
 800dc46:	9306      	str	r3, [sp, #24]
 800dc48:	eba3 0309 	sub.w	r3, r3, r9
 800dc4c:	428b      	cmp	r3, r1
 800dc4e:	dc31      	bgt.n	800dcb4 <_printf_float+0x34c>
 800dc50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc52:	459a      	cmp	sl, r3
 800dc54:	dc3b      	bgt.n	800dcce <_printf_float+0x366>
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	07da      	lsls	r2, r3, #31
 800dc5a:	d438      	bmi.n	800dcce <_printf_float+0x366>
 800dc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc5e:	ebaa 0903 	sub.w	r9, sl, r3
 800dc62:	9b06      	ldr	r3, [sp, #24]
 800dc64:	ebaa 0303 	sub.w	r3, sl, r3
 800dc68:	4599      	cmp	r9, r3
 800dc6a:	bfa8      	it	ge
 800dc6c:	4699      	movge	r9, r3
 800dc6e:	f1b9 0f00 	cmp.w	r9, #0
 800dc72:	dc34      	bgt.n	800dcde <_printf_float+0x376>
 800dc74:	f04f 0800 	mov.w	r8, #0
 800dc78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc7c:	f104 0b1a 	add.w	fp, r4, #26
 800dc80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc82:	ebaa 0303 	sub.w	r3, sl, r3
 800dc86:	eba3 0309 	sub.w	r3, r3, r9
 800dc8a:	4543      	cmp	r3, r8
 800dc8c:	f77f af76 	ble.w	800db7c <_printf_float+0x214>
 800dc90:	2301      	movs	r3, #1
 800dc92:	465a      	mov	r2, fp
 800dc94:	4631      	mov	r1, r6
 800dc96:	4628      	mov	r0, r5
 800dc98:	47b8      	blx	r7
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	f43f aeb0 	beq.w	800da00 <_printf_float+0x98>
 800dca0:	f108 0801 	add.w	r8, r8, #1
 800dca4:	e7ec      	b.n	800dc80 <_printf_float+0x318>
 800dca6:	4642      	mov	r2, r8
 800dca8:	4631      	mov	r1, r6
 800dcaa:	4628      	mov	r0, r5
 800dcac:	47b8      	blx	r7
 800dcae:	3001      	adds	r0, #1
 800dcb0:	d1c1      	bne.n	800dc36 <_printf_float+0x2ce>
 800dcb2:	e6a5      	b.n	800da00 <_printf_float+0x98>
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	4631      	mov	r1, r6
 800dcb8:	4628      	mov	r0, r5
 800dcba:	9206      	str	r2, [sp, #24]
 800dcbc:	47b8      	blx	r7
 800dcbe:	3001      	adds	r0, #1
 800dcc0:	f43f ae9e 	beq.w	800da00 <_printf_float+0x98>
 800dcc4:	9b07      	ldr	r3, [sp, #28]
 800dcc6:	9a06      	ldr	r2, [sp, #24]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	9307      	str	r3, [sp, #28]
 800dccc:	e7b9      	b.n	800dc42 <_printf_float+0x2da>
 800dcce:	9b05      	ldr	r3, [sp, #20]
 800dcd0:	465a      	mov	r2, fp
 800dcd2:	4631      	mov	r1, r6
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	47b8      	blx	r7
 800dcd8:	3001      	adds	r0, #1
 800dcda:	d1bf      	bne.n	800dc5c <_printf_float+0x2f4>
 800dcdc:	e690      	b.n	800da00 <_printf_float+0x98>
 800dcde:	9a06      	ldr	r2, [sp, #24]
 800dce0:	464b      	mov	r3, r9
 800dce2:	4442      	add	r2, r8
 800dce4:	4631      	mov	r1, r6
 800dce6:	4628      	mov	r0, r5
 800dce8:	47b8      	blx	r7
 800dcea:	3001      	adds	r0, #1
 800dcec:	d1c2      	bne.n	800dc74 <_printf_float+0x30c>
 800dcee:	e687      	b.n	800da00 <_printf_float+0x98>
 800dcf0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800dcf4:	f1b9 0f01 	cmp.w	r9, #1
 800dcf8:	dc01      	bgt.n	800dcfe <_printf_float+0x396>
 800dcfa:	07db      	lsls	r3, r3, #31
 800dcfc:	d536      	bpl.n	800dd6c <_printf_float+0x404>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	4642      	mov	r2, r8
 800dd02:	4631      	mov	r1, r6
 800dd04:	4628      	mov	r0, r5
 800dd06:	47b8      	blx	r7
 800dd08:	3001      	adds	r0, #1
 800dd0a:	f43f ae79 	beq.w	800da00 <_printf_float+0x98>
 800dd0e:	9b05      	ldr	r3, [sp, #20]
 800dd10:	465a      	mov	r2, fp
 800dd12:	4631      	mov	r1, r6
 800dd14:	4628      	mov	r0, r5
 800dd16:	47b8      	blx	r7
 800dd18:	3001      	adds	r0, #1
 800dd1a:	f43f ae71 	beq.w	800da00 <_printf_float+0x98>
 800dd1e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800dd22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2a:	f109 39ff 	add.w	r9, r9, #4294967295
 800dd2e:	d018      	beq.n	800dd62 <_printf_float+0x3fa>
 800dd30:	464b      	mov	r3, r9
 800dd32:	f108 0201 	add.w	r2, r8, #1
 800dd36:	4631      	mov	r1, r6
 800dd38:	4628      	mov	r0, r5
 800dd3a:	47b8      	blx	r7
 800dd3c:	3001      	adds	r0, #1
 800dd3e:	d10c      	bne.n	800dd5a <_printf_float+0x3f2>
 800dd40:	e65e      	b.n	800da00 <_printf_float+0x98>
 800dd42:	2301      	movs	r3, #1
 800dd44:	465a      	mov	r2, fp
 800dd46:	4631      	mov	r1, r6
 800dd48:	4628      	mov	r0, r5
 800dd4a:	47b8      	blx	r7
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	f43f ae57 	beq.w	800da00 <_printf_float+0x98>
 800dd52:	f108 0801 	add.w	r8, r8, #1
 800dd56:	45c8      	cmp	r8, r9
 800dd58:	dbf3      	blt.n	800dd42 <_printf_float+0x3da>
 800dd5a:	4653      	mov	r3, sl
 800dd5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dd60:	e6dc      	b.n	800db1c <_printf_float+0x1b4>
 800dd62:	f04f 0800 	mov.w	r8, #0
 800dd66:	f104 0b1a 	add.w	fp, r4, #26
 800dd6a:	e7f4      	b.n	800dd56 <_printf_float+0x3ee>
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	4642      	mov	r2, r8
 800dd70:	e7e1      	b.n	800dd36 <_printf_float+0x3ce>
 800dd72:	2301      	movs	r3, #1
 800dd74:	464a      	mov	r2, r9
 800dd76:	4631      	mov	r1, r6
 800dd78:	4628      	mov	r0, r5
 800dd7a:	47b8      	blx	r7
 800dd7c:	3001      	adds	r0, #1
 800dd7e:	f43f ae3f 	beq.w	800da00 <_printf_float+0x98>
 800dd82:	f108 0801 	add.w	r8, r8, #1
 800dd86:	68e3      	ldr	r3, [r4, #12]
 800dd88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd8a:	1a5b      	subs	r3, r3, r1
 800dd8c:	4543      	cmp	r3, r8
 800dd8e:	dcf0      	bgt.n	800dd72 <_printf_float+0x40a>
 800dd90:	e6f8      	b.n	800db84 <_printf_float+0x21c>
 800dd92:	f04f 0800 	mov.w	r8, #0
 800dd96:	f104 0919 	add.w	r9, r4, #25
 800dd9a:	e7f4      	b.n	800dd86 <_printf_float+0x41e>

0800dd9c <_printf_common>:
 800dd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dda0:	4616      	mov	r6, r2
 800dda2:	4698      	mov	r8, r3
 800dda4:	688a      	ldr	r2, [r1, #8]
 800dda6:	690b      	ldr	r3, [r1, #16]
 800dda8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ddac:	4293      	cmp	r3, r2
 800ddae:	bfb8      	it	lt
 800ddb0:	4613      	movlt	r3, r2
 800ddb2:	6033      	str	r3, [r6, #0]
 800ddb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ddb8:	4607      	mov	r7, r0
 800ddba:	460c      	mov	r4, r1
 800ddbc:	b10a      	cbz	r2, 800ddc2 <_printf_common+0x26>
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	6033      	str	r3, [r6, #0]
 800ddc2:	6823      	ldr	r3, [r4, #0]
 800ddc4:	0699      	lsls	r1, r3, #26
 800ddc6:	bf42      	ittt	mi
 800ddc8:	6833      	ldrmi	r3, [r6, #0]
 800ddca:	3302      	addmi	r3, #2
 800ddcc:	6033      	strmi	r3, [r6, #0]
 800ddce:	6825      	ldr	r5, [r4, #0]
 800ddd0:	f015 0506 	ands.w	r5, r5, #6
 800ddd4:	d106      	bne.n	800dde4 <_printf_common+0x48>
 800ddd6:	f104 0a19 	add.w	sl, r4, #25
 800ddda:	68e3      	ldr	r3, [r4, #12]
 800dddc:	6832      	ldr	r2, [r6, #0]
 800ddde:	1a9b      	subs	r3, r3, r2
 800dde0:	42ab      	cmp	r3, r5
 800dde2:	dc26      	bgt.n	800de32 <_printf_common+0x96>
 800dde4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dde8:	6822      	ldr	r2, [r4, #0]
 800ddea:	3b00      	subs	r3, #0
 800ddec:	bf18      	it	ne
 800ddee:	2301      	movne	r3, #1
 800ddf0:	0692      	lsls	r2, r2, #26
 800ddf2:	d42b      	bmi.n	800de4c <_printf_common+0xb0>
 800ddf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ddf8:	4641      	mov	r1, r8
 800ddfa:	4638      	mov	r0, r7
 800ddfc:	47c8      	blx	r9
 800ddfe:	3001      	adds	r0, #1
 800de00:	d01e      	beq.n	800de40 <_printf_common+0xa4>
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	6922      	ldr	r2, [r4, #16]
 800de06:	f003 0306 	and.w	r3, r3, #6
 800de0a:	2b04      	cmp	r3, #4
 800de0c:	bf02      	ittt	eq
 800de0e:	68e5      	ldreq	r5, [r4, #12]
 800de10:	6833      	ldreq	r3, [r6, #0]
 800de12:	1aed      	subeq	r5, r5, r3
 800de14:	68a3      	ldr	r3, [r4, #8]
 800de16:	bf0c      	ite	eq
 800de18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de1c:	2500      	movne	r5, #0
 800de1e:	4293      	cmp	r3, r2
 800de20:	bfc4      	itt	gt
 800de22:	1a9b      	subgt	r3, r3, r2
 800de24:	18ed      	addgt	r5, r5, r3
 800de26:	2600      	movs	r6, #0
 800de28:	341a      	adds	r4, #26
 800de2a:	42b5      	cmp	r5, r6
 800de2c:	d11a      	bne.n	800de64 <_printf_common+0xc8>
 800de2e:	2000      	movs	r0, #0
 800de30:	e008      	b.n	800de44 <_printf_common+0xa8>
 800de32:	2301      	movs	r3, #1
 800de34:	4652      	mov	r2, sl
 800de36:	4641      	mov	r1, r8
 800de38:	4638      	mov	r0, r7
 800de3a:	47c8      	blx	r9
 800de3c:	3001      	adds	r0, #1
 800de3e:	d103      	bne.n	800de48 <_printf_common+0xac>
 800de40:	f04f 30ff 	mov.w	r0, #4294967295
 800de44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de48:	3501      	adds	r5, #1
 800de4a:	e7c6      	b.n	800ddda <_printf_common+0x3e>
 800de4c:	18e1      	adds	r1, r4, r3
 800de4e:	1c5a      	adds	r2, r3, #1
 800de50:	2030      	movs	r0, #48	@ 0x30
 800de52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800de56:	4422      	add	r2, r4
 800de58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800de5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800de60:	3302      	adds	r3, #2
 800de62:	e7c7      	b.n	800ddf4 <_printf_common+0x58>
 800de64:	2301      	movs	r3, #1
 800de66:	4622      	mov	r2, r4
 800de68:	4641      	mov	r1, r8
 800de6a:	4638      	mov	r0, r7
 800de6c:	47c8      	blx	r9
 800de6e:	3001      	adds	r0, #1
 800de70:	d0e6      	beq.n	800de40 <_printf_common+0xa4>
 800de72:	3601      	adds	r6, #1
 800de74:	e7d9      	b.n	800de2a <_printf_common+0x8e>
	...

0800de78 <_printf_i>:
 800de78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de7c:	7e0f      	ldrb	r7, [r1, #24]
 800de7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de80:	2f78      	cmp	r7, #120	@ 0x78
 800de82:	4691      	mov	r9, r2
 800de84:	4680      	mov	r8, r0
 800de86:	460c      	mov	r4, r1
 800de88:	469a      	mov	sl, r3
 800de8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de8e:	d807      	bhi.n	800dea0 <_printf_i+0x28>
 800de90:	2f62      	cmp	r7, #98	@ 0x62
 800de92:	d80a      	bhi.n	800deaa <_printf_i+0x32>
 800de94:	2f00      	cmp	r7, #0
 800de96:	f000 80d2 	beq.w	800e03e <_printf_i+0x1c6>
 800de9a:	2f58      	cmp	r7, #88	@ 0x58
 800de9c:	f000 80b9 	beq.w	800e012 <_printf_i+0x19a>
 800dea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dea8:	e03a      	b.n	800df20 <_printf_i+0xa8>
 800deaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800deae:	2b15      	cmp	r3, #21
 800deb0:	d8f6      	bhi.n	800dea0 <_printf_i+0x28>
 800deb2:	a101      	add	r1, pc, #4	@ (adr r1, 800deb8 <_printf_i+0x40>)
 800deb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800deb8:	0800df11 	.word	0x0800df11
 800debc:	0800df25 	.word	0x0800df25
 800dec0:	0800dea1 	.word	0x0800dea1
 800dec4:	0800dea1 	.word	0x0800dea1
 800dec8:	0800dea1 	.word	0x0800dea1
 800decc:	0800dea1 	.word	0x0800dea1
 800ded0:	0800df25 	.word	0x0800df25
 800ded4:	0800dea1 	.word	0x0800dea1
 800ded8:	0800dea1 	.word	0x0800dea1
 800dedc:	0800dea1 	.word	0x0800dea1
 800dee0:	0800dea1 	.word	0x0800dea1
 800dee4:	0800e025 	.word	0x0800e025
 800dee8:	0800df4f 	.word	0x0800df4f
 800deec:	0800dfdf 	.word	0x0800dfdf
 800def0:	0800dea1 	.word	0x0800dea1
 800def4:	0800dea1 	.word	0x0800dea1
 800def8:	0800e047 	.word	0x0800e047
 800defc:	0800dea1 	.word	0x0800dea1
 800df00:	0800df4f 	.word	0x0800df4f
 800df04:	0800dea1 	.word	0x0800dea1
 800df08:	0800dea1 	.word	0x0800dea1
 800df0c:	0800dfe7 	.word	0x0800dfe7
 800df10:	6833      	ldr	r3, [r6, #0]
 800df12:	1d1a      	adds	r2, r3, #4
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	6032      	str	r2, [r6, #0]
 800df18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df20:	2301      	movs	r3, #1
 800df22:	e09d      	b.n	800e060 <_printf_i+0x1e8>
 800df24:	6833      	ldr	r3, [r6, #0]
 800df26:	6820      	ldr	r0, [r4, #0]
 800df28:	1d19      	adds	r1, r3, #4
 800df2a:	6031      	str	r1, [r6, #0]
 800df2c:	0606      	lsls	r6, r0, #24
 800df2e:	d501      	bpl.n	800df34 <_printf_i+0xbc>
 800df30:	681d      	ldr	r5, [r3, #0]
 800df32:	e003      	b.n	800df3c <_printf_i+0xc4>
 800df34:	0645      	lsls	r5, r0, #25
 800df36:	d5fb      	bpl.n	800df30 <_printf_i+0xb8>
 800df38:	f9b3 5000 	ldrsh.w	r5, [r3]
 800df3c:	2d00      	cmp	r5, #0
 800df3e:	da03      	bge.n	800df48 <_printf_i+0xd0>
 800df40:	232d      	movs	r3, #45	@ 0x2d
 800df42:	426d      	negs	r5, r5
 800df44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df48:	4859      	ldr	r0, [pc, #356]	@ (800e0b0 <_printf_i+0x238>)
 800df4a:	230a      	movs	r3, #10
 800df4c:	e011      	b.n	800df72 <_printf_i+0xfa>
 800df4e:	6821      	ldr	r1, [r4, #0]
 800df50:	6833      	ldr	r3, [r6, #0]
 800df52:	0608      	lsls	r0, r1, #24
 800df54:	f853 5b04 	ldr.w	r5, [r3], #4
 800df58:	d402      	bmi.n	800df60 <_printf_i+0xe8>
 800df5a:	0649      	lsls	r1, r1, #25
 800df5c:	bf48      	it	mi
 800df5e:	b2ad      	uxthmi	r5, r5
 800df60:	2f6f      	cmp	r7, #111	@ 0x6f
 800df62:	4853      	ldr	r0, [pc, #332]	@ (800e0b0 <_printf_i+0x238>)
 800df64:	6033      	str	r3, [r6, #0]
 800df66:	bf14      	ite	ne
 800df68:	230a      	movne	r3, #10
 800df6a:	2308      	moveq	r3, #8
 800df6c:	2100      	movs	r1, #0
 800df6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800df72:	6866      	ldr	r6, [r4, #4]
 800df74:	60a6      	str	r6, [r4, #8]
 800df76:	2e00      	cmp	r6, #0
 800df78:	bfa2      	ittt	ge
 800df7a:	6821      	ldrge	r1, [r4, #0]
 800df7c:	f021 0104 	bicge.w	r1, r1, #4
 800df80:	6021      	strge	r1, [r4, #0]
 800df82:	b90d      	cbnz	r5, 800df88 <_printf_i+0x110>
 800df84:	2e00      	cmp	r6, #0
 800df86:	d04b      	beq.n	800e020 <_printf_i+0x1a8>
 800df88:	4616      	mov	r6, r2
 800df8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800df8e:	fb03 5711 	mls	r7, r3, r1, r5
 800df92:	5dc7      	ldrb	r7, [r0, r7]
 800df94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df98:	462f      	mov	r7, r5
 800df9a:	42bb      	cmp	r3, r7
 800df9c:	460d      	mov	r5, r1
 800df9e:	d9f4      	bls.n	800df8a <_printf_i+0x112>
 800dfa0:	2b08      	cmp	r3, #8
 800dfa2:	d10b      	bne.n	800dfbc <_printf_i+0x144>
 800dfa4:	6823      	ldr	r3, [r4, #0]
 800dfa6:	07df      	lsls	r7, r3, #31
 800dfa8:	d508      	bpl.n	800dfbc <_printf_i+0x144>
 800dfaa:	6923      	ldr	r3, [r4, #16]
 800dfac:	6861      	ldr	r1, [r4, #4]
 800dfae:	4299      	cmp	r1, r3
 800dfb0:	bfde      	ittt	le
 800dfb2:	2330      	movle	r3, #48	@ 0x30
 800dfb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dfb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dfbc:	1b92      	subs	r2, r2, r6
 800dfbe:	6122      	str	r2, [r4, #16]
 800dfc0:	f8cd a000 	str.w	sl, [sp]
 800dfc4:	464b      	mov	r3, r9
 800dfc6:	aa03      	add	r2, sp, #12
 800dfc8:	4621      	mov	r1, r4
 800dfca:	4640      	mov	r0, r8
 800dfcc:	f7ff fee6 	bl	800dd9c <_printf_common>
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d14a      	bne.n	800e06a <_printf_i+0x1f2>
 800dfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd8:	b004      	add	sp, #16
 800dfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfde:	6823      	ldr	r3, [r4, #0]
 800dfe0:	f043 0320 	orr.w	r3, r3, #32
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	4833      	ldr	r0, [pc, #204]	@ (800e0b4 <_printf_i+0x23c>)
 800dfe8:	2778      	movs	r7, #120	@ 0x78
 800dfea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	6831      	ldr	r1, [r6, #0]
 800dff2:	061f      	lsls	r7, r3, #24
 800dff4:	f851 5b04 	ldr.w	r5, [r1], #4
 800dff8:	d402      	bmi.n	800e000 <_printf_i+0x188>
 800dffa:	065f      	lsls	r7, r3, #25
 800dffc:	bf48      	it	mi
 800dffe:	b2ad      	uxthmi	r5, r5
 800e000:	6031      	str	r1, [r6, #0]
 800e002:	07d9      	lsls	r1, r3, #31
 800e004:	bf44      	itt	mi
 800e006:	f043 0320 	orrmi.w	r3, r3, #32
 800e00a:	6023      	strmi	r3, [r4, #0]
 800e00c:	b11d      	cbz	r5, 800e016 <_printf_i+0x19e>
 800e00e:	2310      	movs	r3, #16
 800e010:	e7ac      	b.n	800df6c <_printf_i+0xf4>
 800e012:	4827      	ldr	r0, [pc, #156]	@ (800e0b0 <_printf_i+0x238>)
 800e014:	e7e9      	b.n	800dfea <_printf_i+0x172>
 800e016:	6823      	ldr	r3, [r4, #0]
 800e018:	f023 0320 	bic.w	r3, r3, #32
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	e7f6      	b.n	800e00e <_printf_i+0x196>
 800e020:	4616      	mov	r6, r2
 800e022:	e7bd      	b.n	800dfa0 <_printf_i+0x128>
 800e024:	6833      	ldr	r3, [r6, #0]
 800e026:	6825      	ldr	r5, [r4, #0]
 800e028:	6961      	ldr	r1, [r4, #20]
 800e02a:	1d18      	adds	r0, r3, #4
 800e02c:	6030      	str	r0, [r6, #0]
 800e02e:	062e      	lsls	r6, r5, #24
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	d501      	bpl.n	800e038 <_printf_i+0x1c0>
 800e034:	6019      	str	r1, [r3, #0]
 800e036:	e002      	b.n	800e03e <_printf_i+0x1c6>
 800e038:	0668      	lsls	r0, r5, #25
 800e03a:	d5fb      	bpl.n	800e034 <_printf_i+0x1bc>
 800e03c:	8019      	strh	r1, [r3, #0]
 800e03e:	2300      	movs	r3, #0
 800e040:	6123      	str	r3, [r4, #16]
 800e042:	4616      	mov	r6, r2
 800e044:	e7bc      	b.n	800dfc0 <_printf_i+0x148>
 800e046:	6833      	ldr	r3, [r6, #0]
 800e048:	1d1a      	adds	r2, r3, #4
 800e04a:	6032      	str	r2, [r6, #0]
 800e04c:	681e      	ldr	r6, [r3, #0]
 800e04e:	6862      	ldr	r2, [r4, #4]
 800e050:	2100      	movs	r1, #0
 800e052:	4630      	mov	r0, r6
 800e054:	f7f2 f95c 	bl	8000310 <memchr>
 800e058:	b108      	cbz	r0, 800e05e <_printf_i+0x1e6>
 800e05a:	1b80      	subs	r0, r0, r6
 800e05c:	6060      	str	r0, [r4, #4]
 800e05e:	6863      	ldr	r3, [r4, #4]
 800e060:	6123      	str	r3, [r4, #16]
 800e062:	2300      	movs	r3, #0
 800e064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e068:	e7aa      	b.n	800dfc0 <_printf_i+0x148>
 800e06a:	6923      	ldr	r3, [r4, #16]
 800e06c:	4632      	mov	r2, r6
 800e06e:	4649      	mov	r1, r9
 800e070:	4640      	mov	r0, r8
 800e072:	47d0      	blx	sl
 800e074:	3001      	adds	r0, #1
 800e076:	d0ad      	beq.n	800dfd4 <_printf_i+0x15c>
 800e078:	6823      	ldr	r3, [r4, #0]
 800e07a:	079b      	lsls	r3, r3, #30
 800e07c:	d413      	bmi.n	800e0a6 <_printf_i+0x22e>
 800e07e:	68e0      	ldr	r0, [r4, #12]
 800e080:	9b03      	ldr	r3, [sp, #12]
 800e082:	4298      	cmp	r0, r3
 800e084:	bfb8      	it	lt
 800e086:	4618      	movlt	r0, r3
 800e088:	e7a6      	b.n	800dfd8 <_printf_i+0x160>
 800e08a:	2301      	movs	r3, #1
 800e08c:	4632      	mov	r2, r6
 800e08e:	4649      	mov	r1, r9
 800e090:	4640      	mov	r0, r8
 800e092:	47d0      	blx	sl
 800e094:	3001      	adds	r0, #1
 800e096:	d09d      	beq.n	800dfd4 <_printf_i+0x15c>
 800e098:	3501      	adds	r5, #1
 800e09a:	68e3      	ldr	r3, [r4, #12]
 800e09c:	9903      	ldr	r1, [sp, #12]
 800e09e:	1a5b      	subs	r3, r3, r1
 800e0a0:	42ab      	cmp	r3, r5
 800e0a2:	dcf2      	bgt.n	800e08a <_printf_i+0x212>
 800e0a4:	e7eb      	b.n	800e07e <_printf_i+0x206>
 800e0a6:	2500      	movs	r5, #0
 800e0a8:	f104 0619 	add.w	r6, r4, #25
 800e0ac:	e7f5      	b.n	800e09a <_printf_i+0x222>
 800e0ae:	bf00      	nop
 800e0b0:	08011fee 	.word	0x08011fee
 800e0b4:	08011fff 	.word	0x08011fff

0800e0b8 <_scanf_float>:
 800e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0bc:	b087      	sub	sp, #28
 800e0be:	4617      	mov	r7, r2
 800e0c0:	9303      	str	r3, [sp, #12]
 800e0c2:	688b      	ldr	r3, [r1, #8]
 800e0c4:	1e5a      	subs	r2, r3, #1
 800e0c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e0ca:	bf81      	itttt	hi
 800e0cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e0d0:	eb03 0b05 	addhi.w	fp, r3, r5
 800e0d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e0d8:	608b      	strhi	r3, [r1, #8]
 800e0da:	680b      	ldr	r3, [r1, #0]
 800e0dc:	460a      	mov	r2, r1
 800e0de:	f04f 0500 	mov.w	r5, #0
 800e0e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e0e6:	f842 3b1c 	str.w	r3, [r2], #28
 800e0ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e0ee:	4680      	mov	r8, r0
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	bf98      	it	ls
 800e0f4:	f04f 0b00 	movls.w	fp, #0
 800e0f8:	9201      	str	r2, [sp, #4]
 800e0fa:	4616      	mov	r6, r2
 800e0fc:	46aa      	mov	sl, r5
 800e0fe:	46a9      	mov	r9, r5
 800e100:	9502      	str	r5, [sp, #8]
 800e102:	68a2      	ldr	r2, [r4, #8]
 800e104:	b152      	cbz	r2, 800e11c <_scanf_float+0x64>
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	2b4e      	cmp	r3, #78	@ 0x4e
 800e10c:	d864      	bhi.n	800e1d8 <_scanf_float+0x120>
 800e10e:	2b40      	cmp	r3, #64	@ 0x40
 800e110:	d83c      	bhi.n	800e18c <_scanf_float+0xd4>
 800e112:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e116:	b2c8      	uxtb	r0, r1
 800e118:	280e      	cmp	r0, #14
 800e11a:	d93a      	bls.n	800e192 <_scanf_float+0xda>
 800e11c:	f1b9 0f00 	cmp.w	r9, #0
 800e120:	d003      	beq.n	800e12a <_scanf_float+0x72>
 800e122:	6823      	ldr	r3, [r4, #0]
 800e124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e128:	6023      	str	r3, [r4, #0]
 800e12a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e12e:	f1ba 0f01 	cmp.w	sl, #1
 800e132:	f200 8117 	bhi.w	800e364 <_scanf_float+0x2ac>
 800e136:	9b01      	ldr	r3, [sp, #4]
 800e138:	429e      	cmp	r6, r3
 800e13a:	f200 8108 	bhi.w	800e34e <_scanf_float+0x296>
 800e13e:	2001      	movs	r0, #1
 800e140:	b007      	add	sp, #28
 800e142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e146:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e14a:	2a0d      	cmp	r2, #13
 800e14c:	d8e6      	bhi.n	800e11c <_scanf_float+0x64>
 800e14e:	a101      	add	r1, pc, #4	@ (adr r1, 800e154 <_scanf_float+0x9c>)
 800e150:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e154:	0800e29b 	.word	0x0800e29b
 800e158:	0800e11d 	.word	0x0800e11d
 800e15c:	0800e11d 	.word	0x0800e11d
 800e160:	0800e11d 	.word	0x0800e11d
 800e164:	0800e2fb 	.word	0x0800e2fb
 800e168:	0800e2d3 	.word	0x0800e2d3
 800e16c:	0800e11d 	.word	0x0800e11d
 800e170:	0800e11d 	.word	0x0800e11d
 800e174:	0800e2a9 	.word	0x0800e2a9
 800e178:	0800e11d 	.word	0x0800e11d
 800e17c:	0800e11d 	.word	0x0800e11d
 800e180:	0800e11d 	.word	0x0800e11d
 800e184:	0800e11d 	.word	0x0800e11d
 800e188:	0800e261 	.word	0x0800e261
 800e18c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e190:	e7db      	b.n	800e14a <_scanf_float+0x92>
 800e192:	290e      	cmp	r1, #14
 800e194:	d8c2      	bhi.n	800e11c <_scanf_float+0x64>
 800e196:	a001      	add	r0, pc, #4	@ (adr r0, 800e19c <_scanf_float+0xe4>)
 800e198:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e19c:	0800e251 	.word	0x0800e251
 800e1a0:	0800e11d 	.word	0x0800e11d
 800e1a4:	0800e251 	.word	0x0800e251
 800e1a8:	0800e2e7 	.word	0x0800e2e7
 800e1ac:	0800e11d 	.word	0x0800e11d
 800e1b0:	0800e1f9 	.word	0x0800e1f9
 800e1b4:	0800e237 	.word	0x0800e237
 800e1b8:	0800e237 	.word	0x0800e237
 800e1bc:	0800e237 	.word	0x0800e237
 800e1c0:	0800e237 	.word	0x0800e237
 800e1c4:	0800e237 	.word	0x0800e237
 800e1c8:	0800e237 	.word	0x0800e237
 800e1cc:	0800e237 	.word	0x0800e237
 800e1d0:	0800e237 	.word	0x0800e237
 800e1d4:	0800e237 	.word	0x0800e237
 800e1d8:	2b6e      	cmp	r3, #110	@ 0x6e
 800e1da:	d809      	bhi.n	800e1f0 <_scanf_float+0x138>
 800e1dc:	2b60      	cmp	r3, #96	@ 0x60
 800e1de:	d8b2      	bhi.n	800e146 <_scanf_float+0x8e>
 800e1e0:	2b54      	cmp	r3, #84	@ 0x54
 800e1e2:	d07b      	beq.n	800e2dc <_scanf_float+0x224>
 800e1e4:	2b59      	cmp	r3, #89	@ 0x59
 800e1e6:	d199      	bne.n	800e11c <_scanf_float+0x64>
 800e1e8:	2d07      	cmp	r5, #7
 800e1ea:	d197      	bne.n	800e11c <_scanf_float+0x64>
 800e1ec:	2508      	movs	r5, #8
 800e1ee:	e02c      	b.n	800e24a <_scanf_float+0x192>
 800e1f0:	2b74      	cmp	r3, #116	@ 0x74
 800e1f2:	d073      	beq.n	800e2dc <_scanf_float+0x224>
 800e1f4:	2b79      	cmp	r3, #121	@ 0x79
 800e1f6:	e7f6      	b.n	800e1e6 <_scanf_float+0x12e>
 800e1f8:	6821      	ldr	r1, [r4, #0]
 800e1fa:	05c8      	lsls	r0, r1, #23
 800e1fc:	d51b      	bpl.n	800e236 <_scanf_float+0x17e>
 800e1fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e202:	6021      	str	r1, [r4, #0]
 800e204:	f109 0901 	add.w	r9, r9, #1
 800e208:	f1bb 0f00 	cmp.w	fp, #0
 800e20c:	d003      	beq.n	800e216 <_scanf_float+0x15e>
 800e20e:	3201      	adds	r2, #1
 800e210:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e214:	60a2      	str	r2, [r4, #8]
 800e216:	68a3      	ldr	r3, [r4, #8]
 800e218:	3b01      	subs	r3, #1
 800e21a:	60a3      	str	r3, [r4, #8]
 800e21c:	6923      	ldr	r3, [r4, #16]
 800e21e:	3301      	adds	r3, #1
 800e220:	6123      	str	r3, [r4, #16]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	3b01      	subs	r3, #1
 800e226:	2b00      	cmp	r3, #0
 800e228:	607b      	str	r3, [r7, #4]
 800e22a:	f340 8087 	ble.w	800e33c <_scanf_float+0x284>
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	3301      	adds	r3, #1
 800e232:	603b      	str	r3, [r7, #0]
 800e234:	e765      	b.n	800e102 <_scanf_float+0x4a>
 800e236:	eb1a 0105 	adds.w	r1, sl, r5
 800e23a:	f47f af6f 	bne.w	800e11c <_scanf_float+0x64>
 800e23e:	6822      	ldr	r2, [r4, #0]
 800e240:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e244:	6022      	str	r2, [r4, #0]
 800e246:	460d      	mov	r5, r1
 800e248:	468a      	mov	sl, r1
 800e24a:	f806 3b01 	strb.w	r3, [r6], #1
 800e24e:	e7e2      	b.n	800e216 <_scanf_float+0x15e>
 800e250:	6822      	ldr	r2, [r4, #0]
 800e252:	0610      	lsls	r0, r2, #24
 800e254:	f57f af62 	bpl.w	800e11c <_scanf_float+0x64>
 800e258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e25c:	6022      	str	r2, [r4, #0]
 800e25e:	e7f4      	b.n	800e24a <_scanf_float+0x192>
 800e260:	f1ba 0f00 	cmp.w	sl, #0
 800e264:	d10e      	bne.n	800e284 <_scanf_float+0x1cc>
 800e266:	f1b9 0f00 	cmp.w	r9, #0
 800e26a:	d10e      	bne.n	800e28a <_scanf_float+0x1d2>
 800e26c:	6822      	ldr	r2, [r4, #0]
 800e26e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e272:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e276:	d108      	bne.n	800e28a <_scanf_float+0x1d2>
 800e278:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e27c:	6022      	str	r2, [r4, #0]
 800e27e:	f04f 0a01 	mov.w	sl, #1
 800e282:	e7e2      	b.n	800e24a <_scanf_float+0x192>
 800e284:	f1ba 0f02 	cmp.w	sl, #2
 800e288:	d055      	beq.n	800e336 <_scanf_float+0x27e>
 800e28a:	2d01      	cmp	r5, #1
 800e28c:	d002      	beq.n	800e294 <_scanf_float+0x1dc>
 800e28e:	2d04      	cmp	r5, #4
 800e290:	f47f af44 	bne.w	800e11c <_scanf_float+0x64>
 800e294:	3501      	adds	r5, #1
 800e296:	b2ed      	uxtb	r5, r5
 800e298:	e7d7      	b.n	800e24a <_scanf_float+0x192>
 800e29a:	f1ba 0f01 	cmp.w	sl, #1
 800e29e:	f47f af3d 	bne.w	800e11c <_scanf_float+0x64>
 800e2a2:	f04f 0a02 	mov.w	sl, #2
 800e2a6:	e7d0      	b.n	800e24a <_scanf_float+0x192>
 800e2a8:	b97d      	cbnz	r5, 800e2ca <_scanf_float+0x212>
 800e2aa:	f1b9 0f00 	cmp.w	r9, #0
 800e2ae:	f47f af38 	bne.w	800e122 <_scanf_float+0x6a>
 800e2b2:	6822      	ldr	r2, [r4, #0]
 800e2b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e2b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e2bc:	f040 8101 	bne.w	800e4c2 <_scanf_float+0x40a>
 800e2c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e2c4:	6022      	str	r2, [r4, #0]
 800e2c6:	2501      	movs	r5, #1
 800e2c8:	e7bf      	b.n	800e24a <_scanf_float+0x192>
 800e2ca:	2d03      	cmp	r5, #3
 800e2cc:	d0e2      	beq.n	800e294 <_scanf_float+0x1dc>
 800e2ce:	2d05      	cmp	r5, #5
 800e2d0:	e7de      	b.n	800e290 <_scanf_float+0x1d8>
 800e2d2:	2d02      	cmp	r5, #2
 800e2d4:	f47f af22 	bne.w	800e11c <_scanf_float+0x64>
 800e2d8:	2503      	movs	r5, #3
 800e2da:	e7b6      	b.n	800e24a <_scanf_float+0x192>
 800e2dc:	2d06      	cmp	r5, #6
 800e2de:	f47f af1d 	bne.w	800e11c <_scanf_float+0x64>
 800e2e2:	2507      	movs	r5, #7
 800e2e4:	e7b1      	b.n	800e24a <_scanf_float+0x192>
 800e2e6:	6822      	ldr	r2, [r4, #0]
 800e2e8:	0591      	lsls	r1, r2, #22
 800e2ea:	f57f af17 	bpl.w	800e11c <_scanf_float+0x64>
 800e2ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e2f2:	6022      	str	r2, [r4, #0]
 800e2f4:	f8cd 9008 	str.w	r9, [sp, #8]
 800e2f8:	e7a7      	b.n	800e24a <_scanf_float+0x192>
 800e2fa:	6822      	ldr	r2, [r4, #0]
 800e2fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e300:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e304:	d006      	beq.n	800e314 <_scanf_float+0x25c>
 800e306:	0550      	lsls	r0, r2, #21
 800e308:	f57f af08 	bpl.w	800e11c <_scanf_float+0x64>
 800e30c:	f1b9 0f00 	cmp.w	r9, #0
 800e310:	f000 80d7 	beq.w	800e4c2 <_scanf_float+0x40a>
 800e314:	0591      	lsls	r1, r2, #22
 800e316:	bf58      	it	pl
 800e318:	9902      	ldrpl	r1, [sp, #8]
 800e31a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e31e:	bf58      	it	pl
 800e320:	eba9 0101 	subpl.w	r1, r9, r1
 800e324:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e328:	bf58      	it	pl
 800e32a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e32e:	6022      	str	r2, [r4, #0]
 800e330:	f04f 0900 	mov.w	r9, #0
 800e334:	e789      	b.n	800e24a <_scanf_float+0x192>
 800e336:	f04f 0a03 	mov.w	sl, #3
 800e33a:	e786      	b.n	800e24a <_scanf_float+0x192>
 800e33c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e340:	4639      	mov	r1, r7
 800e342:	4640      	mov	r0, r8
 800e344:	4798      	blx	r3
 800e346:	2800      	cmp	r0, #0
 800e348:	f43f aedb 	beq.w	800e102 <_scanf_float+0x4a>
 800e34c:	e6e6      	b.n	800e11c <_scanf_float+0x64>
 800e34e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e352:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e356:	463a      	mov	r2, r7
 800e358:	4640      	mov	r0, r8
 800e35a:	4798      	blx	r3
 800e35c:	6923      	ldr	r3, [r4, #16]
 800e35e:	3b01      	subs	r3, #1
 800e360:	6123      	str	r3, [r4, #16]
 800e362:	e6e8      	b.n	800e136 <_scanf_float+0x7e>
 800e364:	1e6b      	subs	r3, r5, #1
 800e366:	2b06      	cmp	r3, #6
 800e368:	d824      	bhi.n	800e3b4 <_scanf_float+0x2fc>
 800e36a:	2d02      	cmp	r5, #2
 800e36c:	d836      	bhi.n	800e3dc <_scanf_float+0x324>
 800e36e:	9b01      	ldr	r3, [sp, #4]
 800e370:	429e      	cmp	r6, r3
 800e372:	f67f aee4 	bls.w	800e13e <_scanf_float+0x86>
 800e376:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e37a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e37e:	463a      	mov	r2, r7
 800e380:	4640      	mov	r0, r8
 800e382:	4798      	blx	r3
 800e384:	6923      	ldr	r3, [r4, #16]
 800e386:	3b01      	subs	r3, #1
 800e388:	6123      	str	r3, [r4, #16]
 800e38a:	e7f0      	b.n	800e36e <_scanf_float+0x2b6>
 800e38c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e390:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e394:	463a      	mov	r2, r7
 800e396:	4640      	mov	r0, r8
 800e398:	4798      	blx	r3
 800e39a:	6923      	ldr	r3, [r4, #16]
 800e39c:	3b01      	subs	r3, #1
 800e39e:	6123      	str	r3, [r4, #16]
 800e3a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3a4:	fa5f fa8a 	uxtb.w	sl, sl
 800e3a8:	f1ba 0f02 	cmp.w	sl, #2
 800e3ac:	d1ee      	bne.n	800e38c <_scanf_float+0x2d4>
 800e3ae:	3d03      	subs	r5, #3
 800e3b0:	b2ed      	uxtb	r5, r5
 800e3b2:	1b76      	subs	r6, r6, r5
 800e3b4:	6823      	ldr	r3, [r4, #0]
 800e3b6:	05da      	lsls	r2, r3, #23
 800e3b8:	d530      	bpl.n	800e41c <_scanf_float+0x364>
 800e3ba:	055b      	lsls	r3, r3, #21
 800e3bc:	d511      	bpl.n	800e3e2 <_scanf_float+0x32a>
 800e3be:	9b01      	ldr	r3, [sp, #4]
 800e3c0:	429e      	cmp	r6, r3
 800e3c2:	f67f aebc 	bls.w	800e13e <_scanf_float+0x86>
 800e3c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e3ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e3ce:	463a      	mov	r2, r7
 800e3d0:	4640      	mov	r0, r8
 800e3d2:	4798      	blx	r3
 800e3d4:	6923      	ldr	r3, [r4, #16]
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	6123      	str	r3, [r4, #16]
 800e3da:	e7f0      	b.n	800e3be <_scanf_float+0x306>
 800e3dc:	46aa      	mov	sl, r5
 800e3de:	46b3      	mov	fp, r6
 800e3e0:	e7de      	b.n	800e3a0 <_scanf_float+0x2e8>
 800e3e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e3e6:	6923      	ldr	r3, [r4, #16]
 800e3e8:	2965      	cmp	r1, #101	@ 0x65
 800e3ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800e3ee:	f106 35ff 	add.w	r5, r6, #4294967295
 800e3f2:	6123      	str	r3, [r4, #16]
 800e3f4:	d00c      	beq.n	800e410 <_scanf_float+0x358>
 800e3f6:	2945      	cmp	r1, #69	@ 0x45
 800e3f8:	d00a      	beq.n	800e410 <_scanf_float+0x358>
 800e3fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e3fe:	463a      	mov	r2, r7
 800e400:	4640      	mov	r0, r8
 800e402:	4798      	blx	r3
 800e404:	6923      	ldr	r3, [r4, #16]
 800e406:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e40a:	3b01      	subs	r3, #1
 800e40c:	1eb5      	subs	r5, r6, #2
 800e40e:	6123      	str	r3, [r4, #16]
 800e410:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e414:	463a      	mov	r2, r7
 800e416:	4640      	mov	r0, r8
 800e418:	4798      	blx	r3
 800e41a:	462e      	mov	r6, r5
 800e41c:	6822      	ldr	r2, [r4, #0]
 800e41e:	f012 0210 	ands.w	r2, r2, #16
 800e422:	d001      	beq.n	800e428 <_scanf_float+0x370>
 800e424:	2000      	movs	r0, #0
 800e426:	e68b      	b.n	800e140 <_scanf_float+0x88>
 800e428:	7032      	strb	r2, [r6, #0]
 800e42a:	6823      	ldr	r3, [r4, #0]
 800e42c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e434:	d11a      	bne.n	800e46c <_scanf_float+0x3b4>
 800e436:	9b02      	ldr	r3, [sp, #8]
 800e438:	454b      	cmp	r3, r9
 800e43a:	eba3 0209 	sub.w	r2, r3, r9
 800e43e:	d121      	bne.n	800e484 <_scanf_float+0x3cc>
 800e440:	9901      	ldr	r1, [sp, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	4640      	mov	r0, r8
 800e446:	f002 fc41 	bl	8010ccc <_strtod_r>
 800e44a:	9b03      	ldr	r3, [sp, #12]
 800e44c:	6821      	ldr	r1, [r4, #0]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f011 0f02 	tst.w	r1, #2
 800e454:	f103 0204 	add.w	r2, r3, #4
 800e458:	d01f      	beq.n	800e49a <_scanf_float+0x3e2>
 800e45a:	9903      	ldr	r1, [sp, #12]
 800e45c:	600a      	str	r2, [r1, #0]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	ed83 0b00 	vstr	d0, [r3]
 800e464:	68e3      	ldr	r3, [r4, #12]
 800e466:	3301      	adds	r3, #1
 800e468:	60e3      	str	r3, [r4, #12]
 800e46a:	e7db      	b.n	800e424 <_scanf_float+0x36c>
 800e46c:	9b04      	ldr	r3, [sp, #16]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d0e6      	beq.n	800e440 <_scanf_float+0x388>
 800e472:	9905      	ldr	r1, [sp, #20]
 800e474:	230a      	movs	r3, #10
 800e476:	3101      	adds	r1, #1
 800e478:	4640      	mov	r0, r8
 800e47a:	f002 fca7 	bl	8010dcc <_strtol_r>
 800e47e:	9b04      	ldr	r3, [sp, #16]
 800e480:	9e05      	ldr	r6, [sp, #20]
 800e482:	1ac2      	subs	r2, r0, r3
 800e484:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e488:	429e      	cmp	r6, r3
 800e48a:	bf28      	it	cs
 800e48c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e490:	490d      	ldr	r1, [pc, #52]	@ (800e4c8 <_scanf_float+0x410>)
 800e492:	4630      	mov	r0, r6
 800e494:	f000 f94e 	bl	800e734 <siprintf>
 800e498:	e7d2      	b.n	800e440 <_scanf_float+0x388>
 800e49a:	f011 0f04 	tst.w	r1, #4
 800e49e:	9903      	ldr	r1, [sp, #12]
 800e4a0:	600a      	str	r2, [r1, #0]
 800e4a2:	d1dc      	bne.n	800e45e <_scanf_float+0x3a6>
 800e4a4:	eeb4 0b40 	vcmp.f64	d0, d0
 800e4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ac:	681d      	ldr	r5, [r3, #0]
 800e4ae:	d705      	bvc.n	800e4bc <_scanf_float+0x404>
 800e4b0:	4806      	ldr	r0, [pc, #24]	@ (800e4cc <_scanf_float+0x414>)
 800e4b2:	f000 fac5 	bl	800ea40 <nanf>
 800e4b6:	ed85 0a00 	vstr	s0, [r5]
 800e4ba:	e7d3      	b.n	800e464 <_scanf_float+0x3ac>
 800e4bc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e4c0:	e7f9      	b.n	800e4b6 <_scanf_float+0x3fe>
 800e4c2:	f04f 0900 	mov.w	r9, #0
 800e4c6:	e630      	b.n	800e12a <_scanf_float+0x72>
 800e4c8:	08012010 	.word	0x08012010
 800e4cc:	080123a5 	.word	0x080123a5

0800e4d0 <std>:
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	b510      	push	{r4, lr}
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	e9c0 3300 	strd	r3, r3, [r0]
 800e4da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4de:	6083      	str	r3, [r0, #8]
 800e4e0:	8181      	strh	r1, [r0, #12]
 800e4e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e4e4:	81c2      	strh	r2, [r0, #14]
 800e4e6:	6183      	str	r3, [r0, #24]
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	2208      	movs	r2, #8
 800e4ec:	305c      	adds	r0, #92	@ 0x5c
 800e4ee:	f000 fa19 	bl	800e924 <memset>
 800e4f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e528 <std+0x58>)
 800e4f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e52c <std+0x5c>)
 800e4f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e4fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e530 <std+0x60>)
 800e4fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e534 <std+0x64>)
 800e500:	6323      	str	r3, [r4, #48]	@ 0x30
 800e502:	4b0d      	ldr	r3, [pc, #52]	@ (800e538 <std+0x68>)
 800e504:	6224      	str	r4, [r4, #32]
 800e506:	429c      	cmp	r4, r3
 800e508:	d006      	beq.n	800e518 <std+0x48>
 800e50a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e50e:	4294      	cmp	r4, r2
 800e510:	d002      	beq.n	800e518 <std+0x48>
 800e512:	33d0      	adds	r3, #208	@ 0xd0
 800e514:	429c      	cmp	r4, r3
 800e516:	d105      	bne.n	800e524 <std+0x54>
 800e518:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e520:	f000 ba7c 	b.w	800ea1c <__retarget_lock_init_recursive>
 800e524:	bd10      	pop	{r4, pc}
 800e526:	bf00      	nop
 800e528:	0800e775 	.word	0x0800e775
 800e52c:	0800e797 	.word	0x0800e797
 800e530:	0800e7cf 	.word	0x0800e7cf
 800e534:	0800e7f3 	.word	0x0800e7f3
 800e538:	24000778 	.word	0x24000778

0800e53c <stdio_exit_handler>:
 800e53c:	4a02      	ldr	r2, [pc, #8]	@ (800e548 <stdio_exit_handler+0xc>)
 800e53e:	4903      	ldr	r1, [pc, #12]	@ (800e54c <stdio_exit_handler+0x10>)
 800e540:	4803      	ldr	r0, [pc, #12]	@ (800e550 <stdio_exit_handler+0x14>)
 800e542:	f000 b869 	b.w	800e618 <_fwalk_sglue>
 800e546:	bf00      	nop
 800e548:	2400001c 	.word	0x2400001c
 800e54c:	0801140d 	.word	0x0801140d
 800e550:	2400002c 	.word	0x2400002c

0800e554 <cleanup_stdio>:
 800e554:	6841      	ldr	r1, [r0, #4]
 800e556:	4b0c      	ldr	r3, [pc, #48]	@ (800e588 <cleanup_stdio+0x34>)
 800e558:	4299      	cmp	r1, r3
 800e55a:	b510      	push	{r4, lr}
 800e55c:	4604      	mov	r4, r0
 800e55e:	d001      	beq.n	800e564 <cleanup_stdio+0x10>
 800e560:	f002 ff54 	bl	801140c <_fflush_r>
 800e564:	68a1      	ldr	r1, [r4, #8]
 800e566:	4b09      	ldr	r3, [pc, #36]	@ (800e58c <cleanup_stdio+0x38>)
 800e568:	4299      	cmp	r1, r3
 800e56a:	d002      	beq.n	800e572 <cleanup_stdio+0x1e>
 800e56c:	4620      	mov	r0, r4
 800e56e:	f002 ff4d 	bl	801140c <_fflush_r>
 800e572:	68e1      	ldr	r1, [r4, #12]
 800e574:	4b06      	ldr	r3, [pc, #24]	@ (800e590 <cleanup_stdio+0x3c>)
 800e576:	4299      	cmp	r1, r3
 800e578:	d004      	beq.n	800e584 <cleanup_stdio+0x30>
 800e57a:	4620      	mov	r0, r4
 800e57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e580:	f002 bf44 	b.w	801140c <_fflush_r>
 800e584:	bd10      	pop	{r4, pc}
 800e586:	bf00      	nop
 800e588:	24000778 	.word	0x24000778
 800e58c:	240007e0 	.word	0x240007e0
 800e590:	24000848 	.word	0x24000848

0800e594 <global_stdio_init.part.0>:
 800e594:	b510      	push	{r4, lr}
 800e596:	4b0b      	ldr	r3, [pc, #44]	@ (800e5c4 <global_stdio_init.part.0+0x30>)
 800e598:	4c0b      	ldr	r4, [pc, #44]	@ (800e5c8 <global_stdio_init.part.0+0x34>)
 800e59a:	4a0c      	ldr	r2, [pc, #48]	@ (800e5cc <global_stdio_init.part.0+0x38>)
 800e59c:	601a      	str	r2, [r3, #0]
 800e59e:	4620      	mov	r0, r4
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	2104      	movs	r1, #4
 800e5a4:	f7ff ff94 	bl	800e4d0 <std>
 800e5a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	2109      	movs	r1, #9
 800e5b0:	f7ff ff8e 	bl	800e4d0 <std>
 800e5b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e5b8:	2202      	movs	r2, #2
 800e5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5be:	2112      	movs	r1, #18
 800e5c0:	f7ff bf86 	b.w	800e4d0 <std>
 800e5c4:	240008b0 	.word	0x240008b0
 800e5c8:	24000778 	.word	0x24000778
 800e5cc:	0800e53d 	.word	0x0800e53d

0800e5d0 <__sfp_lock_acquire>:
 800e5d0:	4801      	ldr	r0, [pc, #4]	@ (800e5d8 <__sfp_lock_acquire+0x8>)
 800e5d2:	f000 ba24 	b.w	800ea1e <__retarget_lock_acquire_recursive>
 800e5d6:	bf00      	nop
 800e5d8:	240008b9 	.word	0x240008b9

0800e5dc <__sfp_lock_release>:
 800e5dc:	4801      	ldr	r0, [pc, #4]	@ (800e5e4 <__sfp_lock_release+0x8>)
 800e5de:	f000 ba1f 	b.w	800ea20 <__retarget_lock_release_recursive>
 800e5e2:	bf00      	nop
 800e5e4:	240008b9 	.word	0x240008b9

0800e5e8 <__sinit>:
 800e5e8:	b510      	push	{r4, lr}
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	f7ff fff0 	bl	800e5d0 <__sfp_lock_acquire>
 800e5f0:	6a23      	ldr	r3, [r4, #32]
 800e5f2:	b11b      	cbz	r3, 800e5fc <__sinit+0x14>
 800e5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5f8:	f7ff bff0 	b.w	800e5dc <__sfp_lock_release>
 800e5fc:	4b04      	ldr	r3, [pc, #16]	@ (800e610 <__sinit+0x28>)
 800e5fe:	6223      	str	r3, [r4, #32]
 800e600:	4b04      	ldr	r3, [pc, #16]	@ (800e614 <__sinit+0x2c>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d1f5      	bne.n	800e5f4 <__sinit+0xc>
 800e608:	f7ff ffc4 	bl	800e594 <global_stdio_init.part.0>
 800e60c:	e7f2      	b.n	800e5f4 <__sinit+0xc>
 800e60e:	bf00      	nop
 800e610:	0800e555 	.word	0x0800e555
 800e614:	240008b0 	.word	0x240008b0

0800e618 <_fwalk_sglue>:
 800e618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e61c:	4607      	mov	r7, r0
 800e61e:	4688      	mov	r8, r1
 800e620:	4614      	mov	r4, r2
 800e622:	2600      	movs	r6, #0
 800e624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e628:	f1b9 0901 	subs.w	r9, r9, #1
 800e62c:	d505      	bpl.n	800e63a <_fwalk_sglue+0x22>
 800e62e:	6824      	ldr	r4, [r4, #0]
 800e630:	2c00      	cmp	r4, #0
 800e632:	d1f7      	bne.n	800e624 <_fwalk_sglue+0xc>
 800e634:	4630      	mov	r0, r6
 800e636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e63a:	89ab      	ldrh	r3, [r5, #12]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d907      	bls.n	800e650 <_fwalk_sglue+0x38>
 800e640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e644:	3301      	adds	r3, #1
 800e646:	d003      	beq.n	800e650 <_fwalk_sglue+0x38>
 800e648:	4629      	mov	r1, r5
 800e64a:	4638      	mov	r0, r7
 800e64c:	47c0      	blx	r8
 800e64e:	4306      	orrs	r6, r0
 800e650:	3568      	adds	r5, #104	@ 0x68
 800e652:	e7e9      	b.n	800e628 <_fwalk_sglue+0x10>

0800e654 <iprintf>:
 800e654:	b40f      	push	{r0, r1, r2, r3}
 800e656:	b507      	push	{r0, r1, r2, lr}
 800e658:	4906      	ldr	r1, [pc, #24]	@ (800e674 <iprintf+0x20>)
 800e65a:	ab04      	add	r3, sp, #16
 800e65c:	6808      	ldr	r0, [r1, #0]
 800e65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e662:	6881      	ldr	r1, [r0, #8]
 800e664:	9301      	str	r3, [sp, #4]
 800e666:	f002 fd35 	bl	80110d4 <_vfiprintf_r>
 800e66a:	b003      	add	sp, #12
 800e66c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e670:	b004      	add	sp, #16
 800e672:	4770      	bx	lr
 800e674:	24000028 	.word	0x24000028

0800e678 <_puts_r>:
 800e678:	6a03      	ldr	r3, [r0, #32]
 800e67a:	b570      	push	{r4, r5, r6, lr}
 800e67c:	6884      	ldr	r4, [r0, #8]
 800e67e:	4605      	mov	r5, r0
 800e680:	460e      	mov	r6, r1
 800e682:	b90b      	cbnz	r3, 800e688 <_puts_r+0x10>
 800e684:	f7ff ffb0 	bl	800e5e8 <__sinit>
 800e688:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e68a:	07db      	lsls	r3, r3, #31
 800e68c:	d405      	bmi.n	800e69a <_puts_r+0x22>
 800e68e:	89a3      	ldrh	r3, [r4, #12]
 800e690:	0598      	lsls	r0, r3, #22
 800e692:	d402      	bmi.n	800e69a <_puts_r+0x22>
 800e694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e696:	f000 f9c2 	bl	800ea1e <__retarget_lock_acquire_recursive>
 800e69a:	89a3      	ldrh	r3, [r4, #12]
 800e69c:	0719      	lsls	r1, r3, #28
 800e69e:	d502      	bpl.n	800e6a6 <_puts_r+0x2e>
 800e6a0:	6923      	ldr	r3, [r4, #16]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d135      	bne.n	800e712 <_puts_r+0x9a>
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f000 f8e5 	bl	800e878 <__swsetup_r>
 800e6ae:	b380      	cbz	r0, 800e712 <_puts_r+0x9a>
 800e6b0:	f04f 35ff 	mov.w	r5, #4294967295
 800e6b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6b6:	07da      	lsls	r2, r3, #31
 800e6b8:	d405      	bmi.n	800e6c6 <_puts_r+0x4e>
 800e6ba:	89a3      	ldrh	r3, [r4, #12]
 800e6bc:	059b      	lsls	r3, r3, #22
 800e6be:	d402      	bmi.n	800e6c6 <_puts_r+0x4e>
 800e6c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6c2:	f000 f9ad 	bl	800ea20 <__retarget_lock_release_recursive>
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	bd70      	pop	{r4, r5, r6, pc}
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	da04      	bge.n	800e6d8 <_puts_r+0x60>
 800e6ce:	69a2      	ldr	r2, [r4, #24]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	dc17      	bgt.n	800e704 <_puts_r+0x8c>
 800e6d4:	290a      	cmp	r1, #10
 800e6d6:	d015      	beq.n	800e704 <_puts_r+0x8c>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	1c5a      	adds	r2, r3, #1
 800e6dc:	6022      	str	r2, [r4, #0]
 800e6de:	7019      	strb	r1, [r3, #0]
 800e6e0:	68a3      	ldr	r3, [r4, #8]
 800e6e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	60a3      	str	r3, [r4, #8]
 800e6ea:	2900      	cmp	r1, #0
 800e6ec:	d1ed      	bne.n	800e6ca <_puts_r+0x52>
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	da11      	bge.n	800e716 <_puts_r+0x9e>
 800e6f2:	4622      	mov	r2, r4
 800e6f4:	210a      	movs	r1, #10
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	f000 f87f 	bl	800e7fa <__swbuf_r>
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	d0d7      	beq.n	800e6b0 <_puts_r+0x38>
 800e700:	250a      	movs	r5, #10
 800e702:	e7d7      	b.n	800e6b4 <_puts_r+0x3c>
 800e704:	4622      	mov	r2, r4
 800e706:	4628      	mov	r0, r5
 800e708:	f000 f877 	bl	800e7fa <__swbuf_r>
 800e70c:	3001      	adds	r0, #1
 800e70e:	d1e7      	bne.n	800e6e0 <_puts_r+0x68>
 800e710:	e7ce      	b.n	800e6b0 <_puts_r+0x38>
 800e712:	3e01      	subs	r6, #1
 800e714:	e7e4      	b.n	800e6e0 <_puts_r+0x68>
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	1c5a      	adds	r2, r3, #1
 800e71a:	6022      	str	r2, [r4, #0]
 800e71c:	220a      	movs	r2, #10
 800e71e:	701a      	strb	r2, [r3, #0]
 800e720:	e7ee      	b.n	800e700 <_puts_r+0x88>
	...

0800e724 <puts>:
 800e724:	4b02      	ldr	r3, [pc, #8]	@ (800e730 <puts+0xc>)
 800e726:	4601      	mov	r1, r0
 800e728:	6818      	ldr	r0, [r3, #0]
 800e72a:	f7ff bfa5 	b.w	800e678 <_puts_r>
 800e72e:	bf00      	nop
 800e730:	24000028 	.word	0x24000028

0800e734 <siprintf>:
 800e734:	b40e      	push	{r1, r2, r3}
 800e736:	b500      	push	{lr}
 800e738:	b09c      	sub	sp, #112	@ 0x70
 800e73a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e73c:	9002      	str	r0, [sp, #8]
 800e73e:	9006      	str	r0, [sp, #24]
 800e740:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e744:	4809      	ldr	r0, [pc, #36]	@ (800e76c <siprintf+0x38>)
 800e746:	9107      	str	r1, [sp, #28]
 800e748:	9104      	str	r1, [sp, #16]
 800e74a:	4909      	ldr	r1, [pc, #36]	@ (800e770 <siprintf+0x3c>)
 800e74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e750:	9105      	str	r1, [sp, #20]
 800e752:	6800      	ldr	r0, [r0, #0]
 800e754:	9301      	str	r3, [sp, #4]
 800e756:	a902      	add	r1, sp, #8
 800e758:	f002 fb96 	bl	8010e88 <_svfiprintf_r>
 800e75c:	9b02      	ldr	r3, [sp, #8]
 800e75e:	2200      	movs	r2, #0
 800e760:	701a      	strb	r2, [r3, #0]
 800e762:	b01c      	add	sp, #112	@ 0x70
 800e764:	f85d eb04 	ldr.w	lr, [sp], #4
 800e768:	b003      	add	sp, #12
 800e76a:	4770      	bx	lr
 800e76c:	24000028 	.word	0x24000028
 800e770:	ffff0208 	.word	0xffff0208

0800e774 <__sread>:
 800e774:	b510      	push	{r4, lr}
 800e776:	460c      	mov	r4, r1
 800e778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e77c:	f000 f900 	bl	800e980 <_read_r>
 800e780:	2800      	cmp	r0, #0
 800e782:	bfab      	itete	ge
 800e784:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e786:	89a3      	ldrhlt	r3, [r4, #12]
 800e788:	181b      	addge	r3, r3, r0
 800e78a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e78e:	bfac      	ite	ge
 800e790:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e792:	81a3      	strhlt	r3, [r4, #12]
 800e794:	bd10      	pop	{r4, pc}

0800e796 <__swrite>:
 800e796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e79a:	461f      	mov	r7, r3
 800e79c:	898b      	ldrh	r3, [r1, #12]
 800e79e:	05db      	lsls	r3, r3, #23
 800e7a0:	4605      	mov	r5, r0
 800e7a2:	460c      	mov	r4, r1
 800e7a4:	4616      	mov	r6, r2
 800e7a6:	d505      	bpl.n	800e7b4 <__swrite+0x1e>
 800e7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ac:	2302      	movs	r3, #2
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f000 f8d4 	bl	800e95c <_lseek_r>
 800e7b4:	89a3      	ldrh	r3, [r4, #12]
 800e7b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e7be:	81a3      	strh	r3, [r4, #12]
 800e7c0:	4632      	mov	r2, r6
 800e7c2:	463b      	mov	r3, r7
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ca:	f000 b8eb 	b.w	800e9a4 <_write_r>

0800e7ce <__sseek>:
 800e7ce:	b510      	push	{r4, lr}
 800e7d0:	460c      	mov	r4, r1
 800e7d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d6:	f000 f8c1 	bl	800e95c <_lseek_r>
 800e7da:	1c43      	adds	r3, r0, #1
 800e7dc:	89a3      	ldrh	r3, [r4, #12]
 800e7de:	bf15      	itete	ne
 800e7e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e7e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e7e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e7ea:	81a3      	strheq	r3, [r4, #12]
 800e7ec:	bf18      	it	ne
 800e7ee:	81a3      	strhne	r3, [r4, #12]
 800e7f0:	bd10      	pop	{r4, pc}

0800e7f2 <__sclose>:
 800e7f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7f6:	f000 b8a1 	b.w	800e93c <_close_r>

0800e7fa <__swbuf_r>:
 800e7fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fc:	460e      	mov	r6, r1
 800e7fe:	4614      	mov	r4, r2
 800e800:	4605      	mov	r5, r0
 800e802:	b118      	cbz	r0, 800e80c <__swbuf_r+0x12>
 800e804:	6a03      	ldr	r3, [r0, #32]
 800e806:	b90b      	cbnz	r3, 800e80c <__swbuf_r+0x12>
 800e808:	f7ff feee 	bl	800e5e8 <__sinit>
 800e80c:	69a3      	ldr	r3, [r4, #24]
 800e80e:	60a3      	str	r3, [r4, #8]
 800e810:	89a3      	ldrh	r3, [r4, #12]
 800e812:	071a      	lsls	r2, r3, #28
 800e814:	d501      	bpl.n	800e81a <__swbuf_r+0x20>
 800e816:	6923      	ldr	r3, [r4, #16]
 800e818:	b943      	cbnz	r3, 800e82c <__swbuf_r+0x32>
 800e81a:	4621      	mov	r1, r4
 800e81c:	4628      	mov	r0, r5
 800e81e:	f000 f82b 	bl	800e878 <__swsetup_r>
 800e822:	b118      	cbz	r0, 800e82c <__swbuf_r+0x32>
 800e824:	f04f 37ff 	mov.w	r7, #4294967295
 800e828:	4638      	mov	r0, r7
 800e82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e82c:	6823      	ldr	r3, [r4, #0]
 800e82e:	6922      	ldr	r2, [r4, #16]
 800e830:	1a98      	subs	r0, r3, r2
 800e832:	6963      	ldr	r3, [r4, #20]
 800e834:	b2f6      	uxtb	r6, r6
 800e836:	4283      	cmp	r3, r0
 800e838:	4637      	mov	r7, r6
 800e83a:	dc05      	bgt.n	800e848 <__swbuf_r+0x4e>
 800e83c:	4621      	mov	r1, r4
 800e83e:	4628      	mov	r0, r5
 800e840:	f002 fde4 	bl	801140c <_fflush_r>
 800e844:	2800      	cmp	r0, #0
 800e846:	d1ed      	bne.n	800e824 <__swbuf_r+0x2a>
 800e848:	68a3      	ldr	r3, [r4, #8]
 800e84a:	3b01      	subs	r3, #1
 800e84c:	60a3      	str	r3, [r4, #8]
 800e84e:	6823      	ldr	r3, [r4, #0]
 800e850:	1c5a      	adds	r2, r3, #1
 800e852:	6022      	str	r2, [r4, #0]
 800e854:	701e      	strb	r6, [r3, #0]
 800e856:	6962      	ldr	r2, [r4, #20]
 800e858:	1c43      	adds	r3, r0, #1
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d004      	beq.n	800e868 <__swbuf_r+0x6e>
 800e85e:	89a3      	ldrh	r3, [r4, #12]
 800e860:	07db      	lsls	r3, r3, #31
 800e862:	d5e1      	bpl.n	800e828 <__swbuf_r+0x2e>
 800e864:	2e0a      	cmp	r6, #10
 800e866:	d1df      	bne.n	800e828 <__swbuf_r+0x2e>
 800e868:	4621      	mov	r1, r4
 800e86a:	4628      	mov	r0, r5
 800e86c:	f002 fdce 	bl	801140c <_fflush_r>
 800e870:	2800      	cmp	r0, #0
 800e872:	d0d9      	beq.n	800e828 <__swbuf_r+0x2e>
 800e874:	e7d6      	b.n	800e824 <__swbuf_r+0x2a>
	...

0800e878 <__swsetup_r>:
 800e878:	b538      	push	{r3, r4, r5, lr}
 800e87a:	4b29      	ldr	r3, [pc, #164]	@ (800e920 <__swsetup_r+0xa8>)
 800e87c:	4605      	mov	r5, r0
 800e87e:	6818      	ldr	r0, [r3, #0]
 800e880:	460c      	mov	r4, r1
 800e882:	b118      	cbz	r0, 800e88c <__swsetup_r+0x14>
 800e884:	6a03      	ldr	r3, [r0, #32]
 800e886:	b90b      	cbnz	r3, 800e88c <__swsetup_r+0x14>
 800e888:	f7ff feae 	bl	800e5e8 <__sinit>
 800e88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e890:	0719      	lsls	r1, r3, #28
 800e892:	d422      	bmi.n	800e8da <__swsetup_r+0x62>
 800e894:	06da      	lsls	r2, r3, #27
 800e896:	d407      	bmi.n	800e8a8 <__swsetup_r+0x30>
 800e898:	2209      	movs	r2, #9
 800e89a:	602a      	str	r2, [r5, #0]
 800e89c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8a0:	81a3      	strh	r3, [r4, #12]
 800e8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a6:	e033      	b.n	800e910 <__swsetup_r+0x98>
 800e8a8:	0758      	lsls	r0, r3, #29
 800e8aa:	d512      	bpl.n	800e8d2 <__swsetup_r+0x5a>
 800e8ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e8ae:	b141      	cbz	r1, 800e8c2 <__swsetup_r+0x4a>
 800e8b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8b4:	4299      	cmp	r1, r3
 800e8b6:	d002      	beq.n	800e8be <__swsetup_r+0x46>
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	f000 fea7 	bl	800f60c <_free_r>
 800e8be:	2300      	movs	r3, #0
 800e8c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e8c2:	89a3      	ldrh	r3, [r4, #12]
 800e8c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e8c8:	81a3      	strh	r3, [r4, #12]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	6063      	str	r3, [r4, #4]
 800e8ce:	6923      	ldr	r3, [r4, #16]
 800e8d0:	6023      	str	r3, [r4, #0]
 800e8d2:	89a3      	ldrh	r3, [r4, #12]
 800e8d4:	f043 0308 	orr.w	r3, r3, #8
 800e8d8:	81a3      	strh	r3, [r4, #12]
 800e8da:	6923      	ldr	r3, [r4, #16]
 800e8dc:	b94b      	cbnz	r3, 800e8f2 <__swsetup_r+0x7a>
 800e8de:	89a3      	ldrh	r3, [r4, #12]
 800e8e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e8e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8e8:	d003      	beq.n	800e8f2 <__swsetup_r+0x7a>
 800e8ea:	4621      	mov	r1, r4
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	f002 fddb 	bl	80114a8 <__smakebuf_r>
 800e8f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8f6:	f013 0201 	ands.w	r2, r3, #1
 800e8fa:	d00a      	beq.n	800e912 <__swsetup_r+0x9a>
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	60a2      	str	r2, [r4, #8]
 800e900:	6962      	ldr	r2, [r4, #20]
 800e902:	4252      	negs	r2, r2
 800e904:	61a2      	str	r2, [r4, #24]
 800e906:	6922      	ldr	r2, [r4, #16]
 800e908:	b942      	cbnz	r2, 800e91c <__swsetup_r+0xa4>
 800e90a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e90e:	d1c5      	bne.n	800e89c <__swsetup_r+0x24>
 800e910:	bd38      	pop	{r3, r4, r5, pc}
 800e912:	0799      	lsls	r1, r3, #30
 800e914:	bf58      	it	pl
 800e916:	6962      	ldrpl	r2, [r4, #20]
 800e918:	60a2      	str	r2, [r4, #8]
 800e91a:	e7f4      	b.n	800e906 <__swsetup_r+0x8e>
 800e91c:	2000      	movs	r0, #0
 800e91e:	e7f7      	b.n	800e910 <__swsetup_r+0x98>
 800e920:	24000028 	.word	0x24000028

0800e924 <memset>:
 800e924:	4402      	add	r2, r0
 800e926:	4603      	mov	r3, r0
 800e928:	4293      	cmp	r3, r2
 800e92a:	d100      	bne.n	800e92e <memset+0xa>
 800e92c:	4770      	bx	lr
 800e92e:	f803 1b01 	strb.w	r1, [r3], #1
 800e932:	e7f9      	b.n	800e928 <memset+0x4>

0800e934 <_localeconv_r>:
 800e934:	4800      	ldr	r0, [pc, #0]	@ (800e938 <_localeconv_r+0x4>)
 800e936:	4770      	bx	lr
 800e938:	24000168 	.word	0x24000168

0800e93c <_close_r>:
 800e93c:	b538      	push	{r3, r4, r5, lr}
 800e93e:	4d06      	ldr	r5, [pc, #24]	@ (800e958 <_close_r+0x1c>)
 800e940:	2300      	movs	r3, #0
 800e942:	4604      	mov	r4, r0
 800e944:	4608      	mov	r0, r1
 800e946:	602b      	str	r3, [r5, #0]
 800e948:	f7f5 f969 	bl	8003c1e <_close>
 800e94c:	1c43      	adds	r3, r0, #1
 800e94e:	d102      	bne.n	800e956 <_close_r+0x1a>
 800e950:	682b      	ldr	r3, [r5, #0]
 800e952:	b103      	cbz	r3, 800e956 <_close_r+0x1a>
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	bd38      	pop	{r3, r4, r5, pc}
 800e958:	240008b4 	.word	0x240008b4

0800e95c <_lseek_r>:
 800e95c:	b538      	push	{r3, r4, r5, lr}
 800e95e:	4d07      	ldr	r5, [pc, #28]	@ (800e97c <_lseek_r+0x20>)
 800e960:	4604      	mov	r4, r0
 800e962:	4608      	mov	r0, r1
 800e964:	4611      	mov	r1, r2
 800e966:	2200      	movs	r2, #0
 800e968:	602a      	str	r2, [r5, #0]
 800e96a:	461a      	mov	r2, r3
 800e96c:	f7f5 f97e 	bl	8003c6c <_lseek>
 800e970:	1c43      	adds	r3, r0, #1
 800e972:	d102      	bne.n	800e97a <_lseek_r+0x1e>
 800e974:	682b      	ldr	r3, [r5, #0]
 800e976:	b103      	cbz	r3, 800e97a <_lseek_r+0x1e>
 800e978:	6023      	str	r3, [r4, #0]
 800e97a:	bd38      	pop	{r3, r4, r5, pc}
 800e97c:	240008b4 	.word	0x240008b4

0800e980 <_read_r>:
 800e980:	b538      	push	{r3, r4, r5, lr}
 800e982:	4d07      	ldr	r5, [pc, #28]	@ (800e9a0 <_read_r+0x20>)
 800e984:	4604      	mov	r4, r0
 800e986:	4608      	mov	r0, r1
 800e988:	4611      	mov	r1, r2
 800e98a:	2200      	movs	r2, #0
 800e98c:	602a      	str	r2, [r5, #0]
 800e98e:	461a      	mov	r2, r3
 800e990:	f7f5 f928 	bl	8003be4 <_read>
 800e994:	1c43      	adds	r3, r0, #1
 800e996:	d102      	bne.n	800e99e <_read_r+0x1e>
 800e998:	682b      	ldr	r3, [r5, #0]
 800e99a:	b103      	cbz	r3, 800e99e <_read_r+0x1e>
 800e99c:	6023      	str	r3, [r4, #0]
 800e99e:	bd38      	pop	{r3, r4, r5, pc}
 800e9a0:	240008b4 	.word	0x240008b4

0800e9a4 <_write_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	4d07      	ldr	r5, [pc, #28]	@ (800e9c4 <_write_r+0x20>)
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	4608      	mov	r0, r1
 800e9ac:	4611      	mov	r1, r2
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	602a      	str	r2, [r5, #0]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	f7f4 f843 	bl	8002a3e <_write>
 800e9b8:	1c43      	adds	r3, r0, #1
 800e9ba:	d102      	bne.n	800e9c2 <_write_r+0x1e>
 800e9bc:	682b      	ldr	r3, [r5, #0]
 800e9be:	b103      	cbz	r3, 800e9c2 <_write_r+0x1e>
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	bd38      	pop	{r3, r4, r5, pc}
 800e9c4:	240008b4 	.word	0x240008b4

0800e9c8 <__errno>:
 800e9c8:	4b01      	ldr	r3, [pc, #4]	@ (800e9d0 <__errno+0x8>)
 800e9ca:	6818      	ldr	r0, [r3, #0]
 800e9cc:	4770      	bx	lr
 800e9ce:	bf00      	nop
 800e9d0:	24000028 	.word	0x24000028

0800e9d4 <__libc_init_array>:
 800e9d4:	b570      	push	{r4, r5, r6, lr}
 800e9d6:	4d0d      	ldr	r5, [pc, #52]	@ (800ea0c <__libc_init_array+0x38>)
 800e9d8:	4c0d      	ldr	r4, [pc, #52]	@ (800ea10 <__libc_init_array+0x3c>)
 800e9da:	1b64      	subs	r4, r4, r5
 800e9dc:	10a4      	asrs	r4, r4, #2
 800e9de:	2600      	movs	r6, #0
 800e9e0:	42a6      	cmp	r6, r4
 800e9e2:	d109      	bne.n	800e9f8 <__libc_init_array+0x24>
 800e9e4:	4d0b      	ldr	r5, [pc, #44]	@ (800ea14 <__libc_init_array+0x40>)
 800e9e6:	4c0c      	ldr	r4, [pc, #48]	@ (800ea18 <__libc_init_array+0x44>)
 800e9e8:	f003 fa20 	bl	8011e2c <_init>
 800e9ec:	1b64      	subs	r4, r4, r5
 800e9ee:	10a4      	asrs	r4, r4, #2
 800e9f0:	2600      	movs	r6, #0
 800e9f2:	42a6      	cmp	r6, r4
 800e9f4:	d105      	bne.n	800ea02 <__libc_init_array+0x2e>
 800e9f6:	bd70      	pop	{r4, r5, r6, pc}
 800e9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9fc:	4798      	blx	r3
 800e9fe:	3601      	adds	r6, #1
 800ea00:	e7ee      	b.n	800e9e0 <__libc_init_array+0xc>
 800ea02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea06:	4798      	blx	r3
 800ea08:	3601      	adds	r6, #1
 800ea0a:	e7f2      	b.n	800e9f2 <__libc_init_array+0x1e>
 800ea0c:	08012410 	.word	0x08012410
 800ea10:	08012410 	.word	0x08012410
 800ea14:	08012410 	.word	0x08012410
 800ea18:	08012414 	.word	0x08012414

0800ea1c <__retarget_lock_init_recursive>:
 800ea1c:	4770      	bx	lr

0800ea1e <__retarget_lock_acquire_recursive>:
 800ea1e:	4770      	bx	lr

0800ea20 <__retarget_lock_release_recursive>:
 800ea20:	4770      	bx	lr

0800ea22 <memcpy>:
 800ea22:	440a      	add	r2, r1
 800ea24:	4291      	cmp	r1, r2
 800ea26:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea2a:	d100      	bne.n	800ea2e <memcpy+0xc>
 800ea2c:	4770      	bx	lr
 800ea2e:	b510      	push	{r4, lr}
 800ea30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea38:	4291      	cmp	r1, r2
 800ea3a:	d1f9      	bne.n	800ea30 <memcpy+0xe>
 800ea3c:	bd10      	pop	{r4, pc}
	...

0800ea40 <nanf>:
 800ea40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ea48 <nanf+0x8>
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	7fc00000 	.word	0x7fc00000

0800ea4c <quorem>:
 800ea4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea50:	6903      	ldr	r3, [r0, #16]
 800ea52:	690c      	ldr	r4, [r1, #16]
 800ea54:	42a3      	cmp	r3, r4
 800ea56:	4607      	mov	r7, r0
 800ea58:	db7e      	blt.n	800eb58 <quorem+0x10c>
 800ea5a:	3c01      	subs	r4, #1
 800ea5c:	f101 0814 	add.w	r8, r1, #20
 800ea60:	00a3      	lsls	r3, r4, #2
 800ea62:	f100 0514 	add.w	r5, r0, #20
 800ea66:	9300      	str	r3, [sp, #0]
 800ea68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea6c:	9301      	str	r3, [sp, #4]
 800ea6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea76:	3301      	adds	r3, #1
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea7e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea82:	d32e      	bcc.n	800eae2 <quorem+0x96>
 800ea84:	f04f 0a00 	mov.w	sl, #0
 800ea88:	46c4      	mov	ip, r8
 800ea8a:	46ae      	mov	lr, r5
 800ea8c:	46d3      	mov	fp, sl
 800ea8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ea92:	b298      	uxth	r0, r3
 800ea94:	fb06 a000 	mla	r0, r6, r0, sl
 800ea98:	0c02      	lsrs	r2, r0, #16
 800ea9a:	0c1b      	lsrs	r3, r3, #16
 800ea9c:	fb06 2303 	mla	r3, r6, r3, r2
 800eaa0:	f8de 2000 	ldr.w	r2, [lr]
 800eaa4:	b280      	uxth	r0, r0
 800eaa6:	b292      	uxth	r2, r2
 800eaa8:	1a12      	subs	r2, r2, r0
 800eaaa:	445a      	add	r2, fp
 800eaac:	f8de 0000 	ldr.w	r0, [lr]
 800eab0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eaba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eabe:	b292      	uxth	r2, r2
 800eac0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eac4:	45e1      	cmp	r9, ip
 800eac6:	f84e 2b04 	str.w	r2, [lr], #4
 800eaca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800eace:	d2de      	bcs.n	800ea8e <quorem+0x42>
 800ead0:	9b00      	ldr	r3, [sp, #0]
 800ead2:	58eb      	ldr	r3, [r5, r3]
 800ead4:	b92b      	cbnz	r3, 800eae2 <quorem+0x96>
 800ead6:	9b01      	ldr	r3, [sp, #4]
 800ead8:	3b04      	subs	r3, #4
 800eada:	429d      	cmp	r5, r3
 800eadc:	461a      	mov	r2, r3
 800eade:	d32f      	bcc.n	800eb40 <quorem+0xf4>
 800eae0:	613c      	str	r4, [r7, #16]
 800eae2:	4638      	mov	r0, r7
 800eae4:	f001 f956 	bl	800fd94 <__mcmp>
 800eae8:	2800      	cmp	r0, #0
 800eaea:	db25      	blt.n	800eb38 <quorem+0xec>
 800eaec:	4629      	mov	r1, r5
 800eaee:	2000      	movs	r0, #0
 800eaf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800eaf4:	f8d1 c000 	ldr.w	ip, [r1]
 800eaf8:	fa1f fe82 	uxth.w	lr, r2
 800eafc:	fa1f f38c 	uxth.w	r3, ip
 800eb00:	eba3 030e 	sub.w	r3, r3, lr
 800eb04:	4403      	add	r3, r0
 800eb06:	0c12      	lsrs	r2, r2, #16
 800eb08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800eb0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb16:	45c1      	cmp	r9, r8
 800eb18:	f841 3b04 	str.w	r3, [r1], #4
 800eb1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eb20:	d2e6      	bcs.n	800eaf0 <quorem+0xa4>
 800eb22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb2a:	b922      	cbnz	r2, 800eb36 <quorem+0xea>
 800eb2c:	3b04      	subs	r3, #4
 800eb2e:	429d      	cmp	r5, r3
 800eb30:	461a      	mov	r2, r3
 800eb32:	d30b      	bcc.n	800eb4c <quorem+0x100>
 800eb34:	613c      	str	r4, [r7, #16]
 800eb36:	3601      	adds	r6, #1
 800eb38:	4630      	mov	r0, r6
 800eb3a:	b003      	add	sp, #12
 800eb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb40:	6812      	ldr	r2, [r2, #0]
 800eb42:	3b04      	subs	r3, #4
 800eb44:	2a00      	cmp	r2, #0
 800eb46:	d1cb      	bne.n	800eae0 <quorem+0x94>
 800eb48:	3c01      	subs	r4, #1
 800eb4a:	e7c6      	b.n	800eada <quorem+0x8e>
 800eb4c:	6812      	ldr	r2, [r2, #0]
 800eb4e:	3b04      	subs	r3, #4
 800eb50:	2a00      	cmp	r2, #0
 800eb52:	d1ef      	bne.n	800eb34 <quorem+0xe8>
 800eb54:	3c01      	subs	r4, #1
 800eb56:	e7ea      	b.n	800eb2e <quorem+0xe2>
 800eb58:	2000      	movs	r0, #0
 800eb5a:	e7ee      	b.n	800eb3a <quorem+0xee>
 800eb5c:	0000      	movs	r0, r0
	...

0800eb60 <_dtoa_r>:
 800eb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb64:	ed2d 8b02 	vpush	{d8}
 800eb68:	69c7      	ldr	r7, [r0, #28]
 800eb6a:	b091      	sub	sp, #68	@ 0x44
 800eb6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800eb70:	ec55 4b10 	vmov	r4, r5, d0
 800eb74:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800eb76:	9107      	str	r1, [sp, #28]
 800eb78:	4681      	mov	r9, r0
 800eb7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb7c:	930d      	str	r3, [sp, #52]	@ 0x34
 800eb7e:	b97f      	cbnz	r7, 800eba0 <_dtoa_r+0x40>
 800eb80:	2010      	movs	r0, #16
 800eb82:	f000 fd8d 	bl	800f6a0 <malloc>
 800eb86:	4602      	mov	r2, r0
 800eb88:	f8c9 001c 	str.w	r0, [r9, #28]
 800eb8c:	b920      	cbnz	r0, 800eb98 <_dtoa_r+0x38>
 800eb8e:	4ba0      	ldr	r3, [pc, #640]	@ (800ee10 <_dtoa_r+0x2b0>)
 800eb90:	21ef      	movs	r1, #239	@ 0xef
 800eb92:	48a0      	ldr	r0, [pc, #640]	@ (800ee14 <_dtoa_r+0x2b4>)
 800eb94:	f002 fd2c 	bl	80115f0 <__assert_func>
 800eb98:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eb9c:	6007      	str	r7, [r0, #0]
 800eb9e:	60c7      	str	r7, [r0, #12]
 800eba0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eba4:	6819      	ldr	r1, [r3, #0]
 800eba6:	b159      	cbz	r1, 800ebc0 <_dtoa_r+0x60>
 800eba8:	685a      	ldr	r2, [r3, #4]
 800ebaa:	604a      	str	r2, [r1, #4]
 800ebac:	2301      	movs	r3, #1
 800ebae:	4093      	lsls	r3, r2
 800ebb0:	608b      	str	r3, [r1, #8]
 800ebb2:	4648      	mov	r0, r9
 800ebb4:	f000 fe6a 	bl	800f88c <_Bfree>
 800ebb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	601a      	str	r2, [r3, #0]
 800ebc0:	1e2b      	subs	r3, r5, #0
 800ebc2:	bfbb      	ittet	lt
 800ebc4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ebc8:	9303      	strlt	r3, [sp, #12]
 800ebca:	2300      	movge	r3, #0
 800ebcc:	2201      	movlt	r2, #1
 800ebce:	bfac      	ite	ge
 800ebd0:	6033      	strge	r3, [r6, #0]
 800ebd2:	6032      	strlt	r2, [r6, #0]
 800ebd4:	4b90      	ldr	r3, [pc, #576]	@ (800ee18 <_dtoa_r+0x2b8>)
 800ebd6:	9e03      	ldr	r6, [sp, #12]
 800ebd8:	43b3      	bics	r3, r6
 800ebda:	d110      	bne.n	800ebfe <_dtoa_r+0x9e>
 800ebdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ebde:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ebe2:	6013      	str	r3, [r2, #0]
 800ebe4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ebe8:	4323      	orrs	r3, r4
 800ebea:	f000 84de 	beq.w	800f5aa <_dtoa_r+0xa4a>
 800ebee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ebf0:	4f8a      	ldr	r7, [pc, #552]	@ (800ee1c <_dtoa_r+0x2bc>)
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f000 84e0 	beq.w	800f5b8 <_dtoa_r+0xa58>
 800ebf8:	1cfb      	adds	r3, r7, #3
 800ebfa:	f000 bcdb 	b.w	800f5b4 <_dtoa_r+0xa54>
 800ebfe:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ec02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ec06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0a:	d10a      	bne.n	800ec22 <_dtoa_r+0xc2>
 800ec0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ec0e:	2301      	movs	r3, #1
 800ec10:	6013      	str	r3, [r2, #0]
 800ec12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ec14:	b113      	cbz	r3, 800ec1c <_dtoa_r+0xbc>
 800ec16:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ec18:	4b81      	ldr	r3, [pc, #516]	@ (800ee20 <_dtoa_r+0x2c0>)
 800ec1a:	6013      	str	r3, [r2, #0]
 800ec1c:	4f81      	ldr	r7, [pc, #516]	@ (800ee24 <_dtoa_r+0x2c4>)
 800ec1e:	f000 bccb 	b.w	800f5b8 <_dtoa_r+0xa58>
 800ec22:	aa0e      	add	r2, sp, #56	@ 0x38
 800ec24:	a90f      	add	r1, sp, #60	@ 0x3c
 800ec26:	4648      	mov	r0, r9
 800ec28:	eeb0 0b48 	vmov.f64	d0, d8
 800ec2c:	f001 f9d2 	bl	800ffd4 <__d2b>
 800ec30:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ec34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec36:	9001      	str	r0, [sp, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d045      	beq.n	800ecc8 <_dtoa_r+0x168>
 800ec3c:	eeb0 7b48 	vmov.f64	d7, d8
 800ec40:	ee18 1a90 	vmov	r1, s17
 800ec44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ec48:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ec4c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ec50:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ec54:	2500      	movs	r5, #0
 800ec56:	ee07 1a90 	vmov	s15, r1
 800ec5a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ec5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800edf8 <_dtoa_r+0x298>
 800ec62:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ec66:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ee00 <_dtoa_r+0x2a0>
 800ec6a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ec6e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ee08 <_dtoa_r+0x2a8>
 800ec72:	ee07 3a90 	vmov	s15, r3
 800ec76:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ec7a:	eeb0 7b46 	vmov.f64	d7, d6
 800ec7e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ec82:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ec86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ec8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec8e:	ee16 8a90 	vmov	r8, s13
 800ec92:	d508      	bpl.n	800eca6 <_dtoa_r+0x146>
 800ec94:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ec98:	eeb4 6b47 	vcmp.f64	d6, d7
 800ec9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca0:	bf18      	it	ne
 800eca2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800eca6:	f1b8 0f16 	cmp.w	r8, #22
 800ecaa:	d82b      	bhi.n	800ed04 <_dtoa_r+0x1a4>
 800ecac:	495e      	ldr	r1, [pc, #376]	@ (800ee28 <_dtoa_r+0x2c8>)
 800ecae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ecb2:	ed91 7b00 	vldr	d7, [r1]
 800ecb6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ecba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecbe:	d501      	bpl.n	800ecc4 <_dtoa_r+0x164>
 800ecc0:	f108 38ff 	add.w	r8, r8, #4294967295
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	e01e      	b.n	800ed06 <_dtoa_r+0x1a6>
 800ecc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecca:	4413      	add	r3, r2
 800eccc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ecd0:	2920      	cmp	r1, #32
 800ecd2:	bfc1      	itttt	gt
 800ecd4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ecd8:	408e      	lslgt	r6, r1
 800ecda:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ecde:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ece2:	bfd6      	itet	le
 800ece4:	f1c1 0120 	rsble	r1, r1, #32
 800ece8:	4331      	orrgt	r1, r6
 800ecea:	fa04 f101 	lslle.w	r1, r4, r1
 800ecee:	ee07 1a90 	vmov	s15, r1
 800ecf2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	ee17 1a90 	vmov	r1, s15
 800ecfc:	2501      	movs	r5, #1
 800ecfe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ed02:	e7a8      	b.n	800ec56 <_dtoa_r+0xf6>
 800ed04:	2101      	movs	r1, #1
 800ed06:	1ad2      	subs	r2, r2, r3
 800ed08:	1e53      	subs	r3, r2, #1
 800ed0a:	9306      	str	r3, [sp, #24]
 800ed0c:	bf45      	ittet	mi
 800ed0e:	f1c2 0301 	rsbmi	r3, r2, #1
 800ed12:	9305      	strmi	r3, [sp, #20]
 800ed14:	2300      	movpl	r3, #0
 800ed16:	2300      	movmi	r3, #0
 800ed18:	bf4c      	ite	mi
 800ed1a:	9306      	strmi	r3, [sp, #24]
 800ed1c:	9305      	strpl	r3, [sp, #20]
 800ed1e:	f1b8 0f00 	cmp.w	r8, #0
 800ed22:	910c      	str	r1, [sp, #48]	@ 0x30
 800ed24:	db18      	blt.n	800ed58 <_dtoa_r+0x1f8>
 800ed26:	9b06      	ldr	r3, [sp, #24]
 800ed28:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ed2c:	4443      	add	r3, r8
 800ed2e:	9306      	str	r3, [sp, #24]
 800ed30:	2300      	movs	r3, #0
 800ed32:	9a07      	ldr	r2, [sp, #28]
 800ed34:	2a09      	cmp	r2, #9
 800ed36:	d849      	bhi.n	800edcc <_dtoa_r+0x26c>
 800ed38:	2a05      	cmp	r2, #5
 800ed3a:	bfc4      	itt	gt
 800ed3c:	3a04      	subgt	r2, #4
 800ed3e:	9207      	strgt	r2, [sp, #28]
 800ed40:	9a07      	ldr	r2, [sp, #28]
 800ed42:	f1a2 0202 	sub.w	r2, r2, #2
 800ed46:	bfcc      	ite	gt
 800ed48:	2400      	movgt	r4, #0
 800ed4a:	2401      	movle	r4, #1
 800ed4c:	2a03      	cmp	r2, #3
 800ed4e:	d848      	bhi.n	800ede2 <_dtoa_r+0x282>
 800ed50:	e8df f002 	tbb	[pc, r2]
 800ed54:	3a2c2e0b 	.word	0x3a2c2e0b
 800ed58:	9b05      	ldr	r3, [sp, #20]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	eba3 0308 	sub.w	r3, r3, r8
 800ed60:	9305      	str	r3, [sp, #20]
 800ed62:	920a      	str	r2, [sp, #40]	@ 0x28
 800ed64:	f1c8 0300 	rsb	r3, r8, #0
 800ed68:	e7e3      	b.n	800ed32 <_dtoa_r+0x1d2>
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	9208      	str	r2, [sp, #32]
 800ed6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed70:	2a00      	cmp	r2, #0
 800ed72:	dc39      	bgt.n	800ede8 <_dtoa_r+0x288>
 800ed74:	f04f 0b01 	mov.w	fp, #1
 800ed78:	46da      	mov	sl, fp
 800ed7a:	465a      	mov	r2, fp
 800ed7c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ed80:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ed84:	2100      	movs	r1, #0
 800ed86:	2004      	movs	r0, #4
 800ed88:	f100 0614 	add.w	r6, r0, #20
 800ed8c:	4296      	cmp	r6, r2
 800ed8e:	d930      	bls.n	800edf2 <_dtoa_r+0x292>
 800ed90:	6079      	str	r1, [r7, #4]
 800ed92:	4648      	mov	r0, r9
 800ed94:	9304      	str	r3, [sp, #16]
 800ed96:	f000 fd39 	bl	800f80c <_Balloc>
 800ed9a:	9b04      	ldr	r3, [sp, #16]
 800ed9c:	4607      	mov	r7, r0
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	d146      	bne.n	800ee30 <_dtoa_r+0x2d0>
 800eda2:	4b22      	ldr	r3, [pc, #136]	@ (800ee2c <_dtoa_r+0x2cc>)
 800eda4:	4602      	mov	r2, r0
 800eda6:	f240 11af 	movw	r1, #431	@ 0x1af
 800edaa:	e6f2      	b.n	800eb92 <_dtoa_r+0x32>
 800edac:	2201      	movs	r2, #1
 800edae:	e7dd      	b.n	800ed6c <_dtoa_r+0x20c>
 800edb0:	2200      	movs	r2, #0
 800edb2:	9208      	str	r2, [sp, #32]
 800edb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800edb6:	eb08 0b02 	add.w	fp, r8, r2
 800edba:	f10b 0a01 	add.w	sl, fp, #1
 800edbe:	4652      	mov	r2, sl
 800edc0:	2a01      	cmp	r2, #1
 800edc2:	bfb8      	it	lt
 800edc4:	2201      	movlt	r2, #1
 800edc6:	e7db      	b.n	800ed80 <_dtoa_r+0x220>
 800edc8:	2201      	movs	r2, #1
 800edca:	e7f2      	b.n	800edb2 <_dtoa_r+0x252>
 800edcc:	2401      	movs	r4, #1
 800edce:	2200      	movs	r2, #0
 800edd0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800edd4:	f04f 3bff 	mov.w	fp, #4294967295
 800edd8:	2100      	movs	r1, #0
 800edda:	46da      	mov	sl, fp
 800eddc:	2212      	movs	r2, #18
 800edde:	9109      	str	r1, [sp, #36]	@ 0x24
 800ede0:	e7ce      	b.n	800ed80 <_dtoa_r+0x220>
 800ede2:	2201      	movs	r2, #1
 800ede4:	9208      	str	r2, [sp, #32]
 800ede6:	e7f5      	b.n	800edd4 <_dtoa_r+0x274>
 800ede8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800edec:	46da      	mov	sl, fp
 800edee:	465a      	mov	r2, fp
 800edf0:	e7c6      	b.n	800ed80 <_dtoa_r+0x220>
 800edf2:	3101      	adds	r1, #1
 800edf4:	0040      	lsls	r0, r0, #1
 800edf6:	e7c7      	b.n	800ed88 <_dtoa_r+0x228>
 800edf8:	636f4361 	.word	0x636f4361
 800edfc:	3fd287a7 	.word	0x3fd287a7
 800ee00:	8b60c8b3 	.word	0x8b60c8b3
 800ee04:	3fc68a28 	.word	0x3fc68a28
 800ee08:	509f79fb 	.word	0x509f79fb
 800ee0c:	3fd34413 	.word	0x3fd34413
 800ee10:	08012022 	.word	0x08012022
 800ee14:	08012039 	.word	0x08012039
 800ee18:	7ff00000 	.word	0x7ff00000
 800ee1c:	0801201e 	.word	0x0801201e
 800ee20:	08011fed 	.word	0x08011fed
 800ee24:	08011fec 	.word	0x08011fec
 800ee28:	08012130 	.word	0x08012130
 800ee2c:	08012091 	.word	0x08012091
 800ee30:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ee34:	f1ba 0f0e 	cmp.w	sl, #14
 800ee38:	6010      	str	r0, [r2, #0]
 800ee3a:	d86f      	bhi.n	800ef1c <_dtoa_r+0x3bc>
 800ee3c:	2c00      	cmp	r4, #0
 800ee3e:	d06d      	beq.n	800ef1c <_dtoa_r+0x3bc>
 800ee40:	f1b8 0f00 	cmp.w	r8, #0
 800ee44:	f340 80c2 	ble.w	800efcc <_dtoa_r+0x46c>
 800ee48:	4aca      	ldr	r2, [pc, #808]	@ (800f174 <_dtoa_r+0x614>)
 800ee4a:	f008 010f 	and.w	r1, r8, #15
 800ee4e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ee52:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ee56:	ed92 7b00 	vldr	d7, [r2]
 800ee5a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ee5e:	f000 80a9 	beq.w	800efb4 <_dtoa_r+0x454>
 800ee62:	4ac5      	ldr	r2, [pc, #788]	@ (800f178 <_dtoa_r+0x618>)
 800ee64:	ed92 6b08 	vldr	d6, [r2, #32]
 800ee68:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ee6c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ee70:	f001 010f 	and.w	r1, r1, #15
 800ee74:	2203      	movs	r2, #3
 800ee76:	48c0      	ldr	r0, [pc, #768]	@ (800f178 <_dtoa_r+0x618>)
 800ee78:	2900      	cmp	r1, #0
 800ee7a:	f040 809d 	bne.w	800efb8 <_dtoa_r+0x458>
 800ee7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ee82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ee86:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ee8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ee8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee90:	2900      	cmp	r1, #0
 800ee92:	f000 80c1 	beq.w	800f018 <_dtoa_r+0x4b8>
 800ee96:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ee9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ee9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea2:	f140 80b9 	bpl.w	800f018 <_dtoa_r+0x4b8>
 800eea6:	f1ba 0f00 	cmp.w	sl, #0
 800eeaa:	f000 80b5 	beq.w	800f018 <_dtoa_r+0x4b8>
 800eeae:	f1bb 0f00 	cmp.w	fp, #0
 800eeb2:	dd31      	ble.n	800ef18 <_dtoa_r+0x3b8>
 800eeb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800eeb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eebc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eec0:	f108 31ff 	add.w	r1, r8, #4294967295
 800eec4:	9104      	str	r1, [sp, #16]
 800eec6:	3201      	adds	r2, #1
 800eec8:	465c      	mov	r4, fp
 800eeca:	ed9d 6b02 	vldr	d6, [sp, #8]
 800eece:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800eed2:	ee07 2a90 	vmov	s15, r2
 800eed6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800eeda:	eea7 5b06 	vfma.f64	d5, d7, d6
 800eede:	ee15 2a90 	vmov	r2, s11
 800eee2:	ec51 0b15 	vmov	r0, r1, d5
 800eee6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800eeea:	2c00      	cmp	r4, #0
 800eeec:	f040 8098 	bne.w	800f020 <_dtoa_r+0x4c0>
 800eef0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800eef4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800eef8:	ec41 0b17 	vmov	d7, r0, r1
 800eefc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef04:	f300 8261 	bgt.w	800f3ca <_dtoa_r+0x86a>
 800ef08:	eeb1 7b47 	vneg.f64	d7, d7
 800ef0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef14:	f100 80f5 	bmi.w	800f102 <_dtoa_r+0x5a2>
 800ef18:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ef1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ef1e:	2a00      	cmp	r2, #0
 800ef20:	f2c0 812c 	blt.w	800f17c <_dtoa_r+0x61c>
 800ef24:	f1b8 0f0e 	cmp.w	r8, #14
 800ef28:	f300 8128 	bgt.w	800f17c <_dtoa_r+0x61c>
 800ef2c:	4b91      	ldr	r3, [pc, #580]	@ (800f174 <_dtoa_r+0x614>)
 800ef2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ef32:	ed93 6b00 	vldr	d6, [r3]
 800ef36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	da03      	bge.n	800ef44 <_dtoa_r+0x3e4>
 800ef3c:	f1ba 0f00 	cmp.w	sl, #0
 800ef40:	f340 80d2 	ble.w	800f0e8 <_dtoa_r+0x588>
 800ef44:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ef48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef4c:	463e      	mov	r6, r7
 800ef4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ef52:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ef56:	ee15 3a10 	vmov	r3, s10
 800ef5a:	3330      	adds	r3, #48	@ 0x30
 800ef5c:	f806 3b01 	strb.w	r3, [r6], #1
 800ef60:	1bf3      	subs	r3, r6, r7
 800ef62:	459a      	cmp	sl, r3
 800ef64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ef68:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ef6c:	f040 80f8 	bne.w	800f160 <_dtoa_r+0x600>
 800ef70:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ef74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ef78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef7c:	f300 80dd 	bgt.w	800f13a <_dtoa_r+0x5da>
 800ef80:	eeb4 7b46 	vcmp.f64	d7, d6
 800ef84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef88:	d104      	bne.n	800ef94 <_dtoa_r+0x434>
 800ef8a:	ee15 3a10 	vmov	r3, s10
 800ef8e:	07db      	lsls	r3, r3, #31
 800ef90:	f100 80d3 	bmi.w	800f13a <_dtoa_r+0x5da>
 800ef94:	9901      	ldr	r1, [sp, #4]
 800ef96:	4648      	mov	r0, r9
 800ef98:	f000 fc78 	bl	800f88c <_Bfree>
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800efa0:	7033      	strb	r3, [r6, #0]
 800efa2:	f108 0301 	add.w	r3, r8, #1
 800efa6:	6013      	str	r3, [r2, #0]
 800efa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f000 8304 	beq.w	800f5b8 <_dtoa_r+0xa58>
 800efb0:	601e      	str	r6, [r3, #0]
 800efb2:	e301      	b.n	800f5b8 <_dtoa_r+0xa58>
 800efb4:	2202      	movs	r2, #2
 800efb6:	e75e      	b.n	800ee76 <_dtoa_r+0x316>
 800efb8:	07cc      	lsls	r4, r1, #31
 800efba:	d504      	bpl.n	800efc6 <_dtoa_r+0x466>
 800efbc:	ed90 6b00 	vldr	d6, [r0]
 800efc0:	3201      	adds	r2, #1
 800efc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800efc6:	1049      	asrs	r1, r1, #1
 800efc8:	3008      	adds	r0, #8
 800efca:	e755      	b.n	800ee78 <_dtoa_r+0x318>
 800efcc:	d022      	beq.n	800f014 <_dtoa_r+0x4b4>
 800efce:	f1c8 0100 	rsb	r1, r8, #0
 800efd2:	4a68      	ldr	r2, [pc, #416]	@ (800f174 <_dtoa_r+0x614>)
 800efd4:	f001 000f 	and.w	r0, r1, #15
 800efd8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800efdc:	ed92 7b00 	vldr	d7, [r2]
 800efe0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800efe4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800efe8:	4863      	ldr	r0, [pc, #396]	@ (800f178 <_dtoa_r+0x618>)
 800efea:	1109      	asrs	r1, r1, #4
 800efec:	2400      	movs	r4, #0
 800efee:	2202      	movs	r2, #2
 800eff0:	b929      	cbnz	r1, 800effe <_dtoa_r+0x49e>
 800eff2:	2c00      	cmp	r4, #0
 800eff4:	f43f af49 	beq.w	800ee8a <_dtoa_r+0x32a>
 800eff8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800effc:	e745      	b.n	800ee8a <_dtoa_r+0x32a>
 800effe:	07ce      	lsls	r6, r1, #31
 800f000:	d505      	bpl.n	800f00e <_dtoa_r+0x4ae>
 800f002:	ed90 6b00 	vldr	d6, [r0]
 800f006:	3201      	adds	r2, #1
 800f008:	2401      	movs	r4, #1
 800f00a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f00e:	1049      	asrs	r1, r1, #1
 800f010:	3008      	adds	r0, #8
 800f012:	e7ed      	b.n	800eff0 <_dtoa_r+0x490>
 800f014:	2202      	movs	r2, #2
 800f016:	e738      	b.n	800ee8a <_dtoa_r+0x32a>
 800f018:	f8cd 8010 	str.w	r8, [sp, #16]
 800f01c:	4654      	mov	r4, sl
 800f01e:	e754      	b.n	800eeca <_dtoa_r+0x36a>
 800f020:	4a54      	ldr	r2, [pc, #336]	@ (800f174 <_dtoa_r+0x614>)
 800f022:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f026:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f02a:	9a08      	ldr	r2, [sp, #32]
 800f02c:	ec41 0b17 	vmov	d7, r0, r1
 800f030:	443c      	add	r4, r7
 800f032:	b34a      	cbz	r2, 800f088 <_dtoa_r+0x528>
 800f034:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f038:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f03c:	463e      	mov	r6, r7
 800f03e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f042:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f046:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f04a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f04e:	ee14 2a90 	vmov	r2, s9
 800f052:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f056:	3230      	adds	r2, #48	@ 0x30
 800f058:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f05c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f064:	f806 2b01 	strb.w	r2, [r6], #1
 800f068:	d438      	bmi.n	800f0dc <_dtoa_r+0x57c>
 800f06a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f06e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f076:	d462      	bmi.n	800f13e <_dtoa_r+0x5de>
 800f078:	42a6      	cmp	r6, r4
 800f07a:	f43f af4d 	beq.w	800ef18 <_dtoa_r+0x3b8>
 800f07e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f082:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f086:	e7e0      	b.n	800f04a <_dtoa_r+0x4ea>
 800f088:	4621      	mov	r1, r4
 800f08a:	463e      	mov	r6, r7
 800f08c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f090:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f094:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f098:	ee14 2a90 	vmov	r2, s9
 800f09c:	3230      	adds	r2, #48	@ 0x30
 800f09e:	f806 2b01 	strb.w	r2, [r6], #1
 800f0a2:	42a6      	cmp	r6, r4
 800f0a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f0a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f0ac:	d119      	bne.n	800f0e2 <_dtoa_r+0x582>
 800f0ae:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f0b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f0b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0be:	dc3e      	bgt.n	800f13e <_dtoa_r+0x5de>
 800f0c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f0c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0cc:	f57f af24 	bpl.w	800ef18 <_dtoa_r+0x3b8>
 800f0d0:	460e      	mov	r6, r1
 800f0d2:	3901      	subs	r1, #1
 800f0d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f0d8:	2b30      	cmp	r3, #48	@ 0x30
 800f0da:	d0f9      	beq.n	800f0d0 <_dtoa_r+0x570>
 800f0dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f0e0:	e758      	b.n	800ef94 <_dtoa_r+0x434>
 800f0e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f0e6:	e7d5      	b.n	800f094 <_dtoa_r+0x534>
 800f0e8:	d10b      	bne.n	800f102 <_dtoa_r+0x5a2>
 800f0ea:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f0ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f0f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0fe:	f2c0 8161 	blt.w	800f3c4 <_dtoa_r+0x864>
 800f102:	2400      	movs	r4, #0
 800f104:	4625      	mov	r5, r4
 800f106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f108:	43db      	mvns	r3, r3
 800f10a:	9304      	str	r3, [sp, #16]
 800f10c:	463e      	mov	r6, r7
 800f10e:	f04f 0800 	mov.w	r8, #0
 800f112:	4621      	mov	r1, r4
 800f114:	4648      	mov	r0, r9
 800f116:	f000 fbb9 	bl	800f88c <_Bfree>
 800f11a:	2d00      	cmp	r5, #0
 800f11c:	d0de      	beq.n	800f0dc <_dtoa_r+0x57c>
 800f11e:	f1b8 0f00 	cmp.w	r8, #0
 800f122:	d005      	beq.n	800f130 <_dtoa_r+0x5d0>
 800f124:	45a8      	cmp	r8, r5
 800f126:	d003      	beq.n	800f130 <_dtoa_r+0x5d0>
 800f128:	4641      	mov	r1, r8
 800f12a:	4648      	mov	r0, r9
 800f12c:	f000 fbae 	bl	800f88c <_Bfree>
 800f130:	4629      	mov	r1, r5
 800f132:	4648      	mov	r0, r9
 800f134:	f000 fbaa 	bl	800f88c <_Bfree>
 800f138:	e7d0      	b.n	800f0dc <_dtoa_r+0x57c>
 800f13a:	f8cd 8010 	str.w	r8, [sp, #16]
 800f13e:	4633      	mov	r3, r6
 800f140:	461e      	mov	r6, r3
 800f142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f146:	2a39      	cmp	r2, #57	@ 0x39
 800f148:	d106      	bne.n	800f158 <_dtoa_r+0x5f8>
 800f14a:	429f      	cmp	r7, r3
 800f14c:	d1f8      	bne.n	800f140 <_dtoa_r+0x5e0>
 800f14e:	9a04      	ldr	r2, [sp, #16]
 800f150:	3201      	adds	r2, #1
 800f152:	9204      	str	r2, [sp, #16]
 800f154:	2230      	movs	r2, #48	@ 0x30
 800f156:	703a      	strb	r2, [r7, #0]
 800f158:	781a      	ldrb	r2, [r3, #0]
 800f15a:	3201      	adds	r2, #1
 800f15c:	701a      	strb	r2, [r3, #0]
 800f15e:	e7bd      	b.n	800f0dc <_dtoa_r+0x57c>
 800f160:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f164:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f16c:	f47f aeef 	bne.w	800ef4e <_dtoa_r+0x3ee>
 800f170:	e710      	b.n	800ef94 <_dtoa_r+0x434>
 800f172:	bf00      	nop
 800f174:	08012130 	.word	0x08012130
 800f178:	08012108 	.word	0x08012108
 800f17c:	9908      	ldr	r1, [sp, #32]
 800f17e:	2900      	cmp	r1, #0
 800f180:	f000 80e3 	beq.w	800f34a <_dtoa_r+0x7ea>
 800f184:	9907      	ldr	r1, [sp, #28]
 800f186:	2901      	cmp	r1, #1
 800f188:	f300 80c8 	bgt.w	800f31c <_dtoa_r+0x7bc>
 800f18c:	2d00      	cmp	r5, #0
 800f18e:	f000 80c1 	beq.w	800f314 <_dtoa_r+0x7b4>
 800f192:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f196:	9e05      	ldr	r6, [sp, #20]
 800f198:	461c      	mov	r4, r3
 800f19a:	9304      	str	r3, [sp, #16]
 800f19c:	9b05      	ldr	r3, [sp, #20]
 800f19e:	4413      	add	r3, r2
 800f1a0:	9305      	str	r3, [sp, #20]
 800f1a2:	9b06      	ldr	r3, [sp, #24]
 800f1a4:	2101      	movs	r1, #1
 800f1a6:	4413      	add	r3, r2
 800f1a8:	4648      	mov	r0, r9
 800f1aa:	9306      	str	r3, [sp, #24]
 800f1ac:	f000 fc6c 	bl	800fa88 <__i2b>
 800f1b0:	9b04      	ldr	r3, [sp, #16]
 800f1b2:	4605      	mov	r5, r0
 800f1b4:	b166      	cbz	r6, 800f1d0 <_dtoa_r+0x670>
 800f1b6:	9a06      	ldr	r2, [sp, #24]
 800f1b8:	2a00      	cmp	r2, #0
 800f1ba:	dd09      	ble.n	800f1d0 <_dtoa_r+0x670>
 800f1bc:	42b2      	cmp	r2, r6
 800f1be:	9905      	ldr	r1, [sp, #20]
 800f1c0:	bfa8      	it	ge
 800f1c2:	4632      	movge	r2, r6
 800f1c4:	1a89      	subs	r1, r1, r2
 800f1c6:	9105      	str	r1, [sp, #20]
 800f1c8:	9906      	ldr	r1, [sp, #24]
 800f1ca:	1ab6      	subs	r6, r6, r2
 800f1cc:	1a8a      	subs	r2, r1, r2
 800f1ce:	9206      	str	r2, [sp, #24]
 800f1d0:	b1fb      	cbz	r3, 800f212 <_dtoa_r+0x6b2>
 800f1d2:	9a08      	ldr	r2, [sp, #32]
 800f1d4:	2a00      	cmp	r2, #0
 800f1d6:	f000 80bc 	beq.w	800f352 <_dtoa_r+0x7f2>
 800f1da:	b19c      	cbz	r4, 800f204 <_dtoa_r+0x6a4>
 800f1dc:	4629      	mov	r1, r5
 800f1de:	4622      	mov	r2, r4
 800f1e0:	4648      	mov	r0, r9
 800f1e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1e4:	f000 fd10 	bl	800fc08 <__pow5mult>
 800f1e8:	9a01      	ldr	r2, [sp, #4]
 800f1ea:	4601      	mov	r1, r0
 800f1ec:	4605      	mov	r5, r0
 800f1ee:	4648      	mov	r0, r9
 800f1f0:	f000 fc60 	bl	800fab4 <__multiply>
 800f1f4:	9901      	ldr	r1, [sp, #4]
 800f1f6:	9004      	str	r0, [sp, #16]
 800f1f8:	4648      	mov	r0, r9
 800f1fa:	f000 fb47 	bl	800f88c <_Bfree>
 800f1fe:	9a04      	ldr	r2, [sp, #16]
 800f200:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f202:	9201      	str	r2, [sp, #4]
 800f204:	1b1a      	subs	r2, r3, r4
 800f206:	d004      	beq.n	800f212 <_dtoa_r+0x6b2>
 800f208:	9901      	ldr	r1, [sp, #4]
 800f20a:	4648      	mov	r0, r9
 800f20c:	f000 fcfc 	bl	800fc08 <__pow5mult>
 800f210:	9001      	str	r0, [sp, #4]
 800f212:	2101      	movs	r1, #1
 800f214:	4648      	mov	r0, r9
 800f216:	f000 fc37 	bl	800fa88 <__i2b>
 800f21a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f21c:	4604      	mov	r4, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	f000 81d0 	beq.w	800f5c4 <_dtoa_r+0xa64>
 800f224:	461a      	mov	r2, r3
 800f226:	4601      	mov	r1, r0
 800f228:	4648      	mov	r0, r9
 800f22a:	f000 fced 	bl	800fc08 <__pow5mult>
 800f22e:	9b07      	ldr	r3, [sp, #28]
 800f230:	2b01      	cmp	r3, #1
 800f232:	4604      	mov	r4, r0
 800f234:	f300 8095 	bgt.w	800f362 <_dtoa_r+0x802>
 800f238:	9b02      	ldr	r3, [sp, #8]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f040 808b 	bne.w	800f356 <_dtoa_r+0x7f6>
 800f240:	9b03      	ldr	r3, [sp, #12]
 800f242:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f246:	2a00      	cmp	r2, #0
 800f248:	f040 8087 	bne.w	800f35a <_dtoa_r+0x7fa>
 800f24c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f250:	0d12      	lsrs	r2, r2, #20
 800f252:	0512      	lsls	r2, r2, #20
 800f254:	2a00      	cmp	r2, #0
 800f256:	f000 8082 	beq.w	800f35e <_dtoa_r+0x7fe>
 800f25a:	9b05      	ldr	r3, [sp, #20]
 800f25c:	3301      	adds	r3, #1
 800f25e:	9305      	str	r3, [sp, #20]
 800f260:	9b06      	ldr	r3, [sp, #24]
 800f262:	3301      	adds	r3, #1
 800f264:	9306      	str	r3, [sp, #24]
 800f266:	2301      	movs	r3, #1
 800f268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f26a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f000 81af 	beq.w	800f5d0 <_dtoa_r+0xa70>
 800f272:	6922      	ldr	r2, [r4, #16]
 800f274:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f278:	6910      	ldr	r0, [r2, #16]
 800f27a:	f000 fbb9 	bl	800f9f0 <__hi0bits>
 800f27e:	f1c0 0020 	rsb	r0, r0, #32
 800f282:	9b06      	ldr	r3, [sp, #24]
 800f284:	4418      	add	r0, r3
 800f286:	f010 001f 	ands.w	r0, r0, #31
 800f28a:	d076      	beq.n	800f37a <_dtoa_r+0x81a>
 800f28c:	f1c0 0220 	rsb	r2, r0, #32
 800f290:	2a04      	cmp	r2, #4
 800f292:	dd69      	ble.n	800f368 <_dtoa_r+0x808>
 800f294:	9b05      	ldr	r3, [sp, #20]
 800f296:	f1c0 001c 	rsb	r0, r0, #28
 800f29a:	4403      	add	r3, r0
 800f29c:	9305      	str	r3, [sp, #20]
 800f29e:	9b06      	ldr	r3, [sp, #24]
 800f2a0:	4406      	add	r6, r0
 800f2a2:	4403      	add	r3, r0
 800f2a4:	9306      	str	r3, [sp, #24]
 800f2a6:	9b05      	ldr	r3, [sp, #20]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	dd05      	ble.n	800f2b8 <_dtoa_r+0x758>
 800f2ac:	9901      	ldr	r1, [sp, #4]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	4648      	mov	r0, r9
 800f2b2:	f000 fd03 	bl	800fcbc <__lshift>
 800f2b6:	9001      	str	r0, [sp, #4]
 800f2b8:	9b06      	ldr	r3, [sp, #24]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	dd05      	ble.n	800f2ca <_dtoa_r+0x76a>
 800f2be:	4621      	mov	r1, r4
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4648      	mov	r0, r9
 800f2c4:	f000 fcfa 	bl	800fcbc <__lshift>
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d056      	beq.n	800f37e <_dtoa_r+0x81e>
 800f2d0:	9801      	ldr	r0, [sp, #4]
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	f000 fd5e 	bl	800fd94 <__mcmp>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	da50      	bge.n	800f37e <_dtoa_r+0x81e>
 800f2dc:	f108 33ff 	add.w	r3, r8, #4294967295
 800f2e0:	9304      	str	r3, [sp, #16]
 800f2e2:	9901      	ldr	r1, [sp, #4]
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	220a      	movs	r2, #10
 800f2e8:	4648      	mov	r0, r9
 800f2ea:	f000 faf1 	bl	800f8d0 <__multadd>
 800f2ee:	9b08      	ldr	r3, [sp, #32]
 800f2f0:	9001      	str	r0, [sp, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	f000 816e 	beq.w	800f5d4 <_dtoa_r+0xa74>
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	220a      	movs	r2, #10
 800f2fe:	4648      	mov	r0, r9
 800f300:	f000 fae6 	bl	800f8d0 <__multadd>
 800f304:	f1bb 0f00 	cmp.w	fp, #0
 800f308:	4605      	mov	r5, r0
 800f30a:	dc64      	bgt.n	800f3d6 <_dtoa_r+0x876>
 800f30c:	9b07      	ldr	r3, [sp, #28]
 800f30e:	2b02      	cmp	r3, #2
 800f310:	dc3e      	bgt.n	800f390 <_dtoa_r+0x830>
 800f312:	e060      	b.n	800f3d6 <_dtoa_r+0x876>
 800f314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f316:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f31a:	e73c      	b.n	800f196 <_dtoa_r+0x636>
 800f31c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f320:	42a3      	cmp	r3, r4
 800f322:	bfbf      	itttt	lt
 800f324:	1ae2      	sublt	r2, r4, r3
 800f326:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f328:	189b      	addlt	r3, r3, r2
 800f32a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f32c:	bfae      	itee	ge
 800f32e:	1b1c      	subge	r4, r3, r4
 800f330:	4623      	movlt	r3, r4
 800f332:	2400      	movlt	r4, #0
 800f334:	f1ba 0f00 	cmp.w	sl, #0
 800f338:	bfb5      	itete	lt
 800f33a:	9a05      	ldrlt	r2, [sp, #20]
 800f33c:	9e05      	ldrge	r6, [sp, #20]
 800f33e:	eba2 060a 	sublt.w	r6, r2, sl
 800f342:	4652      	movge	r2, sl
 800f344:	bfb8      	it	lt
 800f346:	2200      	movlt	r2, #0
 800f348:	e727      	b.n	800f19a <_dtoa_r+0x63a>
 800f34a:	9e05      	ldr	r6, [sp, #20]
 800f34c:	9d08      	ldr	r5, [sp, #32]
 800f34e:	461c      	mov	r4, r3
 800f350:	e730      	b.n	800f1b4 <_dtoa_r+0x654>
 800f352:	461a      	mov	r2, r3
 800f354:	e758      	b.n	800f208 <_dtoa_r+0x6a8>
 800f356:	2300      	movs	r3, #0
 800f358:	e786      	b.n	800f268 <_dtoa_r+0x708>
 800f35a:	9b02      	ldr	r3, [sp, #8]
 800f35c:	e784      	b.n	800f268 <_dtoa_r+0x708>
 800f35e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f360:	e783      	b.n	800f26a <_dtoa_r+0x70a>
 800f362:	2300      	movs	r3, #0
 800f364:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f366:	e784      	b.n	800f272 <_dtoa_r+0x712>
 800f368:	d09d      	beq.n	800f2a6 <_dtoa_r+0x746>
 800f36a:	9b05      	ldr	r3, [sp, #20]
 800f36c:	321c      	adds	r2, #28
 800f36e:	4413      	add	r3, r2
 800f370:	9305      	str	r3, [sp, #20]
 800f372:	9b06      	ldr	r3, [sp, #24]
 800f374:	4416      	add	r6, r2
 800f376:	4413      	add	r3, r2
 800f378:	e794      	b.n	800f2a4 <_dtoa_r+0x744>
 800f37a:	4602      	mov	r2, r0
 800f37c:	e7f5      	b.n	800f36a <_dtoa_r+0x80a>
 800f37e:	f1ba 0f00 	cmp.w	sl, #0
 800f382:	f8cd 8010 	str.w	r8, [sp, #16]
 800f386:	46d3      	mov	fp, sl
 800f388:	dc21      	bgt.n	800f3ce <_dtoa_r+0x86e>
 800f38a:	9b07      	ldr	r3, [sp, #28]
 800f38c:	2b02      	cmp	r3, #2
 800f38e:	dd1e      	ble.n	800f3ce <_dtoa_r+0x86e>
 800f390:	f1bb 0f00 	cmp.w	fp, #0
 800f394:	f47f aeb7 	bne.w	800f106 <_dtoa_r+0x5a6>
 800f398:	4621      	mov	r1, r4
 800f39a:	465b      	mov	r3, fp
 800f39c:	2205      	movs	r2, #5
 800f39e:	4648      	mov	r0, r9
 800f3a0:	f000 fa96 	bl	800f8d0 <__multadd>
 800f3a4:	4601      	mov	r1, r0
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	9801      	ldr	r0, [sp, #4]
 800f3aa:	f000 fcf3 	bl	800fd94 <__mcmp>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	f77f aea9 	ble.w	800f106 <_dtoa_r+0x5a6>
 800f3b4:	463e      	mov	r6, r7
 800f3b6:	2331      	movs	r3, #49	@ 0x31
 800f3b8:	f806 3b01 	strb.w	r3, [r6], #1
 800f3bc:	9b04      	ldr	r3, [sp, #16]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	9304      	str	r3, [sp, #16]
 800f3c2:	e6a4      	b.n	800f10e <_dtoa_r+0x5ae>
 800f3c4:	f8cd 8010 	str.w	r8, [sp, #16]
 800f3c8:	4654      	mov	r4, sl
 800f3ca:	4625      	mov	r5, r4
 800f3cc:	e7f2      	b.n	800f3b4 <_dtoa_r+0x854>
 800f3ce:	9b08      	ldr	r3, [sp, #32]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f000 8103 	beq.w	800f5dc <_dtoa_r+0xa7c>
 800f3d6:	2e00      	cmp	r6, #0
 800f3d8:	dd05      	ble.n	800f3e6 <_dtoa_r+0x886>
 800f3da:	4629      	mov	r1, r5
 800f3dc:	4632      	mov	r2, r6
 800f3de:	4648      	mov	r0, r9
 800f3e0:	f000 fc6c 	bl	800fcbc <__lshift>
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d058      	beq.n	800f49e <_dtoa_r+0x93e>
 800f3ec:	6869      	ldr	r1, [r5, #4]
 800f3ee:	4648      	mov	r0, r9
 800f3f0:	f000 fa0c 	bl	800f80c <_Balloc>
 800f3f4:	4606      	mov	r6, r0
 800f3f6:	b928      	cbnz	r0, 800f404 <_dtoa_r+0x8a4>
 800f3f8:	4b82      	ldr	r3, [pc, #520]	@ (800f604 <_dtoa_r+0xaa4>)
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f400:	f7ff bbc7 	b.w	800eb92 <_dtoa_r+0x32>
 800f404:	692a      	ldr	r2, [r5, #16]
 800f406:	3202      	adds	r2, #2
 800f408:	0092      	lsls	r2, r2, #2
 800f40a:	f105 010c 	add.w	r1, r5, #12
 800f40e:	300c      	adds	r0, #12
 800f410:	f7ff fb07 	bl	800ea22 <memcpy>
 800f414:	2201      	movs	r2, #1
 800f416:	4631      	mov	r1, r6
 800f418:	4648      	mov	r0, r9
 800f41a:	f000 fc4f 	bl	800fcbc <__lshift>
 800f41e:	1c7b      	adds	r3, r7, #1
 800f420:	9305      	str	r3, [sp, #20]
 800f422:	eb07 030b 	add.w	r3, r7, fp
 800f426:	9309      	str	r3, [sp, #36]	@ 0x24
 800f428:	9b02      	ldr	r3, [sp, #8]
 800f42a:	f003 0301 	and.w	r3, r3, #1
 800f42e:	46a8      	mov	r8, r5
 800f430:	9308      	str	r3, [sp, #32]
 800f432:	4605      	mov	r5, r0
 800f434:	9b05      	ldr	r3, [sp, #20]
 800f436:	9801      	ldr	r0, [sp, #4]
 800f438:	4621      	mov	r1, r4
 800f43a:	f103 3bff 	add.w	fp, r3, #4294967295
 800f43e:	f7ff fb05 	bl	800ea4c <quorem>
 800f442:	4641      	mov	r1, r8
 800f444:	9002      	str	r0, [sp, #8]
 800f446:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f44a:	9801      	ldr	r0, [sp, #4]
 800f44c:	f000 fca2 	bl	800fd94 <__mcmp>
 800f450:	462a      	mov	r2, r5
 800f452:	9006      	str	r0, [sp, #24]
 800f454:	4621      	mov	r1, r4
 800f456:	4648      	mov	r0, r9
 800f458:	f000 fcb8 	bl	800fdcc <__mdiff>
 800f45c:	68c2      	ldr	r2, [r0, #12]
 800f45e:	4606      	mov	r6, r0
 800f460:	b9fa      	cbnz	r2, 800f4a2 <_dtoa_r+0x942>
 800f462:	4601      	mov	r1, r0
 800f464:	9801      	ldr	r0, [sp, #4]
 800f466:	f000 fc95 	bl	800fd94 <__mcmp>
 800f46a:	4602      	mov	r2, r0
 800f46c:	4631      	mov	r1, r6
 800f46e:	4648      	mov	r0, r9
 800f470:	920a      	str	r2, [sp, #40]	@ 0x28
 800f472:	f000 fa0b 	bl	800f88c <_Bfree>
 800f476:	9b07      	ldr	r3, [sp, #28]
 800f478:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f47a:	9e05      	ldr	r6, [sp, #20]
 800f47c:	ea43 0102 	orr.w	r1, r3, r2
 800f480:	9b08      	ldr	r3, [sp, #32]
 800f482:	4319      	orrs	r1, r3
 800f484:	d10f      	bne.n	800f4a6 <_dtoa_r+0x946>
 800f486:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f48a:	d028      	beq.n	800f4de <_dtoa_r+0x97e>
 800f48c:	9b06      	ldr	r3, [sp, #24]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	dd02      	ble.n	800f498 <_dtoa_r+0x938>
 800f492:	9b02      	ldr	r3, [sp, #8]
 800f494:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f498:	f88b a000 	strb.w	sl, [fp]
 800f49c:	e639      	b.n	800f112 <_dtoa_r+0x5b2>
 800f49e:	4628      	mov	r0, r5
 800f4a0:	e7bd      	b.n	800f41e <_dtoa_r+0x8be>
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	e7e2      	b.n	800f46c <_dtoa_r+0x90c>
 800f4a6:	9b06      	ldr	r3, [sp, #24]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	db04      	blt.n	800f4b6 <_dtoa_r+0x956>
 800f4ac:	9907      	ldr	r1, [sp, #28]
 800f4ae:	430b      	orrs	r3, r1
 800f4b0:	9908      	ldr	r1, [sp, #32]
 800f4b2:	430b      	orrs	r3, r1
 800f4b4:	d120      	bne.n	800f4f8 <_dtoa_r+0x998>
 800f4b6:	2a00      	cmp	r2, #0
 800f4b8:	ddee      	ble.n	800f498 <_dtoa_r+0x938>
 800f4ba:	9901      	ldr	r1, [sp, #4]
 800f4bc:	2201      	movs	r2, #1
 800f4be:	4648      	mov	r0, r9
 800f4c0:	f000 fbfc 	bl	800fcbc <__lshift>
 800f4c4:	4621      	mov	r1, r4
 800f4c6:	9001      	str	r0, [sp, #4]
 800f4c8:	f000 fc64 	bl	800fd94 <__mcmp>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	dc03      	bgt.n	800f4d8 <_dtoa_r+0x978>
 800f4d0:	d1e2      	bne.n	800f498 <_dtoa_r+0x938>
 800f4d2:	f01a 0f01 	tst.w	sl, #1
 800f4d6:	d0df      	beq.n	800f498 <_dtoa_r+0x938>
 800f4d8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f4dc:	d1d9      	bne.n	800f492 <_dtoa_r+0x932>
 800f4de:	2339      	movs	r3, #57	@ 0x39
 800f4e0:	f88b 3000 	strb.w	r3, [fp]
 800f4e4:	4633      	mov	r3, r6
 800f4e6:	461e      	mov	r6, r3
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f4ee:	2a39      	cmp	r2, #57	@ 0x39
 800f4f0:	d053      	beq.n	800f59a <_dtoa_r+0xa3a>
 800f4f2:	3201      	adds	r2, #1
 800f4f4:	701a      	strb	r2, [r3, #0]
 800f4f6:	e60c      	b.n	800f112 <_dtoa_r+0x5b2>
 800f4f8:	2a00      	cmp	r2, #0
 800f4fa:	dd07      	ble.n	800f50c <_dtoa_r+0x9ac>
 800f4fc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f500:	d0ed      	beq.n	800f4de <_dtoa_r+0x97e>
 800f502:	f10a 0301 	add.w	r3, sl, #1
 800f506:	f88b 3000 	strb.w	r3, [fp]
 800f50a:	e602      	b.n	800f112 <_dtoa_r+0x5b2>
 800f50c:	9b05      	ldr	r3, [sp, #20]
 800f50e:	9a05      	ldr	r2, [sp, #20]
 800f510:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f516:	4293      	cmp	r3, r2
 800f518:	d029      	beq.n	800f56e <_dtoa_r+0xa0e>
 800f51a:	9901      	ldr	r1, [sp, #4]
 800f51c:	2300      	movs	r3, #0
 800f51e:	220a      	movs	r2, #10
 800f520:	4648      	mov	r0, r9
 800f522:	f000 f9d5 	bl	800f8d0 <__multadd>
 800f526:	45a8      	cmp	r8, r5
 800f528:	9001      	str	r0, [sp, #4]
 800f52a:	f04f 0300 	mov.w	r3, #0
 800f52e:	f04f 020a 	mov.w	r2, #10
 800f532:	4641      	mov	r1, r8
 800f534:	4648      	mov	r0, r9
 800f536:	d107      	bne.n	800f548 <_dtoa_r+0x9e8>
 800f538:	f000 f9ca 	bl	800f8d0 <__multadd>
 800f53c:	4680      	mov	r8, r0
 800f53e:	4605      	mov	r5, r0
 800f540:	9b05      	ldr	r3, [sp, #20]
 800f542:	3301      	adds	r3, #1
 800f544:	9305      	str	r3, [sp, #20]
 800f546:	e775      	b.n	800f434 <_dtoa_r+0x8d4>
 800f548:	f000 f9c2 	bl	800f8d0 <__multadd>
 800f54c:	4629      	mov	r1, r5
 800f54e:	4680      	mov	r8, r0
 800f550:	2300      	movs	r3, #0
 800f552:	220a      	movs	r2, #10
 800f554:	4648      	mov	r0, r9
 800f556:	f000 f9bb 	bl	800f8d0 <__multadd>
 800f55a:	4605      	mov	r5, r0
 800f55c:	e7f0      	b.n	800f540 <_dtoa_r+0x9e0>
 800f55e:	f1bb 0f00 	cmp.w	fp, #0
 800f562:	bfcc      	ite	gt
 800f564:	465e      	movgt	r6, fp
 800f566:	2601      	movle	r6, #1
 800f568:	443e      	add	r6, r7
 800f56a:	f04f 0800 	mov.w	r8, #0
 800f56e:	9901      	ldr	r1, [sp, #4]
 800f570:	2201      	movs	r2, #1
 800f572:	4648      	mov	r0, r9
 800f574:	f000 fba2 	bl	800fcbc <__lshift>
 800f578:	4621      	mov	r1, r4
 800f57a:	9001      	str	r0, [sp, #4]
 800f57c:	f000 fc0a 	bl	800fd94 <__mcmp>
 800f580:	2800      	cmp	r0, #0
 800f582:	dcaf      	bgt.n	800f4e4 <_dtoa_r+0x984>
 800f584:	d102      	bne.n	800f58c <_dtoa_r+0xa2c>
 800f586:	f01a 0f01 	tst.w	sl, #1
 800f58a:	d1ab      	bne.n	800f4e4 <_dtoa_r+0x984>
 800f58c:	4633      	mov	r3, r6
 800f58e:	461e      	mov	r6, r3
 800f590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f594:	2a30      	cmp	r2, #48	@ 0x30
 800f596:	d0fa      	beq.n	800f58e <_dtoa_r+0xa2e>
 800f598:	e5bb      	b.n	800f112 <_dtoa_r+0x5b2>
 800f59a:	429f      	cmp	r7, r3
 800f59c:	d1a3      	bne.n	800f4e6 <_dtoa_r+0x986>
 800f59e:	9b04      	ldr	r3, [sp, #16]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	9304      	str	r3, [sp, #16]
 800f5a4:	2331      	movs	r3, #49	@ 0x31
 800f5a6:	703b      	strb	r3, [r7, #0]
 800f5a8:	e5b3      	b.n	800f112 <_dtoa_r+0x5b2>
 800f5aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f5ac:	4f16      	ldr	r7, [pc, #88]	@ (800f608 <_dtoa_r+0xaa8>)
 800f5ae:	b11b      	cbz	r3, 800f5b8 <_dtoa_r+0xa58>
 800f5b0:	f107 0308 	add.w	r3, r7, #8
 800f5b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f5b6:	6013      	str	r3, [r2, #0]
 800f5b8:	4638      	mov	r0, r7
 800f5ba:	b011      	add	sp, #68	@ 0x44
 800f5bc:	ecbd 8b02 	vpop	{d8}
 800f5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c4:	9b07      	ldr	r3, [sp, #28]
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	f77f ae36 	ble.w	800f238 <_dtoa_r+0x6d8>
 800f5cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5d0:	2001      	movs	r0, #1
 800f5d2:	e656      	b.n	800f282 <_dtoa_r+0x722>
 800f5d4:	f1bb 0f00 	cmp.w	fp, #0
 800f5d8:	f77f aed7 	ble.w	800f38a <_dtoa_r+0x82a>
 800f5dc:	463e      	mov	r6, r7
 800f5de:	9801      	ldr	r0, [sp, #4]
 800f5e0:	4621      	mov	r1, r4
 800f5e2:	f7ff fa33 	bl	800ea4c <quorem>
 800f5e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f5ea:	f806 ab01 	strb.w	sl, [r6], #1
 800f5ee:	1bf2      	subs	r2, r6, r7
 800f5f0:	4593      	cmp	fp, r2
 800f5f2:	ddb4      	ble.n	800f55e <_dtoa_r+0x9fe>
 800f5f4:	9901      	ldr	r1, [sp, #4]
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	220a      	movs	r2, #10
 800f5fa:	4648      	mov	r0, r9
 800f5fc:	f000 f968 	bl	800f8d0 <__multadd>
 800f600:	9001      	str	r0, [sp, #4]
 800f602:	e7ec      	b.n	800f5de <_dtoa_r+0xa7e>
 800f604:	08012091 	.word	0x08012091
 800f608:	08012015 	.word	0x08012015

0800f60c <_free_r>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	4605      	mov	r5, r0
 800f610:	2900      	cmp	r1, #0
 800f612:	d041      	beq.n	800f698 <_free_r+0x8c>
 800f614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f618:	1f0c      	subs	r4, r1, #4
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	bfb8      	it	lt
 800f61e:	18e4      	addlt	r4, r4, r3
 800f620:	f000 f8e8 	bl	800f7f4 <__malloc_lock>
 800f624:	4a1d      	ldr	r2, [pc, #116]	@ (800f69c <_free_r+0x90>)
 800f626:	6813      	ldr	r3, [r2, #0]
 800f628:	b933      	cbnz	r3, 800f638 <_free_r+0x2c>
 800f62a:	6063      	str	r3, [r4, #4]
 800f62c:	6014      	str	r4, [r2, #0]
 800f62e:	4628      	mov	r0, r5
 800f630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f634:	f000 b8e4 	b.w	800f800 <__malloc_unlock>
 800f638:	42a3      	cmp	r3, r4
 800f63a:	d908      	bls.n	800f64e <_free_r+0x42>
 800f63c:	6820      	ldr	r0, [r4, #0]
 800f63e:	1821      	adds	r1, r4, r0
 800f640:	428b      	cmp	r3, r1
 800f642:	bf01      	itttt	eq
 800f644:	6819      	ldreq	r1, [r3, #0]
 800f646:	685b      	ldreq	r3, [r3, #4]
 800f648:	1809      	addeq	r1, r1, r0
 800f64a:	6021      	streq	r1, [r4, #0]
 800f64c:	e7ed      	b.n	800f62a <_free_r+0x1e>
 800f64e:	461a      	mov	r2, r3
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	b10b      	cbz	r3, 800f658 <_free_r+0x4c>
 800f654:	42a3      	cmp	r3, r4
 800f656:	d9fa      	bls.n	800f64e <_free_r+0x42>
 800f658:	6811      	ldr	r1, [r2, #0]
 800f65a:	1850      	adds	r0, r2, r1
 800f65c:	42a0      	cmp	r0, r4
 800f65e:	d10b      	bne.n	800f678 <_free_r+0x6c>
 800f660:	6820      	ldr	r0, [r4, #0]
 800f662:	4401      	add	r1, r0
 800f664:	1850      	adds	r0, r2, r1
 800f666:	4283      	cmp	r3, r0
 800f668:	6011      	str	r1, [r2, #0]
 800f66a:	d1e0      	bne.n	800f62e <_free_r+0x22>
 800f66c:	6818      	ldr	r0, [r3, #0]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	6053      	str	r3, [r2, #4]
 800f672:	4408      	add	r0, r1
 800f674:	6010      	str	r0, [r2, #0]
 800f676:	e7da      	b.n	800f62e <_free_r+0x22>
 800f678:	d902      	bls.n	800f680 <_free_r+0x74>
 800f67a:	230c      	movs	r3, #12
 800f67c:	602b      	str	r3, [r5, #0]
 800f67e:	e7d6      	b.n	800f62e <_free_r+0x22>
 800f680:	6820      	ldr	r0, [r4, #0]
 800f682:	1821      	adds	r1, r4, r0
 800f684:	428b      	cmp	r3, r1
 800f686:	bf04      	itt	eq
 800f688:	6819      	ldreq	r1, [r3, #0]
 800f68a:	685b      	ldreq	r3, [r3, #4]
 800f68c:	6063      	str	r3, [r4, #4]
 800f68e:	bf04      	itt	eq
 800f690:	1809      	addeq	r1, r1, r0
 800f692:	6021      	streq	r1, [r4, #0]
 800f694:	6054      	str	r4, [r2, #4]
 800f696:	e7ca      	b.n	800f62e <_free_r+0x22>
 800f698:	bd38      	pop	{r3, r4, r5, pc}
 800f69a:	bf00      	nop
 800f69c:	240008c0 	.word	0x240008c0

0800f6a0 <malloc>:
 800f6a0:	4b02      	ldr	r3, [pc, #8]	@ (800f6ac <malloc+0xc>)
 800f6a2:	4601      	mov	r1, r0
 800f6a4:	6818      	ldr	r0, [r3, #0]
 800f6a6:	f000 b825 	b.w	800f6f4 <_malloc_r>
 800f6aa:	bf00      	nop
 800f6ac:	24000028 	.word	0x24000028

0800f6b0 <sbrk_aligned>:
 800f6b0:	b570      	push	{r4, r5, r6, lr}
 800f6b2:	4e0f      	ldr	r6, [pc, #60]	@ (800f6f0 <sbrk_aligned+0x40>)
 800f6b4:	460c      	mov	r4, r1
 800f6b6:	6831      	ldr	r1, [r6, #0]
 800f6b8:	4605      	mov	r5, r0
 800f6ba:	b911      	cbnz	r1, 800f6c2 <sbrk_aligned+0x12>
 800f6bc:	f001 ff7e 	bl	80115bc <_sbrk_r>
 800f6c0:	6030      	str	r0, [r6, #0]
 800f6c2:	4621      	mov	r1, r4
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f001 ff79 	bl	80115bc <_sbrk_r>
 800f6ca:	1c43      	adds	r3, r0, #1
 800f6cc:	d103      	bne.n	800f6d6 <sbrk_aligned+0x26>
 800f6ce:	f04f 34ff 	mov.w	r4, #4294967295
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	bd70      	pop	{r4, r5, r6, pc}
 800f6d6:	1cc4      	adds	r4, r0, #3
 800f6d8:	f024 0403 	bic.w	r4, r4, #3
 800f6dc:	42a0      	cmp	r0, r4
 800f6de:	d0f8      	beq.n	800f6d2 <sbrk_aligned+0x22>
 800f6e0:	1a21      	subs	r1, r4, r0
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	f001 ff6a 	bl	80115bc <_sbrk_r>
 800f6e8:	3001      	adds	r0, #1
 800f6ea:	d1f2      	bne.n	800f6d2 <sbrk_aligned+0x22>
 800f6ec:	e7ef      	b.n	800f6ce <sbrk_aligned+0x1e>
 800f6ee:	bf00      	nop
 800f6f0:	240008bc 	.word	0x240008bc

0800f6f4 <_malloc_r>:
 800f6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6f8:	1ccd      	adds	r5, r1, #3
 800f6fa:	f025 0503 	bic.w	r5, r5, #3
 800f6fe:	3508      	adds	r5, #8
 800f700:	2d0c      	cmp	r5, #12
 800f702:	bf38      	it	cc
 800f704:	250c      	movcc	r5, #12
 800f706:	2d00      	cmp	r5, #0
 800f708:	4606      	mov	r6, r0
 800f70a:	db01      	blt.n	800f710 <_malloc_r+0x1c>
 800f70c:	42a9      	cmp	r1, r5
 800f70e:	d904      	bls.n	800f71a <_malloc_r+0x26>
 800f710:	230c      	movs	r3, #12
 800f712:	6033      	str	r3, [r6, #0]
 800f714:	2000      	movs	r0, #0
 800f716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f71a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f7f0 <_malloc_r+0xfc>
 800f71e:	f000 f869 	bl	800f7f4 <__malloc_lock>
 800f722:	f8d8 3000 	ldr.w	r3, [r8]
 800f726:	461c      	mov	r4, r3
 800f728:	bb44      	cbnz	r4, 800f77c <_malloc_r+0x88>
 800f72a:	4629      	mov	r1, r5
 800f72c:	4630      	mov	r0, r6
 800f72e:	f7ff ffbf 	bl	800f6b0 <sbrk_aligned>
 800f732:	1c43      	adds	r3, r0, #1
 800f734:	4604      	mov	r4, r0
 800f736:	d158      	bne.n	800f7ea <_malloc_r+0xf6>
 800f738:	f8d8 4000 	ldr.w	r4, [r8]
 800f73c:	4627      	mov	r7, r4
 800f73e:	2f00      	cmp	r7, #0
 800f740:	d143      	bne.n	800f7ca <_malloc_r+0xd6>
 800f742:	2c00      	cmp	r4, #0
 800f744:	d04b      	beq.n	800f7de <_malloc_r+0xea>
 800f746:	6823      	ldr	r3, [r4, #0]
 800f748:	4639      	mov	r1, r7
 800f74a:	4630      	mov	r0, r6
 800f74c:	eb04 0903 	add.w	r9, r4, r3
 800f750:	f001 ff34 	bl	80115bc <_sbrk_r>
 800f754:	4581      	cmp	r9, r0
 800f756:	d142      	bne.n	800f7de <_malloc_r+0xea>
 800f758:	6821      	ldr	r1, [r4, #0]
 800f75a:	1a6d      	subs	r5, r5, r1
 800f75c:	4629      	mov	r1, r5
 800f75e:	4630      	mov	r0, r6
 800f760:	f7ff ffa6 	bl	800f6b0 <sbrk_aligned>
 800f764:	3001      	adds	r0, #1
 800f766:	d03a      	beq.n	800f7de <_malloc_r+0xea>
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	442b      	add	r3, r5
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	f8d8 3000 	ldr.w	r3, [r8]
 800f772:	685a      	ldr	r2, [r3, #4]
 800f774:	bb62      	cbnz	r2, 800f7d0 <_malloc_r+0xdc>
 800f776:	f8c8 7000 	str.w	r7, [r8]
 800f77a:	e00f      	b.n	800f79c <_malloc_r+0xa8>
 800f77c:	6822      	ldr	r2, [r4, #0]
 800f77e:	1b52      	subs	r2, r2, r5
 800f780:	d420      	bmi.n	800f7c4 <_malloc_r+0xd0>
 800f782:	2a0b      	cmp	r2, #11
 800f784:	d917      	bls.n	800f7b6 <_malloc_r+0xc2>
 800f786:	1961      	adds	r1, r4, r5
 800f788:	42a3      	cmp	r3, r4
 800f78a:	6025      	str	r5, [r4, #0]
 800f78c:	bf18      	it	ne
 800f78e:	6059      	strne	r1, [r3, #4]
 800f790:	6863      	ldr	r3, [r4, #4]
 800f792:	bf08      	it	eq
 800f794:	f8c8 1000 	streq.w	r1, [r8]
 800f798:	5162      	str	r2, [r4, r5]
 800f79a:	604b      	str	r3, [r1, #4]
 800f79c:	4630      	mov	r0, r6
 800f79e:	f000 f82f 	bl	800f800 <__malloc_unlock>
 800f7a2:	f104 000b 	add.w	r0, r4, #11
 800f7a6:	1d23      	adds	r3, r4, #4
 800f7a8:	f020 0007 	bic.w	r0, r0, #7
 800f7ac:	1ac2      	subs	r2, r0, r3
 800f7ae:	bf1c      	itt	ne
 800f7b0:	1a1b      	subne	r3, r3, r0
 800f7b2:	50a3      	strne	r3, [r4, r2]
 800f7b4:	e7af      	b.n	800f716 <_malloc_r+0x22>
 800f7b6:	6862      	ldr	r2, [r4, #4]
 800f7b8:	42a3      	cmp	r3, r4
 800f7ba:	bf0c      	ite	eq
 800f7bc:	f8c8 2000 	streq.w	r2, [r8]
 800f7c0:	605a      	strne	r2, [r3, #4]
 800f7c2:	e7eb      	b.n	800f79c <_malloc_r+0xa8>
 800f7c4:	4623      	mov	r3, r4
 800f7c6:	6864      	ldr	r4, [r4, #4]
 800f7c8:	e7ae      	b.n	800f728 <_malloc_r+0x34>
 800f7ca:	463c      	mov	r4, r7
 800f7cc:	687f      	ldr	r7, [r7, #4]
 800f7ce:	e7b6      	b.n	800f73e <_malloc_r+0x4a>
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	42a3      	cmp	r3, r4
 800f7d6:	d1fb      	bne.n	800f7d0 <_malloc_r+0xdc>
 800f7d8:	2300      	movs	r3, #0
 800f7da:	6053      	str	r3, [r2, #4]
 800f7dc:	e7de      	b.n	800f79c <_malloc_r+0xa8>
 800f7de:	230c      	movs	r3, #12
 800f7e0:	6033      	str	r3, [r6, #0]
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	f000 f80c 	bl	800f800 <__malloc_unlock>
 800f7e8:	e794      	b.n	800f714 <_malloc_r+0x20>
 800f7ea:	6005      	str	r5, [r0, #0]
 800f7ec:	e7d6      	b.n	800f79c <_malloc_r+0xa8>
 800f7ee:	bf00      	nop
 800f7f0:	240008c0 	.word	0x240008c0

0800f7f4 <__malloc_lock>:
 800f7f4:	4801      	ldr	r0, [pc, #4]	@ (800f7fc <__malloc_lock+0x8>)
 800f7f6:	f7ff b912 	b.w	800ea1e <__retarget_lock_acquire_recursive>
 800f7fa:	bf00      	nop
 800f7fc:	240008b8 	.word	0x240008b8

0800f800 <__malloc_unlock>:
 800f800:	4801      	ldr	r0, [pc, #4]	@ (800f808 <__malloc_unlock+0x8>)
 800f802:	f7ff b90d 	b.w	800ea20 <__retarget_lock_release_recursive>
 800f806:	bf00      	nop
 800f808:	240008b8 	.word	0x240008b8

0800f80c <_Balloc>:
 800f80c:	b570      	push	{r4, r5, r6, lr}
 800f80e:	69c6      	ldr	r6, [r0, #28]
 800f810:	4604      	mov	r4, r0
 800f812:	460d      	mov	r5, r1
 800f814:	b976      	cbnz	r6, 800f834 <_Balloc+0x28>
 800f816:	2010      	movs	r0, #16
 800f818:	f7ff ff42 	bl	800f6a0 <malloc>
 800f81c:	4602      	mov	r2, r0
 800f81e:	61e0      	str	r0, [r4, #28]
 800f820:	b920      	cbnz	r0, 800f82c <_Balloc+0x20>
 800f822:	4b18      	ldr	r3, [pc, #96]	@ (800f884 <_Balloc+0x78>)
 800f824:	4818      	ldr	r0, [pc, #96]	@ (800f888 <_Balloc+0x7c>)
 800f826:	216b      	movs	r1, #107	@ 0x6b
 800f828:	f001 fee2 	bl	80115f0 <__assert_func>
 800f82c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f830:	6006      	str	r6, [r0, #0]
 800f832:	60c6      	str	r6, [r0, #12]
 800f834:	69e6      	ldr	r6, [r4, #28]
 800f836:	68f3      	ldr	r3, [r6, #12]
 800f838:	b183      	cbz	r3, 800f85c <_Balloc+0x50>
 800f83a:	69e3      	ldr	r3, [r4, #28]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f842:	b9b8      	cbnz	r0, 800f874 <_Balloc+0x68>
 800f844:	2101      	movs	r1, #1
 800f846:	fa01 f605 	lsl.w	r6, r1, r5
 800f84a:	1d72      	adds	r2, r6, #5
 800f84c:	0092      	lsls	r2, r2, #2
 800f84e:	4620      	mov	r0, r4
 800f850:	f001 feec 	bl	801162c <_calloc_r>
 800f854:	b160      	cbz	r0, 800f870 <_Balloc+0x64>
 800f856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f85a:	e00e      	b.n	800f87a <_Balloc+0x6e>
 800f85c:	2221      	movs	r2, #33	@ 0x21
 800f85e:	2104      	movs	r1, #4
 800f860:	4620      	mov	r0, r4
 800f862:	f001 fee3 	bl	801162c <_calloc_r>
 800f866:	69e3      	ldr	r3, [r4, #28]
 800f868:	60f0      	str	r0, [r6, #12]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d1e4      	bne.n	800f83a <_Balloc+0x2e>
 800f870:	2000      	movs	r0, #0
 800f872:	bd70      	pop	{r4, r5, r6, pc}
 800f874:	6802      	ldr	r2, [r0, #0]
 800f876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f87a:	2300      	movs	r3, #0
 800f87c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f880:	e7f7      	b.n	800f872 <_Balloc+0x66>
 800f882:	bf00      	nop
 800f884:	08012022 	.word	0x08012022
 800f888:	080120a2 	.word	0x080120a2

0800f88c <_Bfree>:
 800f88c:	b570      	push	{r4, r5, r6, lr}
 800f88e:	69c6      	ldr	r6, [r0, #28]
 800f890:	4605      	mov	r5, r0
 800f892:	460c      	mov	r4, r1
 800f894:	b976      	cbnz	r6, 800f8b4 <_Bfree+0x28>
 800f896:	2010      	movs	r0, #16
 800f898:	f7ff ff02 	bl	800f6a0 <malloc>
 800f89c:	4602      	mov	r2, r0
 800f89e:	61e8      	str	r0, [r5, #28]
 800f8a0:	b920      	cbnz	r0, 800f8ac <_Bfree+0x20>
 800f8a2:	4b09      	ldr	r3, [pc, #36]	@ (800f8c8 <_Bfree+0x3c>)
 800f8a4:	4809      	ldr	r0, [pc, #36]	@ (800f8cc <_Bfree+0x40>)
 800f8a6:	218f      	movs	r1, #143	@ 0x8f
 800f8a8:	f001 fea2 	bl	80115f0 <__assert_func>
 800f8ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8b0:	6006      	str	r6, [r0, #0]
 800f8b2:	60c6      	str	r6, [r0, #12]
 800f8b4:	b13c      	cbz	r4, 800f8c6 <_Bfree+0x3a>
 800f8b6:	69eb      	ldr	r3, [r5, #28]
 800f8b8:	6862      	ldr	r2, [r4, #4]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8c0:	6021      	str	r1, [r4, #0]
 800f8c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8c6:	bd70      	pop	{r4, r5, r6, pc}
 800f8c8:	08012022 	.word	0x08012022
 800f8cc:	080120a2 	.word	0x080120a2

0800f8d0 <__multadd>:
 800f8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d4:	690d      	ldr	r5, [r1, #16]
 800f8d6:	4607      	mov	r7, r0
 800f8d8:	460c      	mov	r4, r1
 800f8da:	461e      	mov	r6, r3
 800f8dc:	f101 0c14 	add.w	ip, r1, #20
 800f8e0:	2000      	movs	r0, #0
 800f8e2:	f8dc 3000 	ldr.w	r3, [ip]
 800f8e6:	b299      	uxth	r1, r3
 800f8e8:	fb02 6101 	mla	r1, r2, r1, r6
 800f8ec:	0c1e      	lsrs	r6, r3, #16
 800f8ee:	0c0b      	lsrs	r3, r1, #16
 800f8f0:	fb02 3306 	mla	r3, r2, r6, r3
 800f8f4:	b289      	uxth	r1, r1
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8fc:	4285      	cmp	r5, r0
 800f8fe:	f84c 1b04 	str.w	r1, [ip], #4
 800f902:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f906:	dcec      	bgt.n	800f8e2 <__multadd+0x12>
 800f908:	b30e      	cbz	r6, 800f94e <__multadd+0x7e>
 800f90a:	68a3      	ldr	r3, [r4, #8]
 800f90c:	42ab      	cmp	r3, r5
 800f90e:	dc19      	bgt.n	800f944 <__multadd+0x74>
 800f910:	6861      	ldr	r1, [r4, #4]
 800f912:	4638      	mov	r0, r7
 800f914:	3101      	adds	r1, #1
 800f916:	f7ff ff79 	bl	800f80c <_Balloc>
 800f91a:	4680      	mov	r8, r0
 800f91c:	b928      	cbnz	r0, 800f92a <__multadd+0x5a>
 800f91e:	4602      	mov	r2, r0
 800f920:	4b0c      	ldr	r3, [pc, #48]	@ (800f954 <__multadd+0x84>)
 800f922:	480d      	ldr	r0, [pc, #52]	@ (800f958 <__multadd+0x88>)
 800f924:	21ba      	movs	r1, #186	@ 0xba
 800f926:	f001 fe63 	bl	80115f0 <__assert_func>
 800f92a:	6922      	ldr	r2, [r4, #16]
 800f92c:	3202      	adds	r2, #2
 800f92e:	f104 010c 	add.w	r1, r4, #12
 800f932:	0092      	lsls	r2, r2, #2
 800f934:	300c      	adds	r0, #12
 800f936:	f7ff f874 	bl	800ea22 <memcpy>
 800f93a:	4621      	mov	r1, r4
 800f93c:	4638      	mov	r0, r7
 800f93e:	f7ff ffa5 	bl	800f88c <_Bfree>
 800f942:	4644      	mov	r4, r8
 800f944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f948:	3501      	adds	r5, #1
 800f94a:	615e      	str	r6, [r3, #20]
 800f94c:	6125      	str	r5, [r4, #16]
 800f94e:	4620      	mov	r0, r4
 800f950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f954:	08012091 	.word	0x08012091
 800f958:	080120a2 	.word	0x080120a2

0800f95c <__s2b>:
 800f95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f960:	460c      	mov	r4, r1
 800f962:	4615      	mov	r5, r2
 800f964:	461f      	mov	r7, r3
 800f966:	2209      	movs	r2, #9
 800f968:	3308      	adds	r3, #8
 800f96a:	4606      	mov	r6, r0
 800f96c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f970:	2100      	movs	r1, #0
 800f972:	2201      	movs	r2, #1
 800f974:	429a      	cmp	r2, r3
 800f976:	db09      	blt.n	800f98c <__s2b+0x30>
 800f978:	4630      	mov	r0, r6
 800f97a:	f7ff ff47 	bl	800f80c <_Balloc>
 800f97e:	b940      	cbnz	r0, 800f992 <__s2b+0x36>
 800f980:	4602      	mov	r2, r0
 800f982:	4b19      	ldr	r3, [pc, #100]	@ (800f9e8 <__s2b+0x8c>)
 800f984:	4819      	ldr	r0, [pc, #100]	@ (800f9ec <__s2b+0x90>)
 800f986:	21d3      	movs	r1, #211	@ 0xd3
 800f988:	f001 fe32 	bl	80115f0 <__assert_func>
 800f98c:	0052      	lsls	r2, r2, #1
 800f98e:	3101      	adds	r1, #1
 800f990:	e7f0      	b.n	800f974 <__s2b+0x18>
 800f992:	9b08      	ldr	r3, [sp, #32]
 800f994:	6143      	str	r3, [r0, #20]
 800f996:	2d09      	cmp	r5, #9
 800f998:	f04f 0301 	mov.w	r3, #1
 800f99c:	6103      	str	r3, [r0, #16]
 800f99e:	dd16      	ble.n	800f9ce <__s2b+0x72>
 800f9a0:	f104 0909 	add.w	r9, r4, #9
 800f9a4:	46c8      	mov	r8, r9
 800f9a6:	442c      	add	r4, r5
 800f9a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f9ac:	4601      	mov	r1, r0
 800f9ae:	3b30      	subs	r3, #48	@ 0x30
 800f9b0:	220a      	movs	r2, #10
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f7ff ff8c 	bl	800f8d0 <__multadd>
 800f9b8:	45a0      	cmp	r8, r4
 800f9ba:	d1f5      	bne.n	800f9a8 <__s2b+0x4c>
 800f9bc:	f1a5 0408 	sub.w	r4, r5, #8
 800f9c0:	444c      	add	r4, r9
 800f9c2:	1b2d      	subs	r5, r5, r4
 800f9c4:	1963      	adds	r3, r4, r5
 800f9c6:	42bb      	cmp	r3, r7
 800f9c8:	db04      	blt.n	800f9d4 <__s2b+0x78>
 800f9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ce:	340a      	adds	r4, #10
 800f9d0:	2509      	movs	r5, #9
 800f9d2:	e7f6      	b.n	800f9c2 <__s2b+0x66>
 800f9d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f9d8:	4601      	mov	r1, r0
 800f9da:	3b30      	subs	r3, #48	@ 0x30
 800f9dc:	220a      	movs	r2, #10
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f7ff ff76 	bl	800f8d0 <__multadd>
 800f9e4:	e7ee      	b.n	800f9c4 <__s2b+0x68>
 800f9e6:	bf00      	nop
 800f9e8:	08012091 	.word	0x08012091
 800f9ec:	080120a2 	.word	0x080120a2

0800f9f0 <__hi0bits>:
 800f9f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	bf36      	itet	cc
 800f9f8:	0403      	lslcc	r3, r0, #16
 800f9fa:	2000      	movcs	r0, #0
 800f9fc:	2010      	movcc	r0, #16
 800f9fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fa02:	bf3c      	itt	cc
 800fa04:	021b      	lslcc	r3, r3, #8
 800fa06:	3008      	addcc	r0, #8
 800fa08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa0c:	bf3c      	itt	cc
 800fa0e:	011b      	lslcc	r3, r3, #4
 800fa10:	3004      	addcc	r0, #4
 800fa12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa16:	bf3c      	itt	cc
 800fa18:	009b      	lslcc	r3, r3, #2
 800fa1a:	3002      	addcc	r0, #2
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	db05      	blt.n	800fa2c <__hi0bits+0x3c>
 800fa20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fa24:	f100 0001 	add.w	r0, r0, #1
 800fa28:	bf08      	it	eq
 800fa2a:	2020      	moveq	r0, #32
 800fa2c:	4770      	bx	lr

0800fa2e <__lo0bits>:
 800fa2e:	6803      	ldr	r3, [r0, #0]
 800fa30:	4602      	mov	r2, r0
 800fa32:	f013 0007 	ands.w	r0, r3, #7
 800fa36:	d00b      	beq.n	800fa50 <__lo0bits+0x22>
 800fa38:	07d9      	lsls	r1, r3, #31
 800fa3a:	d421      	bmi.n	800fa80 <__lo0bits+0x52>
 800fa3c:	0798      	lsls	r0, r3, #30
 800fa3e:	bf49      	itett	mi
 800fa40:	085b      	lsrmi	r3, r3, #1
 800fa42:	089b      	lsrpl	r3, r3, #2
 800fa44:	2001      	movmi	r0, #1
 800fa46:	6013      	strmi	r3, [r2, #0]
 800fa48:	bf5c      	itt	pl
 800fa4a:	6013      	strpl	r3, [r2, #0]
 800fa4c:	2002      	movpl	r0, #2
 800fa4e:	4770      	bx	lr
 800fa50:	b299      	uxth	r1, r3
 800fa52:	b909      	cbnz	r1, 800fa58 <__lo0bits+0x2a>
 800fa54:	0c1b      	lsrs	r3, r3, #16
 800fa56:	2010      	movs	r0, #16
 800fa58:	b2d9      	uxtb	r1, r3
 800fa5a:	b909      	cbnz	r1, 800fa60 <__lo0bits+0x32>
 800fa5c:	3008      	adds	r0, #8
 800fa5e:	0a1b      	lsrs	r3, r3, #8
 800fa60:	0719      	lsls	r1, r3, #28
 800fa62:	bf04      	itt	eq
 800fa64:	091b      	lsreq	r3, r3, #4
 800fa66:	3004      	addeq	r0, #4
 800fa68:	0799      	lsls	r1, r3, #30
 800fa6a:	bf04      	itt	eq
 800fa6c:	089b      	lsreq	r3, r3, #2
 800fa6e:	3002      	addeq	r0, #2
 800fa70:	07d9      	lsls	r1, r3, #31
 800fa72:	d403      	bmi.n	800fa7c <__lo0bits+0x4e>
 800fa74:	085b      	lsrs	r3, r3, #1
 800fa76:	f100 0001 	add.w	r0, r0, #1
 800fa7a:	d003      	beq.n	800fa84 <__lo0bits+0x56>
 800fa7c:	6013      	str	r3, [r2, #0]
 800fa7e:	4770      	bx	lr
 800fa80:	2000      	movs	r0, #0
 800fa82:	4770      	bx	lr
 800fa84:	2020      	movs	r0, #32
 800fa86:	4770      	bx	lr

0800fa88 <__i2b>:
 800fa88:	b510      	push	{r4, lr}
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	2101      	movs	r1, #1
 800fa8e:	f7ff febd 	bl	800f80c <_Balloc>
 800fa92:	4602      	mov	r2, r0
 800fa94:	b928      	cbnz	r0, 800faa2 <__i2b+0x1a>
 800fa96:	4b05      	ldr	r3, [pc, #20]	@ (800faac <__i2b+0x24>)
 800fa98:	4805      	ldr	r0, [pc, #20]	@ (800fab0 <__i2b+0x28>)
 800fa9a:	f240 1145 	movw	r1, #325	@ 0x145
 800fa9e:	f001 fda7 	bl	80115f0 <__assert_func>
 800faa2:	2301      	movs	r3, #1
 800faa4:	6144      	str	r4, [r0, #20]
 800faa6:	6103      	str	r3, [r0, #16]
 800faa8:	bd10      	pop	{r4, pc}
 800faaa:	bf00      	nop
 800faac:	08012091 	.word	0x08012091
 800fab0:	080120a2 	.word	0x080120a2

0800fab4 <__multiply>:
 800fab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab8:	4614      	mov	r4, r2
 800faba:	690a      	ldr	r2, [r1, #16]
 800fabc:	6923      	ldr	r3, [r4, #16]
 800fabe:	429a      	cmp	r2, r3
 800fac0:	bfa8      	it	ge
 800fac2:	4623      	movge	r3, r4
 800fac4:	460f      	mov	r7, r1
 800fac6:	bfa4      	itt	ge
 800fac8:	460c      	movge	r4, r1
 800faca:	461f      	movge	r7, r3
 800facc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fad0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fad4:	68a3      	ldr	r3, [r4, #8]
 800fad6:	6861      	ldr	r1, [r4, #4]
 800fad8:	eb0a 0609 	add.w	r6, sl, r9
 800fadc:	42b3      	cmp	r3, r6
 800fade:	b085      	sub	sp, #20
 800fae0:	bfb8      	it	lt
 800fae2:	3101      	addlt	r1, #1
 800fae4:	f7ff fe92 	bl	800f80c <_Balloc>
 800fae8:	b930      	cbnz	r0, 800faf8 <__multiply+0x44>
 800faea:	4602      	mov	r2, r0
 800faec:	4b44      	ldr	r3, [pc, #272]	@ (800fc00 <__multiply+0x14c>)
 800faee:	4845      	ldr	r0, [pc, #276]	@ (800fc04 <__multiply+0x150>)
 800faf0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800faf4:	f001 fd7c 	bl	80115f0 <__assert_func>
 800faf8:	f100 0514 	add.w	r5, r0, #20
 800fafc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fb00:	462b      	mov	r3, r5
 800fb02:	2200      	movs	r2, #0
 800fb04:	4543      	cmp	r3, r8
 800fb06:	d321      	bcc.n	800fb4c <__multiply+0x98>
 800fb08:	f107 0114 	add.w	r1, r7, #20
 800fb0c:	f104 0214 	add.w	r2, r4, #20
 800fb10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fb14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fb18:	9302      	str	r3, [sp, #8]
 800fb1a:	1b13      	subs	r3, r2, r4
 800fb1c:	3b15      	subs	r3, #21
 800fb1e:	f023 0303 	bic.w	r3, r3, #3
 800fb22:	3304      	adds	r3, #4
 800fb24:	f104 0715 	add.w	r7, r4, #21
 800fb28:	42ba      	cmp	r2, r7
 800fb2a:	bf38      	it	cc
 800fb2c:	2304      	movcc	r3, #4
 800fb2e:	9301      	str	r3, [sp, #4]
 800fb30:	9b02      	ldr	r3, [sp, #8]
 800fb32:	9103      	str	r1, [sp, #12]
 800fb34:	428b      	cmp	r3, r1
 800fb36:	d80c      	bhi.n	800fb52 <__multiply+0x9e>
 800fb38:	2e00      	cmp	r6, #0
 800fb3a:	dd03      	ble.n	800fb44 <__multiply+0x90>
 800fb3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d05b      	beq.n	800fbfc <__multiply+0x148>
 800fb44:	6106      	str	r6, [r0, #16]
 800fb46:	b005      	add	sp, #20
 800fb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4c:	f843 2b04 	str.w	r2, [r3], #4
 800fb50:	e7d8      	b.n	800fb04 <__multiply+0x50>
 800fb52:	f8b1 a000 	ldrh.w	sl, [r1]
 800fb56:	f1ba 0f00 	cmp.w	sl, #0
 800fb5a:	d024      	beq.n	800fba6 <__multiply+0xf2>
 800fb5c:	f104 0e14 	add.w	lr, r4, #20
 800fb60:	46a9      	mov	r9, r5
 800fb62:	f04f 0c00 	mov.w	ip, #0
 800fb66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb6a:	f8d9 3000 	ldr.w	r3, [r9]
 800fb6e:	fa1f fb87 	uxth.w	fp, r7
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	fb0a 330b 	mla	r3, sl, fp, r3
 800fb78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fb7c:	f8d9 7000 	ldr.w	r7, [r9]
 800fb80:	4463      	add	r3, ip
 800fb82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fb86:	fb0a c70b 	mla	r7, sl, fp, ip
 800fb8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fb94:	4572      	cmp	r2, lr
 800fb96:	f849 3b04 	str.w	r3, [r9], #4
 800fb9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fb9e:	d8e2      	bhi.n	800fb66 <__multiply+0xb2>
 800fba0:	9b01      	ldr	r3, [sp, #4]
 800fba2:	f845 c003 	str.w	ip, [r5, r3]
 800fba6:	9b03      	ldr	r3, [sp, #12]
 800fba8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fbac:	3104      	adds	r1, #4
 800fbae:	f1b9 0f00 	cmp.w	r9, #0
 800fbb2:	d021      	beq.n	800fbf8 <__multiply+0x144>
 800fbb4:	682b      	ldr	r3, [r5, #0]
 800fbb6:	f104 0c14 	add.w	ip, r4, #20
 800fbba:	46ae      	mov	lr, r5
 800fbbc:	f04f 0a00 	mov.w	sl, #0
 800fbc0:	f8bc b000 	ldrh.w	fp, [ip]
 800fbc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fbc8:	fb09 770b 	mla	r7, r9, fp, r7
 800fbcc:	4457      	add	r7, sl
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fbd4:	f84e 3b04 	str.w	r3, [lr], #4
 800fbd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fbdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbe0:	f8be 3000 	ldrh.w	r3, [lr]
 800fbe4:	fb09 330a 	mla	r3, r9, sl, r3
 800fbe8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fbec:	4562      	cmp	r2, ip
 800fbee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbf2:	d8e5      	bhi.n	800fbc0 <__multiply+0x10c>
 800fbf4:	9f01      	ldr	r7, [sp, #4]
 800fbf6:	51eb      	str	r3, [r5, r7]
 800fbf8:	3504      	adds	r5, #4
 800fbfa:	e799      	b.n	800fb30 <__multiply+0x7c>
 800fbfc:	3e01      	subs	r6, #1
 800fbfe:	e79b      	b.n	800fb38 <__multiply+0x84>
 800fc00:	08012091 	.word	0x08012091
 800fc04:	080120a2 	.word	0x080120a2

0800fc08 <__pow5mult>:
 800fc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc0c:	4615      	mov	r5, r2
 800fc0e:	f012 0203 	ands.w	r2, r2, #3
 800fc12:	4607      	mov	r7, r0
 800fc14:	460e      	mov	r6, r1
 800fc16:	d007      	beq.n	800fc28 <__pow5mult+0x20>
 800fc18:	4c25      	ldr	r4, [pc, #148]	@ (800fcb0 <__pow5mult+0xa8>)
 800fc1a:	3a01      	subs	r2, #1
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc22:	f7ff fe55 	bl	800f8d0 <__multadd>
 800fc26:	4606      	mov	r6, r0
 800fc28:	10ad      	asrs	r5, r5, #2
 800fc2a:	d03d      	beq.n	800fca8 <__pow5mult+0xa0>
 800fc2c:	69fc      	ldr	r4, [r7, #28]
 800fc2e:	b97c      	cbnz	r4, 800fc50 <__pow5mult+0x48>
 800fc30:	2010      	movs	r0, #16
 800fc32:	f7ff fd35 	bl	800f6a0 <malloc>
 800fc36:	4602      	mov	r2, r0
 800fc38:	61f8      	str	r0, [r7, #28]
 800fc3a:	b928      	cbnz	r0, 800fc48 <__pow5mult+0x40>
 800fc3c:	4b1d      	ldr	r3, [pc, #116]	@ (800fcb4 <__pow5mult+0xac>)
 800fc3e:	481e      	ldr	r0, [pc, #120]	@ (800fcb8 <__pow5mult+0xb0>)
 800fc40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fc44:	f001 fcd4 	bl	80115f0 <__assert_func>
 800fc48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc4c:	6004      	str	r4, [r0, #0]
 800fc4e:	60c4      	str	r4, [r0, #12]
 800fc50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fc54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc58:	b94c      	cbnz	r4, 800fc6e <__pow5mult+0x66>
 800fc5a:	f240 2171 	movw	r1, #625	@ 0x271
 800fc5e:	4638      	mov	r0, r7
 800fc60:	f7ff ff12 	bl	800fa88 <__i2b>
 800fc64:	2300      	movs	r3, #0
 800fc66:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc6a:	4604      	mov	r4, r0
 800fc6c:	6003      	str	r3, [r0, #0]
 800fc6e:	f04f 0900 	mov.w	r9, #0
 800fc72:	07eb      	lsls	r3, r5, #31
 800fc74:	d50a      	bpl.n	800fc8c <__pow5mult+0x84>
 800fc76:	4631      	mov	r1, r6
 800fc78:	4622      	mov	r2, r4
 800fc7a:	4638      	mov	r0, r7
 800fc7c:	f7ff ff1a 	bl	800fab4 <__multiply>
 800fc80:	4631      	mov	r1, r6
 800fc82:	4680      	mov	r8, r0
 800fc84:	4638      	mov	r0, r7
 800fc86:	f7ff fe01 	bl	800f88c <_Bfree>
 800fc8a:	4646      	mov	r6, r8
 800fc8c:	106d      	asrs	r5, r5, #1
 800fc8e:	d00b      	beq.n	800fca8 <__pow5mult+0xa0>
 800fc90:	6820      	ldr	r0, [r4, #0]
 800fc92:	b938      	cbnz	r0, 800fca4 <__pow5mult+0x9c>
 800fc94:	4622      	mov	r2, r4
 800fc96:	4621      	mov	r1, r4
 800fc98:	4638      	mov	r0, r7
 800fc9a:	f7ff ff0b 	bl	800fab4 <__multiply>
 800fc9e:	6020      	str	r0, [r4, #0]
 800fca0:	f8c0 9000 	str.w	r9, [r0]
 800fca4:	4604      	mov	r4, r0
 800fca6:	e7e4      	b.n	800fc72 <__pow5mult+0x6a>
 800fca8:	4630      	mov	r0, r6
 800fcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcae:	bf00      	nop
 800fcb0:	080120fc 	.word	0x080120fc
 800fcb4:	08012022 	.word	0x08012022
 800fcb8:	080120a2 	.word	0x080120a2

0800fcbc <__lshift>:
 800fcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcc0:	460c      	mov	r4, r1
 800fcc2:	6849      	ldr	r1, [r1, #4]
 800fcc4:	6923      	ldr	r3, [r4, #16]
 800fcc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fcca:	68a3      	ldr	r3, [r4, #8]
 800fccc:	4607      	mov	r7, r0
 800fcce:	4691      	mov	r9, r2
 800fcd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fcd4:	f108 0601 	add.w	r6, r8, #1
 800fcd8:	42b3      	cmp	r3, r6
 800fcda:	db0b      	blt.n	800fcf4 <__lshift+0x38>
 800fcdc:	4638      	mov	r0, r7
 800fcde:	f7ff fd95 	bl	800f80c <_Balloc>
 800fce2:	4605      	mov	r5, r0
 800fce4:	b948      	cbnz	r0, 800fcfa <__lshift+0x3e>
 800fce6:	4602      	mov	r2, r0
 800fce8:	4b28      	ldr	r3, [pc, #160]	@ (800fd8c <__lshift+0xd0>)
 800fcea:	4829      	ldr	r0, [pc, #164]	@ (800fd90 <__lshift+0xd4>)
 800fcec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fcf0:	f001 fc7e 	bl	80115f0 <__assert_func>
 800fcf4:	3101      	adds	r1, #1
 800fcf6:	005b      	lsls	r3, r3, #1
 800fcf8:	e7ee      	b.n	800fcd8 <__lshift+0x1c>
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	f100 0114 	add.w	r1, r0, #20
 800fd00:	f100 0210 	add.w	r2, r0, #16
 800fd04:	4618      	mov	r0, r3
 800fd06:	4553      	cmp	r3, sl
 800fd08:	db33      	blt.n	800fd72 <__lshift+0xb6>
 800fd0a:	6920      	ldr	r0, [r4, #16]
 800fd0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd10:	f104 0314 	add.w	r3, r4, #20
 800fd14:	f019 091f 	ands.w	r9, r9, #31
 800fd18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd20:	d02b      	beq.n	800fd7a <__lshift+0xbe>
 800fd22:	f1c9 0e20 	rsb	lr, r9, #32
 800fd26:	468a      	mov	sl, r1
 800fd28:	2200      	movs	r2, #0
 800fd2a:	6818      	ldr	r0, [r3, #0]
 800fd2c:	fa00 f009 	lsl.w	r0, r0, r9
 800fd30:	4310      	orrs	r0, r2
 800fd32:	f84a 0b04 	str.w	r0, [sl], #4
 800fd36:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd3a:	459c      	cmp	ip, r3
 800fd3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd40:	d8f3      	bhi.n	800fd2a <__lshift+0x6e>
 800fd42:	ebac 0304 	sub.w	r3, ip, r4
 800fd46:	3b15      	subs	r3, #21
 800fd48:	f023 0303 	bic.w	r3, r3, #3
 800fd4c:	3304      	adds	r3, #4
 800fd4e:	f104 0015 	add.w	r0, r4, #21
 800fd52:	4584      	cmp	ip, r0
 800fd54:	bf38      	it	cc
 800fd56:	2304      	movcc	r3, #4
 800fd58:	50ca      	str	r2, [r1, r3]
 800fd5a:	b10a      	cbz	r2, 800fd60 <__lshift+0xa4>
 800fd5c:	f108 0602 	add.w	r6, r8, #2
 800fd60:	3e01      	subs	r6, #1
 800fd62:	4638      	mov	r0, r7
 800fd64:	612e      	str	r6, [r5, #16]
 800fd66:	4621      	mov	r1, r4
 800fd68:	f7ff fd90 	bl	800f88c <_Bfree>
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd72:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd76:	3301      	adds	r3, #1
 800fd78:	e7c5      	b.n	800fd06 <__lshift+0x4a>
 800fd7a:	3904      	subs	r1, #4
 800fd7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd80:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd84:	459c      	cmp	ip, r3
 800fd86:	d8f9      	bhi.n	800fd7c <__lshift+0xc0>
 800fd88:	e7ea      	b.n	800fd60 <__lshift+0xa4>
 800fd8a:	bf00      	nop
 800fd8c:	08012091 	.word	0x08012091
 800fd90:	080120a2 	.word	0x080120a2

0800fd94 <__mcmp>:
 800fd94:	690a      	ldr	r2, [r1, #16]
 800fd96:	4603      	mov	r3, r0
 800fd98:	6900      	ldr	r0, [r0, #16]
 800fd9a:	1a80      	subs	r0, r0, r2
 800fd9c:	b530      	push	{r4, r5, lr}
 800fd9e:	d10e      	bne.n	800fdbe <__mcmp+0x2a>
 800fda0:	3314      	adds	r3, #20
 800fda2:	3114      	adds	r1, #20
 800fda4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fda8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fdac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fdb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fdb4:	4295      	cmp	r5, r2
 800fdb6:	d003      	beq.n	800fdc0 <__mcmp+0x2c>
 800fdb8:	d205      	bcs.n	800fdc6 <__mcmp+0x32>
 800fdba:	f04f 30ff 	mov.w	r0, #4294967295
 800fdbe:	bd30      	pop	{r4, r5, pc}
 800fdc0:	42a3      	cmp	r3, r4
 800fdc2:	d3f3      	bcc.n	800fdac <__mcmp+0x18>
 800fdc4:	e7fb      	b.n	800fdbe <__mcmp+0x2a>
 800fdc6:	2001      	movs	r0, #1
 800fdc8:	e7f9      	b.n	800fdbe <__mcmp+0x2a>
	...

0800fdcc <__mdiff>:
 800fdcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd0:	4689      	mov	r9, r1
 800fdd2:	4606      	mov	r6, r0
 800fdd4:	4611      	mov	r1, r2
 800fdd6:	4648      	mov	r0, r9
 800fdd8:	4614      	mov	r4, r2
 800fdda:	f7ff ffdb 	bl	800fd94 <__mcmp>
 800fdde:	1e05      	subs	r5, r0, #0
 800fde0:	d112      	bne.n	800fe08 <__mdiff+0x3c>
 800fde2:	4629      	mov	r1, r5
 800fde4:	4630      	mov	r0, r6
 800fde6:	f7ff fd11 	bl	800f80c <_Balloc>
 800fdea:	4602      	mov	r2, r0
 800fdec:	b928      	cbnz	r0, 800fdfa <__mdiff+0x2e>
 800fdee:	4b3f      	ldr	r3, [pc, #252]	@ (800feec <__mdiff+0x120>)
 800fdf0:	f240 2137 	movw	r1, #567	@ 0x237
 800fdf4:	483e      	ldr	r0, [pc, #248]	@ (800fef0 <__mdiff+0x124>)
 800fdf6:	f001 fbfb 	bl	80115f0 <__assert_func>
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe00:	4610      	mov	r0, r2
 800fe02:	b003      	add	sp, #12
 800fe04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe08:	bfbc      	itt	lt
 800fe0a:	464b      	movlt	r3, r9
 800fe0c:	46a1      	movlt	r9, r4
 800fe0e:	4630      	mov	r0, r6
 800fe10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fe14:	bfba      	itte	lt
 800fe16:	461c      	movlt	r4, r3
 800fe18:	2501      	movlt	r5, #1
 800fe1a:	2500      	movge	r5, #0
 800fe1c:	f7ff fcf6 	bl	800f80c <_Balloc>
 800fe20:	4602      	mov	r2, r0
 800fe22:	b918      	cbnz	r0, 800fe2c <__mdiff+0x60>
 800fe24:	4b31      	ldr	r3, [pc, #196]	@ (800feec <__mdiff+0x120>)
 800fe26:	f240 2145 	movw	r1, #581	@ 0x245
 800fe2a:	e7e3      	b.n	800fdf4 <__mdiff+0x28>
 800fe2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fe30:	6926      	ldr	r6, [r4, #16]
 800fe32:	60c5      	str	r5, [r0, #12]
 800fe34:	f109 0310 	add.w	r3, r9, #16
 800fe38:	f109 0514 	add.w	r5, r9, #20
 800fe3c:	f104 0e14 	add.w	lr, r4, #20
 800fe40:	f100 0b14 	add.w	fp, r0, #20
 800fe44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fe48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fe4c:	9301      	str	r3, [sp, #4]
 800fe4e:	46d9      	mov	r9, fp
 800fe50:	f04f 0c00 	mov.w	ip, #0
 800fe54:	9b01      	ldr	r3, [sp, #4]
 800fe56:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fe5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fe5e:	9301      	str	r3, [sp, #4]
 800fe60:	fa1f f38a 	uxth.w	r3, sl
 800fe64:	4619      	mov	r1, r3
 800fe66:	b283      	uxth	r3, r0
 800fe68:	1acb      	subs	r3, r1, r3
 800fe6a:	0c00      	lsrs	r0, r0, #16
 800fe6c:	4463      	add	r3, ip
 800fe6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fe72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fe7c:	4576      	cmp	r6, lr
 800fe7e:	f849 3b04 	str.w	r3, [r9], #4
 800fe82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe86:	d8e5      	bhi.n	800fe54 <__mdiff+0x88>
 800fe88:	1b33      	subs	r3, r6, r4
 800fe8a:	3b15      	subs	r3, #21
 800fe8c:	f023 0303 	bic.w	r3, r3, #3
 800fe90:	3415      	adds	r4, #21
 800fe92:	3304      	adds	r3, #4
 800fe94:	42a6      	cmp	r6, r4
 800fe96:	bf38      	it	cc
 800fe98:	2304      	movcc	r3, #4
 800fe9a:	441d      	add	r5, r3
 800fe9c:	445b      	add	r3, fp
 800fe9e:	461e      	mov	r6, r3
 800fea0:	462c      	mov	r4, r5
 800fea2:	4544      	cmp	r4, r8
 800fea4:	d30e      	bcc.n	800fec4 <__mdiff+0xf8>
 800fea6:	f108 0103 	add.w	r1, r8, #3
 800feaa:	1b49      	subs	r1, r1, r5
 800feac:	f021 0103 	bic.w	r1, r1, #3
 800feb0:	3d03      	subs	r5, #3
 800feb2:	45a8      	cmp	r8, r5
 800feb4:	bf38      	it	cc
 800feb6:	2100      	movcc	r1, #0
 800feb8:	440b      	add	r3, r1
 800feba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800febe:	b191      	cbz	r1, 800fee6 <__mdiff+0x11a>
 800fec0:	6117      	str	r7, [r2, #16]
 800fec2:	e79d      	b.n	800fe00 <__mdiff+0x34>
 800fec4:	f854 1b04 	ldr.w	r1, [r4], #4
 800fec8:	46e6      	mov	lr, ip
 800feca:	0c08      	lsrs	r0, r1, #16
 800fecc:	fa1c fc81 	uxtah	ip, ip, r1
 800fed0:	4471      	add	r1, lr
 800fed2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fed6:	b289      	uxth	r1, r1
 800fed8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fedc:	f846 1b04 	str.w	r1, [r6], #4
 800fee0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fee4:	e7dd      	b.n	800fea2 <__mdiff+0xd6>
 800fee6:	3f01      	subs	r7, #1
 800fee8:	e7e7      	b.n	800feba <__mdiff+0xee>
 800feea:	bf00      	nop
 800feec:	08012091 	.word	0x08012091
 800fef0:	080120a2 	.word	0x080120a2

0800fef4 <__ulp>:
 800fef4:	b082      	sub	sp, #8
 800fef6:	ed8d 0b00 	vstr	d0, [sp]
 800fefa:	9a01      	ldr	r2, [sp, #4]
 800fefc:	4b0f      	ldr	r3, [pc, #60]	@ (800ff3c <__ulp+0x48>)
 800fefe:	4013      	ands	r3, r2
 800ff00:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	dc08      	bgt.n	800ff1a <__ulp+0x26>
 800ff08:	425b      	negs	r3, r3
 800ff0a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ff0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff12:	da04      	bge.n	800ff1e <__ulp+0x2a>
 800ff14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ff18:	4113      	asrs	r3, r2
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	e008      	b.n	800ff30 <__ulp+0x3c>
 800ff1e:	f1a2 0314 	sub.w	r3, r2, #20
 800ff22:	2b1e      	cmp	r3, #30
 800ff24:	bfda      	itte	le
 800ff26:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ff2a:	40da      	lsrle	r2, r3
 800ff2c:	2201      	movgt	r2, #1
 800ff2e:	2300      	movs	r3, #0
 800ff30:	4619      	mov	r1, r3
 800ff32:	4610      	mov	r0, r2
 800ff34:	ec41 0b10 	vmov	d0, r0, r1
 800ff38:	b002      	add	sp, #8
 800ff3a:	4770      	bx	lr
 800ff3c:	7ff00000 	.word	0x7ff00000

0800ff40 <__b2d>:
 800ff40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff44:	6906      	ldr	r6, [r0, #16]
 800ff46:	f100 0814 	add.w	r8, r0, #20
 800ff4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ff4e:	1f37      	subs	r7, r6, #4
 800ff50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff54:	4610      	mov	r0, r2
 800ff56:	f7ff fd4b 	bl	800f9f0 <__hi0bits>
 800ff5a:	f1c0 0320 	rsb	r3, r0, #32
 800ff5e:	280a      	cmp	r0, #10
 800ff60:	600b      	str	r3, [r1, #0]
 800ff62:	491b      	ldr	r1, [pc, #108]	@ (800ffd0 <__b2d+0x90>)
 800ff64:	dc15      	bgt.n	800ff92 <__b2d+0x52>
 800ff66:	f1c0 0c0b 	rsb	ip, r0, #11
 800ff6a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ff6e:	45b8      	cmp	r8, r7
 800ff70:	ea43 0501 	orr.w	r5, r3, r1
 800ff74:	bf34      	ite	cc
 800ff76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff7a:	2300      	movcs	r3, #0
 800ff7c:	3015      	adds	r0, #21
 800ff7e:	fa02 f000 	lsl.w	r0, r2, r0
 800ff82:	fa23 f30c 	lsr.w	r3, r3, ip
 800ff86:	4303      	orrs	r3, r0
 800ff88:	461c      	mov	r4, r3
 800ff8a:	ec45 4b10 	vmov	d0, r4, r5
 800ff8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff92:	45b8      	cmp	r8, r7
 800ff94:	bf3a      	itte	cc
 800ff96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff9a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ff9e:	2300      	movcs	r3, #0
 800ffa0:	380b      	subs	r0, #11
 800ffa2:	d012      	beq.n	800ffca <__b2d+0x8a>
 800ffa4:	f1c0 0120 	rsb	r1, r0, #32
 800ffa8:	fa23 f401 	lsr.w	r4, r3, r1
 800ffac:	4082      	lsls	r2, r0
 800ffae:	4322      	orrs	r2, r4
 800ffb0:	4547      	cmp	r7, r8
 800ffb2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ffb6:	bf8c      	ite	hi
 800ffb8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ffbc:	2200      	movls	r2, #0
 800ffbe:	4083      	lsls	r3, r0
 800ffc0:	40ca      	lsrs	r2, r1
 800ffc2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	e7de      	b.n	800ff88 <__b2d+0x48>
 800ffca:	ea42 0501 	orr.w	r5, r2, r1
 800ffce:	e7db      	b.n	800ff88 <__b2d+0x48>
 800ffd0:	3ff00000 	.word	0x3ff00000

0800ffd4 <__d2b>:
 800ffd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffd8:	460f      	mov	r7, r1
 800ffda:	2101      	movs	r1, #1
 800ffdc:	ec59 8b10 	vmov	r8, r9, d0
 800ffe0:	4616      	mov	r6, r2
 800ffe2:	f7ff fc13 	bl	800f80c <_Balloc>
 800ffe6:	4604      	mov	r4, r0
 800ffe8:	b930      	cbnz	r0, 800fff8 <__d2b+0x24>
 800ffea:	4602      	mov	r2, r0
 800ffec:	4b23      	ldr	r3, [pc, #140]	@ (801007c <__d2b+0xa8>)
 800ffee:	4824      	ldr	r0, [pc, #144]	@ (8010080 <__d2b+0xac>)
 800fff0:	f240 310f 	movw	r1, #783	@ 0x30f
 800fff4:	f001 fafc 	bl	80115f0 <__assert_func>
 800fff8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fffc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010000:	b10d      	cbz	r5, 8010006 <__d2b+0x32>
 8010002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010006:	9301      	str	r3, [sp, #4]
 8010008:	f1b8 0300 	subs.w	r3, r8, #0
 801000c:	d023      	beq.n	8010056 <__d2b+0x82>
 801000e:	4668      	mov	r0, sp
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	f7ff fd0c 	bl	800fa2e <__lo0bits>
 8010016:	e9dd 1200 	ldrd	r1, r2, [sp]
 801001a:	b1d0      	cbz	r0, 8010052 <__d2b+0x7e>
 801001c:	f1c0 0320 	rsb	r3, r0, #32
 8010020:	fa02 f303 	lsl.w	r3, r2, r3
 8010024:	430b      	orrs	r3, r1
 8010026:	40c2      	lsrs	r2, r0
 8010028:	6163      	str	r3, [r4, #20]
 801002a:	9201      	str	r2, [sp, #4]
 801002c:	9b01      	ldr	r3, [sp, #4]
 801002e:	61a3      	str	r3, [r4, #24]
 8010030:	2b00      	cmp	r3, #0
 8010032:	bf0c      	ite	eq
 8010034:	2201      	moveq	r2, #1
 8010036:	2202      	movne	r2, #2
 8010038:	6122      	str	r2, [r4, #16]
 801003a:	b1a5      	cbz	r5, 8010066 <__d2b+0x92>
 801003c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010040:	4405      	add	r5, r0
 8010042:	603d      	str	r5, [r7, #0]
 8010044:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010048:	6030      	str	r0, [r6, #0]
 801004a:	4620      	mov	r0, r4
 801004c:	b003      	add	sp, #12
 801004e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010052:	6161      	str	r1, [r4, #20]
 8010054:	e7ea      	b.n	801002c <__d2b+0x58>
 8010056:	a801      	add	r0, sp, #4
 8010058:	f7ff fce9 	bl	800fa2e <__lo0bits>
 801005c:	9b01      	ldr	r3, [sp, #4]
 801005e:	6163      	str	r3, [r4, #20]
 8010060:	3020      	adds	r0, #32
 8010062:	2201      	movs	r2, #1
 8010064:	e7e8      	b.n	8010038 <__d2b+0x64>
 8010066:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801006a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801006e:	6038      	str	r0, [r7, #0]
 8010070:	6918      	ldr	r0, [r3, #16]
 8010072:	f7ff fcbd 	bl	800f9f0 <__hi0bits>
 8010076:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801007a:	e7e5      	b.n	8010048 <__d2b+0x74>
 801007c:	08012091 	.word	0x08012091
 8010080:	080120a2 	.word	0x080120a2

08010084 <__ratio>:
 8010084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010088:	4688      	mov	r8, r1
 801008a:	4669      	mov	r1, sp
 801008c:	4681      	mov	r9, r0
 801008e:	f7ff ff57 	bl	800ff40 <__b2d>
 8010092:	a901      	add	r1, sp, #4
 8010094:	4640      	mov	r0, r8
 8010096:	ec55 4b10 	vmov	r4, r5, d0
 801009a:	f7ff ff51 	bl	800ff40 <__b2d>
 801009e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80100a2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80100a6:	1ad2      	subs	r2, r2, r3
 80100a8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80100ac:	1a5b      	subs	r3, r3, r1
 80100ae:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80100b2:	ec57 6b10 	vmov	r6, r7, d0
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	bfd6      	itet	le
 80100ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80100be:	462a      	movgt	r2, r5
 80100c0:	463a      	movle	r2, r7
 80100c2:	46ab      	mov	fp, r5
 80100c4:	46a2      	mov	sl, r4
 80100c6:	bfce      	itee	gt
 80100c8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80100cc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80100d0:	ee00 3a90 	vmovle	s1, r3
 80100d4:	ec4b ab17 	vmov	d7, sl, fp
 80100d8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80100dc:	b003      	add	sp, #12
 80100de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100e2 <__copybits>:
 80100e2:	3901      	subs	r1, #1
 80100e4:	b570      	push	{r4, r5, r6, lr}
 80100e6:	1149      	asrs	r1, r1, #5
 80100e8:	6914      	ldr	r4, [r2, #16]
 80100ea:	3101      	adds	r1, #1
 80100ec:	f102 0314 	add.w	r3, r2, #20
 80100f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80100f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80100f8:	1f05      	subs	r5, r0, #4
 80100fa:	42a3      	cmp	r3, r4
 80100fc:	d30c      	bcc.n	8010118 <__copybits+0x36>
 80100fe:	1aa3      	subs	r3, r4, r2
 8010100:	3b11      	subs	r3, #17
 8010102:	f023 0303 	bic.w	r3, r3, #3
 8010106:	3211      	adds	r2, #17
 8010108:	42a2      	cmp	r2, r4
 801010a:	bf88      	it	hi
 801010c:	2300      	movhi	r3, #0
 801010e:	4418      	add	r0, r3
 8010110:	2300      	movs	r3, #0
 8010112:	4288      	cmp	r0, r1
 8010114:	d305      	bcc.n	8010122 <__copybits+0x40>
 8010116:	bd70      	pop	{r4, r5, r6, pc}
 8010118:	f853 6b04 	ldr.w	r6, [r3], #4
 801011c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010120:	e7eb      	b.n	80100fa <__copybits+0x18>
 8010122:	f840 3b04 	str.w	r3, [r0], #4
 8010126:	e7f4      	b.n	8010112 <__copybits+0x30>

08010128 <__any_on>:
 8010128:	f100 0214 	add.w	r2, r0, #20
 801012c:	6900      	ldr	r0, [r0, #16]
 801012e:	114b      	asrs	r3, r1, #5
 8010130:	4298      	cmp	r0, r3
 8010132:	b510      	push	{r4, lr}
 8010134:	db11      	blt.n	801015a <__any_on+0x32>
 8010136:	dd0a      	ble.n	801014e <__any_on+0x26>
 8010138:	f011 011f 	ands.w	r1, r1, #31
 801013c:	d007      	beq.n	801014e <__any_on+0x26>
 801013e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010142:	fa24 f001 	lsr.w	r0, r4, r1
 8010146:	fa00 f101 	lsl.w	r1, r0, r1
 801014a:	428c      	cmp	r4, r1
 801014c:	d10b      	bne.n	8010166 <__any_on+0x3e>
 801014e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010152:	4293      	cmp	r3, r2
 8010154:	d803      	bhi.n	801015e <__any_on+0x36>
 8010156:	2000      	movs	r0, #0
 8010158:	bd10      	pop	{r4, pc}
 801015a:	4603      	mov	r3, r0
 801015c:	e7f7      	b.n	801014e <__any_on+0x26>
 801015e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010162:	2900      	cmp	r1, #0
 8010164:	d0f5      	beq.n	8010152 <__any_on+0x2a>
 8010166:	2001      	movs	r0, #1
 8010168:	e7f6      	b.n	8010158 <__any_on+0x30>

0801016a <sulp>:
 801016a:	b570      	push	{r4, r5, r6, lr}
 801016c:	4604      	mov	r4, r0
 801016e:	460d      	mov	r5, r1
 8010170:	4616      	mov	r6, r2
 8010172:	ec45 4b10 	vmov	d0, r4, r5
 8010176:	f7ff febd 	bl	800fef4 <__ulp>
 801017a:	b17e      	cbz	r6, 801019c <sulp+0x32>
 801017c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010180:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010184:	2b00      	cmp	r3, #0
 8010186:	dd09      	ble.n	801019c <sulp+0x32>
 8010188:	051b      	lsls	r3, r3, #20
 801018a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801018e:	2000      	movs	r0, #0
 8010190:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8010194:	ec41 0b17 	vmov	d7, r0, r1
 8010198:	ee20 0b07 	vmul.f64	d0, d0, d7
 801019c:	bd70      	pop	{r4, r5, r6, pc}
	...

080101a0 <_strtod_l>:
 80101a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a4:	ed2d 8b0a 	vpush	{d8-d12}
 80101a8:	b097      	sub	sp, #92	@ 0x5c
 80101aa:	4688      	mov	r8, r1
 80101ac:	920e      	str	r2, [sp, #56]	@ 0x38
 80101ae:	2200      	movs	r2, #0
 80101b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80101b2:	9005      	str	r0, [sp, #20]
 80101b4:	f04f 0a00 	mov.w	sl, #0
 80101b8:	f04f 0b00 	mov.w	fp, #0
 80101bc:	460a      	mov	r2, r1
 80101be:	9211      	str	r2, [sp, #68]	@ 0x44
 80101c0:	7811      	ldrb	r1, [r2, #0]
 80101c2:	292b      	cmp	r1, #43	@ 0x2b
 80101c4:	d04c      	beq.n	8010260 <_strtod_l+0xc0>
 80101c6:	d839      	bhi.n	801023c <_strtod_l+0x9c>
 80101c8:	290d      	cmp	r1, #13
 80101ca:	d833      	bhi.n	8010234 <_strtod_l+0x94>
 80101cc:	2908      	cmp	r1, #8
 80101ce:	d833      	bhi.n	8010238 <_strtod_l+0x98>
 80101d0:	2900      	cmp	r1, #0
 80101d2:	d03c      	beq.n	801024e <_strtod_l+0xae>
 80101d4:	2200      	movs	r2, #0
 80101d6:	9208      	str	r2, [sp, #32]
 80101d8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80101da:	782a      	ldrb	r2, [r5, #0]
 80101dc:	2a30      	cmp	r2, #48	@ 0x30
 80101de:	f040 80b5 	bne.w	801034c <_strtod_l+0x1ac>
 80101e2:	786a      	ldrb	r2, [r5, #1]
 80101e4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80101e8:	2a58      	cmp	r2, #88	@ 0x58
 80101ea:	d170      	bne.n	80102ce <_strtod_l+0x12e>
 80101ec:	9302      	str	r3, [sp, #8]
 80101ee:	9b08      	ldr	r3, [sp, #32]
 80101f0:	9301      	str	r3, [sp, #4]
 80101f2:	ab12      	add	r3, sp, #72	@ 0x48
 80101f4:	9300      	str	r3, [sp, #0]
 80101f6:	4a8b      	ldr	r2, [pc, #556]	@ (8010424 <_strtod_l+0x284>)
 80101f8:	9805      	ldr	r0, [sp, #20]
 80101fa:	ab13      	add	r3, sp, #76	@ 0x4c
 80101fc:	a911      	add	r1, sp, #68	@ 0x44
 80101fe:	f001 fa91 	bl	8011724 <__gethex>
 8010202:	f010 060f 	ands.w	r6, r0, #15
 8010206:	4604      	mov	r4, r0
 8010208:	d005      	beq.n	8010216 <_strtod_l+0x76>
 801020a:	2e06      	cmp	r6, #6
 801020c:	d12a      	bne.n	8010264 <_strtod_l+0xc4>
 801020e:	3501      	adds	r5, #1
 8010210:	2300      	movs	r3, #0
 8010212:	9511      	str	r5, [sp, #68]	@ 0x44
 8010214:	9308      	str	r3, [sp, #32]
 8010216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010218:	2b00      	cmp	r3, #0
 801021a:	f040 852f 	bne.w	8010c7c <_strtod_l+0xadc>
 801021e:	9b08      	ldr	r3, [sp, #32]
 8010220:	ec4b ab10 	vmov	d0, sl, fp
 8010224:	b1cb      	cbz	r3, 801025a <_strtod_l+0xba>
 8010226:	eeb1 0b40 	vneg.f64	d0, d0
 801022a:	b017      	add	sp, #92	@ 0x5c
 801022c:	ecbd 8b0a 	vpop	{d8-d12}
 8010230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010234:	2920      	cmp	r1, #32
 8010236:	d1cd      	bne.n	80101d4 <_strtod_l+0x34>
 8010238:	3201      	adds	r2, #1
 801023a:	e7c0      	b.n	80101be <_strtod_l+0x1e>
 801023c:	292d      	cmp	r1, #45	@ 0x2d
 801023e:	d1c9      	bne.n	80101d4 <_strtod_l+0x34>
 8010240:	2101      	movs	r1, #1
 8010242:	9108      	str	r1, [sp, #32]
 8010244:	1c51      	adds	r1, r2, #1
 8010246:	9111      	str	r1, [sp, #68]	@ 0x44
 8010248:	7852      	ldrb	r2, [r2, #1]
 801024a:	2a00      	cmp	r2, #0
 801024c:	d1c4      	bne.n	80101d8 <_strtod_l+0x38>
 801024e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010250:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010254:	2b00      	cmp	r3, #0
 8010256:	f040 850f 	bne.w	8010c78 <_strtod_l+0xad8>
 801025a:	ec4b ab10 	vmov	d0, sl, fp
 801025e:	e7e4      	b.n	801022a <_strtod_l+0x8a>
 8010260:	2100      	movs	r1, #0
 8010262:	e7ee      	b.n	8010242 <_strtod_l+0xa2>
 8010264:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010266:	b13a      	cbz	r2, 8010278 <_strtod_l+0xd8>
 8010268:	2135      	movs	r1, #53	@ 0x35
 801026a:	a814      	add	r0, sp, #80	@ 0x50
 801026c:	f7ff ff39 	bl	80100e2 <__copybits>
 8010270:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010272:	9805      	ldr	r0, [sp, #20]
 8010274:	f7ff fb0a 	bl	800f88c <_Bfree>
 8010278:	1e73      	subs	r3, r6, #1
 801027a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801027c:	2b04      	cmp	r3, #4
 801027e:	d806      	bhi.n	801028e <_strtod_l+0xee>
 8010280:	e8df f003 	tbb	[pc, r3]
 8010284:	201d0314 	.word	0x201d0314
 8010288:	14          	.byte	0x14
 8010289:	00          	.byte	0x00
 801028a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801028e:	05e3      	lsls	r3, r4, #23
 8010290:	bf48      	it	mi
 8010292:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010296:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801029a:	0d1b      	lsrs	r3, r3, #20
 801029c:	051b      	lsls	r3, r3, #20
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d1b9      	bne.n	8010216 <_strtod_l+0x76>
 80102a2:	f7fe fb91 	bl	800e9c8 <__errno>
 80102a6:	2322      	movs	r3, #34	@ 0x22
 80102a8:	6003      	str	r3, [r0, #0]
 80102aa:	e7b4      	b.n	8010216 <_strtod_l+0x76>
 80102ac:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80102b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80102b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80102b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80102bc:	e7e7      	b.n	801028e <_strtod_l+0xee>
 80102be:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801042c <_strtod_l+0x28c>
 80102c2:	e7e4      	b.n	801028e <_strtod_l+0xee>
 80102c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80102c8:	f04f 3aff 	mov.w	sl, #4294967295
 80102cc:	e7df      	b.n	801028e <_strtod_l+0xee>
 80102ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80102d0:	1c5a      	adds	r2, r3, #1
 80102d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80102d4:	785b      	ldrb	r3, [r3, #1]
 80102d6:	2b30      	cmp	r3, #48	@ 0x30
 80102d8:	d0f9      	beq.n	80102ce <_strtod_l+0x12e>
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d09b      	beq.n	8010216 <_strtod_l+0x76>
 80102de:	2301      	movs	r3, #1
 80102e0:	2600      	movs	r6, #0
 80102e2:	9307      	str	r3, [sp, #28]
 80102e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80102e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80102e8:	46b1      	mov	r9, r6
 80102ea:	4635      	mov	r5, r6
 80102ec:	220a      	movs	r2, #10
 80102ee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80102f0:	7804      	ldrb	r4, [r0, #0]
 80102f2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80102f6:	b2d9      	uxtb	r1, r3
 80102f8:	2909      	cmp	r1, #9
 80102fa:	d929      	bls.n	8010350 <_strtod_l+0x1b0>
 80102fc:	494a      	ldr	r1, [pc, #296]	@ (8010428 <_strtod_l+0x288>)
 80102fe:	2201      	movs	r2, #1
 8010300:	f001 f928 	bl	8011554 <strncmp>
 8010304:	b378      	cbz	r0, 8010366 <_strtod_l+0x1c6>
 8010306:	2000      	movs	r0, #0
 8010308:	4622      	mov	r2, r4
 801030a:	462b      	mov	r3, r5
 801030c:	4607      	mov	r7, r0
 801030e:	9006      	str	r0, [sp, #24]
 8010310:	2a65      	cmp	r2, #101	@ 0x65
 8010312:	d001      	beq.n	8010318 <_strtod_l+0x178>
 8010314:	2a45      	cmp	r2, #69	@ 0x45
 8010316:	d117      	bne.n	8010348 <_strtod_l+0x1a8>
 8010318:	b91b      	cbnz	r3, 8010322 <_strtod_l+0x182>
 801031a:	9b07      	ldr	r3, [sp, #28]
 801031c:	4303      	orrs	r3, r0
 801031e:	d096      	beq.n	801024e <_strtod_l+0xae>
 8010320:	2300      	movs	r3, #0
 8010322:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8010326:	f108 0201 	add.w	r2, r8, #1
 801032a:	9211      	str	r2, [sp, #68]	@ 0x44
 801032c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010330:	2a2b      	cmp	r2, #43	@ 0x2b
 8010332:	d06b      	beq.n	801040c <_strtod_l+0x26c>
 8010334:	2a2d      	cmp	r2, #45	@ 0x2d
 8010336:	d071      	beq.n	801041c <_strtod_l+0x27c>
 8010338:	f04f 0e00 	mov.w	lr, #0
 801033c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010340:	2c09      	cmp	r4, #9
 8010342:	d979      	bls.n	8010438 <_strtod_l+0x298>
 8010344:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010348:	2400      	movs	r4, #0
 801034a:	e094      	b.n	8010476 <_strtod_l+0x2d6>
 801034c:	2300      	movs	r3, #0
 801034e:	e7c7      	b.n	80102e0 <_strtod_l+0x140>
 8010350:	2d08      	cmp	r5, #8
 8010352:	f100 0001 	add.w	r0, r0, #1
 8010356:	bfd4      	ite	le
 8010358:	fb02 3909 	mlale	r9, r2, r9, r3
 801035c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8010360:	3501      	adds	r5, #1
 8010362:	9011      	str	r0, [sp, #68]	@ 0x44
 8010364:	e7c3      	b.n	80102ee <_strtod_l+0x14e>
 8010366:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010368:	1c5a      	adds	r2, r3, #1
 801036a:	9211      	str	r2, [sp, #68]	@ 0x44
 801036c:	785a      	ldrb	r2, [r3, #1]
 801036e:	b375      	cbz	r5, 80103ce <_strtod_l+0x22e>
 8010370:	4607      	mov	r7, r0
 8010372:	462b      	mov	r3, r5
 8010374:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010378:	2909      	cmp	r1, #9
 801037a:	d913      	bls.n	80103a4 <_strtod_l+0x204>
 801037c:	2101      	movs	r1, #1
 801037e:	9106      	str	r1, [sp, #24]
 8010380:	e7c6      	b.n	8010310 <_strtod_l+0x170>
 8010382:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010384:	1c5a      	adds	r2, r3, #1
 8010386:	9211      	str	r2, [sp, #68]	@ 0x44
 8010388:	785a      	ldrb	r2, [r3, #1]
 801038a:	3001      	adds	r0, #1
 801038c:	2a30      	cmp	r2, #48	@ 0x30
 801038e:	d0f8      	beq.n	8010382 <_strtod_l+0x1e2>
 8010390:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010394:	2b08      	cmp	r3, #8
 8010396:	f200 8476 	bhi.w	8010c86 <_strtod_l+0xae6>
 801039a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801039c:	930a      	str	r3, [sp, #40]	@ 0x28
 801039e:	4607      	mov	r7, r0
 80103a0:	2000      	movs	r0, #0
 80103a2:	4603      	mov	r3, r0
 80103a4:	3a30      	subs	r2, #48	@ 0x30
 80103a6:	f100 0101 	add.w	r1, r0, #1
 80103aa:	d023      	beq.n	80103f4 <_strtod_l+0x254>
 80103ac:	440f      	add	r7, r1
 80103ae:	eb00 0c03 	add.w	ip, r0, r3
 80103b2:	4619      	mov	r1, r3
 80103b4:	240a      	movs	r4, #10
 80103b6:	4561      	cmp	r1, ip
 80103b8:	d10b      	bne.n	80103d2 <_strtod_l+0x232>
 80103ba:	1c5c      	adds	r4, r3, #1
 80103bc:	4403      	add	r3, r0
 80103be:	2b08      	cmp	r3, #8
 80103c0:	4404      	add	r4, r0
 80103c2:	dc11      	bgt.n	80103e8 <_strtod_l+0x248>
 80103c4:	230a      	movs	r3, #10
 80103c6:	fb03 2909 	mla	r9, r3, r9, r2
 80103ca:	2100      	movs	r1, #0
 80103cc:	e013      	b.n	80103f6 <_strtod_l+0x256>
 80103ce:	4628      	mov	r0, r5
 80103d0:	e7dc      	b.n	801038c <_strtod_l+0x1ec>
 80103d2:	2908      	cmp	r1, #8
 80103d4:	f101 0101 	add.w	r1, r1, #1
 80103d8:	dc02      	bgt.n	80103e0 <_strtod_l+0x240>
 80103da:	fb04 f909 	mul.w	r9, r4, r9
 80103de:	e7ea      	b.n	80103b6 <_strtod_l+0x216>
 80103e0:	2910      	cmp	r1, #16
 80103e2:	bfd8      	it	le
 80103e4:	4366      	mulle	r6, r4
 80103e6:	e7e6      	b.n	80103b6 <_strtod_l+0x216>
 80103e8:	2b0f      	cmp	r3, #15
 80103ea:	dcee      	bgt.n	80103ca <_strtod_l+0x22a>
 80103ec:	230a      	movs	r3, #10
 80103ee:	fb03 2606 	mla	r6, r3, r6, r2
 80103f2:	e7ea      	b.n	80103ca <_strtod_l+0x22a>
 80103f4:	461c      	mov	r4, r3
 80103f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80103f8:	1c5a      	adds	r2, r3, #1
 80103fa:	9211      	str	r2, [sp, #68]	@ 0x44
 80103fc:	785a      	ldrb	r2, [r3, #1]
 80103fe:	4608      	mov	r0, r1
 8010400:	4623      	mov	r3, r4
 8010402:	e7b7      	b.n	8010374 <_strtod_l+0x1d4>
 8010404:	2301      	movs	r3, #1
 8010406:	2700      	movs	r7, #0
 8010408:	9306      	str	r3, [sp, #24]
 801040a:	e786      	b.n	801031a <_strtod_l+0x17a>
 801040c:	f04f 0e00 	mov.w	lr, #0
 8010410:	f108 0202 	add.w	r2, r8, #2
 8010414:	9211      	str	r2, [sp, #68]	@ 0x44
 8010416:	f898 2002 	ldrb.w	r2, [r8, #2]
 801041a:	e78f      	b.n	801033c <_strtod_l+0x19c>
 801041c:	f04f 0e01 	mov.w	lr, #1
 8010420:	e7f6      	b.n	8010410 <_strtod_l+0x270>
 8010422:	bf00      	nop
 8010424:	08012210 	.word	0x08012210
 8010428:	080121f8 	.word	0x080121f8
 801042c:	7ff00000 	.word	0x7ff00000
 8010430:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010432:	1c54      	adds	r4, r2, #1
 8010434:	9411      	str	r4, [sp, #68]	@ 0x44
 8010436:	7852      	ldrb	r2, [r2, #1]
 8010438:	2a30      	cmp	r2, #48	@ 0x30
 801043a:	d0f9      	beq.n	8010430 <_strtod_l+0x290>
 801043c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8010440:	2c08      	cmp	r4, #8
 8010442:	d881      	bhi.n	8010348 <_strtod_l+0x1a8>
 8010444:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8010448:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801044a:	9209      	str	r2, [sp, #36]	@ 0x24
 801044c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801044e:	1c51      	adds	r1, r2, #1
 8010450:	9111      	str	r1, [sp, #68]	@ 0x44
 8010452:	7852      	ldrb	r2, [r2, #1]
 8010454:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010458:	2c09      	cmp	r4, #9
 801045a:	d938      	bls.n	80104ce <_strtod_l+0x32e>
 801045c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801045e:	1b0c      	subs	r4, r1, r4
 8010460:	2c08      	cmp	r4, #8
 8010462:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8010466:	dc02      	bgt.n	801046e <_strtod_l+0x2ce>
 8010468:	4564      	cmp	r4, ip
 801046a:	bfa8      	it	ge
 801046c:	4664      	movge	r4, ip
 801046e:	f1be 0f00 	cmp.w	lr, #0
 8010472:	d000      	beq.n	8010476 <_strtod_l+0x2d6>
 8010474:	4264      	negs	r4, r4
 8010476:	2b00      	cmp	r3, #0
 8010478:	d14e      	bne.n	8010518 <_strtod_l+0x378>
 801047a:	9b07      	ldr	r3, [sp, #28]
 801047c:	4318      	orrs	r0, r3
 801047e:	f47f aeca 	bne.w	8010216 <_strtod_l+0x76>
 8010482:	9b06      	ldr	r3, [sp, #24]
 8010484:	2b00      	cmp	r3, #0
 8010486:	f47f aee2 	bne.w	801024e <_strtod_l+0xae>
 801048a:	2a69      	cmp	r2, #105	@ 0x69
 801048c:	d027      	beq.n	80104de <_strtod_l+0x33e>
 801048e:	dc24      	bgt.n	80104da <_strtod_l+0x33a>
 8010490:	2a49      	cmp	r2, #73	@ 0x49
 8010492:	d024      	beq.n	80104de <_strtod_l+0x33e>
 8010494:	2a4e      	cmp	r2, #78	@ 0x4e
 8010496:	f47f aeda 	bne.w	801024e <_strtod_l+0xae>
 801049a:	4997      	ldr	r1, [pc, #604]	@ (80106f8 <_strtod_l+0x558>)
 801049c:	a811      	add	r0, sp, #68	@ 0x44
 801049e:	f001 fb63 	bl	8011b68 <__match>
 80104a2:	2800      	cmp	r0, #0
 80104a4:	f43f aed3 	beq.w	801024e <_strtod_l+0xae>
 80104a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	2b28      	cmp	r3, #40	@ 0x28
 80104ae:	d12d      	bne.n	801050c <_strtod_l+0x36c>
 80104b0:	4992      	ldr	r1, [pc, #584]	@ (80106fc <_strtod_l+0x55c>)
 80104b2:	aa14      	add	r2, sp, #80	@ 0x50
 80104b4:	a811      	add	r0, sp, #68	@ 0x44
 80104b6:	f001 fb6b 	bl	8011b90 <__hexnan>
 80104ba:	2805      	cmp	r0, #5
 80104bc:	d126      	bne.n	801050c <_strtod_l+0x36c>
 80104be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80104c0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80104c4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80104c8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80104cc:	e6a3      	b.n	8010216 <_strtod_l+0x76>
 80104ce:	240a      	movs	r4, #10
 80104d0:	fb04 2c0c 	mla	ip, r4, ip, r2
 80104d4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80104d8:	e7b8      	b.n	801044c <_strtod_l+0x2ac>
 80104da:	2a6e      	cmp	r2, #110	@ 0x6e
 80104dc:	e7db      	b.n	8010496 <_strtod_l+0x2f6>
 80104de:	4988      	ldr	r1, [pc, #544]	@ (8010700 <_strtod_l+0x560>)
 80104e0:	a811      	add	r0, sp, #68	@ 0x44
 80104e2:	f001 fb41 	bl	8011b68 <__match>
 80104e6:	2800      	cmp	r0, #0
 80104e8:	f43f aeb1 	beq.w	801024e <_strtod_l+0xae>
 80104ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104ee:	4985      	ldr	r1, [pc, #532]	@ (8010704 <_strtod_l+0x564>)
 80104f0:	3b01      	subs	r3, #1
 80104f2:	a811      	add	r0, sp, #68	@ 0x44
 80104f4:	9311      	str	r3, [sp, #68]	@ 0x44
 80104f6:	f001 fb37 	bl	8011b68 <__match>
 80104fa:	b910      	cbnz	r0, 8010502 <_strtod_l+0x362>
 80104fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104fe:	3301      	adds	r3, #1
 8010500:	9311      	str	r3, [sp, #68]	@ 0x44
 8010502:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8010718 <_strtod_l+0x578>
 8010506:	f04f 0a00 	mov.w	sl, #0
 801050a:	e684      	b.n	8010216 <_strtod_l+0x76>
 801050c:	487e      	ldr	r0, [pc, #504]	@ (8010708 <_strtod_l+0x568>)
 801050e:	f001 f867 	bl	80115e0 <nan>
 8010512:	ec5b ab10 	vmov	sl, fp, d0
 8010516:	e67e      	b.n	8010216 <_strtod_l+0x76>
 8010518:	ee07 9a90 	vmov	s15, r9
 801051c:	1be2      	subs	r2, r4, r7
 801051e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010522:	2d00      	cmp	r5, #0
 8010524:	bf08      	it	eq
 8010526:	461d      	moveq	r5, r3
 8010528:	2b10      	cmp	r3, #16
 801052a:	9209      	str	r2, [sp, #36]	@ 0x24
 801052c:	461a      	mov	r2, r3
 801052e:	bfa8      	it	ge
 8010530:	2210      	movge	r2, #16
 8010532:	2b09      	cmp	r3, #9
 8010534:	ec5b ab17 	vmov	sl, fp, d7
 8010538:	dc15      	bgt.n	8010566 <_strtod_l+0x3c6>
 801053a:	1be1      	subs	r1, r4, r7
 801053c:	2900      	cmp	r1, #0
 801053e:	f43f ae6a 	beq.w	8010216 <_strtod_l+0x76>
 8010542:	eba4 0107 	sub.w	r1, r4, r7
 8010546:	dd72      	ble.n	801062e <_strtod_l+0x48e>
 8010548:	2916      	cmp	r1, #22
 801054a:	dc59      	bgt.n	8010600 <_strtod_l+0x460>
 801054c:	4b6f      	ldr	r3, [pc, #444]	@ (801070c <_strtod_l+0x56c>)
 801054e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010554:	ed93 7b00 	vldr	d7, [r3]
 8010558:	ec4b ab16 	vmov	d6, sl, fp
 801055c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010560:	ec5b ab17 	vmov	sl, fp, d7
 8010564:	e657      	b.n	8010216 <_strtod_l+0x76>
 8010566:	4969      	ldr	r1, [pc, #420]	@ (801070c <_strtod_l+0x56c>)
 8010568:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801056c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010570:	ee06 6a90 	vmov	s13, r6
 8010574:	2b0f      	cmp	r3, #15
 8010576:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801057a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801057e:	ec5b ab16 	vmov	sl, fp, d6
 8010582:	ddda      	ble.n	801053a <_strtod_l+0x39a>
 8010584:	1a9a      	subs	r2, r3, r2
 8010586:	1be1      	subs	r1, r4, r7
 8010588:	440a      	add	r2, r1
 801058a:	2a00      	cmp	r2, #0
 801058c:	f340 8094 	ble.w	80106b8 <_strtod_l+0x518>
 8010590:	f012 000f 	ands.w	r0, r2, #15
 8010594:	d00a      	beq.n	80105ac <_strtod_l+0x40c>
 8010596:	495d      	ldr	r1, [pc, #372]	@ (801070c <_strtod_l+0x56c>)
 8010598:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801059c:	ed91 7b00 	vldr	d7, [r1]
 80105a0:	ec4b ab16 	vmov	d6, sl, fp
 80105a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80105a8:	ec5b ab17 	vmov	sl, fp, d7
 80105ac:	f032 020f 	bics.w	r2, r2, #15
 80105b0:	d073      	beq.n	801069a <_strtod_l+0x4fa>
 80105b2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80105b6:	dd47      	ble.n	8010648 <_strtod_l+0x4a8>
 80105b8:	2400      	movs	r4, #0
 80105ba:	4625      	mov	r5, r4
 80105bc:	9407      	str	r4, [sp, #28]
 80105be:	4626      	mov	r6, r4
 80105c0:	9a05      	ldr	r2, [sp, #20]
 80105c2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010718 <_strtod_l+0x578>
 80105c6:	2322      	movs	r3, #34	@ 0x22
 80105c8:	6013      	str	r3, [r2, #0]
 80105ca:	f04f 0a00 	mov.w	sl, #0
 80105ce:	9b07      	ldr	r3, [sp, #28]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	f43f ae20 	beq.w	8010216 <_strtod_l+0x76>
 80105d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80105d8:	9805      	ldr	r0, [sp, #20]
 80105da:	f7ff f957 	bl	800f88c <_Bfree>
 80105de:	9805      	ldr	r0, [sp, #20]
 80105e0:	4631      	mov	r1, r6
 80105e2:	f7ff f953 	bl	800f88c <_Bfree>
 80105e6:	9805      	ldr	r0, [sp, #20]
 80105e8:	4629      	mov	r1, r5
 80105ea:	f7ff f94f 	bl	800f88c <_Bfree>
 80105ee:	9907      	ldr	r1, [sp, #28]
 80105f0:	9805      	ldr	r0, [sp, #20]
 80105f2:	f7ff f94b 	bl	800f88c <_Bfree>
 80105f6:	9805      	ldr	r0, [sp, #20]
 80105f8:	4621      	mov	r1, r4
 80105fa:	f7ff f947 	bl	800f88c <_Bfree>
 80105fe:	e60a      	b.n	8010216 <_strtod_l+0x76>
 8010600:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8010604:	1be0      	subs	r0, r4, r7
 8010606:	4281      	cmp	r1, r0
 8010608:	dbbc      	blt.n	8010584 <_strtod_l+0x3e4>
 801060a:	4a40      	ldr	r2, [pc, #256]	@ (801070c <_strtod_l+0x56c>)
 801060c:	f1c3 030f 	rsb	r3, r3, #15
 8010610:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010614:	ed91 7b00 	vldr	d7, [r1]
 8010618:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801061a:	ec4b ab16 	vmov	d6, sl, fp
 801061e:	1acb      	subs	r3, r1, r3
 8010620:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010624:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010628:	ed92 6b00 	vldr	d6, [r2]
 801062c:	e796      	b.n	801055c <_strtod_l+0x3bc>
 801062e:	3116      	adds	r1, #22
 8010630:	dba8      	blt.n	8010584 <_strtod_l+0x3e4>
 8010632:	4b36      	ldr	r3, [pc, #216]	@ (801070c <_strtod_l+0x56c>)
 8010634:	1b3c      	subs	r4, r7, r4
 8010636:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801063a:	ed94 7b00 	vldr	d7, [r4]
 801063e:	ec4b ab16 	vmov	d6, sl, fp
 8010642:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010646:	e78b      	b.n	8010560 <_strtod_l+0x3c0>
 8010648:	2000      	movs	r0, #0
 801064a:	ec4b ab17 	vmov	d7, sl, fp
 801064e:	4e30      	ldr	r6, [pc, #192]	@ (8010710 <_strtod_l+0x570>)
 8010650:	1112      	asrs	r2, r2, #4
 8010652:	4601      	mov	r1, r0
 8010654:	2a01      	cmp	r2, #1
 8010656:	dc23      	bgt.n	80106a0 <_strtod_l+0x500>
 8010658:	b108      	cbz	r0, 801065e <_strtod_l+0x4be>
 801065a:	ec5b ab17 	vmov	sl, fp, d7
 801065e:	4a2c      	ldr	r2, [pc, #176]	@ (8010710 <_strtod_l+0x570>)
 8010660:	482c      	ldr	r0, [pc, #176]	@ (8010714 <_strtod_l+0x574>)
 8010662:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010666:	ed92 7b00 	vldr	d7, [r2]
 801066a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801066e:	ec4b ab16 	vmov	d6, sl, fp
 8010672:	4a29      	ldr	r2, [pc, #164]	@ (8010718 <_strtod_l+0x578>)
 8010674:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010678:	ee17 1a90 	vmov	r1, s15
 801067c:	400a      	ands	r2, r1
 801067e:	4282      	cmp	r2, r0
 8010680:	ec5b ab17 	vmov	sl, fp, d7
 8010684:	d898      	bhi.n	80105b8 <_strtod_l+0x418>
 8010686:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801068a:	4282      	cmp	r2, r0
 801068c:	bf86      	itte	hi
 801068e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801071c <_strtod_l+0x57c>
 8010692:	f04f 3aff 	movhi.w	sl, #4294967295
 8010696:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801069a:	2200      	movs	r2, #0
 801069c:	9206      	str	r2, [sp, #24]
 801069e:	e076      	b.n	801078e <_strtod_l+0x5ee>
 80106a0:	f012 0f01 	tst.w	r2, #1
 80106a4:	d004      	beq.n	80106b0 <_strtod_l+0x510>
 80106a6:	ed96 6b00 	vldr	d6, [r6]
 80106aa:	2001      	movs	r0, #1
 80106ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80106b0:	3101      	adds	r1, #1
 80106b2:	1052      	asrs	r2, r2, #1
 80106b4:	3608      	adds	r6, #8
 80106b6:	e7cd      	b.n	8010654 <_strtod_l+0x4b4>
 80106b8:	d0ef      	beq.n	801069a <_strtod_l+0x4fa>
 80106ba:	4252      	negs	r2, r2
 80106bc:	f012 000f 	ands.w	r0, r2, #15
 80106c0:	d00a      	beq.n	80106d8 <_strtod_l+0x538>
 80106c2:	4912      	ldr	r1, [pc, #72]	@ (801070c <_strtod_l+0x56c>)
 80106c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80106c8:	ed91 7b00 	vldr	d7, [r1]
 80106cc:	ec4b ab16 	vmov	d6, sl, fp
 80106d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80106d4:	ec5b ab17 	vmov	sl, fp, d7
 80106d8:	1112      	asrs	r2, r2, #4
 80106da:	d0de      	beq.n	801069a <_strtod_l+0x4fa>
 80106dc:	2a1f      	cmp	r2, #31
 80106de:	dd1f      	ble.n	8010720 <_strtod_l+0x580>
 80106e0:	2400      	movs	r4, #0
 80106e2:	4625      	mov	r5, r4
 80106e4:	9407      	str	r4, [sp, #28]
 80106e6:	4626      	mov	r6, r4
 80106e8:	9a05      	ldr	r2, [sp, #20]
 80106ea:	2322      	movs	r3, #34	@ 0x22
 80106ec:	f04f 0a00 	mov.w	sl, #0
 80106f0:	f04f 0b00 	mov.w	fp, #0
 80106f4:	6013      	str	r3, [r2, #0]
 80106f6:	e76a      	b.n	80105ce <_strtod_l+0x42e>
 80106f8:	08011fe9 	.word	0x08011fe9
 80106fc:	080121fc 	.word	0x080121fc
 8010700:	08011fe1 	.word	0x08011fe1
 8010704:	08012018 	.word	0x08012018
 8010708:	080123a5 	.word	0x080123a5
 801070c:	08012130 	.word	0x08012130
 8010710:	08012108 	.word	0x08012108
 8010714:	7ca00000 	.word	0x7ca00000
 8010718:	7ff00000 	.word	0x7ff00000
 801071c:	7fefffff 	.word	0x7fefffff
 8010720:	f012 0110 	ands.w	r1, r2, #16
 8010724:	bf18      	it	ne
 8010726:	216a      	movne	r1, #106	@ 0x6a
 8010728:	9106      	str	r1, [sp, #24]
 801072a:	ec4b ab17 	vmov	d7, sl, fp
 801072e:	49b0      	ldr	r1, [pc, #704]	@ (80109f0 <_strtod_l+0x850>)
 8010730:	2000      	movs	r0, #0
 8010732:	07d6      	lsls	r6, r2, #31
 8010734:	d504      	bpl.n	8010740 <_strtod_l+0x5a0>
 8010736:	ed91 6b00 	vldr	d6, [r1]
 801073a:	2001      	movs	r0, #1
 801073c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010740:	1052      	asrs	r2, r2, #1
 8010742:	f101 0108 	add.w	r1, r1, #8
 8010746:	d1f4      	bne.n	8010732 <_strtod_l+0x592>
 8010748:	b108      	cbz	r0, 801074e <_strtod_l+0x5ae>
 801074a:	ec5b ab17 	vmov	sl, fp, d7
 801074e:	9a06      	ldr	r2, [sp, #24]
 8010750:	b1b2      	cbz	r2, 8010780 <_strtod_l+0x5e0>
 8010752:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8010756:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801075a:	2a00      	cmp	r2, #0
 801075c:	4658      	mov	r0, fp
 801075e:	dd0f      	ble.n	8010780 <_strtod_l+0x5e0>
 8010760:	2a1f      	cmp	r2, #31
 8010762:	dd55      	ble.n	8010810 <_strtod_l+0x670>
 8010764:	2a34      	cmp	r2, #52	@ 0x34
 8010766:	bfde      	ittt	le
 8010768:	f04f 32ff 	movle.w	r2, #4294967295
 801076c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8010770:	408a      	lslle	r2, r1
 8010772:	f04f 0a00 	mov.w	sl, #0
 8010776:	bfcc      	ite	gt
 8010778:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801077c:	ea02 0b00 	andle.w	fp, r2, r0
 8010780:	ec4b ab17 	vmov	d7, sl, fp
 8010784:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801078c:	d0a8      	beq.n	80106e0 <_strtod_l+0x540>
 801078e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010790:	9805      	ldr	r0, [sp, #20]
 8010792:	f8cd 9000 	str.w	r9, [sp]
 8010796:	462a      	mov	r2, r5
 8010798:	f7ff f8e0 	bl	800f95c <__s2b>
 801079c:	9007      	str	r0, [sp, #28]
 801079e:	2800      	cmp	r0, #0
 80107a0:	f43f af0a 	beq.w	80105b8 <_strtod_l+0x418>
 80107a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107a6:	1b3f      	subs	r7, r7, r4
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	bfb4      	ite	lt
 80107ac:	463b      	movlt	r3, r7
 80107ae:	2300      	movge	r3, #0
 80107b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80107b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107b4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80109e0 <_strtod_l+0x840>
 80107b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80107bc:	2400      	movs	r4, #0
 80107be:	930d      	str	r3, [sp, #52]	@ 0x34
 80107c0:	4625      	mov	r5, r4
 80107c2:	9b07      	ldr	r3, [sp, #28]
 80107c4:	9805      	ldr	r0, [sp, #20]
 80107c6:	6859      	ldr	r1, [r3, #4]
 80107c8:	f7ff f820 	bl	800f80c <_Balloc>
 80107cc:	4606      	mov	r6, r0
 80107ce:	2800      	cmp	r0, #0
 80107d0:	f43f aef6 	beq.w	80105c0 <_strtod_l+0x420>
 80107d4:	9b07      	ldr	r3, [sp, #28]
 80107d6:	691a      	ldr	r2, [r3, #16]
 80107d8:	ec4b ab19 	vmov	d9, sl, fp
 80107dc:	3202      	adds	r2, #2
 80107de:	f103 010c 	add.w	r1, r3, #12
 80107e2:	0092      	lsls	r2, r2, #2
 80107e4:	300c      	adds	r0, #12
 80107e6:	f7fe f91c 	bl	800ea22 <memcpy>
 80107ea:	eeb0 0b49 	vmov.f64	d0, d9
 80107ee:	9805      	ldr	r0, [sp, #20]
 80107f0:	aa14      	add	r2, sp, #80	@ 0x50
 80107f2:	a913      	add	r1, sp, #76	@ 0x4c
 80107f4:	f7ff fbee 	bl	800ffd4 <__d2b>
 80107f8:	9012      	str	r0, [sp, #72]	@ 0x48
 80107fa:	2800      	cmp	r0, #0
 80107fc:	f43f aee0 	beq.w	80105c0 <_strtod_l+0x420>
 8010800:	9805      	ldr	r0, [sp, #20]
 8010802:	2101      	movs	r1, #1
 8010804:	f7ff f940 	bl	800fa88 <__i2b>
 8010808:	4605      	mov	r5, r0
 801080a:	b940      	cbnz	r0, 801081e <_strtod_l+0x67e>
 801080c:	2500      	movs	r5, #0
 801080e:	e6d7      	b.n	80105c0 <_strtod_l+0x420>
 8010810:	f04f 31ff 	mov.w	r1, #4294967295
 8010814:	fa01 f202 	lsl.w	r2, r1, r2
 8010818:	ea02 0a0a 	and.w	sl, r2, sl
 801081c:	e7b0      	b.n	8010780 <_strtod_l+0x5e0>
 801081e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010820:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010822:	2f00      	cmp	r7, #0
 8010824:	bfab      	itete	ge
 8010826:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8010828:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801082a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801082e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8010832:	bfac      	ite	ge
 8010834:	eb07 0903 	addge.w	r9, r7, r3
 8010838:	eba3 0807 	sublt.w	r8, r3, r7
 801083c:	9b06      	ldr	r3, [sp, #24]
 801083e:	1aff      	subs	r7, r7, r3
 8010840:	4417      	add	r7, r2
 8010842:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8010846:	4a6b      	ldr	r2, [pc, #428]	@ (80109f4 <_strtod_l+0x854>)
 8010848:	3f01      	subs	r7, #1
 801084a:	4297      	cmp	r7, r2
 801084c:	da51      	bge.n	80108f2 <_strtod_l+0x752>
 801084e:	1bd1      	subs	r1, r2, r7
 8010850:	291f      	cmp	r1, #31
 8010852:	eba3 0301 	sub.w	r3, r3, r1
 8010856:	f04f 0201 	mov.w	r2, #1
 801085a:	dc3e      	bgt.n	80108da <_strtod_l+0x73a>
 801085c:	408a      	lsls	r2, r1
 801085e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010860:	2200      	movs	r2, #0
 8010862:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010864:	eb09 0703 	add.w	r7, r9, r3
 8010868:	4498      	add	r8, r3
 801086a:	9b06      	ldr	r3, [sp, #24]
 801086c:	45b9      	cmp	r9, r7
 801086e:	4498      	add	r8, r3
 8010870:	464b      	mov	r3, r9
 8010872:	bfa8      	it	ge
 8010874:	463b      	movge	r3, r7
 8010876:	4543      	cmp	r3, r8
 8010878:	bfa8      	it	ge
 801087a:	4643      	movge	r3, r8
 801087c:	2b00      	cmp	r3, #0
 801087e:	bfc2      	ittt	gt
 8010880:	1aff      	subgt	r7, r7, r3
 8010882:	eba8 0803 	subgt.w	r8, r8, r3
 8010886:	eba9 0903 	subgt.w	r9, r9, r3
 801088a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801088c:	2b00      	cmp	r3, #0
 801088e:	dd16      	ble.n	80108be <_strtod_l+0x71e>
 8010890:	4629      	mov	r1, r5
 8010892:	9805      	ldr	r0, [sp, #20]
 8010894:	461a      	mov	r2, r3
 8010896:	f7ff f9b7 	bl	800fc08 <__pow5mult>
 801089a:	4605      	mov	r5, r0
 801089c:	2800      	cmp	r0, #0
 801089e:	d0b5      	beq.n	801080c <_strtod_l+0x66c>
 80108a0:	4601      	mov	r1, r0
 80108a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80108a4:	9805      	ldr	r0, [sp, #20]
 80108a6:	f7ff f905 	bl	800fab4 <__multiply>
 80108aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80108ac:	2800      	cmp	r0, #0
 80108ae:	f43f ae87 	beq.w	80105c0 <_strtod_l+0x420>
 80108b2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80108b4:	9805      	ldr	r0, [sp, #20]
 80108b6:	f7fe ffe9 	bl	800f88c <_Bfree>
 80108ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80108be:	2f00      	cmp	r7, #0
 80108c0:	dc1b      	bgt.n	80108fa <_strtod_l+0x75a>
 80108c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	dd21      	ble.n	801090c <_strtod_l+0x76c>
 80108c8:	4631      	mov	r1, r6
 80108ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80108cc:	9805      	ldr	r0, [sp, #20]
 80108ce:	f7ff f99b 	bl	800fc08 <__pow5mult>
 80108d2:	4606      	mov	r6, r0
 80108d4:	b9d0      	cbnz	r0, 801090c <_strtod_l+0x76c>
 80108d6:	2600      	movs	r6, #0
 80108d8:	e672      	b.n	80105c0 <_strtod_l+0x420>
 80108da:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80108de:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80108e2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80108e6:	37e2      	adds	r7, #226	@ 0xe2
 80108e8:	fa02 f107 	lsl.w	r1, r2, r7
 80108ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80108ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80108f0:	e7b8      	b.n	8010864 <_strtod_l+0x6c4>
 80108f2:	2200      	movs	r2, #0
 80108f4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80108f6:	2201      	movs	r2, #1
 80108f8:	e7f9      	b.n	80108ee <_strtod_l+0x74e>
 80108fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80108fc:	9805      	ldr	r0, [sp, #20]
 80108fe:	463a      	mov	r2, r7
 8010900:	f7ff f9dc 	bl	800fcbc <__lshift>
 8010904:	9012      	str	r0, [sp, #72]	@ 0x48
 8010906:	2800      	cmp	r0, #0
 8010908:	d1db      	bne.n	80108c2 <_strtod_l+0x722>
 801090a:	e659      	b.n	80105c0 <_strtod_l+0x420>
 801090c:	f1b8 0f00 	cmp.w	r8, #0
 8010910:	dd07      	ble.n	8010922 <_strtod_l+0x782>
 8010912:	4631      	mov	r1, r6
 8010914:	9805      	ldr	r0, [sp, #20]
 8010916:	4642      	mov	r2, r8
 8010918:	f7ff f9d0 	bl	800fcbc <__lshift>
 801091c:	4606      	mov	r6, r0
 801091e:	2800      	cmp	r0, #0
 8010920:	d0d9      	beq.n	80108d6 <_strtod_l+0x736>
 8010922:	f1b9 0f00 	cmp.w	r9, #0
 8010926:	dd08      	ble.n	801093a <_strtod_l+0x79a>
 8010928:	4629      	mov	r1, r5
 801092a:	9805      	ldr	r0, [sp, #20]
 801092c:	464a      	mov	r2, r9
 801092e:	f7ff f9c5 	bl	800fcbc <__lshift>
 8010932:	4605      	mov	r5, r0
 8010934:	2800      	cmp	r0, #0
 8010936:	f43f ae43 	beq.w	80105c0 <_strtod_l+0x420>
 801093a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801093c:	9805      	ldr	r0, [sp, #20]
 801093e:	4632      	mov	r2, r6
 8010940:	f7ff fa44 	bl	800fdcc <__mdiff>
 8010944:	4604      	mov	r4, r0
 8010946:	2800      	cmp	r0, #0
 8010948:	f43f ae3a 	beq.w	80105c0 <_strtod_l+0x420>
 801094c:	2300      	movs	r3, #0
 801094e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010952:	60c3      	str	r3, [r0, #12]
 8010954:	4629      	mov	r1, r5
 8010956:	f7ff fa1d 	bl	800fd94 <__mcmp>
 801095a:	2800      	cmp	r0, #0
 801095c:	da4e      	bge.n	80109fc <_strtod_l+0x85c>
 801095e:	ea58 080a 	orrs.w	r8, r8, sl
 8010962:	d174      	bne.n	8010a4e <_strtod_l+0x8ae>
 8010964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010968:	2b00      	cmp	r3, #0
 801096a:	d170      	bne.n	8010a4e <_strtod_l+0x8ae>
 801096c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010970:	0d1b      	lsrs	r3, r3, #20
 8010972:	051b      	lsls	r3, r3, #20
 8010974:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010978:	d969      	bls.n	8010a4e <_strtod_l+0x8ae>
 801097a:	6963      	ldr	r3, [r4, #20]
 801097c:	b913      	cbnz	r3, 8010984 <_strtod_l+0x7e4>
 801097e:	6923      	ldr	r3, [r4, #16]
 8010980:	2b01      	cmp	r3, #1
 8010982:	dd64      	ble.n	8010a4e <_strtod_l+0x8ae>
 8010984:	4621      	mov	r1, r4
 8010986:	2201      	movs	r2, #1
 8010988:	9805      	ldr	r0, [sp, #20]
 801098a:	f7ff f997 	bl	800fcbc <__lshift>
 801098e:	4629      	mov	r1, r5
 8010990:	4604      	mov	r4, r0
 8010992:	f7ff f9ff 	bl	800fd94 <__mcmp>
 8010996:	2800      	cmp	r0, #0
 8010998:	dd59      	ble.n	8010a4e <_strtod_l+0x8ae>
 801099a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801099e:	9a06      	ldr	r2, [sp, #24]
 80109a0:	0d1b      	lsrs	r3, r3, #20
 80109a2:	051b      	lsls	r3, r3, #20
 80109a4:	2a00      	cmp	r2, #0
 80109a6:	d070      	beq.n	8010a8a <_strtod_l+0x8ea>
 80109a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80109ac:	d86d      	bhi.n	8010a8a <_strtod_l+0x8ea>
 80109ae:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80109b2:	f67f ae99 	bls.w	80106e8 <_strtod_l+0x548>
 80109b6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80109e8 <_strtod_l+0x848>
 80109ba:	ec4b ab16 	vmov	d6, sl, fp
 80109be:	4b0e      	ldr	r3, [pc, #56]	@ (80109f8 <_strtod_l+0x858>)
 80109c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80109c4:	ee17 2a90 	vmov	r2, s15
 80109c8:	4013      	ands	r3, r2
 80109ca:	ec5b ab17 	vmov	sl, fp, d7
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	f47f ae01 	bne.w	80105d6 <_strtod_l+0x436>
 80109d4:	9a05      	ldr	r2, [sp, #20]
 80109d6:	2322      	movs	r3, #34	@ 0x22
 80109d8:	6013      	str	r3, [r2, #0]
 80109da:	e5fc      	b.n	80105d6 <_strtod_l+0x436>
 80109dc:	f3af 8000 	nop.w
 80109e0:	ffc00000 	.word	0xffc00000
 80109e4:	41dfffff 	.word	0x41dfffff
 80109e8:	00000000 	.word	0x00000000
 80109ec:	39500000 	.word	0x39500000
 80109f0:	08012228 	.word	0x08012228
 80109f4:	fffffc02 	.word	0xfffffc02
 80109f8:	7ff00000 	.word	0x7ff00000
 80109fc:	46d9      	mov	r9, fp
 80109fe:	d15d      	bne.n	8010abc <_strtod_l+0x91c>
 8010a00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a04:	f1b8 0f00 	cmp.w	r8, #0
 8010a08:	d02a      	beq.n	8010a60 <_strtod_l+0x8c0>
 8010a0a:	4aab      	ldr	r2, [pc, #684]	@ (8010cb8 <_strtod_l+0xb18>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d12a      	bne.n	8010a66 <_strtod_l+0x8c6>
 8010a10:	9b06      	ldr	r3, [sp, #24]
 8010a12:	4652      	mov	r2, sl
 8010a14:	b1fb      	cbz	r3, 8010a56 <_strtod_l+0x8b6>
 8010a16:	4ba9      	ldr	r3, [pc, #676]	@ (8010cbc <_strtod_l+0xb1c>)
 8010a18:	ea0b 0303 	and.w	r3, fp, r3
 8010a1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010a20:	f04f 31ff 	mov.w	r1, #4294967295
 8010a24:	d81a      	bhi.n	8010a5c <_strtod_l+0x8bc>
 8010a26:	0d1b      	lsrs	r3, r3, #20
 8010a28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d118      	bne.n	8010a66 <_strtod_l+0x8c6>
 8010a34:	4ba2      	ldr	r3, [pc, #648]	@ (8010cc0 <_strtod_l+0xb20>)
 8010a36:	4599      	cmp	r9, r3
 8010a38:	d102      	bne.n	8010a40 <_strtod_l+0x8a0>
 8010a3a:	3201      	adds	r2, #1
 8010a3c:	f43f adc0 	beq.w	80105c0 <_strtod_l+0x420>
 8010a40:	4b9e      	ldr	r3, [pc, #632]	@ (8010cbc <_strtod_l+0xb1c>)
 8010a42:	ea09 0303 	and.w	r3, r9, r3
 8010a46:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8010a4a:	f04f 0a00 	mov.w	sl, #0
 8010a4e:	9b06      	ldr	r3, [sp, #24]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d1b0      	bne.n	80109b6 <_strtod_l+0x816>
 8010a54:	e5bf      	b.n	80105d6 <_strtod_l+0x436>
 8010a56:	f04f 33ff 	mov.w	r3, #4294967295
 8010a5a:	e7e9      	b.n	8010a30 <_strtod_l+0x890>
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	e7e7      	b.n	8010a30 <_strtod_l+0x890>
 8010a60:	ea53 030a 	orrs.w	r3, r3, sl
 8010a64:	d099      	beq.n	801099a <_strtod_l+0x7fa>
 8010a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a68:	b1c3      	cbz	r3, 8010a9c <_strtod_l+0x8fc>
 8010a6a:	ea13 0f09 	tst.w	r3, r9
 8010a6e:	d0ee      	beq.n	8010a4e <_strtod_l+0x8ae>
 8010a70:	9a06      	ldr	r2, [sp, #24]
 8010a72:	4650      	mov	r0, sl
 8010a74:	4659      	mov	r1, fp
 8010a76:	f1b8 0f00 	cmp.w	r8, #0
 8010a7a:	d013      	beq.n	8010aa4 <_strtod_l+0x904>
 8010a7c:	f7ff fb75 	bl	801016a <sulp>
 8010a80:	ee39 7b00 	vadd.f64	d7, d9, d0
 8010a84:	ec5b ab17 	vmov	sl, fp, d7
 8010a88:	e7e1      	b.n	8010a4e <_strtod_l+0x8ae>
 8010a8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010a8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010a92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010a96:	f04f 3aff 	mov.w	sl, #4294967295
 8010a9a:	e7d8      	b.n	8010a4e <_strtod_l+0x8ae>
 8010a9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a9e:	ea13 0f0a 	tst.w	r3, sl
 8010aa2:	e7e4      	b.n	8010a6e <_strtod_l+0x8ce>
 8010aa4:	f7ff fb61 	bl	801016a <sulp>
 8010aa8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010aac:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab4:	ec5b ab10 	vmov	sl, fp, d0
 8010ab8:	d1c9      	bne.n	8010a4e <_strtod_l+0x8ae>
 8010aba:	e615      	b.n	80106e8 <_strtod_l+0x548>
 8010abc:	4629      	mov	r1, r5
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f7ff fae0 	bl	8010084 <__ratio>
 8010ac4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8010ac8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad0:	d85d      	bhi.n	8010b8e <_strtod_l+0x9ee>
 8010ad2:	f1b8 0f00 	cmp.w	r8, #0
 8010ad6:	d164      	bne.n	8010ba2 <_strtod_l+0xa02>
 8010ad8:	f1ba 0f00 	cmp.w	sl, #0
 8010adc:	d14b      	bne.n	8010b76 <_strtod_l+0x9d6>
 8010ade:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ae2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d160      	bne.n	8010bac <_strtod_l+0xa0c>
 8010aea:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8010aee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af6:	d401      	bmi.n	8010afc <_strtod_l+0x95c>
 8010af8:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010afc:	eeb1 ab48 	vneg.f64	d10, d8
 8010b00:	486e      	ldr	r0, [pc, #440]	@ (8010cbc <_strtod_l+0xb1c>)
 8010b02:	4970      	ldr	r1, [pc, #448]	@ (8010cc4 <_strtod_l+0xb24>)
 8010b04:	ea09 0700 	and.w	r7, r9, r0
 8010b08:	428f      	cmp	r7, r1
 8010b0a:	ec53 2b1a 	vmov	r2, r3, d10
 8010b0e:	d17d      	bne.n	8010c0c <_strtod_l+0xa6c>
 8010b10:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8010b14:	ec4b ab1c 	vmov	d12, sl, fp
 8010b18:	eeb0 0b4c 	vmov.f64	d0, d12
 8010b1c:	f7ff f9ea 	bl	800fef4 <__ulp>
 8010b20:	4866      	ldr	r0, [pc, #408]	@ (8010cbc <_strtod_l+0xb1c>)
 8010b22:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8010b26:	ee1c 3a90 	vmov	r3, s25
 8010b2a:	4a67      	ldr	r2, [pc, #412]	@ (8010cc8 <_strtod_l+0xb28>)
 8010b2c:	ea03 0100 	and.w	r1, r3, r0
 8010b30:	4291      	cmp	r1, r2
 8010b32:	ec5b ab1c 	vmov	sl, fp, d12
 8010b36:	d93c      	bls.n	8010bb2 <_strtod_l+0xa12>
 8010b38:	ee19 2a90 	vmov	r2, s19
 8010b3c:	4b60      	ldr	r3, [pc, #384]	@ (8010cc0 <_strtod_l+0xb20>)
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d104      	bne.n	8010b4c <_strtod_l+0x9ac>
 8010b42:	ee19 3a10 	vmov	r3, s18
 8010b46:	3301      	adds	r3, #1
 8010b48:	f43f ad3a 	beq.w	80105c0 <_strtod_l+0x420>
 8010b4c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8010cc0 <_strtod_l+0xb20>
 8010b50:	f04f 3aff 	mov.w	sl, #4294967295
 8010b54:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010b56:	9805      	ldr	r0, [sp, #20]
 8010b58:	f7fe fe98 	bl	800f88c <_Bfree>
 8010b5c:	9805      	ldr	r0, [sp, #20]
 8010b5e:	4631      	mov	r1, r6
 8010b60:	f7fe fe94 	bl	800f88c <_Bfree>
 8010b64:	9805      	ldr	r0, [sp, #20]
 8010b66:	4629      	mov	r1, r5
 8010b68:	f7fe fe90 	bl	800f88c <_Bfree>
 8010b6c:	9805      	ldr	r0, [sp, #20]
 8010b6e:	4621      	mov	r1, r4
 8010b70:	f7fe fe8c 	bl	800f88c <_Bfree>
 8010b74:	e625      	b.n	80107c2 <_strtod_l+0x622>
 8010b76:	f1ba 0f01 	cmp.w	sl, #1
 8010b7a:	d103      	bne.n	8010b84 <_strtod_l+0x9e4>
 8010b7c:	f1bb 0f00 	cmp.w	fp, #0
 8010b80:	f43f adb2 	beq.w	80106e8 <_strtod_l+0x548>
 8010b84:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010b88:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010b8c:	e7b8      	b.n	8010b00 <_strtod_l+0x960>
 8010b8e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010b92:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010b96:	f1b8 0f00 	cmp.w	r8, #0
 8010b9a:	d0af      	beq.n	8010afc <_strtod_l+0x95c>
 8010b9c:	eeb0 ab48 	vmov.f64	d10, d8
 8010ba0:	e7ae      	b.n	8010b00 <_strtod_l+0x960>
 8010ba2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8010ba6:	eeb0 8b4a 	vmov.f64	d8, d10
 8010baa:	e7a9      	b.n	8010b00 <_strtod_l+0x960>
 8010bac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010bb0:	e7a6      	b.n	8010b00 <_strtod_l+0x960>
 8010bb2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010bb6:	9b06      	ldr	r3, [sp, #24]
 8010bb8:	46d9      	mov	r9, fp
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1ca      	bne.n	8010b54 <_strtod_l+0x9b4>
 8010bbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010bc2:	0d1b      	lsrs	r3, r3, #20
 8010bc4:	051b      	lsls	r3, r3, #20
 8010bc6:	429f      	cmp	r7, r3
 8010bc8:	d1c4      	bne.n	8010b54 <_strtod_l+0x9b4>
 8010bca:	ec51 0b18 	vmov	r0, r1, d8
 8010bce:	f7ef fdcb 	bl	8000768 <__aeabi_d2lz>
 8010bd2:	f7ef fd83 	bl	80006dc <__aeabi_l2d>
 8010bd6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8010bda:	ec41 0b17 	vmov	d7, r0, r1
 8010bde:	ea49 090a 	orr.w	r9, r9, sl
 8010be2:	ea59 0908 	orrs.w	r9, r9, r8
 8010be6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010bea:	d03c      	beq.n	8010c66 <_strtod_l+0xac6>
 8010bec:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010ca0 <_strtod_l+0xb00>
 8010bf0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf8:	f53f aced 	bmi.w	80105d6 <_strtod_l+0x436>
 8010bfc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010ca8 <_strtod_l+0xb08>
 8010c00:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c08:	dda4      	ble.n	8010b54 <_strtod_l+0x9b4>
 8010c0a:	e4e4      	b.n	80105d6 <_strtod_l+0x436>
 8010c0c:	9906      	ldr	r1, [sp, #24]
 8010c0e:	b1e1      	cbz	r1, 8010c4a <_strtod_l+0xaaa>
 8010c10:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8010c14:	d819      	bhi.n	8010c4a <_strtod_l+0xaaa>
 8010c16:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8010c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1e:	d811      	bhi.n	8010c44 <_strtod_l+0xaa4>
 8010c20:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8010c24:	ee18 3a10 	vmov	r3, s16
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	bf38      	it	cc
 8010c2c:	2301      	movcc	r3, #1
 8010c2e:	ee08 3a10 	vmov	s16, r3
 8010c32:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8010c36:	f1b8 0f00 	cmp.w	r8, #0
 8010c3a:	d111      	bne.n	8010c60 <_strtod_l+0xac0>
 8010c3c:	eeb1 7b48 	vneg.f64	d7, d8
 8010c40:	ec53 2b17 	vmov	r2, r3, d7
 8010c44:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8010c48:	1bcb      	subs	r3, r1, r7
 8010c4a:	eeb0 0b49 	vmov.f64	d0, d9
 8010c4e:	ec43 2b1a 	vmov	d10, r2, r3
 8010c52:	f7ff f94f 	bl	800fef4 <__ulp>
 8010c56:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8010c5a:	ec5b ab19 	vmov	sl, fp, d9
 8010c5e:	e7aa      	b.n	8010bb6 <_strtod_l+0xa16>
 8010c60:	eeb0 7b48 	vmov.f64	d7, d8
 8010c64:	e7ec      	b.n	8010c40 <_strtod_l+0xaa0>
 8010c66:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8010cb0 <_strtod_l+0xb10>
 8010c6a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c72:	f57f af6f 	bpl.w	8010b54 <_strtod_l+0x9b4>
 8010c76:	e4ae      	b.n	80105d6 <_strtod_l+0x436>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	9308      	str	r3, [sp, #32]
 8010c7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c80:	6013      	str	r3, [r2, #0]
 8010c82:	f7ff bacc 	b.w	801021e <_strtod_l+0x7e>
 8010c86:	2a65      	cmp	r2, #101	@ 0x65
 8010c88:	f43f abbc 	beq.w	8010404 <_strtod_l+0x264>
 8010c8c:	2a45      	cmp	r2, #69	@ 0x45
 8010c8e:	f43f abb9 	beq.w	8010404 <_strtod_l+0x264>
 8010c92:	2301      	movs	r3, #1
 8010c94:	9306      	str	r3, [sp, #24]
 8010c96:	f7ff bbf0 	b.w	801047a <_strtod_l+0x2da>
 8010c9a:	bf00      	nop
 8010c9c:	f3af 8000 	nop.w
 8010ca0:	94a03595 	.word	0x94a03595
 8010ca4:	3fdfffff 	.word	0x3fdfffff
 8010ca8:	35afe535 	.word	0x35afe535
 8010cac:	3fe00000 	.word	0x3fe00000
 8010cb0:	94a03595 	.word	0x94a03595
 8010cb4:	3fcfffff 	.word	0x3fcfffff
 8010cb8:	000fffff 	.word	0x000fffff
 8010cbc:	7ff00000 	.word	0x7ff00000
 8010cc0:	7fefffff 	.word	0x7fefffff
 8010cc4:	7fe00000 	.word	0x7fe00000
 8010cc8:	7c9fffff 	.word	0x7c9fffff

08010ccc <_strtod_r>:
 8010ccc:	4b01      	ldr	r3, [pc, #4]	@ (8010cd4 <_strtod_r+0x8>)
 8010cce:	f7ff ba67 	b.w	80101a0 <_strtod_l>
 8010cd2:	bf00      	nop
 8010cd4:	24000078 	.word	0x24000078

08010cd8 <_strtol_l.constprop.0>:
 8010cd8:	2b24      	cmp	r3, #36	@ 0x24
 8010cda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cde:	4686      	mov	lr, r0
 8010ce0:	4690      	mov	r8, r2
 8010ce2:	d801      	bhi.n	8010ce8 <_strtol_l.constprop.0+0x10>
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d106      	bne.n	8010cf6 <_strtol_l.constprop.0+0x1e>
 8010ce8:	f7fd fe6e 	bl	800e9c8 <__errno>
 8010cec:	2316      	movs	r3, #22
 8010cee:	6003      	str	r3, [r0, #0]
 8010cf0:	2000      	movs	r0, #0
 8010cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cf6:	4834      	ldr	r0, [pc, #208]	@ (8010dc8 <_strtol_l.constprop.0+0xf0>)
 8010cf8:	460d      	mov	r5, r1
 8010cfa:	462a      	mov	r2, r5
 8010cfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d00:	5d06      	ldrb	r6, [r0, r4]
 8010d02:	f016 0608 	ands.w	r6, r6, #8
 8010d06:	d1f8      	bne.n	8010cfa <_strtol_l.constprop.0+0x22>
 8010d08:	2c2d      	cmp	r4, #45	@ 0x2d
 8010d0a:	d12d      	bne.n	8010d68 <_strtol_l.constprop.0+0x90>
 8010d0c:	782c      	ldrb	r4, [r5, #0]
 8010d0e:	2601      	movs	r6, #1
 8010d10:	1c95      	adds	r5, r2, #2
 8010d12:	f033 0210 	bics.w	r2, r3, #16
 8010d16:	d109      	bne.n	8010d2c <_strtol_l.constprop.0+0x54>
 8010d18:	2c30      	cmp	r4, #48	@ 0x30
 8010d1a:	d12a      	bne.n	8010d72 <_strtol_l.constprop.0+0x9a>
 8010d1c:	782a      	ldrb	r2, [r5, #0]
 8010d1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010d22:	2a58      	cmp	r2, #88	@ 0x58
 8010d24:	d125      	bne.n	8010d72 <_strtol_l.constprop.0+0x9a>
 8010d26:	786c      	ldrb	r4, [r5, #1]
 8010d28:	2310      	movs	r3, #16
 8010d2a:	3502      	adds	r5, #2
 8010d2c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010d30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010d34:	2200      	movs	r2, #0
 8010d36:	fbbc f9f3 	udiv	r9, ip, r3
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8010d40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010d44:	2f09      	cmp	r7, #9
 8010d46:	d81b      	bhi.n	8010d80 <_strtol_l.constprop.0+0xa8>
 8010d48:	463c      	mov	r4, r7
 8010d4a:	42a3      	cmp	r3, r4
 8010d4c:	dd27      	ble.n	8010d9e <_strtol_l.constprop.0+0xc6>
 8010d4e:	1c57      	adds	r7, r2, #1
 8010d50:	d007      	beq.n	8010d62 <_strtol_l.constprop.0+0x8a>
 8010d52:	4581      	cmp	r9, r0
 8010d54:	d320      	bcc.n	8010d98 <_strtol_l.constprop.0+0xc0>
 8010d56:	d101      	bne.n	8010d5c <_strtol_l.constprop.0+0x84>
 8010d58:	45a2      	cmp	sl, r4
 8010d5a:	db1d      	blt.n	8010d98 <_strtol_l.constprop.0+0xc0>
 8010d5c:	fb00 4003 	mla	r0, r0, r3, r4
 8010d60:	2201      	movs	r2, #1
 8010d62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d66:	e7eb      	b.n	8010d40 <_strtol_l.constprop.0+0x68>
 8010d68:	2c2b      	cmp	r4, #43	@ 0x2b
 8010d6a:	bf04      	itt	eq
 8010d6c:	782c      	ldrbeq	r4, [r5, #0]
 8010d6e:	1c95      	addeq	r5, r2, #2
 8010d70:	e7cf      	b.n	8010d12 <_strtol_l.constprop.0+0x3a>
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1da      	bne.n	8010d2c <_strtol_l.constprop.0+0x54>
 8010d76:	2c30      	cmp	r4, #48	@ 0x30
 8010d78:	bf0c      	ite	eq
 8010d7a:	2308      	moveq	r3, #8
 8010d7c:	230a      	movne	r3, #10
 8010d7e:	e7d5      	b.n	8010d2c <_strtol_l.constprop.0+0x54>
 8010d80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010d84:	2f19      	cmp	r7, #25
 8010d86:	d801      	bhi.n	8010d8c <_strtol_l.constprop.0+0xb4>
 8010d88:	3c37      	subs	r4, #55	@ 0x37
 8010d8a:	e7de      	b.n	8010d4a <_strtol_l.constprop.0+0x72>
 8010d8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010d90:	2f19      	cmp	r7, #25
 8010d92:	d804      	bhi.n	8010d9e <_strtol_l.constprop.0+0xc6>
 8010d94:	3c57      	subs	r4, #87	@ 0x57
 8010d96:	e7d8      	b.n	8010d4a <_strtol_l.constprop.0+0x72>
 8010d98:	f04f 32ff 	mov.w	r2, #4294967295
 8010d9c:	e7e1      	b.n	8010d62 <_strtol_l.constprop.0+0x8a>
 8010d9e:	1c53      	adds	r3, r2, #1
 8010da0:	d108      	bne.n	8010db4 <_strtol_l.constprop.0+0xdc>
 8010da2:	2322      	movs	r3, #34	@ 0x22
 8010da4:	f8ce 3000 	str.w	r3, [lr]
 8010da8:	4660      	mov	r0, ip
 8010daa:	f1b8 0f00 	cmp.w	r8, #0
 8010dae:	d0a0      	beq.n	8010cf2 <_strtol_l.constprop.0+0x1a>
 8010db0:	1e69      	subs	r1, r5, #1
 8010db2:	e006      	b.n	8010dc2 <_strtol_l.constprop.0+0xea>
 8010db4:	b106      	cbz	r6, 8010db8 <_strtol_l.constprop.0+0xe0>
 8010db6:	4240      	negs	r0, r0
 8010db8:	f1b8 0f00 	cmp.w	r8, #0
 8010dbc:	d099      	beq.n	8010cf2 <_strtol_l.constprop.0+0x1a>
 8010dbe:	2a00      	cmp	r2, #0
 8010dc0:	d1f6      	bne.n	8010db0 <_strtol_l.constprop.0+0xd8>
 8010dc2:	f8c8 1000 	str.w	r1, [r8]
 8010dc6:	e794      	b.n	8010cf2 <_strtol_l.constprop.0+0x1a>
 8010dc8:	08012251 	.word	0x08012251

08010dcc <_strtol_r>:
 8010dcc:	f7ff bf84 	b.w	8010cd8 <_strtol_l.constprop.0>

08010dd0 <__ssputs_r>:
 8010dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd4:	688e      	ldr	r6, [r1, #8]
 8010dd6:	461f      	mov	r7, r3
 8010dd8:	42be      	cmp	r6, r7
 8010dda:	680b      	ldr	r3, [r1, #0]
 8010ddc:	4682      	mov	sl, r0
 8010dde:	460c      	mov	r4, r1
 8010de0:	4690      	mov	r8, r2
 8010de2:	d82d      	bhi.n	8010e40 <__ssputs_r+0x70>
 8010de4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010de8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010dec:	d026      	beq.n	8010e3c <__ssputs_r+0x6c>
 8010dee:	6965      	ldr	r5, [r4, #20]
 8010df0:	6909      	ldr	r1, [r1, #16]
 8010df2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010df6:	eba3 0901 	sub.w	r9, r3, r1
 8010dfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010dfe:	1c7b      	adds	r3, r7, #1
 8010e00:	444b      	add	r3, r9
 8010e02:	106d      	asrs	r5, r5, #1
 8010e04:	429d      	cmp	r5, r3
 8010e06:	bf38      	it	cc
 8010e08:	461d      	movcc	r5, r3
 8010e0a:	0553      	lsls	r3, r2, #21
 8010e0c:	d527      	bpl.n	8010e5e <__ssputs_r+0x8e>
 8010e0e:	4629      	mov	r1, r5
 8010e10:	f7fe fc70 	bl	800f6f4 <_malloc_r>
 8010e14:	4606      	mov	r6, r0
 8010e16:	b360      	cbz	r0, 8010e72 <__ssputs_r+0xa2>
 8010e18:	6921      	ldr	r1, [r4, #16]
 8010e1a:	464a      	mov	r2, r9
 8010e1c:	f7fd fe01 	bl	800ea22 <memcpy>
 8010e20:	89a3      	ldrh	r3, [r4, #12]
 8010e22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e2a:	81a3      	strh	r3, [r4, #12]
 8010e2c:	6126      	str	r6, [r4, #16]
 8010e2e:	6165      	str	r5, [r4, #20]
 8010e30:	444e      	add	r6, r9
 8010e32:	eba5 0509 	sub.w	r5, r5, r9
 8010e36:	6026      	str	r6, [r4, #0]
 8010e38:	60a5      	str	r5, [r4, #8]
 8010e3a:	463e      	mov	r6, r7
 8010e3c:	42be      	cmp	r6, r7
 8010e3e:	d900      	bls.n	8010e42 <__ssputs_r+0x72>
 8010e40:	463e      	mov	r6, r7
 8010e42:	6820      	ldr	r0, [r4, #0]
 8010e44:	4632      	mov	r2, r6
 8010e46:	4641      	mov	r1, r8
 8010e48:	f000 fb6a 	bl	8011520 <memmove>
 8010e4c:	68a3      	ldr	r3, [r4, #8]
 8010e4e:	1b9b      	subs	r3, r3, r6
 8010e50:	60a3      	str	r3, [r4, #8]
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	4433      	add	r3, r6
 8010e56:	6023      	str	r3, [r4, #0]
 8010e58:	2000      	movs	r0, #0
 8010e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e5e:	462a      	mov	r2, r5
 8010e60:	f000 ff43 	bl	8011cea <_realloc_r>
 8010e64:	4606      	mov	r6, r0
 8010e66:	2800      	cmp	r0, #0
 8010e68:	d1e0      	bne.n	8010e2c <__ssputs_r+0x5c>
 8010e6a:	6921      	ldr	r1, [r4, #16]
 8010e6c:	4650      	mov	r0, sl
 8010e6e:	f7fe fbcd 	bl	800f60c <_free_r>
 8010e72:	230c      	movs	r3, #12
 8010e74:	f8ca 3000 	str.w	r3, [sl]
 8010e78:	89a3      	ldrh	r3, [r4, #12]
 8010e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e7e:	81a3      	strh	r3, [r4, #12]
 8010e80:	f04f 30ff 	mov.w	r0, #4294967295
 8010e84:	e7e9      	b.n	8010e5a <__ssputs_r+0x8a>
	...

08010e88 <_svfiprintf_r>:
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	4698      	mov	r8, r3
 8010e8e:	898b      	ldrh	r3, [r1, #12]
 8010e90:	061b      	lsls	r3, r3, #24
 8010e92:	b09d      	sub	sp, #116	@ 0x74
 8010e94:	4607      	mov	r7, r0
 8010e96:	460d      	mov	r5, r1
 8010e98:	4614      	mov	r4, r2
 8010e9a:	d510      	bpl.n	8010ebe <_svfiprintf_r+0x36>
 8010e9c:	690b      	ldr	r3, [r1, #16]
 8010e9e:	b973      	cbnz	r3, 8010ebe <_svfiprintf_r+0x36>
 8010ea0:	2140      	movs	r1, #64	@ 0x40
 8010ea2:	f7fe fc27 	bl	800f6f4 <_malloc_r>
 8010ea6:	6028      	str	r0, [r5, #0]
 8010ea8:	6128      	str	r0, [r5, #16]
 8010eaa:	b930      	cbnz	r0, 8010eba <_svfiprintf_r+0x32>
 8010eac:	230c      	movs	r3, #12
 8010eae:	603b      	str	r3, [r7, #0]
 8010eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb4:	b01d      	add	sp, #116	@ 0x74
 8010eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eba:	2340      	movs	r3, #64	@ 0x40
 8010ebc:	616b      	str	r3, [r5, #20]
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ec2:	2320      	movs	r3, #32
 8010ec4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ec8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ecc:	2330      	movs	r3, #48	@ 0x30
 8010ece:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801106c <_svfiprintf_r+0x1e4>
 8010ed2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ed6:	f04f 0901 	mov.w	r9, #1
 8010eda:	4623      	mov	r3, r4
 8010edc:	469a      	mov	sl, r3
 8010ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ee2:	b10a      	cbz	r2, 8010ee8 <_svfiprintf_r+0x60>
 8010ee4:	2a25      	cmp	r2, #37	@ 0x25
 8010ee6:	d1f9      	bne.n	8010edc <_svfiprintf_r+0x54>
 8010ee8:	ebba 0b04 	subs.w	fp, sl, r4
 8010eec:	d00b      	beq.n	8010f06 <_svfiprintf_r+0x7e>
 8010eee:	465b      	mov	r3, fp
 8010ef0:	4622      	mov	r2, r4
 8010ef2:	4629      	mov	r1, r5
 8010ef4:	4638      	mov	r0, r7
 8010ef6:	f7ff ff6b 	bl	8010dd0 <__ssputs_r>
 8010efa:	3001      	adds	r0, #1
 8010efc:	f000 80a7 	beq.w	801104e <_svfiprintf_r+0x1c6>
 8010f00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f02:	445a      	add	r2, fp
 8010f04:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f06:	f89a 3000 	ldrb.w	r3, [sl]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	f000 809f 	beq.w	801104e <_svfiprintf_r+0x1c6>
 8010f10:	2300      	movs	r3, #0
 8010f12:	f04f 32ff 	mov.w	r2, #4294967295
 8010f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f1a:	f10a 0a01 	add.w	sl, sl, #1
 8010f1e:	9304      	str	r3, [sp, #16]
 8010f20:	9307      	str	r3, [sp, #28]
 8010f22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f26:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f28:	4654      	mov	r4, sl
 8010f2a:	2205      	movs	r2, #5
 8010f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f30:	484e      	ldr	r0, [pc, #312]	@ (801106c <_svfiprintf_r+0x1e4>)
 8010f32:	f7ef f9ed 	bl	8000310 <memchr>
 8010f36:	9a04      	ldr	r2, [sp, #16]
 8010f38:	b9d8      	cbnz	r0, 8010f72 <_svfiprintf_r+0xea>
 8010f3a:	06d0      	lsls	r0, r2, #27
 8010f3c:	bf44      	itt	mi
 8010f3e:	2320      	movmi	r3, #32
 8010f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f44:	0711      	lsls	r1, r2, #28
 8010f46:	bf44      	itt	mi
 8010f48:	232b      	movmi	r3, #43	@ 0x2b
 8010f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8010f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f54:	d015      	beq.n	8010f82 <_svfiprintf_r+0xfa>
 8010f56:	9a07      	ldr	r2, [sp, #28]
 8010f58:	4654      	mov	r4, sl
 8010f5a:	2000      	movs	r0, #0
 8010f5c:	f04f 0c0a 	mov.w	ip, #10
 8010f60:	4621      	mov	r1, r4
 8010f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f66:	3b30      	subs	r3, #48	@ 0x30
 8010f68:	2b09      	cmp	r3, #9
 8010f6a:	d94b      	bls.n	8011004 <_svfiprintf_r+0x17c>
 8010f6c:	b1b0      	cbz	r0, 8010f9c <_svfiprintf_r+0x114>
 8010f6e:	9207      	str	r2, [sp, #28]
 8010f70:	e014      	b.n	8010f9c <_svfiprintf_r+0x114>
 8010f72:	eba0 0308 	sub.w	r3, r0, r8
 8010f76:	fa09 f303 	lsl.w	r3, r9, r3
 8010f7a:	4313      	orrs	r3, r2
 8010f7c:	9304      	str	r3, [sp, #16]
 8010f7e:	46a2      	mov	sl, r4
 8010f80:	e7d2      	b.n	8010f28 <_svfiprintf_r+0xa0>
 8010f82:	9b03      	ldr	r3, [sp, #12]
 8010f84:	1d19      	adds	r1, r3, #4
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	9103      	str	r1, [sp, #12]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	bfbb      	ittet	lt
 8010f8e:	425b      	neglt	r3, r3
 8010f90:	f042 0202 	orrlt.w	r2, r2, #2
 8010f94:	9307      	strge	r3, [sp, #28]
 8010f96:	9307      	strlt	r3, [sp, #28]
 8010f98:	bfb8      	it	lt
 8010f9a:	9204      	strlt	r2, [sp, #16]
 8010f9c:	7823      	ldrb	r3, [r4, #0]
 8010f9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010fa0:	d10a      	bne.n	8010fb8 <_svfiprintf_r+0x130>
 8010fa2:	7863      	ldrb	r3, [r4, #1]
 8010fa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fa6:	d132      	bne.n	801100e <_svfiprintf_r+0x186>
 8010fa8:	9b03      	ldr	r3, [sp, #12]
 8010faa:	1d1a      	adds	r2, r3, #4
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	9203      	str	r2, [sp, #12]
 8010fb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010fb4:	3402      	adds	r4, #2
 8010fb6:	9305      	str	r3, [sp, #20]
 8010fb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801107c <_svfiprintf_r+0x1f4>
 8010fbc:	7821      	ldrb	r1, [r4, #0]
 8010fbe:	2203      	movs	r2, #3
 8010fc0:	4650      	mov	r0, sl
 8010fc2:	f7ef f9a5 	bl	8000310 <memchr>
 8010fc6:	b138      	cbz	r0, 8010fd8 <_svfiprintf_r+0x150>
 8010fc8:	9b04      	ldr	r3, [sp, #16]
 8010fca:	eba0 000a 	sub.w	r0, r0, sl
 8010fce:	2240      	movs	r2, #64	@ 0x40
 8010fd0:	4082      	lsls	r2, r0
 8010fd2:	4313      	orrs	r3, r2
 8010fd4:	3401      	adds	r4, #1
 8010fd6:	9304      	str	r3, [sp, #16]
 8010fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fdc:	4824      	ldr	r0, [pc, #144]	@ (8011070 <_svfiprintf_r+0x1e8>)
 8010fde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010fe2:	2206      	movs	r2, #6
 8010fe4:	f7ef f994 	bl	8000310 <memchr>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	d036      	beq.n	801105a <_svfiprintf_r+0x1d2>
 8010fec:	4b21      	ldr	r3, [pc, #132]	@ (8011074 <_svfiprintf_r+0x1ec>)
 8010fee:	bb1b      	cbnz	r3, 8011038 <_svfiprintf_r+0x1b0>
 8010ff0:	9b03      	ldr	r3, [sp, #12]
 8010ff2:	3307      	adds	r3, #7
 8010ff4:	f023 0307 	bic.w	r3, r3, #7
 8010ff8:	3308      	adds	r3, #8
 8010ffa:	9303      	str	r3, [sp, #12]
 8010ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ffe:	4433      	add	r3, r6
 8011000:	9309      	str	r3, [sp, #36]	@ 0x24
 8011002:	e76a      	b.n	8010eda <_svfiprintf_r+0x52>
 8011004:	fb0c 3202 	mla	r2, ip, r2, r3
 8011008:	460c      	mov	r4, r1
 801100a:	2001      	movs	r0, #1
 801100c:	e7a8      	b.n	8010f60 <_svfiprintf_r+0xd8>
 801100e:	2300      	movs	r3, #0
 8011010:	3401      	adds	r4, #1
 8011012:	9305      	str	r3, [sp, #20]
 8011014:	4619      	mov	r1, r3
 8011016:	f04f 0c0a 	mov.w	ip, #10
 801101a:	4620      	mov	r0, r4
 801101c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011020:	3a30      	subs	r2, #48	@ 0x30
 8011022:	2a09      	cmp	r2, #9
 8011024:	d903      	bls.n	801102e <_svfiprintf_r+0x1a6>
 8011026:	2b00      	cmp	r3, #0
 8011028:	d0c6      	beq.n	8010fb8 <_svfiprintf_r+0x130>
 801102a:	9105      	str	r1, [sp, #20]
 801102c:	e7c4      	b.n	8010fb8 <_svfiprintf_r+0x130>
 801102e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011032:	4604      	mov	r4, r0
 8011034:	2301      	movs	r3, #1
 8011036:	e7f0      	b.n	801101a <_svfiprintf_r+0x192>
 8011038:	ab03      	add	r3, sp, #12
 801103a:	9300      	str	r3, [sp, #0]
 801103c:	462a      	mov	r2, r5
 801103e:	4b0e      	ldr	r3, [pc, #56]	@ (8011078 <_svfiprintf_r+0x1f0>)
 8011040:	a904      	add	r1, sp, #16
 8011042:	4638      	mov	r0, r7
 8011044:	f7fc fc90 	bl	800d968 <_printf_float>
 8011048:	1c42      	adds	r2, r0, #1
 801104a:	4606      	mov	r6, r0
 801104c:	d1d6      	bne.n	8010ffc <_svfiprintf_r+0x174>
 801104e:	89ab      	ldrh	r3, [r5, #12]
 8011050:	065b      	lsls	r3, r3, #25
 8011052:	f53f af2d 	bmi.w	8010eb0 <_svfiprintf_r+0x28>
 8011056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011058:	e72c      	b.n	8010eb4 <_svfiprintf_r+0x2c>
 801105a:	ab03      	add	r3, sp, #12
 801105c:	9300      	str	r3, [sp, #0]
 801105e:	462a      	mov	r2, r5
 8011060:	4b05      	ldr	r3, [pc, #20]	@ (8011078 <_svfiprintf_r+0x1f0>)
 8011062:	a904      	add	r1, sp, #16
 8011064:	4638      	mov	r0, r7
 8011066:	f7fc ff07 	bl	800de78 <_printf_i>
 801106a:	e7ed      	b.n	8011048 <_svfiprintf_r+0x1c0>
 801106c:	08012351 	.word	0x08012351
 8011070:	0801235b 	.word	0x0801235b
 8011074:	0800d969 	.word	0x0800d969
 8011078:	08010dd1 	.word	0x08010dd1
 801107c:	08012357 	.word	0x08012357

08011080 <__sfputc_r>:
 8011080:	6893      	ldr	r3, [r2, #8]
 8011082:	3b01      	subs	r3, #1
 8011084:	2b00      	cmp	r3, #0
 8011086:	b410      	push	{r4}
 8011088:	6093      	str	r3, [r2, #8]
 801108a:	da08      	bge.n	801109e <__sfputc_r+0x1e>
 801108c:	6994      	ldr	r4, [r2, #24]
 801108e:	42a3      	cmp	r3, r4
 8011090:	db01      	blt.n	8011096 <__sfputc_r+0x16>
 8011092:	290a      	cmp	r1, #10
 8011094:	d103      	bne.n	801109e <__sfputc_r+0x1e>
 8011096:	f85d 4b04 	ldr.w	r4, [sp], #4
 801109a:	f7fd bbae 	b.w	800e7fa <__swbuf_r>
 801109e:	6813      	ldr	r3, [r2, #0]
 80110a0:	1c58      	adds	r0, r3, #1
 80110a2:	6010      	str	r0, [r2, #0]
 80110a4:	7019      	strb	r1, [r3, #0]
 80110a6:	4608      	mov	r0, r1
 80110a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110ac:	4770      	bx	lr

080110ae <__sfputs_r>:
 80110ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110b0:	4606      	mov	r6, r0
 80110b2:	460f      	mov	r7, r1
 80110b4:	4614      	mov	r4, r2
 80110b6:	18d5      	adds	r5, r2, r3
 80110b8:	42ac      	cmp	r4, r5
 80110ba:	d101      	bne.n	80110c0 <__sfputs_r+0x12>
 80110bc:	2000      	movs	r0, #0
 80110be:	e007      	b.n	80110d0 <__sfputs_r+0x22>
 80110c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110c4:	463a      	mov	r2, r7
 80110c6:	4630      	mov	r0, r6
 80110c8:	f7ff ffda 	bl	8011080 <__sfputc_r>
 80110cc:	1c43      	adds	r3, r0, #1
 80110ce:	d1f3      	bne.n	80110b8 <__sfputs_r+0xa>
 80110d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110d4 <_vfiprintf_r>:
 80110d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d8:	460d      	mov	r5, r1
 80110da:	b09d      	sub	sp, #116	@ 0x74
 80110dc:	4614      	mov	r4, r2
 80110de:	4698      	mov	r8, r3
 80110e0:	4606      	mov	r6, r0
 80110e2:	b118      	cbz	r0, 80110ec <_vfiprintf_r+0x18>
 80110e4:	6a03      	ldr	r3, [r0, #32]
 80110e6:	b90b      	cbnz	r3, 80110ec <_vfiprintf_r+0x18>
 80110e8:	f7fd fa7e 	bl	800e5e8 <__sinit>
 80110ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110ee:	07d9      	lsls	r1, r3, #31
 80110f0:	d405      	bmi.n	80110fe <_vfiprintf_r+0x2a>
 80110f2:	89ab      	ldrh	r3, [r5, #12]
 80110f4:	059a      	lsls	r2, r3, #22
 80110f6:	d402      	bmi.n	80110fe <_vfiprintf_r+0x2a>
 80110f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110fa:	f7fd fc90 	bl	800ea1e <__retarget_lock_acquire_recursive>
 80110fe:	89ab      	ldrh	r3, [r5, #12]
 8011100:	071b      	lsls	r3, r3, #28
 8011102:	d501      	bpl.n	8011108 <_vfiprintf_r+0x34>
 8011104:	692b      	ldr	r3, [r5, #16]
 8011106:	b99b      	cbnz	r3, 8011130 <_vfiprintf_r+0x5c>
 8011108:	4629      	mov	r1, r5
 801110a:	4630      	mov	r0, r6
 801110c:	f7fd fbb4 	bl	800e878 <__swsetup_r>
 8011110:	b170      	cbz	r0, 8011130 <_vfiprintf_r+0x5c>
 8011112:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011114:	07dc      	lsls	r4, r3, #31
 8011116:	d504      	bpl.n	8011122 <_vfiprintf_r+0x4e>
 8011118:	f04f 30ff 	mov.w	r0, #4294967295
 801111c:	b01d      	add	sp, #116	@ 0x74
 801111e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011122:	89ab      	ldrh	r3, [r5, #12]
 8011124:	0598      	lsls	r0, r3, #22
 8011126:	d4f7      	bmi.n	8011118 <_vfiprintf_r+0x44>
 8011128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801112a:	f7fd fc79 	bl	800ea20 <__retarget_lock_release_recursive>
 801112e:	e7f3      	b.n	8011118 <_vfiprintf_r+0x44>
 8011130:	2300      	movs	r3, #0
 8011132:	9309      	str	r3, [sp, #36]	@ 0x24
 8011134:	2320      	movs	r3, #32
 8011136:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801113a:	f8cd 800c 	str.w	r8, [sp, #12]
 801113e:	2330      	movs	r3, #48	@ 0x30
 8011140:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80112f0 <_vfiprintf_r+0x21c>
 8011144:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011148:	f04f 0901 	mov.w	r9, #1
 801114c:	4623      	mov	r3, r4
 801114e:	469a      	mov	sl, r3
 8011150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011154:	b10a      	cbz	r2, 801115a <_vfiprintf_r+0x86>
 8011156:	2a25      	cmp	r2, #37	@ 0x25
 8011158:	d1f9      	bne.n	801114e <_vfiprintf_r+0x7a>
 801115a:	ebba 0b04 	subs.w	fp, sl, r4
 801115e:	d00b      	beq.n	8011178 <_vfiprintf_r+0xa4>
 8011160:	465b      	mov	r3, fp
 8011162:	4622      	mov	r2, r4
 8011164:	4629      	mov	r1, r5
 8011166:	4630      	mov	r0, r6
 8011168:	f7ff ffa1 	bl	80110ae <__sfputs_r>
 801116c:	3001      	adds	r0, #1
 801116e:	f000 80a7 	beq.w	80112c0 <_vfiprintf_r+0x1ec>
 8011172:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011174:	445a      	add	r2, fp
 8011176:	9209      	str	r2, [sp, #36]	@ 0x24
 8011178:	f89a 3000 	ldrb.w	r3, [sl]
 801117c:	2b00      	cmp	r3, #0
 801117e:	f000 809f 	beq.w	80112c0 <_vfiprintf_r+0x1ec>
 8011182:	2300      	movs	r3, #0
 8011184:	f04f 32ff 	mov.w	r2, #4294967295
 8011188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801118c:	f10a 0a01 	add.w	sl, sl, #1
 8011190:	9304      	str	r3, [sp, #16]
 8011192:	9307      	str	r3, [sp, #28]
 8011194:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011198:	931a      	str	r3, [sp, #104]	@ 0x68
 801119a:	4654      	mov	r4, sl
 801119c:	2205      	movs	r2, #5
 801119e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111a2:	4853      	ldr	r0, [pc, #332]	@ (80112f0 <_vfiprintf_r+0x21c>)
 80111a4:	f7ef f8b4 	bl	8000310 <memchr>
 80111a8:	9a04      	ldr	r2, [sp, #16]
 80111aa:	b9d8      	cbnz	r0, 80111e4 <_vfiprintf_r+0x110>
 80111ac:	06d1      	lsls	r1, r2, #27
 80111ae:	bf44      	itt	mi
 80111b0:	2320      	movmi	r3, #32
 80111b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111b6:	0713      	lsls	r3, r2, #28
 80111b8:	bf44      	itt	mi
 80111ba:	232b      	movmi	r3, #43	@ 0x2b
 80111bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111c0:	f89a 3000 	ldrb.w	r3, [sl]
 80111c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80111c6:	d015      	beq.n	80111f4 <_vfiprintf_r+0x120>
 80111c8:	9a07      	ldr	r2, [sp, #28]
 80111ca:	4654      	mov	r4, sl
 80111cc:	2000      	movs	r0, #0
 80111ce:	f04f 0c0a 	mov.w	ip, #10
 80111d2:	4621      	mov	r1, r4
 80111d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111d8:	3b30      	subs	r3, #48	@ 0x30
 80111da:	2b09      	cmp	r3, #9
 80111dc:	d94b      	bls.n	8011276 <_vfiprintf_r+0x1a2>
 80111de:	b1b0      	cbz	r0, 801120e <_vfiprintf_r+0x13a>
 80111e0:	9207      	str	r2, [sp, #28]
 80111e2:	e014      	b.n	801120e <_vfiprintf_r+0x13a>
 80111e4:	eba0 0308 	sub.w	r3, r0, r8
 80111e8:	fa09 f303 	lsl.w	r3, r9, r3
 80111ec:	4313      	orrs	r3, r2
 80111ee:	9304      	str	r3, [sp, #16]
 80111f0:	46a2      	mov	sl, r4
 80111f2:	e7d2      	b.n	801119a <_vfiprintf_r+0xc6>
 80111f4:	9b03      	ldr	r3, [sp, #12]
 80111f6:	1d19      	adds	r1, r3, #4
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	9103      	str	r1, [sp, #12]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	bfbb      	ittet	lt
 8011200:	425b      	neglt	r3, r3
 8011202:	f042 0202 	orrlt.w	r2, r2, #2
 8011206:	9307      	strge	r3, [sp, #28]
 8011208:	9307      	strlt	r3, [sp, #28]
 801120a:	bfb8      	it	lt
 801120c:	9204      	strlt	r2, [sp, #16]
 801120e:	7823      	ldrb	r3, [r4, #0]
 8011210:	2b2e      	cmp	r3, #46	@ 0x2e
 8011212:	d10a      	bne.n	801122a <_vfiprintf_r+0x156>
 8011214:	7863      	ldrb	r3, [r4, #1]
 8011216:	2b2a      	cmp	r3, #42	@ 0x2a
 8011218:	d132      	bne.n	8011280 <_vfiprintf_r+0x1ac>
 801121a:	9b03      	ldr	r3, [sp, #12]
 801121c:	1d1a      	adds	r2, r3, #4
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	9203      	str	r2, [sp, #12]
 8011222:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011226:	3402      	adds	r4, #2
 8011228:	9305      	str	r3, [sp, #20]
 801122a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011300 <_vfiprintf_r+0x22c>
 801122e:	7821      	ldrb	r1, [r4, #0]
 8011230:	2203      	movs	r2, #3
 8011232:	4650      	mov	r0, sl
 8011234:	f7ef f86c 	bl	8000310 <memchr>
 8011238:	b138      	cbz	r0, 801124a <_vfiprintf_r+0x176>
 801123a:	9b04      	ldr	r3, [sp, #16]
 801123c:	eba0 000a 	sub.w	r0, r0, sl
 8011240:	2240      	movs	r2, #64	@ 0x40
 8011242:	4082      	lsls	r2, r0
 8011244:	4313      	orrs	r3, r2
 8011246:	3401      	adds	r4, #1
 8011248:	9304      	str	r3, [sp, #16]
 801124a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801124e:	4829      	ldr	r0, [pc, #164]	@ (80112f4 <_vfiprintf_r+0x220>)
 8011250:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011254:	2206      	movs	r2, #6
 8011256:	f7ef f85b 	bl	8000310 <memchr>
 801125a:	2800      	cmp	r0, #0
 801125c:	d03f      	beq.n	80112de <_vfiprintf_r+0x20a>
 801125e:	4b26      	ldr	r3, [pc, #152]	@ (80112f8 <_vfiprintf_r+0x224>)
 8011260:	bb1b      	cbnz	r3, 80112aa <_vfiprintf_r+0x1d6>
 8011262:	9b03      	ldr	r3, [sp, #12]
 8011264:	3307      	adds	r3, #7
 8011266:	f023 0307 	bic.w	r3, r3, #7
 801126a:	3308      	adds	r3, #8
 801126c:	9303      	str	r3, [sp, #12]
 801126e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011270:	443b      	add	r3, r7
 8011272:	9309      	str	r3, [sp, #36]	@ 0x24
 8011274:	e76a      	b.n	801114c <_vfiprintf_r+0x78>
 8011276:	fb0c 3202 	mla	r2, ip, r2, r3
 801127a:	460c      	mov	r4, r1
 801127c:	2001      	movs	r0, #1
 801127e:	e7a8      	b.n	80111d2 <_vfiprintf_r+0xfe>
 8011280:	2300      	movs	r3, #0
 8011282:	3401      	adds	r4, #1
 8011284:	9305      	str	r3, [sp, #20]
 8011286:	4619      	mov	r1, r3
 8011288:	f04f 0c0a 	mov.w	ip, #10
 801128c:	4620      	mov	r0, r4
 801128e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011292:	3a30      	subs	r2, #48	@ 0x30
 8011294:	2a09      	cmp	r2, #9
 8011296:	d903      	bls.n	80112a0 <_vfiprintf_r+0x1cc>
 8011298:	2b00      	cmp	r3, #0
 801129a:	d0c6      	beq.n	801122a <_vfiprintf_r+0x156>
 801129c:	9105      	str	r1, [sp, #20]
 801129e:	e7c4      	b.n	801122a <_vfiprintf_r+0x156>
 80112a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80112a4:	4604      	mov	r4, r0
 80112a6:	2301      	movs	r3, #1
 80112a8:	e7f0      	b.n	801128c <_vfiprintf_r+0x1b8>
 80112aa:	ab03      	add	r3, sp, #12
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	462a      	mov	r2, r5
 80112b0:	4b12      	ldr	r3, [pc, #72]	@ (80112fc <_vfiprintf_r+0x228>)
 80112b2:	a904      	add	r1, sp, #16
 80112b4:	4630      	mov	r0, r6
 80112b6:	f7fc fb57 	bl	800d968 <_printf_float>
 80112ba:	4607      	mov	r7, r0
 80112bc:	1c78      	adds	r0, r7, #1
 80112be:	d1d6      	bne.n	801126e <_vfiprintf_r+0x19a>
 80112c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112c2:	07d9      	lsls	r1, r3, #31
 80112c4:	d405      	bmi.n	80112d2 <_vfiprintf_r+0x1fe>
 80112c6:	89ab      	ldrh	r3, [r5, #12]
 80112c8:	059a      	lsls	r2, r3, #22
 80112ca:	d402      	bmi.n	80112d2 <_vfiprintf_r+0x1fe>
 80112cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112ce:	f7fd fba7 	bl	800ea20 <__retarget_lock_release_recursive>
 80112d2:	89ab      	ldrh	r3, [r5, #12]
 80112d4:	065b      	lsls	r3, r3, #25
 80112d6:	f53f af1f 	bmi.w	8011118 <_vfiprintf_r+0x44>
 80112da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80112dc:	e71e      	b.n	801111c <_vfiprintf_r+0x48>
 80112de:	ab03      	add	r3, sp, #12
 80112e0:	9300      	str	r3, [sp, #0]
 80112e2:	462a      	mov	r2, r5
 80112e4:	4b05      	ldr	r3, [pc, #20]	@ (80112fc <_vfiprintf_r+0x228>)
 80112e6:	a904      	add	r1, sp, #16
 80112e8:	4630      	mov	r0, r6
 80112ea:	f7fc fdc5 	bl	800de78 <_printf_i>
 80112ee:	e7e4      	b.n	80112ba <_vfiprintf_r+0x1e6>
 80112f0:	08012351 	.word	0x08012351
 80112f4:	0801235b 	.word	0x0801235b
 80112f8:	0800d969 	.word	0x0800d969
 80112fc:	080110af 	.word	0x080110af
 8011300:	08012357 	.word	0x08012357

08011304 <__sflush_r>:
 8011304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801130c:	0716      	lsls	r6, r2, #28
 801130e:	4605      	mov	r5, r0
 8011310:	460c      	mov	r4, r1
 8011312:	d454      	bmi.n	80113be <__sflush_r+0xba>
 8011314:	684b      	ldr	r3, [r1, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	dc02      	bgt.n	8011320 <__sflush_r+0x1c>
 801131a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801131c:	2b00      	cmp	r3, #0
 801131e:	dd48      	ble.n	80113b2 <__sflush_r+0xae>
 8011320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011322:	2e00      	cmp	r6, #0
 8011324:	d045      	beq.n	80113b2 <__sflush_r+0xae>
 8011326:	2300      	movs	r3, #0
 8011328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801132c:	682f      	ldr	r7, [r5, #0]
 801132e:	6a21      	ldr	r1, [r4, #32]
 8011330:	602b      	str	r3, [r5, #0]
 8011332:	d030      	beq.n	8011396 <__sflush_r+0x92>
 8011334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011336:	89a3      	ldrh	r3, [r4, #12]
 8011338:	0759      	lsls	r1, r3, #29
 801133a:	d505      	bpl.n	8011348 <__sflush_r+0x44>
 801133c:	6863      	ldr	r3, [r4, #4]
 801133e:	1ad2      	subs	r2, r2, r3
 8011340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011342:	b10b      	cbz	r3, 8011348 <__sflush_r+0x44>
 8011344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011346:	1ad2      	subs	r2, r2, r3
 8011348:	2300      	movs	r3, #0
 801134a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801134c:	6a21      	ldr	r1, [r4, #32]
 801134e:	4628      	mov	r0, r5
 8011350:	47b0      	blx	r6
 8011352:	1c43      	adds	r3, r0, #1
 8011354:	89a3      	ldrh	r3, [r4, #12]
 8011356:	d106      	bne.n	8011366 <__sflush_r+0x62>
 8011358:	6829      	ldr	r1, [r5, #0]
 801135a:	291d      	cmp	r1, #29
 801135c:	d82b      	bhi.n	80113b6 <__sflush_r+0xb2>
 801135e:	4a2a      	ldr	r2, [pc, #168]	@ (8011408 <__sflush_r+0x104>)
 8011360:	410a      	asrs	r2, r1
 8011362:	07d6      	lsls	r6, r2, #31
 8011364:	d427      	bmi.n	80113b6 <__sflush_r+0xb2>
 8011366:	2200      	movs	r2, #0
 8011368:	6062      	str	r2, [r4, #4]
 801136a:	04d9      	lsls	r1, r3, #19
 801136c:	6922      	ldr	r2, [r4, #16]
 801136e:	6022      	str	r2, [r4, #0]
 8011370:	d504      	bpl.n	801137c <__sflush_r+0x78>
 8011372:	1c42      	adds	r2, r0, #1
 8011374:	d101      	bne.n	801137a <__sflush_r+0x76>
 8011376:	682b      	ldr	r3, [r5, #0]
 8011378:	b903      	cbnz	r3, 801137c <__sflush_r+0x78>
 801137a:	6560      	str	r0, [r4, #84]	@ 0x54
 801137c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801137e:	602f      	str	r7, [r5, #0]
 8011380:	b1b9      	cbz	r1, 80113b2 <__sflush_r+0xae>
 8011382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011386:	4299      	cmp	r1, r3
 8011388:	d002      	beq.n	8011390 <__sflush_r+0x8c>
 801138a:	4628      	mov	r0, r5
 801138c:	f7fe f93e 	bl	800f60c <_free_r>
 8011390:	2300      	movs	r3, #0
 8011392:	6363      	str	r3, [r4, #52]	@ 0x34
 8011394:	e00d      	b.n	80113b2 <__sflush_r+0xae>
 8011396:	2301      	movs	r3, #1
 8011398:	4628      	mov	r0, r5
 801139a:	47b0      	blx	r6
 801139c:	4602      	mov	r2, r0
 801139e:	1c50      	adds	r0, r2, #1
 80113a0:	d1c9      	bne.n	8011336 <__sflush_r+0x32>
 80113a2:	682b      	ldr	r3, [r5, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d0c6      	beq.n	8011336 <__sflush_r+0x32>
 80113a8:	2b1d      	cmp	r3, #29
 80113aa:	d001      	beq.n	80113b0 <__sflush_r+0xac>
 80113ac:	2b16      	cmp	r3, #22
 80113ae:	d11e      	bne.n	80113ee <__sflush_r+0xea>
 80113b0:	602f      	str	r7, [r5, #0]
 80113b2:	2000      	movs	r0, #0
 80113b4:	e022      	b.n	80113fc <__sflush_r+0xf8>
 80113b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113ba:	b21b      	sxth	r3, r3
 80113bc:	e01b      	b.n	80113f6 <__sflush_r+0xf2>
 80113be:	690f      	ldr	r7, [r1, #16]
 80113c0:	2f00      	cmp	r7, #0
 80113c2:	d0f6      	beq.n	80113b2 <__sflush_r+0xae>
 80113c4:	0793      	lsls	r3, r2, #30
 80113c6:	680e      	ldr	r6, [r1, #0]
 80113c8:	bf08      	it	eq
 80113ca:	694b      	ldreq	r3, [r1, #20]
 80113cc:	600f      	str	r7, [r1, #0]
 80113ce:	bf18      	it	ne
 80113d0:	2300      	movne	r3, #0
 80113d2:	eba6 0807 	sub.w	r8, r6, r7
 80113d6:	608b      	str	r3, [r1, #8]
 80113d8:	f1b8 0f00 	cmp.w	r8, #0
 80113dc:	dde9      	ble.n	80113b2 <__sflush_r+0xae>
 80113de:	6a21      	ldr	r1, [r4, #32]
 80113e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80113e2:	4643      	mov	r3, r8
 80113e4:	463a      	mov	r2, r7
 80113e6:	4628      	mov	r0, r5
 80113e8:	47b0      	blx	r6
 80113ea:	2800      	cmp	r0, #0
 80113ec:	dc08      	bgt.n	8011400 <__sflush_r+0xfc>
 80113ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113f6:	81a3      	strh	r3, [r4, #12]
 80113f8:	f04f 30ff 	mov.w	r0, #4294967295
 80113fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011400:	4407      	add	r7, r0
 8011402:	eba8 0800 	sub.w	r8, r8, r0
 8011406:	e7e7      	b.n	80113d8 <__sflush_r+0xd4>
 8011408:	dfbffffe 	.word	0xdfbffffe

0801140c <_fflush_r>:
 801140c:	b538      	push	{r3, r4, r5, lr}
 801140e:	690b      	ldr	r3, [r1, #16]
 8011410:	4605      	mov	r5, r0
 8011412:	460c      	mov	r4, r1
 8011414:	b913      	cbnz	r3, 801141c <_fflush_r+0x10>
 8011416:	2500      	movs	r5, #0
 8011418:	4628      	mov	r0, r5
 801141a:	bd38      	pop	{r3, r4, r5, pc}
 801141c:	b118      	cbz	r0, 8011426 <_fflush_r+0x1a>
 801141e:	6a03      	ldr	r3, [r0, #32]
 8011420:	b90b      	cbnz	r3, 8011426 <_fflush_r+0x1a>
 8011422:	f7fd f8e1 	bl	800e5e8 <__sinit>
 8011426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d0f3      	beq.n	8011416 <_fflush_r+0xa>
 801142e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011430:	07d0      	lsls	r0, r2, #31
 8011432:	d404      	bmi.n	801143e <_fflush_r+0x32>
 8011434:	0599      	lsls	r1, r3, #22
 8011436:	d402      	bmi.n	801143e <_fflush_r+0x32>
 8011438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801143a:	f7fd faf0 	bl	800ea1e <__retarget_lock_acquire_recursive>
 801143e:	4628      	mov	r0, r5
 8011440:	4621      	mov	r1, r4
 8011442:	f7ff ff5f 	bl	8011304 <__sflush_r>
 8011446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011448:	07da      	lsls	r2, r3, #31
 801144a:	4605      	mov	r5, r0
 801144c:	d4e4      	bmi.n	8011418 <_fflush_r+0xc>
 801144e:	89a3      	ldrh	r3, [r4, #12]
 8011450:	059b      	lsls	r3, r3, #22
 8011452:	d4e1      	bmi.n	8011418 <_fflush_r+0xc>
 8011454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011456:	f7fd fae3 	bl	800ea20 <__retarget_lock_release_recursive>
 801145a:	e7dd      	b.n	8011418 <_fflush_r+0xc>

0801145c <__swhatbuf_r>:
 801145c:	b570      	push	{r4, r5, r6, lr}
 801145e:	460c      	mov	r4, r1
 8011460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011464:	2900      	cmp	r1, #0
 8011466:	b096      	sub	sp, #88	@ 0x58
 8011468:	4615      	mov	r5, r2
 801146a:	461e      	mov	r6, r3
 801146c:	da0d      	bge.n	801148a <__swhatbuf_r+0x2e>
 801146e:	89a3      	ldrh	r3, [r4, #12]
 8011470:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011474:	f04f 0100 	mov.w	r1, #0
 8011478:	bf14      	ite	ne
 801147a:	2340      	movne	r3, #64	@ 0x40
 801147c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011480:	2000      	movs	r0, #0
 8011482:	6031      	str	r1, [r6, #0]
 8011484:	602b      	str	r3, [r5, #0]
 8011486:	b016      	add	sp, #88	@ 0x58
 8011488:	bd70      	pop	{r4, r5, r6, pc}
 801148a:	466a      	mov	r2, sp
 801148c:	f000 f874 	bl	8011578 <_fstat_r>
 8011490:	2800      	cmp	r0, #0
 8011492:	dbec      	blt.n	801146e <__swhatbuf_r+0x12>
 8011494:	9901      	ldr	r1, [sp, #4]
 8011496:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801149a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801149e:	4259      	negs	r1, r3
 80114a0:	4159      	adcs	r1, r3
 80114a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80114a6:	e7eb      	b.n	8011480 <__swhatbuf_r+0x24>

080114a8 <__smakebuf_r>:
 80114a8:	898b      	ldrh	r3, [r1, #12]
 80114aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114ac:	079d      	lsls	r5, r3, #30
 80114ae:	4606      	mov	r6, r0
 80114b0:	460c      	mov	r4, r1
 80114b2:	d507      	bpl.n	80114c4 <__smakebuf_r+0x1c>
 80114b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80114b8:	6023      	str	r3, [r4, #0]
 80114ba:	6123      	str	r3, [r4, #16]
 80114bc:	2301      	movs	r3, #1
 80114be:	6163      	str	r3, [r4, #20]
 80114c0:	b003      	add	sp, #12
 80114c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114c4:	ab01      	add	r3, sp, #4
 80114c6:	466a      	mov	r2, sp
 80114c8:	f7ff ffc8 	bl	801145c <__swhatbuf_r>
 80114cc:	9f00      	ldr	r7, [sp, #0]
 80114ce:	4605      	mov	r5, r0
 80114d0:	4639      	mov	r1, r7
 80114d2:	4630      	mov	r0, r6
 80114d4:	f7fe f90e 	bl	800f6f4 <_malloc_r>
 80114d8:	b948      	cbnz	r0, 80114ee <__smakebuf_r+0x46>
 80114da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114de:	059a      	lsls	r2, r3, #22
 80114e0:	d4ee      	bmi.n	80114c0 <__smakebuf_r+0x18>
 80114e2:	f023 0303 	bic.w	r3, r3, #3
 80114e6:	f043 0302 	orr.w	r3, r3, #2
 80114ea:	81a3      	strh	r3, [r4, #12]
 80114ec:	e7e2      	b.n	80114b4 <__smakebuf_r+0xc>
 80114ee:	89a3      	ldrh	r3, [r4, #12]
 80114f0:	6020      	str	r0, [r4, #0]
 80114f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114f6:	81a3      	strh	r3, [r4, #12]
 80114f8:	9b01      	ldr	r3, [sp, #4]
 80114fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80114fe:	b15b      	cbz	r3, 8011518 <__smakebuf_r+0x70>
 8011500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011504:	4630      	mov	r0, r6
 8011506:	f000 f849 	bl	801159c <_isatty_r>
 801150a:	b128      	cbz	r0, 8011518 <__smakebuf_r+0x70>
 801150c:	89a3      	ldrh	r3, [r4, #12]
 801150e:	f023 0303 	bic.w	r3, r3, #3
 8011512:	f043 0301 	orr.w	r3, r3, #1
 8011516:	81a3      	strh	r3, [r4, #12]
 8011518:	89a3      	ldrh	r3, [r4, #12]
 801151a:	431d      	orrs	r5, r3
 801151c:	81a5      	strh	r5, [r4, #12]
 801151e:	e7cf      	b.n	80114c0 <__smakebuf_r+0x18>

08011520 <memmove>:
 8011520:	4288      	cmp	r0, r1
 8011522:	b510      	push	{r4, lr}
 8011524:	eb01 0402 	add.w	r4, r1, r2
 8011528:	d902      	bls.n	8011530 <memmove+0x10>
 801152a:	4284      	cmp	r4, r0
 801152c:	4623      	mov	r3, r4
 801152e:	d807      	bhi.n	8011540 <memmove+0x20>
 8011530:	1e43      	subs	r3, r0, #1
 8011532:	42a1      	cmp	r1, r4
 8011534:	d008      	beq.n	8011548 <memmove+0x28>
 8011536:	f811 2b01 	ldrb.w	r2, [r1], #1
 801153a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801153e:	e7f8      	b.n	8011532 <memmove+0x12>
 8011540:	4402      	add	r2, r0
 8011542:	4601      	mov	r1, r0
 8011544:	428a      	cmp	r2, r1
 8011546:	d100      	bne.n	801154a <memmove+0x2a>
 8011548:	bd10      	pop	{r4, pc}
 801154a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801154e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011552:	e7f7      	b.n	8011544 <memmove+0x24>

08011554 <strncmp>:
 8011554:	b510      	push	{r4, lr}
 8011556:	b16a      	cbz	r2, 8011574 <strncmp+0x20>
 8011558:	3901      	subs	r1, #1
 801155a:	1884      	adds	r4, r0, r2
 801155c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011560:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011564:	429a      	cmp	r2, r3
 8011566:	d103      	bne.n	8011570 <strncmp+0x1c>
 8011568:	42a0      	cmp	r0, r4
 801156a:	d001      	beq.n	8011570 <strncmp+0x1c>
 801156c:	2a00      	cmp	r2, #0
 801156e:	d1f5      	bne.n	801155c <strncmp+0x8>
 8011570:	1ad0      	subs	r0, r2, r3
 8011572:	bd10      	pop	{r4, pc}
 8011574:	4610      	mov	r0, r2
 8011576:	e7fc      	b.n	8011572 <strncmp+0x1e>

08011578 <_fstat_r>:
 8011578:	b538      	push	{r3, r4, r5, lr}
 801157a:	4d07      	ldr	r5, [pc, #28]	@ (8011598 <_fstat_r+0x20>)
 801157c:	2300      	movs	r3, #0
 801157e:	4604      	mov	r4, r0
 8011580:	4608      	mov	r0, r1
 8011582:	4611      	mov	r1, r2
 8011584:	602b      	str	r3, [r5, #0]
 8011586:	f7f2 fb56 	bl	8003c36 <_fstat>
 801158a:	1c43      	adds	r3, r0, #1
 801158c:	d102      	bne.n	8011594 <_fstat_r+0x1c>
 801158e:	682b      	ldr	r3, [r5, #0]
 8011590:	b103      	cbz	r3, 8011594 <_fstat_r+0x1c>
 8011592:	6023      	str	r3, [r4, #0]
 8011594:	bd38      	pop	{r3, r4, r5, pc}
 8011596:	bf00      	nop
 8011598:	240008b4 	.word	0x240008b4

0801159c <_isatty_r>:
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	4d06      	ldr	r5, [pc, #24]	@ (80115b8 <_isatty_r+0x1c>)
 80115a0:	2300      	movs	r3, #0
 80115a2:	4604      	mov	r4, r0
 80115a4:	4608      	mov	r0, r1
 80115a6:	602b      	str	r3, [r5, #0]
 80115a8:	f7f2 fb55 	bl	8003c56 <_isatty>
 80115ac:	1c43      	adds	r3, r0, #1
 80115ae:	d102      	bne.n	80115b6 <_isatty_r+0x1a>
 80115b0:	682b      	ldr	r3, [r5, #0]
 80115b2:	b103      	cbz	r3, 80115b6 <_isatty_r+0x1a>
 80115b4:	6023      	str	r3, [r4, #0]
 80115b6:	bd38      	pop	{r3, r4, r5, pc}
 80115b8:	240008b4 	.word	0x240008b4

080115bc <_sbrk_r>:
 80115bc:	b538      	push	{r3, r4, r5, lr}
 80115be:	4d06      	ldr	r5, [pc, #24]	@ (80115d8 <_sbrk_r+0x1c>)
 80115c0:	2300      	movs	r3, #0
 80115c2:	4604      	mov	r4, r0
 80115c4:	4608      	mov	r0, r1
 80115c6:	602b      	str	r3, [r5, #0]
 80115c8:	f7f2 fb5e 	bl	8003c88 <_sbrk>
 80115cc:	1c43      	adds	r3, r0, #1
 80115ce:	d102      	bne.n	80115d6 <_sbrk_r+0x1a>
 80115d0:	682b      	ldr	r3, [r5, #0]
 80115d2:	b103      	cbz	r3, 80115d6 <_sbrk_r+0x1a>
 80115d4:	6023      	str	r3, [r4, #0]
 80115d6:	bd38      	pop	{r3, r4, r5, pc}
 80115d8:	240008b4 	.word	0x240008b4
 80115dc:	00000000 	.word	0x00000000

080115e0 <nan>:
 80115e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80115e8 <nan+0x8>
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop
 80115e8:	00000000 	.word	0x00000000
 80115ec:	7ff80000 	.word	0x7ff80000

080115f0 <__assert_func>:
 80115f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115f2:	4614      	mov	r4, r2
 80115f4:	461a      	mov	r2, r3
 80115f6:	4b09      	ldr	r3, [pc, #36]	@ (801161c <__assert_func+0x2c>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	4605      	mov	r5, r0
 80115fc:	68d8      	ldr	r0, [r3, #12]
 80115fe:	b954      	cbnz	r4, 8011616 <__assert_func+0x26>
 8011600:	4b07      	ldr	r3, [pc, #28]	@ (8011620 <__assert_func+0x30>)
 8011602:	461c      	mov	r4, r3
 8011604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011608:	9100      	str	r1, [sp, #0]
 801160a:	462b      	mov	r3, r5
 801160c:	4905      	ldr	r1, [pc, #20]	@ (8011624 <__assert_func+0x34>)
 801160e:	f000 fba7 	bl	8011d60 <fiprintf>
 8011612:	f000 fbb7 	bl	8011d84 <abort>
 8011616:	4b04      	ldr	r3, [pc, #16]	@ (8011628 <__assert_func+0x38>)
 8011618:	e7f4      	b.n	8011604 <__assert_func+0x14>
 801161a:	bf00      	nop
 801161c:	24000028 	.word	0x24000028
 8011620:	080123a5 	.word	0x080123a5
 8011624:	08012377 	.word	0x08012377
 8011628:	0801236a 	.word	0x0801236a

0801162c <_calloc_r>:
 801162c:	b570      	push	{r4, r5, r6, lr}
 801162e:	fba1 5402 	umull	r5, r4, r1, r2
 8011632:	b93c      	cbnz	r4, 8011644 <_calloc_r+0x18>
 8011634:	4629      	mov	r1, r5
 8011636:	f7fe f85d 	bl	800f6f4 <_malloc_r>
 801163a:	4606      	mov	r6, r0
 801163c:	b928      	cbnz	r0, 801164a <_calloc_r+0x1e>
 801163e:	2600      	movs	r6, #0
 8011640:	4630      	mov	r0, r6
 8011642:	bd70      	pop	{r4, r5, r6, pc}
 8011644:	220c      	movs	r2, #12
 8011646:	6002      	str	r2, [r0, #0]
 8011648:	e7f9      	b.n	801163e <_calloc_r+0x12>
 801164a:	462a      	mov	r2, r5
 801164c:	4621      	mov	r1, r4
 801164e:	f7fd f969 	bl	800e924 <memset>
 8011652:	e7f5      	b.n	8011640 <_calloc_r+0x14>

08011654 <rshift>:
 8011654:	6903      	ldr	r3, [r0, #16]
 8011656:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801165a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801165e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011662:	f100 0414 	add.w	r4, r0, #20
 8011666:	dd45      	ble.n	80116f4 <rshift+0xa0>
 8011668:	f011 011f 	ands.w	r1, r1, #31
 801166c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011670:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011674:	d10c      	bne.n	8011690 <rshift+0x3c>
 8011676:	f100 0710 	add.w	r7, r0, #16
 801167a:	4629      	mov	r1, r5
 801167c:	42b1      	cmp	r1, r6
 801167e:	d334      	bcc.n	80116ea <rshift+0x96>
 8011680:	1a9b      	subs	r3, r3, r2
 8011682:	009b      	lsls	r3, r3, #2
 8011684:	1eea      	subs	r2, r5, #3
 8011686:	4296      	cmp	r6, r2
 8011688:	bf38      	it	cc
 801168a:	2300      	movcc	r3, #0
 801168c:	4423      	add	r3, r4
 801168e:	e015      	b.n	80116bc <rshift+0x68>
 8011690:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011694:	f1c1 0820 	rsb	r8, r1, #32
 8011698:	40cf      	lsrs	r7, r1
 801169a:	f105 0e04 	add.w	lr, r5, #4
 801169e:	46a1      	mov	r9, r4
 80116a0:	4576      	cmp	r6, lr
 80116a2:	46f4      	mov	ip, lr
 80116a4:	d815      	bhi.n	80116d2 <rshift+0x7e>
 80116a6:	1a9a      	subs	r2, r3, r2
 80116a8:	0092      	lsls	r2, r2, #2
 80116aa:	3a04      	subs	r2, #4
 80116ac:	3501      	adds	r5, #1
 80116ae:	42ae      	cmp	r6, r5
 80116b0:	bf38      	it	cc
 80116b2:	2200      	movcc	r2, #0
 80116b4:	18a3      	adds	r3, r4, r2
 80116b6:	50a7      	str	r7, [r4, r2]
 80116b8:	b107      	cbz	r7, 80116bc <rshift+0x68>
 80116ba:	3304      	adds	r3, #4
 80116bc:	1b1a      	subs	r2, r3, r4
 80116be:	42a3      	cmp	r3, r4
 80116c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80116c4:	bf08      	it	eq
 80116c6:	2300      	moveq	r3, #0
 80116c8:	6102      	str	r2, [r0, #16]
 80116ca:	bf08      	it	eq
 80116cc:	6143      	streq	r3, [r0, #20]
 80116ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116d2:	f8dc c000 	ldr.w	ip, [ip]
 80116d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80116da:	ea4c 0707 	orr.w	r7, ip, r7
 80116de:	f849 7b04 	str.w	r7, [r9], #4
 80116e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80116e6:	40cf      	lsrs	r7, r1
 80116e8:	e7da      	b.n	80116a0 <rshift+0x4c>
 80116ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80116ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80116f2:	e7c3      	b.n	801167c <rshift+0x28>
 80116f4:	4623      	mov	r3, r4
 80116f6:	e7e1      	b.n	80116bc <rshift+0x68>

080116f8 <__hexdig_fun>:
 80116f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80116fc:	2b09      	cmp	r3, #9
 80116fe:	d802      	bhi.n	8011706 <__hexdig_fun+0xe>
 8011700:	3820      	subs	r0, #32
 8011702:	b2c0      	uxtb	r0, r0
 8011704:	4770      	bx	lr
 8011706:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801170a:	2b05      	cmp	r3, #5
 801170c:	d801      	bhi.n	8011712 <__hexdig_fun+0x1a>
 801170e:	3847      	subs	r0, #71	@ 0x47
 8011710:	e7f7      	b.n	8011702 <__hexdig_fun+0xa>
 8011712:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011716:	2b05      	cmp	r3, #5
 8011718:	d801      	bhi.n	801171e <__hexdig_fun+0x26>
 801171a:	3827      	subs	r0, #39	@ 0x27
 801171c:	e7f1      	b.n	8011702 <__hexdig_fun+0xa>
 801171e:	2000      	movs	r0, #0
 8011720:	4770      	bx	lr
	...

08011724 <__gethex>:
 8011724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011728:	b085      	sub	sp, #20
 801172a:	468a      	mov	sl, r1
 801172c:	9302      	str	r3, [sp, #8]
 801172e:	680b      	ldr	r3, [r1, #0]
 8011730:	9001      	str	r0, [sp, #4]
 8011732:	4690      	mov	r8, r2
 8011734:	1c9c      	adds	r4, r3, #2
 8011736:	46a1      	mov	r9, r4
 8011738:	f814 0b01 	ldrb.w	r0, [r4], #1
 801173c:	2830      	cmp	r0, #48	@ 0x30
 801173e:	d0fa      	beq.n	8011736 <__gethex+0x12>
 8011740:	eba9 0303 	sub.w	r3, r9, r3
 8011744:	f1a3 0b02 	sub.w	fp, r3, #2
 8011748:	f7ff ffd6 	bl	80116f8 <__hexdig_fun>
 801174c:	4605      	mov	r5, r0
 801174e:	2800      	cmp	r0, #0
 8011750:	d168      	bne.n	8011824 <__gethex+0x100>
 8011752:	49a0      	ldr	r1, [pc, #640]	@ (80119d4 <__gethex+0x2b0>)
 8011754:	2201      	movs	r2, #1
 8011756:	4648      	mov	r0, r9
 8011758:	f7ff fefc 	bl	8011554 <strncmp>
 801175c:	4607      	mov	r7, r0
 801175e:	2800      	cmp	r0, #0
 8011760:	d167      	bne.n	8011832 <__gethex+0x10e>
 8011762:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011766:	4626      	mov	r6, r4
 8011768:	f7ff ffc6 	bl	80116f8 <__hexdig_fun>
 801176c:	2800      	cmp	r0, #0
 801176e:	d062      	beq.n	8011836 <__gethex+0x112>
 8011770:	4623      	mov	r3, r4
 8011772:	7818      	ldrb	r0, [r3, #0]
 8011774:	2830      	cmp	r0, #48	@ 0x30
 8011776:	4699      	mov	r9, r3
 8011778:	f103 0301 	add.w	r3, r3, #1
 801177c:	d0f9      	beq.n	8011772 <__gethex+0x4e>
 801177e:	f7ff ffbb 	bl	80116f8 <__hexdig_fun>
 8011782:	fab0 f580 	clz	r5, r0
 8011786:	096d      	lsrs	r5, r5, #5
 8011788:	f04f 0b01 	mov.w	fp, #1
 801178c:	464a      	mov	r2, r9
 801178e:	4616      	mov	r6, r2
 8011790:	3201      	adds	r2, #1
 8011792:	7830      	ldrb	r0, [r6, #0]
 8011794:	f7ff ffb0 	bl	80116f8 <__hexdig_fun>
 8011798:	2800      	cmp	r0, #0
 801179a:	d1f8      	bne.n	801178e <__gethex+0x6a>
 801179c:	498d      	ldr	r1, [pc, #564]	@ (80119d4 <__gethex+0x2b0>)
 801179e:	2201      	movs	r2, #1
 80117a0:	4630      	mov	r0, r6
 80117a2:	f7ff fed7 	bl	8011554 <strncmp>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	d13f      	bne.n	801182a <__gethex+0x106>
 80117aa:	b944      	cbnz	r4, 80117be <__gethex+0x9a>
 80117ac:	1c74      	adds	r4, r6, #1
 80117ae:	4622      	mov	r2, r4
 80117b0:	4616      	mov	r6, r2
 80117b2:	3201      	adds	r2, #1
 80117b4:	7830      	ldrb	r0, [r6, #0]
 80117b6:	f7ff ff9f 	bl	80116f8 <__hexdig_fun>
 80117ba:	2800      	cmp	r0, #0
 80117bc:	d1f8      	bne.n	80117b0 <__gethex+0x8c>
 80117be:	1ba4      	subs	r4, r4, r6
 80117c0:	00a7      	lsls	r7, r4, #2
 80117c2:	7833      	ldrb	r3, [r6, #0]
 80117c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80117c8:	2b50      	cmp	r3, #80	@ 0x50
 80117ca:	d13e      	bne.n	801184a <__gethex+0x126>
 80117cc:	7873      	ldrb	r3, [r6, #1]
 80117ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80117d0:	d033      	beq.n	801183a <__gethex+0x116>
 80117d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80117d4:	d034      	beq.n	8011840 <__gethex+0x11c>
 80117d6:	1c71      	adds	r1, r6, #1
 80117d8:	2400      	movs	r4, #0
 80117da:	7808      	ldrb	r0, [r1, #0]
 80117dc:	f7ff ff8c 	bl	80116f8 <__hexdig_fun>
 80117e0:	1e43      	subs	r3, r0, #1
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	2b18      	cmp	r3, #24
 80117e6:	d830      	bhi.n	801184a <__gethex+0x126>
 80117e8:	f1a0 0210 	sub.w	r2, r0, #16
 80117ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80117f0:	f7ff ff82 	bl	80116f8 <__hexdig_fun>
 80117f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80117f8:	fa5f fc8c 	uxtb.w	ip, ip
 80117fc:	f1bc 0f18 	cmp.w	ip, #24
 8011800:	f04f 030a 	mov.w	r3, #10
 8011804:	d91e      	bls.n	8011844 <__gethex+0x120>
 8011806:	b104      	cbz	r4, 801180a <__gethex+0xe6>
 8011808:	4252      	negs	r2, r2
 801180a:	4417      	add	r7, r2
 801180c:	f8ca 1000 	str.w	r1, [sl]
 8011810:	b1ed      	cbz	r5, 801184e <__gethex+0x12a>
 8011812:	f1bb 0f00 	cmp.w	fp, #0
 8011816:	bf0c      	ite	eq
 8011818:	2506      	moveq	r5, #6
 801181a:	2500      	movne	r5, #0
 801181c:	4628      	mov	r0, r5
 801181e:	b005      	add	sp, #20
 8011820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011824:	2500      	movs	r5, #0
 8011826:	462c      	mov	r4, r5
 8011828:	e7b0      	b.n	801178c <__gethex+0x68>
 801182a:	2c00      	cmp	r4, #0
 801182c:	d1c7      	bne.n	80117be <__gethex+0x9a>
 801182e:	4627      	mov	r7, r4
 8011830:	e7c7      	b.n	80117c2 <__gethex+0x9e>
 8011832:	464e      	mov	r6, r9
 8011834:	462f      	mov	r7, r5
 8011836:	2501      	movs	r5, #1
 8011838:	e7c3      	b.n	80117c2 <__gethex+0x9e>
 801183a:	2400      	movs	r4, #0
 801183c:	1cb1      	adds	r1, r6, #2
 801183e:	e7cc      	b.n	80117da <__gethex+0xb6>
 8011840:	2401      	movs	r4, #1
 8011842:	e7fb      	b.n	801183c <__gethex+0x118>
 8011844:	fb03 0002 	mla	r0, r3, r2, r0
 8011848:	e7ce      	b.n	80117e8 <__gethex+0xc4>
 801184a:	4631      	mov	r1, r6
 801184c:	e7de      	b.n	801180c <__gethex+0xe8>
 801184e:	eba6 0309 	sub.w	r3, r6, r9
 8011852:	3b01      	subs	r3, #1
 8011854:	4629      	mov	r1, r5
 8011856:	2b07      	cmp	r3, #7
 8011858:	dc0a      	bgt.n	8011870 <__gethex+0x14c>
 801185a:	9801      	ldr	r0, [sp, #4]
 801185c:	f7fd ffd6 	bl	800f80c <_Balloc>
 8011860:	4604      	mov	r4, r0
 8011862:	b940      	cbnz	r0, 8011876 <__gethex+0x152>
 8011864:	4b5c      	ldr	r3, [pc, #368]	@ (80119d8 <__gethex+0x2b4>)
 8011866:	4602      	mov	r2, r0
 8011868:	21e4      	movs	r1, #228	@ 0xe4
 801186a:	485c      	ldr	r0, [pc, #368]	@ (80119dc <__gethex+0x2b8>)
 801186c:	f7ff fec0 	bl	80115f0 <__assert_func>
 8011870:	3101      	adds	r1, #1
 8011872:	105b      	asrs	r3, r3, #1
 8011874:	e7ef      	b.n	8011856 <__gethex+0x132>
 8011876:	f100 0a14 	add.w	sl, r0, #20
 801187a:	2300      	movs	r3, #0
 801187c:	4655      	mov	r5, sl
 801187e:	469b      	mov	fp, r3
 8011880:	45b1      	cmp	r9, r6
 8011882:	d337      	bcc.n	80118f4 <__gethex+0x1d0>
 8011884:	f845 bb04 	str.w	fp, [r5], #4
 8011888:	eba5 050a 	sub.w	r5, r5, sl
 801188c:	10ad      	asrs	r5, r5, #2
 801188e:	6125      	str	r5, [r4, #16]
 8011890:	4658      	mov	r0, fp
 8011892:	f7fe f8ad 	bl	800f9f0 <__hi0bits>
 8011896:	016d      	lsls	r5, r5, #5
 8011898:	f8d8 6000 	ldr.w	r6, [r8]
 801189c:	1a2d      	subs	r5, r5, r0
 801189e:	42b5      	cmp	r5, r6
 80118a0:	dd54      	ble.n	801194c <__gethex+0x228>
 80118a2:	1bad      	subs	r5, r5, r6
 80118a4:	4629      	mov	r1, r5
 80118a6:	4620      	mov	r0, r4
 80118a8:	f7fe fc3e 	bl	8010128 <__any_on>
 80118ac:	4681      	mov	r9, r0
 80118ae:	b178      	cbz	r0, 80118d0 <__gethex+0x1ac>
 80118b0:	1e6b      	subs	r3, r5, #1
 80118b2:	1159      	asrs	r1, r3, #5
 80118b4:	f003 021f 	and.w	r2, r3, #31
 80118b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80118bc:	f04f 0901 	mov.w	r9, #1
 80118c0:	fa09 f202 	lsl.w	r2, r9, r2
 80118c4:	420a      	tst	r2, r1
 80118c6:	d003      	beq.n	80118d0 <__gethex+0x1ac>
 80118c8:	454b      	cmp	r3, r9
 80118ca:	dc36      	bgt.n	801193a <__gethex+0x216>
 80118cc:	f04f 0902 	mov.w	r9, #2
 80118d0:	4629      	mov	r1, r5
 80118d2:	4620      	mov	r0, r4
 80118d4:	f7ff febe 	bl	8011654 <rshift>
 80118d8:	442f      	add	r7, r5
 80118da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80118de:	42bb      	cmp	r3, r7
 80118e0:	da42      	bge.n	8011968 <__gethex+0x244>
 80118e2:	9801      	ldr	r0, [sp, #4]
 80118e4:	4621      	mov	r1, r4
 80118e6:	f7fd ffd1 	bl	800f88c <_Bfree>
 80118ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80118ec:	2300      	movs	r3, #0
 80118ee:	6013      	str	r3, [r2, #0]
 80118f0:	25a3      	movs	r5, #163	@ 0xa3
 80118f2:	e793      	b.n	801181c <__gethex+0xf8>
 80118f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80118f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80118fa:	d012      	beq.n	8011922 <__gethex+0x1fe>
 80118fc:	2b20      	cmp	r3, #32
 80118fe:	d104      	bne.n	801190a <__gethex+0x1e6>
 8011900:	f845 bb04 	str.w	fp, [r5], #4
 8011904:	f04f 0b00 	mov.w	fp, #0
 8011908:	465b      	mov	r3, fp
 801190a:	7830      	ldrb	r0, [r6, #0]
 801190c:	9303      	str	r3, [sp, #12]
 801190e:	f7ff fef3 	bl	80116f8 <__hexdig_fun>
 8011912:	9b03      	ldr	r3, [sp, #12]
 8011914:	f000 000f 	and.w	r0, r0, #15
 8011918:	4098      	lsls	r0, r3
 801191a:	ea4b 0b00 	orr.w	fp, fp, r0
 801191e:	3304      	adds	r3, #4
 8011920:	e7ae      	b.n	8011880 <__gethex+0x15c>
 8011922:	45b1      	cmp	r9, r6
 8011924:	d8ea      	bhi.n	80118fc <__gethex+0x1d8>
 8011926:	492b      	ldr	r1, [pc, #172]	@ (80119d4 <__gethex+0x2b0>)
 8011928:	9303      	str	r3, [sp, #12]
 801192a:	2201      	movs	r2, #1
 801192c:	4630      	mov	r0, r6
 801192e:	f7ff fe11 	bl	8011554 <strncmp>
 8011932:	9b03      	ldr	r3, [sp, #12]
 8011934:	2800      	cmp	r0, #0
 8011936:	d1e1      	bne.n	80118fc <__gethex+0x1d8>
 8011938:	e7a2      	b.n	8011880 <__gethex+0x15c>
 801193a:	1ea9      	subs	r1, r5, #2
 801193c:	4620      	mov	r0, r4
 801193e:	f7fe fbf3 	bl	8010128 <__any_on>
 8011942:	2800      	cmp	r0, #0
 8011944:	d0c2      	beq.n	80118cc <__gethex+0x1a8>
 8011946:	f04f 0903 	mov.w	r9, #3
 801194a:	e7c1      	b.n	80118d0 <__gethex+0x1ac>
 801194c:	da09      	bge.n	8011962 <__gethex+0x23e>
 801194e:	1b75      	subs	r5, r6, r5
 8011950:	4621      	mov	r1, r4
 8011952:	9801      	ldr	r0, [sp, #4]
 8011954:	462a      	mov	r2, r5
 8011956:	f7fe f9b1 	bl	800fcbc <__lshift>
 801195a:	1b7f      	subs	r7, r7, r5
 801195c:	4604      	mov	r4, r0
 801195e:	f100 0a14 	add.w	sl, r0, #20
 8011962:	f04f 0900 	mov.w	r9, #0
 8011966:	e7b8      	b.n	80118da <__gethex+0x1b6>
 8011968:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801196c:	42bd      	cmp	r5, r7
 801196e:	dd6f      	ble.n	8011a50 <__gethex+0x32c>
 8011970:	1bed      	subs	r5, r5, r7
 8011972:	42ae      	cmp	r6, r5
 8011974:	dc34      	bgt.n	80119e0 <__gethex+0x2bc>
 8011976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801197a:	2b02      	cmp	r3, #2
 801197c:	d022      	beq.n	80119c4 <__gethex+0x2a0>
 801197e:	2b03      	cmp	r3, #3
 8011980:	d024      	beq.n	80119cc <__gethex+0x2a8>
 8011982:	2b01      	cmp	r3, #1
 8011984:	d115      	bne.n	80119b2 <__gethex+0x28e>
 8011986:	42ae      	cmp	r6, r5
 8011988:	d113      	bne.n	80119b2 <__gethex+0x28e>
 801198a:	2e01      	cmp	r6, #1
 801198c:	d10b      	bne.n	80119a6 <__gethex+0x282>
 801198e:	9a02      	ldr	r2, [sp, #8]
 8011990:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011994:	6013      	str	r3, [r2, #0]
 8011996:	2301      	movs	r3, #1
 8011998:	6123      	str	r3, [r4, #16]
 801199a:	f8ca 3000 	str.w	r3, [sl]
 801199e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119a0:	2562      	movs	r5, #98	@ 0x62
 80119a2:	601c      	str	r4, [r3, #0]
 80119a4:	e73a      	b.n	801181c <__gethex+0xf8>
 80119a6:	1e71      	subs	r1, r6, #1
 80119a8:	4620      	mov	r0, r4
 80119aa:	f7fe fbbd 	bl	8010128 <__any_on>
 80119ae:	2800      	cmp	r0, #0
 80119b0:	d1ed      	bne.n	801198e <__gethex+0x26a>
 80119b2:	9801      	ldr	r0, [sp, #4]
 80119b4:	4621      	mov	r1, r4
 80119b6:	f7fd ff69 	bl	800f88c <_Bfree>
 80119ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80119bc:	2300      	movs	r3, #0
 80119be:	6013      	str	r3, [r2, #0]
 80119c0:	2550      	movs	r5, #80	@ 0x50
 80119c2:	e72b      	b.n	801181c <__gethex+0xf8>
 80119c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d1f3      	bne.n	80119b2 <__gethex+0x28e>
 80119ca:	e7e0      	b.n	801198e <__gethex+0x26a>
 80119cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d1dd      	bne.n	801198e <__gethex+0x26a>
 80119d2:	e7ee      	b.n	80119b2 <__gethex+0x28e>
 80119d4:	080121f8 	.word	0x080121f8
 80119d8:	08012091 	.word	0x08012091
 80119dc:	080123a6 	.word	0x080123a6
 80119e0:	1e6f      	subs	r7, r5, #1
 80119e2:	f1b9 0f00 	cmp.w	r9, #0
 80119e6:	d130      	bne.n	8011a4a <__gethex+0x326>
 80119e8:	b127      	cbz	r7, 80119f4 <__gethex+0x2d0>
 80119ea:	4639      	mov	r1, r7
 80119ec:	4620      	mov	r0, r4
 80119ee:	f7fe fb9b 	bl	8010128 <__any_on>
 80119f2:	4681      	mov	r9, r0
 80119f4:	117a      	asrs	r2, r7, #5
 80119f6:	2301      	movs	r3, #1
 80119f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80119fc:	f007 071f 	and.w	r7, r7, #31
 8011a00:	40bb      	lsls	r3, r7
 8011a02:	4213      	tst	r3, r2
 8011a04:	4629      	mov	r1, r5
 8011a06:	4620      	mov	r0, r4
 8011a08:	bf18      	it	ne
 8011a0a:	f049 0902 	orrne.w	r9, r9, #2
 8011a0e:	f7ff fe21 	bl	8011654 <rshift>
 8011a12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011a16:	1b76      	subs	r6, r6, r5
 8011a18:	2502      	movs	r5, #2
 8011a1a:	f1b9 0f00 	cmp.w	r9, #0
 8011a1e:	d047      	beq.n	8011ab0 <__gethex+0x38c>
 8011a20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011a24:	2b02      	cmp	r3, #2
 8011a26:	d015      	beq.n	8011a54 <__gethex+0x330>
 8011a28:	2b03      	cmp	r3, #3
 8011a2a:	d017      	beq.n	8011a5c <__gethex+0x338>
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d109      	bne.n	8011a44 <__gethex+0x320>
 8011a30:	f019 0f02 	tst.w	r9, #2
 8011a34:	d006      	beq.n	8011a44 <__gethex+0x320>
 8011a36:	f8da 3000 	ldr.w	r3, [sl]
 8011a3a:	ea49 0903 	orr.w	r9, r9, r3
 8011a3e:	f019 0f01 	tst.w	r9, #1
 8011a42:	d10e      	bne.n	8011a62 <__gethex+0x33e>
 8011a44:	f045 0510 	orr.w	r5, r5, #16
 8011a48:	e032      	b.n	8011ab0 <__gethex+0x38c>
 8011a4a:	f04f 0901 	mov.w	r9, #1
 8011a4e:	e7d1      	b.n	80119f4 <__gethex+0x2d0>
 8011a50:	2501      	movs	r5, #1
 8011a52:	e7e2      	b.n	8011a1a <__gethex+0x2f6>
 8011a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a56:	f1c3 0301 	rsb	r3, r3, #1
 8011a5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d0f0      	beq.n	8011a44 <__gethex+0x320>
 8011a62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011a66:	f104 0314 	add.w	r3, r4, #20
 8011a6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011a6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011a72:	f04f 0c00 	mov.w	ip, #0
 8011a76:	4618      	mov	r0, r3
 8011a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011a80:	d01b      	beq.n	8011aba <__gethex+0x396>
 8011a82:	3201      	adds	r2, #1
 8011a84:	6002      	str	r2, [r0, #0]
 8011a86:	2d02      	cmp	r5, #2
 8011a88:	f104 0314 	add.w	r3, r4, #20
 8011a8c:	d13c      	bne.n	8011b08 <__gethex+0x3e4>
 8011a8e:	f8d8 2000 	ldr.w	r2, [r8]
 8011a92:	3a01      	subs	r2, #1
 8011a94:	42b2      	cmp	r2, r6
 8011a96:	d109      	bne.n	8011aac <__gethex+0x388>
 8011a98:	1171      	asrs	r1, r6, #5
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011aa0:	f006 061f 	and.w	r6, r6, #31
 8011aa4:	fa02 f606 	lsl.w	r6, r2, r6
 8011aa8:	421e      	tst	r6, r3
 8011aaa:	d13a      	bne.n	8011b22 <__gethex+0x3fe>
 8011aac:	f045 0520 	orr.w	r5, r5, #32
 8011ab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ab2:	601c      	str	r4, [r3, #0]
 8011ab4:	9b02      	ldr	r3, [sp, #8]
 8011ab6:	601f      	str	r7, [r3, #0]
 8011ab8:	e6b0      	b.n	801181c <__gethex+0xf8>
 8011aba:	4299      	cmp	r1, r3
 8011abc:	f843 cc04 	str.w	ip, [r3, #-4]
 8011ac0:	d8d9      	bhi.n	8011a76 <__gethex+0x352>
 8011ac2:	68a3      	ldr	r3, [r4, #8]
 8011ac4:	459b      	cmp	fp, r3
 8011ac6:	db17      	blt.n	8011af8 <__gethex+0x3d4>
 8011ac8:	6861      	ldr	r1, [r4, #4]
 8011aca:	9801      	ldr	r0, [sp, #4]
 8011acc:	3101      	adds	r1, #1
 8011ace:	f7fd fe9d 	bl	800f80c <_Balloc>
 8011ad2:	4681      	mov	r9, r0
 8011ad4:	b918      	cbnz	r0, 8011ade <__gethex+0x3ba>
 8011ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8011b40 <__gethex+0x41c>)
 8011ad8:	4602      	mov	r2, r0
 8011ada:	2184      	movs	r1, #132	@ 0x84
 8011adc:	e6c5      	b.n	801186a <__gethex+0x146>
 8011ade:	6922      	ldr	r2, [r4, #16]
 8011ae0:	3202      	adds	r2, #2
 8011ae2:	f104 010c 	add.w	r1, r4, #12
 8011ae6:	0092      	lsls	r2, r2, #2
 8011ae8:	300c      	adds	r0, #12
 8011aea:	f7fc ff9a 	bl	800ea22 <memcpy>
 8011aee:	4621      	mov	r1, r4
 8011af0:	9801      	ldr	r0, [sp, #4]
 8011af2:	f7fd fecb 	bl	800f88c <_Bfree>
 8011af6:	464c      	mov	r4, r9
 8011af8:	6923      	ldr	r3, [r4, #16]
 8011afa:	1c5a      	adds	r2, r3, #1
 8011afc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b00:	6122      	str	r2, [r4, #16]
 8011b02:	2201      	movs	r2, #1
 8011b04:	615a      	str	r2, [r3, #20]
 8011b06:	e7be      	b.n	8011a86 <__gethex+0x362>
 8011b08:	6922      	ldr	r2, [r4, #16]
 8011b0a:	455a      	cmp	r2, fp
 8011b0c:	dd0b      	ble.n	8011b26 <__gethex+0x402>
 8011b0e:	2101      	movs	r1, #1
 8011b10:	4620      	mov	r0, r4
 8011b12:	f7ff fd9f 	bl	8011654 <rshift>
 8011b16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b1a:	3701      	adds	r7, #1
 8011b1c:	42bb      	cmp	r3, r7
 8011b1e:	f6ff aee0 	blt.w	80118e2 <__gethex+0x1be>
 8011b22:	2501      	movs	r5, #1
 8011b24:	e7c2      	b.n	8011aac <__gethex+0x388>
 8011b26:	f016 061f 	ands.w	r6, r6, #31
 8011b2a:	d0fa      	beq.n	8011b22 <__gethex+0x3fe>
 8011b2c:	4453      	add	r3, sl
 8011b2e:	f1c6 0620 	rsb	r6, r6, #32
 8011b32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011b36:	f7fd ff5b 	bl	800f9f0 <__hi0bits>
 8011b3a:	42b0      	cmp	r0, r6
 8011b3c:	dbe7      	blt.n	8011b0e <__gethex+0x3ea>
 8011b3e:	e7f0      	b.n	8011b22 <__gethex+0x3fe>
 8011b40:	08012091 	.word	0x08012091

08011b44 <L_shift>:
 8011b44:	f1c2 0208 	rsb	r2, r2, #8
 8011b48:	0092      	lsls	r2, r2, #2
 8011b4a:	b570      	push	{r4, r5, r6, lr}
 8011b4c:	f1c2 0620 	rsb	r6, r2, #32
 8011b50:	6843      	ldr	r3, [r0, #4]
 8011b52:	6804      	ldr	r4, [r0, #0]
 8011b54:	fa03 f506 	lsl.w	r5, r3, r6
 8011b58:	432c      	orrs	r4, r5
 8011b5a:	40d3      	lsrs	r3, r2
 8011b5c:	6004      	str	r4, [r0, #0]
 8011b5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011b62:	4288      	cmp	r0, r1
 8011b64:	d3f4      	bcc.n	8011b50 <L_shift+0xc>
 8011b66:	bd70      	pop	{r4, r5, r6, pc}

08011b68 <__match>:
 8011b68:	b530      	push	{r4, r5, lr}
 8011b6a:	6803      	ldr	r3, [r0, #0]
 8011b6c:	3301      	adds	r3, #1
 8011b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b72:	b914      	cbnz	r4, 8011b7a <__match+0x12>
 8011b74:	6003      	str	r3, [r0, #0]
 8011b76:	2001      	movs	r0, #1
 8011b78:	bd30      	pop	{r4, r5, pc}
 8011b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011b82:	2d19      	cmp	r5, #25
 8011b84:	bf98      	it	ls
 8011b86:	3220      	addls	r2, #32
 8011b88:	42a2      	cmp	r2, r4
 8011b8a:	d0f0      	beq.n	8011b6e <__match+0x6>
 8011b8c:	2000      	movs	r0, #0
 8011b8e:	e7f3      	b.n	8011b78 <__match+0x10>

08011b90 <__hexnan>:
 8011b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b94:	680b      	ldr	r3, [r1, #0]
 8011b96:	6801      	ldr	r1, [r0, #0]
 8011b98:	115e      	asrs	r6, r3, #5
 8011b9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011b9e:	f013 031f 	ands.w	r3, r3, #31
 8011ba2:	b087      	sub	sp, #28
 8011ba4:	bf18      	it	ne
 8011ba6:	3604      	addne	r6, #4
 8011ba8:	2500      	movs	r5, #0
 8011baa:	1f37      	subs	r7, r6, #4
 8011bac:	4682      	mov	sl, r0
 8011bae:	4690      	mov	r8, r2
 8011bb0:	9301      	str	r3, [sp, #4]
 8011bb2:	f846 5c04 	str.w	r5, [r6, #-4]
 8011bb6:	46b9      	mov	r9, r7
 8011bb8:	463c      	mov	r4, r7
 8011bba:	9502      	str	r5, [sp, #8]
 8011bbc:	46ab      	mov	fp, r5
 8011bbe:	784a      	ldrb	r2, [r1, #1]
 8011bc0:	1c4b      	adds	r3, r1, #1
 8011bc2:	9303      	str	r3, [sp, #12]
 8011bc4:	b342      	cbz	r2, 8011c18 <__hexnan+0x88>
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	9105      	str	r1, [sp, #20]
 8011bca:	9204      	str	r2, [sp, #16]
 8011bcc:	f7ff fd94 	bl	80116f8 <__hexdig_fun>
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	d151      	bne.n	8011c78 <__hexnan+0xe8>
 8011bd4:	9a04      	ldr	r2, [sp, #16]
 8011bd6:	9905      	ldr	r1, [sp, #20]
 8011bd8:	2a20      	cmp	r2, #32
 8011bda:	d818      	bhi.n	8011c0e <__hexnan+0x7e>
 8011bdc:	9b02      	ldr	r3, [sp, #8]
 8011bde:	459b      	cmp	fp, r3
 8011be0:	dd13      	ble.n	8011c0a <__hexnan+0x7a>
 8011be2:	454c      	cmp	r4, r9
 8011be4:	d206      	bcs.n	8011bf4 <__hexnan+0x64>
 8011be6:	2d07      	cmp	r5, #7
 8011be8:	dc04      	bgt.n	8011bf4 <__hexnan+0x64>
 8011bea:	462a      	mov	r2, r5
 8011bec:	4649      	mov	r1, r9
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f7ff ffa8 	bl	8011b44 <L_shift>
 8011bf4:	4544      	cmp	r4, r8
 8011bf6:	d952      	bls.n	8011c9e <__hexnan+0x10e>
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	f1a4 0904 	sub.w	r9, r4, #4
 8011bfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c02:	f8cd b008 	str.w	fp, [sp, #8]
 8011c06:	464c      	mov	r4, r9
 8011c08:	461d      	mov	r5, r3
 8011c0a:	9903      	ldr	r1, [sp, #12]
 8011c0c:	e7d7      	b.n	8011bbe <__hexnan+0x2e>
 8011c0e:	2a29      	cmp	r2, #41	@ 0x29
 8011c10:	d157      	bne.n	8011cc2 <__hexnan+0x132>
 8011c12:	3102      	adds	r1, #2
 8011c14:	f8ca 1000 	str.w	r1, [sl]
 8011c18:	f1bb 0f00 	cmp.w	fp, #0
 8011c1c:	d051      	beq.n	8011cc2 <__hexnan+0x132>
 8011c1e:	454c      	cmp	r4, r9
 8011c20:	d206      	bcs.n	8011c30 <__hexnan+0xa0>
 8011c22:	2d07      	cmp	r5, #7
 8011c24:	dc04      	bgt.n	8011c30 <__hexnan+0xa0>
 8011c26:	462a      	mov	r2, r5
 8011c28:	4649      	mov	r1, r9
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	f7ff ff8a 	bl	8011b44 <L_shift>
 8011c30:	4544      	cmp	r4, r8
 8011c32:	d936      	bls.n	8011ca2 <__hexnan+0x112>
 8011c34:	f1a8 0204 	sub.w	r2, r8, #4
 8011c38:	4623      	mov	r3, r4
 8011c3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8011c3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011c42:	429f      	cmp	r7, r3
 8011c44:	d2f9      	bcs.n	8011c3a <__hexnan+0xaa>
 8011c46:	1b3b      	subs	r3, r7, r4
 8011c48:	f023 0303 	bic.w	r3, r3, #3
 8011c4c:	3304      	adds	r3, #4
 8011c4e:	3401      	adds	r4, #1
 8011c50:	3e03      	subs	r6, #3
 8011c52:	42b4      	cmp	r4, r6
 8011c54:	bf88      	it	hi
 8011c56:	2304      	movhi	r3, #4
 8011c58:	4443      	add	r3, r8
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	f843 2b04 	str.w	r2, [r3], #4
 8011c60:	429f      	cmp	r7, r3
 8011c62:	d2fb      	bcs.n	8011c5c <__hexnan+0xcc>
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	b91b      	cbnz	r3, 8011c70 <__hexnan+0xe0>
 8011c68:	4547      	cmp	r7, r8
 8011c6a:	d128      	bne.n	8011cbe <__hexnan+0x12e>
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	603b      	str	r3, [r7, #0]
 8011c70:	2005      	movs	r0, #5
 8011c72:	b007      	add	sp, #28
 8011c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c78:	3501      	adds	r5, #1
 8011c7a:	2d08      	cmp	r5, #8
 8011c7c:	f10b 0b01 	add.w	fp, fp, #1
 8011c80:	dd06      	ble.n	8011c90 <__hexnan+0x100>
 8011c82:	4544      	cmp	r4, r8
 8011c84:	d9c1      	bls.n	8011c0a <__hexnan+0x7a>
 8011c86:	2300      	movs	r3, #0
 8011c88:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c8c:	2501      	movs	r5, #1
 8011c8e:	3c04      	subs	r4, #4
 8011c90:	6822      	ldr	r2, [r4, #0]
 8011c92:	f000 000f 	and.w	r0, r0, #15
 8011c96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011c9a:	6020      	str	r0, [r4, #0]
 8011c9c:	e7b5      	b.n	8011c0a <__hexnan+0x7a>
 8011c9e:	2508      	movs	r5, #8
 8011ca0:	e7b3      	b.n	8011c0a <__hexnan+0x7a>
 8011ca2:	9b01      	ldr	r3, [sp, #4]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d0dd      	beq.n	8011c64 <__hexnan+0xd4>
 8011ca8:	f1c3 0320 	rsb	r3, r3, #32
 8011cac:	f04f 32ff 	mov.w	r2, #4294967295
 8011cb0:	40da      	lsrs	r2, r3
 8011cb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011cb6:	4013      	ands	r3, r2
 8011cb8:	f846 3c04 	str.w	r3, [r6, #-4]
 8011cbc:	e7d2      	b.n	8011c64 <__hexnan+0xd4>
 8011cbe:	3f04      	subs	r7, #4
 8011cc0:	e7d0      	b.n	8011c64 <__hexnan+0xd4>
 8011cc2:	2004      	movs	r0, #4
 8011cc4:	e7d5      	b.n	8011c72 <__hexnan+0xe2>

08011cc6 <__ascii_mbtowc>:
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	b901      	cbnz	r1, 8011ccc <__ascii_mbtowc+0x6>
 8011cca:	a901      	add	r1, sp, #4
 8011ccc:	b142      	cbz	r2, 8011ce0 <__ascii_mbtowc+0x1a>
 8011cce:	b14b      	cbz	r3, 8011ce4 <__ascii_mbtowc+0x1e>
 8011cd0:	7813      	ldrb	r3, [r2, #0]
 8011cd2:	600b      	str	r3, [r1, #0]
 8011cd4:	7812      	ldrb	r2, [r2, #0]
 8011cd6:	1e10      	subs	r0, r2, #0
 8011cd8:	bf18      	it	ne
 8011cda:	2001      	movne	r0, #1
 8011cdc:	b002      	add	sp, #8
 8011cde:	4770      	bx	lr
 8011ce0:	4610      	mov	r0, r2
 8011ce2:	e7fb      	b.n	8011cdc <__ascii_mbtowc+0x16>
 8011ce4:	f06f 0001 	mvn.w	r0, #1
 8011ce8:	e7f8      	b.n	8011cdc <__ascii_mbtowc+0x16>

08011cea <_realloc_r>:
 8011cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cee:	4680      	mov	r8, r0
 8011cf0:	4615      	mov	r5, r2
 8011cf2:	460c      	mov	r4, r1
 8011cf4:	b921      	cbnz	r1, 8011d00 <_realloc_r+0x16>
 8011cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cfa:	4611      	mov	r1, r2
 8011cfc:	f7fd bcfa 	b.w	800f6f4 <_malloc_r>
 8011d00:	b92a      	cbnz	r2, 8011d0e <_realloc_r+0x24>
 8011d02:	f7fd fc83 	bl	800f60c <_free_r>
 8011d06:	2400      	movs	r4, #0
 8011d08:	4620      	mov	r0, r4
 8011d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d0e:	f000 f840 	bl	8011d92 <_malloc_usable_size_r>
 8011d12:	4285      	cmp	r5, r0
 8011d14:	4606      	mov	r6, r0
 8011d16:	d802      	bhi.n	8011d1e <_realloc_r+0x34>
 8011d18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011d1c:	d8f4      	bhi.n	8011d08 <_realloc_r+0x1e>
 8011d1e:	4629      	mov	r1, r5
 8011d20:	4640      	mov	r0, r8
 8011d22:	f7fd fce7 	bl	800f6f4 <_malloc_r>
 8011d26:	4607      	mov	r7, r0
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	d0ec      	beq.n	8011d06 <_realloc_r+0x1c>
 8011d2c:	42b5      	cmp	r5, r6
 8011d2e:	462a      	mov	r2, r5
 8011d30:	4621      	mov	r1, r4
 8011d32:	bf28      	it	cs
 8011d34:	4632      	movcs	r2, r6
 8011d36:	f7fc fe74 	bl	800ea22 <memcpy>
 8011d3a:	4621      	mov	r1, r4
 8011d3c:	4640      	mov	r0, r8
 8011d3e:	f7fd fc65 	bl	800f60c <_free_r>
 8011d42:	463c      	mov	r4, r7
 8011d44:	e7e0      	b.n	8011d08 <_realloc_r+0x1e>

08011d46 <__ascii_wctomb>:
 8011d46:	4603      	mov	r3, r0
 8011d48:	4608      	mov	r0, r1
 8011d4a:	b141      	cbz	r1, 8011d5e <__ascii_wctomb+0x18>
 8011d4c:	2aff      	cmp	r2, #255	@ 0xff
 8011d4e:	d904      	bls.n	8011d5a <__ascii_wctomb+0x14>
 8011d50:	228a      	movs	r2, #138	@ 0x8a
 8011d52:	601a      	str	r2, [r3, #0]
 8011d54:	f04f 30ff 	mov.w	r0, #4294967295
 8011d58:	4770      	bx	lr
 8011d5a:	700a      	strb	r2, [r1, #0]
 8011d5c:	2001      	movs	r0, #1
 8011d5e:	4770      	bx	lr

08011d60 <fiprintf>:
 8011d60:	b40e      	push	{r1, r2, r3}
 8011d62:	b503      	push	{r0, r1, lr}
 8011d64:	4601      	mov	r1, r0
 8011d66:	ab03      	add	r3, sp, #12
 8011d68:	4805      	ldr	r0, [pc, #20]	@ (8011d80 <fiprintf+0x20>)
 8011d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d6e:	6800      	ldr	r0, [r0, #0]
 8011d70:	9301      	str	r3, [sp, #4]
 8011d72:	f7ff f9af 	bl	80110d4 <_vfiprintf_r>
 8011d76:	b002      	add	sp, #8
 8011d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d7c:	b003      	add	sp, #12
 8011d7e:	4770      	bx	lr
 8011d80:	24000028 	.word	0x24000028

08011d84 <abort>:
 8011d84:	b508      	push	{r3, lr}
 8011d86:	2006      	movs	r0, #6
 8011d88:	f000 f834 	bl	8011df4 <raise>
 8011d8c:	2001      	movs	r0, #1
 8011d8e:	f7f1 ff1e 	bl	8003bce <_exit>

08011d92 <_malloc_usable_size_r>:
 8011d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d96:	1f18      	subs	r0, r3, #4
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	bfbc      	itt	lt
 8011d9c:	580b      	ldrlt	r3, [r1, r0]
 8011d9e:	18c0      	addlt	r0, r0, r3
 8011da0:	4770      	bx	lr

08011da2 <_raise_r>:
 8011da2:	291f      	cmp	r1, #31
 8011da4:	b538      	push	{r3, r4, r5, lr}
 8011da6:	4605      	mov	r5, r0
 8011da8:	460c      	mov	r4, r1
 8011daa:	d904      	bls.n	8011db6 <_raise_r+0x14>
 8011dac:	2316      	movs	r3, #22
 8011dae:	6003      	str	r3, [r0, #0]
 8011db0:	f04f 30ff 	mov.w	r0, #4294967295
 8011db4:	bd38      	pop	{r3, r4, r5, pc}
 8011db6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011db8:	b112      	cbz	r2, 8011dc0 <_raise_r+0x1e>
 8011dba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011dbe:	b94b      	cbnz	r3, 8011dd4 <_raise_r+0x32>
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	f000 f831 	bl	8011e28 <_getpid_r>
 8011dc6:	4622      	mov	r2, r4
 8011dc8:	4601      	mov	r1, r0
 8011dca:	4628      	mov	r0, r5
 8011dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dd0:	f000 b818 	b.w	8011e04 <_kill_r>
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d00a      	beq.n	8011dee <_raise_r+0x4c>
 8011dd8:	1c59      	adds	r1, r3, #1
 8011dda:	d103      	bne.n	8011de4 <_raise_r+0x42>
 8011ddc:	2316      	movs	r3, #22
 8011dde:	6003      	str	r3, [r0, #0]
 8011de0:	2001      	movs	r0, #1
 8011de2:	e7e7      	b.n	8011db4 <_raise_r+0x12>
 8011de4:	2100      	movs	r1, #0
 8011de6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011dea:	4620      	mov	r0, r4
 8011dec:	4798      	blx	r3
 8011dee:	2000      	movs	r0, #0
 8011df0:	e7e0      	b.n	8011db4 <_raise_r+0x12>
	...

08011df4 <raise>:
 8011df4:	4b02      	ldr	r3, [pc, #8]	@ (8011e00 <raise+0xc>)
 8011df6:	4601      	mov	r1, r0
 8011df8:	6818      	ldr	r0, [r3, #0]
 8011dfa:	f7ff bfd2 	b.w	8011da2 <_raise_r>
 8011dfe:	bf00      	nop
 8011e00:	24000028 	.word	0x24000028

08011e04 <_kill_r>:
 8011e04:	b538      	push	{r3, r4, r5, lr}
 8011e06:	4d07      	ldr	r5, [pc, #28]	@ (8011e24 <_kill_r+0x20>)
 8011e08:	2300      	movs	r3, #0
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	4608      	mov	r0, r1
 8011e0e:	4611      	mov	r1, r2
 8011e10:	602b      	str	r3, [r5, #0]
 8011e12:	f7f1 fecc 	bl	8003bae <_kill>
 8011e16:	1c43      	adds	r3, r0, #1
 8011e18:	d102      	bne.n	8011e20 <_kill_r+0x1c>
 8011e1a:	682b      	ldr	r3, [r5, #0]
 8011e1c:	b103      	cbz	r3, 8011e20 <_kill_r+0x1c>
 8011e1e:	6023      	str	r3, [r4, #0]
 8011e20:	bd38      	pop	{r3, r4, r5, pc}
 8011e22:	bf00      	nop
 8011e24:	240008b4 	.word	0x240008b4

08011e28 <_getpid_r>:
 8011e28:	f7f1 beb9 	b.w	8003b9e <_getpid>

08011e2c <_init>:
 8011e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e2e:	bf00      	nop
 8011e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e32:	bc08      	pop	{r3}
 8011e34:	469e      	mov	lr, r3
 8011e36:	4770      	bx	lr

08011e38 <_fini>:
 8011e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e3a:	bf00      	nop
 8011e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e3e:	bc08      	pop	{r3}
 8011e40:	469e      	mov	lr, r3
 8011e42:	4770      	bx	lr
